
testing24_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013214  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  080133c4  080133c4  000233c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080135dc  080135dc  00030640  2**0
                  CONTENTS
  4 .ARM          00000008  080135dc  080135dc  000235dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080135e4  080135e4  00030640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080135e4  080135e4  000235e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080135e8  080135e8  000235e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000640  20000000  080135ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002404  20000640  08013c2c  00030640  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a44  08013c2c  00032a44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030640  2**0
                  CONTENTS, READONLY
 12 .debug_info   000399f2  00000000  00000000  00030670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007295  00000000  00000000  0006a062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e50  00000000  00000000  000712f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002b40  00000000  00000000  00074148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000381a2  00000000  00000000  00076c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003c4d1  00000000  00000000  000aee2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00139196  00000000  00000000  000eb2fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00224491  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cd50  00000000  00000000  002244e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000640 	.word	0x20000640
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080133ac 	.word	0x080133ac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000644 	.word	0x20000644
 80001ec:	080133ac 	.word	0x080133ac

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]
 80005b4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005b6:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005b8:	4a2f      	ldr	r2, [pc, #188]	; (8000678 <MX_ADC1_Init+0xe4>)
 80005ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005bc:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c2:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c8:	4b2a      	ldr	r3, [pc, #168]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ce:	4b29      	ldr	r3, [pc, #164]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d4:	4b27      	ldr	r3, [pc, #156]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005d6:	2204      	movs	r2, #4
 80005d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005da:	4b26      	ldr	r3, [pc, #152]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005dc:	2200      	movs	r2, #0
 80005de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e0:	4b24      	ldr	r3, [pc, #144]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005e6:	4b23      	ldr	r3, [pc, #140]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005fa:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000602:	2200      	movs	r2, #0
 8000604:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_ADC1_Init+0xe0>)
 800060a:	2200      	movs	r2, #0
 800060c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000616:	4817      	ldr	r0, [pc, #92]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000618:	f006 fef6 	bl	8007408 <HAL_ADC_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000622:	f001 f8d7 	bl	80017d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	4619      	mov	r1, r3
 8000630:	4810      	ldr	r0, [pc, #64]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000632:	f007 fc75 	bl	8007f20 <HAL_ADCEx_MultiModeConfigChannel>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800063c:	f001 f8ca 	bl	80017d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_ADC1_Init+0xe8>)
 8000642:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000644:	2306      	movs	r3, #6
 8000646:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800064c:	237f      	movs	r3, #127	; 0x7f
 800064e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000650:	2304      	movs	r3, #4
 8000652:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_ADC1_Init+0xe0>)
 800065e:	f007 f82d 	bl	80076bc <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000668:	f001 f8b4 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3728      	adds	r7, #40	; 0x28
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	2000065c 	.word	0x2000065c
 8000678:	50040000 	.word	0x50040000
 800067c:	10c00010 	.word	0x10c00010

08000680 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000686:	463b      	mov	r3, r7
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
 8000694:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000696:	4b29      	ldr	r3, [pc, #164]	; (800073c <MX_ADC2_Init+0xbc>)
 8000698:	4a29      	ldr	r2, [pc, #164]	; (8000740 <MX_ADC2_Init+0xc0>)
 800069a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <MX_ADC2_Init+0xbc>)
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006a2:	4b26      	ldr	r3, [pc, #152]	; (800073c <MX_ADC2_Init+0xbc>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a8:	4b24      	ldr	r3, [pc, #144]	; (800073c <MX_ADC2_Init+0xbc>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <MX_ADC2_Init+0xbc>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b4:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_ADC2_Init+0xbc>)
 80006b6:	2204      	movs	r2, #4
 80006b8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006ba:	4b20      	ldr	r3, [pc, #128]	; (800073c <MX_ADC2_Init+0xbc>)
 80006bc:	2200      	movs	r2, #0
 80006be:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006c0:	4b1e      	ldr	r3, [pc, #120]	; (800073c <MX_ADC2_Init+0xbc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_ADC2_Init+0xbc>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_ADC2_Init+0xbc>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d4:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_ADC2_Init+0xbc>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006da:	4b18      	ldr	r3, [pc, #96]	; (800073c <MX_ADC2_Init+0xbc>)
 80006dc:	2200      	movs	r2, #0
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_ADC2_Init+0xbc>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_ADC2_Init+0xbc>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_ADC2_Init+0xbc>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006f6:	4811      	ldr	r0, [pc, #68]	; (800073c <MX_ADC2_Init+0xbc>)
 80006f8:	f006 fe86 	bl	8007408 <HAL_ADC_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000702:	f001 f867 	bl	80017d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_ADC2_Init+0xc4>)
 8000708:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800070a:	2306      	movs	r3, #6
 800070c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000712:	237f      	movs	r3, #127	; 0x7f
 8000714:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000716:	2304      	movs	r3, #4
 8000718:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800071e:	463b      	mov	r3, r7
 8000720:	4619      	mov	r1, r3
 8000722:	4806      	ldr	r0, [pc, #24]	; (800073c <MX_ADC2_Init+0xbc>)
 8000724:	f006 ffca 	bl	80076bc <HAL_ADC_ConfigChannel>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 800072e:	f001 f851 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200006c4 	.word	0x200006c4
 8000740:	50040100 	.word	0x50040100
 8000744:	25b00200 	.word	0x25b00200

08000748 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800074e:	463b      	mov	r3, r7
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
 800075c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800075e:	4b29      	ldr	r3, [pc, #164]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000760:	4a29      	ldr	r2, [pc, #164]	; (8000808 <MX_ADC3_Init+0xc0>)
 8000762:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000766:	2200      	movs	r2, #0
 8000768:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <MX_ADC3_Init+0xbc>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000770:	4b24      	ldr	r3, [pc, #144]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000776:	4b23      	ldr	r3, [pc, #140]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077c:	4b21      	ldr	r3, [pc, #132]	; (8000804 <MX_ADC3_Init+0xbc>)
 800077e:	2204      	movs	r2, #4
 8000780:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000784:	2200      	movs	r2, #0
 8000786:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <MX_ADC3_Init+0xbc>)
 800078a:	2200      	movs	r2, #0
 800078c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000790:	2201      	movs	r2, #1
 8000792:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000796:	2200      	movs	r2, #0
 8000798:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_ADC3_Init+0xbc>)
 800079e:	2200      	movs	r2, #0
 80007a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007be:	4811      	ldr	r0, [pc, #68]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007c0:	f006 fe22 	bl	8007408 <HAL_ADC_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80007ca:	f001 f803 	bl	80017d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_ADC3_Init+0xc4>)
 80007d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d2:	2306      	movs	r3, #6
 80007d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007da:	237f      	movs	r3, #127	; 0x7f
 80007dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007de:	2304      	movs	r3, #4
 80007e0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007e6:	463b      	mov	r3, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007ec:	f006 ff66 	bl	80076bc <HAL_ADC_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80007f6:	f000 ffed 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	2000072c 	.word	0x2000072c
 8000808:	50040200 	.word	0x50040200
 800080c:	36902000 	.word	0x36902000

08000810 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08e      	sub	sp, #56	; 0x38
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a59      	ldr	r2, [pc, #356]	; (8000994 <HAL_ADC_MspInit+0x184>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d12d      	bne.n	800088e <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000832:	4b59      	ldr	r3, [pc, #356]	; (8000998 <HAL_ADC_MspInit+0x188>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	3301      	adds	r3, #1
 8000838:	4a57      	ldr	r2, [pc, #348]	; (8000998 <HAL_ADC_MspInit+0x188>)
 800083a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800083c:	4b56      	ldr	r3, [pc, #344]	; (8000998 <HAL_ADC_MspInit+0x188>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d10b      	bne.n	800085c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000844:	4b55      	ldr	r3, [pc, #340]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000848:	4a54      	ldr	r2, [pc, #336]	; (800099c <HAL_ADC_MspInit+0x18c>)
 800084a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800084e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000850:	4b52      	ldr	r3, [pc, #328]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000858:	623b      	str	r3, [r7, #32]
 800085a:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800085c:	4b4f      	ldr	r3, [pc, #316]	; (800099c <HAL_ADC_MspInit+0x18c>)
 800085e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000860:	4a4e      	ldr	r2, [pc, #312]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000868:	4b4c      	ldr	r3, [pc, #304]	; (800099c <HAL_ADC_MspInit+0x18c>)
 800086a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	61fb      	str	r3, [r7, #28]
 8000872:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 8000874:	2318      	movs	r3, #24
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000878:	230b      	movs	r3, #11
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000884:	4619      	mov	r1, r3
 8000886:	4846      	ldr	r0, [pc, #280]	; (80009a0 <HAL_ADC_MspInit+0x190>)
 8000888:	f007 fe9e 	bl	80085c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800088c:	e07e      	b.n	800098c <HAL_ADC_MspInit+0x17c>
  else if(adcHandle->Instance==ADC2)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a44      	ldr	r2, [pc, #272]	; (80009a4 <HAL_ADC_MspInit+0x194>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d146      	bne.n	8000926 <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000898:	4b3f      	ldr	r3, [pc, #252]	; (8000998 <HAL_ADC_MspInit+0x188>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	4a3e      	ldr	r2, [pc, #248]	; (8000998 <HAL_ADC_MspInit+0x188>)
 80008a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80008a2:	4b3d      	ldr	r3, [pc, #244]	; (8000998 <HAL_ADC_MspInit+0x188>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d10b      	bne.n	80008c2 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80008aa:	4b3c      	ldr	r3, [pc, #240]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a3b      	ldr	r2, [pc, #236]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b39      	ldr	r3, [pc, #228]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	4b36      	ldr	r3, [pc, #216]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a35      	ldr	r2, [pc, #212]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b33      	ldr	r3, [pc, #204]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b30      	ldr	r3, [pc, #192]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4a2f      	ldr	r2, [pc, #188]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4b2d      	ldr	r3, [pc, #180]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 80008f2:	2303      	movs	r3, #3
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008f6:	230b      	movs	r3, #11
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000902:	4619      	mov	r1, r3
 8000904:	4826      	ldr	r0, [pc, #152]	; (80009a0 <HAL_ADC_MspInit+0x190>)
 8000906:	f007 fe5f 	bl	80085c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 800090a:	2312      	movs	r3, #18
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800090e:	230b      	movs	r3, #11
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091a:	4619      	mov	r1, r3
 800091c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000920:	f007 fe52 	bl	80085c8 <HAL_GPIO_Init>
}
 8000924:	e032      	b.n	800098c <HAL_ADC_MspInit+0x17c>
  else if(adcHandle->Instance==ADC3)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a1f      	ldr	r2, [pc, #124]	; (80009a8 <HAL_ADC_MspInit+0x198>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d12d      	bne.n	800098c <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000930:	4b19      	ldr	r3, [pc, #100]	; (8000998 <HAL_ADC_MspInit+0x188>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	4a18      	ldr	r2, [pc, #96]	; (8000998 <HAL_ADC_MspInit+0x188>)
 8000938:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <HAL_ADC_MspInit+0x188>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d10b      	bne.n	800095a <HAL_ADC_MspInit+0x14a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a15      	ldr	r2, [pc, #84]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000948:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <HAL_ADC_MspInit+0x18c>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a0f      	ldr	r2, [pc, #60]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000960:	f043 0320 	orr.w	r3, r3, #32
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0320 	and.w	r3, r3, #32
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000978:	230b      	movs	r3, #11
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	4619      	mov	r1, r3
 8000986:	4809      	ldr	r0, [pc, #36]	; (80009ac <HAL_ADC_MspInit+0x19c>)
 8000988:	f007 fe1e 	bl	80085c8 <HAL_GPIO_Init>
}
 800098c:	bf00      	nop
 800098e:	3738      	adds	r7, #56	; 0x38
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	50040000 	.word	0x50040000
 8000998:	20000794 	.word	0x20000794
 800099c:	40021000 	.word	0x40021000
 80009a0:	48000800 	.word	0x48000800
 80009a4:	50040100 	.word	0x50040100
 80009a8:	50040200 	.word	0x50040200
 80009ac:	48001400 	.word	0x48001400

080009b0 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009b6:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <MX_DCMI_Init+0x64>)
 80009b8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80009cc:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80009d8:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009fe:	f007 fc51 	bl	80082a4 <HAL_DCMI_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000a08:	f000 fee4 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000798 	.word	0x20000798
 8000a14:	50050000 	.word	0x50050000

08000a18 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	; 0x30
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a33      	ldr	r2, [pc, #204]	; (8000b04 <HAL_DCMI_MspInit+0xec>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d160      	bne.n	8000afc <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000a3a:	4b33      	ldr	r3, [pc, #204]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a32      	ldr	r2, [pc, #200]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b30      	ldr	r3, [pc, #192]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4e:	61bb      	str	r3, [r7, #24]
 8000a50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a52:	4b2d      	ldr	r3, [pc, #180]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	4a2c      	ldr	r2, [pc, #176]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5e:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a6a:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4a26      	ldr	r2, [pc, #152]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a76:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	4a20      	ldr	r2, [pc, #128]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a88:	f043 0310 	orr.w	r3, r3, #16
 8000a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	f003 0310 	and.w	r3, r3, #16
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 8000a9a:	f645 7320 	movw	r3, #24352	; 0x5f20
 8000a9e:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000aac:	230a      	movs	r3, #10
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4815      	ldr	r0, [pc, #84]	; (8000b0c <HAL_DCMI_MspInit+0xf4>)
 8000ab8:	f007 fd86 	bl	80085c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8000abc:	23b0      	movs	r3, #176	; 0xb0
 8000abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000acc:	230a      	movs	r3, #10
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480e      	ldr	r0, [pc, #56]	; (8000b10 <HAL_DCMI_MspInit+0xf8>)
 8000ad8:	f007 fd76 	bl	80085c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8000adc:	2320      	movs	r3, #32
 8000ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000aec:	230a      	movs	r3, #10
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4619      	mov	r1, r3
 8000af6:	4807      	ldr	r0, [pc, #28]	; (8000b14 <HAL_DCMI_MspInit+0xfc>)
 8000af8:	f007 fd66 	bl	80085c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000afc:	bf00      	nop
 8000afe:	3730      	adds	r7, #48	; 0x30
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	50050000 	.word	0x50050000
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	48001c00 	.word	0x48001c00
 8000b10:	48002000 	.word	0x48002000
 8000b14:	48001000 	.word	0x48001000

08000b18 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;
DFSDM_Channel_HandleTypeDef hdfsdm1_channel2;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000b1c:	4b30      	ldr	r3, [pc, #192]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b1e:	4a31      	ldr	r2, [pc, #196]	; (8000be4 <MX_DFSDM1_Init+0xcc>)
 8000b20:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000b22:	4b2f      	ldr	r3, [pc, #188]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b28:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000b2e:	4b2c      	ldr	r3, [pc, #176]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b30:	2202      	movs	r2, #2
 8000b32:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b34:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b3a:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000b40:	4b27      	ldr	r3, [pc, #156]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000b46:	4b26      	ldr	r3, [pc, #152]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000b4c:	4b24      	ldr	r3, [pc, #144]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b4e:	2204      	movs	r2, #4
 8000b50:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b52:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000b58:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000b5e:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000b64:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000b6a:	481d      	ldr	r0, [pc, #116]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b6c:	f007 fc20 	bl	80083b0 <HAL_DFSDM_ChannelInit>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000b76:	f000 fe2d 	bl	80017d4 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b7c:	4a1b      	ldr	r2, [pc, #108]	; (8000bec <MX_DFSDM1_Init+0xd4>)
 8000b7e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000b80:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000b8c:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b8e:	2202      	movs	r2, #2
 8000b90:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ba4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bae:	2204      	movs	r2, #4
 8000bb0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000bca:	4807      	ldr	r0, [pc, #28]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bcc:	f007 fbf0 	bl	80083b0 <HAL_DFSDM_ChannelInit>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 8000bd6:	f000 fdfd 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200007fc 	.word	0x200007fc
 8000be4:	40016020 	.word	0x40016020
 8000be8:	20000834 	.word	0x20000834
 8000bec:	40016040 	.word	0x40016040

08000bf0 <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b0ae      	sub	sp, #184	; 0xb8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c08:	f107 0318 	add.w	r3, r7, #24
 8000c0c:	228c      	movs	r2, #140	; 0x8c
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f011 fbb7 	bl	8012384 <memset>
  if(DFSDM1_Init == 0)
 8000c16:	4b36      	ldr	r3, [pc, #216]	; (8000cf0 <HAL_DFSDM_ChannelMspInit+0x100>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d163      	bne.n	8000ce6 <HAL_DFSDM_ChannelMspInit+0xf6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c22:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c2a:	f107 0318 	add.w	r3, r7, #24
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f00a febe 	bl	800b9b0 <HAL_RCCEx_PeriphCLKConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000c3a:	f000 fdcb 	bl	80017d4 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000c3e:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c42:	4a2c      	ldr	r2, [pc, #176]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c48:	6613      	str	r3, [r2, #96]	; 0x60
 8000c4a:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	4a26      	ldr	r2, [pc, #152]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c62:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c72:	4a20      	ldr	r2, [pc, #128]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 8000c86:	2384      	movs	r3, #132	; 0x84
 8000c88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000c9e:	2306      	movs	r3, #6
 8000ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4813      	ldr	r0, [pc, #76]	; (8000cf8 <HAL_DFSDM_ChannelMspInit+0x108>)
 8000cac:	f007 fc8c 	bl	80085c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000cca:	2306      	movs	r3, #6
 8000ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4809      	ldr	r0, [pc, #36]	; (8000cfc <HAL_DFSDM_ChannelMspInit+0x10c>)
 8000cd8:	f007 fc76 	bl	80085c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <HAL_DFSDM_ChannelMspInit+0x100>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	4a03      	ldr	r2, [pc, #12]	; (8000cf0 <HAL_DFSDM_ChannelMspInit+0x100>)
 8000ce4:	6013      	str	r3, [r2, #0]
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	37b8      	adds	r7, #184	; 0xb8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2000086c 	.word	0x2000086c
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	48000800 	.word	0x48000800
 8000cfc:	48000400 	.word	0x48000400

08000d00 <MX_FMC_Init>:
SRAM_HandleTypeDef hsram1;
SRAM_HandleTypeDef hsram2;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000d06:	463b      	mov	r3, r7
 8000d08:	2220      	movs	r2, #32
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f011 fb39 	bl	8012384 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000d12:	4b4f      	ldr	r3, [pc, #316]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d14:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000d18:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000d1a:	4b4d      	ldr	r3, [pc, #308]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d1c:	4a4d      	ldr	r2, [pc, #308]	; (8000e54 <MX_FMC_Init+0x154>)
 8000d1e:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 8000d20:	4b4b      	ldr	r3, [pc, #300]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d22:	2202      	movs	r2, #2
 8000d24:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000d26:	4b4a      	ldr	r3, [pc, #296]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000d2c:	4b48      	ldr	r3, [pc, #288]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000d32:	4b47      	ldr	r3, [pc, #284]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d34:	2210      	movs	r2, #16
 8000d36:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000d38:	4b45      	ldr	r3, [pc, #276]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000d3e:	4b44      	ldr	r3, [pc, #272]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000d44:	4b42      	ldr	r3, [pc, #264]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000d4a:	4b41      	ldr	r3, [pc, #260]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000d50:	4b3f      	ldr	r3, [pc, #252]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000d56:	4b3e      	ldr	r3, [pc, #248]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000d5c:	4b3c      	ldr	r3, [pc, #240]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000d62:	4b3b      	ldr	r3, [pc, #236]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000d68:	4b39      	ldr	r3, [pc, #228]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000d6e:	4b38      	ldr	r3, [pc, #224]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000d74:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000d7a:	230f      	movs	r3, #15
 8000d7c:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000d7e:	230f      	movs	r3, #15
 8000d80:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000d82:	23ff      	movs	r3, #255	; 0xff
 8000d84:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8000d86:	230f      	movs	r3, #15
 8000d88:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000d8a:	2310      	movs	r3, #16
 8000d8c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000d8e:	2311      	movs	r3, #17
 8000d90:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000d96:	463b      	mov	r3, r7
 8000d98:	2200      	movs	r2, #0
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	482c      	ldr	r0, [pc, #176]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d9e:	f00c fbea 	bl	800d576 <HAL_SRAM_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 8000da8:	f000 fd14 	bl	80017d4 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8000dac:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dae:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000db2:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000db4:	4b28      	ldr	r3, [pc, #160]	; (8000e58 <MX_FMC_Init+0x158>)
 8000db6:	4a27      	ldr	r2, [pc, #156]	; (8000e54 <MX_FMC_Init+0x154>)
 8000db8:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 8000dba:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000dc0:	4b25      	ldr	r3, [pc, #148]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dce:	2210      	movs	r2, #16
 8000dd0:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <MX_FMC_Init+0x158>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000de4:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <MX_FMC_Init+0x158>)
 8000de6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dea:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <MX_FMC_Init+0x158>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000df8:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000dfe:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000e16:	230f      	movs	r3, #15
 8000e18:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000e1a:	230f      	movs	r3, #15
 8000e1c:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000e1e:	23ff      	movs	r3, #255	; 0xff
 8000e20:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8000e22:	230f      	movs	r3, #15
 8000e24:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000e26:	2310      	movs	r3, #16
 8000e28:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000e2a:	2311      	movs	r3, #17
 8000e2c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8000e32:	463b      	mov	r3, r7
 8000e34:	2200      	movs	r2, #0
 8000e36:	4619      	mov	r1, r3
 8000e38:	4807      	ldr	r0, [pc, #28]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e3a:	f00c fb9c 	bl	800d576 <HAL_SRAM_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 8000e44:	f000 fcc6 	bl	80017d4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000e48:	bf00      	nop
 8000e4a:	3720      	adds	r7, #32
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000870 	.word	0x20000870
 8000e54:	a0000104 	.word	0xa0000104
 8000e58:	200008c0 	.word	0x200008c0

08000e5c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000e70:	4b2b      	ldr	r3, [pc, #172]	; (8000f20 <HAL_FMC_MspInit+0xc4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d14f      	bne.n	8000f18 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 8000e78:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <HAL_FMC_MspInit+0xc4>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e7e:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <HAL_FMC_MspInit+0xc8>)
 8000e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e82:	4a28      	ldr	r2, [pc, #160]	; (8000f24 <HAL_FMC_MspInit+0xc8>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6513      	str	r3, [r2, #80]	; 0x50
 8000e8a:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <HAL_FMC_MspInit+0xc8>)
 8000e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 8000e96:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000e9a:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ea8:	230c      	movs	r3, #12
 8000eaa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	4619      	mov	r1, r3
 8000eb0:	481d      	ldr	r0, [pc, #116]	; (8000f28 <HAL_FMC_MspInit+0xcc>)
 8000eb2:	f007 fb89 	bl	80085c8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 8000eb6:	f240 233f 	movw	r3, #575	; 0x23f
 8000eba:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ec8:	230c      	movs	r3, #12
 8000eca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4816      	ldr	r0, [pc, #88]	; (8000f2c <HAL_FMC_MspInit+0xd0>)
 8000ed2:	f007 fb79 	bl	80085c8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 8000ed6:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8000eda:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ee8:	230c      	movs	r3, #12
 8000eea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480f      	ldr	r0, [pc, #60]	; (8000f30 <HAL_FMC_MspInit+0xd4>)
 8000ef2:	f007 fb69 	bl	80085c8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8000ef6:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000efa:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f08:	230c      	movs	r3, #12
 8000f0a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4808      	ldr	r0, [pc, #32]	; (8000f34 <HAL_FMC_MspInit+0xd8>)
 8000f12:	f007 fb59 	bl	80085c8 <HAL_GPIO_Init>
 8000f16:	e000      	b.n	8000f1a <HAL_FMC_MspInit+0xbe>
    return;
 8000f18:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000910 	.word	0x20000910
 8000f24:	40021000 	.word	0x40021000
 8000f28:	48001000 	.word	0x48001000
 8000f2c:	48001800 	.word	0x48001800
 8000f30:	48000c00 	.word	0x48000c00
 8000f34:	48001400 	.word	0x48001400

08000f38 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000f40:	f7ff ff8c 	bl	8000e5c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <MX_GPIO_Init>:
     PH13   ------> TIM8_CH1N
     PB9   ------> S_TIM4_CH4
     PA8   ------> LPTIM2_OUT
*/
void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08e      	sub	sp, #56	; 0x38
 8000f50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f62:	4baf      	ldr	r3, [pc, #700]	; (8001220 <MX_GPIO_Init+0x2d4>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4aae      	ldr	r2, [pc, #696]	; (8001220 <MX_GPIO_Init+0x2d4>)
 8000f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4bac      	ldr	r3, [pc, #688]	; (8001220 <MX_GPIO_Init+0x2d4>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f76:	623b      	str	r3, [r7, #32]
 8000f78:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7a:	4ba9      	ldr	r3, [pc, #676]	; (8001220 <MX_GPIO_Init+0x2d4>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4aa8      	ldr	r2, [pc, #672]	; (8001220 <MX_GPIO_Init+0x2d4>)
 8000f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4ba6      	ldr	r3, [pc, #664]	; (8001220 <MX_GPIO_Init+0x2d4>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8e:	61fb      	str	r3, [r7, #28]
 8000f90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f92:	4ba3      	ldr	r3, [pc, #652]	; (8001220 <MX_GPIO_Init+0x2d4>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	4aa2      	ldr	r2, [pc, #648]	; (8001220 <MX_GPIO_Init+0x2d4>)
 8000f98:	f043 0310 	orr.w	r3, r3, #16
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	4ba0      	ldr	r3, [pc, #640]	; (8001220 <MX_GPIO_Init+0x2d4>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	f003 0310 	and.w	r3, r3, #16
 8000fa6:	61bb      	str	r3, [r7, #24]
 8000fa8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	4b9d      	ldr	r3, [pc, #628]	; (8001220 <MX_GPIO_Init+0x2d4>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	4a9c      	ldr	r2, [pc, #624]	; (8001220 <MX_GPIO_Init+0x2d4>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb6:	4b9a      	ldr	r3, [pc, #616]	; (8001220 <MX_GPIO_Init+0x2d4>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	4b97      	ldr	r3, [pc, #604]	; (8001220 <MX_GPIO_Init+0x2d4>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	4a96      	ldr	r2, [pc, #600]	; (8001220 <MX_GPIO_Init+0x2d4>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fce:	4b94      	ldr	r3, [pc, #592]	; (8001220 <MX_GPIO_Init+0x2d4>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fda:	4b91      	ldr	r3, [pc, #580]	; (8001220 <MX_GPIO_Init+0x2d4>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4a90      	ldr	r2, [pc, #576]	; (8001220 <MX_GPIO_Init+0x2d4>)
 8000fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4b8e      	ldr	r3, [pc, #568]	; (8001220 <MX_GPIO_Init+0x2d4>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000ff2:	f009 fdcd 	bl	800ab90 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff6:	4b8a      	ldr	r3, [pc, #552]	; (8001220 <MX_GPIO_Init+0x2d4>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4a89      	ldr	r2, [pc, #548]	; (8001220 <MX_GPIO_Init+0x2d4>)
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4b87      	ldr	r3, [pc, #540]	; (8001220 <MX_GPIO_Init+0x2d4>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	4b84      	ldr	r3, [pc, #528]	; (8001220 <MX_GPIO_Init+0x2d4>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	4a83      	ldr	r2, [pc, #524]	; (8001220 <MX_GPIO_Init+0x2d4>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101a:	4b81      	ldr	r3, [pc, #516]	; (8001220 <MX_GPIO_Init+0x2d4>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001026:	4b7e      	ldr	r3, [pc, #504]	; (8001220 <MX_GPIO_Init+0x2d4>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	4a7d      	ldr	r2, [pc, #500]	; (8001220 <MX_GPIO_Init+0x2d4>)
 800102c:	f043 0320 	orr.w	r3, r3, #32
 8001030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001032:	4b7b      	ldr	r3, [pc, #492]	; (8001220 <MX_GPIO_Init+0x2d4>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	f003 0320 	and.w	r3, r3, #32
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2101      	movs	r1, #1
 8001042:	4878      	ldr	r0, [pc, #480]	; (8001224 <MX_GPIO_Init+0x2d8>)
 8001044:	f007 fc52 	bl	80088ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	2143      	movs	r1, #67	; 0x43
 800104c:	4876      	ldr	r0, [pc, #472]	; (8001228 <MX_GPIO_Init+0x2dc>)
 800104e:	f007 fc4d 	bl	80088ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2140      	movs	r1, #64	; 0x40
 8001056:	4875      	ldr	r0, [pc, #468]	; (800122c <MX_GPIO_Init+0x2e0>)
 8001058:	f007 fc48 	bl	80088ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001062:	4873      	ldr	r0, [pc, #460]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8001064:	f007 fc42 	bl	80088ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 8001068:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106e:	2300      	movs	r3, #0
 8001070:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001072:	2302      	movs	r3, #2
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107a:	4619      	mov	r1, r3
 800107c:	4869      	ldr	r0, [pc, #420]	; (8001224 <MX_GPIO_Init+0x2d8>)
 800107e:	f007 faa3 	bl	80085c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8001082:	2304      	movs	r3, #4
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001086:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8001090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001094:	4619      	mov	r1, r3
 8001096:	4864      	ldr	r0, [pc, #400]	; (8001228 <MX_GPIO_Init+0x2dc>)
 8001098:	f007 fa96 	bl	80085c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800109c:	2301      	movs	r3, #1
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b0:	4619      	mov	r1, r3
 80010b2:	485c      	ldr	r0, [pc, #368]	; (8001224 <MX_GPIO_Init+0x2d8>)
 80010b4:	f007 fa88 	bl	80085c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80010b8:	2340      	movs	r3, #64	; 0x40
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80010c8:	2303      	movs	r3, #3
 80010ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d0:	4619      	mov	r1, r3
 80010d2:	4854      	ldr	r0, [pc, #336]	; (8001224 <MX_GPIO_Init+0x2d8>)
 80010d4:	f007 fa78 	bl	80085c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 80010d8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80010ea:	2303      	movs	r3, #3
 80010ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f2:	4619      	mov	r1, r3
 80010f4:	484c      	ldr	r0, [pc, #304]	; (8001228 <MX_GPIO_Init+0x2dc>)
 80010f6:	f007 fa67 	bl	80085c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 80010fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2300      	movs	r3, #0
 800110a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800110c:	2302      	movs	r3, #2
 800110e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001114:	4619      	mov	r1, r3
 8001116:	4846      	ldr	r0, [pc, #280]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8001118:	f007 fa56 	bl	80085c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001120:	2300      	movs	r3, #0
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 8001128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112c:	4619      	mov	r1, r3
 800112e:	483e      	ldr	r0, [pc, #248]	; (8001228 <MX_GPIO_Init+0x2dc>)
 8001130:	f007 fa4a 	bl	80085c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 8001134:	2343      	movs	r3, #67	; 0x43
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001148:	4619      	mov	r1, r3
 800114a:	4837      	ldr	r0, [pc, #220]	; (8001228 <MX_GPIO_Init+0x2dc>)
 800114c:	f007 fa3c 	bl	80085c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8001150:	2340      	movs	r3, #64	; 0x40
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	2301      	movs	r3, #1
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001164:	4619      	mov	r1, r3
 8001166:	4831      	ldr	r0, [pc, #196]	; (800122c <MX_GPIO_Init+0x2e0>)
 8001168:	f007 fa2e 	bl	80085c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 800116c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001172:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 800117c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001180:	4619      	mov	r1, r3
 8001182:	482c      	ldr	r0, [pc, #176]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8001184:	f007 fa20 	bl	80085c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 8001188:	f44f 7380 	mov.w	r3, #256	; 0x100
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 800119a:	230e      	movs	r3, #14
 800119c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 800119e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a2:	4619      	mov	r1, r3
 80011a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a8:	f007 fa0e 	bl	80085c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 80011ac:	2320      	movs	r3, #32
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011be:	4619      	mov	r1, r3
 80011c0:	481a      	ldr	r0, [pc, #104]	; (800122c <MX_GPIO_Init+0x2e0>)
 80011c2:	f007 fa01 	bl	80085c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 80011c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011d0:	2302      	movs	r3, #2
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d8:	4619      	mov	r1, r3
 80011da:	4817      	ldr	r0, [pc, #92]	; (8001238 <MX_GPIO_Init+0x2ec>)
 80011dc:	f007 f9f4 	bl	80085c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 80011e0:	2304      	movs	r3, #4
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f0:	4619      	mov	r1, r3
 80011f2:	480f      	ldr	r0, [pc, #60]	; (8001230 <MX_GPIO_Init+0x2e4>)
 80011f4:	f007 f9e8 	bl	80085c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80011f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011fe:	2311      	movs	r3, #17
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120e:	4619      	mov	r1, r3
 8001210:	4807      	ldr	r0, [pc, #28]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8001212:	f007 f9d9 	bl	80085c8 <HAL_GPIO_Init>

}
 8001216:	bf00      	nop
 8001218:	3738      	adds	r7, #56	; 0x38
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40021000 	.word	0x40021000
 8001224:	48002000 	.word	0x48002000
 8001228:	48001c00 	.word	0x48001c00
 800122c:	48000800 	.word	0x48000800
 8001230:	48000400 	.word	0x48000400
 8001234:	48001800 	.word	0x48001800
 8001238:	48001400 	.word	0x48001400

0800123c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001242:	4a1c      	ldr	r2, [pc, #112]	; (80012b4 <MX_I2C1_Init+0x78>)
 8001244:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303651;
 8001246:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001248:	4a1b      	ldr	r2, [pc, #108]	; (80012b8 <MX_I2C1_Init+0x7c>)
 800124a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <MX_I2C1_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001254:	2201      	movs	r2, #1
 8001256:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <MX_I2C1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_I2C1_Init+0x74>)
 800126c:	2200      	movs	r2, #0
 800126e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001276:	480e      	ldr	r0, [pc, #56]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001278:	f007 fb50 	bl	800891c <HAL_I2C_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001282:	f000 faa7 	bl	80017d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001286:	2100      	movs	r1, #0
 8001288:	4809      	ldr	r0, [pc, #36]	; (80012b0 <MX_I2C1_Init+0x74>)
 800128a:	f008 f9a7 	bl	80095dc <HAL_I2CEx_ConfigAnalogFilter>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001294:	f000 fa9e 	bl	80017d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001298:	2100      	movs	r1, #0
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_I2C1_Init+0x74>)
 800129c:	f008 f9e9 	bl	8009672 <HAL_I2CEx_ConfigDigitalFilter>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012a6:	f000 fa95 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000914 	.word	0x20000914
 80012b4:	40005400 	.word	0x40005400
 80012b8:	00303651 	.word	0x00303651

080012bc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012c0:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <MX_I2C2_Init+0x74>)
 80012c2:	4a1c      	ldr	r2, [pc, #112]	; (8001334 <MX_I2C2_Init+0x78>)
 80012c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303651;
 80012c6:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <MX_I2C2_Init+0x74>)
 80012c8:	4a1b      	ldr	r2, [pc, #108]	; (8001338 <MX_I2C2_Init+0x7c>)
 80012ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80012cc:	4b18      	ldr	r3, [pc, #96]	; (8001330 <MX_I2C2_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d2:	4b17      	ldr	r3, [pc, #92]	; (8001330 <MX_I2C2_Init+0x74>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_I2C2_Init+0x74>)
 80012da:	2200      	movs	r2, #0
 80012dc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <MX_I2C2_Init+0x74>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <MX_I2C2_Init+0x74>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_I2C2_Init+0x74>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f0:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_I2C2_Init+0x74>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012f6:	480e      	ldr	r0, [pc, #56]	; (8001330 <MX_I2C2_Init+0x74>)
 80012f8:	f007 fb10 	bl	800891c <HAL_I2C_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001302:	f000 fa67 	bl	80017d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001306:	2100      	movs	r1, #0
 8001308:	4809      	ldr	r0, [pc, #36]	; (8001330 <MX_I2C2_Init+0x74>)
 800130a:	f008 f967 	bl	80095dc <HAL_I2CEx_ConfigAnalogFilter>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001314:	f000 fa5e 	bl	80017d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001318:	2100      	movs	r1, #0
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <MX_I2C2_Init+0x74>)
 800131c:	f008 f9a9 	bl	8009672 <HAL_I2CEx_ConfigDigitalFilter>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001326:	f000 fa55 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000968 	.word	0x20000968
 8001334:	40005800 	.word	0x40005800
 8001338:	00303651 	.word	0x00303651

0800133c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b0b0      	sub	sp, #192	; 0xc0
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001354:	f107 0320 	add.w	r3, r7, #32
 8001358:	228c      	movs	r2, #140	; 0x8c
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f011 f811 	bl	8012384 <memset>
  if(i2cHandle->Instance==I2C1)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a53      	ldr	r2, [pc, #332]	; (80014b4 <HAL_I2C_MspInit+0x178>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d13c      	bne.n	80013e6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800136c:	2340      	movs	r3, #64	; 0x40
 800136e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001370:	2300      	movs	r3, #0
 8001372:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001374:	f107 0320 	add.w	r3, r7, #32
 8001378:	4618      	mov	r0, r3
 800137a:	f00a fb19 	bl	800b9b0 <HAL_RCCEx_PeriphCLKConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001384:	f000 fa26 	bl	80017d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001388:	4b4b      	ldr	r3, [pc, #300]	; (80014b8 <HAL_I2C_MspInit+0x17c>)
 800138a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138c:	4a4a      	ldr	r2, [pc, #296]	; (80014b8 <HAL_I2C_MspInit+0x17c>)
 800138e:	f043 0302 	orr.w	r3, r3, #2
 8001392:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001394:	4b48      	ldr	r3, [pc, #288]	; (80014b8 <HAL_I2C_MspInit+0x17c>)
 8001396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	61fb      	str	r3, [r7, #28]
 800139e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80013a0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80013a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a8:	2312      	movs	r3, #18
 80013aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ba:	2304      	movs	r3, #4
 80013bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013c4:	4619      	mov	r1, r3
 80013c6:	483d      	ldr	r0, [pc, #244]	; (80014bc <HAL_I2C_MspInit+0x180>)
 80013c8:	f007 f8fe 	bl	80085c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013cc:	4b3a      	ldr	r3, [pc, #232]	; (80014b8 <HAL_I2C_MspInit+0x17c>)
 80013ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d0:	4a39      	ldr	r2, [pc, #228]	; (80014b8 <HAL_I2C_MspInit+0x17c>)
 80013d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013d6:	6593      	str	r3, [r2, #88]	; 0x58
 80013d8:	4b37      	ldr	r3, [pc, #220]	; (80014b8 <HAL_I2C_MspInit+0x17c>)
 80013da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e0:	61bb      	str	r3, [r7, #24]
 80013e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80013e4:	e061      	b.n	80014aa <HAL_I2C_MspInit+0x16e>
  else if(i2cHandle->Instance==I2C2)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a35      	ldr	r2, [pc, #212]	; (80014c0 <HAL_I2C_MspInit+0x184>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d15c      	bne.n	80014aa <HAL_I2C_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f8:	f107 0320 	add.w	r3, r7, #32
 80013fc:	4618      	mov	r0, r3
 80013fe:	f00a fad7 	bl	800b9b0 <HAL_RCCEx_PeriphCLKConfig>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001408:	f000 f9e4 	bl	80017d4 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800140c:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <HAL_I2C_MspInit+0x17c>)
 800140e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001410:	4a29      	ldr	r2, [pc, #164]	; (80014b8 <HAL_I2C_MspInit+0x17c>)
 8001412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001416:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001418:	4b27      	ldr	r3, [pc, #156]	; (80014b8 <HAL_I2C_MspInit+0x17c>)
 800141a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001424:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <HAL_I2C_MspInit+0x17c>)
 8001426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001428:	4a23      	ldr	r2, [pc, #140]	; (80014b8 <HAL_I2C_MspInit+0x17c>)
 800142a:	f043 0302 	orr.w	r3, r3, #2
 800142e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001430:	4b21      	ldr	r3, [pc, #132]	; (80014b8 <HAL_I2C_MspInit+0x17c>)
 8001432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 800143c:	2310      	movs	r3, #16
 800143e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001442:	2312      	movs	r3, #18
 8001444:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001448:	2301      	movs	r3, #1
 800144a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144e:	2303      	movs	r3, #3
 8001450:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001454:	2304      	movs	r3, #4
 8001456:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800145e:	4619      	mov	r1, r3
 8001460:	4818      	ldr	r0, [pc, #96]	; (80014c4 <HAL_I2C_MspInit+0x188>)
 8001462:	f007 f8b1 	bl	80085c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8001466:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800146a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800146e:	2312      	movs	r3, #18
 8001470:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001474:	2301      	movs	r3, #1
 8001476:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001480:	2304      	movs	r3, #4
 8001482:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8001486:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800148a:	4619      	mov	r1, r3
 800148c:	480b      	ldr	r0, [pc, #44]	; (80014bc <HAL_I2C_MspInit+0x180>)
 800148e:	f007 f89b 	bl	80085c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_I2C_MspInit+0x17c>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001496:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <HAL_I2C_MspInit+0x17c>)
 8001498:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800149c:	6593      	str	r3, [r2, #88]	; 0x58
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_I2C_MspInit+0x17c>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
}
 80014aa:	bf00      	nop
 80014ac:	37c0      	adds	r7, #192	; 0xc0
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40005400 	.word	0x40005400
 80014b8:	40021000 	.word	0x40021000
 80014bc:	48000400 	.word	0x48000400
 80014c0:	40005800 	.word	0x40005800
 80014c4:	48001c00 	.word	0x48001c00

080014c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b092      	sub	sp, #72	; 0x48
 80014cc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ce:	f005 fd62 	bl	8006f96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d2:	f000 f8e7 	bl	80016a4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80014d6:	f000 f947 	bl	8001768 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014da:	f7ff fd37 	bl	8000f4c <MX_GPIO_Init>
  MX_ADC1_Init();
 80014de:	f7ff f859 	bl	8000594 <MX_ADC1_Init>
  MX_ADC2_Init();
 80014e2:	f7ff f8cd 	bl	8000680 <MX_ADC2_Init>
  MX_ADC3_Init();
 80014e6:	f7ff f92f 	bl	8000748 <MX_ADC3_Init>
  MX_DCMI_Init();
 80014ea:	f7ff fa61 	bl	80009b0 <MX_DCMI_Init>
  MX_DFSDM1_Init();
 80014ee:	f7ff fb13 	bl	8000b18 <MX_DFSDM1_Init>
  MX_FMC_Init();
 80014f2:	f7ff fc05 	bl	8000d00 <MX_FMC_Init>
  MX_I2C1_Init();
 80014f6:	f7ff fea1 	bl	800123c <MX_I2C1_Init>
  MX_I2C2_Init();
 80014fa:	f7ff fedf 	bl	80012bc <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 80014fe:	f000 fdbf 	bl	8002080 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8001502:	f000 fdeb 	bl	80020dc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001506:	f000 fe19 	bl	800213c <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 800150a:	f000 f969 	bl	80017e0 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 800150e:	f000 f9f5 	bl	80018fc <MX_SAI1_Init>
  //MX_SDMMC1_SD_Init();
  MX_SPI1_Init();
 8001512:	f000 fb15 	bl	8001b40 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001516:	f000 fb51 	bl	8001bbc <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 800151a:	f010 f8f1 	bl	8011700 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 800151e:	f000 fd53 	bl	8001fc8 <MX_TIM6_Init>
  //ResetAndDetectSensor(1); // EK TODO: the parameter SetDisplay doesn't matter

  // EK test1
  HAL_StatusTypeDef status;
	uint8_t pData;
	status = HAL_I2C_Mem_Read(&hi2c1, 0x52, 0xC0, 1, &pData, 1, HAL_TIMEOUT);
 8001522:	2303      	movs	r3, #3
 8001524:	9302      	str	r3, [sp, #8]
 8001526:	2301      	movs	r3, #1
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2301      	movs	r3, #1
 8001532:	22c0      	movs	r2, #192	; 0xc0
 8001534:	2152      	movs	r1, #82	; 0x52
 8001536:	484f      	ldr	r0, [pc, #316]	; (8001674 <main+0x1ac>)
 8001538:	f007 fc6a 	bl	8008e10 <HAL_I2C_Mem_Read>
 800153c:	4603      	mov	r3, r0
 800153e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	// pData should be 0xEE
	if(status == HAL_OK) {
 8001542:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001546:	2b00      	cmp	r3, #0
 8001548:	d102      	bne.n	8001550 <main+0x88>
		printf("good");
 800154a:	484b      	ldr	r0, [pc, #300]	; (8001678 <main+0x1b0>)
 800154c:	f011 f802 	bl	8012554 <iprintf>
	}
	//--

  // EK test2
  VL53L0X_Dev_t *pDev;
	pDev = &VL53L0XDev;
 8001550:	4b4a      	ldr	r3, [pc, #296]	; (800167c <main+0x1b4>)
 8001552:	633b      	str	r3, [r7, #48]	; 0x30
	pDev->I2cDevAddr = 0x52;
 8001554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001556:	2252      	movs	r2, #82	; 0x52
 8001558:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	pDev->Present = 0;
 800155c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800155e:	2200      	movs	r2, #0
 8001560:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

  int status2 = VL53L0X_DataInit(pDev);
 8001564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001566:	f001 f985 	bl	8002874 <VL53L0X_DataInit>
 800156a:	4603      	mov	r3, r0
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if( status2 == 0 ){
 800156e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001570:	2b00      	cmp	r3, #0
 8001572:	d104      	bne.n	800157e <main+0xb6>
			pDev->Present = 1;
 8001574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001576:	2201      	movs	r2, #1
 8001578:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 800157c:	e002      	b.n	8001584 <main+0xbc>
	}
	else{
			printf("VL53L0X_DataInit fail\n");
 800157e:	4840      	ldr	r0, [pc, #256]	; (8001680 <main+0x1b8>)
 8001580:	f011 f86e 	bl	8012660 <puts>
	}
	printf("VL53L0X %d Present and initiated to final 0x%x\n", pDev->Id, pDev->I2cDevAddr);
 8001584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001586:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
 800158a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800158c:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8001590:	461a      	mov	r2, r3
 8001592:	483c      	ldr	r0, [pc, #240]	; (8001684 <main+0x1bc>)
 8001594:	f010 ffde 	bl	8012554 <iprintf>
	pDev->Present = 1;
 8001598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800159a:	2201      	movs	r2, #1
 800159c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	uint8_t isApertureSpads;
	VL53L0X_RangingMeasurementData_t RangingMeasurementData;
	//int range;

	// Initialize the device in continuous ranging mode
	VL53L0X_StaticInit(pDev);
 80015a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015a2:	f001 facb 	bl	8002b3c <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(pDev, &VhvSettings, &PhaseCal);
 80015a6:	f107 0229 	add.w	r2, r7, #41	; 0x29
 80015aa:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80015ae:	4619      	mov	r1, r3
 80015b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015b2:	f002 f973 	bl	800389c <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(pDev, &refSpadCount, &isApertureSpads);
 80015b6:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80015ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015be:	4619      	mov	r1, r3
 80015c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015c2:	f002 fdf9 	bl	80041b8 <VL53L0X_PerformRefSpadManagement>
	//VL53L0X_SetInterMeasurementPeriodMilliSeconds(pDev, 250); // Program continuous mode Inter-Measurement period in milliseconds
	//VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
	VL53L0X_SetInterMeasurementPeriodMilliSeconds(pDev, TIMED_RANGING_PERIOD);
 80015c6:	2132      	movs	r1, #50	; 0x32
 80015c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015ca:	f001 feb1 	bl	8003330 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>
	VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING);
 80015ce:	2103      	movs	r1, #3
 80015d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015d2:	f001 fcc5 	bl	8002f60 <VL53L0X_SetDeviceMode>

	// Start continuous ranging
	VL53L0X_StartMeasurement(pDev);
 80015d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015d8:	f002 f9dc 	bl	8003994 <VL53L0X_StartMeasurement>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  	if(HAL_GetTick()-last_sample >= TIMED_RANGING_PERIOD) {
 80015dc:	f005 fd44 	bl	8007068 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	4b29      	ldr	r3, [pc, #164]	; (8001688 <main+0x1c0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b31      	cmp	r3, #49	; 0x31
 80015ea:	d9f7      	bls.n	80015dc <main+0x114>

			VL53L0X_GetRangingMeasurementData(pDev, &RangingMeasurementData);
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	4619      	mov	r1, r3
 80015f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015f2:	f002 fad1 	bl	8003b98 <VL53L0X_GetRangingMeasurementData>
			range = RangingMeasurementData.RangeMilliMeter/10; // cm
 80015f6:	89bb      	ldrh	r3, [r7, #12]
 80015f8:	4a24      	ldr	r2, [pc, #144]	; (800168c <main+0x1c4>)
 80015fa:	fba2 2303 	umull	r2, r3, r2, r3
 80015fe:	08db      	lsrs	r3, r3, #3
 8001600:	b29a      	uxth	r2, r3
 8001602:	4b23      	ldr	r3, [pc, #140]	; (8001690 <main+0x1c8>)
 8001604:	801a      	strh	r2, [r3, #0]
			range_mm = RangingMeasurementData.RangeMilliMeter; // mm
 8001606:	89ba      	ldrh	r2, [r7, #12]
 8001608:	4b22      	ldr	r3, [pc, #136]	; (8001694 <main+0x1cc>)
 800160a:	801a      	strh	r2, [r3, #0]

			// check it's in range
			if(range_mm < 1000) {
 800160c:	4b21      	ldr	r3, [pc, #132]	; (8001694 <main+0x1cc>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001614:	d20d      	bcs.n	8001632 <main+0x16a>
				range_mm_sum += range_mm;
 8001616:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <main+0x1cc>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <main+0x1d0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4413      	add	r3, r2
 8001622:	4a1d      	ldr	r2, [pc, #116]	; (8001698 <main+0x1d0>)
 8001624:	6013      	str	r3, [r2, #0]
				sum_count++;
 8001626:	4b1d      	ldr	r3, [pc, #116]	; (800169c <main+0x1d4>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	3301      	adds	r3, #1
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4b1b      	ldr	r3, [pc, #108]	; (800169c <main+0x1d4>)
 8001630:	701a      	strb	r2, [r3, #0]
			}

			if(sum_count >= 20) { // 20 because 1 sample / 50 ms = 20 samples / s (1000/50=20)
 8001632:	4b1a      	ldr	r3, [pc, #104]	; (800169c <main+0x1d4>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b13      	cmp	r3, #19
 8001638:	d916      	bls.n	8001668 <main+0x1a0>
				range_mm_avg = (float)range_mm_sum / (float)sum_count;
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <main+0x1d0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <main+0x1d4>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	ee07 3a90 	vmov	s15, r3
 800164e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001652:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <main+0x1d8>)
 8001658:	edc3 7a00 	vstr	s15, [r3]
				sum_count = 0;
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <main+0x1d4>)
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
				range_mm_sum = 0;
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <main+0x1d0>)
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
				}
				*/

			}

			last_sample = HAL_GetTick();
 8001668:	f005 fcfe 	bl	8007068 <HAL_GetTick>
 800166c:	4603      	mov	r3, r0
 800166e:	4a06      	ldr	r2, [pc, #24]	; (8001688 <main+0x1c0>)
 8001670:	6013      	str	r3, [r2, #0]
  	if(HAL_GetTick()-last_sample >= TIMED_RANGING_PERIOD) {
 8001672:	e7b3      	b.n	80015dc <main+0x114>
 8001674:	20000914 	.word	0x20000914
 8001678:	08013494 	.word	0x08013494
 800167c:	20000000 	.word	0x20000000
 8001680:	0801349c 	.word	0x0801349c
 8001684:	0801343c 	.word	0x0801343c
 8001688:	200009cc 	.word	0x200009cc
 800168c:	cccccccd 	.word	0xcccccccd
 8001690:	200009bc 	.word	0x200009bc
 8001694:	200009be 	.word	0x200009be
 8001698:	200009c0 	.word	0x200009c0
 800169c:	200009c4 	.word	0x200009c4
 80016a0:	200009c8 	.word	0x200009c8

080016a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b096      	sub	sp, #88	; 0x58
 80016a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	2244      	movs	r2, #68	; 0x44
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f010 fe66 	bl	8012384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b8:	463b      	mov	r3, r7
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016ca:	f009 f9fb 	bl	800aac4 <HAL_PWREx_ControlVoltageScaling>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80016d4:	f000 f87e 	bl	80017d4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80016d8:	f009 f9d6 	bl	800aa88 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80016dc:	4b21      	ldr	r3, [pc, #132]	; (8001764 <SystemClock_Config+0xc0>)
 80016de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e2:	4a20      	ldr	r2, [pc, #128]	; (8001764 <SystemClock_Config+0xc0>)
 80016e4:	f023 0318 	bic.w	r3, r3, #24
 80016e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80016ec:	2314      	movs	r3, #20
 80016ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016f0:	2301      	movs	r3, #1
 80016f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016f4:	2301      	movs	r3, #1
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 80016fc:	2390      	movs	r3, #144	; 0x90
 80016fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001700:	2302      	movs	r3, #2
 8001702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001704:	2301      	movs	r3, #1
 8001706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001708:	2305      	movs	r3, #5
 800170a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 800170c:	2347      	movs	r3, #71	; 0x47
 800170e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001710:	2302      	movs	r3, #2
 8001712:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001714:	2302      	movs	r3, #2
 8001716:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8001718:	2306      	movs	r3, #6
 800171a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4618      	mov	r0, r3
 8001722:	f009 fb07 	bl	800ad34 <HAL_RCC_OscConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800172c:	f000 f852 	bl	80017d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001730:	230f      	movs	r3, #15
 8001732:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001734:	2303      	movs	r3, #3
 8001736:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8001738:	2390      	movs	r3, #144	; 0x90
 800173a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001740:	2300      	movs	r3, #0
 8001742:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001744:	463b      	mov	r3, r7
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f009 ff0d 	bl	800b568 <HAL_RCC_ClockConfig>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001754:	f000 f83e 	bl	80017d4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001758:	f00b f9de 	bl	800cb18 <HAL_RCCEx_EnableMSIPLLMode>
}
 800175c:	bf00      	nop
 800175e:	3758      	adds	r7, #88	; 0x58
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40021000 	.word	0x40021000

08001768 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b0a4      	sub	sp, #144	; 0x90
 800176c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	228c      	movs	r2, #140	; 0x8c
 8001772:	2100      	movs	r1, #0
 8001774:	4618      	mov	r0, r3
 8001776:	f010 fe05 	bl	8012384 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB
 800177a:	4b14      	ldr	r3, [pc, #80]	; (80017cc <PeriphCommonClock_Config+0x64>)
 800177c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800177e:	2300      	movs	r3, #0
 8001780:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001782:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001786:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800178a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800178e:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8001790:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001794:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001796:	2301      	movs	r3, #1
 8001798:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 800179a:	2305      	movs	r3, #5
 800179c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 800179e:	2314      	movs	r3, #20
 80017a0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80017a2:	2302      	movs	r3, #2
 80017a4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80017a6:	2302      	movs	r3, #2
 80017a8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80017aa:	2302      	movs	r3, #2
 80017ac:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <PeriphCommonClock_Config+0x68>)
 80017b0:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	4618      	mov	r0, r3
 80017b6:	f00a f8fb 	bl	800b9b0 <HAL_RCCEx_PeriphCLKConfig>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80017c0:	f000 f808 	bl	80017d4 <Error_Handler>
  }
}
 80017c4:	bf00      	nop
 80017c6:	3790      	adds	r7, #144	; 0x90
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	00086800 	.word	0x00086800
 80017d0:	01110000 	.word	0x01110000

080017d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d8:	b672      	cpsid	i
}
 80017da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017dc:	e7fe      	b.n	80017dc <Error_Handler+0x8>
	...

080017e0 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <MX_QUADSPI_Init+0x50>)
 80017e6:	4a13      	ldr	r2, [pc, #76]	; (8001834 <MX_QUADSPI_Init+0x54>)
 80017e8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_QUADSPI_Init+0x50>)
 80017ec:	2202      	movs	r2, #2
 80017ee:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <MX_QUADSPI_Init+0x50>)
 80017f2:	2204      	movs	r2, #4
 80017f4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <MX_QUADSPI_Init+0x50>)
 80017f8:	2210      	movs	r2, #16
 80017fa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_QUADSPI_Init+0x50>)
 80017fe:	2217      	movs	r2, #23
 8001800:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <MX_QUADSPI_Init+0x50>)
 8001804:	2200      	movs	r2, #0
 8001806:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_QUADSPI_Init+0x50>)
 800180a:	2200      	movs	r2, #0
 800180c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <MX_QUADSPI_Init+0x50>)
 8001810:	2200      	movs	r2, #0
 8001812:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_QUADSPI_Init+0x50>)
 8001816:	2200      	movs	r2, #0
 8001818:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_QUADSPI_Init+0x50>)
 800181c:	f009 f9c8 	bl	800abb0 <HAL_QSPI_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001826:	f7ff ffd5 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200009d0 	.word	0x200009d0
 8001834:	a0001000 	.word	0xa0001000

08001838 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a26      	ldr	r2, [pc, #152]	; (80018f0 <HAL_QSPI_MspInit+0xb8>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d145      	bne.n	80018e6 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800185a:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <HAL_QSPI_MspInit+0xbc>)
 800185c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800185e:	4a25      	ldr	r2, [pc, #148]	; (80018f4 <HAL_QSPI_MspInit+0xbc>)
 8001860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001864:	6513      	str	r3, [r2, #80]	; 0x50
 8001866:	4b23      	ldr	r3, [pc, #140]	; (80018f4 <HAL_QSPI_MspInit+0xbc>)
 8001868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800186a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001872:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <HAL_QSPI_MspInit+0xbc>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	4a1f      	ldr	r2, [pc, #124]	; (80018f4 <HAL_QSPI_MspInit+0xbc>)
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187e:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <HAL_QSPI_MspInit+0xbc>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <HAL_QSPI_MspInit+0xbc>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188e:	4a19      	ldr	r2, [pc, #100]	; (80018f4 <HAL_QSPI_MspInit+0xbc>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <HAL_QSPI_MspInit+0xbc>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 80018a2:	f640 0303 	movw	r3, #2051	; 0x803
 80018a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b0:	2303      	movs	r3, #3
 80018b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80018b4:	230a      	movs	r3, #10
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4619      	mov	r1, r3
 80018be:	480e      	ldr	r0, [pc, #56]	; (80018f8 <HAL_QSPI_MspInit+0xc0>)
 80018c0:	f006 fe82 	bl	80085c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 80018c4:	23c8      	movs	r3, #200	; 0xc8
 80018c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	2302      	movs	r3, #2
 80018ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d0:	2303      	movs	r3, #3
 80018d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80018d4:	230a      	movs	r3, #10
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	4619      	mov	r1, r3
 80018de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e2:	f006 fe71 	bl	80085c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80018e6:	bf00      	nop
 80018e8:	3728      	adds	r7, #40	; 0x28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	a0001000 	.word	0xa0001000
 80018f4:	40021000 	.word	0x40021000
 80018f8:	48000400 	.word	0x48000400

080018fc <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001900:	4b4d      	ldr	r3, [pc, #308]	; (8001a38 <MX_SAI1_Init+0x13c>)
 8001902:	4a4e      	ldr	r2, [pc, #312]	; (8001a3c <MX_SAI1_Init+0x140>)
 8001904:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001906:	4b4c      	ldr	r3, [pc, #304]	; (8001a38 <MX_SAI1_Init+0x13c>)
 8001908:	2200      	movs	r2, #0
 800190a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800190c:	4b4a      	ldr	r3, [pc, #296]	; (8001a38 <MX_SAI1_Init+0x13c>)
 800190e:	2200      	movs	r2, #0
 8001910:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8001912:	4b49      	ldr	r3, [pc, #292]	; (8001a38 <MX_SAI1_Init+0x13c>)
 8001914:	2240      	movs	r2, #64	; 0x40
 8001916:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001918:	4b47      	ldr	r3, [pc, #284]	; (8001a38 <MX_SAI1_Init+0x13c>)
 800191a:	2200      	movs	r2, #0
 800191c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800191e:	4b46      	ldr	r3, [pc, #280]	; (8001a38 <MX_SAI1_Init+0x13c>)
 8001920:	2200      	movs	r2, #0
 8001922:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001924:	4b44      	ldr	r3, [pc, #272]	; (8001a38 <MX_SAI1_Init+0x13c>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800192a:	4b43      	ldr	r3, [pc, #268]	; (8001a38 <MX_SAI1_Init+0x13c>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001930:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <MX_SAI1_Init+0x13c>)
 8001932:	2200      	movs	r2, #0
 8001934:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001936:	4b40      	ldr	r3, [pc, #256]	; (8001a38 <MX_SAI1_Init+0x13c>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800193c:	4b3e      	ldr	r3, [pc, #248]	; (8001a38 <MX_SAI1_Init+0x13c>)
 800193e:	4a40      	ldr	r2, [pc, #256]	; (8001a40 <MX_SAI1_Init+0x144>)
 8001940:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001942:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <MX_SAI1_Init+0x13c>)
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001948:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <MX_SAI1_Init+0x13c>)
 800194a:	2200      	movs	r2, #0
 800194c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800194e:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <MX_SAI1_Init+0x13c>)
 8001950:	2200      	movs	r2, #0
 8001952:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001954:	4b38      	ldr	r3, [pc, #224]	; (8001a38 <MX_SAI1_Init+0x13c>)
 8001956:	2200      	movs	r2, #0
 8001958:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 800195a:	4b37      	ldr	r3, [pc, #220]	; (8001a38 <MX_SAI1_Init+0x13c>)
 800195c:	2208      	movs	r2, #8
 800195e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001960:	4b35      	ldr	r3, [pc, #212]	; (8001a38 <MX_SAI1_Init+0x13c>)
 8001962:	2201      	movs	r2, #1
 8001964:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001966:	4b34      	ldr	r3, [pc, #208]	; (8001a38 <MX_SAI1_Init+0x13c>)
 8001968:	2200      	movs	r2, #0
 800196a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800196c:	4b32      	ldr	r3, [pc, #200]	; (8001a38 <MX_SAI1_Init+0x13c>)
 800196e:	2200      	movs	r2, #0
 8001970:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001972:	4b31      	ldr	r3, [pc, #196]	; (8001a38 <MX_SAI1_Init+0x13c>)
 8001974:	2200      	movs	r2, #0
 8001976:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001978:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <MX_SAI1_Init+0x13c>)
 800197a:	2200      	movs	r2, #0
 800197c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800197e:	4b2e      	ldr	r3, [pc, #184]	; (8001a38 <MX_SAI1_Init+0x13c>)
 8001980:	2200      	movs	r2, #0
 8001982:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001984:	4b2c      	ldr	r3, [pc, #176]	; (8001a38 <MX_SAI1_Init+0x13c>)
 8001986:	2201      	movs	r2, #1
 8001988:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 800198a:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <MX_SAI1_Init+0x13c>)
 800198c:	2200      	movs	r2, #0
 800198e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001990:	4829      	ldr	r0, [pc, #164]	; (8001a38 <MX_SAI1_Init+0x13c>)
 8001992:	f00b fba1 	bl	800d0d8 <HAL_SAI_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 800199c:	f7ff ff1a 	bl	80017d4 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 80019a0:	4b28      	ldr	r3, [pc, #160]	; (8001a44 <MX_SAI1_Init+0x148>)
 80019a2:	4a29      	ldr	r2, [pc, #164]	; (8001a48 <MX_SAI1_Init+0x14c>)
 80019a4:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 80019a6:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <MX_SAI1_Init+0x148>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80019ac:	4b25      	ldr	r3, [pc, #148]	; (8001a44 <MX_SAI1_Init+0x148>)
 80019ae:	2203      	movs	r2, #3
 80019b0:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 80019b2:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <MX_SAI1_Init+0x148>)
 80019b4:	2240      	movs	r2, #64	; 0x40
 80019b6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80019b8:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <MX_SAI1_Init+0x148>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80019be:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <MX_SAI1_Init+0x148>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80019c4:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <MX_SAI1_Init+0x148>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80019ca:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <MX_SAI1_Init+0x148>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80019d0:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <MX_SAI1_Init+0x148>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80019d6:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <MX_SAI1_Init+0x148>)
 80019d8:	2200      	movs	r2, #0
 80019da:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80019dc:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <MX_SAI1_Init+0x148>)
 80019de:	2200      	movs	r2, #0
 80019e0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <MX_SAI1_Init+0x148>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <MX_SAI1_Init+0x148>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <MX_SAI1_Init+0x148>)
 80019f0:	2208      	movs	r2, #8
 80019f2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80019f4:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <MX_SAI1_Init+0x148>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <MX_SAI1_Init+0x148>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001a00:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <MX_SAI1_Init+0x148>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001a06:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <MX_SAI1_Init+0x148>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001a0c:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <MX_SAI1_Init+0x148>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <MX_SAI1_Init+0x148>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <MX_SAI1_Init+0x148>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <MX_SAI1_Init+0x148>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001a24:	4807      	ldr	r0, [pc, #28]	; (8001a44 <MX_SAI1_Init+0x148>)
 8001a26:	f00b fb57 	bl	800d0d8 <HAL_SAI_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8001a30:	f7ff fed0 	bl	80017d4 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000a1c 	.word	0x20000a1c
 8001a3c:	40015404 	.word	0x40015404
 8001a40:	0002ee00 	.word	0x0002ee00
 8001a44:	20000aa0 	.word	0x20000aa0
 8001a48:	40015424 	.word	0x40015424

08001a4c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a33      	ldr	r2, [pc, #204]	; (8001b28 <HAL_SAI_MspInit+0xdc>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d135      	bne.n	8001aca <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8001a5e:	4b33      	ldr	r3, [pc, #204]	; (8001b2c <HAL_SAI_MspInit+0xe0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10b      	bne.n	8001a7e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001a66:	4b32      	ldr	r3, [pc, #200]	; (8001b30 <HAL_SAI_MspInit+0xe4>)
 8001a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a6a:	4a31      	ldr	r2, [pc, #196]	; (8001b30 <HAL_SAI_MspInit+0xe4>)
 8001a6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a70:	6613      	str	r3, [r2, #96]	; 0x60
 8001a72:	4b2f      	ldr	r3, [pc, #188]	; (8001b30 <HAL_SAI_MspInit+0xe4>)
 8001a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001a7e:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <HAL_SAI_MspInit+0xe0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	3301      	adds	r3, #1
 8001a84:	4a29      	ldr	r2, [pc, #164]	; (8001b2c <HAL_SAI_MspInit+0xe0>)
 8001a86:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 8001a88:	2354      	movs	r3, #84	; 0x54
 8001a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001a98:	230d      	movs	r3, #13
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4824      	ldr	r0, [pc, #144]	; (8001b34 <HAL_SAI_MspInit+0xe8>)
 8001aa4:	f006 fd90 	bl	80085c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001aba:	230d      	movs	r3, #13
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	481c      	ldr	r0, [pc, #112]	; (8001b38 <HAL_SAI_MspInit+0xec>)
 8001ac6:	f006 fd7f 	bl	80085c8 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI1_Block_B)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1b      	ldr	r2, [pc, #108]	; (8001b3c <HAL_SAI_MspInit+0xf0>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d124      	bne.n	8001b1e <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8001ad4:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <HAL_SAI_MspInit+0xe0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d10b      	bne.n	8001af4 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001adc:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <HAL_SAI_MspInit+0xe4>)
 8001ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae0:	4a13      	ldr	r2, [pc, #76]	; (8001b30 <HAL_SAI_MspInit+0xe4>)
 8001ae2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ae6:	6613      	str	r3, [r2, #96]	; 0x60
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_SAI_MspInit+0xe4>)
 8001aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001af4:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <HAL_SAI_MspInit+0xe0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	3301      	adds	r3, #1
 8001afa:	4a0c      	ldr	r2, [pc, #48]	; (8001b2c <HAL_SAI_MspInit+0xe0>)
 8001afc:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 8001afe:	2308      	movs	r3, #8
 8001b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001b0e:	230d      	movs	r3, #13
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 8001b12:	f107 0314 	add.w	r3, r7, #20
 8001b16:	4619      	mov	r1, r3
 8001b18:	4806      	ldr	r0, [pc, #24]	; (8001b34 <HAL_SAI_MspInit+0xe8>)
 8001b1a:	f006 fd55 	bl	80085c8 <HAL_GPIO_Init>

    }
}
 8001b1e:	bf00      	nop
 8001b20:	3728      	adds	r7, #40	; 0x28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40015404 	.word	0x40015404
 8001b2c:	20000b24 	.word	0x20000b24
 8001b30:	40021000 	.word	0x40021000
 8001b34:	48001000 	.word	0x48001000
 8001b38:	48000400 	.word	0x48000400
 8001b3c:	40015424 	.word	0x40015424

08001b40 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b44:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <MX_SPI1_Init+0x74>)
 8001b46:	4a1c      	ldr	r2, [pc, #112]	; (8001bb8 <MX_SPI1_Init+0x78>)
 8001b48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <MX_SPI1_Init+0x74>)
 8001b4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <MX_SPI1_Init+0x74>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001b58:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <MX_SPI1_Init+0x74>)
 8001b5a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001b5e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <MX_SPI1_Init+0x74>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <MX_SPI1_Init+0x74>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <MX_SPI1_Init+0x74>)
 8001b6e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b72:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <MX_SPI1_Init+0x74>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <MX_SPI1_Init+0x74>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <MX_SPI1_Init+0x74>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <MX_SPI1_Init+0x74>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <MX_SPI1_Init+0x74>)
 8001b8e:	2207      	movs	r2, #7
 8001b90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <MX_SPI1_Init+0x74>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <MX_SPI1_Init+0x74>)
 8001b9a:	2208      	movs	r2, #8
 8001b9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <MX_SPI1_Init+0x74>)
 8001ba0:	f00b fc46 	bl	800d430 <HAL_SPI_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001baa:	f7ff fe13 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000b28 	.word	0x20000b28
 8001bb8:	40013000 	.word	0x40013000

08001bbc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001bc2:	4a1c      	ldr	r2, [pc, #112]	; (8001c34 <MX_SPI2_Init+0x78>)
 8001bc4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001bc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bcc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001bce:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001bd4:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001bd6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001bda:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bdc:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001be2:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bee:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c02:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001c08:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001c0a:	2207      	movs	r2, #7
 8001c0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c0e:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001c16:	2208      	movs	r2, #8
 8001c18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001c1c:	f00b fc08 	bl	800d430 <HAL_SPI_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001c26:	f7ff fdd5 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000b8c 	.word	0x20000b8c
 8001c34:	40003800 	.word	0x40003800

08001c38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08e      	sub	sp, #56	; 0x38
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a4b      	ldr	r2, [pc, #300]	; (8001d84 <HAL_SPI_MspInit+0x14c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d146      	bne.n	8001ce8 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c5a:	4b4b      	ldr	r3, [pc, #300]	; (8001d88 <HAL_SPI_MspInit+0x150>)
 8001c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5e:	4a4a      	ldr	r2, [pc, #296]	; (8001d88 <HAL_SPI_MspInit+0x150>)
 8001c60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c64:	6613      	str	r3, [r2, #96]	; 0x60
 8001c66:	4b48      	ldr	r3, [pc, #288]	; (8001d88 <HAL_SPI_MspInit+0x150>)
 8001c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c6e:	623b      	str	r3, [r7, #32]
 8001c70:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c72:	4b45      	ldr	r3, [pc, #276]	; (8001d88 <HAL_SPI_MspInit+0x150>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	4a44      	ldr	r2, [pc, #272]	; (8001d88 <HAL_SPI_MspInit+0x150>)
 8001c78:	f043 0302 	orr.w	r3, r3, #2
 8001c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7e:	4b42      	ldr	r3, [pc, #264]	; (8001d88 <HAL_SPI_MspInit+0x150>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	61fb      	str	r3, [r7, #28]
 8001c88:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8a:	4b3f      	ldr	r3, [pc, #252]	; (8001d88 <HAL_SPI_MspInit+0x150>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8e:	4a3e      	ldr	r2, [pc, #248]	; (8001d88 <HAL_SPI_MspInit+0x150>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c96:	4b3c      	ldr	r3, [pc, #240]	; (8001d88 <HAL_SPI_MspInit+0x150>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	61bb      	str	r3, [r7, #24]
 8001ca0:	69bb      	ldr	r3, [r7, #24]
    PB4 (NJTRST)     ------> SPI1_MISO
    PA15 (JTDI)     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001ca2:	2330      	movs	r3, #48	; 0x30
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cb2:	2305      	movs	r3, #5
 8001cb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4833      	ldr	r0, [pc, #204]	; (8001d8c <HAL_SPI_MspInit+0x154>)
 8001cbe:	f006 fc83 	bl	80085c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 8001cc2:	f248 0320 	movw	r3, #32800	; 0x8020
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cd4:	2305      	movs	r3, #5
 8001cd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce2:	f006 fc71 	bl	80085c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001ce6:	e049      	b.n	8001d7c <HAL_SPI_MspInit+0x144>
  else if(spiHandle->Instance==SPI2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a28      	ldr	r2, [pc, #160]	; (8001d90 <HAL_SPI_MspInit+0x158>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d144      	bne.n	8001d7c <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cf2:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <HAL_SPI_MspInit+0x150>)
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf6:	4a24      	ldr	r2, [pc, #144]	; (8001d88 <HAL_SPI_MspInit+0x150>)
 8001cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cfc:	6593      	str	r3, [r2, #88]	; 0x58
 8001cfe:	4b22      	ldr	r3, [pc, #136]	; (8001d88 <HAL_SPI_MspInit+0x150>)
 8001d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d0a:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <HAL_SPI_MspInit+0x150>)
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0e:	4a1e      	ldr	r2, [pc, #120]	; (8001d88 <HAL_SPI_MspInit+0x150>)
 8001d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d16:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <HAL_SPI_MspInit+0x150>)
 8001d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d22:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <HAL_SPI_MspInit+0x150>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	4a18      	ldr	r2, [pc, #96]	; (8001d88 <HAL_SPI_MspInit+0x150>)
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d2e:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <HAL_SPI_MspInit+0x150>)
 8001d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 8001d3a:	2306      	movs	r3, #6
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d46:	2303      	movs	r3, #3
 8001d48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d4a:	2305      	movs	r3, #5
 8001d4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d52:	4619      	mov	r1, r3
 8001d54:	480f      	ldr	r0, [pc, #60]	; (8001d94 <HAL_SPI_MspInit+0x15c>)
 8001d56:	f006 fc37 	bl	80085c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8001d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d60:	2302      	movs	r3, #2
 8001d62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d6c:	2305      	movs	r3, #5
 8001d6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d74:	4619      	mov	r1, r3
 8001d76:	4805      	ldr	r0, [pc, #20]	; (8001d8c <HAL_SPI_MspInit+0x154>)
 8001d78:	f006 fc26 	bl	80085c8 <HAL_GPIO_Init>
}
 8001d7c:	bf00      	nop
 8001d7e:	3738      	adds	r7, #56	; 0x38
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40013000 	.word	0x40013000
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	48000400 	.word	0x48000400
 8001d90:	40003800 	.word	0x40003800
 8001d94:	48002000 	.word	0x48002000

08001d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <HAL_MspInit+0x44>)
 8001da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da2:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <HAL_MspInit+0x44>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6613      	str	r3, [r2, #96]	; 0x60
 8001daa:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <HAL_MspInit+0x44>)
 8001dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_MspInit+0x44>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dba:	4a08      	ldr	r2, [pc, #32]	; (8001ddc <HAL_MspInit+0x44>)
 8001dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_MspInit+0x44>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000

08001de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <NMI_Handler+0x4>

08001de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dea:	e7fe      	b.n	8001dea <HardFault_Handler+0x4>

08001dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df0:	e7fe      	b.n	8001df0 <MemManage_Handler+0x4>

08001df2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df6:	e7fe      	b.n	8001df6 <BusFault_Handler+0x4>

08001df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <UsageFault_Handler+0x4>

08001dfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e2c:	f005 f908 	bl	8007040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <TIM6_DAC_IRQHandler+0x10>)
 8001e3a:	f00b fc3b 	bl	800d6b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000bf4 	.word	0x20000bf4

08001e48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <OTG_FS_IRQHandler+0x10>)
 8001e4e:	f007 fdaf 	bl	80099b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20002308 	.word	0x20002308

08001e5c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	e00a      	b.n	8001e84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e6e:	f3af 8000 	nop.w
 8001e72:	4601      	mov	r1, r0
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	60ba      	str	r2, [r7, #8]
 8001e7a:	b2ca      	uxtb	r2, r1
 8001e7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	3301      	adds	r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	dbf0      	blt.n	8001e6e <_read+0x12>
	}

return len;
 8001e8c:	687b      	ldr	r3, [r7, #4]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	e009      	b.n	8001ebc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	60ba      	str	r2, [r7, #8]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	dbf1      	blt.n	8001ea8 <_write+0x12>
	}
	return len;
 8001ec4:	687b      	ldr	r3, [r7, #4]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <_close>:

int _close(int file)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ef6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <_isatty>:

int _isatty(int file)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
	return 1;
 8001f0e:	2301      	movs	r3, #1
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
	return 0;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <_sbrk+0x5c>)
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <_sbrk+0x60>)
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f4c:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <_sbrk+0x64>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d102      	bne.n	8001f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <_sbrk+0x64>)
 8001f56:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <_sbrk+0x68>)
 8001f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <_sbrk+0x64>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d207      	bcs.n	8001f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f68:	f010 f9d4 	bl	8012314 <__errno>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	220c      	movs	r2, #12
 8001f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f76:	e009      	b.n	8001f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <_sbrk+0x64>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f7e:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <_sbrk+0x64>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	4a05      	ldr	r2, [pc, #20]	; (8001f9c <_sbrk+0x64>)
 8001f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20050000 	.word	0x20050000
 8001f98:	00000400 	.word	0x00000400
 8001f9c:	20000bf0 	.word	0x20000bf0
 8001fa0:	20002a48 	.word	0x20002a48

08001fa4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <SystemInit+0x20>)
 8001faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fae:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <SystemInit+0x20>)
 8001fb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001fd8:	4b14      	ldr	r3, [pc, #80]	; (800202c <MX_TIM6_Init+0x64>)
 8001fda:	4a15      	ldr	r2, [pc, #84]	; (8002030 <MX_TIM6_Init+0x68>)
 8001fdc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 8001fde:	4b13      	ldr	r3, [pc, #76]	; (800202c <MX_TIM6_Init+0x64>)
 8001fe0:	220a      	movs	r2, #10
 8001fe2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <MX_TIM6_Init+0x64>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001fea:	4b10      	ldr	r3, [pc, #64]	; (800202c <MX_TIM6_Init+0x64>)
 8001fec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ff0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	; (800202c <MX_TIM6_Init+0x64>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ff8:	480c      	ldr	r0, [pc, #48]	; (800202c <MX_TIM6_Init+0x64>)
 8001ffa:	f00b fb04 	bl	800d606 <HAL_TIM_Base_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002004:	f7ff fbe6 	bl	80017d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002008:	2300      	movs	r3, #0
 800200a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	4619      	mov	r1, r3
 8002014:	4805      	ldr	r0, [pc, #20]	; (800202c <MX_TIM6_Init+0x64>)
 8002016:	f00b fd39 	bl	800da8c <HAL_TIMEx_MasterConfigSynchronization>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002020:	f7ff fbd8 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002024:	bf00      	nop
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000bf4 	.word	0x20000bf4
 8002030:	40001000 	.word	0x40001000

08002034 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a0d      	ldr	r2, [pc, #52]	; (8002078 <HAL_TIM_Base_MspInit+0x44>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d113      	bne.n	800206e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002046:	4b0d      	ldr	r3, [pc, #52]	; (800207c <HAL_TIM_Base_MspInit+0x48>)
 8002048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204a:	4a0c      	ldr	r2, [pc, #48]	; (800207c <HAL_TIM_Base_MspInit+0x48>)
 800204c:	f043 0310 	orr.w	r3, r3, #16
 8002050:	6593      	str	r3, [r2, #88]	; 0x58
 8002052:	4b0a      	ldr	r3, [pc, #40]	; (800207c <HAL_TIM_Base_MspInit+0x48>)
 8002054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800205e:	2200      	movs	r2, #0
 8002060:	2100      	movs	r1, #0
 8002062:	2036      	movs	r0, #54	; 0x36
 8002064:	f006 f8e7 	bl	8008236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002068:	2036      	movs	r0, #54	; 0x36
 800206a:	f006 f900 	bl	800826e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40001000 	.word	0x40001000
 800207c:	40021000 	.word	0x40021000

08002080 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <MX_LPUART1_UART_Init+0x50>)
 8002086:	4a13      	ldr	r2, [pc, #76]	; (80020d4 <MX_LPUART1_UART_Init+0x54>)
 8002088:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800208a:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <MX_LPUART1_UART_Init+0x50>)
 800208c:	4a12      	ldr	r2, [pc, #72]	; (80020d8 <MX_LPUART1_UART_Init+0x58>)
 800208e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <MX_LPUART1_UART_Init+0x50>)
 8002092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002096:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002098:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <MX_LPUART1_UART_Init+0x50>)
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800209e:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <MX_LPUART1_UART_Init+0x50>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80020a4:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <MX_LPUART1_UART_Init+0x50>)
 80020a6:	220c      	movs	r2, #12
 80020a8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020aa:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <MX_LPUART1_UART_Init+0x50>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020b0:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <MX_LPUART1_UART_Init+0x50>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <MX_LPUART1_UART_Init+0x50>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80020bc:	4804      	ldr	r0, [pc, #16]	; (80020d0 <MX_LPUART1_UART_Init+0x50>)
 80020be:	f00b fd8b 	bl	800dbd8 <HAL_UART_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80020c8:	f7ff fb84 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000c40 	.word	0x20000c40
 80020d4:	40008000 	.word	0x40008000
 80020d8:	00033324 	.word	0x00033324

080020dc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020e0:	4b14      	ldr	r3, [pc, #80]	; (8002134 <MX_USART1_UART_Init+0x58>)
 80020e2:	4a15      	ldr	r2, [pc, #84]	; (8002138 <MX_USART1_UART_Init+0x5c>)
 80020e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020e6:	4b13      	ldr	r3, [pc, #76]	; (8002134 <MX_USART1_UART_Init+0x58>)
 80020e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020ee:	4b11      	ldr	r3, [pc, #68]	; (8002134 <MX_USART1_UART_Init+0x58>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <MX_USART1_UART_Init+0x58>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <MX_USART1_UART_Init+0x58>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <MX_USART1_UART_Init+0x58>)
 8002102:	220c      	movs	r2, #12
 8002104:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <MX_USART1_UART_Init+0x58>)
 8002108:	f44f 7240 	mov.w	r2, #768	; 0x300
 800210c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <MX_USART1_UART_Init+0x58>)
 8002110:	2200      	movs	r2, #0
 8002112:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002114:	4b07      	ldr	r3, [pc, #28]	; (8002134 <MX_USART1_UART_Init+0x58>)
 8002116:	2200      	movs	r2, #0
 8002118:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800211a:	4b06      	ldr	r3, [pc, #24]	; (8002134 <MX_USART1_UART_Init+0x58>)
 800211c:	2200      	movs	r2, #0
 800211e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002120:	4804      	ldr	r0, [pc, #16]	; (8002134 <MX_USART1_UART_Init+0x58>)
 8002122:	f00b fd59 	bl	800dbd8 <HAL_UART_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 800212c:	f7ff fb52 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000cc4 	.word	0x20000cc4
 8002138:	40013800 	.word	0x40013800

0800213c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002140:	4b14      	ldr	r3, [pc, #80]	; (8002194 <MX_USART2_UART_Init+0x58>)
 8002142:	4a15      	ldr	r2, [pc, #84]	; (8002198 <MX_USART2_UART_Init+0x5c>)
 8002144:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002146:	4b13      	ldr	r3, [pc, #76]	; (8002194 <MX_USART2_UART_Init+0x58>)
 8002148:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800214c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800214e:	4b11      	ldr	r3, [pc, #68]	; (8002194 <MX_USART2_UART_Init+0x58>)
 8002150:	2200      	movs	r2, #0
 8002152:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002154:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <MX_USART2_UART_Init+0x58>)
 8002156:	2200      	movs	r2, #0
 8002158:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800215a:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <MX_USART2_UART_Init+0x58>)
 800215c:	2200      	movs	r2, #0
 800215e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <MX_USART2_UART_Init+0x58>)
 8002162:	220c      	movs	r2, #12
 8002164:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <MX_USART2_UART_Init+0x58>)
 8002168:	2200      	movs	r2, #0
 800216a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <MX_USART2_UART_Init+0x58>)
 800216e:	2200      	movs	r2, #0
 8002170:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <MX_USART2_UART_Init+0x58>)
 8002174:	2200      	movs	r2, #0
 8002176:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <MX_USART2_UART_Init+0x58>)
 800217a:	2200      	movs	r2, #0
 800217c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800217e:	4805      	ldr	r0, [pc, #20]	; (8002194 <MX_USART2_UART_Init+0x58>)
 8002180:	f00b fd2a 	bl	800dbd8 <HAL_UART_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800218a:	f7ff fb23 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20000d48 	.word	0x20000d48
 8002198:	40004400 	.word	0x40004400

0800219c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b0b2      	sub	sp, #200	; 0xc8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021b8:	228c      	movs	r2, #140	; 0x8c
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f010 f8e1 	bl	8012384 <memset>
  if(uartHandle->Instance==LPUART1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a86      	ldr	r2, [pc, #536]	; (80023e0 <HAL_UART_MspInit+0x244>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d13e      	bne.n	800224a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80021cc:	2320      	movs	r3, #32
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80021d0:	2300      	movs	r3, #0
 80021d2:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021d8:	4618      	mov	r0, r3
 80021da:	f009 fbe9 	bl	800b9b0 <HAL_RCCEx_PeriphCLKConfig>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021e4:	f7ff faf6 	bl	80017d4 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80021e8:	4b7e      	ldr	r3, [pc, #504]	; (80023e4 <HAL_UART_MspInit+0x248>)
 80021ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ec:	4a7d      	ldr	r2, [pc, #500]	; (80023e4 <HAL_UART_MspInit+0x248>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80021f4:	4b7b      	ldr	r3, [pc, #492]	; (80023e4 <HAL_UART_MspInit+0x248>)
 80021f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002200:	4b78      	ldr	r3, [pc, #480]	; (80023e4 <HAL_UART_MspInit+0x248>)
 8002202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002204:	4a77      	ldr	r2, [pc, #476]	; (80023e4 <HAL_UART_MspInit+0x248>)
 8002206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800220a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800220c:	4b75      	ldr	r3, [pc, #468]	; (80023e4 <HAL_UART_MspInit+0x248>)
 800220e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002214:	623b      	str	r3, [r7, #32]
 8002216:	6a3b      	ldr	r3, [r7, #32]
    HAL_PWREx_EnableVddIO2();
 8002218:	f008 fcba 	bl	800ab90 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 800221c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002220:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002224:	2302      	movs	r3, #2
 8002226:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002230:	2303      	movs	r3, #3
 8002232:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002236:	2308      	movs	r3, #8
 8002238:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800223c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002240:	4619      	mov	r1, r3
 8002242:	4869      	ldr	r0, [pc, #420]	; (80023e8 <HAL_UART_MspInit+0x24c>)
 8002244:	f006 f9c0 	bl	80085c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002248:	e0c6      	b.n	80023d8 <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a67      	ldr	r2, [pc, #412]	; (80023ec <HAL_UART_MspInit+0x250>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d15f      	bne.n	8002314 <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002254:	2301      	movs	r3, #1
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002258:	2300      	movs	r3, #0
 800225a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800225c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002260:	4618      	mov	r0, r3
 8002262:	f009 fba5 	bl	800b9b0 <HAL_RCCEx_PeriphCLKConfig>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800226c:	f7ff fab2 	bl	80017d4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002270:	4b5c      	ldr	r3, [pc, #368]	; (80023e4 <HAL_UART_MspInit+0x248>)
 8002272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002274:	4a5b      	ldr	r2, [pc, #364]	; (80023e4 <HAL_UART_MspInit+0x248>)
 8002276:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800227a:	6613      	str	r3, [r2, #96]	; 0x60
 800227c:	4b59      	ldr	r3, [pc, #356]	; (80023e4 <HAL_UART_MspInit+0x248>)
 800227e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002288:	4b56      	ldr	r3, [pc, #344]	; (80023e4 <HAL_UART_MspInit+0x248>)
 800228a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228c:	4a55      	ldr	r2, [pc, #340]	; (80023e4 <HAL_UART_MspInit+0x248>)
 800228e:	f043 0302 	orr.w	r3, r3, #2
 8002292:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002294:	4b53      	ldr	r3, [pc, #332]	; (80023e4 <HAL_UART_MspInit+0x248>)
 8002296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	61bb      	str	r3, [r7, #24]
 800229e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80022a0:	4b50      	ldr	r3, [pc, #320]	; (80023e4 <HAL_UART_MspInit+0x248>)
 80022a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a4:	4a4f      	ldr	r2, [pc, #316]	; (80023e4 <HAL_UART_MspInit+0x248>)
 80022a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ac:	4b4d      	ldr	r3, [pc, #308]	; (80023e4 <HAL_UART_MspInit+0x248>)
 80022ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 80022b8:	f008 fc6a 	bl	800ab90 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 80022bc:	2340      	movs	r3, #64	; 0x40
 80022be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c2:	2302      	movs	r3, #2
 80022c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ce:	2303      	movs	r3, #3
 80022d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022d4:	2307      	movs	r3, #7
 80022d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 80022da:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80022de:	4619      	mov	r1, r3
 80022e0:	4843      	ldr	r0, [pc, #268]	; (80023f0 <HAL_UART_MspInit+0x254>)
 80022e2:	f006 f971 	bl	80085c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 80022e6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80022ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ee:	2302      	movs	r3, #2
 80022f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fa:	2303      	movs	r3, #3
 80022fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002300:	2307      	movs	r3, #7
 8002302:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002306:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800230a:	4619      	mov	r1, r3
 800230c:	4836      	ldr	r0, [pc, #216]	; (80023e8 <HAL_UART_MspInit+0x24c>)
 800230e:	f006 f95b 	bl	80085c8 <HAL_GPIO_Init>
}
 8002312:	e061      	b.n	80023d8 <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a36      	ldr	r2, [pc, #216]	; (80023f4 <HAL_UART_MspInit+0x258>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d15c      	bne.n	80023d8 <HAL_UART_MspInit+0x23c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800231e:	2302      	movs	r3, #2
 8002320:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002322:	2300      	movs	r3, #0
 8002324:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800232a:	4618      	mov	r0, r3
 800232c:	f009 fb40 	bl	800b9b0 <HAL_RCCEx_PeriphCLKConfig>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8002336:	f7ff fa4d 	bl	80017d4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800233a:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <HAL_UART_MspInit+0x248>)
 800233c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233e:	4a29      	ldr	r2, [pc, #164]	; (80023e4 <HAL_UART_MspInit+0x248>)
 8002340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002344:	6593      	str	r3, [r2, #88]	; 0x58
 8002346:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <HAL_UART_MspInit+0x248>)
 8002348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002352:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <HAL_UART_MspInit+0x248>)
 8002354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002356:	4a23      	ldr	r2, [pc, #140]	; (80023e4 <HAL_UART_MspInit+0x248>)
 8002358:	f043 0308 	orr.w	r3, r3, #8
 800235c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800235e:	4b21      	ldr	r3, [pc, #132]	; (80023e4 <HAL_UART_MspInit+0x248>)
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800236a:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <HAL_UART_MspInit+0x248>)
 800236c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236e:	4a1d      	ldr	r2, [pc, #116]	; (80023e4 <HAL_UART_MspInit+0x248>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002376:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <HAL_UART_MspInit+0x248>)
 8002378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 8002382:	2340      	movs	r3, #64	; 0x40
 8002384:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002388:	2302      	movs	r3, #2
 800238a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002394:	2303      	movs	r3, #3
 8002396:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800239a:	2307      	movs	r3, #7
 800239c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 80023a0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80023a4:	4619      	mov	r1, r3
 80023a6:	4814      	ldr	r0, [pc, #80]	; (80023f8 <HAL_UART_MspInit+0x25c>)
 80023a8:	f006 f90e 	bl	80085c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 80023ac:	2304      	movs	r3, #4
 80023ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b2:	2302      	movs	r3, #2
 80023b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023be:	2303      	movs	r3, #3
 80023c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023c4:	2307      	movs	r3, #7
 80023c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80023ca:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80023ce:	4619      	mov	r1, r3
 80023d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023d4:	f006 f8f8 	bl	80085c8 <HAL_GPIO_Init>
}
 80023d8:	bf00      	nop
 80023da:	37c8      	adds	r7, #200	; 0xc8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40008000 	.word	0x40008000
 80023e4:	40021000 	.word	0x40021000
 80023e8:	48001800 	.word	0x48001800
 80023ec:	40013800 	.word	0x40013800
 80023f0:	48000400 	.word	0x48000400
 80023f4:	40004400 	.word	0x40004400
 80023f8:	48000c00 	.word	0x48000c00

080023fc <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af02      	add	r7, sp, #8
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	330a      	adds	r3, #10
 800240c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800241a:	b299      	uxth	r1, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	b29a      	uxth	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	4613      	mov	r3, r2
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	f006 fb08 	bl	8008a3c <HAL_I2C_Master_Transmit>
 800242c:	4603      	mov	r3, r0
 800242e:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8002430:	693b      	ldr	r3, [r7, #16]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800243a:	b580      	push	{r7, lr}
 800243c:	b088      	sub	sp, #32
 800243e:	af02      	add	r7, sp, #8
 8002440:	60f8      	str	r0, [r7, #12]
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	330a      	adds	r3, #10
 800244a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	b2db      	uxtb	r3, r3
 800245e:	b299      	uxth	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	b29a      	uxth	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	4613      	mov	r3, r2
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	f006 fbda 	bl	8008c24 <HAL_I2C_Master_Receive>
 8002470:	4603      	mov	r3, r0
 8002472:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8002474:	693b      	ldr	r3, [r7, #16]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	460b      	mov	r3, r1
 800248e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002490:	2300      	movs	r3, #0
 8002492:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	2b3f      	cmp	r3, #63	; 0x3f
 8002498:	d902      	bls.n	80024a0 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800249a:	f06f 0303 	mvn.w	r3, #3
 800249e:	e016      	b.n	80024ce <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 80024a0:	4a0d      	ldr	r2, [pc, #52]	; (80024d8 <VL53L0X_WriteMulti+0x58>)
 80024a2:	7afb      	ldrb	r3, [r7, #11]
 80024a4:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	480c      	ldr	r0, [pc, #48]	; (80024dc <VL53L0X_WriteMulti+0x5c>)
 80024ac:	f00f ff5c 	bl	8012368 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	3301      	adds	r3, #1
 80024b4:	461a      	mov	r2, r3
 80024b6:	4908      	ldr	r1, [pc, #32]	; (80024d8 <VL53L0X_WriteMulti+0x58>)
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f7ff ff9f 	bl	80023fc <_I2CWrite>
 80024be:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80024c6:	23ec      	movs	r3, #236	; 0xec
 80024c8:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80024ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000dcc 	.word	0x20000dcc
 80024dc:	20000dcd 	.word	0x20000dcd

080024e0 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	460b      	mov	r3, r1
 80024ee:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80024f4:	f107 030b 	add.w	r3, r7, #11
 80024f8:	2201      	movs	r2, #1
 80024fa:	4619      	mov	r1, r3
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f7ff ff7d 	bl	80023fc <_I2CWrite>
 8002502:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800250a:	23ec      	movs	r3, #236	; 0xec
 800250c:	75fb      	strb	r3, [r7, #23]
        goto done;
 800250e:	e00c      	b.n	800252a <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f7ff ff90 	bl	800243a <_I2CRead>
 800251a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002522:	23ec      	movs	r3, #236	; 0xec
 8002524:	75fb      	strb	r3, [r7, #23]
 8002526:	e000      	b.n	800252a <VL53L0X_ReadMulti+0x4a>
    }
done:
 8002528:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800252a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	70fb      	strb	r3, [r7, #3]
 8002544:	4613      	mov	r3, r2
 8002546:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002548:	2300      	movs	r3, #0
 800254a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800254c:	4a0b      	ldr	r2, [pc, #44]	; (800257c <VL53L0X_WrByte+0x44>)
 800254e:	78fb      	ldrb	r3, [r7, #3]
 8002550:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8002552:	4a0a      	ldr	r2, [pc, #40]	; (800257c <VL53L0X_WrByte+0x44>)
 8002554:	78bb      	ldrb	r3, [r7, #2]
 8002556:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8002558:	2202      	movs	r2, #2
 800255a:	4908      	ldr	r1, [pc, #32]	; (800257c <VL53L0X_WrByte+0x44>)
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff ff4d 	bl	80023fc <_I2CWrite>
 8002562:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800256a:	23ec      	movs	r3, #236	; 0xec
 800256c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800256e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000dcc 	.word	0x20000dcc

08002580 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	70fb      	strb	r3, [r7, #3]
 800258c:	4613      	mov	r3, r2
 800258e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002590:	2300      	movs	r3, #0
 8002592:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8002594:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <VL53L0X_WrWord+0x50>)
 8002596:	78fb      	ldrb	r3, [r7, #3]
 8002598:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800259a:	883b      	ldrh	r3, [r7, #0]
 800259c:	0a1b      	lsrs	r3, r3, #8
 800259e:	b29b      	uxth	r3, r3
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <VL53L0X_WrWord+0x50>)
 80025a4:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 80025a6:	883b      	ldrh	r3, [r7, #0]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <VL53L0X_WrWord+0x50>)
 80025ac:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80025ae:	2203      	movs	r2, #3
 80025b0:	4907      	ldr	r1, [pc, #28]	; (80025d0 <VL53L0X_WrWord+0x50>)
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff ff22 	bl	80023fc <_I2CWrite>
 80025b8:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80025c0:	23ec      	movs	r3, #236	; 0xec
 80025c2:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80025c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20000dcc 	.word	0x20000dcc

080025d4 <VL53L0X_WrDWord>:

VL53L0X_Error VL53L0X_WrDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t data) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	460b      	mov	r3, r1
 80025de:	607a      	str	r2, [r7, #4]
 80025e0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80025e2:	2300      	movs	r3, #0
 80025e4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    _I2CBuffer[0] = index;
 80025e6:	4a13      	ldr	r2, [pc, #76]	; (8002634 <VL53L0X_WrDWord+0x60>)
 80025e8:	7afb      	ldrb	r3, [r7, #11]
 80025ea:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = (data >> 24) & 0xFF;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	0e1b      	lsrs	r3, r3, #24
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <VL53L0X_WrDWord+0x60>)
 80025f4:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = (data >> 16) & 0xFF;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	0c1b      	lsrs	r3, r3, #16
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <VL53L0X_WrDWord+0x60>)
 80025fe:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = (data >> 8)  & 0xFF;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	0a1b      	lsrs	r3, r3, #8
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <VL53L0X_WrDWord+0x60>)
 8002608:	70da      	strb	r2, [r3, #3]
    _I2CBuffer[4] = (data >> 0 ) & 0xFF;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	b2da      	uxtb	r2, r3
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <VL53L0X_WrDWord+0x60>)
 8002610:	711a      	strb	r2, [r3, #4]
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 5);
 8002612:	2205      	movs	r2, #5
 8002614:	4907      	ldr	r1, [pc, #28]	; (8002634 <VL53L0X_WrDWord+0x60>)
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f7ff fef0 	bl	80023fc <_I2CWrite>
 800261c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <VL53L0X_WrDWord+0x54>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002624:	23ec      	movs	r3, #236	; 0xec
 8002626:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8002628:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000dcc 	.word	0x20000dcc

08002638 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	4608      	mov	r0, r1
 8002642:	4611      	mov	r1, r2
 8002644:	461a      	mov	r2, r3
 8002646:	4603      	mov	r3, r0
 8002648:	70fb      	strb	r3, [r7, #3]
 800264a:	460b      	mov	r3, r1
 800264c:	70bb      	strb	r3, [r7, #2]
 800264e:	4613      	mov	r3, r2
 8002650:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002652:	2300      	movs	r3, #0
 8002654:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8002656:	f107 020e 	add.w	r2, r7, #14
 800265a:	78fb      	ldrb	r3, [r7, #3]
 800265c:	4619      	mov	r1, r3
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f81e 	bl	80026a0 <VL53L0X_RdByte>
 8002664:	4603      	mov	r3, r0
 8002666:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8002668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d110      	bne.n	8002692 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8002670:	7bba      	ldrb	r2, [r7, #14]
 8002672:	78bb      	ldrb	r3, [r7, #2]
 8002674:	4013      	ands	r3, r2
 8002676:	b2da      	uxtb	r2, r3
 8002678:	787b      	ldrb	r3, [r7, #1]
 800267a:	4313      	orrs	r3, r2
 800267c:	b2db      	uxtb	r3, r3
 800267e:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8002680:	7bba      	ldrb	r2, [r7, #14]
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	4619      	mov	r1, r3
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff ff56 	bl	8002538 <VL53L0X_WrByte>
 800268c:	4603      	mov	r3, r0
 800268e:	73fb      	strb	r3, [r7, #15]
 8002690:	e000      	b.n	8002694 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8002692:	bf00      	nop
done:
    return Status;
 8002694:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	460b      	mov	r3, r1
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80026ae:	2300      	movs	r3, #0
 80026b0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80026b2:	f107 030b 	add.w	r3, r7, #11
 80026b6:	2201      	movs	r2, #1
 80026b8:	4619      	mov	r1, r3
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f7ff fe9e 	bl	80023fc <_I2CWrite>
 80026c0:	6138      	str	r0, [r7, #16]
    if( status_int ){
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80026c8:	23ec      	movs	r3, #236	; 0xec
 80026ca:	75fb      	strb	r3, [r7, #23]
        goto done;
 80026cc:	e00c      	b.n	80026e8 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 80026ce:	2201      	movs	r2, #1
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f7ff feb1 	bl	800243a <_I2CRead>
 80026d8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80026e0:	23ec      	movs	r3, #236	; 0xec
 80026e2:	75fb      	strb	r3, [r7, #23]
 80026e4:	e000      	b.n	80026e8 <VL53L0X_RdByte+0x48>
    }
done:
 80026e6:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80026e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	460b      	mov	r3, r1
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002702:	2300      	movs	r3, #0
 8002704:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8002706:	f107 030b 	add.w	r3, r7, #11
 800270a:	2201      	movs	r2, #1
 800270c:	4619      	mov	r1, r3
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f7ff fe74 	bl	80023fc <_I2CWrite>
 8002714:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800271c:	23ec      	movs	r3, #236	; 0xec
 800271e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8002720:	e017      	b.n	8002752 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8002722:	2202      	movs	r2, #2
 8002724:	490e      	ldr	r1, [pc, #56]	; (8002760 <VL53L0X_RdWord+0x6c>)
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f7ff fe87 	bl	800243a <_I2CRead>
 800272c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002734:	23ec      	movs	r3, #236	; 0xec
 8002736:	75fb      	strb	r3, [r7, #23]
        goto done;
 8002738:	e00b      	b.n	8002752 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800273a:	4b09      	ldr	r3, [pc, #36]	; (8002760 <VL53L0X_RdWord+0x6c>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	b29b      	uxth	r3, r3
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	b29a      	uxth	r2, r3
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <VL53L0X_RdWord+0x6c>)
 8002746:	785b      	ldrb	r3, [r3, #1]
 8002748:	b29b      	uxth	r3, r3
 800274a:	4413      	add	r3, r2
 800274c:	b29a      	uxth	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8002752:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000dcc 	.word	0x20000dcc

08002764 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	460b      	mov	r3, r1
 800276e:	607a      	str	r2, [r7, #4]
 8002770:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002772:	2300      	movs	r3, #0
 8002774:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8002776:	f107 030b 	add.w	r3, r7, #11
 800277a:	2201      	movs	r2, #1
 800277c:	4619      	mov	r1, r3
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f7ff fe3c 	bl	80023fc <_I2CWrite>
 8002784:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800278c:	23ec      	movs	r3, #236	; 0xec
 800278e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8002790:	e01b      	b.n	80027ca <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8002792:	2204      	movs	r2, #4
 8002794:	4910      	ldr	r1, [pc, #64]	; (80027d8 <VL53L0X_RdDWord+0x74>)
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f7ff fe4f 	bl	800243a <_I2CRead>
 800279c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80027a4:	23ec      	movs	r3, #236	; 0xec
 80027a6:	75fb      	strb	r3, [r7, #23]
        goto done;
 80027a8:	e00f      	b.n	80027ca <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <VL53L0X_RdDWord+0x74>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	061a      	lsls	r2, r3, #24
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <VL53L0X_RdDWord+0x74>)
 80027b2:	785b      	ldrb	r3, [r3, #1]
 80027b4:	041b      	lsls	r3, r3, #16
 80027b6:	441a      	add	r2, r3
 80027b8:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <VL53L0X_RdDWord+0x74>)
 80027ba:	789b      	ldrb	r3, [r3, #2]
 80027bc:	021b      	lsls	r3, r3, #8
 80027be:	4413      	add	r3, r2
 80027c0:	4a05      	ldr	r2, [pc, #20]	; (80027d8 <VL53L0X_RdDWord+0x74>)
 80027c2:	78d2      	ldrb	r2, [r2, #3]
 80027c4:	441a      	add	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 80027ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000dcc 	.word	0x20000dcc

080027dc <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 80027e8:	2002      	movs	r0, #2
 80027ea:	f004 fc49 	bl	8007080 <HAL_Delay>
    return status;
 80027ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80027fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002834 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002800:	f7ff fbd0 	bl	8001fa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002804:	480c      	ldr	r0, [pc, #48]	; (8002838 <LoopForever+0x6>)
  ldr r1, =_edata
 8002806:	490d      	ldr	r1, [pc, #52]	; (800283c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002808:	4a0d      	ldr	r2, [pc, #52]	; (8002840 <LoopForever+0xe>)
  movs r3, #0
 800280a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800280c:	e002      	b.n	8002814 <LoopCopyDataInit>

0800280e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800280e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002812:	3304      	adds	r3, #4

08002814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002818:	d3f9      	bcc.n	800280e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800281a:	4a0a      	ldr	r2, [pc, #40]	; (8002844 <LoopForever+0x12>)
  ldr r4, =_ebss
 800281c:	4c0a      	ldr	r4, [pc, #40]	; (8002848 <LoopForever+0x16>)
  movs r3, #0
 800281e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002820:	e001      	b.n	8002826 <LoopFillZerobss>

08002822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002824:	3204      	adds	r2, #4

08002826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002828:	d3fb      	bcc.n	8002822 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800282a:	f00f fd79 	bl	8012320 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800282e:	f7fe fe4b 	bl	80014c8 <main>

08002832 <LoopForever>:

LoopForever:
    b LoopForever
 8002832:	e7fe      	b.n	8002832 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002834:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800283c:	20000640 	.word	0x20000640
  ldr r2, =_sidata
 8002840:	080135ec 	.word	0x080135ec
  ldr r2, =_sbss
 8002844:	20000640 	.word	0x20000640
  ldr r4, =_ebss
 8002848:	20002a44 	.word	0x20002a44

0800284c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800284c:	e7fe      	b.n	800284c <ADC1_2_IRQHandler>

0800284e <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b084      	sub	sp, #16
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002858:	2300      	movs	r3, #0
 800285a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800285c:	6839      	ldr	r1, [r7, #0]
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f001 fcbf 	bl	80041e2 <VL53L0X_get_offset_calibration_data_micro_meter>
 8002864:	4603      	mov	r3, r0
 8002866:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8002868:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8002874:	b5b0      	push	{r4, r5, r7, lr}
 8002876:	b096      	sub	sp, #88	; 0x58
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800287c:	2300      	movs	r3, #0
 800287e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8002882:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002886:	2b00      	cmp	r3, #0
 8002888:	d107      	bne.n	800289a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800288a:	2200      	movs	r2, #0
 800288c:	2188      	movs	r1, #136	; 0x88
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff fe52 	bl	8002538 <VL53L0X_WrByte>
 8002894:	4603      	mov	r3, r0
 8002896:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028a8:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80028b2:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a9e      	ldr	r2, [pc, #632]	; (8002b34 <VL53L0X_DataInit+0x2c0>)
 80028ba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a9d      	ldr	r2, [pc, #628]	; (8002b38 <VL53L0X_DataInit+0x2c4>)
 80028c2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80028cc:	f107 0310 	add.w	r3, r7, #16
 80028d0:	4619      	mov	r1, r3
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 fab4 	bl	8002e40 <VL53L0X_GetDeviceParameters>
 80028d8:	4603      	mov	r3, r0
 80028da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 80028de:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d112      	bne.n	800290c <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80028e6:	2300      	movs	r3, #0
 80028e8:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80028ea:	2300      	movs	r3, #0
 80028ec:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f103 0410 	add.w	r4, r3, #16
 80028f4:	f107 0510 	add.w	r5, r7, #16
 80028f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002904:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002908:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2264      	movs	r2, #100	; 0x64
 8002910:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f44f 7261 	mov.w	r2, #900	; 0x384
 800291a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002924:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800292e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800293a:	2201      	movs	r2, #1
 800293c:	2180      	movs	r1, #128	; 0x80
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff fdfa 	bl	8002538 <VL53L0X_WrByte>
 8002944:	4603      	mov	r3, r0
 8002946:	461a      	mov	r2, r3
 8002948:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800294c:	4313      	orrs	r3, r2
 800294e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002952:	2201      	movs	r2, #1
 8002954:	21ff      	movs	r1, #255	; 0xff
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff fdee 	bl	8002538 <VL53L0X_WrByte>
 800295c:	4603      	mov	r3, r0
 800295e:	461a      	mov	r2, r3
 8002960:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002964:	4313      	orrs	r3, r2
 8002966:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800296a:	2200      	movs	r2, #0
 800296c:	2100      	movs	r1, #0
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff fde2 	bl	8002538 <VL53L0X_WrByte>
 8002974:	4603      	mov	r3, r0
 8002976:	461a      	mov	r2, r3
 8002978:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800297c:	4313      	orrs	r3, r2
 800297e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8002982:	f107 030f 	add.w	r3, r7, #15
 8002986:	461a      	mov	r2, r3
 8002988:	2191      	movs	r1, #145	; 0x91
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff fe88 	bl	80026a0 <VL53L0X_RdByte>
 8002990:	4603      	mov	r3, r0
 8002992:	461a      	mov	r2, r3
 8002994:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002998:	4313      	orrs	r3, r2
 800299a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800299e:	7bfa      	ldrb	r2, [r7, #15]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80029a6:	2201      	movs	r2, #1
 80029a8:	2100      	movs	r1, #0
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff fdc4 	bl	8002538 <VL53L0X_WrByte>
 80029b0:	4603      	mov	r3, r0
 80029b2:	461a      	mov	r2, r3
 80029b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80029be:	2200      	movs	r2, #0
 80029c0:	21ff      	movs	r1, #255	; 0xff
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff fdb8 	bl	8002538 <VL53L0X_WrByte>
 80029c8:	4603      	mov	r3, r0
 80029ca:	461a      	mov	r2, r3
 80029cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80029d6:	2200      	movs	r2, #0
 80029d8:	2180      	movs	r1, #128	; 0x80
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff fdac 	bl	8002538 <VL53L0X_WrByte>
 80029e0:	4603      	mov	r3, r0
 80029e2:	461a      	mov	r2, r3
 80029e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80029ee:	2300      	movs	r3, #0
 80029f0:	653b      	str	r3, [r7, #80]	; 0x50
 80029f2:	e014      	b.n	8002a1e <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 80029f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d114      	bne.n	8002a26 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80029fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	2201      	movs	r2, #1
 8002a02:	4619      	mov	r1, r3
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fd43 	bl	8003490 <VL53L0X_SetLimitCheckEnable>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	653b      	str	r3, [r7, #80]	; 0x50
 8002a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a20:	2b05      	cmp	r3, #5
 8002a22:	dde7      	ble.n	80029f4 <VL53L0X_DataInit+0x180>
 8002a24:	e000      	b.n	8002a28 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8002a26:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8002a28:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d107      	bne.n	8002a40 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002a30:	2200      	movs	r2, #0
 8002a32:	2102      	movs	r1, #2
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 fd2b 	bl	8003490 <VL53L0X_SetLimitCheckEnable>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002a40:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d107      	bne.n	8002a58 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2103      	movs	r1, #3
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 fd1f 	bl	8003490 <VL53L0X_SetLimitCheckEnable>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002a58:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d107      	bne.n	8002a70 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002a60:	2200      	movs	r2, #0
 8002a62:	2104      	movs	r1, #4
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 fd13 	bl	8003490 <VL53L0X_SetLimitCheckEnable>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002a70:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d107      	bne.n	8002a88 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2105      	movs	r1, #5
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 fd07 	bl	8003490 <VL53L0X_SetLimitCheckEnable>
 8002a82:	4603      	mov	r3, r0
 8002a84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8002a88:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d108      	bne.n	8002aa2 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002a90:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8002a94:	2100      	movs	r1, #0
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 fdaa 	bl	80035f0 <VL53L0X_SetLimitCheckValue>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002aa2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d108      	bne.n	8002abc <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002aaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002aae:	2101      	movs	r1, #1
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 fd9d 	bl	80035f0 <VL53L0X_SetLimitCheckValue>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002abc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d108      	bne.n	8002ad6 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002ac4:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8002ac8:	2102      	movs	r1, #2
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 fd90 	bl	80035f0 <VL53L0X_SetLimitCheckValue>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002ad6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d107      	bne.n	8002aee <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2103      	movs	r1, #3
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 fd84 	bl	80035f0 <VL53L0X_SetLimitCheckValue>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002aee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10f      	bne.n	8002b16 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	22ff      	movs	r2, #255	; 0xff
 8002afa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002afe:	22ff      	movs	r2, #255	; 0xff
 8002b00:	2101      	movs	r1, #1
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff fd18 	bl	8002538 <VL53L0X_WrByte>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8002b16:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d103      	bne.n	8002b26 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8002b26:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3758      	adds	r7, #88	; 0x58
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bdb0      	pop	{r4, r5, r7, pc}
 8002b32:	bf00      	nop
 8002b34:	00016b85 	.word	0x00016b85
 8002b38:	000970a4 	.word	0x000970a4

08002b3c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8002b3c:	b5b0      	push	{r4, r5, r7, lr}
 8002b3e:	b09e      	sub	sp, #120	; 0x78
 8002b40:	af02      	add	r7, sp, #8
 8002b42:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002b44:	2300      	movs	r3, #0
 8002b46:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8002b4a:	f107 031c 	add.w	r3, r7, #28
 8002b4e:	2240      	movs	r2, #64	; 0x40
 8002b50:	2100      	movs	r1, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	f00f fc16 	bl	8012384 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8002b78:	2101      	movs	r1, #1
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f002 fa74 	bl	8005068 <VL53L0X_get_info_from_device>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8002b8c:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8002b94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8002b98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d80d      	bhi.n	8002bbc <VL53L0X_StaticInit+0x80>
 8002ba0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d102      	bne.n	8002bae <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8002ba8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002baa:	2b20      	cmp	r3, #32
 8002bac:	d806      	bhi.n	8002bbc <VL53L0X_StaticInit+0x80>
 8002bae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10e      	bne.n	8002bd4 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8002bb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bb8:	2b0c      	cmp	r3, #12
 8002bba:	d90b      	bls.n	8002bd4 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8002bbc:	f107 0218 	add.w	r2, r7, #24
 8002bc0:	f107 0314 	add.w	r3, r7, #20
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f001 fd06 	bl	80045d8 <VL53L0X_perform_ref_spad_management>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002bd2:	e009      	b.n	8002be8 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8002bd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002bd8:	461a      	mov	r2, r3
 8002bda:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f001 ff07 	bl	80049f0 <VL53L0X_set_reference_spads>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8002be8:	4b94      	ldr	r3, [pc, #592]	; (8002e3c <VL53L0X_StaticInit+0x300>)
 8002bea:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8002bec:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10f      	bne.n	8002c14 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8002bfa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8002bfe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d104      	bne.n	8002c10 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8002c0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c0e:	e001      	b.n	8002c14 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8002c10:	4b8a      	ldr	r3, [pc, #552]	; (8002e3c <VL53L0X_StaticInit+0x300>)
 8002c12:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8002c14:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d106      	bne.n	8002c2a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8002c1c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f003 fb40 	bl	80062a4 <VL53L0X_load_tuning_settings>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8002c2a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10a      	bne.n	8002c48 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8002c32:	2300      	movs	r3, #0
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	2304      	movs	r3, #4
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f001 f8ff 	bl	8003e40 <VL53L0X_SetGpioConfig>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002c48:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d121      	bne.n	8002c94 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002c50:	2201      	movs	r2, #1
 8002c52:	21ff      	movs	r1, #255	; 0xff
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff fc6f 	bl	8002538 <VL53L0X_WrByte>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8002c60:	f107 031a 	add.w	r3, r7, #26
 8002c64:	461a      	mov	r2, r3
 8002c66:	2184      	movs	r1, #132	; 0x84
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff fd43 	bl	80026f4 <VL53L0X_RdWord>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	461a      	mov	r2, r3
 8002c72:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	21ff      	movs	r1, #255	; 0xff
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff fc59 	bl	8002538 <VL53L0X_WrByte>
 8002c86:	4603      	mov	r3, r0
 8002c88:	461a      	mov	r2, r3
 8002c8a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002c94:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d105      	bne.n	8002ca8 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8002c9c:	8b7b      	ldrh	r3, [r7, #26]
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8002ca8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d108      	bne.n	8002cc2 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8002cb0:	f107 031c 	add.w	r3, r7, #28
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f8c2 	bl	8002e40 <VL53L0X_GetDeviceParameters>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8002cc2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d110      	bne.n	8002cec <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8002cca:	f107 0319 	add.w	r3, r7, #25
 8002cce:	4619      	mov	r1, r3
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f984 	bl	8002fde <VL53L0X_GetFractionEnable>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8002cdc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d103      	bne.n	8002cec <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8002ce4:	7e7a      	ldrb	r2, [r7, #25]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8002cec:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10e      	bne.n	8002d12 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f103 0410 	add.w	r4, r3, #16
 8002cfa:	f107 051c 	add.w	r5, r7, #28
 8002cfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d0a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002d0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8002d12:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d111      	bne.n	8002d3e <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8002d1a:	f107 0319 	add.w	r3, r7, #25
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2101      	movs	r1, #1
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff fcbc 	bl	80026a0 <VL53L0X_RdByte>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8002d2e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d103      	bne.n	8002d3e <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8002d36:	7e7a      	ldrb	r2, [r7, #25]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8002d3e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d107      	bne.n	8002d56 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8002d46:	2200      	movs	r2, #0
 8002d48:	2100      	movs	r1, #0
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f9a4 	bl	8003098 <VL53L0X_SetSequenceStepEnable>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8002d56:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d107      	bne.n	8002d6e <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2102      	movs	r1, #2
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f998 	bl	8003098 <VL53L0X_SetSequenceStepEnable>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8002d6e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d103      	bne.n	8002d7e <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2203      	movs	r2, #3
 8002d7a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8002d7e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d109      	bne.n	8002d9a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8002d86:	f107 0313 	add.w	r3, r7, #19
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f96a 	bl	8003068 <VL53L0X_GetVcselPulsePeriod>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002d9a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d103      	bne.n	8002daa <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002da2:	7cfa      	ldrb	r2, [r7, #19]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8002daa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d109      	bne.n	8002dc6 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8002db2:	f107 0313 	add.w	r3, r7, #19
 8002db6:	461a      	mov	r2, r3
 8002db8:	2101      	movs	r1, #1
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f954 	bl	8003068 <VL53L0X_GetVcselPulsePeriod>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002dc6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d103      	bne.n	8002dd6 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002dce:	7cfa      	ldrb	r2, [r7, #19]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8002dd6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d109      	bne.n	8002df2 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8002dde:	f107 030c 	add.w	r3, r7, #12
 8002de2:	461a      	mov	r2, r3
 8002de4:	2103      	movs	r1, #3
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f002 fec0 	bl	8005b6c <get_sequence_step_timeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002df2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d103      	bne.n	8002e02 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8002e02:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d109      	bne.n	8002e1e <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8002e0a:	f107 030c 	add.w	r3, r7, #12
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2104      	movs	r1, #4
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f002 feaa 	bl	8005b6c <get_sequence_step_timeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002e1e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d103      	bne.n	8002e2e <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002e2e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3770      	adds	r7, #112	; 0x70
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bdb0      	pop	{r4, r5, r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000194 	.word	0x20000194

08002e40 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	4619      	mov	r1, r3
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f8b0 	bl	8002fb8 <VL53L0X_GetDeviceMode>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8002e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d107      	bne.n	8002e74 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	3308      	adds	r3, #8
 8002e68:	4619      	mov	r1, r3
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fa94 	bl	8003398 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8002e70:	4603      	mov	r3, r0
 8002e72:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8002e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d102      	bne.n	8002e82 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8002e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d107      	bne.n	8002e9a <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	3310      	adds	r3, #16
 8002e8e:	4619      	mov	r1, r3
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 faca 	bl	800342a <VL53L0X_GetXTalkCompensationRateMegaCps>
 8002e96:	4603      	mov	r3, r0
 8002e98:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8002e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d107      	bne.n	8002eb2 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	3314      	adds	r3, #20
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7ff fcd0 	bl	800284e <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8002eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d134      	bne.n	8002f24 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	e02a      	b.n	8002f16 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8002ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d12a      	bne.n	8002f1e <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	b299      	uxth	r1, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	3308      	adds	r3, #8
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	461a      	mov	r2, r3
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fbea 	bl	80036b4 <VL53L0X_GetLimitCheckValue>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8002eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d117      	bne.n	8002f22 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	b299      	uxth	r1, r3
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	3318      	adds	r3, #24
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	4413      	add	r3, r2
 8002efe:	461a      	mov	r2, r3
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 fb51 	bl	80035a8 <VL53L0X_GetLimitCheckEnable>
 8002f06:	4603      	mov	r3, r0
 8002f08:	461a      	mov	r2, r3
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	3301      	adds	r3, #1
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b05      	cmp	r3, #5
 8002f1a:	ddd1      	ble.n	8002ec0 <VL53L0X_GetDeviceParameters+0x80>
 8002f1c:	e002      	b.n	8002f24 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8002f1e:	bf00      	nop
 8002f20:	e000      	b.n	8002f24 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8002f22:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d107      	bne.n	8002f3c <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	333c      	adds	r3, #60	; 0x3c
 8002f30:	4619      	mov	r1, r3
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fc4c 	bl	80037d0 <VL53L0X_GetWrapAroundCheckEnable>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8002f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d107      	bne.n	8002f54 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	3304      	adds	r3, #4
 8002f48:	4619      	mov	r1, r3
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f879 	bl	8003042 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8002f50:	4603      	mov	r3, r0
 8002f52:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	2b15      	cmp	r3, #21
 8002f74:	bf8c      	ite	hi
 8002f76:	2201      	movhi	r2, #1
 8002f78:	2200      	movls	r2, #0
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	2a00      	cmp	r2, #0
 8002f7e:	d10e      	bne.n	8002f9e <VL53L0X_SetDeviceMode+0x3e>
 8002f80:	2201      	movs	r2, #1
 8002f82:	409a      	lsls	r2, r3
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <VL53L0X_SetDeviceMode+0x54>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf14      	ite	ne
 8002f8c:	2301      	movne	r3, #1
 8002f8e:	2300      	moveq	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	741a      	strb	r2, [r3, #16]
		break;
 8002f9c:	e001      	b.n	8002fa2 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8002f9e:	23f8      	movs	r3, #248	; 0xf8
 8002fa0:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	0030000b 	.word	0x0030000b

08002fb8 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	7c1a      	ldrb	r2, [r3, #16]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8002fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	2109      	movs	r1, #9
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff fb55 	bl	80026a0 <VL53L0X_RdByte>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8002ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	b2da      	uxtb	r2, r3
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003010:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003026:	2300      	movs	r3, #0
 8003028:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800302a:	6839      	ldr	r1, [r7, #0]
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f002 ffa7 	bl	8005f80 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8003032:	4603      	mov	r3, r0
 8003034:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8003036:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800304c:	2300      	movs	r3, #0
 800304e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f003 f874 	bl	8006140 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8003058:	4603      	mov	r3, r0
 800305a:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800305c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	460b      	mov	r3, r1
 8003072:	607a      	str	r2, [r7, #4]
 8003074:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003076:	2300      	movs	r3, #0
 8003078:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800307a:	7afb      	ldrb	r3, [r7, #11]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	4619      	mov	r1, r3
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f002 ff46 	bl	8005f12 <VL53L0X_get_vcsel_pulse_period>
 8003086:	4603      	mov	r3, r0
 8003088:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800308a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	70fb      	strb	r3, [r7, #3]
 80030a4:	4613      	mov	r3, r2
 80030a6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80030a8:	2300      	movs	r3, #0
 80030aa:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80030b4:	f107 030f 	add.w	r3, r7, #15
 80030b8:	461a      	mov	r2, r3
 80030ba:	2101      	movs	r1, #1
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff faef 	bl	80026a0 <VL53L0X_RdByte>
 80030c2:	4603      	mov	r3, r0
 80030c4:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80030c6:	7bfb      	ldrb	r3, [r7, #15]
 80030c8:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80030ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d15a      	bne.n	8003188 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80030d2:	78bb      	ldrb	r3, [r7, #2]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d12b      	bne.n	8003130 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d825      	bhi.n	800312a <VL53L0X_SetSequenceStepEnable+0x92>
 80030de:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80030e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e4:	080030f9 	.word	0x080030f9
 80030e8:	08003103 	.word	0x08003103
 80030ec:	0800310d 	.word	0x0800310d
 80030f0:	08003117 	.word	0x08003117
 80030f4:	08003121 	.word	0x08003121
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80030f8:	7dbb      	ldrb	r3, [r7, #22]
 80030fa:	f043 0310 	orr.w	r3, r3, #16
 80030fe:	75bb      	strb	r3, [r7, #22]
				break;
 8003100:	e043      	b.n	800318a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8003102:	7dbb      	ldrb	r3, [r7, #22]
 8003104:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003108:	75bb      	strb	r3, [r7, #22]
				break;
 800310a:	e03e      	b.n	800318a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800310c:	7dbb      	ldrb	r3, [r7, #22]
 800310e:	f043 0304 	orr.w	r3, r3, #4
 8003112:	75bb      	strb	r3, [r7, #22]
				break;
 8003114:	e039      	b.n	800318a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8003116:	7dbb      	ldrb	r3, [r7, #22]
 8003118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800311c:	75bb      	strb	r3, [r7, #22]
				break;
 800311e:	e034      	b.n	800318a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8003120:	7dbb      	ldrb	r3, [r7, #22]
 8003122:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003126:	75bb      	strb	r3, [r7, #22]
				break;
 8003128:	e02f      	b.n	800318a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800312a:	23fc      	movs	r3, #252	; 0xfc
 800312c:	75fb      	strb	r3, [r7, #23]
 800312e:	e02c      	b.n	800318a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	2b04      	cmp	r3, #4
 8003134:	d825      	bhi.n	8003182 <VL53L0X_SetSequenceStepEnable+0xea>
 8003136:	a201      	add	r2, pc, #4	; (adr r2, 800313c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8003138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313c:	08003151 	.word	0x08003151
 8003140:	0800315b 	.word	0x0800315b
 8003144:	08003165 	.word	0x08003165
 8003148:	0800316f 	.word	0x0800316f
 800314c:	08003179 	.word	0x08003179
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8003150:	7dbb      	ldrb	r3, [r7, #22]
 8003152:	f023 0310 	bic.w	r3, r3, #16
 8003156:	75bb      	strb	r3, [r7, #22]
				break;
 8003158:	e017      	b.n	800318a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800315a:	7dbb      	ldrb	r3, [r7, #22]
 800315c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8003160:	75bb      	strb	r3, [r7, #22]
				break;
 8003162:	e012      	b.n	800318a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8003164:	7dbb      	ldrb	r3, [r7, #22]
 8003166:	f023 0304 	bic.w	r3, r3, #4
 800316a:	75bb      	strb	r3, [r7, #22]
				break;
 800316c:	e00d      	b.n	800318a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800316e:	7dbb      	ldrb	r3, [r7, #22]
 8003170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003174:	75bb      	strb	r3, [r7, #22]
				break;
 8003176:	e008      	b.n	800318a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8003178:	7dbb      	ldrb	r3, [r7, #22]
 800317a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800317e:	75bb      	strb	r3, [r7, #22]
				break;
 8003180:	e003      	b.n	800318a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003182:	23fc      	movs	r3, #252	; 0xfc
 8003184:	75fb      	strb	r3, [r7, #23]
 8003186:	e000      	b.n	800318a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8003188:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	7dba      	ldrb	r2, [r7, #22]
 800318e:	429a      	cmp	r2, r3
 8003190:	d01e      	beq.n	80031d0 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8003192:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d107      	bne.n	80031aa <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800319a:	7dbb      	ldrb	r3, [r7, #22]
 800319c:	461a      	mov	r2, r3
 800319e:	2101      	movs	r1, #1
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7ff f9c9 	bl	8002538 <VL53L0X_WrByte>
 80031a6:	4603      	mov	r3, r0
 80031a8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80031aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d103      	bne.n	80031ba <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	7dba      	ldrb	r2, [r7, #22]
 80031b6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80031ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80031c8:	6939      	ldr	r1, [r7, #16]
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff ff26 	bl	800301c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80031d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	607b      	str	r3, [r7, #4]
 80031e6:	460b      	mov	r3, r1
 80031e8:	72fb      	strb	r3, [r7, #11]
 80031ea:	4613      	mov	r3, r2
 80031ec:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80031ee:	2300      	movs	r3, #0
 80031f0:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80031f8:	7afb      	ldrb	r3, [r7, #11]
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d836      	bhi.n	800326c <sequence_step_enabled+0x90>
 80031fe:	a201      	add	r2, pc, #4	; (adr r2, 8003204 <sequence_step_enabled+0x28>)
 8003200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003204:	08003219 	.word	0x08003219
 8003208:	0800322b 	.word	0x0800322b
 800320c:	0800323d 	.word	0x0800323d
 8003210:	0800324f 	.word	0x0800324f
 8003214:	08003261 	.word	0x08003261
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8003218:	7abb      	ldrb	r3, [r7, #10]
 800321a:	111b      	asrs	r3, r3, #4
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	b2da      	uxtb	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	701a      	strb	r2, [r3, #0]
		break;
 8003228:	e022      	b.n	8003270 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800322a:	7abb      	ldrb	r3, [r7, #10]
 800322c:	10db      	asrs	r3, r3, #3
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	b2da      	uxtb	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	701a      	strb	r2, [r3, #0]
		break;
 800323a:	e019      	b.n	8003270 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800323c:	7abb      	ldrb	r3, [r7, #10]
 800323e:	109b      	asrs	r3, r3, #2
 8003240:	b2db      	uxtb	r3, r3
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	b2da      	uxtb	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	701a      	strb	r2, [r3, #0]
		break;
 800324c:	e010      	b.n	8003270 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800324e:	7abb      	ldrb	r3, [r7, #10]
 8003250:	119b      	asrs	r3, r3, #6
 8003252:	b2db      	uxtb	r3, r3
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	b2da      	uxtb	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	701a      	strb	r2, [r3, #0]
		break;
 800325e:	e007      	b.n	8003270 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8003260:	7abb      	ldrb	r3, [r7, #10]
 8003262:	09db      	lsrs	r3, r3, #7
 8003264:	b2da      	uxtb	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	701a      	strb	r2, [r3, #0]
		break;
 800326a:	e001      	b.n	8003270 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800326c:	23fc      	movs	r3, #252	; 0xfc
 800326e:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003270:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003274:	4618      	mov	r0, r3
 8003276:	371c      	adds	r7, #28
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800328a:	2300      	movs	r3, #0
 800328c:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800328e:	2300      	movs	r3, #0
 8003290:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003292:	f107 030e 	add.w	r3, r7, #14
 8003296:	461a      	mov	r2, r3
 8003298:	2101      	movs	r1, #1
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff fa00 	bl	80026a0 <VL53L0X_RdByte>
 80032a0:	4603      	mov	r3, r0
 80032a2:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80032a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d107      	bne.n	80032bc <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80032ac:	7bba      	ldrb	r2, [r7, #14]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2100      	movs	r1, #0
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff ff92 	bl	80031dc <sequence_step_enabled>
 80032b8:	4603      	mov	r3, r0
 80032ba:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80032bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d108      	bne.n	80032d6 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80032c4:	7bba      	ldrb	r2, [r7, #14]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	3302      	adds	r3, #2
 80032ca:	2101      	movs	r1, #1
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff ff85 	bl	80031dc <sequence_step_enabled>
 80032d2:	4603      	mov	r3, r0
 80032d4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80032d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d108      	bne.n	80032f0 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80032de:	7bba      	ldrb	r2, [r7, #14]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	3301      	adds	r3, #1
 80032e4:	2102      	movs	r1, #2
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7ff ff78 	bl	80031dc <sequence_step_enabled>
 80032ec:	4603      	mov	r3, r0
 80032ee:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80032f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d108      	bne.n	800330a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80032f8:	7bba      	ldrb	r2, [r7, #14]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	3303      	adds	r3, #3
 80032fe:	2103      	movs	r1, #3
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff ff6b 	bl	80031dc <sequence_step_enabled>
 8003306:	4603      	mov	r3, r0
 8003308:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800330a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d108      	bne.n	8003324 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8003312:	7bba      	ldrb	r2, [r7, #14]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	3304      	adds	r3, #4
 8003318:	2104      	movs	r1, #4
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff ff5e 	bl	80031dc <sequence_step_enabled>
 8003320:	4603      	mov	r3, r0
 8003322:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003324:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800333a:	2300      	movs	r3, #0
 800333c:	75fb      	strb	r3, [r7, #23]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800333e:	f107 030e 	add.w	r3, r7, #14
 8003342:	461a      	mov	r2, r3
 8003344:	21f8      	movs	r1, #248	; 0xf8
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff f9d4 	bl	80026f4 <VL53L0X_RdWord>
 800334c:	4603      	mov	r3, r0
 800334e:	75fb      	strb	r3, [r7, #23]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8003350:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d112      	bne.n	800337e <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x4e>
		if (osc_calibrate_val != 0) {
 8003358:	89fb      	ldrh	r3, [r7, #14]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d006      	beq.n	800336c <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x3c>
			IMPeriodMilliSeconds =
				InterMeasurementPeriodMilliSeconds
					* osc_calibrate_val;
 800335e:	89fb      	ldrh	r3, [r7, #14]
 8003360:	461a      	mov	r2, r3
			IMPeriodMilliSeconds =
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	fb02 f303 	mul.w	r3, r2, r3
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	e001      	b.n	8003370 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x40>
		} else {
			IMPeriodMilliSeconds =
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	613b      	str	r3, [r7, #16]
				InterMeasurementPeriodMilliSeconds;
		}
		Status = VL53L0X_WrDWord(Dev,
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	2104      	movs	r1, #4
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff f92d 	bl	80025d4 <VL53L0X_WrDWord>
 800337a:	4603      	mov	r3, r0
 800337c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800337e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d102      	bne.n	800338c <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x5c>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			InterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800338c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80033a2:	2300      	movs	r3, #0
 80033a4:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80033a6:	f107 030c 	add.w	r3, r7, #12
 80033aa:	461a      	mov	r2, r3
 80033ac:	21f8      	movs	r1, #248	; 0xf8
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff f9a0 	bl	80026f4 <VL53L0X_RdWord>
 80033b4:	4603      	mov	r3, r0
 80033b6:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80033b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d108      	bne.n	80033d2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80033c0:	f107 0308 	add.w	r3, r7, #8
 80033c4:	461a      	mov	r2, r3
 80033c6:	2104      	movs	r1, #4
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff f9cb 	bl	8002764 <VL53L0X_RdDWord>
 80033ce:	4603      	mov	r3, r0
 80033d0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80033d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10c      	bne.n	80033f4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80033da:	89bb      	ldrh	r3, [r7, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	89ba      	ldrh	r2, [r7, #12]
 80033e4:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80033f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800340a:	2300      	movs	r3, #0
 800340c:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	7f1b      	ldrb	r3, [r3, #28]
 8003412:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	7bba      	ldrb	r2, [r7, #14]
 8003418:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800341a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b086      	sub	sp, #24
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003434:	2300      	movs	r3, #0
 8003436:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8003438:	f107 030e 	add.w	r3, r7, #14
 800343c:	461a      	mov	r2, r3
 800343e:	2120      	movs	r1, #32
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff f957 	bl	80026f4 <VL53L0X_RdWord>
 8003446:	4603      	mov	r3, r0
 8003448:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800344a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d118      	bne.n	8003484 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8003452:	89fb      	ldrh	r3, [r7, #14]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d109      	bne.n	800346c <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	771a      	strb	r2, [r3, #28]
 800346a:	e00b      	b.n	8003484 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800346c:	89fb      	ldrh	r3, [r7, #14]
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003484:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	807b      	strh	r3, [r7, #2]
 800349c:	4613      	mov	r3, r2
 800349e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034a0:	2300      	movs	r3, #0
 80034a2:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80034a4:	2300      	movs	r3, #0
 80034a6:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80034b0:	887b      	ldrh	r3, [r7, #2]
 80034b2:	2b05      	cmp	r3, #5
 80034b4:	d902      	bls.n	80034bc <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80034b6:	23fc      	movs	r3, #252	; 0xfc
 80034b8:	75fb      	strb	r3, [r7, #23]
 80034ba:	e05b      	b.n	8003574 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80034bc:	787b      	ldrb	r3, [r7, #1]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d106      	bne.n	80034d0 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80034ca:	2301      	movs	r3, #1
 80034cc:	73bb      	strb	r3, [r7, #14]
 80034ce:	e00a      	b.n	80034e6 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80034d0:	887b      	ldrh	r3, [r7, #2]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	330c      	adds	r3, #12
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80034e2:	2301      	movs	r3, #1
 80034e4:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80034e6:	887b      	ldrh	r3, [r7, #2]
 80034e8:	2b05      	cmp	r3, #5
 80034ea:	d841      	bhi.n	8003570 <VL53L0X_SetLimitCheckEnable+0xe0>
 80034ec:	a201      	add	r2, pc, #4	; (adr r2, 80034f4 <VL53L0X_SetLimitCheckEnable+0x64>)
 80034ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f2:	bf00      	nop
 80034f4:	0800350d 	.word	0x0800350d
 80034f8:	08003517 	.word	0x08003517
 80034fc:	0800352d 	.word	0x0800352d
 8003500:	08003537 	.word	0x08003537
 8003504:	08003541 	.word	0x08003541
 8003508:	08003559 	.word	0x08003559

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	7bfa      	ldrb	r2, [r7, #15]
 8003510:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8003514:	e02e      	b.n	8003574 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800351a:	b29b      	uxth	r3, r3
 800351c:	461a      	mov	r2, r3
 800351e:	2144      	movs	r1, #68	; 0x44
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff f82d 	bl	8002580 <VL53L0X_WrWord>
 8003526:	4603      	mov	r3, r0
 8003528:	75fb      	strb	r3, [r7, #23]

			break;
 800352a:	e023      	b.n	8003574 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	7bfa      	ldrb	r2, [r7, #15]
 8003530:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8003534:	e01e      	b.n	8003574 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	7bfa      	ldrb	r2, [r7, #15]
 800353a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800353e:	e019      	b.n	8003574 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8003540:	7bbb      	ldrb	r3, [r7, #14]
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8003546:	7b7b      	ldrb	r3, [r7, #13]
 8003548:	22fe      	movs	r2, #254	; 0xfe
 800354a:	2160      	movs	r1, #96	; 0x60
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7ff f873 	bl	8002638 <VL53L0X_UpdateByte>
 8003552:	4603      	mov	r3, r0
 8003554:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8003556:	e00d      	b.n	8003574 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8003558:	7bbb      	ldrb	r3, [r7, #14]
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800355e:	7b7b      	ldrb	r3, [r7, #13]
 8003560:	22ef      	movs	r2, #239	; 0xef
 8003562:	2160      	movs	r1, #96	; 0x60
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff f867 	bl	8002638 <VL53L0X_UpdateByte>
 800356a:	4603      	mov	r3, r0
 800356c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800356e:	e001      	b.n	8003574 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003570:	23fc      	movs	r3, #252	; 0xfc
 8003572:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003574:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10f      	bne.n	800359c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800357c:	787b      	ldrb	r3, [r7, #1]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003582:	887b      	ldrh	r3, [r7, #2]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	4413      	add	r3, r2
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800358e:	e005      	b.n	800359c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003590:	887b      	ldrh	r3, [r7, #2]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	4413      	add	r3, r2
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800359c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	460b      	mov	r3, r1
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80035ba:	897b      	ldrh	r3, [r7, #10]
 80035bc:	2b05      	cmp	r3, #5
 80035be:	d905      	bls.n	80035cc <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80035c0:	23fc      	movs	r3, #252	; 0xfc
 80035c2:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	701a      	strb	r2, [r3, #0]
 80035ca:	e008      	b.n	80035de <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80035cc:	897b      	ldrh	r3, [r7, #10]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	4413      	add	r3, r2
 80035d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035d6:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	7dba      	ldrb	r2, [r7, #22]
 80035dc:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80035de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	371c      	adds	r7, #28
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	460b      	mov	r3, r1
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80035fe:	2300      	movs	r3, #0
 8003600:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8003602:	897b      	ldrh	r3, [r7, #10]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4413      	add	r3, r2
 8003608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800360c:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800360e:	7dbb      	ldrb	r3, [r7, #22]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d107      	bne.n	8003624 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003614:	897b      	ldrh	r3, [r7, #10]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	330c      	adds	r3, #12
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	e040      	b.n	80036a6 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8003624:	897b      	ldrh	r3, [r7, #10]
 8003626:	2b05      	cmp	r3, #5
 8003628:	d830      	bhi.n	800368c <VL53L0X_SetLimitCheckValue+0x9c>
 800362a:	a201      	add	r2, pc, #4	; (adr r2, 8003630 <VL53L0X_SetLimitCheckValue+0x40>)
 800362c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003630:	08003649 	.word	0x08003649
 8003634:	08003651 	.word	0x08003651
 8003638:	08003667 	.word	0x08003667
 800363c:	0800366f 	.word	0x0800366f
 8003640:	08003677 	.word	0x08003677
 8003644:	08003677 	.word	0x08003677

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800364e:	e01f      	b.n	8003690 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8003654:	b29b      	uxth	r3, r3
 8003656:	461a      	mov	r2, r3
 8003658:	2144      	movs	r1, #68	; 0x44
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f7fe ff90 	bl	8002580 <VL53L0X_WrWord>
 8003660:	4603      	mov	r3, r0
 8003662:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8003664:	e014      	b.n	8003690 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800366c:	e010      	b.n	8003690 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8003674:	e00c      	b.n	8003690 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800367a:	b29b      	uxth	r3, r3
 800367c:	461a      	mov	r2, r3
 800367e:	2164      	movs	r1, #100	; 0x64
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f7fe ff7d 	bl	8002580 <VL53L0X_WrWord>
 8003686:	4603      	mov	r3, r0
 8003688:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800368a:	e001      	b.n	8003690 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800368c:	23fc      	movs	r3, #252	; 0xfc
 800368e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8003690:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d106      	bne.n	80036a6 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003698:	897b      	ldrh	r3, [r7, #10]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	330c      	adds	r3, #12
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80036a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop

080036b4 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	460b      	mov	r3, r1
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80036c2:	2300      	movs	r3, #0
 80036c4:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80036ca:	897b      	ldrh	r3, [r7, #10]
 80036cc:	2b05      	cmp	r3, #5
 80036ce:	d847      	bhi.n	8003760 <VL53L0X_GetLimitCheckValue+0xac>
 80036d0:	a201      	add	r2, pc, #4	; (adr r2, 80036d8 <VL53L0X_GetLimitCheckValue+0x24>)
 80036d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d6:	bf00      	nop
 80036d8:	080036f1 	.word	0x080036f1
 80036dc:	080036fd 	.word	0x080036fd
 80036e0:	08003723 	.word	0x08003723
 80036e4:	0800372f 	.word	0x0800372f
 80036e8:	0800373b 	.word	0x0800373b
 80036ec:	0800373b 	.word	0x0800373b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f4:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80036f6:	2300      	movs	r3, #0
 80036f8:	77bb      	strb	r3, [r7, #30]
		break;
 80036fa:	e033      	b.n	8003764 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80036fc:	f107 0316 	add.w	r3, r7, #22
 8003700:	461a      	mov	r2, r3
 8003702:	2144      	movs	r1, #68	; 0x44
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f7fe fff5 	bl	80026f4 <VL53L0X_RdWord>
 800370a:	4603      	mov	r3, r0
 800370c:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800370e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d102      	bne.n	800371c <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8003716:	8afb      	ldrh	r3, [r7, #22]
 8003718:	025b      	lsls	r3, r3, #9
 800371a:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800371c:	2301      	movs	r3, #1
 800371e:	77bb      	strb	r3, [r7, #30]
		break;
 8003720:	e020      	b.n	8003764 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003726:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8003728:	2300      	movs	r3, #0
 800372a:	77bb      	strb	r3, [r7, #30]
		break;
 800372c:	e01a      	b.n	8003764 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8003734:	2300      	movs	r3, #0
 8003736:	77bb      	strb	r3, [r7, #30]
		break;
 8003738:	e014      	b.n	8003764 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800373a:	f107 0316 	add.w	r3, r7, #22
 800373e:	461a      	mov	r2, r3
 8003740:	2164      	movs	r1, #100	; 0x64
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f7fe ffd6 	bl	80026f4 <VL53L0X_RdWord>
 8003748:	4603      	mov	r3, r0
 800374a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800374c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d102      	bne.n	800375a <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8003754:	8afb      	ldrh	r3, [r7, #22]
 8003756:	025b      	lsls	r3, r3, #9
 8003758:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800375a:	2300      	movs	r3, #0
 800375c:	77bb      	strb	r3, [r7, #30]
		break;
 800375e:	e001      	b.n	8003764 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003760:	23fc      	movs	r3, #252	; 0xfc
 8003762:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003764:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d12a      	bne.n	80037c2 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800376c:	7fbb      	ldrb	r3, [r7, #30]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d124      	bne.n	80037bc <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d110      	bne.n	800379a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8003778:	897b      	ldrh	r3, [r7, #10]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	330c      	adds	r3, #12
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800378c:	897b      	ldrh	r3, [r7, #10]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4413      	add	r3, r2
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003798:	e013      	b.n	80037c2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80037a0:	897b      	ldrh	r3, [r7, #10]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	330c      	adds	r3, #12
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80037ae:	897b      	ldrh	r3, [r7, #10]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4413      	add	r3, r2
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80037ba:	e002      	b.n	80037c2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80037c2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3720      	adds	r7, #32
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop

080037d0 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80037da:	2300      	movs	r3, #0
 80037dc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80037de:	f107 030e 	add.w	r3, r7, #14
 80037e2:	461a      	mov	r2, r3
 80037e4:	2101      	movs	r1, #1
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fe ff5a 	bl	80026a0 <VL53L0X_RdByte>
 80037ec:	4603      	mov	r3, r0
 80037ee:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80037f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10e      	bne.n	8003816 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80037f8:	7bba      	ldrb	r2, [r7, #14]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8003800:	7bbb      	ldrb	r3, [r7, #14]
 8003802:	b25b      	sxtb	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	da03      	bge.n	8003810 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2201      	movs	r2, #1
 800380c:	701a      	strb	r2, [r3, #0]
 800380e:	e002      	b.n	8003816 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	2200      	movs	r2, #0
 8003814:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d104      	bne.n	8003828 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	781a      	ldrb	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003828:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800383c:	2300      	movs	r3, #0
 800383e:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8003840:	f107 030e 	add.w	r3, r7, #14
 8003844:	4619      	mov	r1, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff fbb6 	bl	8002fb8 <VL53L0X_GetDeviceMode>
 800384c:	4603      	mov	r3, r0
 800384e:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8003850:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d107      	bne.n	8003868 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8003858:	7bbb      	ldrb	r3, [r7, #14]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d104      	bne.n	8003868 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f898 	bl	8003994 <VL53L0X_StartMeasurement>
 8003864:	4603      	mov	r3, r0
 8003866:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d104      	bne.n	800387a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f001 fb3f 	bl	8004ef4 <VL53L0X_measurement_poll_for_completion>
 8003876:	4603      	mov	r3, r0
 8003878:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800387a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8003882:	7bbb      	ldrb	r3, [r7, #14]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d103      	bne.n	8003890 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2203      	movs	r2, #3
 800388c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8003890:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80038a8:	2300      	movs	r3, #0
 80038aa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80038ac:	2301      	movs	r3, #1
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f001 fae1 	bl	8004e7a <VL53L0X_perform_ref_calibration>
 80038b8:	4603      	mov	r3, r0
 80038ba:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80038bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80038d4:	2300      	movs	r3, #0
 80038d6:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80038de:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80038e0:	7dbb      	ldrb	r3, [r7, #22]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d005      	beq.n	80038f2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80038e6:	7dbb      	ldrb	r3, [r7, #22]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d002      	beq.n	80038f2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80038ec:	7dbb      	ldrb	r3, [r7, #22]
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	d147      	bne.n	8003982 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80038f2:	f107 030c 	add.w	r3, r7, #12
 80038f6:	f107 0210 	add.w	r2, r7, #16
 80038fa:	2101      	movs	r1, #1
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 fbc3 	bl	8004088 <VL53L0X_GetInterruptThresholds>
 8003902:	4603      	mov	r3, r0
 8003904:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800390c:	d803      	bhi.n	8003916 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800390e:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8003910:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8003914:	d935      	bls.n	8003982 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8003916:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d131      	bne.n	8003982 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800391e:	78fb      	ldrb	r3, [r7, #3]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d006      	beq.n	8003932 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8003924:	491a      	ldr	r1, [pc, #104]	; (8003990 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f002 fcbc 	bl	80062a4 <VL53L0X_load_tuning_settings>
 800392c:	4603      	mov	r3, r0
 800392e:	75fb      	strb	r3, [r7, #23]
 8003930:	e027      	b.n	8003982 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8003932:	2204      	movs	r2, #4
 8003934:	21ff      	movs	r1, #255	; 0xff
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fe fdfe 	bl	8002538 <VL53L0X_WrByte>
 800393c:	4603      	mov	r3, r0
 800393e:	461a      	mov	r2, r3
 8003940:	7dfb      	ldrb	r3, [r7, #23]
 8003942:	4313      	orrs	r3, r2
 8003944:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8003946:	2200      	movs	r2, #0
 8003948:	2170      	movs	r1, #112	; 0x70
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fe fdf4 	bl	8002538 <VL53L0X_WrByte>
 8003950:	4603      	mov	r3, r0
 8003952:	461a      	mov	r2, r3
 8003954:	7dfb      	ldrb	r3, [r7, #23]
 8003956:	4313      	orrs	r3, r2
 8003958:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800395a:	2200      	movs	r2, #0
 800395c:	21ff      	movs	r1, #255	; 0xff
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7fe fdea 	bl	8002538 <VL53L0X_WrByte>
 8003964:	4603      	mov	r3, r0
 8003966:	461a      	mov	r2, r3
 8003968:	7dfb      	ldrb	r3, [r7, #23]
 800396a:	4313      	orrs	r3, r2
 800396c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800396e:	2200      	movs	r2, #0
 8003970:	2180      	movs	r1, #128	; 0x80
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7fe fde0 	bl	8002538 <VL53L0X_WrByte>
 8003978:	4603      	mov	r3, r0
 800397a:	461a      	mov	r2, r3
 800397c:	7dfb      	ldrb	r3, [r7, #23]
 800397e:	4313      	orrs	r3, r2
 8003980:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8003982:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8003986:	4618      	mov	r0, r3
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000288 	.word	0x20000288

08003994 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800399c:	2300      	movs	r3, #0
 800399e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80039a0:	2301      	movs	r3, #1
 80039a2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80039a4:	f107 030e 	add.w	r3, r7, #14
 80039a8:	4619      	mov	r1, r3
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff fb04 	bl	8002fb8 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80039b0:	2201      	movs	r2, #1
 80039b2:	2180      	movs	r1, #128	; 0x80
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7fe fdbf 	bl	8002538 <VL53L0X_WrByte>
 80039ba:	4603      	mov	r3, r0
 80039bc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80039be:	2201      	movs	r2, #1
 80039c0:	21ff      	movs	r1, #255	; 0xff
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7fe fdb8 	bl	8002538 <VL53L0X_WrByte>
 80039c8:	4603      	mov	r3, r0
 80039ca:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80039cc:	2200      	movs	r2, #0
 80039ce:	2100      	movs	r1, #0
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7fe fdb1 	bl	8002538 <VL53L0X_WrByte>
 80039d6:	4603      	mov	r3, r0
 80039d8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80039e0:	461a      	mov	r2, r3
 80039e2:	2191      	movs	r1, #145	; 0x91
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7fe fda7 	bl	8002538 <VL53L0X_WrByte>
 80039ea:	4603      	mov	r3, r0
 80039ec:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80039ee:	2201      	movs	r2, #1
 80039f0:	2100      	movs	r1, #0
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7fe fda0 	bl	8002538 <VL53L0X_WrByte>
 80039f8:	4603      	mov	r3, r0
 80039fa:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80039fc:	2200      	movs	r2, #0
 80039fe:	21ff      	movs	r1, #255	; 0xff
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7fe fd99 	bl	8002538 <VL53L0X_WrByte>
 8003a06:	4603      	mov	r3, r0
 8003a08:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	2180      	movs	r1, #128	; 0x80
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fe fd92 	bl	8002538 <VL53L0X_WrByte>
 8003a14:	4603      	mov	r3, r0
 8003a16:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8003a18:	7bbb      	ldrb	r3, [r7, #14]
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d054      	beq.n	8003ac8 <VL53L0X_StartMeasurement+0x134>
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	dc6c      	bgt.n	8003afc <VL53L0X_StartMeasurement+0x168>
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <VL53L0X_StartMeasurement+0x98>
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d034      	beq.n	8003a94 <VL53L0X_StartMeasurement+0x100>
 8003a2a:	e067      	b.n	8003afc <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	2100      	movs	r1, #0
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7fe fd81 	bl	8002538 <VL53L0X_WrByte>
 8003a36:	4603      	mov	r3, r0
 8003a38:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
 8003a3c:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8003a3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d15d      	bne.n	8003b02 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8003a46:	2300      	movs	r3, #0
 8003a48:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8003a50:	f107 030d 	add.w	r3, r7, #13
 8003a54:	461a      	mov	r2, r3
 8003a56:	2100      	movs	r1, #0
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7fe fe21 	bl	80026a0 <VL53L0X_RdByte>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	3301      	adds	r3, #1
 8003a66:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8003a68:	7b7a      	ldrb	r2, [r7, #13]
 8003a6a:	7bfb      	ldrb	r3, [r7, #15]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8003a70:	7bfa      	ldrb	r2, [r7, #15]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d107      	bne.n	8003a86 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8003a76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d103      	bne.n	8003a86 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003a84:	d3e1      	bcc.n	8003a4a <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003a8c:	d339      	bcc.n	8003b02 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8003a8e:	23f9      	movs	r3, #249	; 0xf9
 8003a90:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8003a92:	e036      	b.n	8003b02 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003a94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d105      	bne.n	8003aa8 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff ff12 	bl	80038c8 <VL53L0X_CheckAndLoadInterruptSettings>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	2100      	movs	r1, #0
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7fe fd43 	bl	8002538 <VL53L0X_WrByte>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8003ab6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d123      	bne.n	8003b06 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2204      	movs	r2, #4
 8003ac2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8003ac6:	e01e      	b.n	8003b06 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003ac8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d105      	bne.n	8003adc <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff fef8 	bl	80038c8 <VL53L0X_CheckAndLoadInterruptSettings>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003adc:	2204      	movs	r2, #4
 8003ade:	2100      	movs	r1, #0
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7fe fd29 	bl	8002538 <VL53L0X_WrByte>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8003aea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10b      	bne.n	8003b0a <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2204      	movs	r2, #4
 8003af6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8003afa:	e006      	b.n	8003b0a <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003afc:	23f8      	movs	r3, #248	; 0xf8
 8003afe:	75fb      	strb	r3, [r7, #23]
 8003b00:	e004      	b.n	8003b0c <VL53L0X_StartMeasurement+0x178>
		break;
 8003b02:	bf00      	nop
 8003b04:	e002      	b.n	8003b0c <VL53L0X_StartMeasurement+0x178>
		break;
 8003b06:	bf00      	nop
 8003b08:	e000      	b.n	8003b0c <VL53L0X_StartMeasurement+0x178>
		break;
 8003b0a:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8003b0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8003b2c:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8003b2e:	7bbb      	ldrb	r3, [r7, #14]
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d112      	bne.n	8003b5a <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8003b34:	f107 0308 	add.w	r3, r7, #8
 8003b38:	4619      	mov	r1, r3
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 fb1a 	bl	8004174 <VL53L0X_GetInterruptMaskStatus>
 8003b40:	4603      	mov	r3, r0
 8003b42:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d103      	bne.n	8003b52 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	701a      	strb	r2, [r3, #0]
 8003b50:	e01c      	b.n	8003b8c <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2200      	movs	r2, #0
 8003b56:	701a      	strb	r2, [r3, #0]
 8003b58:	e018      	b.n	8003b8c <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8003b5a:	f107 030d 	add.w	r3, r7, #13
 8003b5e:	461a      	mov	r2, r3
 8003b60:	2114      	movs	r1, #20
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7fe fd9c 	bl	80026a0 <VL53L0X_RdByte>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8003b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10b      	bne.n	8003b8c <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8003b74:	7b7b      	ldrb	r3, [r7, #13]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2201      	movs	r2, #1
 8003b82:	701a      	strb	r2, [r3, #0]
 8003b84:	e002      	b.n	8003b8c <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8003b98:	b5b0      	push	{r4, r5, r7, lr}
 8003b9a:	b096      	sub	sp, #88	; 0x58
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8003ba8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003bac:	230c      	movs	r3, #12
 8003bae:	2114      	movs	r1, #20
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7fe fc95 	bl	80024e0 <VL53L0X_ReadMulti>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8003bbc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f040 80d1 	bne.w	8003d68 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8003bd2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	021b      	lsls	r3, r3, #8
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	4413      	add	r3, r2
 8003be4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	2200      	movs	r2, #0
 8003bec:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8003bee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	4413      	add	r3, r2
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	025b      	lsls	r3, r3, #9
 8003c04:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c0a:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8003c0c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	021b      	lsls	r3, r3, #8
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8003c22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003c26:	025b      	lsls	r3, r3, #9
 8003c28:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8003c2e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	4413      	add	r3, r2
 8003c40:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003c4a:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8003c4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8003c5a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8003c62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8003c66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003c68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c6c:	d046      	beq.n	8003cfc <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8003c6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003c70:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003c74:	fb02 f303 	mul.w	r3, r2, r3
 8003c78:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003c7c:	4a57      	ldr	r2, [pc, #348]	; (8003ddc <VL53L0X_GetRangingMeasurementData+0x244>)
 8003c7e:	fb82 1203 	smull	r1, r2, r2, r3
 8003c82:	1192      	asrs	r2, r2, #6
 8003c84:	17db      	asrs	r3, r3, #31
 8003c86:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8003c88:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	7f1b      	ldrb	r3, [r3, #28]
 8003c96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8003c9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d02c      	beq.n	8003cfc <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8003ca2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003ca4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003ca8:	fb02 f303 	mul.w	r3, r2, r3
 8003cac:	121a      	asrs	r2, r3, #8
					<= 0) {
 8003cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d10d      	bne.n	8003cd0 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8003cb4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d004      	beq.n	8003cc6 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8003cbc:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8003cc0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003cc4:	e016      	b.n	8003cf4 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8003cc6:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8003cca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003cce:	e011      	b.n	8003cf4 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8003cd0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003cd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cd6:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8003cda:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003cdc:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8003ce0:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8003ce4:	121b      	asrs	r3, r3, #8
 8003ce6:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8003ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cea:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8003cec:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8003cf0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8003cf4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003cf8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8003cfc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00d      	beq.n	8003d20 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8003d04:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003d08:	089b      	lsrs	r3, r3, #2
 8003d0a:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8003d10:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	019b      	lsls	r3, r3, #6
 8003d18:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	75da      	strb	r2, [r3, #23]
 8003d1e:	e006      	b.n	8003d2e <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003d26:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8003d2e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003d32:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8003d36:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8003d3a:	9301      	str	r3, [sp, #4]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	4613      	mov	r3, r2
 8003d42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f002 ff4b 	bl	8006be0 <VL53L0X_get_pal_range_status>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8003d58:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d103      	bne.n	8003d68 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8003d60:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003d68:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d12f      	bne.n	8003dd0 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f107 040c 	add.w	r4, r7, #12
 8003d76:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8003d7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003d82:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8003d8a:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8003d90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8003d98:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8003d9e:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8003da4:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8003daa:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8003db0:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8003db6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8003dc0:	f107 050c 	add.w	r5, r7, #12
 8003dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003dcc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003dd0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3750      	adds	r7, #80	; 0x50
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bdb0      	pop	{r4, r5, r7, pc}
 8003ddc:	10624dd3 	.word	0x10624dd3

08003de0 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003dea:	2300      	movs	r3, #0
 8003dec:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8003dee:	2100      	movs	r1, #0
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7ff f8b5 	bl	8002f60 <VL53L0X_SetDeviceMode>
 8003df6:	4603      	mov	r3, r0
 8003df8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d104      	bne.n	8003e0c <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7ff fd16 	bl	8003834 <VL53L0X_PerformSingleMeasurement>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d105      	bne.n	8003e20 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8003e14:	6839      	ldr	r1, [r7, #0]
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7ff febe 	bl	8003b98 <VL53L0X_GetRangingMeasurementData>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8003e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d105      	bne.n	8003e34 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8003e28:	2100      	movs	r1, #0
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f962 	bl	80040f4 <VL53L0X_ClearInterruptMask>
 8003e30:	4603      	mov	r3, r0
 8003e32:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8003e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	4608      	mov	r0, r1
 8003e4a:	4611      	mov	r1, r2
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4603      	mov	r3, r0
 8003e50:	70fb      	strb	r3, [r7, #3]
 8003e52:	460b      	mov	r3, r1
 8003e54:	70bb      	strb	r3, [r7, #2]
 8003e56:	4613      	mov	r3, r2
 8003e58:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8003e64:	23f6      	movs	r3, #246	; 0xf6
 8003e66:	73fb      	strb	r3, [r7, #15]
 8003e68:	e107      	b.n	800407a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8003e6a:	78bb      	ldrb	r3, [r7, #2]
 8003e6c:	2b14      	cmp	r3, #20
 8003e6e:	d110      	bne.n	8003e92 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8003e70:	7e3b      	ldrb	r3, [r7, #24]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d102      	bne.n	8003e7c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8003e76:	2310      	movs	r3, #16
 8003e78:	73bb      	strb	r3, [r7, #14]
 8003e7a:	e001      	b.n	8003e80 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8003e80:	7bbb      	ldrb	r3, [r7, #14]
 8003e82:	461a      	mov	r2, r3
 8003e84:	2184      	movs	r1, #132	; 0x84
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7fe fb56 	bl	8002538 <VL53L0X_WrByte>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	73fb      	strb	r3, [r7, #15]
 8003e90:	e0f3      	b.n	800407a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8003e92:	78bb      	ldrb	r3, [r7, #2]
 8003e94:	2b15      	cmp	r3, #21
 8003e96:	f040 8097 	bne.w	8003fc8 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	21ff      	movs	r1, #255	; 0xff
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fe fb4a 	bl	8002538 <VL53L0X_WrByte>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003eae:	2200      	movs	r2, #0
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fe fb40 	bl	8002538 <VL53L0X_WrByte>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	461a      	mov	r2, r3
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	21ff      	movs	r1, #255	; 0xff
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fe fb36 	bl	8002538 <VL53L0X_WrByte>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	461a      	mov	r2, r3
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	2180      	movs	r1, #128	; 0x80
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fe fb2c 	bl	8002538 <VL53L0X_WrByte>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8003eea:	2202      	movs	r2, #2
 8003eec:	2185      	movs	r1, #133	; 0x85
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fe fb22 	bl	8002538 <VL53L0X_WrByte>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8003efe:	2204      	movs	r2, #4
 8003f00:	21ff      	movs	r1, #255	; 0xff
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7fe fb18 	bl	8002538 <VL53L0X_WrByte>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8003f12:	2200      	movs	r2, #0
 8003f14:	21cd      	movs	r1, #205	; 0xcd
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7fe fb0e 	bl	8002538 <VL53L0X_WrByte>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	461a      	mov	r2, r3
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8003f26:	2211      	movs	r2, #17
 8003f28:	21cc      	movs	r1, #204	; 0xcc
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fe fb04 	bl	8002538 <VL53L0X_WrByte>
 8003f30:	4603      	mov	r3, r0
 8003f32:	461a      	mov	r2, r3
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8003f3a:	2207      	movs	r2, #7
 8003f3c:	21ff      	movs	r1, #255	; 0xff
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fe fafa 	bl	8002538 <VL53L0X_WrByte>
 8003f44:	4603      	mov	r3, r0
 8003f46:	461a      	mov	r2, r3
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8003f4e:	2200      	movs	r2, #0
 8003f50:	21be      	movs	r1, #190	; 0xbe
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7fe faf0 	bl	8002538 <VL53L0X_WrByte>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8003f62:	2206      	movs	r2, #6
 8003f64:	21ff      	movs	r1, #255	; 0xff
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7fe fae6 	bl	8002538 <VL53L0X_WrByte>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	461a      	mov	r2, r3
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8003f76:	2209      	movs	r2, #9
 8003f78:	21cc      	movs	r1, #204	; 0xcc
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fe fadc 	bl	8002538 <VL53L0X_WrByte>
 8003f80:	4603      	mov	r3, r0
 8003f82:	461a      	mov	r2, r3
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	21ff      	movs	r1, #255	; 0xff
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7fe fad2 	bl	8002538 <VL53L0X_WrByte>
 8003f94:	4603      	mov	r3, r0
 8003f96:	461a      	mov	r2, r3
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	21ff      	movs	r1, #255	; 0xff
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fe fac8 	bl	8002538 <VL53L0X_WrByte>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	461a      	mov	r2, r3
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fe fabe 	bl	8002538 <VL53L0X_WrByte>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	73fb      	strb	r3, [r7, #15]
 8003fc6:	e058      	b.n	800407a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8003fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d121      	bne.n	8004014 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8003fd0:	787b      	ldrb	r3, [r7, #1]
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d81b      	bhi.n	800400e <VL53L0X_SetGpioConfig+0x1ce>
 8003fd6:	a201      	add	r2, pc, #4	; (adr r2, 8003fdc <VL53L0X_SetGpioConfig+0x19c>)
 8003fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fdc:	08003ff1 	.word	0x08003ff1
 8003fe0:	08003ff7 	.word	0x08003ff7
 8003fe4:	08003ffd 	.word	0x08003ffd
 8003fe8:	08004003 	.word	0x08004003
 8003fec:	08004009 	.word	0x08004009
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	73bb      	strb	r3, [r7, #14]
				break;
 8003ff4:	e00f      	b.n	8004016 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	73bb      	strb	r3, [r7, #14]
				break;
 8003ffa:	e00c      	b.n	8004016 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	73bb      	strb	r3, [r7, #14]
				break;
 8004000:	e009      	b.n	8004016 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8004002:	2303      	movs	r3, #3
 8004004:	73bb      	strb	r3, [r7, #14]
				break;
 8004006:	e006      	b.n	8004016 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8004008:	2304      	movs	r3, #4
 800400a:	73bb      	strb	r3, [r7, #14]
				break;
 800400c:	e003      	b.n	8004016 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800400e:	23f5      	movs	r3, #245	; 0xf5
 8004010:	73fb      	strb	r3, [r7, #15]
 8004012:	e000      	b.n	8004016 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8004014:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8004016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d107      	bne.n	800402e <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800401e:	7bbb      	ldrb	r3, [r7, #14]
 8004020:	461a      	mov	r2, r3
 8004022:	210a      	movs	r1, #10
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7fe fa87 	bl	8002538 <VL53L0X_WrByte>
 800402a:	4603      	mov	r3, r0
 800402c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800402e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10f      	bne.n	8004056 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004036:	7e3b      	ldrb	r3, [r7, #24]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d102      	bne.n	8004042 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800403c:	2300      	movs	r3, #0
 800403e:	73bb      	strb	r3, [r7, #14]
 8004040:	e001      	b.n	8004046 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8004042:	2310      	movs	r3, #16
 8004044:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8004046:	7bbb      	ldrb	r3, [r7, #14]
 8004048:	22ef      	movs	r2, #239	; 0xef
 800404a:	2184      	movs	r1, #132	; 0x84
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7fe faf3 	bl	8002638 <VL53L0X_UpdateByte>
 8004052:	4603      	mov	r3, r0
 8004054:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8004056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d103      	bne.n	8004066 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	787a      	ldrb	r2, [r7, #1]
 8004062:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8004066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d105      	bne.n	800407a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800406e:	2100      	movs	r1, #0
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f83f 	bl	80040f4 <VL53L0X_ClearInterruptMask>
 8004076:	4603      	mov	r3, r0
 8004078:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800407a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop

08004088 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	607a      	str	r2, [r7, #4]
 8004092:	603b      	str	r3, [r7, #0]
 8004094:	460b      	mov	r3, r1
 8004096:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004098:	2300      	movs	r3, #0
 800409a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800409c:	f107 0314 	add.w	r3, r7, #20
 80040a0:	461a      	mov	r2, r3
 80040a2:	210e      	movs	r1, #14
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f7fe fb25 	bl	80026f4 <VL53L0X_RdWord>
 80040aa:	4603      	mov	r3, r0
 80040ac:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80040ae:	8abb      	ldrh	r3, [r7, #20]
 80040b0:	045b      	lsls	r3, r3, #17
 80040b2:	461a      	mov	r2, r3
 80040b4:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <VL53L0X_GetInterruptThresholds+0x68>)
 80040b6:	4013      	ands	r3, r2
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80040bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10f      	bne.n	80040e4 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80040c4:	f107 0314 	add.w	r3, r7, #20
 80040c8:	461a      	mov	r2, r3
 80040ca:	210c      	movs	r1, #12
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f7fe fb11 	bl	80026f4 <VL53L0X_RdWord>
 80040d2:	4603      	mov	r3, r0
 80040d4:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80040d6:	8abb      	ldrh	r3, [r7, #20]
 80040d8:	045b      	lsls	r3, r3, #17
 80040da:	461a      	mov	r2, r3
 80040dc:	4b04      	ldr	r3, [pc, #16]	; (80040f0 <VL53L0X_GetInterruptThresholds+0x68>)
 80040de:	4013      	ands	r3, r2
		*pThresholdHigh =
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80040e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	1ffe0000 	.word	0x1ffe0000

080040f4 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80040fe:	2300      	movs	r3, #0
 8004100:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8004106:	2201      	movs	r2, #1
 8004108:	210b      	movs	r1, #11
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7fe fa14 	bl	8002538 <VL53L0X_WrByte>
 8004110:	4603      	mov	r3, r0
 8004112:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8004114:	2200      	movs	r2, #0
 8004116:	210b      	movs	r1, #11
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7fe fa0d 	bl	8002538 <VL53L0X_WrByte>
 800411e:	4603      	mov	r3, r0
 8004120:	461a      	mov	r2, r3
 8004122:	7bfb      	ldrb	r3, [r7, #15]
 8004124:	4313      	orrs	r3, r2
 8004126:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8004128:	f107 030d 	add.w	r3, r7, #13
 800412c:	461a      	mov	r2, r3
 800412e:	2113      	movs	r1, #19
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7fe fab5 	bl	80026a0 <VL53L0X_RdByte>
 8004136:	4603      	mov	r3, r0
 8004138:	461a      	mov	r2, r3
 800413a:	7bfb      	ldrb	r3, [r7, #15]
 800413c:	4313      	orrs	r3, r2
 800413e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8004140:	7bbb      	ldrb	r3, [r7, #14]
 8004142:	3301      	adds	r3, #1
 8004144:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8004146:	7b7b      	ldrb	r3, [r7, #13]
 8004148:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800414c:	2b00      	cmp	r3, #0
 800414e:	d006      	beq.n	800415e <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8004150:	7bbb      	ldrb	r3, [r7, #14]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d803      	bhi.n	800415e <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8004156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0d3      	beq.n	8004106 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800415e:	7bbb      	ldrb	r3, [r7, #14]
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8004164:	23f4      	movs	r3, #244	; 0xf4
 8004166:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004168:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800417e:	2300      	movs	r3, #0
 8004180:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8004182:	f107 030e 	add.w	r3, r7, #14
 8004186:	461a      	mov	r2, r3
 8004188:	2113      	movs	r1, #19
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7fe fa88 	bl	80026a0 <VL53L0X_RdByte>
 8004190:	4603      	mov	r3, r0
 8004192:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8004194:	7bbb      	ldrb	r3, [r7, #14]
 8004196:	f003 0207 	and.w	r2, r3, #7
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800419e:	7bbb      	ldrb	r3, [r7, #14]
 80041a0:	f003 0318 	and.w	r3, r3, #24
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80041a8:	23fa      	movs	r3, #250	; 0xfa
 80041aa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80041ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80041c4:	2300      	movs	r3, #0
 80041c6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	68b9      	ldr	r1, [r7, #8]
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 fa03 	bl	80045d8 <VL53L0X_perform_ref_spad_management>
 80041d2:	4603      	mov	r3, r0
 80041d4:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80041d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80041ec:	2300      	movs	r3, #0
 80041ee:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80041f0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80041f4:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80041f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041fa:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80041fc:	f107 0308 	add.w	r3, r7, #8
 8004200:	461a      	mov	r2, r3
 8004202:	2128      	movs	r1, #40	; 0x28
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7fe fa75 	bl	80026f4 <VL53L0X_RdWord>
 800420a:	4603      	mov	r3, r0
 800420c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800420e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d11e      	bne.n	8004254 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8004216:	893b      	ldrh	r3, [r7, #8]
 8004218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800421c:	b29b      	uxth	r3, r3
 800421e:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8004220:	893b      	ldrh	r3, [r7, #8]
 8004222:	461a      	mov	r2, r3
 8004224:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004228:	429a      	cmp	r2, r3
 800422a:	dd0b      	ble.n	8004244 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800422c:	893a      	ldrh	r2, [r7, #8]
 800422e:	897b      	ldrh	r3, [r7, #10]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	b29b      	uxth	r3, r3
 8004234:	b21b      	sxth	r3, r3
 8004236:	461a      	mov	r2, r3
					* 250;
 8004238:	23fa      	movs	r3, #250	; 0xfa
 800423a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	e007      	b.n	8004254 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8004244:	893b      	ldrh	r3, [r7, #8]
 8004246:	b21b      	sxth	r3, r3
 8004248:	461a      	mov	r2, r3
 800424a:	23fa      	movs	r3, #250	; 0xfa
 800424c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8004254:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8004260:	b480      	push	{r7}
 8004262:	b08b      	sub	sp, #44	; 0x2c
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800426e:	2308      	movs	r3, #8
 8004270:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8004272:	2300      	movs	r3, #0
 8004274:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800427c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	fbb2 f3f3 	udiv	r3, r2, r3
 8004286:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004290:	69b9      	ldr	r1, [r7, #24]
 8004292:	fb01 f202 	mul.w	r2, r1, r2
 8004296:	1a9b      	subs	r3, r3, r2
 8004298:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	627b      	str	r3, [r7, #36]	; 0x24
 800429e:	e030      	b.n	8004302 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	4413      	add	r3, r2
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80042ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d11e      	bne.n	80042f4 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80042b6:	7ffa      	ldrb	r2, [r7, #31]
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	fa42 f303 	asr.w	r3, r2, r3
 80042be:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80042c4:	e016      	b.n	80042f4 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80042c6:	7ffb      	ldrb	r3, [r7, #31]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00b      	beq.n	80042e8 <get_next_good_spad+0x88>
				success = 1;
 80042d0:	2301      	movs	r3, #1
 80042d2:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	fb03 f202 	mul.w	r2, r3, r2
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	4413      	add	r3, r2
 80042e0:	461a      	mov	r2, r3
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	601a      	str	r2, [r3, #0]
				break;
 80042e6:	e009      	b.n	80042fc <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80042e8:	7ffb      	ldrb	r3, [r7, #31]
 80042ea:	085b      	lsrs	r3, r3, #1
 80042ec:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	3301      	adds	r3, #1
 80042f2:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80042f4:	6a3a      	ldr	r2, [r7, #32]
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d3e4      	bcc.n	80042c6 <get_next_good_spad+0x66>
				coarseIndex++) {
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	3301      	adds	r3, #1
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8004302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	429a      	cmp	r2, r3
 8004308:	d202      	bcs.n	8004310 <get_next_good_spad+0xb0>
 800430a:	7fbb      	ldrb	r3, [r7, #30]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0c7      	beq.n	80042a0 <get_next_good_spad+0x40>
		}
	}
}
 8004310:	bf00      	nop
 8004312:	372c      	adds	r7, #44	; 0x2c
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8004324:	2301      	movs	r3, #1
 8004326:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	099b      	lsrs	r3, r3, #6
 800432c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800432e:	4a07      	ldr	r2, [pc, #28]	; (800434c <is_aperture+0x30>)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <is_aperture+0x22>
		isAperture = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800433e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	20000440 	.word	0x20000440

08004350 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8004350:	b480      	push	{r7}
 8004352:	b089      	sub	sp, #36	; 0x24
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800435c:	2300      	movs	r3, #0
 800435e:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8004360:	2308      	movs	r3, #8
 8004362:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	fbb2 f3f3 	udiv	r3, r2, r3
 800436c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	fbb3 f2f2 	udiv	r2, r3, r2
 8004376:	69b9      	ldr	r1, [r7, #24]
 8004378:	fb01 f202 	mul.w	r2, r1, r2
 800437c:	1a9b      	subs	r3, r3, r2
 800437e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	429a      	cmp	r2, r3
 8004386:	d302      	bcc.n	800438e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004388:	23ce      	movs	r3, #206	; 0xce
 800438a:	77fb      	strb	r3, [r7, #31]
 800438c:	e010      	b.n	80043b0 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	4413      	add	r3, r2
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	b25a      	sxtb	r2, r3
 8004398:	2101      	movs	r1, #1
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	fa01 f303 	lsl.w	r3, r1, r3
 80043a0:	b25b      	sxtb	r3, r3
 80043a2:	4313      	orrs	r3, r2
 80043a4:	b259      	sxtb	r1, r3
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	4413      	add	r3, r2
 80043ac:	b2ca      	uxtb	r2, r1
 80043ae:	701a      	strb	r2, [r3, #0]

	return status;
 80043b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3724      	adds	r7, #36	; 0x24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80043ca:	2306      	movs	r3, #6
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	21b0      	movs	r1, #176	; 0xb0
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7fe f855 	bl	8002480 <VL53L0X_WriteMulti>
 80043d6:	4603      	mov	r3, r0
 80043d8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80043da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b084      	sub	sp, #16
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
 80043ee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80043f0:	2306      	movs	r3, #6
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	21b0      	movs	r1, #176	; 0xb0
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fe f872 	bl	80024e0 <VL53L0X_ReadMulti>
 80043fc:	4603      	mov	r3, r0
 80043fe:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8004400:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08c      	sub	sp, #48	; 0x30
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	607a      	str	r2, [r7, #4]
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	460b      	mov	r3, r1
 800441a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800441c:	2300      	movs	r3, #0
 800441e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8004422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004424:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8004426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004428:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800442a:	2300      	movs	r3, #0
 800442c:	62bb      	str	r3, [r7, #40]	; 0x28
 800442e:	e02b      	b.n	8004488 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8004430:	f107 031c 	add.w	r3, r7, #28
 8004434:	6a3a      	ldr	r2, [r7, #32]
 8004436:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7ff ff11 	bl	8004260 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004444:	d103      	bne.n	800444e <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004446:	23ce      	movs	r3, #206	; 0xce
 8004448:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800444c:	e020      	b.n	8004490 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	461a      	mov	r2, r3
 8004452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004454:	4413      	add	r3, r2
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff ff60 	bl	800431c <is_aperture>
 800445c:	4603      	mov	r3, r0
 800445e:	461a      	mov	r2, r3
 8004460:	7afb      	ldrb	r3, [r7, #11]
 8004462:	4293      	cmp	r3, r2
 8004464:	d003      	beq.n	800446e <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004466:	23ce      	movs	r3, #206	; 0xce
 8004468:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800446c:	e010      	b.n	8004490 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8004472:	6a3a      	ldr	r2, [r7, #32]
 8004474:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004476:	6838      	ldr	r0, [r7, #0]
 8004478:	f7ff ff6a 	bl	8004350 <enable_spad_bit>
		currentSpad++;
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	3301      	adds	r3, #1
 8004480:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8004482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004484:	3301      	adds	r3, #1
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28
 8004488:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800448a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800448c:	429a      	cmp	r2, r3
 800448e:	d3cf      	bcc.n	8004430 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8004490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004492:	6a3a      	ldr	r2, [r7, #32]
 8004494:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8004496:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800449a:	2b00      	cmp	r3, #0
 800449c:	d106      	bne.n	80044ac <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800449e:	6839      	ldr	r1, [r7, #0]
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f7ff ff8d 	bl	80043c0 <set_ref_spad_map>
 80044a6:	4603      	mov	r3, r0
 80044a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80044ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d121      	bne.n	80044f8 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80044b4:	f107 0314 	add.w	r3, r7, #20
 80044b8:	4619      	mov	r1, r3
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f7ff ff93 	bl	80043e6 <get_ref_spad_map>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80044c6:	2300      	movs	r3, #0
 80044c8:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80044ca:	e011      	b.n	80044f0 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	4413      	add	r3, r2
 80044d2:	781a      	ldrb	r2, [r3, #0]
 80044d4:	f107 0114 	add.w	r1, r7, #20
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	440b      	add	r3, r1
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d003      	beq.n	80044ea <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80044e2:	23ce      	movs	r3, #206	; 0xce
 80044e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80044e8:	e006      	b.n	80044f8 <enable_ref_spads+0xec>
			}
			i++;
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	3301      	adds	r3, #1
 80044ee:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80044f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d3e9      	bcc.n	80044cc <enable_ref_spads+0xc0>
		}
	}
	return status;
 80044f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3730      	adds	r7, #48	; 0x30
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b08a      	sub	sp, #40	; 0x28
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800450e:	2300      	movs	r3, #0
 8004510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8004514:	2300      	movs	r3, #0
 8004516:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004520:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8004524:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004528:	2b00      	cmp	r3, #0
 800452a:	d107      	bne.n	800453c <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800452c:	22c0      	movs	r2, #192	; 0xc0
 800452e:	2101      	movs	r1, #1
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7fe f801 	bl	8002538 <VL53L0X_WrByte>
 8004536:	4603      	mov	r3, r0
 8004538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800453c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004540:	2b00      	cmp	r3, #0
 8004542:	d108      	bne.n	8004556 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8004544:	f107 0308 	add.w	r3, r7, #8
 8004548:	4619      	mov	r1, r3
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7ff fc48 	bl	8003de0 <VL53L0X_PerformSingleRangingMeasurement>
 8004550:	4603      	mov	r3, r0
 8004552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8004556:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800455a:	2b00      	cmp	r3, #0
 800455c:	d107      	bne.n	800456e <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800455e:	2201      	movs	r2, #1
 8004560:	21ff      	movs	r1, #255	; 0xff
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7fd ffe8 	bl	8002538 <VL53L0X_WrByte>
 8004568:	4603      	mov	r3, r0
 800456a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800456e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004572:	2b00      	cmp	r3, #0
 8004574:	d107      	bne.n	8004586 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	21b6      	movs	r1, #182	; 0xb6
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7fe f8ba 	bl	80026f4 <VL53L0X_RdWord>
 8004580:	4603      	mov	r3, r0
 8004582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8004586:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800458a:	2b00      	cmp	r3, #0
 800458c:	d107      	bne.n	800459e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800458e:	2200      	movs	r2, #0
 8004590:	21ff      	movs	r1, #255	; 0xff
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fd ffd0 	bl	8002538 <VL53L0X_WrByte>
 8004598:	4603      	mov	r3, r0
 800459a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800459e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d112      	bne.n	80045cc <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80045a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80045aa:	461a      	mov	r2, r3
 80045ac:	2101      	movs	r1, #1
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7fd ffc2 	bl	8002538 <VL53L0X_WrByte>
 80045b4:	4603      	mov	r3, r0
 80045b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80045ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d104      	bne.n	80045cc <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80045c8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80045cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3728      	adds	r7, #40	; 0x28
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80045d8:	b590      	push	{r4, r7, lr}
 80045da:	b09d      	sub	sp, #116	; 0x74
 80045dc:	af06      	add	r7, sp, #24
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80045e4:	2300      	movs	r3, #0
 80045e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80045ea:	23b4      	movs	r3, #180	; 0xb4
 80045ec:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80045f0:	2303      	movs	r3, #3
 80045f2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80045f4:	232c      	movs	r3, #44	; 0x2c
 80045f6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80045f8:	2300      	movs	r3, #0
 80045fa:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8004600:	2300      	movs	r3, #0
 8004602:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8004604:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8004608:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800460a:	2300      	movs	r3, #0
 800460c:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800460e:	2300      	movs	r3, #0
 8004610:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8004612:	2306      	movs	r3, #6
 8004614:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8004616:	2300      	movs	r3, #0
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800461a:	2300      	movs	r3, #0
 800461c:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800461e:	2300      	movs	r3, #0
 8004620:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8004628:	2300      	movs	r3, #0
 800462a:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800463c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800463e:	2300      	movs	r3, #0
 8004640:	64bb      	str	r3, [r7, #72]	; 0x48
 8004642:	e009      	b.n	8004658 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004648:	4413      	add	r3, r2
 800464a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800464e:	2200      	movs	r2, #0
 8004650:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8004652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004654:	3301      	adds	r3, #1
 8004656:	64bb      	str	r3, [r7, #72]	; 0x48
 8004658:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800465a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465c:	429a      	cmp	r2, r3
 800465e:	d3f1      	bcc.n	8004644 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004660:	2201      	movs	r2, #1
 8004662:	21ff      	movs	r1, #255	; 0xff
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f7fd ff67 	bl	8002538 <VL53L0X_WrByte>
 800466a:	4603      	mov	r3, r0
 800466c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8004670:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004674:	2b00      	cmp	r3, #0
 8004676:	d107      	bne.n	8004688 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8004678:	2200      	movs	r2, #0
 800467a:	214f      	movs	r1, #79	; 0x4f
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f7fd ff5b 	bl	8002538 <VL53L0X_WrByte>
 8004682:	4603      	mov	r3, r0
 8004684:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8004688:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800468c:	2b00      	cmp	r3, #0
 800468e:	d107      	bne.n	80046a0 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8004690:	222c      	movs	r2, #44	; 0x2c
 8004692:	214e      	movs	r1, #78	; 0x4e
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f7fd ff4f 	bl	8002538 <VL53L0X_WrByte>
 800469a:	4603      	mov	r3, r0
 800469c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80046a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d107      	bne.n	80046b8 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80046a8:	2200      	movs	r2, #0
 80046aa:	21ff      	movs	r1, #255	; 0xff
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f7fd ff43 	bl	8002538 <VL53L0X_WrByte>
 80046b2:	4603      	mov	r3, r0
 80046b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80046b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d109      	bne.n	80046d4 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80046c0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80046c4:	461a      	mov	r2, r3
 80046c6:	21b6      	movs	r1, #182	; 0xb6
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f7fd ff35 	bl	8002538 <VL53L0X_WrByte>
 80046ce:	4603      	mov	r3, r0
 80046d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80046d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d107      	bne.n	80046ec <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80046dc:	2200      	movs	r2, #0
 80046de:	2180      	movs	r1, #128	; 0x80
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f7fd ff29 	bl	8002538 <VL53L0X_WrByte>
 80046e6:	4603      	mov	r3, r0
 80046e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80046ec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10a      	bne.n	800470a <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80046f4:	f107 0210 	add.w	r2, r7, #16
 80046f8:	f107 0111 	add.w	r1, r7, #17
 80046fc:	2300      	movs	r3, #0
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 fbbb 	bl	8004e7a <VL53L0X_perform_ref_calibration>
 8004704:	4603      	mov	r3, r0
 8004706:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800470a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800470e:	2b00      	cmp	r3, #0
 8004710:	d121      	bne.n	8004756 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8004712:	2300      	movs	r3, #0
 8004714:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8004716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004718:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800471a:	2300      	movs	r3, #0
 800471c:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800471e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004720:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800472e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004732:	f107 0218 	add.w	r2, r7, #24
 8004736:	9204      	str	r2, [sp, #16]
 8004738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800473a:	9203      	str	r2, [sp, #12]
 800473c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800473e:	9202      	str	r2, [sp, #8]
 8004740:	9301      	str	r3, [sp, #4]
 8004742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	4623      	mov	r3, r4
 8004748:	4602      	mov	r2, r0
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f7ff fe5e 	bl	800440c <enable_ref_spads>
 8004750:	4603      	mov	r3, r0
 8004752:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004756:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800475a:	2b00      	cmp	r3, #0
 800475c:	d174      	bne.n	8004848 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8004762:	f107 0312 	add.w	r3, r7, #18
 8004766:	4619      	mov	r1, r3
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f7ff fecb 	bl	8004504 <perform_ref_signal_measurement>
 800476e:	4603      	mov	r3, r0
 8004770:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8004774:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004778:	2b00      	cmp	r3, #0
 800477a:	d161      	bne.n	8004840 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800477c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800477e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004780:	429a      	cmp	r2, r3
 8004782:	d25d      	bcs.n	8004840 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8004784:	2300      	movs	r3, #0
 8004786:	64bb      	str	r3, [r7, #72]	; 0x48
 8004788:	e009      	b.n	800479e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800478e:	4413      	add	r3, r2
 8004790:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004794:	2200      	movs	r2, #0
 8004796:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8004798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800479a:	3301      	adds	r3, #1
 800479c:	64bb      	str	r3, [r7, #72]	; 0x48
 800479e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d3f1      	bcc.n	800478a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80047a6:	e002      	b.n	80047ae <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80047a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047aa:	3301      	adds	r3, #1
 80047ac:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80047ae:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80047b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047b4:	4413      	add	r3, r2
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff fdb0 	bl	800431c <is_aperture>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d103      	bne.n	80047ca <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80047c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d3ee      	bcc.n	80047a8 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80047ca:	2301      	movs	r3, #1
 80047cc:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80047ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80047de:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80047e2:	f107 0218 	add.w	r2, r7, #24
 80047e6:	9204      	str	r2, [sp, #16]
 80047e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047ea:	9203      	str	r2, [sp, #12]
 80047ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047ee:	9202      	str	r2, [sp, #8]
 80047f0:	9301      	str	r3, [sp, #4]
 80047f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	4623      	mov	r3, r4
 80047f8:	4602      	mov	r2, r0
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f7ff fe06 	bl	800440c <enable_ref_spads>
 8004800:	4603      	mov	r3, r0
 8004802:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8004806:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800480a:	2b00      	cmp	r3, #0
 800480c:	d11b      	bne.n	8004846 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8004812:	f107 0312 	add.w	r3, r7, #18
 8004816:	4619      	mov	r1, r3
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f7ff fe73 	bl	8004504 <perform_ref_signal_measurement>
 800481e:	4603      	mov	r3, r0
 8004820:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8004824:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10c      	bne.n	8004846 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800482c:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800482e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004830:	429a      	cmp	r2, r3
 8004832:	d208      	bcs.n	8004846 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8004834:	2301      	movs	r3, #1
 8004836:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800483a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800483c:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800483e:	e002      	b.n	8004846 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8004840:	2300      	movs	r3, #0
 8004842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004844:	e000      	b.n	8004848 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8004846:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8004848:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800484c:	2b00      	cmp	r3, #0
 800484e:	f040 80af 	bne.w	80049b0 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8004852:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8004854:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004856:	429a      	cmp	r2, r3
 8004858:	f240 80aa 	bls.w	80049b0 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800485c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800485e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8004862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004864:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800486c:	f107 031c 	add.w	r3, r7, #28
 8004870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004872:	4618      	mov	r0, r3
 8004874:	f00d fd78 	bl	8012368 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8004878:	8a7b      	ldrh	r3, [r7, #18]
 800487a:	461a      	mov	r2, r3
 800487c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	bfb8      	it	lt
 8004884:	425b      	neglt	r3, r3
 8004886:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800488e:	e086      	b.n	800499e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8004896:	f107 0314 	add.w	r3, r7, #20
 800489a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800489c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800489e:	f7ff fcdf 	bl	8004260 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048a8:	d103      	bne.n	80048b2 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80048aa:	23ce      	movs	r3, #206	; 0xce
 80048ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80048b0:	e07e      	b.n	80049b0 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80048b2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4413      	add	r3, r2
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff fd2e 	bl	800431c <is_aperture>
 80048c0:	4603      	mov	r3, r0
 80048c2:	461a      	mov	r2, r3
 80048c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d003      	beq.n	80048d2 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 80048ca:	2301      	movs	r3, #1
 80048cc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80048d0:	e06e      	b.n	80049b0 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80048d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d4:	3301      	adds	r3, #1
 80048d6:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80048e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80048e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff fd32 	bl	8004350 <enable_spad_bit>
 80048ec:	4603      	mov	r3, r0
 80048ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80048f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10c      	bne.n	8004914 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80048fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048fc:	3301      	adds	r3, #1
 80048fe:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8004906:	4619      	mov	r1, r3
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f7ff fd59 	bl	80043c0 <set_ref_spad_map>
 800490e:	4603      	mov	r3, r0
 8004910:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8004914:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004918:	2b00      	cmp	r3, #0
 800491a:	d146      	bne.n	80049aa <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800491c:	f107 0312 	add.w	r3, r7, #18
 8004920:	4619      	mov	r1, r3
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f7ff fdee 	bl	8004504 <perform_ref_signal_measurement>
 8004928:	4603      	mov	r3, r0
 800492a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800492e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004932:	2b00      	cmp	r3, #0
 8004934:	d13b      	bne.n	80049ae <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8004936:	8a7b      	ldrh	r3, [r7, #18]
 8004938:	461a      	mov	r2, r3
 800493a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	bfb8      	it	lt
 8004942:	425b      	neglt	r3, r3
 8004944:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8004946:	8a7b      	ldrh	r3, [r7, #18]
 8004948:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800494a:	429a      	cmp	r2, r3
 800494c:	d21c      	bcs.n	8004988 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800494e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004952:	429a      	cmp	r2, r3
 8004954:	d914      	bls.n	8004980 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8004956:	f107 031c 	add.w	r3, r7, #28
 800495a:	4619      	mov	r1, r3
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f7ff fd2f 	bl	80043c0 <set_ref_spad_map>
 8004962:	4603      	mov	r3, r0
 8004964:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800496e:	f107 011c 	add.w	r1, r7, #28
 8004972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004974:	4618      	mov	r0, r3
 8004976:	f00d fcf7 	bl	8012368 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800497a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800497c:	3b01      	subs	r3, #1
 800497e:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8004980:	2301      	movs	r3, #1
 8004982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004986:	e00a      	b.n	800499e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8004992:	f107 031c 	add.w	r3, r7, #28
 8004996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004998:	4618      	mov	r0, r3
 800499a:	f00d fce5 	bl	8012368 <memcpy>
		while (!complete) {
 800499e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f43f af74 	beq.w	8004890 <VL53L0X_perform_ref_spad_management+0x2b8>
 80049a8:	e002      	b.n	80049b0 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80049aa:	bf00      	nop
 80049ac:	e000      	b.n	80049b0 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80049ae:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80049b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d115      	bne.n	80049e4 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049bc:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80049c4:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	781a      	ldrb	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80049e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	375c      	adds	r7, #92	; 0x5c
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd90      	pop	{r4, r7, pc}

080049f0 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80049f0:	b590      	push	{r4, r7, lr}
 80049f2:	b093      	sub	sp, #76	; 0x4c
 80049f4:	af06      	add	r7, sp, #24
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	4613      	mov	r3, r2
 80049fc:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80049fe:	2300      	movs	r3, #0
 8004a00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8004a04:	2300      	movs	r3, #0
 8004a06:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8004a08:	23b4      	movs	r3, #180	; 0xb4
 8004a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8004a0e:	2306      	movs	r3, #6
 8004a10:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8004a12:	232c      	movs	r3, #44	; 0x2c
 8004a14:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004a16:	2201      	movs	r2, #1
 8004a18:	21ff      	movs	r1, #255	; 0xff
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f7fd fd8c 	bl	8002538 <VL53L0X_WrByte>
 8004a20:	4603      	mov	r3, r0
 8004a22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8004a26:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d107      	bne.n	8004a3e <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8004a2e:	2200      	movs	r2, #0
 8004a30:	214f      	movs	r1, #79	; 0x4f
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f7fd fd80 	bl	8002538 <VL53L0X_WrByte>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8004a3e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d107      	bne.n	8004a56 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8004a46:	222c      	movs	r2, #44	; 0x2c
 8004a48:	214e      	movs	r1, #78	; 0x4e
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f7fd fd74 	bl	8002538 <VL53L0X_WrByte>
 8004a50:	4603      	mov	r3, r0
 8004a52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8004a56:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d107      	bne.n	8004a6e <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004a5e:	2200      	movs	r2, #0
 8004a60:	21ff      	movs	r1, #255	; 0xff
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f7fd fd68 	bl	8002538 <VL53L0X_WrByte>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8004a6e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d109      	bne.n	8004a8a <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8004a76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	21b6      	movs	r1, #182	; 0xb6
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f7fd fd5a 	bl	8002538 <VL53L0X_WrByte>
 8004a84:	4603      	mov	r3, r0
 8004a86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a8e:	e009      	b.n	8004aa4 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d3f1      	bcc.n	8004a90 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8004aac:	79fb      	ldrb	r3, [r7, #7]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d011      	beq.n	8004ad6 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004ab2:	e002      	b.n	8004aba <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8004ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004aba:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	4413      	add	r3, r2
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff fc2a 	bl	800431c <is_aperture>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d103      	bne.n	8004ad6 <VL53L0X_set_reference_spads+0xe6>
 8004ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d3ee      	bcc.n	8004ab4 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8004ae2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ae6:	79f9      	ldrb	r1, [r7, #7]
 8004ae8:	f107 0214 	add.w	r2, r7, #20
 8004aec:	9204      	str	r2, [sp, #16]
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	9203      	str	r2, [sp, #12]
 8004af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004af4:	9202      	str	r2, [sp, #8]
 8004af6:	9301      	str	r3, [sp, #4]
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	4623      	mov	r3, r4
 8004afe:	4602      	mov	r2, r0
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f7ff fc83 	bl	800440c <enable_ref_spads>
 8004b06:	4603      	mov	r3, r0
 8004b08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8004b0c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10c      	bne.n	8004b2e <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	79fa      	ldrb	r2, [r7, #7]
 8004b2a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8004b2e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3734      	adds	r7, #52	; 0x34
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd90      	pop	{r4, r7, pc}

08004b3a <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b084      	sub	sp, #16
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	460b      	mov	r3, r1
 8004b44:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b46:	2300      	movs	r3, #0
 8004b48:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10a      	bne.n	8004b68 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8004b52:	78fb      	ldrb	r3, [r7, #3]
 8004b54:	f043 0301 	orr.w	r3, r3, #1
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7fd fcea 	bl	8002538 <VL53L0X_WrByte>
 8004b64:	4603      	mov	r3, r0
 8004b66:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8004b68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d104      	bne.n	8004b7a <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f9bf 	bl	8004ef4 <VL53L0X_measurement_poll_for_completion>
 8004b76:	4603      	mov	r3, r0
 8004b78:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d105      	bne.n	8004b8e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004b82:	2100      	movs	r1, #0
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7ff fab5 	bl	80040f4 <VL53L0X_ClearInterruptMask>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d106      	bne.n	8004ba4 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8004b96:	2200      	movs	r2, #0
 8004b98:	2100      	movs	r1, #0
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fd fccc 	bl	8002538 <VL53L0X_WrByte>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	73fb      	strb	r3, [r7, #15]

	return Status;
 8004ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	4608      	mov	r0, r1
 8004bba:	4611      	mov	r1, r2
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	70fb      	strb	r3, [r7, #3]
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	70bb      	strb	r3, [r7, #2]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	21ff      	movs	r1, #255	; 0xff
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7fd fcae 	bl	8002538 <VL53L0X_WrByte>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	461a      	mov	r2, r3
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004be6:	2200      	movs	r2, #0
 8004be8:	2100      	movs	r1, #0
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fd fca4 	bl	8002538 <VL53L0X_WrByte>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	21ff      	movs	r1, #255	; 0xff
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7fd fc9a 	bl	8002538 <VL53L0X_WrByte>
 8004c04:	4603      	mov	r3, r0
 8004c06:	461a      	mov	r2, r3
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8004c0e:	78fb      	ldrb	r3, [r7, #3]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d01e      	beq.n	8004c52 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8004c14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d009      	beq.n	8004c30 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	21cb      	movs	r1, #203	; 0xcb
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7fd fd3d 	bl	80026a0 <VL53L0X_RdByte>
 8004c26:	4603      	mov	r3, r0
 8004c28:	461a      	mov	r2, r3
 8004c2a:	7bfb      	ldrb	r3, [r7, #15]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004c30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d02a      	beq.n	8004c8e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8004c38:	f107 030e 	add.w	r3, r7, #14
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	21ee      	movs	r1, #238	; 0xee
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7fd fd2d 	bl	80026a0 <VL53L0X_RdByte>
 8004c46:	4603      	mov	r3, r0
 8004c48:	461a      	mov	r2, r3
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	73fb      	strb	r3, [r7, #15]
 8004c50:	e01d      	b.n	8004c8e <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8004c52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8004c5a:	78bb      	ldrb	r3, [r7, #2]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	21cb      	movs	r1, #203	; 0xcb
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7fd fc69 	bl	8002538 <VL53L0X_WrByte>
 8004c66:	4603      	mov	r3, r0
 8004c68:	461a      	mov	r2, r3
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004c70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00a      	beq.n	8004c8e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8004c78:	787b      	ldrb	r3, [r7, #1]
 8004c7a:	2280      	movs	r2, #128	; 0x80
 8004c7c:	21ee      	movs	r1, #238	; 0xee
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7fd fcda 	bl	8002638 <VL53L0X_UpdateByte>
 8004c84:	4603      	mov	r3, r0
 8004c86:	461a      	mov	r2, r3
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004c8e:	2201      	movs	r2, #1
 8004c90:	21ff      	movs	r1, #255	; 0xff
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fd fc50 	bl	8002538 <VL53L0X_WrByte>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fd fc46 	bl	8002538 <VL53L0X_WrByte>
 8004cac:	4603      	mov	r3, r0
 8004cae:	461a      	mov	r2, r3
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	21ff      	movs	r1, #255	; 0xff
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7fd fc3c 	bl	8002538 <VL53L0X_WrByte>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8004cca:	7bbb      	ldrb	r3, [r7, #14]
 8004ccc:	f023 0310 	bic.w	r3, r3, #16
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	701a      	strb	r2, [r3, #0]

	return Status;
 8004cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b08a      	sub	sp, #40	; 0x28
 8004ce6:	af04      	add	r7, sp, #16
 8004ce8:	60f8      	str	r0, [r7, #12]
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	4611      	mov	r1, r2
 8004cee:	461a      	mov	r2, r3
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	71fb      	strb	r3, [r7, #7]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8004d04:	2300      	movs	r3, #0
 8004d06:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8004d0c:	79bb      	ldrb	r3, [r7, #6]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004d18:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f7fd fc0a 	bl	8002538 <VL53L0X_WrByte>
 8004d24:	4603      	mov	r3, r0
 8004d26:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8004d28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d105      	bne.n	8004d3c <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8004d30:	2140      	movs	r1, #64	; 0x40
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f7ff ff01 	bl	8004b3a <VL53L0X_perform_single_ref_calibration>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8004d3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d115      	bne.n	8004d70 <VL53L0X_perform_vhv_calibration+0x8e>
 8004d44:	79fb      	ldrb	r3, [r7, #7]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d112      	bne.n	8004d70 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8004d4a:	7d39      	ldrb	r1, [r7, #20]
 8004d4c:	7d7a      	ldrb	r2, [r7, #21]
 8004d4e:	2300      	movs	r3, #0
 8004d50:	9303      	str	r3, [sp, #12]
 8004d52:	2301      	movs	r3, #1
 8004d54:	9302      	str	r3, [sp, #8]
 8004d56:	f107 0313 	add.w	r3, r7, #19
 8004d5a:	9301      	str	r3, [sp, #4]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	460b      	mov	r3, r1
 8004d62:	2101      	movs	r1, #1
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f7ff ff23 	bl	8004bb0 <VL53L0X_ref_calibration_io>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	75fb      	strb	r3, [r7, #23]
 8004d6e:	e002      	b.n	8004d76 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2200      	movs	r2, #0
 8004d74:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8004d76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d112      	bne.n	8004da4 <VL53L0X_perform_vhv_calibration+0xc2>
 8004d7e:	79bb      	ldrb	r3, [r7, #6]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00f      	beq.n	8004da4 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004d84:	7dbb      	ldrb	r3, [r7, #22]
 8004d86:	461a      	mov	r2, r3
 8004d88:	2101      	movs	r1, #1
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f7fd fbd4 	bl	8002538 <VL53L0X_WrByte>
 8004d90:	4603      	mov	r3, r0
 8004d92:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004d94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d103      	bne.n	8004da4 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	7dba      	ldrb	r2, [r7, #22]
 8004da0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8004da4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b08a      	sub	sp, #40	; 0x28
 8004db4:	af04      	add	r7, sp, #16
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	4611      	mov	r1, r2
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	71fb      	strb	r3, [r7, #7]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8004dd6:	79bb      	ldrb	r3, [r7, #6]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004de2:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8004de4:	2202      	movs	r2, #2
 8004de6:	2101      	movs	r1, #1
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f7fd fba5 	bl	8002538 <VL53L0X_WrByte>
 8004dee:	4603      	mov	r3, r0
 8004df0:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8004df2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d105      	bne.n	8004e06 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f7ff fe9c 	bl	8004b3a <VL53L0X_perform_single_ref_calibration>
 8004e02:	4603      	mov	r3, r0
 8004e04:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8004e06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d115      	bne.n	8004e3a <VL53L0X_perform_phase_calibration+0x8a>
 8004e0e:	79fb      	ldrb	r3, [r7, #7]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d112      	bne.n	8004e3a <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8004e14:	7d39      	ldrb	r1, [r7, #20]
 8004e16:	7d7a      	ldrb	r2, [r7, #21]
 8004e18:	2301      	movs	r3, #1
 8004e1a:	9303      	str	r3, [sp, #12]
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	9302      	str	r3, [sp, #8]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	9301      	str	r3, [sp, #4]
 8004e24:	f107 0313 	add.w	r3, r7, #19
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f7ff febe 	bl	8004bb0 <VL53L0X_ref_calibration_io>
 8004e34:	4603      	mov	r3, r0
 8004e36:	75fb      	strb	r3, [r7, #23]
 8004e38:	e002      	b.n	8004e40 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8004e40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d112      	bne.n	8004e6e <VL53L0X_perform_phase_calibration+0xbe>
 8004e48:	79bb      	ldrb	r3, [r7, #6]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00f      	beq.n	8004e6e <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004e4e:	7dbb      	ldrb	r3, [r7, #22]
 8004e50:	461a      	mov	r2, r3
 8004e52:	2101      	movs	r1, #1
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f7fd fb6f 	bl	8002538 <VL53L0X_WrByte>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004e5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d103      	bne.n	8004e6e <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	7dba      	ldrb	r2, [r7, #22]
 8004e6a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8004e6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3718      	adds	r7, #24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b086      	sub	sp, #24
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	607a      	str	r2, [r7, #4]
 8004e86:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004e96:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8004e98:	78fa      	ldrb	r2, [r7, #3]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	68b9      	ldr	r1, [r7, #8]
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f7ff ff1f 	bl	8004ce2 <VL53L0X_perform_vhv_calibration>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8004ea8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d107      	bne.n	8004ec0 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8004eb0:	78fa      	ldrb	r2, [r7, #3]
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f7ff ff7a 	bl	8004db0 <VL53L0X_perform_phase_calibration>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8004ec0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10f      	bne.n	8004ee8 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004ec8:	7dbb      	ldrb	r3, [r7, #22]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	2101      	movs	r1, #1
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f7fd fb32 	bl	8002538 <VL53L0X_WrByte>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004ed8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d103      	bne.n	8004ee8 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	7dba      	ldrb	r2, [r7, #22]
 8004ee4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8004ee8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004efc:	2300      	movs	r3, #0
 8004efe:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8004f00:	2300      	movs	r3, #0
 8004f02:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8004f08:	f107 030f 	add.w	r3, r7, #15
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7fe fe02 	bl	8003b18 <VL53L0X_GetMeasurementDataReady>
 8004f14:	4603      	mov	r3, r0
 8004f16:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8004f18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d110      	bne.n	8004f42 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8004f20:	7bfb      	ldrb	r3, [r7, #15]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d00f      	beq.n	8004f46 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004f32:	d302      	bcc.n	8004f3a <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8004f34:	23f9      	movs	r3, #249	; 0xf9
 8004f36:	75fb      	strb	r3, [r7, #23]
			break;
 8004f38:	e006      	b.n	8004f48 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7fd fc4e 	bl	80027dc <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8004f40:	e7e2      	b.n	8004f08 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8004f42:	bf00      	nop
 8004f44:	e000      	b.n	8004f48 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8004f46:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8004f48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	3301      	adds	r3, #1
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b085      	sub	sp, #20
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8004f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f8a:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8004f8c:	e002      	b.n	8004f94 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	089b      	lsrs	r3, r3, #2
 8004f92:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d8f8      	bhi.n	8004f8e <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8004f9c:	e017      	b.n	8004fce <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d30b      	bcc.n	8004fc2 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4413      	add	r3, r2
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	085b      	lsrs	r3, r3, #1
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	e002      	b.n	8004fc8 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	085b      	lsrs	r3, r3, #1
 8004fc6:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	089b      	lsrs	r3, r3, #2
 8004fcc:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1e4      	bne.n	8004f9e <VL53L0X_isqrt+0x24>
	}

	return res;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b086      	sub	sp, #24
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004fea:	2300      	movs	r3, #0
 8004fec:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8004fee:	2200      	movs	r2, #0
 8004ff0:	2183      	movs	r1, #131	; 0x83
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7fd faa0 	bl	8002538 <VL53L0X_WrByte>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	7dfb      	ldrb	r3, [r7, #23]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8005002:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d11e      	bne.n	8005048 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800500a:	2300      	movs	r3, #0
 800500c:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800500e:	f107 030f 	add.w	r3, r7, #15
 8005012:	461a      	mov	r2, r3
 8005014:	2183      	movs	r1, #131	; 0x83
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7fd fb42 	bl	80026a0 <VL53L0X_RdByte>
 800501c:	4603      	mov	r3, r0
 800501e:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8005020:	7bfb      	ldrb	r3, [r7, #15]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10a      	bne.n	800503c <VL53L0X_device_read_strobe+0x5a>
 8005026:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	3301      	adds	r3, #1
 8005032:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800503a:	d3e8      	bcc.n	800500e <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005042:	d301      	bcc.n	8005048 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005044:	23f9      	movs	r3, #249	; 0xf9
 8005046:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8005048:	2201      	movs	r2, #1
 800504a:	2183      	movs	r1, #131	; 0x83
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7fd fa73 	bl	8002538 <VL53L0X_WrByte>
 8005052:	4603      	mov	r3, r0
 8005054:	461a      	mov	r2, r3
 8005056:	7dfb      	ldrb	r3, [r7, #23]
 8005058:	4313      	orrs	r3, r2
 800505a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800505c:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005060:	4618      	mov	r0, r3
 8005062:	3718      	adds	r7, #24
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b098      	sub	sp, #96	; 0x60
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	460b      	mov	r3, r1
 8005072:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005074:	2300      	movs	r3, #0
 8005076:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800507a:	2300      	movs	r3, #0
 800507c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8005080:	2300      	movs	r3, #0
 8005082:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8005086:	2300      	movs	r3, #0
 8005088:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800508a:	2300      	movs	r3, #0
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800508e:	2300      	movs	r3, #0
 8005090:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8005092:	2300      	movs	r3, #0
 8005094:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8005098:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800509c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800509e:	2300      	movs	r3, #0
 80050a0:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80050a2:	2300      	movs	r3, #0
 80050a4:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80050a6:	2300      	movs	r3, #0
 80050a8:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80050b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80050b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80050b8:	2b07      	cmp	r3, #7
 80050ba:	f000 8408 	beq.w	80058ce <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80050be:	2201      	movs	r2, #1
 80050c0:	2180      	movs	r1, #128	; 0x80
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7fd fa38 	bl	8002538 <VL53L0X_WrByte>
 80050c8:	4603      	mov	r3, r0
 80050ca:	461a      	mov	r2, r3
 80050cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80050d6:	2201      	movs	r2, #1
 80050d8:	21ff      	movs	r1, #255	; 0xff
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fd fa2c 	bl	8002538 <VL53L0X_WrByte>
 80050e0:	4603      	mov	r3, r0
 80050e2:	461a      	mov	r2, r3
 80050e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80050e8:	4313      	orrs	r3, r2
 80050ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80050ee:	2200      	movs	r2, #0
 80050f0:	2100      	movs	r1, #0
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fd fa20 	bl	8002538 <VL53L0X_WrByte>
 80050f8:	4603      	mov	r3, r0
 80050fa:	461a      	mov	r2, r3
 80050fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005100:	4313      	orrs	r3, r2
 8005102:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8005106:	2206      	movs	r2, #6
 8005108:	21ff      	movs	r1, #255	; 0xff
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7fd fa14 	bl	8002538 <VL53L0X_WrByte>
 8005110:	4603      	mov	r3, r0
 8005112:	461a      	mov	r2, r3
 8005114:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005118:	4313      	orrs	r3, r2
 800511a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800511e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8005122:	461a      	mov	r2, r3
 8005124:	2183      	movs	r1, #131	; 0x83
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7fd faba 	bl	80026a0 <VL53L0X_RdByte>
 800512c:	4603      	mov	r3, r0
 800512e:	461a      	mov	r2, r3
 8005130:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005134:	4313      	orrs	r3, r2
 8005136:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800513a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800513e:	f043 0304 	orr.w	r3, r3, #4
 8005142:	b2db      	uxtb	r3, r3
 8005144:	461a      	mov	r2, r3
 8005146:	2183      	movs	r1, #131	; 0x83
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7fd f9f5 	bl	8002538 <VL53L0X_WrByte>
 800514e:	4603      	mov	r3, r0
 8005150:	461a      	mov	r2, r3
 8005152:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005156:	4313      	orrs	r3, r2
 8005158:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800515c:	2207      	movs	r2, #7
 800515e:	21ff      	movs	r1, #255	; 0xff
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7fd f9e9 	bl	8002538 <VL53L0X_WrByte>
 8005166:	4603      	mov	r3, r0
 8005168:	461a      	mov	r2, r3
 800516a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800516e:	4313      	orrs	r3, r2
 8005170:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8005174:	2201      	movs	r2, #1
 8005176:	2181      	movs	r1, #129	; 0x81
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f7fd f9dd 	bl	8002538 <VL53L0X_WrByte>
 800517e:	4603      	mov	r3, r0
 8005180:	461a      	mov	r2, r3
 8005182:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005186:	4313      	orrs	r3, r2
 8005188:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f7fd fb25 	bl	80027dc <VL53L0X_PollingDelay>
 8005192:	4603      	mov	r3, r0
 8005194:	461a      	mov	r2, r3
 8005196:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800519a:	4313      	orrs	r3, r2
 800519c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80051a0:	2201      	movs	r2, #1
 80051a2:	2180      	movs	r1, #128	; 0x80
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7fd f9c7 	bl	8002538 <VL53L0X_WrByte>
 80051aa:	4603      	mov	r3, r0
 80051ac:	461a      	mov	r2, r3
 80051ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80051b8:	78fb      	ldrb	r3, [r7, #3]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 8098 	beq.w	80052f4 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80051c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80051c8:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f040 8091 	bne.w	80052f4 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80051d2:	226b      	movs	r2, #107	; 0x6b
 80051d4:	2194      	movs	r1, #148	; 0x94
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7fd f9ae 	bl	8002538 <VL53L0X_WrByte>
 80051dc:	4603      	mov	r3, r0
 80051de:	461a      	mov	r2, r3
 80051e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7ff fef9 	bl	8004fe2 <VL53L0X_device_read_strobe>
 80051f0:	4603      	mov	r3, r0
 80051f2:	461a      	mov	r2, r3
 80051f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80051fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005202:	461a      	mov	r2, r3
 8005204:	2190      	movs	r1, #144	; 0x90
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fd faac 	bl	8002764 <VL53L0X_RdDWord>
 800520c:	4603      	mov	r3, r0
 800520e:	461a      	mov	r2, r3
 8005210:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005214:	4313      	orrs	r3, r2
 8005216:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800521a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521c:	0a1b      	lsrs	r3, r3, #8
 800521e:	b2db      	uxtb	r3, r3
 8005220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005224:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	0bdb      	lsrs	r3, r3, #15
 800522c:	b2db      	uxtb	r3, r3
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8005236:	2224      	movs	r2, #36	; 0x24
 8005238:	2194      	movs	r1, #148	; 0x94
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fd f97c 	bl	8002538 <VL53L0X_WrByte>
 8005240:	4603      	mov	r3, r0
 8005242:	461a      	mov	r2, r3
 8005244:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005248:	4313      	orrs	r3, r2
 800524a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7ff fec7 	bl	8004fe2 <VL53L0X_device_read_strobe>
 8005254:	4603      	mov	r3, r0
 8005256:	461a      	mov	r2, r3
 8005258:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800525c:	4313      	orrs	r3, r2
 800525e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005262:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005266:	461a      	mov	r2, r3
 8005268:	2190      	movs	r1, #144	; 0x90
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7fd fa7a 	bl	8002764 <VL53L0X_RdDWord>
 8005270:	4603      	mov	r3, r0
 8005272:	461a      	mov	r2, r3
 8005274:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005278:	4313      	orrs	r3, r2
 800527a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005280:	0e1b      	lsrs	r3, r3, #24
 8005282:	b2db      	uxtb	r3, r3
 8005284:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8005286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005288:	0c1b      	lsrs	r3, r3, #16
 800528a:	b2db      	uxtb	r3, r3
 800528c:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800528e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005290:	0a1b      	lsrs	r3, r3, #8
 8005292:	b2db      	uxtb	r3, r3
 8005294:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8005296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005298:	b2db      	uxtb	r3, r3
 800529a:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800529c:	2225      	movs	r2, #37	; 0x25
 800529e:	2194      	movs	r1, #148	; 0x94
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7fd f949 	bl	8002538 <VL53L0X_WrByte>
 80052a6:	4603      	mov	r3, r0
 80052a8:	461a      	mov	r2, r3
 80052aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052ae:	4313      	orrs	r3, r2
 80052b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7ff fe94 	bl	8004fe2 <VL53L0X_device_read_strobe>
 80052ba:	4603      	mov	r3, r0
 80052bc:	461a      	mov	r2, r3
 80052be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052c2:	4313      	orrs	r3, r2
 80052c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80052c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80052cc:	461a      	mov	r2, r3
 80052ce:	2190      	movs	r1, #144	; 0x90
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7fd fa47 	bl	8002764 <VL53L0X_RdDWord>
 80052d6:	4603      	mov	r3, r0
 80052d8:	461a      	mov	r2, r3
 80052da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052de:	4313      	orrs	r3, r2
 80052e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80052e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e6:	0e1b      	lsrs	r3, r3, #24
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	0c1b      	lsrs	r3, r3, #16
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80052f4:	78fb      	ldrb	r3, [r7, #3]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 8189 	beq.w	8005612 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8005300:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005304:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8005308:	2b00      	cmp	r3, #0
 800530a:	f040 8182 	bne.w	8005612 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800530e:	2202      	movs	r2, #2
 8005310:	2194      	movs	r1, #148	; 0x94
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7fd f910 	bl	8002538 <VL53L0X_WrByte>
 8005318:	4603      	mov	r3, r0
 800531a:	461a      	mov	r2, r3
 800531c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005320:	4313      	orrs	r3, r2
 8005322:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7ff fe5b 	bl	8004fe2 <VL53L0X_device_read_strobe>
 800532c:	4603      	mov	r3, r0
 800532e:	461a      	mov	r2, r3
 8005330:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005334:	4313      	orrs	r3, r2
 8005336:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800533a:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800533e:	461a      	mov	r2, r3
 8005340:	2190      	movs	r1, #144	; 0x90
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7fd f9ac 	bl	80026a0 <VL53L0X_RdByte>
 8005348:	4603      	mov	r3, r0
 800534a:	461a      	mov	r2, r3
 800534c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005350:	4313      	orrs	r3, r2
 8005352:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8005356:	227b      	movs	r2, #123	; 0x7b
 8005358:	2194      	movs	r1, #148	; 0x94
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7fd f8ec 	bl	8002538 <VL53L0X_WrByte>
 8005360:	4603      	mov	r3, r0
 8005362:	461a      	mov	r2, r3
 8005364:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005368:	4313      	orrs	r3, r2
 800536a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7ff fe37 	bl	8004fe2 <VL53L0X_device_read_strobe>
 8005374:	4603      	mov	r3, r0
 8005376:	461a      	mov	r2, r3
 8005378:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800537c:	4313      	orrs	r3, r2
 800537e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8005382:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8005386:	461a      	mov	r2, r3
 8005388:	2190      	movs	r1, #144	; 0x90
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7fd f988 	bl	80026a0 <VL53L0X_RdByte>
 8005390:	4603      	mov	r3, r0
 8005392:	461a      	mov	r2, r3
 8005394:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005398:	4313      	orrs	r3, r2
 800539a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800539e:	2277      	movs	r2, #119	; 0x77
 80053a0:	2194      	movs	r1, #148	; 0x94
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7fd f8c8 	bl	8002538 <VL53L0X_WrByte>
 80053a8:	4603      	mov	r3, r0
 80053aa:	461a      	mov	r2, r3
 80053ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7ff fe13 	bl	8004fe2 <VL53L0X_device_read_strobe>
 80053bc:	4603      	mov	r3, r0
 80053be:	461a      	mov	r2, r3
 80053c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80053ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80053ce:	461a      	mov	r2, r3
 80053d0:	2190      	movs	r1, #144	; 0x90
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fd f9c6 	bl	8002764 <VL53L0X_RdDWord>
 80053d8:	4603      	mov	r3, r0
 80053da:	461a      	mov	r2, r3
 80053dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053e0:	4313      	orrs	r3, r2
 80053e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80053e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e8:	0e5b      	lsrs	r3, r3, #25
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80053f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f6:	0c9b      	lsrs	r3, r3, #18
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8005402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005404:	0adb      	lsrs	r3, r3, #11
 8005406:	b2db      	uxtb	r3, r3
 8005408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800540c:	b2db      	uxtb	r3, r3
 800540e:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	091b      	lsrs	r3, r3, #4
 8005414:	b2db      	uxtb	r3, r3
 8005416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800541a:	b2db      	uxtb	r3, r3
 800541c:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	b2db      	uxtb	r3, r3
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	b2db      	uxtb	r3, r3
 8005426:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800542a:	b2db      	uxtb	r3, r3
 800542c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8005430:	2278      	movs	r2, #120	; 0x78
 8005432:	2194      	movs	r1, #148	; 0x94
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7fd f87f 	bl	8002538 <VL53L0X_WrByte>
 800543a:	4603      	mov	r3, r0
 800543c:	461a      	mov	r2, r3
 800543e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005442:	4313      	orrs	r3, r2
 8005444:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7ff fdca 	bl	8004fe2 <VL53L0X_device_read_strobe>
 800544e:	4603      	mov	r3, r0
 8005450:	461a      	mov	r2, r3
 8005452:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005456:	4313      	orrs	r3, r2
 8005458:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800545c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005460:	461a      	mov	r2, r3
 8005462:	2190      	movs	r1, #144	; 0x90
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7fd f97d 	bl	8002764 <VL53L0X_RdDWord>
 800546a:	4603      	mov	r3, r0
 800546c:	461a      	mov	r2, r3
 800546e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005472:	4313      	orrs	r3, r2
 8005474:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8005478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547a:	0f5b      	lsrs	r3, r3, #29
 800547c:	b2db      	uxtb	r3, r3
 800547e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005482:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8005484:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005488:	4413      	add	r3, r2
 800548a:	b2db      	uxtb	r3, r3
 800548c:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800548e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005490:	0d9b      	lsrs	r3, r3, #22
 8005492:	b2db      	uxtb	r3, r3
 8005494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005498:	b2db      	uxtb	r3, r3
 800549a:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800549c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549e:	0bdb      	lsrs	r3, r3, #15
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	0a1b      	lsrs	r3, r3, #8
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ba:	085b      	lsrs	r3, r3, #1
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80054c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	019b      	lsls	r3, r3, #6
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80054d8:	2279      	movs	r2, #121	; 0x79
 80054da:	2194      	movs	r1, #148	; 0x94
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7fd f82b 	bl	8002538 <VL53L0X_WrByte>
 80054e2:	4603      	mov	r3, r0
 80054e4:	461a      	mov	r2, r3
 80054e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f7ff fd76 	bl	8004fe2 <VL53L0X_device_read_strobe>
 80054f6:	4603      	mov	r3, r0
 80054f8:	461a      	mov	r2, r3
 80054fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054fe:	4313      	orrs	r3, r2
 8005500:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005504:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005508:	461a      	mov	r2, r3
 800550a:	2190      	movs	r1, #144	; 0x90
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7fd f929 	bl	8002764 <VL53L0X_RdDWord>
 8005512:	4603      	mov	r3, r0
 8005514:	461a      	mov	r2, r3
 8005516:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800551a:	4313      	orrs	r3, r2
 800551c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8005520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005522:	0e9b      	lsrs	r3, r3, #26
 8005524:	b2db      	uxtb	r3, r3
 8005526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800552a:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800552c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005530:	4413      	add	r3, r2
 8005532:	b2db      	uxtb	r3, r3
 8005534:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8005536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005538:	0cdb      	lsrs	r3, r3, #19
 800553a:	b2db      	uxtb	r3, r3
 800553c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005540:	b2db      	uxtb	r3, r3
 8005542:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8005544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005546:	0b1b      	lsrs	r3, r3, #12
 8005548:	b2db      	uxtb	r3, r3
 800554a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800554e:	b2db      	uxtb	r3, r3
 8005550:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	095b      	lsrs	r3, r3, #5
 8005556:	b2db      	uxtb	r3, r3
 8005558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800555c:	b2db      	uxtb	r3, r3
 800555e:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8005560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005562:	b2db      	uxtb	r3, r3
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	b2db      	uxtb	r3, r3
 8005568:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800556c:	b2db      	uxtb	r3, r3
 800556e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8005572:	227a      	movs	r2, #122	; 0x7a
 8005574:	2194      	movs	r1, #148	; 0x94
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7fc ffde 	bl	8002538 <VL53L0X_WrByte>
 800557c:	4603      	mov	r3, r0
 800557e:	461a      	mov	r2, r3
 8005580:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005584:	4313      	orrs	r3, r2
 8005586:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7ff fd29 	bl	8004fe2 <VL53L0X_device_read_strobe>
 8005590:	4603      	mov	r3, r0
 8005592:	461a      	mov	r2, r3
 8005594:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005598:	4313      	orrs	r3, r2
 800559a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800559e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80055a2:	461a      	mov	r2, r3
 80055a4:	2190      	movs	r1, #144	; 0x90
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7fd f8dc 	bl	8002764 <VL53L0X_RdDWord>
 80055ac:	4603      	mov	r3, r0
 80055ae:	461a      	mov	r2, r3
 80055b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	0f9b      	lsrs	r3, r3, #30
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055c4:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80055c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055ca:	4413      	add	r3, r2
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80055d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d2:	0ddb      	lsrs	r3, r3, #23
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	0c1b      	lsrs	r3, r3, #16
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80055ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ee:	0a5b      	lsrs	r3, r3, #9
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80055fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fe:	089b      	lsrs	r3, r3, #2
 8005600:	b2db      	uxtb	r3, r3
 8005602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005606:	b2db      	uxtb	r3, r3
 8005608:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800560c:	2300      	movs	r3, #0
 800560e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8005612:	78fb      	ldrb	r3, [r7, #3]
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 80f1 	beq.w	8005800 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800561e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005622:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8005626:	2b00      	cmp	r3, #0
 8005628:	f040 80ea 	bne.w	8005800 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800562c:	227b      	movs	r2, #123	; 0x7b
 800562e:	2194      	movs	r1, #148	; 0x94
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7fc ff81 	bl	8002538 <VL53L0X_WrByte>
 8005636:	4603      	mov	r3, r0
 8005638:	461a      	mov	r2, r3
 800563a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800563e:	4313      	orrs	r3, r2
 8005640:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7ff fccc 	bl	8004fe2 <VL53L0X_device_read_strobe>
 800564a:	4603      	mov	r3, r0
 800564c:	461a      	mov	r2, r3
 800564e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005652:	4313      	orrs	r3, r2
 8005654:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8005658:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800565c:	461a      	mov	r2, r3
 800565e:	2190      	movs	r1, #144	; 0x90
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7fd f87f 	bl	8002764 <VL53L0X_RdDWord>
 8005666:	4603      	mov	r3, r0
 8005668:	461a      	mov	r2, r3
 800566a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800566e:	4313      	orrs	r3, r2
 8005670:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8005674:	227c      	movs	r2, #124	; 0x7c
 8005676:	2194      	movs	r1, #148	; 0x94
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f7fc ff5d 	bl	8002538 <VL53L0X_WrByte>
 800567e:	4603      	mov	r3, r0
 8005680:	461a      	mov	r2, r3
 8005682:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005686:	4313      	orrs	r3, r2
 8005688:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7ff fca8 	bl	8004fe2 <VL53L0X_device_read_strobe>
 8005692:	4603      	mov	r3, r0
 8005694:	461a      	mov	r2, r3
 8005696:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800569a:	4313      	orrs	r3, r2
 800569c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80056a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056a4:	461a      	mov	r2, r3
 80056a6:	2190      	movs	r1, #144	; 0x90
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f7fd f85b 	bl	8002764 <VL53L0X_RdDWord>
 80056ae:	4603      	mov	r3, r0
 80056b0:	461a      	mov	r2, r3
 80056b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056b6:	4313      	orrs	r3, r2
 80056b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80056bc:	2273      	movs	r2, #115	; 0x73
 80056be:	2194      	movs	r1, #148	; 0x94
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7fc ff39 	bl	8002538 <VL53L0X_WrByte>
 80056c6:	4603      	mov	r3, r0
 80056c8:	461a      	mov	r2, r3
 80056ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7ff fc84 	bl	8004fe2 <VL53L0X_device_read_strobe>
 80056da:	4603      	mov	r3, r0
 80056dc:	461a      	mov	r2, r3
 80056de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056e2:	4313      	orrs	r3, r2
 80056e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80056e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056ec:	461a      	mov	r2, r3
 80056ee:	2190      	movs	r1, #144	; 0x90
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f7fd f837 	bl	8002764 <VL53L0X_RdDWord>
 80056f6:	4603      	mov	r3, r0
 80056f8:	461a      	mov	r2, r3
 80056fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056fe:	4313      	orrs	r3, r2
 8005700:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8005704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005706:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8005708:	b29b      	uxth	r3, r3
 800570a:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800570c:	2274      	movs	r2, #116	; 0x74
 800570e:	2194      	movs	r1, #148	; 0x94
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f7fc ff11 	bl	8002538 <VL53L0X_WrByte>
 8005716:	4603      	mov	r3, r0
 8005718:	461a      	mov	r2, r3
 800571a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800571e:	4313      	orrs	r3, r2
 8005720:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7ff fc5c 	bl	8004fe2 <VL53L0X_device_read_strobe>
 800572a:	4603      	mov	r3, r0
 800572c:	461a      	mov	r2, r3
 800572e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005732:	4313      	orrs	r3, r2
 8005734:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005738:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800573c:	461a      	mov	r2, r3
 800573e:	2190      	movs	r1, #144	; 0x90
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7fd f80f 	bl	8002764 <VL53L0X_RdDWord>
 8005746:	4603      	mov	r3, r0
 8005748:	461a      	mov	r2, r3
 800574a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800574e:	4313      	orrs	r3, r2
 8005750:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8005754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005756:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8005758:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800575a:	4313      	orrs	r3, r2
 800575c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800575e:	2275      	movs	r2, #117	; 0x75
 8005760:	2194      	movs	r1, #148	; 0x94
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7fc fee8 	bl	8002538 <VL53L0X_WrByte>
 8005768:	4603      	mov	r3, r0
 800576a:	461a      	mov	r2, r3
 800576c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005770:	4313      	orrs	r3, r2
 8005772:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff fc33 	bl	8004fe2 <VL53L0X_device_read_strobe>
 800577c:	4603      	mov	r3, r0
 800577e:	461a      	mov	r2, r3
 8005780:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005784:	4313      	orrs	r3, r2
 8005786:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800578a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800578e:	461a      	mov	r2, r3
 8005790:	2190      	movs	r1, #144	; 0x90
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7fc ffe6 	bl	8002764 <VL53L0X_RdDWord>
 8005798:	4603      	mov	r3, r0
 800579a:	461a      	mov	r2, r3
 800579c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80057a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a8:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80057ae:	2276      	movs	r2, #118	; 0x76
 80057b0:	2194      	movs	r1, #148	; 0x94
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7fc fec0 	bl	8002538 <VL53L0X_WrByte>
 80057b8:	4603      	mov	r3, r0
 80057ba:	461a      	mov	r2, r3
 80057bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7ff fc0b 	bl	8004fe2 <VL53L0X_device_read_strobe>
 80057cc:	4603      	mov	r3, r0
 80057ce:	461a      	mov	r2, r3
 80057d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057d4:	4313      	orrs	r3, r2
 80057d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80057da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057de:	461a      	mov	r2, r3
 80057e0:	2190      	movs	r1, #144	; 0x90
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7fc ffbe 	bl	8002764 <VL53L0X_RdDWord>
 80057e8:	4603      	mov	r3, r0
 80057ea:	461a      	mov	r2, r3
 80057ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80057fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80057fc:	4313      	orrs	r3, r2
 80057fe:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8005800:	2200      	movs	r2, #0
 8005802:	2181      	movs	r1, #129	; 0x81
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7fc fe97 	bl	8002538 <VL53L0X_WrByte>
 800580a:	4603      	mov	r3, r0
 800580c:	461a      	mov	r2, r3
 800580e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005812:	4313      	orrs	r3, r2
 8005814:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8005818:	2206      	movs	r2, #6
 800581a:	21ff      	movs	r1, #255	; 0xff
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7fc fe8b 	bl	8002538 <VL53L0X_WrByte>
 8005822:	4603      	mov	r3, r0
 8005824:	461a      	mov	r2, r3
 8005826:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800582a:	4313      	orrs	r3, r2
 800582c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005830:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8005834:	461a      	mov	r2, r3
 8005836:	2183      	movs	r1, #131	; 0x83
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7fc ff31 	bl	80026a0 <VL53L0X_RdByte>
 800583e:	4603      	mov	r3, r0
 8005840:	461a      	mov	r2, r3
 8005842:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005846:	4313      	orrs	r3, r2
 8005848:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800584c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005850:	f023 0304 	bic.w	r3, r3, #4
 8005854:	b2db      	uxtb	r3, r3
 8005856:	461a      	mov	r2, r3
 8005858:	2183      	movs	r1, #131	; 0x83
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fc fe6c 	bl	8002538 <VL53L0X_WrByte>
 8005860:	4603      	mov	r3, r0
 8005862:	461a      	mov	r2, r3
 8005864:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005868:	4313      	orrs	r3, r2
 800586a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800586e:	2201      	movs	r2, #1
 8005870:	21ff      	movs	r1, #255	; 0xff
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7fc fe60 	bl	8002538 <VL53L0X_WrByte>
 8005878:	4603      	mov	r3, r0
 800587a:	461a      	mov	r2, r3
 800587c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005880:	4313      	orrs	r3, r2
 8005882:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005886:	2201      	movs	r2, #1
 8005888:	2100      	movs	r1, #0
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7fc fe54 	bl	8002538 <VL53L0X_WrByte>
 8005890:	4603      	mov	r3, r0
 8005892:	461a      	mov	r2, r3
 8005894:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005898:	4313      	orrs	r3, r2
 800589a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800589e:	2200      	movs	r2, #0
 80058a0:	21ff      	movs	r1, #255	; 0xff
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7fc fe48 	bl	8002538 <VL53L0X_WrByte>
 80058a8:	4603      	mov	r3, r0
 80058aa:	461a      	mov	r2, r3
 80058ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058b0:	4313      	orrs	r3, r2
 80058b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80058b6:	2200      	movs	r2, #0
 80058b8:	2180      	movs	r1, #128	; 0x80
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7fc fe3c 	bl	8002538 <VL53L0X_WrByte>
 80058c0:	4603      	mov	r3, r0
 80058c2:	461a      	mov	r2, r3
 80058c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80058ce:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f040 808f 	bne.w	80059f6 <VL53L0X_get_info_from_device+0x98e>
 80058d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80058dc:	2b07      	cmp	r3, #7
 80058de:	f000 808a 	beq.w	80059f6 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 80058e2:	78fb      	ldrb	r3, [r7, #3]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d024      	beq.n	8005936 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80058ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80058f0:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d11e      	bne.n	8005936 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80058fe:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8005908:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800590c:	2300      	movs	r3, #0
 800590e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005910:	e00e      	b.n	8005930 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8005912:	f107 0208 	add.w	r2, r7, #8
 8005916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005918:	4413      	add	r3, r2
 800591a:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005920:	4413      	add	r3, r2
 8005922:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8005926:	460a      	mov	r2, r1
 8005928:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800592a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800592c:	3301      	adds	r3, #1
 800592e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005932:	2b05      	cmp	r3, #5
 8005934:	dded      	ble.n	8005912 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8005936:	78fb      	ldrb	r3, [r7, #3]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d018      	beq.n	8005972 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8005940:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005944:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8005948:	2b00      	cmp	r3, #0
 800594a:	d112      	bne.n	8005972 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800594c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005956:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	33f3      	adds	r3, #243	; 0xf3
 8005964:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8005966:	f107 0310 	add.w	r3, r7, #16
 800596a:	4619      	mov	r1, r3
 800596c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800596e:	f00c fe8f 	bl	8012690 <strcpy>

		}

		if (((option & 4) == 4) &&
 8005972:	78fb      	ldrb	r3, [r7, #3]
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b00      	cmp	r3, #0
 800597a:	d030      	beq.n	80059de <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800597c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005980:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8005984:	2b00      	cmp	r3, #0
 8005986:	d12a      	bne.n	80059de <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005988:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8005998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800599a:	025b      	lsls	r3, r3, #9
 800599c:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059a2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 80059a6:	2300      	movs	r3, #0
 80059a8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 80059ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d011      	beq.n	80059d6 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 80059b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80059b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80059ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059c0:	fb02 f303 	mul.w	r3, r2, r3
 80059c4:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 80059c6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 80059ca:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80059ce:	425b      	negs	r3, r3
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 80059d6:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80059de:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80059e2:	78fb      	ldrb	r3, [r7, #3]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80059ec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80059f6:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3760      	adds	r7, #96	; 0x60
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b087      	sub	sp, #28
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8005a0e:	f240 6277 	movw	r2, #1655	; 0x677
 8005a12:	f04f 0300 	mov.w	r3, #0
 8005a16:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8005a1a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8005a1e:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	fb02 f303 	mul.w	r3, r2, r3
 8005a2e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8005a30:	68bb      	ldr	r3, [r7, #8]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	371c      	adds	r7, #28
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b087      	sub	sp, #28
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8005a46:	2300      	movs	r3, #0
 8005a48:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d017      	beq.n	8005a88 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005a5e:	e005      	b.n	8005a6c <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	085b      	lsrs	r3, r3, #1
 8005a64:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8005a66:	89fb      	ldrh	r3, [r7, #14]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1f4      	bne.n	8005a60 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8005a76:	89fb      	ldrh	r3, [r7, #14]
 8005a78:	021b      	lsls	r3, r3, #8
 8005a7a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8005a84:	4413      	add	r3, r2
 8005a86:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8005a88:	8afb      	ldrh	r3, [r7, #22]

}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	371c      	adds	r7, #28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b085      	sub	sp, #20
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005aa4:	88fb      	ldrh	r3, [r7, #6]
 8005aa6:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8005aa8:	88fa      	ldrh	r2, [r7, #6]
 8005aaa:	0a12      	lsrs	r2, r2, #8
 8005aac:	b292      	uxth	r2, r2
 8005aae:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
	...

08005ac4 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005ad6:	79fb      	ldrb	r3, [r7, #7]
 8005ad8:	4619      	mov	r1, r3
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f7ff ff91 	bl	8005a02 <VL53L0X_calc_macro_period_ps>
 8005ae0:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005ae8:	4a0a      	ldr	r2, [pc, #40]	; (8005b14 <VL53L0X_calc_timeout_mclks+0x50>)
 8005aea:	fba2 2303 	umull	r2, r3, r2, r3
 8005aee:	099b      	lsrs	r3, r3, #6
 8005af0:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005af8:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	085b      	lsrs	r3, r3, #1
 8005b00:	441a      	add	r2, r3
	timeout_period_mclks =
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b08:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8005b0a:	69fb      	ldr	r3, [r7, #28]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3720      	adds	r7, #32
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	10624dd3 	.word	0x10624dd3

08005b18 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	460b      	mov	r3, r1
 8005b22:	807b      	strh	r3, [r7, #2]
 8005b24:	4613      	mov	r3, r2
 8005b26:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005b2c:	787b      	ldrb	r3, [r7, #1]
 8005b2e:	4619      	mov	r1, r3
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7ff ff66 	bl	8005a02 <VL53L0X_calc_macro_period_ps>
 8005b36:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005b3e:	4a0a      	ldr	r2, [pc, #40]	; (8005b68 <VL53L0X_calc_timeout_us+0x50>)
 8005b40:	fba2 2303 	umull	r2, r3, r2, r3
 8005b44:	099b      	lsrs	r3, r3, #6
 8005b46:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8005b48:	887b      	ldrh	r3, [r7, #2]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	fb02 f303 	mul.w	r3, r2, r3
 8005b50:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8005b54:	4a04      	ldr	r2, [pc, #16]	; (8005b68 <VL53L0X_calc_timeout_us+0x50>)
 8005b56:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5a:	099b      	lsrs	r3, r3, #6
 8005b5c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8005b5e:	697b      	ldr	r3, [r7, #20]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3718      	adds	r7, #24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	10624dd3 	.word	0x10624dd3

08005b6c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08c      	sub	sp, #48	; 0x30
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	460b      	mov	r3, r1
 8005b76:	607a      	str	r2, [r7, #4]
 8005b78:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8005b80:	2300      	movs	r3, #0
 8005b82:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8005b86:	2300      	movs	r3, #0
 8005b88:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8005b92:	7afb      	ldrb	r3, [r7, #11]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d005      	beq.n	8005ba4 <get_sequence_step_timeout+0x38>
 8005b98:	7afb      	ldrb	r3, [r7, #11]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d002      	beq.n	8005ba4 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8005b9e:	7afb      	ldrb	r3, [r7, #11]
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d128      	bne.n	8005bf6 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005ba4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005ba8:	461a      	mov	r2, r3
 8005baa:	2100      	movs	r1, #0
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f7fd fa5b 	bl	8003068 <VL53L0X_GetVcselPulsePeriod>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8005bb8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d109      	bne.n	8005bd4 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8005bc0:	f107 0320 	add.w	r3, r7, #32
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	2146      	movs	r1, #70	; 0x46
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f7fc fd69 	bl	80026a0 <VL53L0X_RdByte>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8005bd4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7ff ff5b 	bl	8005a96 <VL53L0X_decode_timeout>
 8005be0:	4603      	mov	r3, r0
 8005be2:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005be4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005be8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005bea:	4619      	mov	r1, r3
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f7ff ff93 	bl	8005b18 <VL53L0X_calc_timeout_us>
 8005bf2:	62b8      	str	r0, [r7, #40]	; 0x28
 8005bf4:	e092      	b.n	8005d1c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005bf6:	7afb      	ldrb	r3, [r7, #11]
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d135      	bne.n	8005c68 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005bfc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005c00:	461a      	mov	r2, r3
 8005c02:	2100      	movs	r1, #0
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f7fd fa2f 	bl	8003068 <VL53L0X_GetVcselPulsePeriod>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005c10:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f040 8081 	bne.w	8005d1c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005c1a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005c1e:	461a      	mov	r2, r3
 8005c20:	2100      	movs	r1, #0
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f7fd fa20 	bl	8003068 <VL53L0X_GetVcselPulsePeriod>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8005c2e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d109      	bne.n	8005c4a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8005c36:	f107 031e 	add.w	r3, r7, #30
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	2151      	movs	r1, #81	; 0x51
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f7fc fd58 	bl	80026f4 <VL53L0X_RdWord>
 8005c44:	4603      	mov	r3, r0
 8005c46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005c4a:	8bfb      	ldrh	r3, [r7, #30]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7ff ff22 	bl	8005a96 <VL53L0X_decode_timeout>
 8005c52:	4603      	mov	r3, r0
 8005c54:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005c56:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005c5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f7ff ff5a 	bl	8005b18 <VL53L0X_calc_timeout_us>
 8005c64:	62b8      	str	r0, [r7, #40]	; 0x28
 8005c66:	e059      	b.n	8005d1c <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8005c68:	7afb      	ldrb	r3, [r7, #11]
 8005c6a:	2b04      	cmp	r3, #4
 8005c6c:	d156      	bne.n	8005d1c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005c6e:	f107 0314 	add.w	r3, r7, #20
 8005c72:	4619      	mov	r1, r3
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f7fd fb03 	bl	8003280 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8005c7e:	7dfb      	ldrb	r3, [r7, #23]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d01d      	beq.n	8005cc0 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005c84:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005c88:	461a      	mov	r2, r3
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f7fd f9eb 	bl	8003068 <VL53L0X_GetVcselPulsePeriod>
 8005c92:	4603      	mov	r3, r0
 8005c94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8005c98:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10f      	bne.n	8005cc0 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8005ca0:	f107 031e 	add.w	r3, r7, #30
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	2151      	movs	r1, #81	; 0x51
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f7fc fd23 	bl	80026f4 <VL53L0X_RdWord>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005cb4:	8bfb      	ldrh	r3, [r7, #30]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7ff feed 	bl	8005a96 <VL53L0X_decode_timeout>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005cc0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d109      	bne.n	8005cdc <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005cc8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005ccc:	461a      	mov	r2, r3
 8005cce:	2101      	movs	r1, #1
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f7fd f9c9 	bl	8003068 <VL53L0X_GetVcselPulsePeriod>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005cdc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10f      	bne.n	8005d04 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8005ce4:	f107 031c 	add.w	r3, r7, #28
 8005ce8:	461a      	mov	r2, r3
 8005cea:	2171      	movs	r1, #113	; 0x71
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f7fc fd01 	bl	80026f4 <VL53L0X_RdWord>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005cf8:	8bbb      	ldrh	r3, [r7, #28]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7ff fecb 	bl	8005a96 <VL53L0X_decode_timeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8005d04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005d0c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005d10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d12:	4619      	mov	r1, r3
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f7ff feff 	bl	8005b18 <VL53L0X_calc_timeout_us>
 8005d1a:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d20:	601a      	str	r2, [r3, #0]

	return Status;
 8005d22:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3730      	adds	r7, #48	; 0x30
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b08a      	sub	sp, #40	; 0x28
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	60f8      	str	r0, [r7, #12]
 8005d36:	460b      	mov	r3, r1
 8005d38:	607a      	str	r2, [r7, #4]
 8005d3a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8005d42:	7afb      	ldrb	r3, [r7, #11]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d005      	beq.n	8005d54 <set_sequence_step_timeout+0x26>
 8005d48:	7afb      	ldrb	r3, [r7, #11]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d002      	beq.n	8005d54 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8005d4e:	7afb      	ldrb	r3, [r7, #11]
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d138      	bne.n	8005dc6 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005d54:	f107 031b 	add.w	r3, r7, #27
 8005d58:	461a      	mov	r2, r3
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f7fd f983 	bl	8003068 <VL53L0X_GetVcselPulsePeriod>
 8005d62:	4603      	mov	r3, r0
 8005d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8005d68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d11a      	bne.n	8005da6 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8005d70:	7efb      	ldrb	r3, [r7, #27]
 8005d72:	461a      	mov	r2, r3
 8005d74:	6879      	ldr	r1, [r7, #4]
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f7ff fea4 	bl	8005ac4 <VL53L0X_calc_timeout_mclks>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8005d80:	8bbb      	ldrh	r3, [r7, #28]
 8005d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d86:	d903      	bls.n	8005d90 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8005d88:	23ff      	movs	r3, #255	; 0xff
 8005d8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005d8e:	e004      	b.n	8005d9a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8005d90:	8bbb      	ldrh	r3, [r7, #28]
 8005d92:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8005d94:	3b01      	subs	r3, #1
 8005d96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005d9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005da6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f040 80ab 	bne.w	8005f06 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8005db0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005db4:	461a      	mov	r2, r3
 8005db6:	2146      	movs	r1, #70	; 0x46
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f7fc fbbd 	bl	8002538 <VL53L0X_WrByte>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8005dc4:	e09f      	b.n	8005f06 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005dc6:	7afb      	ldrb	r3, [r7, #11]
 8005dc8:	2b03      	cmp	r3, #3
 8005dca:	d135      	bne.n	8005e38 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8005dcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d11b      	bne.n	8005e0c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005dd4:	f107 031b 	add.w	r3, r7, #27
 8005dd8:	461a      	mov	r2, r3
 8005dda:	2100      	movs	r1, #0
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f7fd f943 	bl	8003068 <VL53L0X_GetVcselPulsePeriod>
 8005de2:	4603      	mov	r3, r0
 8005de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8005de8:	7efb      	ldrb	r3, [r7, #27]
 8005dea:	461a      	mov	r2, r3
 8005dec:	6879      	ldr	r1, [r7, #4]
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f7ff fe68 	bl	8005ac4 <VL53L0X_calc_timeout_mclks>
 8005df4:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8005df6:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8005df8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7ff fe1f 	bl	8005a3e <VL53L0X_encode_timeout>
 8005e00:	4603      	mov	r3, r0
 8005e02:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005e04:	8b3a      	ldrh	r2, [r7, #24]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8005e0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d108      	bne.n	8005e26 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8005e14:	8b3b      	ldrh	r3, [r7, #24]
 8005e16:	461a      	mov	r2, r3
 8005e18:	2151      	movs	r1, #81	; 0x51
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f7fc fbb0 	bl	8002580 <VL53L0X_WrWord>
 8005e20:	4603      	mov	r3, r0
 8005e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8005e26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d16b      	bne.n	8005f06 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8005e36:	e066      	b.n	8005f06 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8005e38:	7afb      	ldrb	r3, [r7, #11]
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d160      	bne.n	8005f00 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8005e3e:	f107 0310 	add.w	r3, r7, #16
 8005e42:	4619      	mov	r1, r3
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f7fd fa1b 	bl	8003280 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8005e4e:	7cfb      	ldrb	r3, [r7, #19]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01d      	beq.n	8005e90 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005e54:	f107 031b 	add.w	r3, r7, #27
 8005e58:	461a      	mov	r2, r3
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f7fd f903 	bl	8003068 <VL53L0X_GetVcselPulsePeriod>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8005e68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10f      	bne.n	8005e90 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8005e70:	f107 0318 	add.w	r3, r7, #24
 8005e74:	461a      	mov	r2, r3
 8005e76:	2151      	movs	r1, #81	; 0x51
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f7fc fc3b 	bl	80026f4 <VL53L0X_RdWord>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8005e84:	8b3b      	ldrh	r3, [r7, #24]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7ff fe05 	bl	8005a96 <VL53L0X_decode_timeout>
 8005e8c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8005e8e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8005e90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d109      	bne.n	8005eac <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005e98:	f107 031b 	add.w	r3, r7, #27
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f7fd f8e1 	bl	8003068 <VL53L0X_GetVcselPulsePeriod>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8005eac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d128      	bne.n	8005f06 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8005eb4:	7efb      	ldrb	r3, [r7, #27]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f7ff fe02 	bl	8005ac4 <VL53L0X_calc_timeout_mclks>
 8005ec0:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8005ec2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ec4:	6a3a      	ldr	r2, [r7, #32]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8005eca:	6a38      	ldr	r0, [r7, #32]
 8005ecc:	f7ff fdb7 	bl	8005a3e <VL53L0X_encode_timeout>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8005ed4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d108      	bne.n	8005eee <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8005edc:	8bfb      	ldrh	r3, [r7, #30]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	2171      	movs	r1, #113	; 0x71
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f7fc fb4c 	bl	8002580 <VL53L0X_WrWord>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8005eee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d107      	bne.n	8005f06 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8005efe:	e002      	b.n	8005f06 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005f00:	23fc      	movs	r3, #252	; 0xfc
 8005f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8005f06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3728      	adds	r7, #40	; 0x28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b086      	sub	sp, #24
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	60f8      	str	r0, [r7, #12]
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	607a      	str	r2, [r7, #4]
 8005f1e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f20:	2300      	movs	r3, #0
 8005f22:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8005f24:	7afb      	ldrb	r3, [r7, #11]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d002      	beq.n	8005f30 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d00a      	beq.n	8005f44 <VL53L0X_get_vcsel_pulse_period+0x32>
 8005f2e:	e013      	b.n	8005f58 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8005f30:	f107 0316 	add.w	r3, r7, #22
 8005f34:	461a      	mov	r2, r3
 8005f36:	2150      	movs	r1, #80	; 0x50
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f7fc fbb1 	bl	80026a0 <VL53L0X_RdByte>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8005f42:	e00b      	b.n	8005f5c <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8005f44:	f107 0316 	add.w	r3, r7, #22
 8005f48:	461a      	mov	r2, r3
 8005f4a:	2170      	movs	r1, #112	; 0x70
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f7fc fba7 	bl	80026a0 <VL53L0X_RdByte>
 8005f52:	4603      	mov	r3, r0
 8005f54:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8005f56:	e001      	b.n	8005f5c <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005f58:	23fc      	movs	r3, #252	; 0xfc
 8005f5a:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8005f5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d107      	bne.n	8005f74 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8005f64:	7dbb      	ldrb	r3, [r7, #22]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fe fff4 	bl	8004f54 <VL53L0X_decode_vcsel_period>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	701a      	strb	r2, [r3, #0]

	return Status;
 8005f74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3718      	adds	r7, #24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b092      	sub	sp, #72	; 0x48
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8005f90:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005f94:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8005f96:	f240 7376 	movw	r3, #1910	; 0x776
 8005f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8005f9c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005fa0:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8005fa2:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005fa6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8005fa8:	f240 234e 	movw	r3, #590	; 0x24e
 8005fac:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8005fae:	f240 23b2 	movw	r3, #690	; 0x2b2
 8005fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8005fb4:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005fb8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8005fba:	f240 2326 	movw	r3, #550	; 0x226
 8005fbe:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8005fc4:	f644 6320 	movw	r3, #20000	; 0x4e20
 8005fc8:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d205      	bcs.n	8005fe2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005fd6:	23fc      	movs	r3, #252	; 0xfc
 8005fd8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8005fdc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005fe0:	e0aa      	b.n	8006138 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8005fe2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe6:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005fee:	f107 0314 	add.w	r3, r7, #20
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7fd f943 	bl	8003280 <VL53L0X_GetSequenceStepEnables>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8006000:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006004:	2b00      	cmp	r3, #0
 8006006:	d15b      	bne.n	80060c0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8006008:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800600a:	2b00      	cmp	r3, #0
 800600c:	d105      	bne.n	800601a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800600e:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8006010:	2b00      	cmp	r3, #0
 8006012:	d102      	bne.n	800601a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8006014:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8006016:	2b00      	cmp	r3, #0
 8006018:	d052      	beq.n	80060c0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800601a:	f107 0310 	add.w	r3, r7, #16
 800601e:	461a      	mov	r2, r3
 8006020:	2102      	movs	r1, #2
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7ff fda2 	bl	8005b6c <get_sequence_step_timeout>
 8006028:	4603      	mov	r3, r0
 800602a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800602e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006032:	2b00      	cmp	r3, #0
 8006034:	d002      	beq.n	800603c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8006036:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800603a:	e07d      	b.n	8006138 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800603c:	7d3b      	ldrb	r3, [r7, #20]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00f      	beq.n	8006062 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8006042:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8006044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006046:	4413      	add	r3, r2
 8006048:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800604a:	69fa      	ldr	r2, [r7, #28]
 800604c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800604e:	429a      	cmp	r2, r3
 8006050:	d204      	bcs.n	800605c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8006052:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	643b      	str	r3, [r7, #64]	; 0x40
 800605a:	e002      	b.n	8006062 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800605c:	23fc      	movs	r3, #252	; 0xfc
 800605e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8006062:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800606a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800606e:	e063      	b.n	8006138 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8006070:	7dbb      	ldrb	r3, [r7, #22]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d011      	beq.n	800609a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607a:	4413      	add	r3, r2
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006080:	69fa      	ldr	r2, [r7, #28]
 8006082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006084:	429a      	cmp	r2, r3
 8006086:	d204      	bcs.n	8006092 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8006088:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	643b      	str	r3, [r7, #64]	; 0x40
 8006090:	e016      	b.n	80060c0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006092:	23fc      	movs	r3, #252	; 0xfc
 8006094:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006098:	e012      	b.n	80060c0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800609a:	7d7b      	ldrb	r3, [r7, #21]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00f      	beq.n	80060c0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060a4:	4413      	add	r3, r2
 80060a6:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80060a8:	69fa      	ldr	r2, [r7, #28]
 80060aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d204      	bcs.n	80060ba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80060b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	643b      	str	r3, [r7, #64]	; 0x40
 80060b8:	e002      	b.n	80060c0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80060ba:	23fc      	movs	r3, #252	; 0xfc
 80060bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80060c0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d002      	beq.n	80060ce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 80060c8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80060cc:	e034      	b.n	8006138 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80060ce:	7dfb      	ldrb	r3, [r7, #23]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d019      	beq.n	8006108 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 80060d4:	f107 030c 	add.w	r3, r7, #12
 80060d8:	461a      	mov	r2, r3
 80060da:	2103      	movs	r1, #3
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7ff fd45 	bl	8005b6c <get_sequence_step_timeout>
 80060e2:	4603      	mov	r3, r0
 80060e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060ec:	4413      	add	r3, r2
 80060ee:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80060f0:	69fa      	ldr	r2, [r7, #28]
 80060f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d204      	bcs.n	8006102 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80060f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	643b      	str	r3, [r7, #64]	; 0x40
 8006100:	e002      	b.n	8006108 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006102:	23fc      	movs	r3, #252	; 0xfc
 8006104:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8006108:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800610c:	2b00      	cmp	r3, #0
 800610e:	d111      	bne.n	8006134 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8006110:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00e      	beq.n	8006134 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8006116:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800611e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006120:	2104      	movs	r1, #4
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff fe03 	bl	8005d2e <set_sequence_step_timeout>
 8006128:	4603      	mov	r3, r0
 800612a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8006134:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8006138:	4618      	mov	r0, r3
 800613a:	3748      	adds	r7, #72	; 0x48
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b090      	sub	sp, #64	; 0x40
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800614a:	2300      	movs	r3, #0
 800614c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8006150:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006154:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8006156:	f240 7376 	movw	r3, #1910	; 0x776
 800615a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800615c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006160:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8006162:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006166:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8006168:	f240 234e 	movw	r3, #590	; 0x24e
 800616c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800616e:	f240 23b2 	movw	r3, #690	; 0x2b2
 8006172:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8006174:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006178:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800617a:	f240 2326 	movw	r3, #550	; 0x226
 800617e:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8006180:	2300      	movs	r3, #0
 8006182:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8006184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006188:	441a      	add	r2, r3
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800618e:	f107 0318 	add.w	r3, r7, #24
 8006192:	4619      	mov	r1, r3
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7fd f873 	bl	8003280 <VL53L0X_GetSequenceStepEnables>
 800619a:	4603      	mov	r3, r0
 800619c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 80061a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 80061a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80061ac:	e075      	b.n	800629a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80061ae:	7e3b      	ldrb	r3, [r7, #24]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d105      	bne.n	80061c0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80061b4:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d102      	bne.n	80061c0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 80061ba:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d030      	beq.n	8006222 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80061c0:	f107 0310 	add.w	r3, r7, #16
 80061c4:	461a      	mov	r2, r3
 80061c6:	2102      	movs	r1, #2
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f7ff fccf 	bl	8005b6c <get_sequence_step_timeout>
 80061ce:	4603      	mov	r3, r0
 80061d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80061d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d122      	bne.n	8006222 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 80061dc:	7e3b      	ldrb	r3, [r7, #24]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d007      	beq.n	80061f2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80061e6:	6939      	ldr	r1, [r7, #16]
 80061e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ea:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80061ec:	441a      	add	r2, r3
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80061f2:	7ebb      	ldrb	r3, [r7, #26]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d009      	beq.n	800620c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80061fc:	6939      	ldr	r1, [r7, #16]
 80061fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006200:	440b      	add	r3, r1
 8006202:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8006204:	441a      	add	r2, r3
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	e00a      	b.n	8006222 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800620c:	7e7b      	ldrb	r3, [r7, #25]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d007      	beq.n	8006222 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8006216:	6939      	ldr	r1, [r7, #16]
 8006218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621a:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800621c:	441a      	add	r2, r3
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006222:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006226:	2b00      	cmp	r3, #0
 8006228:	d114      	bne.n	8006254 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800622a:	7efb      	ldrb	r3, [r7, #27]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d011      	beq.n	8006254 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8006230:	f107 030c 	add.w	r3, r7, #12
 8006234:	461a      	mov	r2, r3
 8006236:	2103      	movs	r1, #3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7ff fc97 	bl	8005b6c <get_sequence_step_timeout>
 800623e:	4603      	mov	r3, r0
 8006240:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8006248:	68f9      	ldr	r1, [r7, #12]
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800624e:	441a      	add	r2, r3
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006254:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006258:	2b00      	cmp	r3, #0
 800625a:	d114      	bne.n	8006286 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800625c:	7f3b      	ldrb	r3, [r7, #28]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d011      	beq.n	8006286 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8006262:	f107 0314 	add.w	r3, r7, #20
 8006266:	461a      	mov	r2, r3
 8006268:	2104      	movs	r1, #4
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff fc7e 	bl	8005b6c <get_sequence_step_timeout>
 8006270:	4603      	mov	r3, r0
 8006272:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800627a:	6979      	ldr	r1, [r7, #20]
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8006280:	441a      	add	r2, r3
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006286:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800628a:	2b00      	cmp	r3, #0
 800628c:	d103      	bne.n	8006296 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006296:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800629a:	4618      	mov	r0, r3
 800629c:	3740      	adds	r7, #64	; 0x40
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
	...

080062a4 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062ae:	2300      	movs	r3, #0
 80062b0:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80062b2:	2300      	movs	r3, #0
 80062b4:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80062b6:	e0c6      	b.n	8006446 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	4413      	add	r3, r2
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	74fb      	strb	r3, [r7, #19]
		Index++;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	3301      	adds	r3, #1
 80062c6:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 80062c8:	7cfb      	ldrb	r3, [r7, #19]
 80062ca:	2bff      	cmp	r3, #255	; 0xff
 80062cc:	f040 808d 	bne.w	80063ea <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	4413      	add	r3, r2
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	747b      	strb	r3, [r7, #17]
			Index++;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	3301      	adds	r3, #1
 80062de:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 80062e0:	7c7b      	ldrb	r3, [r7, #17]
 80062e2:	2b03      	cmp	r3, #3
 80062e4:	d87e      	bhi.n	80063e4 <VL53L0X_load_tuning_settings+0x140>
 80062e6:	a201      	add	r2, pc, #4	; (adr r2, 80062ec <VL53L0X_load_tuning_settings+0x48>)
 80062e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ec:	080062fd 	.word	0x080062fd
 80062f0:	08006337 	.word	0x08006337
 80062f4:	08006371 	.word	0x08006371
 80062f8:	080063ab 	.word	0x080063ab
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	4413      	add	r3, r2
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	743b      	strb	r3, [r7, #16]
				Index++;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	3301      	adds	r3, #1
 800630a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	4413      	add	r3, r2
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	3301      	adds	r3, #1
 800631a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800631c:	7c3b      	ldrb	r3, [r7, #16]
 800631e:	b29b      	uxth	r3, r3
 8006320:	021b      	lsls	r3, r3, #8
 8006322:	b29a      	uxth	r2, r3
 8006324:	7bfb      	ldrb	r3, [r7, #15]
 8006326:	b29b      	uxth	r3, r3
 8006328:	4413      	add	r3, r2
 800632a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	89ba      	ldrh	r2, [r7, #12]
 8006330:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8006334:	e087      	b.n	8006446 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	4413      	add	r3, r2
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	743b      	strb	r3, [r7, #16]
				Index++;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	3301      	adds	r3, #1
 8006344:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	4413      	add	r3, r2
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	3301      	adds	r3, #1
 8006354:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006356:	7c3b      	ldrb	r3, [r7, #16]
 8006358:	b29b      	uxth	r3, r3
 800635a:	021b      	lsls	r3, r3, #8
 800635c:	b29a      	uxth	r2, r3
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	b29b      	uxth	r3, r3
 8006362:	4413      	add	r3, r2
 8006364:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	89ba      	ldrh	r2, [r7, #12]
 800636a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800636e:	e06a      	b.n	8006446 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	4413      	add	r3, r2
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	743b      	strb	r3, [r7, #16]
				Index++;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	3301      	adds	r3, #1
 800637e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	4413      	add	r3, r2
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	73fb      	strb	r3, [r7, #15]
				Index++;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	3301      	adds	r3, #1
 800638e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006390:	7c3b      	ldrb	r3, [r7, #16]
 8006392:	b29b      	uxth	r3, r3
 8006394:	021b      	lsls	r3, r3, #8
 8006396:	b29a      	uxth	r2, r3
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	b29b      	uxth	r3, r3
 800639c:	4413      	add	r3, r2
 800639e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	89ba      	ldrh	r2, [r7, #12]
 80063a4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 80063a8:	e04d      	b.n	8006446 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	4413      	add	r3, r2
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	743b      	strb	r3, [r7, #16]
				Index++;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	3301      	adds	r3, #1
 80063b8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	683a      	ldr	r2, [r7, #0]
 80063be:	4413      	add	r3, r2
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	73fb      	strb	r3, [r7, #15]
				Index++;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	3301      	adds	r3, #1
 80063c8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80063ca:	7c3b      	ldrb	r3, [r7, #16]
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	021b      	lsls	r3, r3, #8
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	4413      	add	r3, r2
 80063d8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	89ba      	ldrh	r2, [r7, #12]
 80063de:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 80063e2:	e030      	b.n	8006446 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80063e4:	23fc      	movs	r3, #252	; 0xfc
 80063e6:	77fb      	strb	r3, [r7, #31]
 80063e8:	e02d      	b.n	8006446 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 80063ea:	7cfb      	ldrb	r3, [r7, #19]
 80063ec:	2b04      	cmp	r3, #4
 80063ee:	d828      	bhi.n	8006442 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	4413      	add	r3, r2
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	74bb      	strb	r3, [r7, #18]
			Index++;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	3301      	adds	r3, #1
 80063fe:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8006400:	2300      	movs	r3, #0
 8006402:	61bb      	str	r3, [r7, #24]
 8006404:	e00f      	b.n	8006426 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	4413      	add	r3, r2
 800640c:	7819      	ldrb	r1, [r3, #0]
 800640e:	f107 0208 	add.w	r2, r7, #8
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	4413      	add	r3, r2
 8006416:	460a      	mov	r2, r1
 8006418:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	3301      	adds	r3, #1
 800641e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	3301      	adds	r3, #1
 8006424:	61bb      	str	r3, [r7, #24]
 8006426:	7cfb      	ldrb	r3, [r7, #19]
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	429a      	cmp	r2, r3
 800642c:	dbeb      	blt.n	8006406 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800642e:	7cfb      	ldrb	r3, [r7, #19]
 8006430:	f107 0208 	add.w	r2, r7, #8
 8006434:	7cb9      	ldrb	r1, [r7, #18]
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7fc f822 	bl	8002480 <VL53L0X_WriteMulti>
 800643c:	4603      	mov	r3, r0
 800643e:	77fb      	strb	r3, [r7, #31]
 8006440:	e001      	b.n	8006446 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006442:	23fc      	movs	r3, #252	; 0xfc
 8006444:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	4413      	add	r3, r2
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d004      	beq.n	800645c <VL53L0X_load_tuning_settings+0x1b8>
 8006452:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006456:	2b00      	cmp	r3, #0
 8006458:	f43f af2e 	beq.w	80062b8 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800645c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006460:	4618      	mov	r0, r3
 8006462:	3720      	adds	r7, #32
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b088      	sub	sp, #32
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006474:	2300      	movs	r3, #0
 8006476:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800647e:	f107 0313 	add.w	r3, r7, #19
 8006482:	4619      	mov	r1, r3
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f7fc ffbb 	bl	8003400 <VL53L0X_GetXTalkCompensationEnable>
 800648a:	4603      	mov	r3, r0
 800648c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800648e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d111      	bne.n	80064ba <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8006496:	7cfb      	ldrb	r3, [r7, #19]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00e      	beq.n	80064ba <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	8a9b      	ldrh	r3, [r3, #20]
 80064a6:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	fb02 f303 	mul.w	r3, r2, r3
 80064ae:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	3380      	adds	r3, #128	; 0x80
 80064b4:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 80064ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3720      	adds	r7, #32
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b086      	sub	sp, #24
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	60f8      	str	r0, [r7, #12]
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064d2:	2300      	movs	r3, #0
 80064d4:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 80064de:	f107 0310 	add.w	r3, r7, #16
 80064e2:	461a      	mov	r2, r3
 80064e4:	68b9      	ldr	r1, [r7, #8]
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f7ff ffbe 	bl	8006468 <VL53L0X_get_total_xtalk_rate>
 80064ec:	4603      	mov	r3, r0
 80064ee:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80064f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d105      	bne.n	8006504 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	441a      	add	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	601a      	str	r2, [r3, #0]

	return Status;
 8006504:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3718      	adds	r7, #24
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b09a      	sub	sp, #104	; 0x68
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
 800651c:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800651e:	2312      	movs	r3, #18
 8006520:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8006522:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006526:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8006528:	2342      	movs	r3, #66	; 0x42
 800652a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800652c:	2306      	movs	r3, #6
 800652e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8006530:	2307      	movs	r3, #7
 8006532:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006534:	2300      	movs	r3, #0
 8006536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8006540:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8006548:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800654a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800654c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800654e:	fb02 f303 	mul.w	r3, r2, r3
 8006552:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8006554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006556:	3380      	adds	r3, #128	; 0x80
 8006558:	0a1b      	lsrs	r3, r3, #8
 800655a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800655c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800655e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006560:	fb02 f303 	mul.w	r3, r2, r3
 8006564:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8006566:	2300      	movs	r3, #0
 8006568:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d01a      	beq.n	80065a6 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	029b      	lsls	r3, r3, #10
 8006574:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800657a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800657c:	4413      	add	r3, r2
 800657e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8006580:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	fbb2 f3f3 	udiv	r3, r2, r3
 8006588:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800658a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800658c:	4613      	mov	r3, r2
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	4413      	add	r3, r2
 8006592:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8006594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006596:	fb03 f303 	mul.w	r3, r3, r3
 800659a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800659c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800659e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80065a2:	0c1b      	lsrs	r3, r3, #16
 80065a4:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80065aa:	fb02 f303 	mul.w	r3, r2, r3
 80065ae:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 80065b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80065b6:	0c1b      	lsrs	r3, r3, #16
 80065b8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 80065ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065bc:	fb03 f303 	mul.w	r3, r3, r3
 80065c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80065c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80065c8:	0c1b      	lsrs	r3, r3, #16
 80065ca:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 80065cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065ce:	085a      	lsrs	r2, r3, #1
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	441a      	add	r2, r3
 80065d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065da:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 80065dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065e0:	fb02 f303 	mul.w	r3, r2, r3
 80065e4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 80065e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ec:	d302      	bcc.n	80065f4 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 80065ee:	4b54      	ldr	r3, [pc, #336]	; (8006740 <VL53L0X_calc_dmax+0x230>)
 80065f0:	663b      	str	r3, [r7, #96]	; 0x60
 80065f2:	e015      	b.n	8006620 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 80065f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065f6:	085a      	lsrs	r2, r3, #1
 80065f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065fa:	441a      	add	r2, r3
 80065fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006602:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8006604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006608:	fb02 f303 	mul.w	r3, r2, r3
 800660c:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800660e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006610:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006614:	0c1b      	lsrs	r3, r3, #16
 8006616:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8006618:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800661a:	fb03 f303 	mul.w	r3, r3, r3
 800661e:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8006620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006622:	039b      	lsls	r3, r3, #14
 8006624:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006628:	4a46      	ldr	r2, [pc, #280]	; (8006744 <VL53L0X_calc_dmax+0x234>)
 800662a:	fba2 2303 	umull	r2, r3, r2, r3
 800662e:	099b      	lsrs	r3, r3, #6
 8006630:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	fb03 f303 	mul.w	r3, r3, r3
 8006638:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800663a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800663c:	fb03 f303 	mul.w	r3, r3, r3
 8006640:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8006642:	6a3b      	ldr	r3, [r7, #32]
 8006644:	3308      	adds	r3, #8
 8006646:	091b      	lsrs	r3, r3, #4
 8006648:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800664a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8006652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006654:	4613      	mov	r3, r2
 8006656:	005b      	lsls	r3, r3, #1
 8006658:	4413      	add	r3, r2
 800665a:	011b      	lsls	r3, r3, #4
 800665c:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006664:	0b9b      	lsrs	r3, r3, #14
 8006666:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8006668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800666a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800666c:	4413      	add	r3, r2
 800666e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8006670:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006672:	085b      	lsrs	r3, r3, #1
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	4413      	add	r3, r2
 8006678:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800667e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006682:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	039b      	lsls	r3, r3, #14
 8006688:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	085b      	lsrs	r3, r3, #1
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	4413      	add	r3, r2
 8006692:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	fbb2 f3f3 	udiv	r3, r2, r3
 800669c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80066a2:	fb02 f303 	mul.w	r3, r2, r3
 80066a6:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80066ae:	4a25      	ldr	r2, [pc, #148]	; (8006744 <VL53L0X_calc_dmax+0x234>)
 80066b0:	fba2 2303 	umull	r2, r3, r2, r3
 80066b4:	099b      	lsrs	r3, r3, #6
 80066b6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	011b      	lsls	r3, r3, #4
 80066bc:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80066c4:	4a1f      	ldr	r2, [pc, #124]	; (8006744 <VL53L0X_calc_dmax+0x234>)
 80066c6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ca:	099b      	lsrs	r3, r3, #6
 80066cc:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 80066ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066d0:	3380      	adds	r3, #128	; 0x80
 80066d2:	0a1b      	lsrs	r3, r3, #8
 80066d4:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d008      	beq.n	80066ee <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	085a      	lsrs	r2, r3, #1
 80066e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e2:	441a      	add	r2, r3
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80066ec:	e001      	b.n	80066f2 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 80066f2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80066f4:	f7fe fc41 	bl	8004f7a <VL53L0X_isqrt>
 80066f8:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d008      	beq.n	8006712 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	085a      	lsrs	r2, r3, #1
 8006704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006706:	441a      	add	r2, r3
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	fbb2 f3f3 	udiv	r3, r2, r3
 800670e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006710:	e001      	b.n	8006716 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8006712:	2300      	movs	r3, #0
 8006714:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8006716:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006718:	f7fe fc2f 	bl	8004f7a <VL53L0X_isqrt>
 800671c:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800671e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006728:	429a      	cmp	r2, r3
 800672a:	d902      	bls.n	8006732 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800672c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800672e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006730:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8006732:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8006736:	4618      	mov	r0, r3
 8006738:	3768      	adds	r7, #104	; 0x68
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	fff00000 	.word	0xfff00000
 8006744:	10624dd3 	.word	0x10624dd3

08006748 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b0b4      	sub	sp, #208	; 0xd0
 800674c:	af04      	add	r7, sp, #16
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8006756:	f44f 7348 	mov.w	r3, #800	; 0x320
 800675a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800675e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006762:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8006766:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800676a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800676e:	f241 235c 	movw	r3, #4700	; 0x125c
 8006772:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8006776:	4b9e      	ldr	r3, [pc, #632]	; (80069f0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8006778:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800677c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8006780:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8006782:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8006786:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800678a:	fbb2 f3f3 	udiv	r3, r2, r3
 800678e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8006790:	4b98      	ldr	r3, [pc, #608]	; (80069f4 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8006792:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8006794:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006798:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800679a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800679e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 80067a0:	f240 6377 	movw	r3, #1655	; 0x677
 80067a4:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067a6:	2300      	movs	r3, #0
 80067a8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80067ba:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 80067be:	0c1b      	lsrs	r3, r3, #16
 80067c0:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 80067c8:	f107 0310 	add.w	r3, r7, #16
 80067cc:	461a      	mov	r2, r3
 80067ce:	68b9      	ldr	r1, [r7, #8]
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f7ff fe78 	bl	80064c6 <VL53L0X_get_total_signal_rate>
 80067d6:	4603      	mov	r3, r0
 80067d8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 80067dc:	f107 0314 	add.w	r3, r7, #20
 80067e0:	461a      	mov	r2, r3
 80067e2:	68b9      	ldr	r1, [r7, #8]
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f7ff fe3f 	bl	8006468 <VL53L0X_get_total_xtalk_rate>
 80067ea:	4603      	mov	r3, r0
 80067ec:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80067f6:	fb02 f303 	mul.w	r3, r2, r3
 80067fa:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80067fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006802:	0c1b      	lsrs	r3, r3, #16
 8006804:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800680c:	fb02 f303 	mul.w	r3, r2, r3
 8006810:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8006814:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8006818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800681a:	429a      	cmp	r2, r3
 800681c:	d902      	bls.n	8006824 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800681e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006820:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8006824:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8006828:	2b00      	cmp	r3, #0
 800682a:	d168      	bne.n	80068fe <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006832:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800683c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8006840:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006844:	461a      	mov	r2, r3
 8006846:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f7ff f93a 	bl	8005ac4 <VL53L0X_calc_timeout_mclks>
 8006850:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006858:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8006862:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8006866:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800686a:	461a      	mov	r2, r3
 800686c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f7ff f927 	bl	8005ac4 <VL53L0X_calc_timeout_mclks>
 8006876:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8006878:	2303      	movs	r3, #3
 800687a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800687e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006882:	2b08      	cmp	r3, #8
 8006884:	d102      	bne.n	800688c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8006886:	2302      	movs	r3, #2
 8006888:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800688c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800688e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006890:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8006892:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006896:	fb02 f303 	mul.w	r3, r2, r3
 800689a:	02db      	lsls	r3, r3, #11
 800689c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80068a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80068a4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80068a8:	4a53      	ldr	r2, [pc, #332]	; (80069f8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80068aa:	fba2 2303 	umull	r2, r3, r2, r3
 80068ae:	099b      	lsrs	r3, r3, #6
 80068b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 80068b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80068b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068ba:	fb02 f303 	mul.w	r3, r2, r3
 80068be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80068c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80068c6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80068ca:	4a4b      	ldr	r2, [pc, #300]	; (80069f8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80068cc:	fba2 2303 	umull	r2, r3, r2, r3
 80068d0:	099b      	lsrs	r3, r3, #6
 80068d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	3380      	adds	r3, #128	; 0x80
 80068da:	0a1b      	lsrs	r3, r3, #8
 80068dc:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80068e4:	fb02 f303 	mul.w	r3, r2, r3
 80068e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 80068ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80068f0:	3380      	adds	r3, #128	; 0x80
 80068f2:	0a1b      	lsrs	r3, r3, #8
 80068f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	021b      	lsls	r3, r3, #8
 80068fc:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 80068fe:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8006906:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800690a:	e15e      	b.n	8006bca <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800690c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10c      	bne.n	800692c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006918:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006920:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	2200      	movs	r2, #0
 8006928:	601a      	str	r2, [r3, #0]
 800692a:	e14c      	b.n	8006bc6 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800692c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006930:	2b00      	cmp	r3, #0
 8006932:	d102      	bne.n	800693a <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8006934:	2301      	movs	r3, #1
 8006936:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800693a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800693e:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8006940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006942:	041a      	lsls	r2, r3, #16
 8006944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006946:	fbb2 f3f3 	udiv	r3, r2, r3
 800694a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800694e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006952:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006954:	429a      	cmp	r2, r3
 8006956:	d902      	bls.n	800695e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8006958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800695a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800695e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006962:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006966:	fb02 f303 	mul.w	r3, r2, r3
 800696a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800696e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006972:	4613      	mov	r3, r2
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	4413      	add	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4618      	mov	r0, r3
 800697c:	f7fe fafd 	bl	8004f7a <VL53L0X_isqrt>
 8006980:	4603      	mov	r3, r0
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	891b      	ldrh	r3, [r3, #8]
 800698a:	461a      	mov	r2, r3
 800698c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800698e:	fb02 f303 	mul.w	r3, r2, r3
 8006992:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8006994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006996:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8006998:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800699c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800699e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 80069a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80069a4:	4a14      	ldr	r2, [pc, #80]	; (80069f8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80069a6:	fba2 2303 	umull	r2, r3, r2, r3
 80069aa:	099b      	lsrs	r3, r3, #6
 80069ac:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 80069ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069b0:	041b      	lsls	r3, r3, #16
 80069b2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80069b6:	4a10      	ldr	r2, [pc, #64]	; (80069f8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80069b8:	fba2 2303 	umull	r2, r3, r2, r3
 80069bc:	099b      	lsrs	r3, r3, #6
 80069be:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 80069c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069c2:	021b      	lsls	r3, r3, #8
 80069c4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 80069c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	bfb8      	it	lt
 80069d2:	425b      	neglt	r3, r3
 80069d4:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 80069d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d8:	021b      	lsls	r3, r3, #8
 80069da:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	7e1b      	ldrb	r3, [r3, #24]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00b      	beq.n	80069fc <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 80069e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80069e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069ec:	e033      	b.n	8006a56 <VL53L0X_calc_sigma_estimate+0x30e>
 80069ee:	bf00      	nop
 80069f0:	028f87ae 	.word	0x028f87ae
 80069f4:	0006999a 	.word	0x0006999a
 80069f8:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 80069fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8006a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a0c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8006a10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a14:	fb02 f303 	mul.w	r3, r2, r3
 8006a18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8006a1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006a20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a22:	4413      	add	r3, r2
 8006a24:	0c1b      	lsrs	r3, r3, #16
 8006a26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8006a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a2e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8006a32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8006a36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a3a:	085b      	lsrs	r3, r3, #1
 8006a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8006a40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a44:	fb03 f303 	mul.w	r3, r3, r3
 8006a48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8006a4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a50:	0b9b      	lsrs	r3, r3, #14
 8006a52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8006a56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a5c:	fb02 f303 	mul.w	r3, r2, r3
 8006a60:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006a68:	0c1b      	lsrs	r3, r3, #16
 8006a6a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6e:	fb03 f303 	mul.w	r3, r3, r3
 8006a72:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8006a74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006a78:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8006a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006a80:	0c1b      	lsrs	r3, r3, #16
 8006a82:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8006a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a86:	fb03 f303 	mul.w	r3, r3, r3
 8006a8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8006a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a90:	4413      	add	r3, r2
 8006a92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8006a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a96:	f7fe fa70 	bl	8004f7a <VL53L0X_isqrt>
 8006a9a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9e:	041b      	lsls	r3, r3, #16
 8006aa0:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa4:	3332      	adds	r3, #50	; 0x32
 8006aa6:	4a4b      	ldr	r2, [pc, #300]	; (8006bd4 <VL53L0X_calc_sigma_estimate+0x48c>)
 8006aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8006aac:	095a      	lsrs	r2, r3, #5
 8006aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8006ab8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006abc:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8006ac0:	fb02 f303 	mul.w	r3, r2, r3
 8006ac4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8006ac8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006acc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006ad0:	3308      	adds	r3, #8
 8006ad2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8006ad6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ada:	4a3f      	ldr	r2, [pc, #252]	; (8006bd8 <VL53L0X_calc_sigma_estimate+0x490>)
 8006adc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae0:	0b5b      	lsrs	r3, r3, #13
 8006ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8006ae6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006aea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d902      	bls.n	8006af6 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8006af0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006af2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8006af6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006afa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8006b04:	4a35      	ldr	r2, [pc, #212]	; (8006bdc <VL53L0X_calc_sigma_estimate+0x494>)
 8006b06:	fba2 2303 	umull	r2, r3, r2, r3
 8006b0a:	099b      	lsrs	r3, r3, #6
 8006b0c:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8006b12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b16:	441a      	add	r2, r3
 8006b18:	6a3b      	ldr	r3, [r7, #32]
 8006b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7fe fa2b 	bl	8004f7a <VL53L0X_isqrt>
 8006b24:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	021b      	lsls	r3, r3, #8
 8006b2a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006b32:	4a2a      	ldr	r2, [pc, #168]	; (8006bdc <VL53L0X_calc_sigma_estimate+0x494>)
 8006b34:	fba2 2303 	umull	r2, r3, r2, r3
 8006b38:	099b      	lsrs	r3, r3, #6
 8006b3a:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8006b3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b40:	fb03 f303 	mul.w	r3, r3, r3
 8006b44:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	fb03 f303 	mul.w	r3, r3, r3
 8006b4c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8006b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b52:	4413      	add	r3, r2
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7fe fa10 	bl	8004f7a <VL53L0X_isqrt>
 8006b5a:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b62:	fb02 f303 	mul.w	r3, r2, r3
 8006b66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8006b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d009      	beq.n	8006b84 <VL53L0X_calc_sigma_estimate+0x43c>
 8006b70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d005      	beq.n	8006b84 <VL53L0X_calc_sigma_estimate+0x43c>
 8006b78:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8006b7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d903      	bls.n	8006b8c <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8006b84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8006b92:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8006b9e:	6939      	ldr	r1, [r7, #16]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	9303      	str	r3, [sp, #12]
 8006ba4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006ba8:	9302      	str	r3, [sp, #8]
 8006baa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006bae:	9301      	str	r3, [sp, #4]
 8006bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f7ff fca8 	bl	8006510 <VL53L0X_calc_dmax>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006bc6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	37c0      	adds	r7, #192	; 0xc0
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	51eb851f 	.word	0x51eb851f
 8006bd8:	d1b71759 	.word	0xd1b71759
 8006bdc:	10624dd3 	.word	0x10624dd3

08006be0 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b090      	sub	sp, #64	; 0x40
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	607a      	str	r2, [r7, #4]
 8006bea:	461a      	mov	r2, r3
 8006bec:	460b      	mov	r3, r1
 8006bee:	72fb      	strb	r3, [r7, #11]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8006c00:	2300      	movs	r3, #0
 8006c02:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8006c06:	2300      	movs	r3, #0
 8006c08:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8006c12:	2300      	movs	r3, #0
 8006c14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8006c32:	7afb      	ldrb	r3, [r7, #11]
 8006c34:	10db      	asrs	r3, r3, #3
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	f003 030f 	and.w	r3, r3, #15
 8006c3c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8006c40:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d017      	beq.n	8006c78 <VL53L0X_get_pal_range_status+0x98>
 8006c48:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006c4c:	2b05      	cmp	r3, #5
 8006c4e:	d013      	beq.n	8006c78 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8006c50:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006c54:	2b07      	cmp	r3, #7
 8006c56:	d00f      	beq.n	8006c78 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8006c58:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006c5c:	2b0c      	cmp	r3, #12
 8006c5e:	d00b      	beq.n	8006c78 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8006c60:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006c64:	2b0d      	cmp	r3, #13
 8006c66:	d007      	beq.n	8006c78 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8006c68:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006c6c:	2b0e      	cmp	r3, #14
 8006c6e:	d003      	beq.n	8006c78 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8006c70:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006c74:	2b0f      	cmp	r3, #15
 8006c76:	d103      	bne.n	8006c80 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8006c7e:	e002      	b.n	8006c86 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8006c80:	2300      	movs	r3, #0
 8006c82:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8006c86:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d109      	bne.n	8006ca2 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006c8e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8006c92:	461a      	mov	r2, r3
 8006c94:	2100      	movs	r1, #0
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f7fc fc86 	bl	80035a8 <VL53L0X_GetLimitCheckEnable>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8006ca2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d02e      	beq.n	8006d08 <VL53L0X_get_pal_range_status+0x128>
 8006caa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d12a      	bne.n	8006d08 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8006cb2:	f107 0310 	add.w	r3, r7, #16
 8006cb6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006cba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f7ff fd43 	bl	8006748 <VL53L0X_calc_sigma_estimate>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8006cc8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d103      	bne.n	8006cd8 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cd6:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8006cd8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d113      	bne.n	8006d08 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8006ce0:	f107 0320 	add.w	r3, r7, #32
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f7fc fce3 	bl	80036b4 <VL53L0X_GetLimitCheckValue>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d006      	beq.n	8006d08 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8006cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cfc:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d902      	bls.n	8006d08 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8006d02:	2301      	movs	r3, #1
 8006d04:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8006d08:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d109      	bne.n	8006d24 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006d10:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8006d14:	461a      	mov	r2, r3
 8006d16:	2102      	movs	r1, #2
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f7fc fc45 	bl	80035a8 <VL53L0X_GetLimitCheckEnable>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8006d24:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d044      	beq.n	8006db6 <VL53L0X_get_pal_range_status+0x1d6>
 8006d2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d140      	bne.n	8006db6 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8006d34:	f107 031c 	add.w	r3, r7, #28
 8006d38:	461a      	mov	r2, r3
 8006d3a:	2102      	movs	r1, #2
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f7fc fcb9 	bl	80036b4 <VL53L0X_GetLimitCheckValue>
 8006d42:	4603      	mov	r3, r0
 8006d44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8006d48:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d107      	bne.n	8006d60 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006d50:	2201      	movs	r2, #1
 8006d52:	21ff      	movs	r1, #255	; 0xff
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f7fb fbef 	bl	8002538 <VL53L0X_WrByte>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8006d60:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d109      	bne.n	8006d7c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8006d68:	f107 0316 	add.w	r3, r7, #22
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	21b6      	movs	r1, #182	; 0xb6
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f7fb fcbf 	bl	80026f4 <VL53L0X_RdWord>
 8006d76:	4603      	mov	r3, r0
 8006d78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8006d7c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d107      	bne.n	8006d94 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006d84:	2200      	movs	r2, #0
 8006d86:	21ff      	movs	r1, #255	; 0xff
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f7fb fbd5 	bl	8002538 <VL53L0X_WrByte>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8006d94:	8afb      	ldrh	r3, [r7, #22]
 8006d96:	025b      	lsls	r3, r3, #9
 8006d98:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d9e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d006      	beq.n	8006db6 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8006da8:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8006daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d902      	bls.n	8006db6 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8006db0:	2301      	movs	r3, #1
 8006db2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8006db6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d109      	bne.n	8006dd2 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006dbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	2103      	movs	r1, #3
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f7fc fbee 	bl	80035a8 <VL53L0X_GetLimitCheckEnable>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8006dd2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d023      	beq.n	8006e22 <VL53L0X_get_pal_range_status+0x242>
 8006dda:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d11f      	bne.n	8006e22 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8006de2:	893b      	ldrh	r3, [r7, #8]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d102      	bne.n	8006dee <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8006de8:	2300      	movs	r3, #0
 8006dea:	637b      	str	r3, [r7, #52]	; 0x34
 8006dec:	e005      	b.n	8006dfa <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	021a      	lsls	r2, r3, #8
 8006df2:	893b      	ldrh	r3, [r7, #8]
 8006df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df8:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8006dfa:	f107 0318 	add.w	r3, r7, #24
 8006dfe:	461a      	mov	r2, r3
 8006e00:	2103      	movs	r1, #3
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f7fc fc56 	bl	80036b4 <VL53L0X_GetLimitCheckValue>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d006      	beq.n	8006e22 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8006e14:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8006e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d202      	bcs.n	8006e22 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006e22:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d14a      	bne.n	8006ec0 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8006e2a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d103      	bne.n	8006e3a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8006e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e34:	22ff      	movs	r2, #255	; 0xff
 8006e36:	701a      	strb	r2, [r3, #0]
 8006e38:	e042      	b.n	8006ec0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8006e3a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d007      	beq.n	8006e52 <VL53L0X_get_pal_range_status+0x272>
 8006e42:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d003      	beq.n	8006e52 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8006e4a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006e4e:	2b03      	cmp	r3, #3
 8006e50:	d103      	bne.n	8006e5a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8006e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e54:	2205      	movs	r2, #5
 8006e56:	701a      	strb	r2, [r3, #0]
 8006e58:	e032      	b.n	8006ec0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8006e5a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006e5e:	2b06      	cmp	r3, #6
 8006e60:	d003      	beq.n	8006e6a <VL53L0X_get_pal_range_status+0x28a>
 8006e62:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006e66:	2b09      	cmp	r3, #9
 8006e68:	d103      	bne.n	8006e72 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8006e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e6c:	2204      	movs	r2, #4
 8006e6e:	701a      	strb	r2, [r3, #0]
 8006e70:	e026      	b.n	8006ec0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8006e72:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006e76:	2b08      	cmp	r3, #8
 8006e78:	d007      	beq.n	8006e8a <VL53L0X_get_pal_range_status+0x2aa>
 8006e7a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006e7e:	2b0a      	cmp	r3, #10
 8006e80:	d003      	beq.n	8006e8a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8006e82:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d103      	bne.n	8006e92 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8006e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e8c:	2203      	movs	r2, #3
 8006e8e:	701a      	strb	r2, [r3, #0]
 8006e90:	e016      	b.n	8006ec0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8006e92:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	d003      	beq.n	8006ea2 <VL53L0X_get_pal_range_status+0x2c2>
 8006e9a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d103      	bne.n	8006eaa <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8006ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	701a      	strb	r2, [r3, #0]
 8006ea8:	e00a      	b.n	8006ec0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8006eaa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d103      	bne.n	8006eba <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8006eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	701a      	strb	r2, [r3, #0]
 8006eb8:	e002      	b.n	8006ec0 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8006eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8006ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d102      	bne.n	8006ece <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8006ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eca:	2200      	movs	r2, #0
 8006ecc:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006ece:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f7fc fb66 	bl	80035a8 <VL53L0X_GetLimitCheckEnable>
 8006edc:	4603      	mov	r3, r0
 8006ede:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8006ee2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d14f      	bne.n	8006f8a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8006eea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d003      	beq.n	8006efa <VL53L0X_get_pal_range_status+0x31a>
 8006ef2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d103      	bne.n	8006f02 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8006efa:	2301      	movs	r3, #1
 8006efc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f00:	e002      	b.n	8006f08 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8006f02:	2300      	movs	r3, #0
 8006f04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006f0e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8006f12:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006f16:	2b04      	cmp	r3, #4
 8006f18:	d003      	beq.n	8006f22 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8006f1a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d103      	bne.n	8006f2a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8006f22:	2301      	movs	r3, #1
 8006f24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f28:	e002      	b.n	8006f30 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006f36:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8006f3a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <VL53L0X_get_pal_range_status+0x36a>
 8006f42:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d103      	bne.n	8006f52 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f50:	e002      	b.n	8006f58 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8006f52:	2300      	movs	r3, #0
 8006f54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006f5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8006f62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <VL53L0X_get_pal_range_status+0x392>
 8006f6a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d103      	bne.n	8006f7a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8006f72:	2301      	movs	r3, #1
 8006f74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f78:	e002      	b.n	8006f80 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006f86:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006f8a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3740      	adds	r7, #64	; 0x40
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b082      	sub	sp, #8
 8006f9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006fa0:	2003      	movs	r0, #3
 8006fa2:	f001 f93d 	bl	8008220 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	f000 f80e 	bl	8006fc8 <HAL_InitTick>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d002      	beq.n	8006fb8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	71fb      	strb	r3, [r7, #7]
 8006fb6:	e001      	b.n	8006fbc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006fb8:	f7fa feee 	bl	8001d98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006fbc:	79fb      	ldrb	r3, [r7, #7]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
	...

08006fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006fd4:	4b17      	ldr	r3, [pc, #92]	; (8007034 <HAL_InitTick+0x6c>)
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d023      	beq.n	8007024 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006fdc:	4b16      	ldr	r3, [pc, #88]	; (8007038 <HAL_InitTick+0x70>)
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	4b14      	ldr	r3, [pc, #80]	; (8007034 <HAL_InitTick+0x6c>)
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8006fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f001 f949 	bl	800828a <HAL_SYSTICK_Config>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10f      	bne.n	800701e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b0f      	cmp	r3, #15
 8007002:	d809      	bhi.n	8007018 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007004:	2200      	movs	r2, #0
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800700c:	f001 f913 	bl	8008236 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007010:	4a0a      	ldr	r2, [pc, #40]	; (800703c <HAL_InitTick+0x74>)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6013      	str	r3, [r2, #0]
 8007016:	e007      	b.n	8007028 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	73fb      	strb	r3, [r7, #15]
 800701c:	e004      	b.n	8007028 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	73fb      	strb	r3, [r7, #15]
 8007022:	e001      	b.n	8007028 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007028:	7bfb      	ldrb	r3, [r7, #15]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	20000454 	.word	0x20000454
 8007038:	20000190 	.word	0x20000190
 800703c:	20000450 	.word	0x20000450

08007040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007040:	b480      	push	{r7}
 8007042:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007044:	4b06      	ldr	r3, [pc, #24]	; (8007060 <HAL_IncTick+0x20>)
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	461a      	mov	r2, r3
 800704a:	4b06      	ldr	r3, [pc, #24]	; (8007064 <HAL_IncTick+0x24>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4413      	add	r3, r2
 8007050:	4a04      	ldr	r2, [pc, #16]	; (8007064 <HAL_IncTick+0x24>)
 8007052:	6013      	str	r3, [r2, #0]
}
 8007054:	bf00      	nop
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	20000454 	.word	0x20000454
 8007064:	20000e0c 	.word	0x20000e0c

08007068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007068:	b480      	push	{r7}
 800706a:	af00      	add	r7, sp, #0
  return uwTick;
 800706c:	4b03      	ldr	r3, [pc, #12]	; (800707c <HAL_GetTick+0x14>)
 800706e:	681b      	ldr	r3, [r3, #0]
}
 8007070:	4618      	mov	r0, r3
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	20000e0c 	.word	0x20000e0c

08007080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007088:	f7ff ffee 	bl	8007068 <HAL_GetTick>
 800708c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007098:	d005      	beq.n	80070a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800709a:	4b0a      	ldr	r3, [pc, #40]	; (80070c4 <HAL_Delay+0x44>)
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	461a      	mov	r2, r3
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	4413      	add	r3, r2
 80070a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80070a6:	bf00      	nop
 80070a8:	f7ff ffde 	bl	8007068 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d8f7      	bhi.n	80070a8 <HAL_Delay+0x28>
  {
  }
}
 80070b8:	bf00      	nop
 80070ba:	bf00      	nop
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	20000454 	.word	0x20000454

080070c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	431a      	orrs	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	609a      	str	r2, [r3, #8]
}
 80070e2:	bf00      	nop
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b083      	sub	sp, #12
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	431a      	orrs	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	609a      	str	r2, [r3, #8]
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007124:	4618      	mov	r0, r3
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007130:	b480      	push	{r7}
 8007132:	b087      	sub	sp, #28
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
 800713c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	3360      	adds	r3, #96	; 0x60
 8007142:	461a      	mov	r2, r3
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	4b08      	ldr	r3, [pc, #32]	; (8007174 <LL_ADC_SetOffset+0x44>)
 8007152:	4013      	ands	r3, r2
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	430a      	orrs	r2, r1
 800715e:	4313      	orrs	r3, r2
 8007160:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007168:	bf00      	nop
 800716a:	371c      	adds	r7, #28
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr
 8007174:	03fff000 	.word	0x03fff000

08007178 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	3360      	adds	r3, #96	; 0x60
 8007186:	461a      	mov	r2, r3
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007198:	4618      	mov	r0, r3
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	3360      	adds	r3, #96	; 0x60
 80071b4:	461a      	mov	r2, r3
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	431a      	orrs	r2, r3
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80071ce:	bf00      	nop
 80071d0:	371c      	adds	r7, #28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80071da:	b480      	push	{r7}
 80071dc:	b083      	sub	sp, #12
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	431a      	orrs	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	615a      	str	r2, [r3, #20]
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007200:	b480      	push	{r7}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	3330      	adds	r3, #48	; 0x30
 8007210:	461a      	mov	r2, r3
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	0a1b      	lsrs	r3, r3, #8
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	f003 030c 	and.w	r3, r3, #12
 800721c:	4413      	add	r3, r2
 800721e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	f003 031f 	and.w	r3, r3, #31
 800722a:	211f      	movs	r1, #31
 800722c:	fa01 f303 	lsl.w	r3, r1, r3
 8007230:	43db      	mvns	r3, r3
 8007232:	401a      	ands	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	0e9b      	lsrs	r3, r3, #26
 8007238:	f003 011f 	and.w	r1, r3, #31
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	f003 031f 	and.w	r3, r3, #31
 8007242:	fa01 f303 	lsl.w	r3, r1, r3
 8007246:	431a      	orrs	r2, r3
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800724c:	bf00      	nop
 800724e:	371c      	adds	r7, #28
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	3314      	adds	r3, #20
 8007268:	461a      	mov	r2, r3
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	0e5b      	lsrs	r3, r3, #25
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	f003 0304 	and.w	r3, r3, #4
 8007274:	4413      	add	r3, r2
 8007276:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	0d1b      	lsrs	r3, r3, #20
 8007280:	f003 031f 	and.w	r3, r3, #31
 8007284:	2107      	movs	r1, #7
 8007286:	fa01 f303 	lsl.w	r3, r1, r3
 800728a:	43db      	mvns	r3, r3
 800728c:	401a      	ands	r2, r3
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	0d1b      	lsrs	r3, r3, #20
 8007292:	f003 031f 	and.w	r3, r3, #31
 8007296:	6879      	ldr	r1, [r7, #4]
 8007298:	fa01 f303 	lsl.w	r3, r1, r3
 800729c:	431a      	orrs	r2, r3
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80072a2:	bf00      	nop
 80072a4:	371c      	adds	r7, #28
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
	...

080072b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072c8:	43db      	mvns	r3, r3
 80072ca:	401a      	ands	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f003 0318 	and.w	r3, r3, #24
 80072d2:	4908      	ldr	r1, [pc, #32]	; (80072f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80072d4:	40d9      	lsrs	r1, r3
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	400b      	ands	r3, r1
 80072da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072de:	431a      	orrs	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80072e6:	bf00      	nop
 80072e8:	3714      	adds	r7, #20
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	0007ffff 	.word	0x0007ffff

080072f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007308:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	6093      	str	r3, [r2, #8]
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800732c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007330:	d101      	bne.n	8007336 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007332:	2301      	movs	r3, #1
 8007334:	e000      	b.n	8007338 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007354:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007358:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800737c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007380:	d101      	bne.n	8007386 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007382:	2301      	movs	r3, #1
 8007384:	e000      	b.n	8007388 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d101      	bne.n	80073ac <LL_ADC_IsEnabled+0x18>
 80073a8:	2301      	movs	r3, #1
 80073aa:	e000      	b.n	80073ae <LL_ADC_IsEnabled+0x1a>
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b083      	sub	sp, #12
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f003 0304 	and.w	r3, r3, #4
 80073ca:	2b04      	cmp	r3, #4
 80073cc:	d101      	bne.n	80073d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80073ce:	2301      	movs	r3, #1
 80073d0:	e000      	b.n	80073d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f003 0308 	and.w	r3, r3, #8
 80073f0:	2b08      	cmp	r3, #8
 80073f2:	d101      	bne.n	80073f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80073f4:	2301      	movs	r3, #1
 80073f6:	e000      	b.n	80073fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
	...

08007408 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007408:	b590      	push	{r4, r7, lr}
 800740a:	b089      	sub	sp, #36	; 0x24
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007414:	2300      	movs	r3, #0
 8007416:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e139      	b.n	8007696 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800742c:	2b00      	cmp	r3, #0
 800742e:	d109      	bne.n	8007444 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7f9 f9ed 	bl	8000810 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4618      	mov	r0, r3
 800744a:	f7ff ff67 	bl	800731c <LL_ADC_IsDeepPowerDownEnabled>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d004      	beq.n	800745e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4618      	mov	r0, r3
 800745a:	f7ff ff4d 	bl	80072f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4618      	mov	r0, r3
 8007464:	f7ff ff82 	bl	800736c <LL_ADC_IsInternalRegulatorEnabled>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d115      	bne.n	800749a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4618      	mov	r0, r3
 8007474:	f7ff ff66 	bl	8007344 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007478:	4b89      	ldr	r3, [pc, #548]	; (80076a0 <HAL_ADC_Init+0x298>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	099b      	lsrs	r3, r3, #6
 800747e:	4a89      	ldr	r2, [pc, #548]	; (80076a4 <HAL_ADC_Init+0x29c>)
 8007480:	fba2 2303 	umull	r2, r3, r2, r3
 8007484:	099b      	lsrs	r3, r3, #6
 8007486:	3301      	adds	r3, #1
 8007488:	005b      	lsls	r3, r3, #1
 800748a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800748c:	e002      	b.n	8007494 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	3b01      	subs	r3, #1
 8007492:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1f9      	bne.n	800748e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4618      	mov	r0, r3
 80074a0:	f7ff ff64 	bl	800736c <LL_ADC_IsInternalRegulatorEnabled>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10d      	bne.n	80074c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ae:	f043 0210 	orr.w	r2, r3, #16
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ba:	f043 0201 	orr.w	r2, r3, #1
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7ff ff75 	bl	80073ba <LL_ADC_REG_IsConversionOngoing>
 80074d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d6:	f003 0310 	and.w	r3, r3, #16
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f040 80d2 	bne.w	8007684 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f040 80ce 	bne.w	8007684 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80074f0:	f043 0202 	orr.w	r2, r3, #2
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7ff ff49 	bl	8007394 <LL_ADC_IsEnabled>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d115      	bne.n	8007534 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007508:	4867      	ldr	r0, [pc, #412]	; (80076a8 <HAL_ADC_Init+0x2a0>)
 800750a:	f7ff ff43 	bl	8007394 <LL_ADC_IsEnabled>
 800750e:	4604      	mov	r4, r0
 8007510:	4866      	ldr	r0, [pc, #408]	; (80076ac <HAL_ADC_Init+0x2a4>)
 8007512:	f7ff ff3f 	bl	8007394 <LL_ADC_IsEnabled>
 8007516:	4603      	mov	r3, r0
 8007518:	431c      	orrs	r4, r3
 800751a:	4865      	ldr	r0, [pc, #404]	; (80076b0 <HAL_ADC_Init+0x2a8>)
 800751c:	f7ff ff3a 	bl	8007394 <LL_ADC_IsEnabled>
 8007520:	4603      	mov	r3, r0
 8007522:	4323      	orrs	r3, r4
 8007524:	2b00      	cmp	r3, #0
 8007526:	d105      	bne.n	8007534 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	4619      	mov	r1, r3
 800752e:	4861      	ldr	r0, [pc, #388]	; (80076b4 <HAL_ADC_Init+0x2ac>)
 8007530:	f7ff fdca 	bl	80070c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	7e5b      	ldrb	r3, [r3, #25]
 8007538:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800753e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8007544:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800754a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007552:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007554:	4313      	orrs	r3, r2
 8007556:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d106      	bne.n	8007570 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	3b01      	subs	r3, #1
 8007568:	045b      	lsls	r3, r3, #17
 800756a:	69ba      	ldr	r2, [r7, #24]
 800756c:	4313      	orrs	r3, r2
 800756e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007574:	2b00      	cmp	r3, #0
 8007576:	d009      	beq.n	800758c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007584:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007586:	69ba      	ldr	r2, [r7, #24]
 8007588:	4313      	orrs	r3, r2
 800758a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68da      	ldr	r2, [r3, #12]
 8007592:	4b49      	ldr	r3, [pc, #292]	; (80076b8 <HAL_ADC_Init+0x2b0>)
 8007594:	4013      	ands	r3, r2
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	6812      	ldr	r2, [r2, #0]
 800759a:	69b9      	ldr	r1, [r7, #24]
 800759c:	430b      	orrs	r3, r1
 800759e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7ff ff08 	bl	80073ba <LL_ADC_REG_IsConversionOngoing>
 80075aa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7ff ff15 	bl	80073e0 <LL_ADC_INJ_IsConversionOngoing>
 80075b6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d140      	bne.n	8007640 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d13d      	bne.n	8007640 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	7e1b      	ldrb	r3, [r3, #24]
 80075cc:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80075ce:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075d6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80075d8:	4313      	orrs	r3, r2
 80075da:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075e6:	f023 0306 	bic.w	r3, r3, #6
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	6812      	ldr	r2, [r2, #0]
 80075ee:	69b9      	ldr	r1, [r7, #24]
 80075f0:	430b      	orrs	r3, r1
 80075f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d118      	bne.n	8007630 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007608:	f023 0304 	bic.w	r3, r3, #4
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007614:	4311      	orrs	r1, r2
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800761a:	4311      	orrs	r1, r2
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007620:	430a      	orrs	r2, r1
 8007622:	431a      	orrs	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f042 0201 	orr.w	r2, r2, #1
 800762c:	611a      	str	r2, [r3, #16]
 800762e:	e007      	b.n	8007640 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	691a      	ldr	r2, [r3, #16]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f022 0201 	bic.w	r2, r2, #1
 800763e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d10c      	bne.n	8007662 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764e:	f023 010f 	bic.w	r1, r3, #15
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	69db      	ldr	r3, [r3, #28]
 8007656:	1e5a      	subs	r2, r3, #1
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	430a      	orrs	r2, r1
 800765e:	631a      	str	r2, [r3, #48]	; 0x30
 8007660:	e007      	b.n	8007672 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 020f 	bic.w	r2, r2, #15
 8007670:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007676:	f023 0303 	bic.w	r3, r3, #3
 800767a:	f043 0201 	orr.w	r2, r3, #1
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	659a      	str	r2, [r3, #88]	; 0x58
 8007682:	e007      	b.n	8007694 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007688:	f043 0210 	orr.w	r2, r3, #16
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007694:	7ffb      	ldrb	r3, [r7, #31]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3724      	adds	r7, #36	; 0x24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd90      	pop	{r4, r7, pc}
 800769e:	bf00      	nop
 80076a0:	20000190 	.word	0x20000190
 80076a4:	053e2d63 	.word	0x053e2d63
 80076a8:	50040000 	.word	0x50040000
 80076ac:	50040100 	.word	0x50040100
 80076b0:	50040200 	.word	0x50040200
 80076b4:	50040300 	.word	0x50040300
 80076b8:	fff0c007 	.word	0xfff0c007

080076bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b0b6      	sub	sp, #216	; 0xd8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80076c6:	2300      	movs	r3, #0
 80076c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80076cc:	2300      	movs	r3, #0
 80076ce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d101      	bne.n	80076de <HAL_ADC_ConfigChannel+0x22>
 80076da:	2302      	movs	r3, #2
 80076dc:	e3e3      	b.n	8007ea6 <HAL_ADC_ConfigChannel+0x7ea>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7ff fe65 	bl	80073ba <LL_ADC_REG_IsConversionOngoing>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f040 83c4 	bne.w	8007e80 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	2b05      	cmp	r3, #5
 80076fe:	d824      	bhi.n	800774a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	3b02      	subs	r3, #2
 8007706:	2b03      	cmp	r3, #3
 8007708:	d81b      	bhi.n	8007742 <HAL_ADC_ConfigChannel+0x86>
 800770a:	a201      	add	r2, pc, #4	; (adr r2, 8007710 <HAL_ADC_ConfigChannel+0x54>)
 800770c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007710:	08007721 	.word	0x08007721
 8007714:	08007729 	.word	0x08007729
 8007718:	08007731 	.word	0x08007731
 800771c:	08007739 	.word	0x08007739
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	220c      	movs	r2, #12
 8007724:	605a      	str	r2, [r3, #4]
          break;
 8007726:	e011      	b.n	800774c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	2212      	movs	r2, #18
 800772c:	605a      	str	r2, [r3, #4]
          break;
 800772e:	e00d      	b.n	800774c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	2218      	movs	r2, #24
 8007734:	605a      	str	r2, [r3, #4]
          break;
 8007736:	e009      	b.n	800774c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800773e:	605a      	str	r2, [r3, #4]
          break;
 8007740:	e004      	b.n	800774c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	2206      	movs	r2, #6
 8007746:	605a      	str	r2, [r3, #4]
          break;
 8007748:	e000      	b.n	800774c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800774a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6818      	ldr	r0, [r3, #0]
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	6859      	ldr	r1, [r3, #4]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	461a      	mov	r2, r3
 800775a:	f7ff fd51 	bl	8007200 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4618      	mov	r0, r3
 8007764:	f7ff fe29 	bl	80073ba <LL_ADC_REG_IsConversionOngoing>
 8007768:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4618      	mov	r0, r3
 8007772:	f7ff fe35 	bl	80073e0 <LL_ADC_INJ_IsConversionOngoing>
 8007776:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800777a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800777e:	2b00      	cmp	r3, #0
 8007780:	f040 81c1 	bne.w	8007b06 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007784:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007788:	2b00      	cmp	r3, #0
 800778a:	f040 81bc 	bne.w	8007b06 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007796:	d10f      	bne.n	80077b8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6818      	ldr	r0, [r3, #0]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2200      	movs	r2, #0
 80077a2:	4619      	mov	r1, r3
 80077a4:	f7ff fd58 	bl	8007258 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7ff fd12 	bl	80071da <LL_ADC_SetSamplingTimeCommonConfig>
 80077b6:	e00e      	b.n	80077d6 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6818      	ldr	r0, [r3, #0]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	6819      	ldr	r1, [r3, #0]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	461a      	mov	r2, r3
 80077c6:	f7ff fd47 	bl	8007258 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2100      	movs	r1, #0
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7ff fd02 	bl	80071da <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	695a      	ldr	r2, [r3, #20]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	08db      	lsrs	r3, r3, #3
 80077e2:	f003 0303 	and.w	r3, r3, #3
 80077e6:	005b      	lsls	r3, r3, #1
 80077e8:	fa02 f303 	lsl.w	r3, r2, r3
 80077ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	2b04      	cmp	r3, #4
 80077f6:	d00a      	beq.n	800780e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6818      	ldr	r0, [r3, #0]
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	6919      	ldr	r1, [r3, #16]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007808:	f7ff fc92 	bl	8007130 <LL_ADC_SetOffset>
 800780c:	e17b      	b.n	8007b06 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2100      	movs	r1, #0
 8007814:	4618      	mov	r0, r3
 8007816:	f7ff fcaf 	bl	8007178 <LL_ADC_GetOffsetChannel>
 800781a:	4603      	mov	r3, r0
 800781c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10a      	bne.n	800783a <HAL_ADC_ConfigChannel+0x17e>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2100      	movs	r1, #0
 800782a:	4618      	mov	r0, r3
 800782c:	f7ff fca4 	bl	8007178 <LL_ADC_GetOffsetChannel>
 8007830:	4603      	mov	r3, r0
 8007832:	0e9b      	lsrs	r3, r3, #26
 8007834:	f003 021f 	and.w	r2, r3, #31
 8007838:	e01e      	b.n	8007878 <HAL_ADC_ConfigChannel+0x1bc>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2100      	movs	r1, #0
 8007840:	4618      	mov	r0, r3
 8007842:	f7ff fc99 	bl	8007178 <LL_ADC_GetOffsetChannel>
 8007846:	4603      	mov	r3, r0
 8007848:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800784c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007850:	fa93 f3a3 	rbit	r3, r3
 8007854:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007858:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800785c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007860:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d101      	bne.n	800786c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8007868:	2320      	movs	r3, #32
 800786a:	e004      	b.n	8007876 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800786c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007870:	fab3 f383 	clz	r3, r3
 8007874:	b2db      	uxtb	r3, r3
 8007876:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007880:	2b00      	cmp	r3, #0
 8007882:	d105      	bne.n	8007890 <HAL_ADC_ConfigChannel+0x1d4>
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	0e9b      	lsrs	r3, r3, #26
 800788a:	f003 031f 	and.w	r3, r3, #31
 800788e:	e018      	b.n	80078c2 <HAL_ADC_ConfigChannel+0x206>
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007898:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800789c:	fa93 f3a3 	rbit	r3, r3
 80078a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80078a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80078ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d101      	bne.n	80078b8 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80078b4:	2320      	movs	r3, #32
 80078b6:	e004      	b.n	80078c2 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80078b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80078bc:	fab3 f383 	clz	r3, r3
 80078c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d106      	bne.n	80078d4 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2200      	movs	r2, #0
 80078cc:	2100      	movs	r1, #0
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7ff fc68 	bl	80071a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2101      	movs	r1, #1
 80078da:	4618      	mov	r0, r3
 80078dc:	f7ff fc4c 	bl	8007178 <LL_ADC_GetOffsetChannel>
 80078e0:	4603      	mov	r3, r0
 80078e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10a      	bne.n	8007900 <HAL_ADC_ConfigChannel+0x244>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2101      	movs	r1, #1
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7ff fc41 	bl	8007178 <LL_ADC_GetOffsetChannel>
 80078f6:	4603      	mov	r3, r0
 80078f8:	0e9b      	lsrs	r3, r3, #26
 80078fa:	f003 021f 	and.w	r2, r3, #31
 80078fe:	e01e      	b.n	800793e <HAL_ADC_ConfigChannel+0x282>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2101      	movs	r1, #1
 8007906:	4618      	mov	r0, r3
 8007908:	f7ff fc36 	bl	8007178 <LL_ADC_GetOffsetChannel>
 800790c:	4603      	mov	r3, r0
 800790e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007912:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007916:	fa93 f3a3 	rbit	r3, r3
 800791a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800791e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007922:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8007926:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800792a:	2b00      	cmp	r3, #0
 800792c:	d101      	bne.n	8007932 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800792e:	2320      	movs	r3, #32
 8007930:	e004      	b.n	800793c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8007932:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007936:	fab3 f383 	clz	r3, r3
 800793a:	b2db      	uxtb	r3, r3
 800793c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007946:	2b00      	cmp	r3, #0
 8007948:	d105      	bne.n	8007956 <HAL_ADC_ConfigChannel+0x29a>
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	0e9b      	lsrs	r3, r3, #26
 8007950:	f003 031f 	and.w	r3, r3, #31
 8007954:	e018      	b.n	8007988 <HAL_ADC_ConfigChannel+0x2cc>
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800795e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007962:	fa93 f3a3 	rbit	r3, r3
 8007966:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800796a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800796e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8007972:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800797a:	2320      	movs	r3, #32
 800797c:	e004      	b.n	8007988 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800797e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007982:	fab3 f383 	clz	r3, r3
 8007986:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007988:	429a      	cmp	r2, r3
 800798a:	d106      	bne.n	800799a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2200      	movs	r2, #0
 8007992:	2101      	movs	r1, #1
 8007994:	4618      	mov	r0, r3
 8007996:	f7ff fc05 	bl	80071a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2102      	movs	r1, #2
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7ff fbe9 	bl	8007178 <LL_ADC_GetOffsetChannel>
 80079a6:	4603      	mov	r3, r0
 80079a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10a      	bne.n	80079c6 <HAL_ADC_ConfigChannel+0x30a>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2102      	movs	r1, #2
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7ff fbde 	bl	8007178 <LL_ADC_GetOffsetChannel>
 80079bc:	4603      	mov	r3, r0
 80079be:	0e9b      	lsrs	r3, r3, #26
 80079c0:	f003 021f 	and.w	r2, r3, #31
 80079c4:	e01e      	b.n	8007a04 <HAL_ADC_ConfigChannel+0x348>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2102      	movs	r1, #2
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7ff fbd3 	bl	8007178 <LL_ADC_GetOffsetChannel>
 80079d2:	4603      	mov	r3, r0
 80079d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079dc:	fa93 f3a3 	rbit	r3, r3
 80079e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80079e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80079ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d101      	bne.n	80079f8 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80079f4:	2320      	movs	r3, #32
 80079f6:	e004      	b.n	8007a02 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80079f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079fc:	fab3 f383 	clz	r3, r3
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d105      	bne.n	8007a1c <HAL_ADC_ConfigChannel+0x360>
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	0e9b      	lsrs	r3, r3, #26
 8007a16:	f003 031f 	and.w	r3, r3, #31
 8007a1a:	e016      	b.n	8007a4a <HAL_ADC_ConfigChannel+0x38e>
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a28:	fa93 f3a3 	rbit	r3, r3
 8007a2c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8007a2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8007a34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d101      	bne.n	8007a40 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8007a3c:	2320      	movs	r3, #32
 8007a3e:	e004      	b.n	8007a4a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8007a40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a44:	fab3 f383 	clz	r3, r3
 8007a48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d106      	bne.n	8007a5c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2200      	movs	r2, #0
 8007a54:	2102      	movs	r1, #2
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7ff fba4 	bl	80071a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2103      	movs	r1, #3
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7ff fb88 	bl	8007178 <LL_ADC_GetOffsetChannel>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10a      	bne.n	8007a88 <HAL_ADC_ConfigChannel+0x3cc>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2103      	movs	r1, #3
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7ff fb7d 	bl	8007178 <LL_ADC_GetOffsetChannel>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	0e9b      	lsrs	r3, r3, #26
 8007a82:	f003 021f 	and.w	r2, r3, #31
 8007a86:	e017      	b.n	8007ab8 <HAL_ADC_ConfigChannel+0x3fc>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2103      	movs	r1, #3
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7ff fb72 	bl	8007178 <LL_ADC_GetOffsetChannel>
 8007a94:	4603      	mov	r3, r0
 8007a96:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a9a:	fa93 f3a3 	rbit	r3, r3
 8007a9e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8007aa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007aa2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8007aa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d101      	bne.n	8007aae <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8007aaa:	2320      	movs	r3, #32
 8007aac:	e003      	b.n	8007ab6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8007aae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ab0:	fab3 f383 	clz	r3, r3
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d105      	bne.n	8007ad0 <HAL_ADC_ConfigChannel+0x414>
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	0e9b      	lsrs	r3, r3, #26
 8007aca:	f003 031f 	and.w	r3, r3, #31
 8007ace:	e011      	b.n	8007af4 <HAL_ADC_ConfigChannel+0x438>
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ad6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ad8:	fa93 f3a3 	rbit	r3, r3
 8007adc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8007ade:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ae0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8007ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d101      	bne.n	8007aec <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8007ae8:	2320      	movs	r3, #32
 8007aea:	e003      	b.n	8007af4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8007aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aee:	fab3 f383 	clz	r3, r3
 8007af2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d106      	bne.n	8007b06 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2200      	movs	r2, #0
 8007afe:	2103      	movs	r1, #3
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7ff fb4f 	bl	80071a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7ff fc42 	bl	8007394 <LL_ADC_IsEnabled>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f040 8140 	bne.w	8007d98 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6818      	ldr	r0, [r3, #0]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	6819      	ldr	r1, [r3, #0]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	461a      	mov	r2, r3
 8007b26:	f7ff fbc3 	bl	80072b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	4a8f      	ldr	r2, [pc, #572]	; (8007d6c <HAL_ADC_ConfigChannel+0x6b0>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	f040 8131 	bne.w	8007d98 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10b      	bne.n	8007b5e <HAL_ADC_ConfigChannel+0x4a2>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	0e9b      	lsrs	r3, r3, #26
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	f003 031f 	and.w	r3, r3, #31
 8007b52:	2b09      	cmp	r3, #9
 8007b54:	bf94      	ite	ls
 8007b56:	2301      	movls	r3, #1
 8007b58:	2300      	movhi	r3, #0
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	e019      	b.n	8007b92 <HAL_ADC_ConfigChannel+0x4d6>
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b66:	fa93 f3a3 	rbit	r3, r3
 8007b6a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8007b6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b6e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8007b70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8007b76:	2320      	movs	r3, #32
 8007b78:	e003      	b.n	8007b82 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8007b7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b7c:	fab3 f383 	clz	r3, r3
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	3301      	adds	r3, #1
 8007b84:	f003 031f 	and.w	r3, r3, #31
 8007b88:	2b09      	cmp	r3, #9
 8007b8a:	bf94      	ite	ls
 8007b8c:	2301      	movls	r3, #1
 8007b8e:	2300      	movhi	r3, #0
 8007b90:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d079      	beq.n	8007c8a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d107      	bne.n	8007bb2 <HAL_ADC_ConfigChannel+0x4f6>
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	0e9b      	lsrs	r3, r3, #26
 8007ba8:	3301      	adds	r3, #1
 8007baa:	069b      	lsls	r3, r3, #26
 8007bac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007bb0:	e015      	b.n	8007bde <HAL_ADC_ConfigChannel+0x522>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bba:	fa93 f3a3 	rbit	r3, r3
 8007bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bc2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8007bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d101      	bne.n	8007bce <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8007bca:	2320      	movs	r3, #32
 8007bcc:	e003      	b.n	8007bd6 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8007bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bd0:	fab3 f383 	clz	r3, r3
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	069b      	lsls	r3, r3, #26
 8007bda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d109      	bne.n	8007bfe <HAL_ADC_ConfigChannel+0x542>
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	0e9b      	lsrs	r3, r3, #26
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	f003 031f 	and.w	r3, r3, #31
 8007bf6:	2101      	movs	r1, #1
 8007bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bfc:	e017      	b.n	8007c2e <HAL_ADC_ConfigChannel+0x572>
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c06:	fa93 f3a3 	rbit	r3, r3
 8007c0a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8007c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c0e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8007c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d101      	bne.n	8007c1a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8007c16:	2320      	movs	r3, #32
 8007c18:	e003      	b.n	8007c22 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8007c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c1c:	fab3 f383 	clz	r3, r3
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	3301      	adds	r3, #1
 8007c24:	f003 031f 	and.w	r3, r3, #31
 8007c28:	2101      	movs	r1, #1
 8007c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c2e:	ea42 0103 	orr.w	r1, r2, r3
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10a      	bne.n	8007c54 <HAL_ADC_ConfigChannel+0x598>
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	0e9b      	lsrs	r3, r3, #26
 8007c44:	3301      	adds	r3, #1
 8007c46:	f003 021f 	and.w	r2, r3, #31
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	005b      	lsls	r3, r3, #1
 8007c4e:	4413      	add	r3, r2
 8007c50:	051b      	lsls	r3, r3, #20
 8007c52:	e018      	b.n	8007c86 <HAL_ADC_ConfigChannel+0x5ca>
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5c:	fa93 f3a3 	rbit	r3, r3
 8007c60:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c64:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8007c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d101      	bne.n	8007c70 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8007c6c:	2320      	movs	r3, #32
 8007c6e:	e003      	b.n	8007c78 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8007c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c72:	fab3 f383 	clz	r3, r3
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	3301      	adds	r3, #1
 8007c7a:	f003 021f 	and.w	r2, r3, #31
 8007c7e:	4613      	mov	r3, r2
 8007c80:	005b      	lsls	r3, r3, #1
 8007c82:	4413      	add	r3, r2
 8007c84:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007c86:	430b      	orrs	r3, r1
 8007c88:	e081      	b.n	8007d8e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d107      	bne.n	8007ca6 <HAL_ADC_ConfigChannel+0x5ea>
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	0e9b      	lsrs	r3, r3, #26
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	069b      	lsls	r3, r3, #26
 8007ca0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007ca4:	e015      	b.n	8007cd2 <HAL_ADC_ConfigChannel+0x616>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cae:	fa93 f3a3 	rbit	r3, r3
 8007cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8007cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d101      	bne.n	8007cc2 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8007cbe:	2320      	movs	r3, #32
 8007cc0:	e003      	b.n	8007cca <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8007cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc4:	fab3 f383 	clz	r3, r3
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	3301      	adds	r3, #1
 8007ccc:	069b      	lsls	r3, r3, #26
 8007cce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d109      	bne.n	8007cf2 <HAL_ADC_ConfigChannel+0x636>
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	0e9b      	lsrs	r3, r3, #26
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	f003 031f 	and.w	r3, r3, #31
 8007cea:	2101      	movs	r1, #1
 8007cec:	fa01 f303 	lsl.w	r3, r1, r3
 8007cf0:	e017      	b.n	8007d22 <HAL_ADC_ConfigChannel+0x666>
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cf8:	6a3b      	ldr	r3, [r7, #32]
 8007cfa:	fa93 f3a3 	rbit	r3, r3
 8007cfe:	61fb      	str	r3, [r7, #28]
  return result;
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8007d0a:	2320      	movs	r3, #32
 8007d0c:	e003      	b.n	8007d16 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d10:	fab3 f383 	clz	r3, r3
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	3301      	adds	r3, #1
 8007d18:	f003 031f 	and.w	r3, r3, #31
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d22:	ea42 0103 	orr.w	r1, r2, r3
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10d      	bne.n	8007d4e <HAL_ADC_ConfigChannel+0x692>
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	0e9b      	lsrs	r3, r3, #26
 8007d38:	3301      	adds	r3, #1
 8007d3a:	f003 021f 	and.w	r2, r3, #31
 8007d3e:	4613      	mov	r3, r2
 8007d40:	005b      	lsls	r3, r3, #1
 8007d42:	4413      	add	r3, r2
 8007d44:	3b1e      	subs	r3, #30
 8007d46:	051b      	lsls	r3, r3, #20
 8007d48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007d4c:	e01e      	b.n	8007d8c <HAL_ADC_ConfigChannel+0x6d0>
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	fa93 f3a3 	rbit	r3, r3
 8007d5a:	613b      	str	r3, [r7, #16]
  return result;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d104      	bne.n	8007d70 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8007d66:	2320      	movs	r3, #32
 8007d68:	e006      	b.n	8007d78 <HAL_ADC_ConfigChannel+0x6bc>
 8007d6a:	bf00      	nop
 8007d6c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	fab3 f383 	clz	r3, r3
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	3301      	adds	r3, #1
 8007d7a:	f003 021f 	and.w	r2, r3, #31
 8007d7e:	4613      	mov	r3, r2
 8007d80:	005b      	lsls	r3, r3, #1
 8007d82:	4413      	add	r3, r2
 8007d84:	3b1e      	subs	r3, #30
 8007d86:	051b      	lsls	r3, r3, #20
 8007d88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d8c:	430b      	orrs	r3, r1
 8007d8e:	683a      	ldr	r2, [r7, #0]
 8007d90:	6892      	ldr	r2, [r2, #8]
 8007d92:	4619      	mov	r1, r3
 8007d94:	f7ff fa60 	bl	8007258 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	4b44      	ldr	r3, [pc, #272]	; (8007eb0 <HAL_ADC_ConfigChannel+0x7f4>)
 8007d9e:	4013      	ands	r3, r2
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d07a      	beq.n	8007e9a <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007da4:	4843      	ldr	r0, [pc, #268]	; (8007eb4 <HAL_ADC_ConfigChannel+0x7f8>)
 8007da6:	f7ff f9b5 	bl	8007114 <LL_ADC_GetCommonPathInternalCh>
 8007daa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a41      	ldr	r2, [pc, #260]	; (8007eb8 <HAL_ADC_ConfigChannel+0x7fc>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d12c      	bne.n	8007e12 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007db8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007dbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d126      	bne.n	8007e12 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a3c      	ldr	r2, [pc, #240]	; (8007ebc <HAL_ADC_ConfigChannel+0x800>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d004      	beq.n	8007dd8 <HAL_ADC_ConfigChannel+0x71c>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a3b      	ldr	r2, [pc, #236]	; (8007ec0 <HAL_ADC_ConfigChannel+0x804>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d15d      	bne.n	8007e94 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007dd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007ddc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007de0:	4619      	mov	r1, r3
 8007de2:	4834      	ldr	r0, [pc, #208]	; (8007eb4 <HAL_ADC_ConfigChannel+0x7f8>)
 8007de4:	f7ff f983 	bl	80070ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007de8:	4b36      	ldr	r3, [pc, #216]	; (8007ec4 <HAL_ADC_ConfigChannel+0x808>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	099b      	lsrs	r3, r3, #6
 8007dee:	4a36      	ldr	r2, [pc, #216]	; (8007ec8 <HAL_ADC_ConfigChannel+0x80c>)
 8007df0:	fba2 2303 	umull	r2, r3, r2, r3
 8007df4:	099b      	lsrs	r3, r3, #6
 8007df6:	1c5a      	adds	r2, r3, #1
 8007df8:	4613      	mov	r3, r2
 8007dfa:	005b      	lsls	r3, r3, #1
 8007dfc:	4413      	add	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007e02:	e002      	b.n	8007e0a <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	3b01      	subs	r3, #1
 8007e08:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1f9      	bne.n	8007e04 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007e10:	e040      	b.n	8007e94 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a2d      	ldr	r2, [pc, #180]	; (8007ecc <HAL_ADC_ConfigChannel+0x810>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d118      	bne.n	8007e4e <HAL_ADC_ConfigChannel+0x792>
 8007e1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d112      	bne.n	8007e4e <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a23      	ldr	r2, [pc, #140]	; (8007ebc <HAL_ADC_ConfigChannel+0x800>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d004      	beq.n	8007e3c <HAL_ADC_ConfigChannel+0x780>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a22      	ldr	r2, [pc, #136]	; (8007ec0 <HAL_ADC_ConfigChannel+0x804>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d12d      	bne.n	8007e98 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007e3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e44:	4619      	mov	r1, r3
 8007e46:	481b      	ldr	r0, [pc, #108]	; (8007eb4 <HAL_ADC_ConfigChannel+0x7f8>)
 8007e48:	f7ff f951 	bl	80070ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007e4c:	e024      	b.n	8007e98 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a1f      	ldr	r2, [pc, #124]	; (8007ed0 <HAL_ADC_ConfigChannel+0x814>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d120      	bne.n	8007e9a <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007e58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d11a      	bne.n	8007e9a <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a14      	ldr	r2, [pc, #80]	; (8007ebc <HAL_ADC_ConfigChannel+0x800>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d115      	bne.n	8007e9a <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007e6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007e76:	4619      	mov	r1, r3
 8007e78:	480e      	ldr	r0, [pc, #56]	; (8007eb4 <HAL_ADC_ConfigChannel+0x7f8>)
 8007e7a:	f7ff f938 	bl	80070ee <LL_ADC_SetCommonPathInternalCh>
 8007e7e:	e00c      	b.n	8007e9a <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e84:	f043 0220 	orr.w	r2, r3, #32
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8007e92:	e002      	b.n	8007e9a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007e94:	bf00      	nop
 8007e96:	e000      	b.n	8007e9a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007e98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8007ea2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	37d8      	adds	r7, #216	; 0xd8
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	80080000 	.word	0x80080000
 8007eb4:	50040300 	.word	0x50040300
 8007eb8:	c7520000 	.word	0xc7520000
 8007ebc:	50040000 	.word	0x50040000
 8007ec0:	50040200 	.word	0x50040200
 8007ec4:	20000190 	.word	0x20000190
 8007ec8:	053e2d63 	.word	0x053e2d63
 8007ecc:	cb840000 	.word	0xcb840000
 8007ed0:	80000001 	.word	0x80000001

08007ed4 <LL_ADC_IsEnabled>:
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d101      	bne.n	8007eec <LL_ADC_IsEnabled+0x18>
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e000      	b.n	8007eee <LL_ADC_IsEnabled+0x1a>
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	370c      	adds	r7, #12
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <LL_ADC_REG_IsConversionOngoing>:
{
 8007efa:	b480      	push	{r7}
 8007efc:	b083      	sub	sp, #12
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	f003 0304 	and.w	r3, r3, #4
 8007f0a:	2b04      	cmp	r3, #4
 8007f0c:	d101      	bne.n	8007f12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e000      	b.n	8007f14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007f20:	b590      	push	{r4, r7, lr}
 8007f22:	b0a1      	sub	sp, #132	; 0x84
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d101      	bne.n	8007f3e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	e093      	b.n	8008066 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8007f46:	2300      	movs	r3, #0
 8007f48:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a47      	ldr	r2, [pc, #284]	; (8008070 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d102      	bne.n	8007f5e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007f58:	4b46      	ldr	r3, [pc, #280]	; (8008074 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8007f5a:	60fb      	str	r3, [r7, #12]
 8007f5c:	e001      	b.n	8007f62 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d10b      	bne.n	8007f80 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f6c:	f043 0220 	orr.w	r2, r3, #32
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e072      	b.n	8008066 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7ff ffb9 	bl	8007efa <LL_ADC_REG_IsConversionOngoing>
 8007f88:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7ff ffb3 	bl	8007efa <LL_ADC_REG_IsConversionOngoing>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d154      	bne.n	8008044 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007f9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d151      	bne.n	8008044 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007fa0:	4b35      	ldr	r3, [pc, #212]	; (8008078 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8007fa2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d02c      	beq.n	8008006 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007fac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	6859      	ldr	r1, [r3, #4]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007fbe:	035b      	lsls	r3, r3, #13
 8007fc0:	430b      	orrs	r3, r1
 8007fc2:	431a      	orrs	r2, r3
 8007fc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fc6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007fc8:	4829      	ldr	r0, [pc, #164]	; (8008070 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8007fca:	f7ff ff83 	bl	8007ed4 <LL_ADC_IsEnabled>
 8007fce:	4604      	mov	r4, r0
 8007fd0:	4828      	ldr	r0, [pc, #160]	; (8008074 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8007fd2:	f7ff ff7f 	bl	8007ed4 <LL_ADC_IsEnabled>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	431c      	orrs	r4, r3
 8007fda:	4828      	ldr	r0, [pc, #160]	; (800807c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8007fdc:	f7ff ff7a 	bl	8007ed4 <LL_ADC_IsEnabled>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	4323      	orrs	r3, r4
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d137      	bne.n	8008058 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007fe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007ff0:	f023 030f 	bic.w	r3, r3, #15
 8007ff4:	683a      	ldr	r2, [r7, #0]
 8007ff6:	6811      	ldr	r1, [r2, #0]
 8007ff8:	683a      	ldr	r2, [r7, #0]
 8007ffa:	6892      	ldr	r2, [r2, #8]
 8007ffc:	430a      	orrs	r2, r1
 8007ffe:	431a      	orrs	r2, r3
 8008000:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008002:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008004:	e028      	b.n	8008058 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800800e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008010:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008012:	4817      	ldr	r0, [pc, #92]	; (8008070 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8008014:	f7ff ff5e 	bl	8007ed4 <LL_ADC_IsEnabled>
 8008018:	4604      	mov	r4, r0
 800801a:	4816      	ldr	r0, [pc, #88]	; (8008074 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800801c:	f7ff ff5a 	bl	8007ed4 <LL_ADC_IsEnabled>
 8008020:	4603      	mov	r3, r0
 8008022:	431c      	orrs	r4, r3
 8008024:	4815      	ldr	r0, [pc, #84]	; (800807c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8008026:	f7ff ff55 	bl	8007ed4 <LL_ADC_IsEnabled>
 800802a:	4603      	mov	r3, r0
 800802c:	4323      	orrs	r3, r4
 800802e:	2b00      	cmp	r3, #0
 8008030:	d112      	bne.n	8008058 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008032:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800803a:	f023 030f 	bic.w	r3, r3, #15
 800803e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008040:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008042:	e009      	b.n	8008058 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008048:	f043 0220 	orr.w	r2, r3, #32
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8008056:	e000      	b.n	800805a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008058:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8008062:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8008066:	4618      	mov	r0, r3
 8008068:	3784      	adds	r7, #132	; 0x84
 800806a:	46bd      	mov	sp, r7
 800806c:	bd90      	pop	{r4, r7, pc}
 800806e:	bf00      	nop
 8008070:	50040000 	.word	0x50040000
 8008074:	50040100 	.word	0x50040100
 8008078:	50040300 	.word	0x50040300
 800807c:	50040200 	.word	0x50040200

08008080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f003 0307 	and.w	r3, r3, #7
 800808e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008090:	4b0c      	ldr	r3, [pc, #48]	; (80080c4 <__NVIC_SetPriorityGrouping+0x44>)
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800809c:	4013      	ands	r3, r2
 800809e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80080a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80080ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80080b2:	4a04      	ldr	r2, [pc, #16]	; (80080c4 <__NVIC_SetPriorityGrouping+0x44>)
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	60d3      	str	r3, [r2, #12]
}
 80080b8:	bf00      	nop
 80080ba:	3714      	adds	r7, #20
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr
 80080c4:	e000ed00 	.word	0xe000ed00

080080c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80080c8:	b480      	push	{r7}
 80080ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80080cc:	4b04      	ldr	r3, [pc, #16]	; (80080e0 <__NVIC_GetPriorityGrouping+0x18>)
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	0a1b      	lsrs	r3, r3, #8
 80080d2:	f003 0307 	and.w	r3, r3, #7
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr
 80080e0:	e000ed00 	.word	0xe000ed00

080080e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	4603      	mov	r3, r0
 80080ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	db0b      	blt.n	800810e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80080f6:	79fb      	ldrb	r3, [r7, #7]
 80080f8:	f003 021f 	and.w	r2, r3, #31
 80080fc:	4907      	ldr	r1, [pc, #28]	; (800811c <__NVIC_EnableIRQ+0x38>)
 80080fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008102:	095b      	lsrs	r3, r3, #5
 8008104:	2001      	movs	r0, #1
 8008106:	fa00 f202 	lsl.w	r2, r0, r2
 800810a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800810e:	bf00      	nop
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	e000e100 	.word	0xe000e100

08008120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	4603      	mov	r3, r0
 8008128:	6039      	str	r1, [r7, #0]
 800812a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800812c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008130:	2b00      	cmp	r3, #0
 8008132:	db0a      	blt.n	800814a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	b2da      	uxtb	r2, r3
 8008138:	490c      	ldr	r1, [pc, #48]	; (800816c <__NVIC_SetPriority+0x4c>)
 800813a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800813e:	0112      	lsls	r2, r2, #4
 8008140:	b2d2      	uxtb	r2, r2
 8008142:	440b      	add	r3, r1
 8008144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008148:	e00a      	b.n	8008160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	b2da      	uxtb	r2, r3
 800814e:	4908      	ldr	r1, [pc, #32]	; (8008170 <__NVIC_SetPriority+0x50>)
 8008150:	79fb      	ldrb	r3, [r7, #7]
 8008152:	f003 030f 	and.w	r3, r3, #15
 8008156:	3b04      	subs	r3, #4
 8008158:	0112      	lsls	r2, r2, #4
 800815a:	b2d2      	uxtb	r2, r2
 800815c:	440b      	add	r3, r1
 800815e:	761a      	strb	r2, [r3, #24]
}
 8008160:	bf00      	nop
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr
 800816c:	e000e100 	.word	0xe000e100
 8008170:	e000ed00 	.word	0xe000ed00

08008174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008174:	b480      	push	{r7}
 8008176:	b089      	sub	sp, #36	; 0x24
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f003 0307 	and.w	r3, r3, #7
 8008186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	f1c3 0307 	rsb	r3, r3, #7
 800818e:	2b04      	cmp	r3, #4
 8008190:	bf28      	it	cs
 8008192:	2304      	movcs	r3, #4
 8008194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	3304      	adds	r3, #4
 800819a:	2b06      	cmp	r3, #6
 800819c:	d902      	bls.n	80081a4 <NVIC_EncodePriority+0x30>
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	3b03      	subs	r3, #3
 80081a2:	e000      	b.n	80081a6 <NVIC_EncodePriority+0x32>
 80081a4:	2300      	movs	r3, #0
 80081a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80081a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	fa02 f303 	lsl.w	r3, r2, r3
 80081b2:	43da      	mvns	r2, r3
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	401a      	ands	r2, r3
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80081bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	fa01 f303 	lsl.w	r3, r1, r3
 80081c6:	43d9      	mvns	r1, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80081cc:	4313      	orrs	r3, r2
         );
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3724      	adds	r7, #36	; 0x24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
	...

080081dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	3b01      	subs	r3, #1
 80081e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80081ec:	d301      	bcc.n	80081f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80081ee:	2301      	movs	r3, #1
 80081f0:	e00f      	b.n	8008212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80081f2:	4a0a      	ldr	r2, [pc, #40]	; (800821c <SysTick_Config+0x40>)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	3b01      	subs	r3, #1
 80081f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80081fa:	210f      	movs	r1, #15
 80081fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008200:	f7ff ff8e 	bl	8008120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008204:	4b05      	ldr	r3, [pc, #20]	; (800821c <SysTick_Config+0x40>)
 8008206:	2200      	movs	r2, #0
 8008208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800820a:	4b04      	ldr	r3, [pc, #16]	; (800821c <SysTick_Config+0x40>)
 800820c:	2207      	movs	r2, #7
 800820e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	e000e010 	.word	0xe000e010

08008220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f7ff ff29 	bl	8008080 <__NVIC_SetPriorityGrouping>
}
 800822e:	bf00      	nop
 8008230:	3708      	adds	r7, #8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b086      	sub	sp, #24
 800823a:	af00      	add	r7, sp, #0
 800823c:	4603      	mov	r3, r0
 800823e:	60b9      	str	r1, [r7, #8]
 8008240:	607a      	str	r2, [r7, #4]
 8008242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008244:	2300      	movs	r3, #0
 8008246:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008248:	f7ff ff3e 	bl	80080c8 <__NVIC_GetPriorityGrouping>
 800824c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	68b9      	ldr	r1, [r7, #8]
 8008252:	6978      	ldr	r0, [r7, #20]
 8008254:	f7ff ff8e 	bl	8008174 <NVIC_EncodePriority>
 8008258:	4602      	mov	r2, r0
 800825a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800825e:	4611      	mov	r1, r2
 8008260:	4618      	mov	r0, r3
 8008262:	f7ff ff5d 	bl	8008120 <__NVIC_SetPriority>
}
 8008266:	bf00      	nop
 8008268:	3718      	adds	r7, #24
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b082      	sub	sp, #8
 8008272:	af00      	add	r7, sp, #0
 8008274:	4603      	mov	r3, r0
 8008276:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800827c:	4618      	mov	r0, r3
 800827e:	f7ff ff31 	bl	80080e4 <__NVIC_EnableIRQ>
}
 8008282:	bf00      	nop
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b082      	sub	sp, #8
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f7ff ffa2 	bl	80081dc <SysTick_Config>
 8008298:	4603      	mov	r3, r0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3708      	adds	r7, #8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
	...

080082a4 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d101      	bne.n	80082b6 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e075      	b.n	80083a2 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d106      	bne.n	80082d0 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7f8 fba4 	bl	8000a18 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2202      	movs	r2, #2
 80082d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80082e6:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d002      	beq.n	80082f6 <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	6819      	ldr	r1, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	4b2a      	ldr	r3, [pc, #168]	; (80083ac <HAL_DCMI_Init+0x108>)
 8008302:	400b      	ands	r3, r1
 8008304:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	6819      	ldr	r1, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685a      	ldr	r2, [r3, #4]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800831a:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8008326:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8008332:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008338:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800833e:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008344:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800834a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	430a      	orrs	r2, r1
 8008352:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	2b10      	cmp	r3, #16
 800835a:	d112      	bne.n	8008382 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	7f1b      	ldrb	r3, [r3, #28]
 8008360:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	7f5b      	ldrb	r3, [r3, #29]
 8008366:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8008368:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	7f9b      	ldrb	r3, [r3, #30]
 800836e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8008370:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	7fdb      	ldrb	r3, [r3, #31]
 8008378:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800837e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8008380:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68da      	ldr	r2, [r3, #12]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f042 021f 	orr.w	r2, r2, #31
 8008390:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3708      	adds	r7, #8
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	ffe0f007 	.word	0xffe0f007

080083b0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d101      	bne.n	80083c2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e0ac      	b.n	800851c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 f8b2 	bl	8008530 <DFSDM_GetChannelFromInstance>
 80083cc:	4603      	mov	r3, r0
 80083ce:	4a55      	ldr	r2, [pc, #340]	; (8008524 <HAL_DFSDM_ChannelInit+0x174>)
 80083d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e09f      	b.n	800851c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f7f8 fc07 	bl	8000bf0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80083e2:	4b51      	ldr	r3, [pc, #324]	; (8008528 <HAL_DFSDM_ChannelInit+0x178>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3301      	adds	r3, #1
 80083e8:	4a4f      	ldr	r2, [pc, #316]	; (8008528 <HAL_DFSDM_ChannelInit+0x178>)
 80083ea:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80083ec:	4b4e      	ldr	r3, [pc, #312]	; (8008528 <HAL_DFSDM_ChannelInit+0x178>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d125      	bne.n	8008440 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80083f4:	4b4d      	ldr	r3, [pc, #308]	; (800852c <HAL_DFSDM_ChannelInit+0x17c>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a4c      	ldr	r2, [pc, #304]	; (800852c <HAL_DFSDM_ChannelInit+0x17c>)
 80083fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80083fe:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8008400:	4b4a      	ldr	r3, [pc, #296]	; (800852c <HAL_DFSDM_ChannelInit+0x17c>)
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	4948      	ldr	r1, [pc, #288]	; (800852c <HAL_DFSDM_ChannelInit+0x17c>)
 800840a:	4313      	orrs	r3, r2
 800840c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800840e:	4b47      	ldr	r3, [pc, #284]	; (800852c <HAL_DFSDM_ChannelInit+0x17c>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a46      	ldr	r2, [pc, #280]	; (800852c <HAL_DFSDM_ChannelInit+0x17c>)
 8008414:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8008418:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	791b      	ldrb	r3, [r3, #4]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d108      	bne.n	8008434 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8008422:	4b42      	ldr	r3, [pc, #264]	; (800852c <HAL_DFSDM_ChannelInit+0x17c>)
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	3b01      	subs	r3, #1
 800842c:	041b      	lsls	r3, r3, #16
 800842e:	493f      	ldr	r1, [pc, #252]	; (800852c <HAL_DFSDM_ChannelInit+0x17c>)
 8008430:	4313      	orrs	r3, r2
 8008432:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8008434:	4b3d      	ldr	r3, [pc, #244]	; (800852c <HAL_DFSDM_ChannelInit+0x17c>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a3c      	ldr	r2, [pc, #240]	; (800852c <HAL_DFSDM_ChannelInit+0x17c>)
 800843a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800843e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800844e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	6819      	ldr	r1, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800845e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8008464:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	430a      	orrs	r2, r1
 800846c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f022 020f 	bic.w	r2, r2, #15
 800847c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6819      	ldr	r1, [r3, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800848c:	431a      	orrs	r2, r3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	430a      	orrs	r2, r1
 8008494:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689a      	ldr	r2, [r3, #8]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80084a4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	6899      	ldr	r1, [r3, #8]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b4:	3b01      	subs	r3, #1
 80084b6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80084b8:	431a      	orrs	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	430a      	orrs	r2, r1
 80084c0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	685a      	ldr	r2, [r3, #4]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f002 0207 	and.w	r2, r2, #7
 80084d0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	6859      	ldr	r1, [r3, #4]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084dc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80084e4:	431a      	orrs	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	430a      	orrs	r2, r1
 80084ec:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80084fc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4618      	mov	r0, r3
 800850c:	f000 f810 	bl	8008530 <DFSDM_GetChannelFromInstance>
 8008510:	4602      	mov	r2, r0
 8008512:	4904      	ldr	r1, [pc, #16]	; (8008524 <HAL_DFSDM_ChannelInit+0x174>)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3708      	adds	r7, #8
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	20000e14 	.word	0x20000e14
 8008528:	20000e10 	.word	0x20000e10
 800852c:	40016000 	.word	0x40016000

08008530 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a1c      	ldr	r2, [pc, #112]	; (80085ac <DFSDM_GetChannelFromInstance+0x7c>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d102      	bne.n	8008546 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8008540:	2300      	movs	r3, #0
 8008542:	60fb      	str	r3, [r7, #12]
 8008544:	e02b      	b.n	800859e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a19      	ldr	r2, [pc, #100]	; (80085b0 <DFSDM_GetChannelFromInstance+0x80>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d102      	bne.n	8008554 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800854e:	2301      	movs	r3, #1
 8008550:	60fb      	str	r3, [r7, #12]
 8008552:	e024      	b.n	800859e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a17      	ldr	r2, [pc, #92]	; (80085b4 <DFSDM_GetChannelFromInstance+0x84>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d102      	bne.n	8008562 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800855c:	2302      	movs	r3, #2
 800855e:	60fb      	str	r3, [r7, #12]
 8008560:	e01d      	b.n	800859e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a14      	ldr	r2, [pc, #80]	; (80085b8 <DFSDM_GetChannelFromInstance+0x88>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d102      	bne.n	8008570 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800856a:	2304      	movs	r3, #4
 800856c:	60fb      	str	r3, [r7, #12]
 800856e:	e016      	b.n	800859e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a12      	ldr	r2, [pc, #72]	; (80085bc <DFSDM_GetChannelFromInstance+0x8c>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d102      	bne.n	800857e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8008578:	2305      	movs	r3, #5
 800857a:	60fb      	str	r3, [r7, #12]
 800857c:	e00f      	b.n	800859e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a0f      	ldr	r2, [pc, #60]	; (80085c0 <DFSDM_GetChannelFromInstance+0x90>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d102      	bne.n	800858c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8008586:	2306      	movs	r3, #6
 8008588:	60fb      	str	r3, [r7, #12]
 800858a:	e008      	b.n	800859e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a0d      	ldr	r2, [pc, #52]	; (80085c4 <DFSDM_GetChannelFromInstance+0x94>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d102      	bne.n	800859a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8008594:	2307      	movs	r3, #7
 8008596:	60fb      	str	r3, [r7, #12]
 8008598:	e001      	b.n	800859e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800859a:	2303      	movs	r3, #3
 800859c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800859e:	68fb      	ldr	r3, [r7, #12]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr
 80085ac:	40016000 	.word	0x40016000
 80085b0:	40016020 	.word	0x40016020
 80085b4:	40016040 	.word	0x40016040
 80085b8:	40016080 	.word	0x40016080
 80085bc:	400160a0 	.word	0x400160a0
 80085c0:	400160c0 	.word	0x400160c0
 80085c4:	400160e0 	.word	0x400160e0

080085c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b087      	sub	sp, #28
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80085d2:	2300      	movs	r3, #0
 80085d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80085d6:	e166      	b.n	80088a6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	2101      	movs	r1, #1
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	fa01 f303 	lsl.w	r3, r1, r3
 80085e4:	4013      	ands	r3, r2
 80085e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f000 8158 	beq.w	80088a0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	f003 0303 	and.w	r3, r3, #3
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d005      	beq.n	8008608 <HAL_GPIO_Init+0x40>
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	f003 0303 	and.w	r3, r3, #3
 8008604:	2b02      	cmp	r3, #2
 8008606:	d130      	bne.n	800866a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	005b      	lsls	r3, r3, #1
 8008612:	2203      	movs	r2, #3
 8008614:	fa02 f303 	lsl.w	r3, r2, r3
 8008618:	43db      	mvns	r3, r3
 800861a:	693a      	ldr	r2, [r7, #16]
 800861c:	4013      	ands	r3, r2
 800861e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	68da      	ldr	r2, [r3, #12]
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	005b      	lsls	r3, r3, #1
 8008628:	fa02 f303 	lsl.w	r3, r2, r3
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	4313      	orrs	r3, r2
 8008630:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	693a      	ldr	r2, [r7, #16]
 8008636:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800863e:	2201      	movs	r2, #1
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	fa02 f303 	lsl.w	r3, r2, r3
 8008646:	43db      	mvns	r3, r3
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	4013      	ands	r3, r2
 800864c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	091b      	lsrs	r3, r3, #4
 8008654:	f003 0201 	and.w	r2, r3, #1
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	fa02 f303 	lsl.w	r3, r2, r3
 800865e:	693a      	ldr	r2, [r7, #16]
 8008660:	4313      	orrs	r3, r2
 8008662:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	693a      	ldr	r2, [r7, #16]
 8008668:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	f003 0303 	and.w	r3, r3, #3
 8008672:	2b03      	cmp	r3, #3
 8008674:	d017      	beq.n	80086a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	005b      	lsls	r3, r3, #1
 8008680:	2203      	movs	r2, #3
 8008682:	fa02 f303 	lsl.w	r3, r2, r3
 8008686:	43db      	mvns	r3, r3
 8008688:	693a      	ldr	r2, [r7, #16]
 800868a:	4013      	ands	r3, r2
 800868c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	689a      	ldr	r2, [r3, #8]
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	005b      	lsls	r3, r3, #1
 8008696:	fa02 f303 	lsl.w	r3, r2, r3
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	4313      	orrs	r3, r2
 800869e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	693a      	ldr	r2, [r7, #16]
 80086a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	f003 0303 	and.w	r3, r3, #3
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d123      	bne.n	80086fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	08da      	lsrs	r2, r3, #3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	3208      	adds	r2, #8
 80086ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	f003 0307 	and.w	r3, r3, #7
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	220f      	movs	r2, #15
 80086ca:	fa02 f303 	lsl.w	r3, r2, r3
 80086ce:	43db      	mvns	r3, r3
 80086d0:	693a      	ldr	r2, [r7, #16]
 80086d2:	4013      	ands	r3, r2
 80086d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	691a      	ldr	r2, [r3, #16]
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f003 0307 	and.w	r3, r3, #7
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	fa02 f303 	lsl.w	r3, r2, r3
 80086e6:	693a      	ldr	r2, [r7, #16]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	08da      	lsrs	r2, r3, #3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	3208      	adds	r2, #8
 80086f4:	6939      	ldr	r1, [r7, #16]
 80086f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	005b      	lsls	r3, r3, #1
 8008704:	2203      	movs	r2, #3
 8008706:	fa02 f303 	lsl.w	r3, r2, r3
 800870a:	43db      	mvns	r3, r3
 800870c:	693a      	ldr	r2, [r7, #16]
 800870e:	4013      	ands	r3, r2
 8008710:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f003 0203 	and.w	r2, r3, #3
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	005b      	lsls	r3, r3, #1
 800871e:	fa02 f303 	lsl.w	r3, r2, r3
 8008722:	693a      	ldr	r2, [r7, #16]
 8008724:	4313      	orrs	r3, r2
 8008726:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	693a      	ldr	r2, [r7, #16]
 800872c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008736:	2b00      	cmp	r3, #0
 8008738:	f000 80b2 	beq.w	80088a0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800873c:	4b61      	ldr	r3, [pc, #388]	; (80088c4 <HAL_GPIO_Init+0x2fc>)
 800873e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008740:	4a60      	ldr	r2, [pc, #384]	; (80088c4 <HAL_GPIO_Init+0x2fc>)
 8008742:	f043 0301 	orr.w	r3, r3, #1
 8008746:	6613      	str	r3, [r2, #96]	; 0x60
 8008748:	4b5e      	ldr	r3, [pc, #376]	; (80088c4 <HAL_GPIO_Init+0x2fc>)
 800874a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800874c:	f003 0301 	and.w	r3, r3, #1
 8008750:	60bb      	str	r3, [r7, #8]
 8008752:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008754:	4a5c      	ldr	r2, [pc, #368]	; (80088c8 <HAL_GPIO_Init+0x300>)
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	089b      	lsrs	r3, r3, #2
 800875a:	3302      	adds	r3, #2
 800875c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008760:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f003 0303 	and.w	r3, r3, #3
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	220f      	movs	r2, #15
 800876c:	fa02 f303 	lsl.w	r3, r2, r3
 8008770:	43db      	mvns	r3, r3
 8008772:	693a      	ldr	r2, [r7, #16]
 8008774:	4013      	ands	r3, r2
 8008776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800877e:	d02b      	beq.n	80087d8 <HAL_GPIO_Init+0x210>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a52      	ldr	r2, [pc, #328]	; (80088cc <HAL_GPIO_Init+0x304>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d025      	beq.n	80087d4 <HAL_GPIO_Init+0x20c>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a51      	ldr	r2, [pc, #324]	; (80088d0 <HAL_GPIO_Init+0x308>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d01f      	beq.n	80087d0 <HAL_GPIO_Init+0x208>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a50      	ldr	r2, [pc, #320]	; (80088d4 <HAL_GPIO_Init+0x30c>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d019      	beq.n	80087cc <HAL_GPIO_Init+0x204>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a4f      	ldr	r2, [pc, #316]	; (80088d8 <HAL_GPIO_Init+0x310>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d013      	beq.n	80087c8 <HAL_GPIO_Init+0x200>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4a4e      	ldr	r2, [pc, #312]	; (80088dc <HAL_GPIO_Init+0x314>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d00d      	beq.n	80087c4 <HAL_GPIO_Init+0x1fc>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a4d      	ldr	r2, [pc, #308]	; (80088e0 <HAL_GPIO_Init+0x318>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d007      	beq.n	80087c0 <HAL_GPIO_Init+0x1f8>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a4c      	ldr	r2, [pc, #304]	; (80088e4 <HAL_GPIO_Init+0x31c>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d101      	bne.n	80087bc <HAL_GPIO_Init+0x1f4>
 80087b8:	2307      	movs	r3, #7
 80087ba:	e00e      	b.n	80087da <HAL_GPIO_Init+0x212>
 80087bc:	2308      	movs	r3, #8
 80087be:	e00c      	b.n	80087da <HAL_GPIO_Init+0x212>
 80087c0:	2306      	movs	r3, #6
 80087c2:	e00a      	b.n	80087da <HAL_GPIO_Init+0x212>
 80087c4:	2305      	movs	r3, #5
 80087c6:	e008      	b.n	80087da <HAL_GPIO_Init+0x212>
 80087c8:	2304      	movs	r3, #4
 80087ca:	e006      	b.n	80087da <HAL_GPIO_Init+0x212>
 80087cc:	2303      	movs	r3, #3
 80087ce:	e004      	b.n	80087da <HAL_GPIO_Init+0x212>
 80087d0:	2302      	movs	r3, #2
 80087d2:	e002      	b.n	80087da <HAL_GPIO_Init+0x212>
 80087d4:	2301      	movs	r3, #1
 80087d6:	e000      	b.n	80087da <HAL_GPIO_Init+0x212>
 80087d8:	2300      	movs	r3, #0
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	f002 0203 	and.w	r2, r2, #3
 80087e0:	0092      	lsls	r2, r2, #2
 80087e2:	4093      	lsls	r3, r2
 80087e4:	693a      	ldr	r2, [r7, #16]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80087ea:	4937      	ldr	r1, [pc, #220]	; (80088c8 <HAL_GPIO_Init+0x300>)
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	089b      	lsrs	r3, r3, #2
 80087f0:	3302      	adds	r3, #2
 80087f2:	693a      	ldr	r2, [r7, #16]
 80087f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80087f8:	4b3b      	ldr	r3, [pc, #236]	; (80088e8 <HAL_GPIO_Init+0x320>)
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	43db      	mvns	r3, r3
 8008802:	693a      	ldr	r2, [r7, #16]
 8008804:	4013      	ands	r3, r2
 8008806:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008810:	2b00      	cmp	r3, #0
 8008812:	d003      	beq.n	800881c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	4313      	orrs	r3, r2
 800881a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800881c:	4a32      	ldr	r2, [pc, #200]	; (80088e8 <HAL_GPIO_Init+0x320>)
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008822:	4b31      	ldr	r3, [pc, #196]	; (80088e8 <HAL_GPIO_Init+0x320>)
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	43db      	mvns	r3, r3
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	4013      	ands	r3, r2
 8008830:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800883a:	2b00      	cmp	r3, #0
 800883c:	d003      	beq.n	8008846 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800883e:	693a      	ldr	r2, [r7, #16]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	4313      	orrs	r3, r2
 8008844:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008846:	4a28      	ldr	r2, [pc, #160]	; (80088e8 <HAL_GPIO_Init+0x320>)
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800884c:	4b26      	ldr	r3, [pc, #152]	; (80088e8 <HAL_GPIO_Init+0x320>)
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	43db      	mvns	r3, r3
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	4013      	ands	r3, r2
 800885a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d003      	beq.n	8008870 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8008868:	693a      	ldr	r2, [r7, #16]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	4313      	orrs	r3, r2
 800886e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008870:	4a1d      	ldr	r2, [pc, #116]	; (80088e8 <HAL_GPIO_Init+0x320>)
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8008876:	4b1c      	ldr	r3, [pc, #112]	; (80088e8 <HAL_GPIO_Init+0x320>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	43db      	mvns	r3, r3
 8008880:	693a      	ldr	r2, [r7, #16]
 8008882:	4013      	ands	r3, r2
 8008884:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800888e:	2b00      	cmp	r3, #0
 8008890:	d003      	beq.n	800889a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	4313      	orrs	r3, r2
 8008898:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800889a:	4a13      	ldr	r2, [pc, #76]	; (80088e8 <HAL_GPIO_Init+0x320>)
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	3301      	adds	r3, #1
 80088a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	fa22 f303 	lsr.w	r3, r2, r3
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f47f ae91 	bne.w	80085d8 <HAL_GPIO_Init+0x10>
  }
}
 80088b6:	bf00      	nop
 80088b8:	bf00      	nop
 80088ba:	371c      	adds	r7, #28
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr
 80088c4:	40021000 	.word	0x40021000
 80088c8:	40010000 	.word	0x40010000
 80088cc:	48000400 	.word	0x48000400
 80088d0:	48000800 	.word	0x48000800
 80088d4:	48000c00 	.word	0x48000c00
 80088d8:	48001000 	.word	0x48001000
 80088dc:	48001400 	.word	0x48001400
 80088e0:	48001800 	.word	0x48001800
 80088e4:	48001c00 	.word	0x48001c00
 80088e8:	40010400 	.word	0x40010400

080088ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	460b      	mov	r3, r1
 80088f6:	807b      	strh	r3, [r7, #2]
 80088f8:	4613      	mov	r3, r2
 80088fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80088fc:	787b      	ldrb	r3, [r7, #1]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d003      	beq.n	800890a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008902:	887a      	ldrh	r2, [r7, #2]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008908:	e002      	b.n	8008910 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800890a:	887a      	ldrh	r2, [r7, #2]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d101      	bne.n	800892e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	e081      	b.n	8008a32 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	d106      	bne.n	8008948 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7f8 fcfa 	bl	800133c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2224      	movs	r2, #36	; 0x24
 800894c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f022 0201 	bic.w	r2, r2, #1
 800895e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685a      	ldr	r2, [r3, #4]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800896c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	689a      	ldr	r2, [r3, #8]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800897c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d107      	bne.n	8008996 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	689a      	ldr	r2, [r3, #8]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008992:	609a      	str	r2, [r3, #8]
 8008994:	e006      	b.n	80089a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	689a      	ldr	r2, [r3, #8]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80089a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d104      	bne.n	80089b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	6812      	ldr	r2, [r2, #0]
 80089c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80089c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68da      	ldr	r2, [r3, #12]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	691a      	ldr	r2, [r3, #16]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	699b      	ldr	r3, [r3, #24]
 80089ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	430a      	orrs	r2, r1
 80089f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	69d9      	ldr	r1, [r3, #28]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a1a      	ldr	r2, [r3, #32]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	430a      	orrs	r2, r1
 8008a02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f042 0201 	orr.w	r2, r2, #1
 8008a12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2220      	movs	r2, #32
 8008a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
	...

08008a3c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b088      	sub	sp, #32
 8008a40:	af02      	add	r7, sp, #8
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	607a      	str	r2, [r7, #4]
 8008a46:	461a      	mov	r2, r3
 8008a48:	460b      	mov	r3, r1
 8008a4a:	817b      	strh	r3, [r7, #10]
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	2b20      	cmp	r3, #32
 8008a5a:	f040 80da 	bne.w	8008c12 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d101      	bne.n	8008a6c <HAL_I2C_Master_Transmit+0x30>
 8008a68:	2302      	movs	r3, #2
 8008a6a:	e0d3      	b.n	8008c14 <HAL_I2C_Master_Transmit+0x1d8>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008a74:	f7fe faf8 	bl	8007068 <HAL_GetTick>
 8008a78:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	9300      	str	r3, [sp, #0]
 8008a7e:	2319      	movs	r3, #25
 8008a80:	2201      	movs	r2, #1
 8008a82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f000 fb54 	bl	8009134 <I2C_WaitOnFlagUntilTimeout>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e0be      	b.n	8008c14 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2221      	movs	r2, #33	; 0x21
 8008a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2210      	movs	r2, #16
 8008aa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	893a      	ldrh	r2, [r7, #8]
 8008ab6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2200      	movs	r2, #0
 8008abc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	2bff      	cmp	r3, #255	; 0xff
 8008ac6:	d90e      	bls.n	8008ae6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	22ff      	movs	r2, #255	; 0xff
 8008acc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ad2:	b2da      	uxtb	r2, r3
 8008ad4:	8979      	ldrh	r1, [r7, #10]
 8008ad6:	4b51      	ldr	r3, [pc, #324]	; (8008c1c <HAL_I2C_Master_Transmit+0x1e0>)
 8008ad8:	9300      	str	r3, [sp, #0]
 8008ada:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f000 fd4a 	bl	8009578 <I2C_TransferConfig>
 8008ae4:	e06c      	b.n	8008bc0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	8979      	ldrh	r1, [r7, #10]
 8008af8:	4b48      	ldr	r3, [pc, #288]	; (8008c1c <HAL_I2C_Master_Transmit+0x1e0>)
 8008afa:	9300      	str	r3, [sp, #0]
 8008afc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f000 fd39 	bl	8009578 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008b06:	e05b      	b.n	8008bc0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	6a39      	ldr	r1, [r7, #32]
 8008b0c:	68f8      	ldr	r0, [r7, #12]
 8008b0e:	f000 fb51 	bl	80091b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d001      	beq.n	8008b1c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e07b      	b.n	8008c14 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b20:	781a      	ldrb	r2, [r3, #0]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2c:	1c5a      	adds	r2, r3, #1
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b44:	3b01      	subs	r3, #1
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d034      	beq.n	8008bc0 <HAL_I2C_Master_Transmit+0x184>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d130      	bne.n	8008bc0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	9300      	str	r3, [sp, #0]
 8008b62:	6a3b      	ldr	r3, [r7, #32]
 8008b64:	2200      	movs	r2, #0
 8008b66:	2180      	movs	r1, #128	; 0x80
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f000 fae3 	bl	8009134 <I2C_WaitOnFlagUntilTimeout>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d001      	beq.n	8008b78 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e04d      	b.n	8008c14 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	2bff      	cmp	r3, #255	; 0xff
 8008b80:	d90e      	bls.n	8008ba0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	22ff      	movs	r2, #255	; 0xff
 8008b86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b8c:	b2da      	uxtb	r2, r3
 8008b8e:	8979      	ldrh	r1, [r7, #10]
 8008b90:	2300      	movs	r3, #0
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 fced 	bl	8009578 <I2C_TransferConfig>
 8008b9e:	e00f      	b.n	8008bc0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bae:	b2da      	uxtb	r2, r3
 8008bb0:	8979      	ldrh	r1, [r7, #10]
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f000 fcdc 	bl	8009578 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d19e      	bne.n	8008b08 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	6a39      	ldr	r1, [r7, #32]
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f000 fb30 	bl	8009234 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d001      	beq.n	8008bde <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e01a      	b.n	8008c14 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2220      	movs	r2, #32
 8008be4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	6859      	ldr	r1, [r3, #4]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	4b0b      	ldr	r3, [pc, #44]	; (8008c20 <HAL_I2C_Master_Transmit+0x1e4>)
 8008bf2:	400b      	ands	r3, r1
 8008bf4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2220      	movs	r2, #32
 8008bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	e000      	b.n	8008c14 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8008c12:	2302      	movs	r3, #2
  }
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3718      	adds	r7, #24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	80002000 	.word	0x80002000
 8008c20:	fe00e800 	.word	0xfe00e800

08008c24 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b088      	sub	sp, #32
 8008c28:	af02      	add	r7, sp, #8
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	607a      	str	r2, [r7, #4]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	460b      	mov	r3, r1
 8008c32:	817b      	strh	r3, [r7, #10]
 8008c34:	4613      	mov	r3, r2
 8008c36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	2b20      	cmp	r3, #32
 8008c42:	f040 80db 	bne.w	8008dfc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d101      	bne.n	8008c54 <HAL_I2C_Master_Receive+0x30>
 8008c50:	2302      	movs	r3, #2
 8008c52:	e0d4      	b.n	8008dfe <HAL_I2C_Master_Receive+0x1da>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008c5c:	f7fe fa04 	bl	8007068 <HAL_GetTick>
 8008c60:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	9300      	str	r3, [sp, #0]
 8008c66:	2319      	movs	r3, #25
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f000 fa60 	bl	8009134 <I2C_WaitOnFlagUntilTimeout>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e0bf      	b.n	8008dfe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2222      	movs	r2, #34	; 0x22
 8008c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2210      	movs	r2, #16
 8008c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2200      	movs	r2, #0
 8008c92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	893a      	ldrh	r2, [r7, #8]
 8008c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	2bff      	cmp	r3, #255	; 0xff
 8008cae:	d90e      	bls.n	8008cce <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	22ff      	movs	r2, #255	; 0xff
 8008cb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cba:	b2da      	uxtb	r2, r3
 8008cbc:	8979      	ldrh	r1, [r7, #10]
 8008cbe:	4b52      	ldr	r3, [pc, #328]	; (8008e08 <HAL_I2C_Master_Receive+0x1e4>)
 8008cc0:	9300      	str	r3, [sp, #0]
 8008cc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f000 fc56 	bl	8009578 <I2C_TransferConfig>
 8008ccc:	e06d      	b.n	8008daa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cdc:	b2da      	uxtb	r2, r3
 8008cde:	8979      	ldrh	r1, [r7, #10]
 8008ce0:	4b49      	ldr	r3, [pc, #292]	; (8008e08 <HAL_I2C_Master_Receive+0x1e4>)
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f000 fc45 	bl	8009578 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008cee:	e05c      	b.n	8008daa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008cf0:	697a      	ldr	r2, [r7, #20]
 8008cf2:	6a39      	ldr	r1, [r7, #32]
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f000 fad9 	bl	80092ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d001      	beq.n	8008d04 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	e07c      	b.n	8008dfe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0e:	b2d2      	uxtb	r2, r2
 8008d10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d16:	1c5a      	adds	r2, r3, #1
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d20:	3b01      	subs	r3, #1
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	b29a      	uxth	r2, r3
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d034      	beq.n	8008daa <HAL_I2C_Master_Receive+0x186>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d130      	bne.n	8008daa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	6a3b      	ldr	r3, [r7, #32]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	2180      	movs	r1, #128	; 0x80
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f000 f9ee 	bl	8009134 <I2C_WaitOnFlagUntilTimeout>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e04d      	b.n	8008dfe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	2bff      	cmp	r3, #255	; 0xff
 8008d6a:	d90e      	bls.n	8008d8a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	22ff      	movs	r2, #255	; 0xff
 8008d70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	8979      	ldrh	r1, [r7, #10]
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f000 fbf8 	bl	8009578 <I2C_TransferConfig>
 8008d88:	e00f      	b.n	8008daa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	8979      	ldrh	r1, [r7, #10]
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008da4:	68f8      	ldr	r0, [r7, #12]
 8008da6:	f000 fbe7 	bl	8009578 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d19d      	bne.n	8008cf0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008db4:	697a      	ldr	r2, [r7, #20]
 8008db6:	6a39      	ldr	r1, [r7, #32]
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f000 fa3b 	bl	8009234 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d001      	beq.n	8008dc8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e01a      	b.n	8008dfe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2220      	movs	r2, #32
 8008dce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6859      	ldr	r1, [r3, #4]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	4b0c      	ldr	r3, [pc, #48]	; (8008e0c <HAL_I2C_Master_Receive+0x1e8>)
 8008ddc:	400b      	ands	r3, r1
 8008dde:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2220      	movs	r2, #32
 8008de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	e000      	b.n	8008dfe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008dfc:	2302      	movs	r3, #2
  }
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3718      	adds	r7, #24
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	80002400 	.word	0x80002400
 8008e0c:	fe00e800 	.word	0xfe00e800

08008e10 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b088      	sub	sp, #32
 8008e14:	af02      	add	r7, sp, #8
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	4608      	mov	r0, r1
 8008e1a:	4611      	mov	r1, r2
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	4603      	mov	r3, r0
 8008e20:	817b      	strh	r3, [r7, #10]
 8008e22:	460b      	mov	r3, r1
 8008e24:	813b      	strh	r3, [r7, #8]
 8008e26:	4613      	mov	r3, r2
 8008e28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	2b20      	cmp	r3, #32
 8008e34:	f040 80fd 	bne.w	8009032 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d002      	beq.n	8008e44 <HAL_I2C_Mem_Read+0x34>
 8008e3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d105      	bne.n	8008e50 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e4a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e0f1      	b.n	8009034 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d101      	bne.n	8008e5e <HAL_I2C_Mem_Read+0x4e>
 8008e5a:	2302      	movs	r3, #2
 8008e5c:	e0ea      	b.n	8009034 <HAL_I2C_Mem_Read+0x224>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008e66:	f7fe f8ff 	bl	8007068 <HAL_GetTick>
 8008e6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	2319      	movs	r3, #25
 8008e72:	2201      	movs	r2, #1
 8008e74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f000 f95b 	bl	8009134 <I2C_WaitOnFlagUntilTimeout>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d001      	beq.n	8008e88 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	e0d5      	b.n	8009034 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2222      	movs	r2, #34	; 0x22
 8008e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2240      	movs	r2, #64	; 0x40
 8008e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6a3a      	ldr	r2, [r7, #32]
 8008ea2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2200      	movs	r2, #0
 8008eae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008eb0:	88f8      	ldrh	r0, [r7, #6]
 8008eb2:	893a      	ldrh	r2, [r7, #8]
 8008eb4:	8979      	ldrh	r1, [r7, #10]
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	9301      	str	r3, [sp, #4]
 8008eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ebc:	9300      	str	r3, [sp, #0]
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f000 f8bf 	bl	8009044 <I2C_RequestMemoryRead>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d005      	beq.n	8008ed8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e0ad      	b.n	8009034 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	2bff      	cmp	r3, #255	; 0xff
 8008ee0:	d90e      	bls.n	8008f00 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	22ff      	movs	r2, #255	; 0xff
 8008ee6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eec:	b2da      	uxtb	r2, r3
 8008eee:	8979      	ldrh	r1, [r7, #10]
 8008ef0:	4b52      	ldr	r3, [pc, #328]	; (800903c <HAL_I2C_Mem_Read+0x22c>)
 8008ef2:	9300      	str	r3, [sp, #0]
 8008ef4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f000 fb3d 	bl	8009578 <I2C_TransferConfig>
 8008efe:	e00f      	b.n	8008f20 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f04:	b29a      	uxth	r2, r3
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f0e:	b2da      	uxtb	r2, r3
 8008f10:	8979      	ldrh	r1, [r7, #10]
 8008f12:	4b4a      	ldr	r3, [pc, #296]	; (800903c <HAL_I2C_Mem_Read+0x22c>)
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f000 fb2c 	bl	8009578 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f26:	2200      	movs	r2, #0
 8008f28:	2104      	movs	r1, #4
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f000 f902 	bl	8009134 <I2C_WaitOnFlagUntilTimeout>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e07c      	b.n	8009034 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f44:	b2d2      	uxtb	r2, r2
 8008f46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4c:	1c5a      	adds	r2, r3, #1
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f56:	3b01      	subs	r3, #1
 8008f58:	b29a      	uxth	r2, r3
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	3b01      	subs	r3, #1
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d034      	beq.n	8008fe0 <HAL_I2C_Mem_Read+0x1d0>
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d130      	bne.n	8008fe0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	9300      	str	r3, [sp, #0]
 8008f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f84:	2200      	movs	r2, #0
 8008f86:	2180      	movs	r1, #128	; 0x80
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f000 f8d3 	bl	8009134 <I2C_WaitOnFlagUntilTimeout>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d001      	beq.n	8008f98 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e04d      	b.n	8009034 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	2bff      	cmp	r3, #255	; 0xff
 8008fa0:	d90e      	bls.n	8008fc0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	22ff      	movs	r2, #255	; 0xff
 8008fa6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fac:	b2da      	uxtb	r2, r3
 8008fae:	8979      	ldrh	r1, [r7, #10]
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f000 fadd 	bl	8009578 <I2C_TransferConfig>
 8008fbe:	e00f      	b.n	8008fe0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fc4:	b29a      	uxth	r2, r3
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fce:	b2da      	uxtb	r2, r3
 8008fd0:	8979      	ldrh	r1, [r7, #10]
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f000 facc 	bl	8009578 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d19a      	bne.n	8008f20 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fea:	697a      	ldr	r2, [r7, #20]
 8008fec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f000 f920 	bl	8009234 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e01a      	b.n	8009034 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2220      	movs	r2, #32
 8009004:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6859      	ldr	r1, [r3, #4]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	4b0b      	ldr	r3, [pc, #44]	; (8009040 <HAL_I2C_Mem_Read+0x230>)
 8009012:	400b      	ands	r3, r1
 8009014:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2220      	movs	r2, #32
 800901a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2200      	movs	r2, #0
 800902a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800902e:	2300      	movs	r3, #0
 8009030:	e000      	b.n	8009034 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009032:	2302      	movs	r3, #2
  }
}
 8009034:	4618      	mov	r0, r3
 8009036:	3718      	adds	r7, #24
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	80002400 	.word	0x80002400
 8009040:	fe00e800 	.word	0xfe00e800

08009044 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af02      	add	r7, sp, #8
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	4608      	mov	r0, r1
 800904e:	4611      	mov	r1, r2
 8009050:	461a      	mov	r2, r3
 8009052:	4603      	mov	r3, r0
 8009054:	817b      	strh	r3, [r7, #10]
 8009056:	460b      	mov	r3, r1
 8009058:	813b      	strh	r3, [r7, #8]
 800905a:	4613      	mov	r3, r2
 800905c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800905e:	88fb      	ldrh	r3, [r7, #6]
 8009060:	b2da      	uxtb	r2, r3
 8009062:	8979      	ldrh	r1, [r7, #10]
 8009064:	4b20      	ldr	r3, [pc, #128]	; (80090e8 <I2C_RequestMemoryRead+0xa4>)
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	2300      	movs	r3, #0
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f000 fa84 	bl	8009578 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009070:	69fa      	ldr	r2, [r7, #28]
 8009072:	69b9      	ldr	r1, [r7, #24]
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f000 f89d 	bl	80091b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d001      	beq.n	8009084 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	e02c      	b.n	80090de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009084:	88fb      	ldrh	r3, [r7, #6]
 8009086:	2b01      	cmp	r3, #1
 8009088:	d105      	bne.n	8009096 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800908a:	893b      	ldrh	r3, [r7, #8]
 800908c:	b2da      	uxtb	r2, r3
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	629a      	str	r2, [r3, #40]	; 0x28
 8009094:	e015      	b.n	80090c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009096:	893b      	ldrh	r3, [r7, #8]
 8009098:	0a1b      	lsrs	r3, r3, #8
 800909a:	b29b      	uxth	r3, r3
 800909c:	b2da      	uxtb	r2, r3
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80090a4:	69fa      	ldr	r2, [r7, #28]
 80090a6:	69b9      	ldr	r1, [r7, #24]
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f000 f883 	bl	80091b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	e012      	b.n	80090de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80090b8:	893b      	ldrh	r3, [r7, #8]
 80090ba:	b2da      	uxtb	r2, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	9300      	str	r3, [sp, #0]
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	2200      	movs	r2, #0
 80090ca:	2140      	movs	r1, #64	; 0x40
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f000 f831 	bl	8009134 <I2C_WaitOnFlagUntilTimeout>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d001      	beq.n	80090dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	e000      	b.n	80090de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	80002000 	.word	0x80002000

080090ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	699b      	ldr	r3, [r3, #24]
 80090fa:	f003 0302 	and.w	r3, r3, #2
 80090fe:	2b02      	cmp	r3, #2
 8009100:	d103      	bne.n	800910a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2200      	movs	r2, #0
 8009108:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	699b      	ldr	r3, [r3, #24]
 8009110:	f003 0301 	and.w	r3, r3, #1
 8009114:	2b01      	cmp	r3, #1
 8009116:	d007      	beq.n	8009128 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	699a      	ldr	r2, [r3, #24]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f042 0201 	orr.w	r2, r2, #1
 8009126:	619a      	str	r2, [r3, #24]
  }
}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	603b      	str	r3, [r7, #0]
 8009140:	4613      	mov	r3, r2
 8009142:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009144:	e022      	b.n	800918c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800914c:	d01e      	beq.n	800918c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800914e:	f7fd ff8b 	bl	8007068 <HAL_GetTick>
 8009152:	4602      	mov	r2, r0
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	1ad3      	subs	r3, r2, r3
 8009158:	683a      	ldr	r2, [r7, #0]
 800915a:	429a      	cmp	r2, r3
 800915c:	d302      	bcc.n	8009164 <I2C_WaitOnFlagUntilTimeout+0x30>
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d113      	bne.n	800918c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009168:	f043 0220 	orr.w	r2, r3, #32
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2220      	movs	r2, #32
 8009174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2200      	movs	r2, #0
 800917c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e00f      	b.n	80091ac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	699a      	ldr	r2, [r3, #24]
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	4013      	ands	r3, r2
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	429a      	cmp	r2, r3
 800919a:	bf0c      	ite	eq
 800919c:	2301      	moveq	r3, #1
 800919e:	2300      	movne	r3, #0
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	461a      	mov	r2, r3
 80091a4:	79fb      	ldrb	r3, [r7, #7]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d0cd      	beq.n	8009146 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3710      	adds	r7, #16
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80091c0:	e02c      	b.n	800921c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	68b9      	ldr	r1, [r7, #8]
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f000 f8ea 	bl	80093a0 <I2C_IsErrorOccurred>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d001      	beq.n	80091d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e02a      	b.n	800922c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091dc:	d01e      	beq.n	800921c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091de:	f7fd ff43 	bl	8007068 <HAL_GetTick>
 80091e2:	4602      	mov	r2, r0
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d302      	bcc.n	80091f4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d113      	bne.n	800921c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091f8:	f043 0220 	orr.w	r2, r3, #32
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2220      	movs	r2, #32
 8009204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2200      	movs	r2, #0
 800920c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009218:	2301      	movs	r3, #1
 800921a:	e007      	b.n	800922c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	699b      	ldr	r3, [r3, #24]
 8009222:	f003 0302 	and.w	r3, r3, #2
 8009226:	2b02      	cmp	r3, #2
 8009228:	d1cb      	bne.n	80091c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009240:	e028      	b.n	8009294 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	68b9      	ldr	r1, [r7, #8]
 8009246:	68f8      	ldr	r0, [r7, #12]
 8009248:	f000 f8aa 	bl	80093a0 <I2C_IsErrorOccurred>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d001      	beq.n	8009256 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e026      	b.n	80092a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009256:	f7fd ff07 	bl	8007068 <HAL_GetTick>
 800925a:	4602      	mov	r2, r0
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	1ad3      	subs	r3, r2, r3
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	429a      	cmp	r2, r3
 8009264:	d302      	bcc.n	800926c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d113      	bne.n	8009294 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009270:	f043 0220 	orr.w	r2, r3, #32
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2220      	movs	r2, #32
 800927c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2200      	movs	r2, #0
 8009284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	e007      	b.n	80092a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	f003 0320 	and.w	r3, r3, #32
 800929e:	2b20      	cmp	r3, #32
 80092a0:	d1cf      	bne.n	8009242 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80092b8:	e064      	b.n	8009384 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	68b9      	ldr	r1, [r7, #8]
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	f000 f86e 	bl	80093a0 <I2C_IsErrorOccurred>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d001      	beq.n	80092ce <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e062      	b.n	8009394 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	f003 0320 	and.w	r3, r3, #32
 80092d8:	2b20      	cmp	r3, #32
 80092da:	d138      	bne.n	800934e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	699b      	ldr	r3, [r3, #24]
 80092e2:	f003 0304 	and.w	r3, r3, #4
 80092e6:	2b04      	cmp	r3, #4
 80092e8:	d105      	bne.n	80092f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d001      	beq.n	80092f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	e04e      	b.n	8009394 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	699b      	ldr	r3, [r3, #24]
 80092fc:	f003 0310 	and.w	r3, r3, #16
 8009300:	2b10      	cmp	r3, #16
 8009302:	d107      	bne.n	8009314 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2210      	movs	r2, #16
 800930a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2204      	movs	r2, #4
 8009310:	645a      	str	r2, [r3, #68]	; 0x44
 8009312:	e002      	b.n	800931a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2220      	movs	r2, #32
 8009320:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	6859      	ldr	r1, [r3, #4]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	4b1b      	ldr	r3, [pc, #108]	; (800939c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800932e:	400b      	ands	r3, r1
 8009330:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2220      	movs	r2, #32
 8009336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2200      	movs	r2, #0
 800933e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	e022      	b.n	8009394 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800934e:	f7fd fe8b 	bl	8007068 <HAL_GetTick>
 8009352:	4602      	mov	r2, r0
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	1ad3      	subs	r3, r2, r3
 8009358:	68ba      	ldr	r2, [r7, #8]
 800935a:	429a      	cmp	r2, r3
 800935c:	d302      	bcc.n	8009364 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d10f      	bne.n	8009384 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009368:	f043 0220 	orr.w	r2, r3, #32
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2220      	movs	r2, #32
 8009374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	e007      	b.n	8009394 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	699b      	ldr	r3, [r3, #24]
 800938a:	f003 0304 	and.w	r3, r3, #4
 800938e:	2b04      	cmp	r3, #4
 8009390:	d193      	bne.n	80092ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	fe00e800 	.word	0xfe00e800

080093a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b08a      	sub	sp, #40	; 0x28
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80093ba:	2300      	movs	r3, #0
 80093bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	f003 0310 	and.w	r3, r3, #16
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d075      	beq.n	80094b8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2210      	movs	r2, #16
 80093d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80093d4:	e056      	b.n	8009484 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093dc:	d052      	beq.n	8009484 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80093de:	f7fd fe43 	bl	8007068 <HAL_GetTick>
 80093e2:	4602      	mov	r2, r0
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	1ad3      	subs	r3, r2, r3
 80093e8:	68ba      	ldr	r2, [r7, #8]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d302      	bcc.n	80093f4 <I2C_IsErrorOccurred+0x54>
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d147      	bne.n	8009484 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009406:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	699b      	ldr	r3, [r3, #24]
 800940e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009416:	d12e      	bne.n	8009476 <I2C_IsErrorOccurred+0xd6>
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800941e:	d02a      	beq.n	8009476 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8009420:	7cfb      	ldrb	r3, [r7, #19]
 8009422:	2b20      	cmp	r3, #32
 8009424:	d027      	beq.n	8009476 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	685a      	ldr	r2, [r3, #4]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009434:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009436:	f7fd fe17 	bl	8007068 <HAL_GetTick>
 800943a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800943c:	e01b      	b.n	8009476 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800943e:	f7fd fe13 	bl	8007068 <HAL_GetTick>
 8009442:	4602      	mov	r2, r0
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	2b19      	cmp	r3, #25
 800944a:	d914      	bls.n	8009476 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009450:	f043 0220 	orr.w	r2, r3, #32
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2220      	movs	r2, #32
 800945c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2200      	movs	r2, #0
 8009464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2200      	movs	r2, #0
 800946c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	699b      	ldr	r3, [r3, #24]
 800947c:	f003 0320 	and.w	r3, r3, #32
 8009480:	2b20      	cmp	r3, #32
 8009482:	d1dc      	bne.n	800943e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	f003 0320 	and.w	r3, r3, #32
 800948e:	2b20      	cmp	r3, #32
 8009490:	d003      	beq.n	800949a <I2C_IsErrorOccurred+0xfa>
 8009492:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009496:	2b00      	cmp	r3, #0
 8009498:	d09d      	beq.n	80093d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800949a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d103      	bne.n	80094aa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2220      	movs	r2, #32
 80094a8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80094aa:	6a3b      	ldr	r3, [r7, #32]
 80094ac:	f043 0304 	orr.w	r3, r3, #4
 80094b0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	699b      	ldr	r3, [r3, #24]
 80094be:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00b      	beq.n	80094e2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80094ca:	6a3b      	ldr	r3, [r7, #32]
 80094cc:	f043 0301 	orr.w	r3, r3, #1
 80094d0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80094da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00b      	beq.n	8009504 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80094ec:	6a3b      	ldr	r3, [r7, #32]
 80094ee:	f043 0308 	orr.w	r3, r3, #8
 80094f2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80094fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800950a:	2b00      	cmp	r3, #0
 800950c:	d00b      	beq.n	8009526 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800950e:	6a3b      	ldr	r3, [r7, #32]
 8009510:	f043 0302 	orr.w	r3, r3, #2
 8009514:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800951e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009526:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800952a:	2b00      	cmp	r3, #0
 800952c:	d01c      	beq.n	8009568 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	f7ff fddc 	bl	80090ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	6859      	ldr	r1, [r3, #4]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	4b0d      	ldr	r3, [pc, #52]	; (8009574 <I2C_IsErrorOccurred+0x1d4>)
 8009540:	400b      	ands	r3, r1
 8009542:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009548:	6a3b      	ldr	r3, [r7, #32]
 800954a:	431a      	orrs	r2, r3
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2220      	movs	r2, #32
 8009554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2200      	movs	r2, #0
 800955c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800956c:	4618      	mov	r0, r3
 800956e:	3728      	adds	r7, #40	; 0x28
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	fe00e800 	.word	0xfe00e800

08009578 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009578:	b480      	push	{r7}
 800957a:	b087      	sub	sp, #28
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	607b      	str	r3, [r7, #4]
 8009582:	460b      	mov	r3, r1
 8009584:	817b      	strh	r3, [r7, #10]
 8009586:	4613      	mov	r3, r2
 8009588:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800958a:	897b      	ldrh	r3, [r7, #10]
 800958c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009590:	7a7b      	ldrb	r3, [r7, #9]
 8009592:	041b      	lsls	r3, r3, #16
 8009594:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009598:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800959e:	6a3b      	ldr	r3, [r7, #32]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095a6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	685a      	ldr	r2, [r3, #4]
 80095ae:	6a3b      	ldr	r3, [r7, #32]
 80095b0:	0d5b      	lsrs	r3, r3, #21
 80095b2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80095b6:	4b08      	ldr	r3, [pc, #32]	; (80095d8 <I2C_TransferConfig+0x60>)
 80095b8:	430b      	orrs	r3, r1
 80095ba:	43db      	mvns	r3, r3
 80095bc:	ea02 0103 	and.w	r1, r2, r3
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	697a      	ldr	r2, [r7, #20]
 80095c6:	430a      	orrs	r2, r1
 80095c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80095ca:	bf00      	nop
 80095cc:	371c      	adds	r7, #28
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop
 80095d8:	03ff63ff 	.word	0x03ff63ff

080095dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	2b20      	cmp	r3, #32
 80095f0:	d138      	bne.n	8009664 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d101      	bne.n	8009600 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80095fc:	2302      	movs	r3, #2
 80095fe:	e032      	b.n	8009666 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2224      	movs	r2, #36	; 0x24
 800960c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f022 0201 	bic.w	r2, r2, #1
 800961e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800962e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6819      	ldr	r1, [r3, #0]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	683a      	ldr	r2, [r7, #0]
 800963c:	430a      	orrs	r2, r1
 800963e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f042 0201 	orr.w	r2, r2, #1
 800964e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2220      	movs	r2, #32
 8009654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	e000      	b.n	8009666 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009664:	2302      	movs	r3, #2
  }
}
 8009666:	4618      	mov	r0, r3
 8009668:	370c      	adds	r7, #12
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr

08009672 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009672:	b480      	push	{r7}
 8009674:	b085      	sub	sp, #20
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
 800967a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009682:	b2db      	uxtb	r3, r3
 8009684:	2b20      	cmp	r3, #32
 8009686:	d139      	bne.n	80096fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800968e:	2b01      	cmp	r3, #1
 8009690:	d101      	bne.n	8009696 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009692:	2302      	movs	r3, #2
 8009694:	e033      	b.n	80096fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2201      	movs	r2, #1
 800969a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2224      	movs	r2, #36	; 0x24
 80096a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f022 0201 	bic.w	r2, r2, #1
 80096b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80096c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	021b      	lsls	r3, r3, #8
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f042 0201 	orr.w	r2, r2, #1
 80096e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2220      	movs	r2, #32
 80096ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80096f8:	2300      	movs	r3, #0
 80096fa:	e000      	b.n	80096fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80096fc:	2302      	movs	r3, #2
  }
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3714      	adds	r7, #20
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr

0800970a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800970a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800970c:	b08f      	sub	sp, #60	; 0x3c
 800970e:	af0a      	add	r7, sp, #40	; 0x28
 8009710:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d101      	bne.n	800971c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e116      	b.n	800994a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009728:	b2db      	uxtb	r3, r3
 800972a:	2b00      	cmp	r3, #0
 800972c:	d106      	bne.n	800973c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f008 f9d4 	bl	8011ae4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2203      	movs	r2, #3
 8009740:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800974c:	2b00      	cmp	r3, #0
 800974e:	d102      	bne.n	8009756 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4618      	mov	r0, r3
 800975c:	f005 f8e3 	bl	800e926 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	603b      	str	r3, [r7, #0]
 8009766:	687e      	ldr	r6, [r7, #4]
 8009768:	466d      	mov	r5, sp
 800976a:	f106 0410 	add.w	r4, r6, #16
 800976e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009770:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009772:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009774:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009776:	e894 0003 	ldmia.w	r4, {r0, r1}
 800977a:	e885 0003 	stmia.w	r5, {r0, r1}
 800977e:	1d33      	adds	r3, r6, #4
 8009780:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009782:	6838      	ldr	r0, [r7, #0]
 8009784:	f004 fff6 	bl	800e774 <USB_CoreInit>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d005      	beq.n	800979a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2202      	movs	r2, #2
 8009792:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	e0d7      	b.n	800994a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2100      	movs	r1, #0
 80097a0:	4618      	mov	r0, r3
 80097a2:	f005 f8d1 	bl	800e948 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80097a6:	2300      	movs	r3, #0
 80097a8:	73fb      	strb	r3, [r7, #15]
 80097aa:	e04a      	b.n	8009842 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80097ac:	7bfa      	ldrb	r2, [r7, #15]
 80097ae:	6879      	ldr	r1, [r7, #4]
 80097b0:	4613      	mov	r3, r2
 80097b2:	00db      	lsls	r3, r3, #3
 80097b4:	4413      	add	r3, r2
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	440b      	add	r3, r1
 80097ba:	333d      	adds	r3, #61	; 0x3d
 80097bc:	2201      	movs	r2, #1
 80097be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80097c0:	7bfa      	ldrb	r2, [r7, #15]
 80097c2:	6879      	ldr	r1, [r7, #4]
 80097c4:	4613      	mov	r3, r2
 80097c6:	00db      	lsls	r3, r3, #3
 80097c8:	4413      	add	r3, r2
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	440b      	add	r3, r1
 80097ce:	333c      	adds	r3, #60	; 0x3c
 80097d0:	7bfa      	ldrb	r2, [r7, #15]
 80097d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80097d4:	7bfa      	ldrb	r2, [r7, #15]
 80097d6:	7bfb      	ldrb	r3, [r7, #15]
 80097d8:	b298      	uxth	r0, r3
 80097da:	6879      	ldr	r1, [r7, #4]
 80097dc:	4613      	mov	r3, r2
 80097de:	00db      	lsls	r3, r3, #3
 80097e0:	4413      	add	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	440b      	add	r3, r1
 80097e6:	3344      	adds	r3, #68	; 0x44
 80097e8:	4602      	mov	r2, r0
 80097ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80097ec:	7bfa      	ldrb	r2, [r7, #15]
 80097ee:	6879      	ldr	r1, [r7, #4]
 80097f0:	4613      	mov	r3, r2
 80097f2:	00db      	lsls	r3, r3, #3
 80097f4:	4413      	add	r3, r2
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	440b      	add	r3, r1
 80097fa:	3340      	adds	r3, #64	; 0x40
 80097fc:	2200      	movs	r2, #0
 80097fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009800:	7bfa      	ldrb	r2, [r7, #15]
 8009802:	6879      	ldr	r1, [r7, #4]
 8009804:	4613      	mov	r3, r2
 8009806:	00db      	lsls	r3, r3, #3
 8009808:	4413      	add	r3, r2
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	440b      	add	r3, r1
 800980e:	3348      	adds	r3, #72	; 0x48
 8009810:	2200      	movs	r2, #0
 8009812:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009814:	7bfa      	ldrb	r2, [r7, #15]
 8009816:	6879      	ldr	r1, [r7, #4]
 8009818:	4613      	mov	r3, r2
 800981a:	00db      	lsls	r3, r3, #3
 800981c:	4413      	add	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	440b      	add	r3, r1
 8009822:	334c      	adds	r3, #76	; 0x4c
 8009824:	2200      	movs	r2, #0
 8009826:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009828:	7bfa      	ldrb	r2, [r7, #15]
 800982a:	6879      	ldr	r1, [r7, #4]
 800982c:	4613      	mov	r3, r2
 800982e:	00db      	lsls	r3, r3, #3
 8009830:	4413      	add	r3, r2
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	440b      	add	r3, r1
 8009836:	3354      	adds	r3, #84	; 0x54
 8009838:	2200      	movs	r2, #0
 800983a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800983c:	7bfb      	ldrb	r3, [r7, #15]
 800983e:	3301      	adds	r3, #1
 8009840:	73fb      	strb	r3, [r7, #15]
 8009842:	7bfa      	ldrb	r2, [r7, #15]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	429a      	cmp	r2, r3
 800984a:	d3af      	bcc.n	80097ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800984c:	2300      	movs	r3, #0
 800984e:	73fb      	strb	r3, [r7, #15]
 8009850:	e044      	b.n	80098dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009852:	7bfa      	ldrb	r2, [r7, #15]
 8009854:	6879      	ldr	r1, [r7, #4]
 8009856:	4613      	mov	r3, r2
 8009858:	00db      	lsls	r3, r3, #3
 800985a:	4413      	add	r3, r2
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	440b      	add	r3, r1
 8009860:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8009864:	2200      	movs	r2, #0
 8009866:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009868:	7bfa      	ldrb	r2, [r7, #15]
 800986a:	6879      	ldr	r1, [r7, #4]
 800986c:	4613      	mov	r3, r2
 800986e:	00db      	lsls	r3, r3, #3
 8009870:	4413      	add	r3, r2
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	440b      	add	r3, r1
 8009876:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800987a:	7bfa      	ldrb	r2, [r7, #15]
 800987c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800987e:	7bfa      	ldrb	r2, [r7, #15]
 8009880:	6879      	ldr	r1, [r7, #4]
 8009882:	4613      	mov	r3, r2
 8009884:	00db      	lsls	r3, r3, #3
 8009886:	4413      	add	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	440b      	add	r3, r1
 800988c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009890:	2200      	movs	r2, #0
 8009892:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009894:	7bfa      	ldrb	r2, [r7, #15]
 8009896:	6879      	ldr	r1, [r7, #4]
 8009898:	4613      	mov	r3, r2
 800989a:	00db      	lsls	r3, r3, #3
 800989c:	4413      	add	r3, r2
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	440b      	add	r3, r1
 80098a2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80098a6:	2200      	movs	r2, #0
 80098a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80098aa:	7bfa      	ldrb	r2, [r7, #15]
 80098ac:	6879      	ldr	r1, [r7, #4]
 80098ae:	4613      	mov	r3, r2
 80098b0:	00db      	lsls	r3, r3, #3
 80098b2:	4413      	add	r3, r2
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	440b      	add	r3, r1
 80098b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80098bc:	2200      	movs	r2, #0
 80098be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80098c0:	7bfa      	ldrb	r2, [r7, #15]
 80098c2:	6879      	ldr	r1, [r7, #4]
 80098c4:	4613      	mov	r3, r2
 80098c6:	00db      	lsls	r3, r3, #3
 80098c8:	4413      	add	r3, r2
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	440b      	add	r3, r1
 80098ce:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80098d2:	2200      	movs	r2, #0
 80098d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80098d6:	7bfb      	ldrb	r3, [r7, #15]
 80098d8:	3301      	adds	r3, #1
 80098da:	73fb      	strb	r3, [r7, #15]
 80098dc:	7bfa      	ldrb	r2, [r7, #15]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d3b5      	bcc.n	8009852 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	603b      	str	r3, [r7, #0]
 80098ec:	687e      	ldr	r6, [r7, #4]
 80098ee:	466d      	mov	r5, sp
 80098f0:	f106 0410 	add.w	r4, r6, #16
 80098f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80098f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80098f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80098fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80098fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009900:	e885 0003 	stmia.w	r5, {r0, r1}
 8009904:	1d33      	adds	r3, r6, #4
 8009906:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009908:	6838      	ldr	r0, [r7, #0]
 800990a:	f005 f869 	bl	800e9e0 <USB_DevInit>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d005      	beq.n	8009920 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2202      	movs	r2, #2
 8009918:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	e014      	b.n	800994a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009934:	2b01      	cmp	r3, #1
 8009936:	d102      	bne.n	800993e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f001 f881 	bl	800aa40 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4618      	mov	r0, r3
 8009944:	f006 f8f1 	bl	800fb2a <USB_DevDisconnect>

  return HAL_OK;
 8009948:	2300      	movs	r3, #0
}
 800994a:	4618      	mov	r0, r3
 800994c:	3714      	adds	r7, #20
 800994e:	46bd      	mov	sp, r7
 8009950:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009952 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009952:	b580      	push	{r7, lr}
 8009954:	b084      	sub	sp, #16
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009966:	2b01      	cmp	r3, #1
 8009968:	d101      	bne.n	800996e <HAL_PCD_Start+0x1c>
 800996a:	2302      	movs	r3, #2
 800996c:	e01c      	b.n	80099a8 <HAL_PCD_Start+0x56>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2201      	movs	r2, #1
 8009972:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800997a:	2b01      	cmp	r3, #1
 800997c:	d105      	bne.n	800998a <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009982:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4618      	mov	r0, r3
 8009990:	f004 ffb8 	bl	800e904 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4618      	mov	r0, r3
 800999a:	f006 f8a5 	bl	800fae8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80099b0:	b590      	push	{r4, r7, lr}
 80099b2:	b08d      	sub	sp, #52	; 0x34
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099be:	6a3b      	ldr	r3, [r7, #32]
 80099c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4618      	mov	r0, r3
 80099c8:	f006 f963 	bl	800fc92 <USB_GetMode>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f040 847e 	bne.w	800a2d0 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4618      	mov	r0, r3
 80099da:	f006 f8c7 	bl	800fb6c <USB_ReadInterrupts>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f000 8474 	beq.w	800a2ce <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	0a1b      	lsrs	r3, r3, #8
 80099f0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4618      	mov	r0, r3
 8009a00:	f006 f8b4 	bl	800fb6c <USB_ReadInterrupts>
 8009a04:	4603      	mov	r3, r0
 8009a06:	f003 0302 	and.w	r3, r3, #2
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d107      	bne.n	8009a1e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	695a      	ldr	r2, [r3, #20]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f002 0202 	and.w	r2, r2, #2
 8009a1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4618      	mov	r0, r3
 8009a24:	f006 f8a2 	bl	800fb6c <USB_ReadInterrupts>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	f003 0310 	and.w	r3, r3, #16
 8009a2e:	2b10      	cmp	r3, #16
 8009a30:	d161      	bne.n	8009af6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	699a      	ldr	r2, [r3, #24]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f022 0210 	bic.w	r2, r2, #16
 8009a40:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009a42:	6a3b      	ldr	r3, [r7, #32]
 8009a44:	6a1b      	ldr	r3, [r3, #32]
 8009a46:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	f003 020f 	and.w	r2, r3, #15
 8009a4e:	4613      	mov	r3, r2
 8009a50:	00db      	lsls	r3, r3, #3
 8009a52:	4413      	add	r3, r2
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	4413      	add	r3, r2
 8009a5e:	3304      	adds	r3, #4
 8009a60:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	0c5b      	lsrs	r3, r3, #17
 8009a66:	f003 030f 	and.w	r3, r3, #15
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d124      	bne.n	8009ab8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009a6e:	69ba      	ldr	r2, [r7, #24]
 8009a70:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009a74:	4013      	ands	r3, r2
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d035      	beq.n	8009ae6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	091b      	lsrs	r3, r3, #4
 8009a82:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009a84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	6a38      	ldr	r0, [r7, #32]
 8009a8e:	f005 fed9 	bl	800f844 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	691a      	ldr	r2, [r3, #16]
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	091b      	lsrs	r3, r3, #4
 8009a9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009a9e:	441a      	add	r2, r3
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	6a1a      	ldr	r2, [r3, #32]
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	091b      	lsrs	r3, r3, #4
 8009aac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ab0:	441a      	add	r2, r3
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	621a      	str	r2, [r3, #32]
 8009ab6:	e016      	b.n	8009ae6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	0c5b      	lsrs	r3, r3, #17
 8009abc:	f003 030f 	and.w	r3, r3, #15
 8009ac0:	2b06      	cmp	r3, #6
 8009ac2:	d110      	bne.n	8009ae6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009aca:	2208      	movs	r2, #8
 8009acc:	4619      	mov	r1, r3
 8009ace:	6a38      	ldr	r0, [r7, #32]
 8009ad0:	f005 feb8 	bl	800f844 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	6a1a      	ldr	r2, [r3, #32]
 8009ad8:	69bb      	ldr	r3, [r7, #24]
 8009ada:	091b      	lsrs	r3, r3, #4
 8009adc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ae0:	441a      	add	r2, r3
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	699a      	ldr	r2, [r3, #24]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f042 0210 	orr.w	r2, r2, #16
 8009af4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4618      	mov	r0, r3
 8009afc:	f006 f836 	bl	800fb6c <USB_ReadInterrupts>
 8009b00:	4603      	mov	r3, r0
 8009b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009b06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009b0a:	f040 80a7 	bne.w	8009c5c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4618      	mov	r0, r3
 8009b18:	f006 f83b 	bl	800fb92 <USB_ReadDevAllOutEpInterrupt>
 8009b1c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009b1e:	e099      	b.n	8009c54 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b22:	f003 0301 	and.w	r3, r3, #1
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	f000 808e 	beq.w	8009c48 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b32:	b2d2      	uxtb	r2, r2
 8009b34:	4611      	mov	r1, r2
 8009b36:	4618      	mov	r0, r3
 8009b38:	f006 f85f 	bl	800fbfa <USB_ReadDevOutEPInterrupt>
 8009b3c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	f003 0301 	and.w	r3, r3, #1
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00c      	beq.n	8009b62 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4a:	015a      	lsls	r2, r3, #5
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	4413      	add	r3, r2
 8009b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b54:	461a      	mov	r2, r3
 8009b56:	2301      	movs	r3, #1
 8009b58:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009b5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 fe95 	bl	800a88c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	f003 0308 	and.w	r3, r3, #8
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d00c      	beq.n	8009b86 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6e:	015a      	lsls	r2, r3, #5
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	4413      	add	r3, r2
 8009b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b78:	461a      	mov	r2, r3
 8009b7a:	2308      	movs	r3, #8
 8009b7c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009b7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fed1 	bl	800a928 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	f003 0310 	and.w	r3, r3, #16
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d008      	beq.n	8009ba2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b92:	015a      	lsls	r2, r3, #5
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	4413      	add	r3, r2
 8009b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	2310      	movs	r3, #16
 8009ba0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	f003 0302 	and.w	r3, r3, #2
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d030      	beq.n	8009c0e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009bac:	6a3b      	ldr	r3, [r7, #32]
 8009bae:	695b      	ldr	r3, [r3, #20]
 8009bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bb4:	2b80      	cmp	r3, #128	; 0x80
 8009bb6:	d109      	bne.n	8009bcc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	69fa      	ldr	r2, [r7, #28]
 8009bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009bca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bce:	4613      	mov	r3, r2
 8009bd0:	00db      	lsls	r3, r3, #3
 8009bd2:	4413      	add	r3, r2
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	4413      	add	r3, r2
 8009bde:	3304      	adds	r3, #4
 8009be0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	78db      	ldrb	r3, [r3, #3]
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d108      	bne.n	8009bfc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	2200      	movs	r2, #0
 8009bee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f008 f89c 	bl	8011d34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfe:	015a      	lsls	r2, r3, #5
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	4413      	add	r3, r2
 8009c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c08:	461a      	mov	r2, r3
 8009c0a:	2302      	movs	r3, #2
 8009c0c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	f003 0320 	and.w	r3, r3, #32
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d008      	beq.n	8009c2a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1a:	015a      	lsls	r2, r3, #5
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	4413      	add	r3, r2
 8009c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c24:	461a      	mov	r2, r3
 8009c26:	2320      	movs	r3, #32
 8009c28:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d009      	beq.n	8009c48 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c36:	015a      	lsls	r2, r3, #5
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	4413      	add	r3, r2
 8009c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c40:	461a      	mov	r2, r3
 8009c42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c46:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c50:	085b      	lsrs	r3, r3, #1
 8009c52:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f47f af62 	bne.w	8009b20 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4618      	mov	r0, r3
 8009c62:	f005 ff83 	bl	800fb6c <USB_ReadInterrupts>
 8009c66:	4603      	mov	r3, r0
 8009c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c70:	f040 80a4 	bne.w	8009dbc <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f005 ffa4 	bl	800fbc6 <USB_ReadDevAllInEpInterrupt>
 8009c7e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009c80:	2300      	movs	r3, #0
 8009c82:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009c84:	e096      	b.n	8009db4 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c88:	f003 0301 	and.w	r3, r3, #1
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f000 808b 	beq.w	8009da8 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c98:	b2d2      	uxtb	r2, r2
 8009c9a:	4611      	mov	r1, r2
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f005 ffca 	bl	800fc36 <USB_ReadDevInEPInterrupt>
 8009ca2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	f003 0301 	and.w	r3, r3, #1
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d020      	beq.n	8009cf0 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb0:	f003 030f 	and.w	r3, r3, #15
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8009cba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	43db      	mvns	r3, r3
 8009cc8:	69f9      	ldr	r1, [r7, #28]
 8009cca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009cce:	4013      	ands	r3, r2
 8009cd0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd4:	015a      	lsls	r2, r3, #5
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	4413      	add	r3, r2
 8009cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cde:	461a      	mov	r2, r3
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	4619      	mov	r1, r3
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f007 ff8d 	bl	8011c0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	f003 0308 	and.w	r3, r3, #8
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d008      	beq.n	8009d0c <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfc:	015a      	lsls	r2, r3, #5
 8009cfe:	69fb      	ldr	r3, [r7, #28]
 8009d00:	4413      	add	r3, r2
 8009d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d06:	461a      	mov	r2, r3
 8009d08:	2308      	movs	r3, #8
 8009d0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	f003 0310 	and.w	r3, r3, #16
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d008      	beq.n	8009d28 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d18:	015a      	lsls	r2, r3, #5
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d22:	461a      	mov	r2, r3
 8009d24:	2310      	movs	r3, #16
 8009d26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d008      	beq.n	8009d44 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d34:	015a      	lsls	r2, r3, #5
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	4413      	add	r3, r2
 8009d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d3e:	461a      	mov	r2, r3
 8009d40:	2340      	movs	r3, #64	; 0x40
 8009d42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	f003 0302 	and.w	r3, r3, #2
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d023      	beq.n	8009d96 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009d4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d50:	6a38      	ldr	r0, [r7, #32]
 8009d52:	f004 ff91 	bl	800ec78 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d58:	4613      	mov	r3, r2
 8009d5a:	00db      	lsls	r3, r3, #3
 8009d5c:	4413      	add	r3, r2
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	3338      	adds	r3, #56	; 0x38
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	4413      	add	r3, r2
 8009d66:	3304      	adds	r3, #4
 8009d68:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	78db      	ldrb	r3, [r3, #3]
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d108      	bne.n	8009d84 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	2200      	movs	r2, #0
 8009d76:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f007 ffea 	bl	8011d58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d86:	015a      	lsls	r2, r3, #5
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d90:	461a      	mov	r2, r3
 8009d92:	2302      	movs	r3, #2
 8009d94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d003      	beq.n	8009da8 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009da0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 fcea 	bl	800a77c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009daa:	3301      	adds	r3, #1
 8009dac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db0:	085b      	lsrs	r3, r3, #1
 8009db2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	f47f af65 	bne.w	8009c86 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f005 fed3 	bl	800fb6c <USB_ReadInterrupts>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009dcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009dd0:	d122      	bne.n	8009e18 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	69fa      	ldr	r2, [r7, #28]
 8009ddc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009de0:	f023 0301 	bic.w	r3, r3, #1
 8009de4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d108      	bne.n	8009e02 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009df8:	2100      	movs	r1, #0
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f008 fa1e 	bl	801223c <HAL_PCDEx_LPM_Callback>
 8009e00:	e002      	b.n	8009e08 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f007 ff6e 	bl	8011ce4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	695a      	ldr	r2, [r3, #20]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009e16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f005 fea5 	bl	800fb6c <USB_ReadInterrupts>
 8009e22:	4603      	mov	r3, r0
 8009e24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e2c:	d112      	bne.n	8009e54 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	f003 0301 	and.w	r3, r3, #1
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d102      	bne.n	8009e44 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f007 ff2a 	bl	8011c98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	695a      	ldr	r2, [r3, #20]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009e52:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f005 fe87 	bl	800fb6c <USB_ReadInterrupts>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e68:	d121      	bne.n	8009eae <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	695a      	ldr	r2, [r3, #20]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009e78:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d111      	bne.n	8009ea8 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e92:	089b      	lsrs	r3, r3, #2
 8009e94:	f003 020f 	and.w	r2, r3, #15
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009e9e:	2101      	movs	r1, #1
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f008 f9cb 	bl	801223c <HAL_PCDEx_LPM_Callback>
 8009ea6:	e002      	b.n	8009eae <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f007 fef5 	bl	8011c98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f005 fe5a 	bl	800fb6c <USB_ReadInterrupts>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ec2:	f040 80b5 	bne.w	800a030 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009ec6:	69fb      	ldr	r3, [r7, #28]
 8009ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	69fa      	ldr	r2, [r7, #28]
 8009ed0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ed4:	f023 0301 	bic.w	r3, r3, #1
 8009ed8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2110      	movs	r1, #16
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f004 fec9 	bl	800ec78 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009eea:	e046      	b.n	8009f7a <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eee:	015a      	lsls	r2, r3, #5
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ef8:	461a      	mov	r2, r3
 8009efa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009efe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f02:	015a      	lsls	r2, r3, #5
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	4413      	add	r3, r2
 8009f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f10:	0151      	lsls	r1, r2, #5
 8009f12:	69fa      	ldr	r2, [r7, #28]
 8009f14:	440a      	add	r2, r1
 8009f16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f1e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f22:	015a      	lsls	r2, r3, #5
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	4413      	add	r3, r2
 8009f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009f32:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f36:	015a      	lsls	r2, r3, #5
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f44:	0151      	lsls	r1, r2, #5
 8009f46:	69fa      	ldr	r2, [r7, #28]
 8009f48:	440a      	add	r2, r1
 8009f4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f52:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f56:	015a      	lsls	r2, r3, #5
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f64:	0151      	lsls	r1, r2, #5
 8009f66:	69fa      	ldr	r2, [r7, #28]
 8009f68:	440a      	add	r2, r1
 8009f6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f72:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f76:	3301      	adds	r3, #1
 8009f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d3b3      	bcc.n	8009eec <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f8a:	69db      	ldr	r3, [r3, #28]
 8009f8c:	69fa      	ldr	r2, [r7, #28]
 8009f8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f92:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009f96:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d016      	beq.n	8009fce <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009faa:	69fa      	ldr	r2, [r7, #28]
 8009fac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fb0:	f043 030b 	orr.w	r3, r3, #11
 8009fb4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fc0:	69fa      	ldr	r2, [r7, #28]
 8009fc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fc6:	f043 030b 	orr.w	r3, r3, #11
 8009fca:	6453      	str	r3, [r2, #68]	; 0x44
 8009fcc:	e015      	b.n	8009ffa <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fd4:	695b      	ldr	r3, [r3, #20]
 8009fd6:	69fa      	ldr	r2, [r7, #28]
 8009fd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fdc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009fe0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8009fe4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009fe6:	69fb      	ldr	r3, [r7, #28]
 8009fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fec:	691b      	ldr	r3, [r3, #16]
 8009fee:	69fa      	ldr	r2, [r7, #28]
 8009ff0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ff4:	f043 030b 	orr.w	r3, r3, #11
 8009ff8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	69fa      	ldr	r2, [r7, #28]
 800a004:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a008:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a00c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a018:	4619      	mov	r1, r3
 800a01a:	4610      	mov	r0, r2
 800a01c:	f005 fe6a 	bl	800fcf4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	695a      	ldr	r2, [r3, #20]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a02e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4618      	mov	r0, r3
 800a036:	f005 fd99 	bl	800fb6c <USB_ReadInterrupts>
 800a03a:	4603      	mov	r3, r0
 800a03c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a044:	d124      	bne.n	800a090 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f005 fe2f 	bl	800fcae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4618      	mov	r0, r3
 800a056:	f004 fe8c 	bl	800ed72 <USB_GetDevSpeed>
 800a05a:	4603      	mov	r3, r0
 800a05c:	461a      	mov	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681c      	ldr	r4, [r3, #0]
 800a066:	f001 fc0b 	bl	800b880 <HAL_RCC_GetHCLKFreq>
 800a06a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a070:	b2db      	uxtb	r3, r3
 800a072:	461a      	mov	r2, r3
 800a074:	4620      	mov	r0, r4
 800a076:	f004 fba9 	bl	800e7cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f007 fded 	bl	8011c5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	695a      	ldr	r2, [r3, #20]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a08e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4618      	mov	r0, r3
 800a096:	f005 fd69 	bl	800fb6c <USB_ReadInterrupts>
 800a09a:	4603      	mov	r3, r0
 800a09c:	f003 0308 	and.w	r3, r3, #8
 800a0a0:	2b08      	cmp	r3, #8
 800a0a2:	d10a      	bne.n	800a0ba <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f007 fdca 	bl	8011c3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	695a      	ldr	r2, [r3, #20]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f002 0208 	and.w	r2, r2, #8
 800a0b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f005 fd54 	bl	800fb6c <USB_ReadInterrupts>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0ca:	2b80      	cmp	r3, #128	; 0x80
 800a0cc:	d122      	bne.n	800a114 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800a0ce:	6a3b      	ldr	r3, [r7, #32]
 800a0d0:	699b      	ldr	r3, [r3, #24]
 800a0d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a0d6:	6a3b      	ldr	r3, [r7, #32]
 800a0d8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a0da:	2301      	movs	r3, #1
 800a0dc:	627b      	str	r3, [r7, #36]	; 0x24
 800a0de:	e014      	b.n	800a10a <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a0e0:	6879      	ldr	r1, [r7, #4]
 800a0e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0e4:	4613      	mov	r3, r2
 800a0e6:	00db      	lsls	r3, r3, #3
 800a0e8:	4413      	add	r3, r2
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	440b      	add	r3, r1
 800a0ee:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d105      	bne.n	800a104 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800a0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 fb0b 	bl	800a71a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a106:	3301      	adds	r3, #1
 800a108:	627b      	str	r3, [r7, #36]	; 0x24
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a110:	429a      	cmp	r2, r3
 800a112:	d3e5      	bcc.n	800a0e0 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4618      	mov	r0, r3
 800a11a:	f005 fd27 	bl	800fb6c <USB_ReadInterrupts>
 800a11e:	4603      	mov	r3, r0
 800a120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a128:	d13b      	bne.n	800a1a2 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a12a:	2301      	movs	r3, #1
 800a12c:	627b      	str	r3, [r7, #36]	; 0x24
 800a12e:	e02b      	b.n	800a188 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a132:	015a      	lsls	r2, r3, #5
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	4413      	add	r3, r2
 800a138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a140:	6879      	ldr	r1, [r7, #4]
 800a142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a144:	4613      	mov	r3, r2
 800a146:	00db      	lsls	r3, r3, #3
 800a148:	4413      	add	r3, r2
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	440b      	add	r3, r1
 800a14e:	3340      	adds	r3, #64	; 0x40
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	2b01      	cmp	r3, #1
 800a154:	d115      	bne.n	800a182 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800a156:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a158:	2b00      	cmp	r3, #0
 800a15a:	da12      	bge.n	800a182 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a15c:	6879      	ldr	r1, [r7, #4]
 800a15e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a160:	4613      	mov	r3, r2
 800a162:	00db      	lsls	r3, r3, #3
 800a164:	4413      	add	r3, r2
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	440b      	add	r3, r1
 800a16a:	333f      	adds	r3, #63	; 0x3f
 800a16c:	2201      	movs	r2, #1
 800a16e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	b2db      	uxtb	r3, r3
 800a174:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	4619      	mov	r1, r3
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 facc 	bl	800a71a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a184:	3301      	adds	r3, #1
 800a186:	627b      	str	r3, [r7, #36]	; 0x24
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a18e:	429a      	cmp	r2, r3
 800a190:	d3ce      	bcc.n	800a130 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	695a      	ldr	r2, [r3, #20]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a1a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f005 fce0 	bl	800fb6c <USB_ReadInterrupts>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a1b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a1b6:	d155      	bne.n	800a264 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	627b      	str	r3, [r7, #36]	; 0x24
 800a1bc:	e045      	b.n	800a24a <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	015a      	lsls	r2, r3, #5
 800a1c2:	69fb      	ldr	r3, [r7, #28]
 800a1c4:	4413      	add	r3, r2
 800a1c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a1ce:	6879      	ldr	r1, [r7, #4]
 800a1d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	00db      	lsls	r3, r3, #3
 800a1d6:	4413      	add	r3, r2
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	440b      	add	r3, r1
 800a1dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d12e      	bne.n	800a244 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a1e6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	da2b      	bge.n	800a244 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800a1f8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d121      	bne.n	800a244 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800a200:	6879      	ldr	r1, [r7, #4]
 800a202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a204:	4613      	mov	r3, r2
 800a206:	00db      	lsls	r3, r3, #3
 800a208:	4413      	add	r3, r2
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	440b      	add	r3, r1
 800a20e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a212:	2201      	movs	r2, #1
 800a214:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800a216:	6a3b      	ldr	r3, [r7, #32]
 800a218:	699b      	ldr	r3, [r3, #24]
 800a21a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a21e:	6a3b      	ldr	r3, [r7, #32]
 800a220:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800a222:	6a3b      	ldr	r3, [r7, #32]
 800a224:	695b      	ldr	r3, [r3, #20]
 800a226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d10a      	bne.n	800a244 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800a22e:	69fb      	ldr	r3, [r7, #28]
 800a230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	69fa      	ldr	r2, [r7, #28]
 800a238:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a23c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a240:	6053      	str	r3, [r2, #4]
            break;
 800a242:	e007      	b.n	800a254 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a246:	3301      	adds	r3, #1
 800a248:	627b      	str	r3, [r7, #36]	; 0x24
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a250:	429a      	cmp	r2, r3
 800a252:	d3b4      	bcc.n	800a1be <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	695a      	ldr	r2, [r3, #20]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a262:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4618      	mov	r0, r3
 800a26a:	f005 fc7f 	bl	800fb6c <USB_ReadInterrupts>
 800a26e:	4603      	mov	r3, r0
 800a270:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a278:	d10a      	bne.n	800a290 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f007 fd7e 	bl	8011d7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	695a      	ldr	r2, [r3, #20]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a28e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4618      	mov	r0, r3
 800a296:	f005 fc69 	bl	800fb6c <USB_ReadInterrupts>
 800a29a:	4603      	mov	r3, r0
 800a29c:	f003 0304 	and.w	r3, r3, #4
 800a2a0:	2b04      	cmp	r3, #4
 800a2a2:	d115      	bne.n	800a2d0 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	f003 0304 	and.w	r3, r3, #4
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d002      	beq.n	800a2bc <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f007 fd6e 	bl	8011d98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	6859      	ldr	r1, [r3, #4]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	69ba      	ldr	r2, [r7, #24]
 800a2c8:	430a      	orrs	r2, r1
 800a2ca:	605a      	str	r2, [r3, #4]
 800a2cc:	e000      	b.n	800a2d0 <HAL_PCD_IRQHandler+0x920>
      return;
 800a2ce:	bf00      	nop
    }
  }
}
 800a2d0:	3734      	adds	r7, #52	; 0x34
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd90      	pop	{r4, r7, pc}

0800a2d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b082      	sub	sp, #8
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	460b      	mov	r3, r1
 800a2e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d101      	bne.n	800a2f0 <HAL_PCD_SetAddress+0x1a>
 800a2ec:	2302      	movs	r3, #2
 800a2ee:	e013      	b.n	800a318 <HAL_PCD_SetAddress+0x42>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	78fa      	ldrb	r2, [r7, #3]
 800a2fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	78fa      	ldrb	r2, [r7, #3]
 800a306:	4611      	mov	r1, r2
 800a308:	4618      	mov	r0, r3
 800a30a:	f005 fbc7 	bl	800fa9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3708      	adds	r7, #8
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	4608      	mov	r0, r1
 800a32a:	4611      	mov	r1, r2
 800a32c:	461a      	mov	r2, r3
 800a32e:	4603      	mov	r3, r0
 800a330:	70fb      	strb	r3, [r7, #3]
 800a332:	460b      	mov	r3, r1
 800a334:	803b      	strh	r3, [r7, #0]
 800a336:	4613      	mov	r3, r2
 800a338:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a33a:	2300      	movs	r3, #0
 800a33c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a33e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a342:	2b00      	cmp	r3, #0
 800a344:	da0f      	bge.n	800a366 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a346:	78fb      	ldrb	r3, [r7, #3]
 800a348:	f003 020f 	and.w	r2, r3, #15
 800a34c:	4613      	mov	r3, r2
 800a34e:	00db      	lsls	r3, r3, #3
 800a350:	4413      	add	r3, r2
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	3338      	adds	r3, #56	; 0x38
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	4413      	add	r3, r2
 800a35a:	3304      	adds	r3, #4
 800a35c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2201      	movs	r2, #1
 800a362:	705a      	strb	r2, [r3, #1]
 800a364:	e00f      	b.n	800a386 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a366:	78fb      	ldrb	r3, [r7, #3]
 800a368:	f003 020f 	and.w	r2, r3, #15
 800a36c:	4613      	mov	r3, r2
 800a36e:	00db      	lsls	r3, r3, #3
 800a370:	4413      	add	r3, r2
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a378:	687a      	ldr	r2, [r7, #4]
 800a37a:	4413      	add	r3, r2
 800a37c:	3304      	adds	r3, #4
 800a37e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2200      	movs	r2, #0
 800a384:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a386:	78fb      	ldrb	r3, [r7, #3]
 800a388:	f003 030f 	and.w	r3, r3, #15
 800a38c:	b2da      	uxtb	r2, r3
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a392:	883a      	ldrh	r2, [r7, #0]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	78ba      	ldrb	r2, [r7, #2]
 800a39c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	785b      	ldrb	r3, [r3, #1]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d004      	beq.n	800a3b0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a3b0:	78bb      	ldrb	r3, [r7, #2]
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	d102      	bne.n	800a3bc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d101      	bne.n	800a3ca <HAL_PCD_EP_Open+0xaa>
 800a3c6:	2302      	movs	r3, #2
 800a3c8:	e00e      	b.n	800a3e8 <HAL_PCD_EP_Open+0xc8>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68f9      	ldr	r1, [r7, #12]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f004 fce9 	bl	800edb0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800a3e6:	7afb      	ldrb	r3, [r7, #11]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3710      	adds	r7, #16
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a3fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a400:	2b00      	cmp	r3, #0
 800a402:	da0f      	bge.n	800a424 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a404:	78fb      	ldrb	r3, [r7, #3]
 800a406:	f003 020f 	and.w	r2, r3, #15
 800a40a:	4613      	mov	r3, r2
 800a40c:	00db      	lsls	r3, r3, #3
 800a40e:	4413      	add	r3, r2
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	3338      	adds	r3, #56	; 0x38
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	4413      	add	r3, r2
 800a418:	3304      	adds	r3, #4
 800a41a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2201      	movs	r2, #1
 800a420:	705a      	strb	r2, [r3, #1]
 800a422:	e00f      	b.n	800a444 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a424:	78fb      	ldrb	r3, [r7, #3]
 800a426:	f003 020f 	and.w	r2, r3, #15
 800a42a:	4613      	mov	r3, r2
 800a42c:	00db      	lsls	r3, r3, #3
 800a42e:	4413      	add	r3, r2
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	4413      	add	r3, r2
 800a43a:	3304      	adds	r3, #4
 800a43c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2200      	movs	r2, #0
 800a442:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a444:	78fb      	ldrb	r3, [r7, #3]
 800a446:	f003 030f 	and.w	r3, r3, #15
 800a44a:	b2da      	uxtb	r2, r3
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a456:	2b01      	cmp	r3, #1
 800a458:	d101      	bne.n	800a45e <HAL_PCD_EP_Close+0x6e>
 800a45a:	2302      	movs	r3, #2
 800a45c:	e00e      	b.n	800a47c <HAL_PCD_EP_Close+0x8c>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2201      	movs	r2, #1
 800a462:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	68f9      	ldr	r1, [r7, #12]
 800a46c:	4618      	mov	r0, r3
 800a46e:	f004 fd27 	bl	800eec0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b086      	sub	sp, #24
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	607a      	str	r2, [r7, #4]
 800a48e:	603b      	str	r3, [r7, #0]
 800a490:	460b      	mov	r3, r1
 800a492:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a494:	7afb      	ldrb	r3, [r7, #11]
 800a496:	f003 020f 	and.w	r2, r3, #15
 800a49a:	4613      	mov	r3, r2
 800a49c:	00db      	lsls	r3, r3, #3
 800a49e:	4413      	add	r3, r2
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	3304      	adds	r3, #4
 800a4ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	683a      	ldr	r2, [r7, #0]
 800a4b8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a4c6:	7afb      	ldrb	r3, [r7, #11]
 800a4c8:	f003 030f 	and.w	r3, r3, #15
 800a4cc:	b2da      	uxtb	r2, r3
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a4d2:	7afb      	ldrb	r3, [r7, #11]
 800a4d4:	f003 030f 	and.w	r3, r3, #15
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d106      	bne.n	800a4ea <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	6979      	ldr	r1, [r7, #20]
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f004 ffa8 	bl	800f438 <USB_EP0StartXfer>
 800a4e8:	e005      	b.n	800a4f6 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	6979      	ldr	r1, [r7, #20]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f004 fdc1 	bl	800f078 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3718      	adds	r7, #24
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	460b      	mov	r3, r1
 800a50a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a50c:	78fb      	ldrb	r3, [r7, #3]
 800a50e:	f003 020f 	and.w	r2, r3, #15
 800a512:	6879      	ldr	r1, [r7, #4]
 800a514:	4613      	mov	r3, r2
 800a516:	00db      	lsls	r3, r3, #3
 800a518:	4413      	add	r3, r2
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	440b      	add	r3, r1
 800a51e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800a522:	681b      	ldr	r3, [r3, #0]
}
 800a524:	4618      	mov	r0, r3
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	607a      	str	r2, [r7, #4]
 800a53a:	603b      	str	r3, [r7, #0]
 800a53c:	460b      	mov	r3, r1
 800a53e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a540:	7afb      	ldrb	r3, [r7, #11]
 800a542:	f003 020f 	and.w	r2, r3, #15
 800a546:	4613      	mov	r3, r2
 800a548:	00db      	lsls	r3, r3, #3
 800a54a:	4413      	add	r3, r2
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	3338      	adds	r3, #56	; 0x38
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	4413      	add	r3, r2
 800a554:	3304      	adds	r3, #4
 800a556:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	683a      	ldr	r2, [r7, #0]
 800a562:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	2200      	movs	r2, #0
 800a568:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	2201      	movs	r2, #1
 800a56e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a570:	7afb      	ldrb	r3, [r7, #11]
 800a572:	f003 030f 	and.w	r3, r3, #15
 800a576:	b2da      	uxtb	r2, r3
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a57c:	7afb      	ldrb	r3, [r7, #11]
 800a57e:	f003 030f 	and.w	r3, r3, #15
 800a582:	2b00      	cmp	r3, #0
 800a584:	d106      	bne.n	800a594 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	6979      	ldr	r1, [r7, #20]
 800a58c:	4618      	mov	r0, r3
 800a58e:	f004 ff53 	bl	800f438 <USB_EP0StartXfer>
 800a592:	e005      	b.n	800a5a0 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	6979      	ldr	r1, [r7, #20]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f004 fd6c 	bl	800f078 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a5a0:	2300      	movs	r3, #0
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3718      	adds	r7, #24
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b084      	sub	sp, #16
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a5b6:	78fb      	ldrb	r3, [r7, #3]
 800a5b8:	f003 020f 	and.w	r2, r3, #15
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d901      	bls.n	800a5c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e04e      	b.n	800a666 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a5c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	da0f      	bge.n	800a5f0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a5d0:	78fb      	ldrb	r3, [r7, #3]
 800a5d2:	f003 020f 	and.w	r2, r3, #15
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	00db      	lsls	r3, r3, #3
 800a5da:	4413      	add	r3, r2
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	3338      	adds	r3, #56	; 0x38
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	4413      	add	r3, r2
 800a5e4:	3304      	adds	r3, #4
 800a5e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	705a      	strb	r2, [r3, #1]
 800a5ee:	e00d      	b.n	800a60c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a5f0:	78fa      	ldrb	r2, [r7, #3]
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	00db      	lsls	r3, r3, #3
 800a5f6:	4413      	add	r3, r2
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	4413      	add	r3, r2
 800a602:	3304      	adds	r3, #4
 800a604:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2200      	movs	r2, #0
 800a60a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2201      	movs	r2, #1
 800a610:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a612:	78fb      	ldrb	r3, [r7, #3]
 800a614:	f003 030f 	and.w	r3, r3, #15
 800a618:	b2da      	uxtb	r2, r3
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a624:	2b01      	cmp	r3, #1
 800a626:	d101      	bne.n	800a62c <HAL_PCD_EP_SetStall+0x82>
 800a628:	2302      	movs	r3, #2
 800a62a:	e01c      	b.n	800a666 <HAL_PCD_EP_SetStall+0xbc>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68f9      	ldr	r1, [r7, #12]
 800a63a:	4618      	mov	r0, r3
 800a63c:	f005 f95a 	bl	800f8f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a640:	78fb      	ldrb	r3, [r7, #3]
 800a642:	f003 030f 	and.w	r3, r3, #15
 800a646:	2b00      	cmp	r3, #0
 800a648:	d108      	bne.n	800a65c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a654:	4619      	mov	r1, r3
 800a656:	4610      	mov	r0, r2
 800a658:	f005 fb4c 	bl	800fcf4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b084      	sub	sp, #16
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	460b      	mov	r3, r1
 800a678:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a67a:	78fb      	ldrb	r3, [r7, #3]
 800a67c:	f003 020f 	and.w	r2, r3, #15
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	429a      	cmp	r2, r3
 800a686:	d901      	bls.n	800a68c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a688:	2301      	movs	r3, #1
 800a68a:	e042      	b.n	800a712 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a68c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a690:	2b00      	cmp	r3, #0
 800a692:	da0f      	bge.n	800a6b4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a694:	78fb      	ldrb	r3, [r7, #3]
 800a696:	f003 020f 	and.w	r2, r3, #15
 800a69a:	4613      	mov	r3, r2
 800a69c:	00db      	lsls	r3, r3, #3
 800a69e:	4413      	add	r3, r2
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	3338      	adds	r3, #56	; 0x38
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	4413      	add	r3, r2
 800a6a8:	3304      	adds	r3, #4
 800a6aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	705a      	strb	r2, [r3, #1]
 800a6b2:	e00f      	b.n	800a6d4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a6b4:	78fb      	ldrb	r3, [r7, #3]
 800a6b6:	f003 020f 	and.w	r2, r3, #15
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	00db      	lsls	r3, r3, #3
 800a6be:	4413      	add	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	3304      	adds	r3, #4
 800a6cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a6da:	78fb      	ldrb	r3, [r7, #3]
 800a6dc:	f003 030f 	and.w	r3, r3, #15
 800a6e0:	b2da      	uxtb	r2, r3
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d101      	bne.n	800a6f4 <HAL_PCD_EP_ClrStall+0x86>
 800a6f0:	2302      	movs	r3, #2
 800a6f2:	e00e      	b.n	800a712 <HAL_PCD_EP_ClrStall+0xa4>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	68f9      	ldr	r1, [r7, #12]
 800a702:	4618      	mov	r0, r3
 800a704:	f005 f964 	bl	800f9d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b084      	sub	sp, #16
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
 800a722:	460b      	mov	r3, r1
 800a724:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a726:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	da0c      	bge.n	800a748 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a72e:	78fb      	ldrb	r3, [r7, #3]
 800a730:	f003 020f 	and.w	r2, r3, #15
 800a734:	4613      	mov	r3, r2
 800a736:	00db      	lsls	r3, r3, #3
 800a738:	4413      	add	r3, r2
 800a73a:	009b      	lsls	r3, r3, #2
 800a73c:	3338      	adds	r3, #56	; 0x38
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	4413      	add	r3, r2
 800a742:	3304      	adds	r3, #4
 800a744:	60fb      	str	r3, [r7, #12]
 800a746:	e00c      	b.n	800a762 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a748:	78fb      	ldrb	r3, [r7, #3]
 800a74a:	f003 020f 	and.w	r2, r3, #15
 800a74e:	4613      	mov	r3, r2
 800a750:	00db      	lsls	r3, r3, #3
 800a752:	4413      	add	r3, r2
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	4413      	add	r3, r2
 800a75e:	3304      	adds	r3, #4
 800a760:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68f9      	ldr	r1, [r7, #12]
 800a768:	4618      	mov	r0, r3
 800a76a:	f004 ff87 	bl	800f67c <USB_EPStopXfer>
 800a76e:	4603      	mov	r3, r0
 800a770:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a772:	7afb      	ldrb	r3, [r7, #11]
}
 800a774:	4618      	mov	r0, r3
 800a776:	3710      	adds	r7, #16
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b088      	sub	sp, #32
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a790:	683a      	ldr	r2, [r7, #0]
 800a792:	4613      	mov	r3, r2
 800a794:	00db      	lsls	r3, r3, #3
 800a796:	4413      	add	r3, r2
 800a798:	009b      	lsls	r3, r3, #2
 800a79a:	3338      	adds	r3, #56	; 0x38
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	4413      	add	r3, r2
 800a7a0:	3304      	adds	r3, #4
 800a7a2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	6a1a      	ldr	r2, [r3, #32]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	699b      	ldr	r3, [r3, #24]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d901      	bls.n	800a7b4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e067      	b.n	800a884 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	699a      	ldr	r2, [r3, #24]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6a1b      	ldr	r3, [r3, #32]
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	69fa      	ldr	r2, [r7, #28]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d902      	bls.n	800a7d0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a7d0:	69fb      	ldr	r3, [r7, #28]
 800a7d2:	3303      	adds	r3, #3
 800a7d4:	089b      	lsrs	r3, r3, #2
 800a7d6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a7d8:	e026      	b.n	800a828 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	699a      	ldr	r2, [r3, #24]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6a1b      	ldr	r3, [r3, #32]
 800a7e2:	1ad3      	subs	r3, r2, r3
 800a7e4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	69fa      	ldr	r2, [r7, #28]
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d902      	bls.n	800a7f6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	3303      	adds	r3, #3
 800a7fa:	089b      	lsrs	r3, r3, #2
 800a7fc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6919      	ldr	r1, [r3, #16]
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	b2da      	uxtb	r2, r3
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	b29b      	uxth	r3, r3
 800a80a:	6978      	ldr	r0, [r7, #20]
 800a80c:	f004 ffe0 	bl	800f7d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	691a      	ldr	r2, [r3, #16]
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	441a      	add	r2, r3
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	6a1a      	ldr	r2, [r3, #32]
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	441a      	add	r2, r3
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	015a      	lsls	r2, r3, #5
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	4413      	add	r3, r2
 800a830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a834:	699b      	ldr	r3, [r3, #24]
 800a836:	b29b      	uxth	r3, r3
 800a838:	69ba      	ldr	r2, [r7, #24]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d809      	bhi.n	800a852 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	6a1a      	ldr	r2, [r3, #32]
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a846:	429a      	cmp	r2, r3
 800a848:	d203      	bcs.n	800a852 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	699b      	ldr	r3, [r3, #24]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d1c3      	bne.n	800a7da <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	699a      	ldr	r2, [r3, #24]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	6a1b      	ldr	r3, [r3, #32]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d811      	bhi.n	800a882 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	f003 030f 	and.w	r3, r3, #15
 800a864:	2201      	movs	r2, #1
 800a866:	fa02 f303 	lsl.w	r3, r2, r3
 800a86a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	43db      	mvns	r3, r3
 800a878:	6939      	ldr	r1, [r7, #16]
 800a87a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a87e:	4013      	ands	r3, r2
 800a880:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3720      	adds	r7, #32
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b086      	sub	sp, #24
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	333c      	adds	r3, #60	; 0x3c
 800a8a4:	3304      	adds	r3, #4
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	015a      	lsls	r2, r3, #5
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8b6:	689b      	ldr	r3, [r3, #8]
 800a8b8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	4a19      	ldr	r2, [pc, #100]	; (800a924 <PCD_EP_OutXfrComplete_int+0x98>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d124      	bne.n	800a90c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d00a      	beq.n	800a8e2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	015a      	lsls	r2, r3, #5
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	4413      	add	r3, r2
 800a8d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8d8:	461a      	mov	r2, r3
 800a8da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8de:	6093      	str	r3, [r2, #8]
 800a8e0:	e01a      	b.n	800a918 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	f003 0320 	and.w	r3, r3, #32
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d008      	beq.n	800a8fe <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	015a      	lsls	r2, r3, #5
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	4413      	add	r3, r2
 800a8f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	2320      	movs	r3, #32
 800a8fc:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	b2db      	uxtb	r3, r3
 800a902:	4619      	mov	r1, r3
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f007 f965 	bl	8011bd4 <HAL_PCD_DataOutStageCallback>
 800a90a:	e005      	b.n	800a918 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	4619      	mov	r1, r3
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f007 f95e 	bl	8011bd4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3718      	adds	r7, #24
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	4f54310a 	.word	0x4f54310a

0800a928 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b086      	sub	sp, #24
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	333c      	adds	r3, #60	; 0x3c
 800a940:	3304      	adds	r3, #4
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	015a      	lsls	r2, r3, #5
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	4413      	add	r3, r2
 800a94e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	4a0c      	ldr	r2, [pc, #48]	; (800a98c <PCD_EP_OutSetupPacket_int+0x64>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d90e      	bls.n	800a97c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a964:	2b00      	cmp	r3, #0
 800a966:	d009      	beq.n	800a97c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	015a      	lsls	r2, r3, #5
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	4413      	add	r3, r2
 800a970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a974:	461a      	mov	r2, r3
 800a976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a97a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f007 f917 	bl	8011bb0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800a982:	2300      	movs	r3, #0
}
 800a984:	4618      	mov	r0, r3
 800a986:	3718      	adds	r7, #24
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	4f54300a 	.word	0x4f54300a

0800a990 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a990:	b480      	push	{r7}
 800a992:	b085      	sub	sp, #20
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	460b      	mov	r3, r1
 800a99a:	70fb      	strb	r3, [r7, #3]
 800a99c:	4613      	mov	r3, r2
 800a99e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a9a8:	78fb      	ldrb	r3, [r7, #3]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d107      	bne.n	800a9be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a9ae:	883b      	ldrh	r3, [r7, #0]
 800a9b0:	0419      	lsls	r1, r3, #16
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	68ba      	ldr	r2, [r7, #8]
 800a9b8:	430a      	orrs	r2, r1
 800a9ba:	629a      	str	r2, [r3, #40]	; 0x28
 800a9bc:	e028      	b.n	800aa10 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9c4:	0c1b      	lsrs	r3, r3, #16
 800a9c6:	68ba      	ldr	r2, [r7, #8]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	73fb      	strb	r3, [r7, #15]
 800a9d0:	e00d      	b.n	800a9ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	7bfb      	ldrb	r3, [r7, #15]
 800a9d8:	3340      	adds	r3, #64	; 0x40
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	4413      	add	r3, r2
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	0c1b      	lsrs	r3, r3, #16
 800a9e2:	68ba      	ldr	r2, [r7, #8]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a9e8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	73fb      	strb	r3, [r7, #15]
 800a9ee:	7bfa      	ldrb	r2, [r7, #15]
 800a9f0:	78fb      	ldrb	r3, [r7, #3]
 800a9f2:	3b01      	subs	r3, #1
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d3ec      	bcc.n	800a9d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a9f8:	883b      	ldrh	r3, [r7, #0]
 800a9fa:	0418      	lsls	r0, r3, #16
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6819      	ldr	r1, [r3, #0]
 800aa00:	78fb      	ldrb	r3, [r7, #3]
 800aa02:	3b01      	subs	r3, #1
 800aa04:	68ba      	ldr	r2, [r7, #8]
 800aa06:	4302      	orrs	r2, r0
 800aa08:	3340      	adds	r3, #64	; 0x40
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	440b      	add	r3, r1
 800aa0e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800aa10:	2300      	movs	r3, #0
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3714      	adds	r7, #20
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr

0800aa1e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800aa1e:	b480      	push	{r7}
 800aa20:	b083      	sub	sp, #12
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
 800aa26:	460b      	mov	r3, r1
 800aa28:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	887a      	ldrh	r2, [r7, #2]
 800aa30:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800aa32:	2300      	movs	r3, #0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b085      	sub	sp, #20
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2201      	movs	r2, #1
 800aa52:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	699b      	ldr	r3, [r3, #24]
 800aa62:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa72:	f043 0303 	orr.w	r3, r3, #3
 800aa76:	68fa      	ldr	r2, [r7, #12]
 800aa78:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3714      	adds	r7, #20
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aa8c:	4b05      	ldr	r3, [pc, #20]	; (800aaa4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a04      	ldr	r2, [pc, #16]	; (800aaa4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800aa92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa96:	6013      	str	r3, [r2, #0]
}
 800aa98:	bf00      	nop
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr
 800aaa2:	bf00      	nop
 800aaa4:	40007000 	.word	0x40007000

0800aaa8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800aaac:	4b04      	ldr	r3, [pc, #16]	; (800aac0 <HAL_PWREx_GetVoltageRange+0x18>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop
 800aac0:	40007000 	.word	0x40007000

0800aac4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b085      	sub	sp, #20
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aad2:	d130      	bne.n	800ab36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800aad4:	4b23      	ldr	r3, [pc, #140]	; (800ab64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aadc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aae0:	d038      	beq.n	800ab54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800aae2:	4b20      	ldr	r3, [pc, #128]	; (800ab64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800aaea:	4a1e      	ldr	r2, [pc, #120]	; (800ab64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800aaec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aaf0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800aaf2:	4b1d      	ldr	r3, [pc, #116]	; (800ab68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	2232      	movs	r2, #50	; 0x32
 800aaf8:	fb02 f303 	mul.w	r3, r2, r3
 800aafc:	4a1b      	ldr	r2, [pc, #108]	; (800ab6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800aafe:	fba2 2303 	umull	r2, r3, r2, r3
 800ab02:	0c9b      	lsrs	r3, r3, #18
 800ab04:	3301      	adds	r3, #1
 800ab06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab08:	e002      	b.n	800ab10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab10:	4b14      	ldr	r3, [pc, #80]	; (800ab64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ab12:	695b      	ldr	r3, [r3, #20]
 800ab14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab1c:	d102      	bne.n	800ab24 <HAL_PWREx_ControlVoltageScaling+0x60>
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1f2      	bne.n	800ab0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ab24:	4b0f      	ldr	r3, [pc, #60]	; (800ab64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ab26:	695b      	ldr	r3, [r3, #20]
 800ab28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab30:	d110      	bne.n	800ab54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800ab32:	2303      	movs	r3, #3
 800ab34:	e00f      	b.n	800ab56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800ab36:	4b0b      	ldr	r3, [pc, #44]	; (800ab64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ab3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab42:	d007      	beq.n	800ab54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ab44:	4b07      	ldr	r3, [pc, #28]	; (800ab64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ab4c:	4a05      	ldr	r2, [pc, #20]	; (800ab64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ab4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ab52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3714      	adds	r7, #20
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	40007000 	.word	0x40007000
 800ab68:	20000190 	.word	0x20000190
 800ab6c:	431bde83 	.word	0x431bde83

0800ab70 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800ab70:	b480      	push	{r7}
 800ab72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800ab74:	4b05      	ldr	r3, [pc, #20]	; (800ab8c <HAL_PWREx_EnableVddUSB+0x1c>)
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	4a04      	ldr	r2, [pc, #16]	; (800ab8c <HAL_PWREx_EnableVddUSB+0x1c>)
 800ab7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ab7e:	6053      	str	r3, [r2, #4]
}
 800ab80:	bf00      	nop
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr
 800ab8a:	bf00      	nop
 800ab8c:	40007000 	.word	0x40007000

0800ab90 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800ab90:	b480      	push	{r7}
 800ab92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800ab94:	4b05      	ldr	r3, [pc, #20]	; (800abac <HAL_PWREx_EnableVddIO2+0x1c>)
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	4a04      	ldr	r2, [pc, #16]	; (800abac <HAL_PWREx_EnableVddIO2+0x1c>)
 800ab9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ab9e:	6053      	str	r3, [r2, #4]
}
 800aba0:	bf00      	nop
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr
 800abaa:	bf00      	nop
 800abac:	40007000 	.word	0x40007000

0800abb0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b086      	sub	sp, #24
 800abb4:	af02      	add	r7, sp, #8
 800abb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800abb8:	f7fc fa56 	bl	8007068 <HAL_GetTick>
 800abbc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d101      	bne.n	800abc8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	e069      	b.n	800ac9c <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d10b      	bne.n	800abec <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2200      	movs	r2, #0
 800abd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f7f6 fe2b 	bl	8001838 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800abe2:	f241 3188 	movw	r1, #5000	; 0x1388
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 f85e 	bl	800aca8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	689b      	ldr	r3, [r3, #8]
 800abfa:	3b01      	subs	r3, #1
 800abfc:	021a      	lsls	r2, r3, #8
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	430a      	orrs	r2, r1
 800ac04:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac0a:	9300      	str	r3, [sp, #0]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	2120      	movs	r1, #32
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 f856 	bl	800acc4 <QSPI_WaitFlagStateUntilTimeout>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800ac1c:	7afb      	ldrb	r3, [r7, #11]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d137      	bne.n	800ac92 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ac2c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	6852      	ldr	r2, [r2, #4]
 800ac34:	0611      	lsls	r1, r2, #24
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	68d2      	ldr	r2, [r2, #12]
 800ac3a:	4311      	orrs	r1, r2
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	69d2      	ldr	r2, [r2, #28]
 800ac40:	4311      	orrs	r1, r2
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	6a12      	ldr	r2, [r2, #32]
 800ac46:	4311      	orrs	r1, r2
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	6812      	ldr	r2, [r2, #0]
 800ac4c:	430b      	orrs	r3, r1
 800ac4e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	685a      	ldr	r2, [r3, #4]
 800ac56:	4b13      	ldr	r3, [pc, #76]	; (800aca4 <HAL_QSPI_Init+0xf4>)
 800ac58:	4013      	ands	r3, r2
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	6912      	ldr	r2, [r2, #16]
 800ac5e:	0411      	lsls	r1, r2, #16
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	6952      	ldr	r2, [r2, #20]
 800ac64:	4311      	orrs	r1, r2
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	6992      	ldr	r2, [r2, #24]
 800ac6a:	4311      	orrs	r1, r2
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	6812      	ldr	r2, [r2, #0]
 800ac70:	430b      	orrs	r3, r1
 800ac72:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	681a      	ldr	r2, [r3, #0]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f042 0201 	orr.w	r2, r2, #1
 800ac82:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2200      	movs	r2, #0
 800ac96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800ac9a:	7afb      	ldrb	r3, [r7, #11]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3710      	adds	r7, #16
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	ffe0f8fe 	.word	0xffe0f8fe

0800aca8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	683a      	ldr	r2, [r7, #0]
 800acb6:	649a      	str	r2, [r3, #72]	; 0x48
}
 800acb8:	bf00      	nop
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	60b9      	str	r1, [r7, #8]
 800acce:	603b      	str	r3, [r7, #0]
 800acd0:	4613      	mov	r3, r2
 800acd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800acd4:	e01a      	b.n	800ad0c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acdc:	d016      	beq.n	800ad0c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800acde:	f7fc f9c3 	bl	8007068 <HAL_GetTick>
 800ace2:	4602      	mov	r2, r0
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	1ad3      	subs	r3, r2, r3
 800ace8:	69ba      	ldr	r2, [r7, #24]
 800acea:	429a      	cmp	r2, r3
 800acec:	d302      	bcc.n	800acf4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d10b      	bne.n	800ad0c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2204      	movs	r2, #4
 800acf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad00:	f043 0201 	orr.w	r2, r3, #1
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e00e      	b.n	800ad2a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	689a      	ldr	r2, [r3, #8]
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	4013      	ands	r3, r2
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	bf14      	ite	ne
 800ad1a:	2301      	movne	r3, #1
 800ad1c:	2300      	moveq	r3, #0
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	461a      	mov	r2, r3
 800ad22:	79fb      	ldrb	r3, [r7, #7]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d1d6      	bne.n	800acd6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ad28:	2300      	movs	r3, #0
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3710      	adds	r7, #16
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
	...

0800ad34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b088      	sub	sp, #32
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d102      	bne.n	800ad48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800ad42:	2301      	movs	r3, #1
 800ad44:	f000 bc08 	b.w	800b558 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad48:	4b96      	ldr	r3, [pc, #600]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800ad4a:	689b      	ldr	r3, [r3, #8]
 800ad4c:	f003 030c 	and.w	r3, r3, #12
 800ad50:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ad52:	4b94      	ldr	r3, [pc, #592]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800ad54:	68db      	ldr	r3, [r3, #12]
 800ad56:	f003 0303 	and.w	r3, r3, #3
 800ad5a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f003 0310 	and.w	r3, r3, #16
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f000 80e4 	beq.w	800af32 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ad6a:	69bb      	ldr	r3, [r7, #24]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d007      	beq.n	800ad80 <HAL_RCC_OscConfig+0x4c>
 800ad70:	69bb      	ldr	r3, [r7, #24]
 800ad72:	2b0c      	cmp	r3, #12
 800ad74:	f040 808b 	bne.w	800ae8e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	f040 8087 	bne.w	800ae8e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ad80:	4b88      	ldr	r3, [pc, #544]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f003 0302 	and.w	r3, r3, #2
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d005      	beq.n	800ad98 <HAL_RCC_OscConfig+0x64>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	699b      	ldr	r3, [r3, #24]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d101      	bne.n	800ad98 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800ad94:	2301      	movs	r3, #1
 800ad96:	e3df      	b.n	800b558 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6a1a      	ldr	r2, [r3, #32]
 800ad9c:	4b81      	ldr	r3, [pc, #516]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f003 0308 	and.w	r3, r3, #8
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d004      	beq.n	800adb2 <HAL_RCC_OscConfig+0x7e>
 800ada8:	4b7e      	ldr	r3, [pc, #504]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800adb0:	e005      	b.n	800adbe <HAL_RCC_OscConfig+0x8a>
 800adb2:	4b7c      	ldr	r3, [pc, #496]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800adb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800adb8:	091b      	lsrs	r3, r3, #4
 800adba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d223      	bcs.n	800ae0a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6a1b      	ldr	r3, [r3, #32]
 800adc6:	4618      	mov	r0, r3
 800adc8:	f000 fd92 	bl	800b8f0 <RCC_SetFlashLatencyFromMSIRange>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b00      	cmp	r3, #0
 800add0:	d001      	beq.n	800add6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800add2:	2301      	movs	r3, #1
 800add4:	e3c0      	b.n	800b558 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800add6:	4b73      	ldr	r3, [pc, #460]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a72      	ldr	r2, [pc, #456]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800addc:	f043 0308 	orr.w	r3, r3, #8
 800ade0:	6013      	str	r3, [r2, #0]
 800ade2:	4b70      	ldr	r3, [pc, #448]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6a1b      	ldr	r3, [r3, #32]
 800adee:	496d      	ldr	r1, [pc, #436]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800adf0:	4313      	orrs	r3, r2
 800adf2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800adf4:	4b6b      	ldr	r3, [pc, #428]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	69db      	ldr	r3, [r3, #28]
 800ae00:	021b      	lsls	r3, r3, #8
 800ae02:	4968      	ldr	r1, [pc, #416]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800ae04:	4313      	orrs	r3, r2
 800ae06:	604b      	str	r3, [r1, #4]
 800ae08:	e025      	b.n	800ae56 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ae0a:	4b66      	ldr	r3, [pc, #408]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a65      	ldr	r2, [pc, #404]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800ae10:	f043 0308 	orr.w	r3, r3, #8
 800ae14:	6013      	str	r3, [r2, #0]
 800ae16:	4b63      	ldr	r3, [pc, #396]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6a1b      	ldr	r3, [r3, #32]
 800ae22:	4960      	ldr	r1, [pc, #384]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800ae24:	4313      	orrs	r3, r2
 800ae26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ae28:	4b5e      	ldr	r3, [pc, #376]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	69db      	ldr	r3, [r3, #28]
 800ae34:	021b      	lsls	r3, r3, #8
 800ae36:	495b      	ldr	r1, [pc, #364]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ae3c:	69bb      	ldr	r3, [r7, #24]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d109      	bne.n	800ae56 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a1b      	ldr	r3, [r3, #32]
 800ae46:	4618      	mov	r0, r3
 800ae48:	f000 fd52 	bl	800b8f0 <RCC_SetFlashLatencyFromMSIRange>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d001      	beq.n	800ae56 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	e380      	b.n	800b558 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ae56:	f000 fc87 	bl	800b768 <HAL_RCC_GetSysClockFreq>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	4b51      	ldr	r3, [pc, #324]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	091b      	lsrs	r3, r3, #4
 800ae62:	f003 030f 	and.w	r3, r3, #15
 800ae66:	4950      	ldr	r1, [pc, #320]	; (800afa8 <HAL_RCC_OscConfig+0x274>)
 800ae68:	5ccb      	ldrb	r3, [r1, r3]
 800ae6a:	f003 031f 	and.w	r3, r3, #31
 800ae6e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae72:	4a4e      	ldr	r2, [pc, #312]	; (800afac <HAL_RCC_OscConfig+0x278>)
 800ae74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800ae76:	4b4e      	ldr	r3, [pc, #312]	; (800afb0 <HAL_RCC_OscConfig+0x27c>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7fc f8a4 	bl	8006fc8 <HAL_InitTick>
 800ae80:	4603      	mov	r3, r0
 800ae82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800ae84:	7bfb      	ldrb	r3, [r7, #15]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d052      	beq.n	800af30 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800ae8a:	7bfb      	ldrb	r3, [r7, #15]
 800ae8c:	e364      	b.n	800b558 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	699b      	ldr	r3, [r3, #24]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d032      	beq.n	800aefc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800ae96:	4b43      	ldr	r3, [pc, #268]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a42      	ldr	r2, [pc, #264]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800ae9c:	f043 0301 	orr.w	r3, r3, #1
 800aea0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800aea2:	f7fc f8e1 	bl	8007068 <HAL_GetTick>
 800aea6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800aea8:	e008      	b.n	800aebc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800aeaa:	f7fc f8dd 	bl	8007068 <HAL_GetTick>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	d901      	bls.n	800aebc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800aeb8:	2303      	movs	r3, #3
 800aeba:	e34d      	b.n	800b558 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800aebc:	4b39      	ldr	r3, [pc, #228]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f003 0302 	and.w	r3, r3, #2
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d0f0      	beq.n	800aeaa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800aec8:	4b36      	ldr	r3, [pc, #216]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a35      	ldr	r2, [pc, #212]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800aece:	f043 0308 	orr.w	r3, r3, #8
 800aed2:	6013      	str	r3, [r2, #0]
 800aed4:	4b33      	ldr	r3, [pc, #204]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6a1b      	ldr	r3, [r3, #32]
 800aee0:	4930      	ldr	r1, [pc, #192]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800aee2:	4313      	orrs	r3, r2
 800aee4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800aee6:	4b2f      	ldr	r3, [pc, #188]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800aee8:	685b      	ldr	r3, [r3, #4]
 800aeea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	69db      	ldr	r3, [r3, #28]
 800aef2:	021b      	lsls	r3, r3, #8
 800aef4:	492b      	ldr	r1, [pc, #172]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800aef6:	4313      	orrs	r3, r2
 800aef8:	604b      	str	r3, [r1, #4]
 800aefa:	e01a      	b.n	800af32 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800aefc:	4b29      	ldr	r3, [pc, #164]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a28      	ldr	r2, [pc, #160]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800af02:	f023 0301 	bic.w	r3, r3, #1
 800af06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800af08:	f7fc f8ae 	bl	8007068 <HAL_GetTick>
 800af0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800af0e:	e008      	b.n	800af22 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800af10:	f7fc f8aa 	bl	8007068 <HAL_GetTick>
 800af14:	4602      	mov	r2, r0
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	1ad3      	subs	r3, r2, r3
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	d901      	bls.n	800af22 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800af1e:	2303      	movs	r3, #3
 800af20:	e31a      	b.n	800b558 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800af22:	4b20      	ldr	r3, [pc, #128]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f003 0302 	and.w	r3, r3, #2
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d1f0      	bne.n	800af10 <HAL_RCC_OscConfig+0x1dc>
 800af2e:	e000      	b.n	800af32 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800af30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f003 0301 	and.w	r3, r3, #1
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d073      	beq.n	800b026 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800af3e:	69bb      	ldr	r3, [r7, #24]
 800af40:	2b08      	cmp	r3, #8
 800af42:	d005      	beq.n	800af50 <HAL_RCC_OscConfig+0x21c>
 800af44:	69bb      	ldr	r3, [r7, #24]
 800af46:	2b0c      	cmp	r3, #12
 800af48:	d10e      	bne.n	800af68 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	2b03      	cmp	r3, #3
 800af4e:	d10b      	bne.n	800af68 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af50:	4b14      	ldr	r3, [pc, #80]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d063      	beq.n	800b024 <HAL_RCC_OscConfig+0x2f0>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d15f      	bne.n	800b024 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800af64:	2301      	movs	r3, #1
 800af66:	e2f7      	b.n	800b558 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af70:	d106      	bne.n	800af80 <HAL_RCC_OscConfig+0x24c>
 800af72:	4b0c      	ldr	r3, [pc, #48]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a0b      	ldr	r2, [pc, #44]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800af78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af7c:	6013      	str	r3, [r2, #0]
 800af7e:	e025      	b.n	800afcc <HAL_RCC_OscConfig+0x298>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af88:	d114      	bne.n	800afb4 <HAL_RCC_OscConfig+0x280>
 800af8a:	4b06      	ldr	r3, [pc, #24]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4a05      	ldr	r2, [pc, #20]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800af90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af94:	6013      	str	r3, [r2, #0]
 800af96:	4b03      	ldr	r3, [pc, #12]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4a02      	ldr	r2, [pc, #8]	; (800afa4 <HAL_RCC_OscConfig+0x270>)
 800af9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afa0:	6013      	str	r3, [r2, #0]
 800afa2:	e013      	b.n	800afcc <HAL_RCC_OscConfig+0x298>
 800afa4:	40021000 	.word	0x40021000
 800afa8:	080134fc 	.word	0x080134fc
 800afac:	20000190 	.word	0x20000190
 800afb0:	20000450 	.word	0x20000450
 800afb4:	4ba0      	ldr	r3, [pc, #640]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4a9f      	ldr	r2, [pc, #636]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800afba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afbe:	6013      	str	r3, [r2, #0]
 800afc0:	4b9d      	ldr	r3, [pc, #628]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a9c      	ldr	r2, [pc, #624]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800afc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800afca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d013      	beq.n	800affc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afd4:	f7fc f848 	bl	8007068 <HAL_GetTick>
 800afd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800afda:	e008      	b.n	800afee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800afdc:	f7fc f844 	bl	8007068 <HAL_GetTick>
 800afe0:	4602      	mov	r2, r0
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	1ad3      	subs	r3, r2, r3
 800afe6:	2b64      	cmp	r3, #100	; 0x64
 800afe8:	d901      	bls.n	800afee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800afea:	2303      	movs	r3, #3
 800afec:	e2b4      	b.n	800b558 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800afee:	4b92      	ldr	r3, [pc, #584]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d0f0      	beq.n	800afdc <HAL_RCC_OscConfig+0x2a8>
 800affa:	e014      	b.n	800b026 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800affc:	f7fc f834 	bl	8007068 <HAL_GetTick>
 800b000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b002:	e008      	b.n	800b016 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b004:	f7fc f830 	bl	8007068 <HAL_GetTick>
 800b008:	4602      	mov	r2, r0
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	1ad3      	subs	r3, r2, r3
 800b00e:	2b64      	cmp	r3, #100	; 0x64
 800b010:	d901      	bls.n	800b016 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b012:	2303      	movs	r3, #3
 800b014:	e2a0      	b.n	800b558 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b016:	4b88      	ldr	r3, [pc, #544]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d1f0      	bne.n	800b004 <HAL_RCC_OscConfig+0x2d0>
 800b022:	e000      	b.n	800b026 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f003 0302 	and.w	r3, r3, #2
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d060      	beq.n	800b0f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	2b04      	cmp	r3, #4
 800b036:	d005      	beq.n	800b044 <HAL_RCC_OscConfig+0x310>
 800b038:	69bb      	ldr	r3, [r7, #24]
 800b03a:	2b0c      	cmp	r3, #12
 800b03c:	d119      	bne.n	800b072 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	2b02      	cmp	r3, #2
 800b042:	d116      	bne.n	800b072 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b044:	4b7c      	ldr	r3, [pc, #496]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d005      	beq.n	800b05c <HAL_RCC_OscConfig+0x328>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d101      	bne.n	800b05c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800b058:	2301      	movs	r3, #1
 800b05a:	e27d      	b.n	800b558 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b05c:	4b76      	ldr	r3, [pc, #472]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	691b      	ldr	r3, [r3, #16]
 800b068:	061b      	lsls	r3, r3, #24
 800b06a:	4973      	ldr	r1, [pc, #460]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b06c:	4313      	orrs	r3, r2
 800b06e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b070:	e040      	b.n	800b0f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d023      	beq.n	800b0c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b07a:	4b6f      	ldr	r3, [pc, #444]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a6e      	ldr	r2, [pc, #440]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b086:	f7fb ffef 	bl	8007068 <HAL_GetTick>
 800b08a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b08c:	e008      	b.n	800b0a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b08e:	f7fb ffeb 	bl	8007068 <HAL_GetTick>
 800b092:	4602      	mov	r2, r0
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	1ad3      	subs	r3, r2, r3
 800b098:	2b02      	cmp	r3, #2
 800b09a:	d901      	bls.n	800b0a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800b09c:	2303      	movs	r3, #3
 800b09e:	e25b      	b.n	800b558 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b0a0:	4b65      	ldr	r3, [pc, #404]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d0f0      	beq.n	800b08e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0ac:	4b62      	ldr	r3, [pc, #392]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	691b      	ldr	r3, [r3, #16]
 800b0b8:	061b      	lsls	r3, r3, #24
 800b0ba:	495f      	ldr	r1, [pc, #380]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	604b      	str	r3, [r1, #4]
 800b0c0:	e018      	b.n	800b0f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b0c2:	4b5d      	ldr	r3, [pc, #372]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a5c      	ldr	r2, [pc, #368]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b0c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0ce:	f7fb ffcb 	bl	8007068 <HAL_GetTick>
 800b0d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b0d4:	e008      	b.n	800b0e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b0d6:	f7fb ffc7 	bl	8007068 <HAL_GetTick>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	1ad3      	subs	r3, r2, r3
 800b0e0:	2b02      	cmp	r3, #2
 800b0e2:	d901      	bls.n	800b0e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800b0e4:	2303      	movs	r3, #3
 800b0e6:	e237      	b.n	800b558 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b0e8:	4b53      	ldr	r3, [pc, #332]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d1f0      	bne.n	800b0d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f003 0308 	and.w	r3, r3, #8
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d03c      	beq.n	800b17a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	695b      	ldr	r3, [r3, #20]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d01c      	beq.n	800b142 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b108:	4b4b      	ldr	r3, [pc, #300]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b10a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b10e:	4a4a      	ldr	r2, [pc, #296]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b110:	f043 0301 	orr.w	r3, r3, #1
 800b114:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b118:	f7fb ffa6 	bl	8007068 <HAL_GetTick>
 800b11c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b11e:	e008      	b.n	800b132 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b120:	f7fb ffa2 	bl	8007068 <HAL_GetTick>
 800b124:	4602      	mov	r2, r0
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	d901      	bls.n	800b132 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800b12e:	2303      	movs	r3, #3
 800b130:	e212      	b.n	800b558 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b132:	4b41      	ldr	r3, [pc, #260]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b138:	f003 0302 	and.w	r3, r3, #2
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d0ef      	beq.n	800b120 <HAL_RCC_OscConfig+0x3ec>
 800b140:	e01b      	b.n	800b17a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b142:	4b3d      	ldr	r3, [pc, #244]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b144:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b148:	4a3b      	ldr	r2, [pc, #236]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b14a:	f023 0301 	bic.w	r3, r3, #1
 800b14e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b152:	f7fb ff89 	bl	8007068 <HAL_GetTick>
 800b156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b158:	e008      	b.n	800b16c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b15a:	f7fb ff85 	bl	8007068 <HAL_GetTick>
 800b15e:	4602      	mov	r2, r0
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	1ad3      	subs	r3, r2, r3
 800b164:	2b02      	cmp	r3, #2
 800b166:	d901      	bls.n	800b16c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800b168:	2303      	movs	r3, #3
 800b16a:	e1f5      	b.n	800b558 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b16c:	4b32      	ldr	r3, [pc, #200]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b16e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b172:	f003 0302 	and.w	r3, r3, #2
 800b176:	2b00      	cmp	r3, #0
 800b178:	d1ef      	bne.n	800b15a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f003 0304 	and.w	r3, r3, #4
 800b182:	2b00      	cmp	r3, #0
 800b184:	f000 80a6 	beq.w	800b2d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b188:	2300      	movs	r3, #0
 800b18a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800b18c:	4b2a      	ldr	r3, [pc, #168]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b18e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b194:	2b00      	cmp	r3, #0
 800b196:	d10d      	bne.n	800b1b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b198:	4b27      	ldr	r3, [pc, #156]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b19a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b19c:	4a26      	ldr	r2, [pc, #152]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b19e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1a2:	6593      	str	r3, [r2, #88]	; 0x58
 800b1a4:	4b24      	ldr	r3, [pc, #144]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b1a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1ac:	60bb      	str	r3, [r7, #8]
 800b1ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b1b4:	4b21      	ldr	r3, [pc, #132]	; (800b23c <HAL_RCC_OscConfig+0x508>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d118      	bne.n	800b1f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b1c0:	4b1e      	ldr	r3, [pc, #120]	; (800b23c <HAL_RCC_OscConfig+0x508>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a1d      	ldr	r2, [pc, #116]	; (800b23c <HAL_RCC_OscConfig+0x508>)
 800b1c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b1cc:	f7fb ff4c 	bl	8007068 <HAL_GetTick>
 800b1d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b1d2:	e008      	b.n	800b1e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1d4:	f7fb ff48 	bl	8007068 <HAL_GetTick>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	1ad3      	subs	r3, r2, r3
 800b1de:	2b02      	cmp	r3, #2
 800b1e0:	d901      	bls.n	800b1e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800b1e2:	2303      	movs	r3, #3
 800b1e4:	e1b8      	b.n	800b558 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b1e6:	4b15      	ldr	r3, [pc, #84]	; (800b23c <HAL_RCC_OscConfig+0x508>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d0f0      	beq.n	800b1d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d108      	bne.n	800b20c <HAL_RCC_OscConfig+0x4d8>
 800b1fa:	4b0f      	ldr	r3, [pc, #60]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b1fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b200:	4a0d      	ldr	r2, [pc, #52]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b202:	f043 0301 	orr.w	r3, r3, #1
 800b206:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b20a:	e029      	b.n	800b260 <HAL_RCC_OscConfig+0x52c>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	689b      	ldr	r3, [r3, #8]
 800b210:	2b05      	cmp	r3, #5
 800b212:	d115      	bne.n	800b240 <HAL_RCC_OscConfig+0x50c>
 800b214:	4b08      	ldr	r3, [pc, #32]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b21a:	4a07      	ldr	r2, [pc, #28]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b21c:	f043 0304 	orr.w	r3, r3, #4
 800b220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b224:	4b04      	ldr	r3, [pc, #16]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b22a:	4a03      	ldr	r2, [pc, #12]	; (800b238 <HAL_RCC_OscConfig+0x504>)
 800b22c:	f043 0301 	orr.w	r3, r3, #1
 800b230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b234:	e014      	b.n	800b260 <HAL_RCC_OscConfig+0x52c>
 800b236:	bf00      	nop
 800b238:	40021000 	.word	0x40021000
 800b23c:	40007000 	.word	0x40007000
 800b240:	4b9d      	ldr	r3, [pc, #628]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b246:	4a9c      	ldr	r2, [pc, #624]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b248:	f023 0301 	bic.w	r3, r3, #1
 800b24c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b250:	4b99      	ldr	r3, [pc, #612]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b256:	4a98      	ldr	r2, [pc, #608]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b258:	f023 0304 	bic.w	r3, r3, #4
 800b25c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d016      	beq.n	800b296 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b268:	f7fb fefe 	bl	8007068 <HAL_GetTick>
 800b26c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b26e:	e00a      	b.n	800b286 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b270:	f7fb fefa 	bl	8007068 <HAL_GetTick>
 800b274:	4602      	mov	r2, r0
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	1ad3      	subs	r3, r2, r3
 800b27a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b27e:	4293      	cmp	r3, r2
 800b280:	d901      	bls.n	800b286 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800b282:	2303      	movs	r3, #3
 800b284:	e168      	b.n	800b558 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b286:	4b8c      	ldr	r3, [pc, #560]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b28c:	f003 0302 	and.w	r3, r3, #2
 800b290:	2b00      	cmp	r3, #0
 800b292:	d0ed      	beq.n	800b270 <HAL_RCC_OscConfig+0x53c>
 800b294:	e015      	b.n	800b2c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b296:	f7fb fee7 	bl	8007068 <HAL_GetTick>
 800b29a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b29c:	e00a      	b.n	800b2b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b29e:	f7fb fee3 	bl	8007068 <HAL_GetTick>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	1ad3      	subs	r3, r2, r3
 800b2a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d901      	bls.n	800b2b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800b2b0:	2303      	movs	r3, #3
 800b2b2:	e151      	b.n	800b558 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b2b4:	4b80      	ldr	r3, [pc, #512]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b2b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2ba:	f003 0302 	and.w	r3, r3, #2
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d1ed      	bne.n	800b29e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b2c2:	7ffb      	ldrb	r3, [r7, #31]
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d105      	bne.n	800b2d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b2c8:	4b7b      	ldr	r3, [pc, #492]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b2ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2cc:	4a7a      	ldr	r2, [pc, #488]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b2ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f003 0320 	and.w	r3, r3, #32
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d03c      	beq.n	800b35a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d01c      	beq.n	800b322 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b2e8:	4b73      	ldr	r3, [pc, #460]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b2ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b2ee:	4a72      	ldr	r2, [pc, #456]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b2f0:	f043 0301 	orr.w	r3, r3, #1
 800b2f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2f8:	f7fb feb6 	bl	8007068 <HAL_GetTick>
 800b2fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b2fe:	e008      	b.n	800b312 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b300:	f7fb feb2 	bl	8007068 <HAL_GetTick>
 800b304:	4602      	mov	r2, r0
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	1ad3      	subs	r3, r2, r3
 800b30a:	2b02      	cmp	r3, #2
 800b30c:	d901      	bls.n	800b312 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800b30e:	2303      	movs	r3, #3
 800b310:	e122      	b.n	800b558 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b312:	4b69      	ldr	r3, [pc, #420]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b314:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b318:	f003 0302 	and.w	r3, r3, #2
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d0ef      	beq.n	800b300 <HAL_RCC_OscConfig+0x5cc>
 800b320:	e01b      	b.n	800b35a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b322:	4b65      	ldr	r3, [pc, #404]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b324:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b328:	4a63      	ldr	r2, [pc, #396]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b32a:	f023 0301 	bic.w	r3, r3, #1
 800b32e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b332:	f7fb fe99 	bl	8007068 <HAL_GetTick>
 800b336:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b338:	e008      	b.n	800b34c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b33a:	f7fb fe95 	bl	8007068 <HAL_GetTick>
 800b33e:	4602      	mov	r2, r0
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	1ad3      	subs	r3, r2, r3
 800b344:	2b02      	cmp	r3, #2
 800b346:	d901      	bls.n	800b34c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800b348:	2303      	movs	r3, #3
 800b34a:	e105      	b.n	800b558 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b34c:	4b5a      	ldr	r3, [pc, #360]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b34e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b352:	f003 0302 	and.w	r3, r3, #2
 800b356:	2b00      	cmp	r3, #0
 800b358:	d1ef      	bne.n	800b33a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b35e:	2b00      	cmp	r3, #0
 800b360:	f000 80f9 	beq.w	800b556 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b368:	2b02      	cmp	r3, #2
 800b36a:	f040 80cf 	bne.w	800b50c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800b36e:	4b52      	ldr	r3, [pc, #328]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	f003 0203 	and.w	r2, r3, #3
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b37e:	429a      	cmp	r2, r3
 800b380:	d12c      	bne.n	800b3dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b38c:	3b01      	subs	r3, #1
 800b38e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b390:	429a      	cmp	r2, r3
 800b392:	d123      	bne.n	800b3dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b39e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d11b      	bne.n	800b3dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d113      	bne.n	800b3dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3be:	085b      	lsrs	r3, r3, #1
 800b3c0:	3b01      	subs	r3, #1
 800b3c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d109      	bne.n	800b3dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3d2:	085b      	lsrs	r3, r3, #1
 800b3d4:	3b01      	subs	r3, #1
 800b3d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d071      	beq.n	800b4c0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b3dc:	69bb      	ldr	r3, [r7, #24]
 800b3de:	2b0c      	cmp	r3, #12
 800b3e0:	d068      	beq.n	800b4b4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b3e2:	4b35      	ldr	r3, [pc, #212]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d105      	bne.n	800b3fa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800b3ee:	4b32      	ldr	r3, [pc, #200]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d001      	beq.n	800b3fe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	e0ac      	b.n	800b558 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b3fe:	4b2e      	ldr	r3, [pc, #184]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4a2d      	ldr	r2, [pc, #180]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b404:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b408:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b40a:	f7fb fe2d 	bl	8007068 <HAL_GetTick>
 800b40e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b410:	e008      	b.n	800b424 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b412:	f7fb fe29 	bl	8007068 <HAL_GetTick>
 800b416:	4602      	mov	r2, r0
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	1ad3      	subs	r3, r2, r3
 800b41c:	2b02      	cmp	r3, #2
 800b41e:	d901      	bls.n	800b424 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800b420:	2303      	movs	r3, #3
 800b422:	e099      	b.n	800b558 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b424:	4b24      	ldr	r3, [pc, #144]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d1f0      	bne.n	800b412 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b430:	4b21      	ldr	r3, [pc, #132]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b432:	68da      	ldr	r2, [r3, #12]
 800b434:	4b21      	ldr	r3, [pc, #132]	; (800b4bc <HAL_RCC_OscConfig+0x788>)
 800b436:	4013      	ands	r3, r2
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b440:	3a01      	subs	r2, #1
 800b442:	0112      	lsls	r2, r2, #4
 800b444:	4311      	orrs	r1, r2
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b44a:	0212      	lsls	r2, r2, #8
 800b44c:	4311      	orrs	r1, r2
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b452:	0852      	lsrs	r2, r2, #1
 800b454:	3a01      	subs	r2, #1
 800b456:	0552      	lsls	r2, r2, #21
 800b458:	4311      	orrs	r1, r2
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b45e:	0852      	lsrs	r2, r2, #1
 800b460:	3a01      	subs	r2, #1
 800b462:	0652      	lsls	r2, r2, #25
 800b464:	4311      	orrs	r1, r2
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b46a:	06d2      	lsls	r2, r2, #27
 800b46c:	430a      	orrs	r2, r1
 800b46e:	4912      	ldr	r1, [pc, #72]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b470:	4313      	orrs	r3, r2
 800b472:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b474:	4b10      	ldr	r3, [pc, #64]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4a0f      	ldr	r2, [pc, #60]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b47a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b47e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b480:	4b0d      	ldr	r3, [pc, #52]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	4a0c      	ldr	r2, [pc, #48]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b48a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b48c:	f7fb fdec 	bl	8007068 <HAL_GetTick>
 800b490:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b492:	e008      	b.n	800b4a6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b494:	f7fb fde8 	bl	8007068 <HAL_GetTick>
 800b498:	4602      	mov	r2, r0
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	1ad3      	subs	r3, r2, r3
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	d901      	bls.n	800b4a6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800b4a2:	2303      	movs	r3, #3
 800b4a4:	e058      	b.n	800b558 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b4a6:	4b04      	ldr	r3, [pc, #16]	; (800b4b8 <HAL_RCC_OscConfig+0x784>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d0f0      	beq.n	800b494 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b4b2:	e050      	b.n	800b556 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	e04f      	b.n	800b558 <HAL_RCC_OscConfig+0x824>
 800b4b8:	40021000 	.word	0x40021000
 800b4bc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b4c0:	4b27      	ldr	r3, [pc, #156]	; (800b560 <HAL_RCC_OscConfig+0x82c>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d144      	bne.n	800b556 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b4cc:	4b24      	ldr	r3, [pc, #144]	; (800b560 <HAL_RCC_OscConfig+0x82c>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a23      	ldr	r2, [pc, #140]	; (800b560 <HAL_RCC_OscConfig+0x82c>)
 800b4d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b4d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b4d8:	4b21      	ldr	r3, [pc, #132]	; (800b560 <HAL_RCC_OscConfig+0x82c>)
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	4a20      	ldr	r2, [pc, #128]	; (800b560 <HAL_RCC_OscConfig+0x82c>)
 800b4de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b4e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b4e4:	f7fb fdc0 	bl	8007068 <HAL_GetTick>
 800b4e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b4ea:	e008      	b.n	800b4fe <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b4ec:	f7fb fdbc 	bl	8007068 <HAL_GetTick>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	1ad3      	subs	r3, r2, r3
 800b4f6:	2b02      	cmp	r3, #2
 800b4f8:	d901      	bls.n	800b4fe <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800b4fa:	2303      	movs	r3, #3
 800b4fc:	e02c      	b.n	800b558 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b4fe:	4b18      	ldr	r3, [pc, #96]	; (800b560 <HAL_RCC_OscConfig+0x82c>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b506:	2b00      	cmp	r3, #0
 800b508:	d0f0      	beq.n	800b4ec <HAL_RCC_OscConfig+0x7b8>
 800b50a:	e024      	b.n	800b556 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b50c:	69bb      	ldr	r3, [r7, #24]
 800b50e:	2b0c      	cmp	r3, #12
 800b510:	d01f      	beq.n	800b552 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b512:	4b13      	ldr	r3, [pc, #76]	; (800b560 <HAL_RCC_OscConfig+0x82c>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a12      	ldr	r2, [pc, #72]	; (800b560 <HAL_RCC_OscConfig+0x82c>)
 800b518:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b51c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b51e:	f7fb fda3 	bl	8007068 <HAL_GetTick>
 800b522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b524:	e008      	b.n	800b538 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b526:	f7fb fd9f 	bl	8007068 <HAL_GetTick>
 800b52a:	4602      	mov	r2, r0
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	1ad3      	subs	r3, r2, r3
 800b530:	2b02      	cmp	r3, #2
 800b532:	d901      	bls.n	800b538 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800b534:	2303      	movs	r3, #3
 800b536:	e00f      	b.n	800b558 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b538:	4b09      	ldr	r3, [pc, #36]	; (800b560 <HAL_RCC_OscConfig+0x82c>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b540:	2b00      	cmp	r3, #0
 800b542:	d1f0      	bne.n	800b526 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800b544:	4b06      	ldr	r3, [pc, #24]	; (800b560 <HAL_RCC_OscConfig+0x82c>)
 800b546:	68da      	ldr	r2, [r3, #12]
 800b548:	4905      	ldr	r1, [pc, #20]	; (800b560 <HAL_RCC_OscConfig+0x82c>)
 800b54a:	4b06      	ldr	r3, [pc, #24]	; (800b564 <HAL_RCC_OscConfig+0x830>)
 800b54c:	4013      	ands	r3, r2
 800b54e:	60cb      	str	r3, [r1, #12]
 800b550:	e001      	b.n	800b556 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b552:	2301      	movs	r3, #1
 800b554:	e000      	b.n	800b558 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3720      	adds	r7, #32
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	40021000 	.word	0x40021000
 800b564:	feeefffc 	.word	0xfeeefffc

0800b568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d101      	bne.n	800b57c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b578:	2301      	movs	r3, #1
 800b57a:	e0e7      	b.n	800b74c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b57c:	4b75      	ldr	r3, [pc, #468]	; (800b754 <HAL_RCC_ClockConfig+0x1ec>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f003 0307 	and.w	r3, r3, #7
 800b584:	683a      	ldr	r2, [r7, #0]
 800b586:	429a      	cmp	r2, r3
 800b588:	d910      	bls.n	800b5ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b58a:	4b72      	ldr	r3, [pc, #456]	; (800b754 <HAL_RCC_ClockConfig+0x1ec>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f023 0207 	bic.w	r2, r3, #7
 800b592:	4970      	ldr	r1, [pc, #448]	; (800b754 <HAL_RCC_ClockConfig+0x1ec>)
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	4313      	orrs	r3, r2
 800b598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b59a:	4b6e      	ldr	r3, [pc, #440]	; (800b754 <HAL_RCC_ClockConfig+0x1ec>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f003 0307 	and.w	r3, r3, #7
 800b5a2:	683a      	ldr	r2, [r7, #0]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d001      	beq.n	800b5ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	e0cf      	b.n	800b74c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f003 0302 	and.w	r3, r3, #2
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d010      	beq.n	800b5da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	689a      	ldr	r2, [r3, #8]
 800b5bc:	4b66      	ldr	r3, [pc, #408]	; (800b758 <HAL_RCC_ClockConfig+0x1f0>)
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d908      	bls.n	800b5da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b5c8:	4b63      	ldr	r3, [pc, #396]	; (800b758 <HAL_RCC_ClockConfig+0x1f0>)
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	4960      	ldr	r1, [pc, #384]	; (800b758 <HAL_RCC_ClockConfig+0x1f0>)
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f003 0301 	and.w	r3, r3, #1
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d04c      	beq.n	800b680 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	2b03      	cmp	r3, #3
 800b5ec:	d107      	bne.n	800b5fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b5ee:	4b5a      	ldr	r3, [pc, #360]	; (800b758 <HAL_RCC_ClockConfig+0x1f0>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d121      	bne.n	800b63e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e0a6      	b.n	800b74c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	2b02      	cmp	r3, #2
 800b604:	d107      	bne.n	800b616 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b606:	4b54      	ldr	r3, [pc, #336]	; (800b758 <HAL_RCC_ClockConfig+0x1f0>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d115      	bne.n	800b63e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b612:	2301      	movs	r3, #1
 800b614:	e09a      	b.n	800b74c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	685b      	ldr	r3, [r3, #4]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d107      	bne.n	800b62e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b61e:	4b4e      	ldr	r3, [pc, #312]	; (800b758 <HAL_RCC_ClockConfig+0x1f0>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f003 0302 	and.w	r3, r3, #2
 800b626:	2b00      	cmp	r3, #0
 800b628:	d109      	bne.n	800b63e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b62a:	2301      	movs	r3, #1
 800b62c:	e08e      	b.n	800b74c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b62e:	4b4a      	ldr	r3, [pc, #296]	; (800b758 <HAL_RCC_ClockConfig+0x1f0>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b636:	2b00      	cmp	r3, #0
 800b638:	d101      	bne.n	800b63e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b63a:	2301      	movs	r3, #1
 800b63c:	e086      	b.n	800b74c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b63e:	4b46      	ldr	r3, [pc, #280]	; (800b758 <HAL_RCC_ClockConfig+0x1f0>)
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	f023 0203 	bic.w	r2, r3, #3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	4943      	ldr	r1, [pc, #268]	; (800b758 <HAL_RCC_ClockConfig+0x1f0>)
 800b64c:	4313      	orrs	r3, r2
 800b64e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b650:	f7fb fd0a 	bl	8007068 <HAL_GetTick>
 800b654:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b656:	e00a      	b.n	800b66e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b658:	f7fb fd06 	bl	8007068 <HAL_GetTick>
 800b65c:	4602      	mov	r2, r0
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	1ad3      	subs	r3, r2, r3
 800b662:	f241 3288 	movw	r2, #5000	; 0x1388
 800b666:	4293      	cmp	r3, r2
 800b668:	d901      	bls.n	800b66e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800b66a:	2303      	movs	r3, #3
 800b66c:	e06e      	b.n	800b74c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b66e:	4b3a      	ldr	r3, [pc, #232]	; (800b758 <HAL_RCC_ClockConfig+0x1f0>)
 800b670:	689b      	ldr	r3, [r3, #8]
 800b672:	f003 020c 	and.w	r2, r3, #12
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	009b      	lsls	r3, r3, #2
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d1eb      	bne.n	800b658 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f003 0302 	and.w	r3, r3, #2
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d010      	beq.n	800b6ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	689a      	ldr	r2, [r3, #8]
 800b690:	4b31      	ldr	r3, [pc, #196]	; (800b758 <HAL_RCC_ClockConfig+0x1f0>)
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b698:	429a      	cmp	r2, r3
 800b69a:	d208      	bcs.n	800b6ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b69c:	4b2e      	ldr	r3, [pc, #184]	; (800b758 <HAL_RCC_ClockConfig+0x1f0>)
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	492b      	ldr	r1, [pc, #172]	; (800b758 <HAL_RCC_ClockConfig+0x1f0>)
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b6ae:	4b29      	ldr	r3, [pc, #164]	; (800b754 <HAL_RCC_ClockConfig+0x1ec>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f003 0307 	and.w	r3, r3, #7
 800b6b6:	683a      	ldr	r2, [r7, #0]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d210      	bcs.n	800b6de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b6bc:	4b25      	ldr	r3, [pc, #148]	; (800b754 <HAL_RCC_ClockConfig+0x1ec>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f023 0207 	bic.w	r2, r3, #7
 800b6c4:	4923      	ldr	r1, [pc, #140]	; (800b754 <HAL_RCC_ClockConfig+0x1ec>)
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b6cc:	4b21      	ldr	r3, [pc, #132]	; (800b754 <HAL_RCC_ClockConfig+0x1ec>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f003 0307 	and.w	r3, r3, #7
 800b6d4:	683a      	ldr	r2, [r7, #0]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d001      	beq.n	800b6de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e036      	b.n	800b74c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f003 0304 	and.w	r3, r3, #4
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d008      	beq.n	800b6fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b6ea:	4b1b      	ldr	r3, [pc, #108]	; (800b758 <HAL_RCC_ClockConfig+0x1f0>)
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	68db      	ldr	r3, [r3, #12]
 800b6f6:	4918      	ldr	r1, [pc, #96]	; (800b758 <HAL_RCC_ClockConfig+0x1f0>)
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f003 0308 	and.w	r3, r3, #8
 800b704:	2b00      	cmp	r3, #0
 800b706:	d009      	beq.n	800b71c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b708:	4b13      	ldr	r3, [pc, #76]	; (800b758 <HAL_RCC_ClockConfig+0x1f0>)
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	691b      	ldr	r3, [r3, #16]
 800b714:	00db      	lsls	r3, r3, #3
 800b716:	4910      	ldr	r1, [pc, #64]	; (800b758 <HAL_RCC_ClockConfig+0x1f0>)
 800b718:	4313      	orrs	r3, r2
 800b71a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b71c:	f000 f824 	bl	800b768 <HAL_RCC_GetSysClockFreq>
 800b720:	4602      	mov	r2, r0
 800b722:	4b0d      	ldr	r3, [pc, #52]	; (800b758 <HAL_RCC_ClockConfig+0x1f0>)
 800b724:	689b      	ldr	r3, [r3, #8]
 800b726:	091b      	lsrs	r3, r3, #4
 800b728:	f003 030f 	and.w	r3, r3, #15
 800b72c:	490b      	ldr	r1, [pc, #44]	; (800b75c <HAL_RCC_ClockConfig+0x1f4>)
 800b72e:	5ccb      	ldrb	r3, [r1, r3]
 800b730:	f003 031f 	and.w	r3, r3, #31
 800b734:	fa22 f303 	lsr.w	r3, r2, r3
 800b738:	4a09      	ldr	r2, [pc, #36]	; (800b760 <HAL_RCC_ClockConfig+0x1f8>)
 800b73a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b73c:	4b09      	ldr	r3, [pc, #36]	; (800b764 <HAL_RCC_ClockConfig+0x1fc>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4618      	mov	r0, r3
 800b742:	f7fb fc41 	bl	8006fc8 <HAL_InitTick>
 800b746:	4603      	mov	r3, r0
 800b748:	72fb      	strb	r3, [r7, #11]

  return status;
 800b74a:	7afb      	ldrb	r3, [r7, #11]
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3710      	adds	r7, #16
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}
 800b754:	40022000 	.word	0x40022000
 800b758:	40021000 	.word	0x40021000
 800b75c:	080134fc 	.word	0x080134fc
 800b760:	20000190 	.word	0x20000190
 800b764:	20000450 	.word	0x20000450

0800b768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b768:	b480      	push	{r7}
 800b76a:	b089      	sub	sp, #36	; 0x24
 800b76c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800b76e:	2300      	movs	r3, #0
 800b770:	61fb      	str	r3, [r7, #28]
 800b772:	2300      	movs	r3, #0
 800b774:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b776:	4b3e      	ldr	r3, [pc, #248]	; (800b870 <HAL_RCC_GetSysClockFreq+0x108>)
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	f003 030c 	and.w	r3, r3, #12
 800b77e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b780:	4b3b      	ldr	r3, [pc, #236]	; (800b870 <HAL_RCC_GetSysClockFreq+0x108>)
 800b782:	68db      	ldr	r3, [r3, #12]
 800b784:	f003 0303 	and.w	r3, r3, #3
 800b788:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d005      	beq.n	800b79c <HAL_RCC_GetSysClockFreq+0x34>
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	2b0c      	cmp	r3, #12
 800b794:	d121      	bne.n	800b7da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d11e      	bne.n	800b7da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b79c:	4b34      	ldr	r3, [pc, #208]	; (800b870 <HAL_RCC_GetSysClockFreq+0x108>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f003 0308 	and.w	r3, r3, #8
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d107      	bne.n	800b7b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b7a8:	4b31      	ldr	r3, [pc, #196]	; (800b870 <HAL_RCC_GetSysClockFreq+0x108>)
 800b7aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b7ae:	0a1b      	lsrs	r3, r3, #8
 800b7b0:	f003 030f 	and.w	r3, r3, #15
 800b7b4:	61fb      	str	r3, [r7, #28]
 800b7b6:	e005      	b.n	800b7c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b7b8:	4b2d      	ldr	r3, [pc, #180]	; (800b870 <HAL_RCC_GetSysClockFreq+0x108>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	091b      	lsrs	r3, r3, #4
 800b7be:	f003 030f 	and.w	r3, r3, #15
 800b7c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b7c4:	4a2b      	ldr	r2, [pc, #172]	; (800b874 <HAL_RCC_GetSysClockFreq+0x10c>)
 800b7c6:	69fb      	ldr	r3, [r7, #28]
 800b7c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d10d      	bne.n	800b7f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b7d4:	69fb      	ldr	r3, [r7, #28]
 800b7d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b7d8:	e00a      	b.n	800b7f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	2b04      	cmp	r3, #4
 800b7de:	d102      	bne.n	800b7e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b7e0:	4b25      	ldr	r3, [pc, #148]	; (800b878 <HAL_RCC_GetSysClockFreq+0x110>)
 800b7e2:	61bb      	str	r3, [r7, #24]
 800b7e4:	e004      	b.n	800b7f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	2b08      	cmp	r3, #8
 800b7ea:	d101      	bne.n	800b7f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b7ec:	4b23      	ldr	r3, [pc, #140]	; (800b87c <HAL_RCC_GetSysClockFreq+0x114>)
 800b7ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	2b0c      	cmp	r3, #12
 800b7f4:	d134      	bne.n	800b860 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b7f6:	4b1e      	ldr	r3, [pc, #120]	; (800b870 <HAL_RCC_GetSysClockFreq+0x108>)
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	f003 0303 	and.w	r3, r3, #3
 800b7fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	2b02      	cmp	r3, #2
 800b804:	d003      	beq.n	800b80e <HAL_RCC_GetSysClockFreq+0xa6>
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	2b03      	cmp	r3, #3
 800b80a:	d003      	beq.n	800b814 <HAL_RCC_GetSysClockFreq+0xac>
 800b80c:	e005      	b.n	800b81a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800b80e:	4b1a      	ldr	r3, [pc, #104]	; (800b878 <HAL_RCC_GetSysClockFreq+0x110>)
 800b810:	617b      	str	r3, [r7, #20]
      break;
 800b812:	e005      	b.n	800b820 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800b814:	4b19      	ldr	r3, [pc, #100]	; (800b87c <HAL_RCC_GetSysClockFreq+0x114>)
 800b816:	617b      	str	r3, [r7, #20]
      break;
 800b818:	e002      	b.n	800b820 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800b81a:	69fb      	ldr	r3, [r7, #28]
 800b81c:	617b      	str	r3, [r7, #20]
      break;
 800b81e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b820:	4b13      	ldr	r3, [pc, #76]	; (800b870 <HAL_RCC_GetSysClockFreq+0x108>)
 800b822:	68db      	ldr	r3, [r3, #12]
 800b824:	091b      	lsrs	r3, r3, #4
 800b826:	f003 0307 	and.w	r3, r3, #7
 800b82a:	3301      	adds	r3, #1
 800b82c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b82e:	4b10      	ldr	r3, [pc, #64]	; (800b870 <HAL_RCC_GetSysClockFreq+0x108>)
 800b830:	68db      	ldr	r3, [r3, #12]
 800b832:	0a1b      	lsrs	r3, r3, #8
 800b834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b838:	697a      	ldr	r2, [r7, #20]
 800b83a:	fb03 f202 	mul.w	r2, r3, r2
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	fbb2 f3f3 	udiv	r3, r2, r3
 800b844:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b846:	4b0a      	ldr	r3, [pc, #40]	; (800b870 <HAL_RCC_GetSysClockFreq+0x108>)
 800b848:	68db      	ldr	r3, [r3, #12]
 800b84a:	0e5b      	lsrs	r3, r3, #25
 800b84c:	f003 0303 	and.w	r3, r3, #3
 800b850:	3301      	adds	r3, #1
 800b852:	005b      	lsls	r3, r3, #1
 800b854:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b856:	697a      	ldr	r2, [r7, #20]
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b85e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b860:	69bb      	ldr	r3, [r7, #24]
}
 800b862:	4618      	mov	r0, r3
 800b864:	3724      	adds	r7, #36	; 0x24
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop
 800b870:	40021000 	.word	0x40021000
 800b874:	08013514 	.word	0x08013514
 800b878:	00f42400 	.word	0x00f42400
 800b87c:	007a1200 	.word	0x007a1200

0800b880 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b880:	b480      	push	{r7}
 800b882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b884:	4b03      	ldr	r3, [pc, #12]	; (800b894 <HAL_RCC_GetHCLKFreq+0x14>)
 800b886:	681b      	ldr	r3, [r3, #0]
}
 800b888:	4618      	mov	r0, r3
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr
 800b892:	bf00      	nop
 800b894:	20000190 	.word	0x20000190

0800b898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b89c:	f7ff fff0 	bl	800b880 <HAL_RCC_GetHCLKFreq>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	4b06      	ldr	r3, [pc, #24]	; (800b8bc <HAL_RCC_GetPCLK1Freq+0x24>)
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	0a1b      	lsrs	r3, r3, #8
 800b8a8:	f003 0307 	and.w	r3, r3, #7
 800b8ac:	4904      	ldr	r1, [pc, #16]	; (800b8c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b8ae:	5ccb      	ldrb	r3, [r1, r3]
 800b8b0:	f003 031f 	and.w	r3, r3, #31
 800b8b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	40021000 	.word	0x40021000
 800b8c0:	0801350c 	.word	0x0801350c

0800b8c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b8c8:	f7ff ffda 	bl	800b880 <HAL_RCC_GetHCLKFreq>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	4b06      	ldr	r3, [pc, #24]	; (800b8e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b8d0:	689b      	ldr	r3, [r3, #8]
 800b8d2:	0adb      	lsrs	r3, r3, #11
 800b8d4:	f003 0307 	and.w	r3, r3, #7
 800b8d8:	4904      	ldr	r1, [pc, #16]	; (800b8ec <HAL_RCC_GetPCLK2Freq+0x28>)
 800b8da:	5ccb      	ldrb	r3, [r1, r3]
 800b8dc:	f003 031f 	and.w	r3, r3, #31
 800b8e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	40021000 	.word	0x40021000
 800b8ec:	0801350c 	.word	0x0801350c

0800b8f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b086      	sub	sp, #24
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b8fc:	4b2a      	ldr	r3, [pc, #168]	; (800b9a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b8fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b904:	2b00      	cmp	r3, #0
 800b906:	d003      	beq.n	800b910 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b908:	f7ff f8ce 	bl	800aaa8 <HAL_PWREx_GetVoltageRange>
 800b90c:	6178      	str	r0, [r7, #20]
 800b90e:	e014      	b.n	800b93a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b910:	4b25      	ldr	r3, [pc, #148]	; (800b9a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b914:	4a24      	ldr	r2, [pc, #144]	; (800b9a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b91a:	6593      	str	r3, [r2, #88]	; 0x58
 800b91c:	4b22      	ldr	r3, [pc, #136]	; (800b9a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b91e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b924:	60fb      	str	r3, [r7, #12]
 800b926:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b928:	f7ff f8be 	bl	800aaa8 <HAL_PWREx_GetVoltageRange>
 800b92c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b92e:	4b1e      	ldr	r3, [pc, #120]	; (800b9a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b932:	4a1d      	ldr	r2, [pc, #116]	; (800b9a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b938:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b940:	d10b      	bne.n	800b95a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2b80      	cmp	r3, #128	; 0x80
 800b946:	d919      	bls.n	800b97c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2ba0      	cmp	r3, #160	; 0xa0
 800b94c:	d902      	bls.n	800b954 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b94e:	2302      	movs	r3, #2
 800b950:	613b      	str	r3, [r7, #16]
 800b952:	e013      	b.n	800b97c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b954:	2301      	movs	r3, #1
 800b956:	613b      	str	r3, [r7, #16]
 800b958:	e010      	b.n	800b97c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2b80      	cmp	r3, #128	; 0x80
 800b95e:	d902      	bls.n	800b966 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800b960:	2303      	movs	r3, #3
 800b962:	613b      	str	r3, [r7, #16]
 800b964:	e00a      	b.n	800b97c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2b80      	cmp	r3, #128	; 0x80
 800b96a:	d102      	bne.n	800b972 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b96c:	2302      	movs	r3, #2
 800b96e:	613b      	str	r3, [r7, #16]
 800b970:	e004      	b.n	800b97c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2b70      	cmp	r3, #112	; 0x70
 800b976:	d101      	bne.n	800b97c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b978:	2301      	movs	r3, #1
 800b97a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b97c:	4b0b      	ldr	r3, [pc, #44]	; (800b9ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f023 0207 	bic.w	r2, r3, #7
 800b984:	4909      	ldr	r1, [pc, #36]	; (800b9ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	4313      	orrs	r3, r2
 800b98a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b98c:	4b07      	ldr	r3, [pc, #28]	; (800b9ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f003 0307 	and.w	r3, r3, #7
 800b994:	693a      	ldr	r2, [r7, #16]
 800b996:	429a      	cmp	r2, r3
 800b998:	d001      	beq.n	800b99e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800b99a:	2301      	movs	r3, #1
 800b99c:	e000      	b.n	800b9a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3718      	adds	r7, #24
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	40021000 	.word	0x40021000
 800b9ac:	40022000 	.word	0x40022000

0800b9b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b086      	sub	sp, #24
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b9bc:	2300      	movs	r3, #0
 800b9be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d041      	beq.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b9d4:	d02a      	beq.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b9d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b9da:	d824      	bhi.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b9dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b9e0:	d008      	beq.n	800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b9e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b9e6:	d81e      	bhi.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d00a      	beq.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b9ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b9f0:	d010      	beq.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b9f2:	e018      	b.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b9f4:	4b86      	ldr	r3, [pc, #536]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b9f6:	68db      	ldr	r3, [r3, #12]
 800b9f8:	4a85      	ldr	r2, [pc, #532]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b9fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ba00:	e015      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	3304      	adds	r3, #4
 800ba06:	2100      	movs	r1, #0
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f001 f895 	bl	800cb38 <RCCEx_PLLSAI1_Config>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ba12:	e00c      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	3320      	adds	r3, #32
 800ba18:	2100      	movs	r1, #0
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f001 f97e 	bl	800cd1c <RCCEx_PLLSAI2_Config>
 800ba20:	4603      	mov	r3, r0
 800ba22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ba24:	e003      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba26:	2301      	movs	r3, #1
 800ba28:	74fb      	strb	r3, [r7, #19]
      break;
 800ba2a:	e000      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800ba2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba2e:	7cfb      	ldrb	r3, [r7, #19]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d10b      	bne.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ba34:	4b76      	ldr	r3, [pc, #472]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba42:	4973      	ldr	r1, [pc, #460]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba44:	4313      	orrs	r3, r2
 800ba46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ba4a:	e001      	b.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba4c:	7cfb      	ldrb	r3, [r7, #19]
 800ba4e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d041      	beq.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ba64:	d02a      	beq.n	800babc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800ba66:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ba6a:	d824      	bhi.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800ba6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba70:	d008      	beq.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800ba72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba76:	d81e      	bhi.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d00a      	beq.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800ba7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ba80:	d010      	beq.n	800baa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800ba82:	e018      	b.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800ba84:	4b62      	ldr	r3, [pc, #392]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba86:	68db      	ldr	r3, [r3, #12]
 800ba88:	4a61      	ldr	r2, [pc, #388]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba8e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ba90:	e015      	b.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	3304      	adds	r3, #4
 800ba96:	2100      	movs	r1, #0
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f001 f84d 	bl	800cb38 <RCCEx_PLLSAI1_Config>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800baa2:	e00c      	b.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	3320      	adds	r3, #32
 800baa8:	2100      	movs	r1, #0
 800baaa:	4618      	mov	r0, r3
 800baac:	f001 f936 	bl	800cd1c <RCCEx_PLLSAI2_Config>
 800bab0:	4603      	mov	r3, r0
 800bab2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800bab4:	e003      	b.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bab6:	2301      	movs	r3, #1
 800bab8:	74fb      	strb	r3, [r7, #19]
      break;
 800baba:	e000      	b.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800babc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800babe:	7cfb      	ldrb	r3, [r7, #19]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d10b      	bne.n	800badc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bac4:	4b52      	ldr	r3, [pc, #328]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bad2:	494f      	ldr	r1, [pc, #316]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bad4:	4313      	orrs	r3, r2
 800bad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800bada:	e001      	b.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800badc:	7cfb      	ldrb	r3, [r7, #19]
 800bade:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bae8:	2b00      	cmp	r3, #0
 800baea:	f000 80a0 	beq.w	800bc2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800baee:	2300      	movs	r3, #0
 800baf0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800baf2:	4b47      	ldr	r3, [pc, #284]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800baf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d101      	bne.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800bafe:	2301      	movs	r3, #1
 800bb00:	e000      	b.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800bb02:	2300      	movs	r3, #0
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d00d      	beq.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bb08:	4b41      	ldr	r3, [pc, #260]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb0c:	4a40      	ldr	r2, [pc, #256]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb12:	6593      	str	r3, [r2, #88]	; 0x58
 800bb14:	4b3e      	ldr	r3, [pc, #248]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb1c:	60bb      	str	r3, [r7, #8]
 800bb1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bb20:	2301      	movs	r3, #1
 800bb22:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bb24:	4b3b      	ldr	r3, [pc, #236]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a3a      	ldr	r2, [pc, #232]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800bb2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bb30:	f7fb fa9a 	bl	8007068 <HAL_GetTick>
 800bb34:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800bb36:	e009      	b.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb38:	f7fb fa96 	bl	8007068 <HAL_GetTick>
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	1ad3      	subs	r3, r2, r3
 800bb42:	2b02      	cmp	r3, #2
 800bb44:	d902      	bls.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800bb46:	2303      	movs	r3, #3
 800bb48:	74fb      	strb	r3, [r7, #19]
        break;
 800bb4a:	e005      	b.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800bb4c:	4b31      	ldr	r3, [pc, #196]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d0ef      	beq.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800bb58:	7cfb      	ldrb	r3, [r7, #19]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d15c      	bne.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bb5e:	4b2c      	ldr	r3, [pc, #176]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb68:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d01f      	beq.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb76:	697a      	ldr	r2, [r7, #20]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d019      	beq.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bb7c:	4b24      	ldr	r3, [pc, #144]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bb88:	4b21      	ldr	r3, [pc, #132]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb8e:	4a20      	ldr	r2, [pc, #128]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bb98:	4b1d      	ldr	r3, [pc, #116]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb9e:	4a1c      	ldr	r2, [pc, #112]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bba8:	4a19      	ldr	r2, [pc, #100]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	f003 0301 	and.w	r3, r3, #1
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d016      	beq.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbba:	f7fb fa55 	bl	8007068 <HAL_GetTick>
 800bbbe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bbc0:	e00b      	b.n	800bbda <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bbc2:	f7fb fa51 	bl	8007068 <HAL_GetTick>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	1ad3      	subs	r3, r2, r3
 800bbcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d902      	bls.n	800bbda <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800bbd4:	2303      	movs	r3, #3
 800bbd6:	74fb      	strb	r3, [r7, #19]
            break;
 800bbd8:	e006      	b.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bbda:	4b0d      	ldr	r3, [pc, #52]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bbdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbe0:	f003 0302 	and.w	r3, r3, #2
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d0ec      	beq.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800bbe8:	7cfb      	ldrb	r3, [r7, #19]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d10c      	bne.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bbee:	4b08      	ldr	r3, [pc, #32]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bbf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbfe:	4904      	ldr	r1, [pc, #16]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bc00:	4313      	orrs	r3, r2
 800bc02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bc06:	e009      	b.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bc08:	7cfb      	ldrb	r3, [r7, #19]
 800bc0a:	74bb      	strb	r3, [r7, #18]
 800bc0c:	e006      	b.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800bc0e:	bf00      	nop
 800bc10:	40021000 	.word	0x40021000
 800bc14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc18:	7cfb      	ldrb	r3, [r7, #19]
 800bc1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bc1c:	7c7b      	ldrb	r3, [r7, #17]
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d105      	bne.n	800bc2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bc22:	4ba6      	ldr	r3, [pc, #664]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc26:	4aa5      	ldr	r2, [pc, #660]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bc2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f003 0301 	and.w	r3, r3, #1
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d00a      	beq.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bc3a:	4ba0      	ldr	r3, [pc, #640]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc40:	f023 0203 	bic.w	r2, r3, #3
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc48:	499c      	ldr	r1, [pc, #624]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f003 0302 	and.w	r3, r3, #2
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d00a      	beq.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bc5c:	4b97      	ldr	r3, [pc, #604]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc62:	f023 020c 	bic.w	r2, r3, #12
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc6a:	4994      	ldr	r1, [pc, #592]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f003 0304 	and.w	r3, r3, #4
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d00a      	beq.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bc7e:	4b8f      	ldr	r3, [pc, #572]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc8c:	498b      	ldr	r1, [pc, #556]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f003 0308 	and.w	r3, r3, #8
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d00a      	beq.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bca0:	4b86      	ldr	r3, [pc, #536]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bca6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcae:	4983      	ldr	r1, [pc, #524]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f003 0310 	and.w	r3, r3, #16
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d00a      	beq.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bcc2:	4b7e      	ldr	r3, [pc, #504]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bcc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcd0:	497a      	ldr	r1, [pc, #488]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f003 0320 	and.w	r3, r3, #32
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d00a      	beq.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bce4:	4b75      	ldr	r3, [pc, #468]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcf2:	4972      	ldr	r1, [pc, #456]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00a      	beq.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bd06:	4b6d      	ldr	r3, [pc, #436]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd14:	4969      	ldr	r1, [pc, #420]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd16:	4313      	orrs	r3, r2
 800bd18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d00a      	beq.n	800bd3e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bd28:	4b64      	ldr	r3, [pc, #400]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd36:	4961      	ldr	r1, [pc, #388]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d00a      	beq.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bd4a:	4b5c      	ldr	r3, [pc, #368]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd58:	4958      	ldr	r1, [pc, #352]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d00a      	beq.n	800bd82 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bd6c:	4b53      	ldr	r3, [pc, #332]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd7a:	4950      	ldr	r1, [pc, #320]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d00a      	beq.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bd8e:	4b4b      	ldr	r3, [pc, #300]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd9c:	4947      	ldr	r1, [pc, #284]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d00a      	beq.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bdb0:	4b42      	ldr	r3, [pc, #264]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bdb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bdb6:	f023 0203 	bic.w	r2, r3, #3
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdbe:	493f      	ldr	r1, [pc, #252]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d028      	beq.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bdd2:	4b3a      	ldr	r3, [pc, #232]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bdd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdd8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bde0:	4936      	ldr	r1, [pc, #216]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bde2:	4313      	orrs	r3, r2
 800bde4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bdf0:	d106      	bne.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bdf2:	4b32      	ldr	r3, [pc, #200]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	4a31      	ldr	r2, [pc, #196]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bdf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdfc:	60d3      	str	r3, [r2, #12]
 800bdfe:	e011      	b.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be08:	d10c      	bne.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	3304      	adds	r3, #4
 800be0e:	2101      	movs	r1, #1
 800be10:	4618      	mov	r0, r3
 800be12:	f000 fe91 	bl	800cb38 <RCCEx_PLLSAI1_Config>
 800be16:	4603      	mov	r3, r0
 800be18:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800be1a:	7cfb      	ldrb	r3, [r7, #19]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d001      	beq.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800be20:	7cfb      	ldrb	r3, [r7, #19]
 800be22:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d028      	beq.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800be30:	4b22      	ldr	r3, [pc, #136]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800be32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be3e:	491f      	ldr	r1, [pc, #124]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800be40:	4313      	orrs	r3, r2
 800be42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be4e:	d106      	bne.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800be50:	4b1a      	ldr	r3, [pc, #104]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800be52:	68db      	ldr	r3, [r3, #12]
 800be54:	4a19      	ldr	r2, [pc, #100]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800be56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be5a:	60d3      	str	r3, [r2, #12]
 800be5c:	e011      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be66:	d10c      	bne.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	3304      	adds	r3, #4
 800be6c:	2101      	movs	r1, #1
 800be6e:	4618      	mov	r0, r3
 800be70:	f000 fe62 	bl	800cb38 <RCCEx_PLLSAI1_Config>
 800be74:	4603      	mov	r3, r0
 800be76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800be78:	7cfb      	ldrb	r3, [r7, #19]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d001      	beq.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800be7e:	7cfb      	ldrb	r3, [r7, #19]
 800be80:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d02a      	beq.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800be8e:	4b0b      	ldr	r3, [pc, #44]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800be90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be94:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be9c:	4907      	ldr	r1, [pc, #28]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800be9e:	4313      	orrs	r3, r2
 800bea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bea8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800beac:	d108      	bne.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800beae:	4b03      	ldr	r3, [pc, #12]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800beb0:	68db      	ldr	r3, [r3, #12]
 800beb2:	4a02      	ldr	r2, [pc, #8]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800beb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800beb8:	60d3      	str	r3, [r2, #12]
 800beba:	e013      	b.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800bebc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bec4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bec8:	d10c      	bne.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	3304      	adds	r3, #4
 800bece:	2101      	movs	r1, #1
 800bed0:	4618      	mov	r0, r3
 800bed2:	f000 fe31 	bl	800cb38 <RCCEx_PLLSAI1_Config>
 800bed6:	4603      	mov	r3, r0
 800bed8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800beda:	7cfb      	ldrb	r3, [r7, #19]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d001      	beq.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800bee0:	7cfb      	ldrb	r3, [r7, #19]
 800bee2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800beec:	2b00      	cmp	r3, #0
 800beee:	d02f      	beq.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bef0:	4b2c      	ldr	r3, [pc, #176]	; (800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800bef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bef6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800befe:	4929      	ldr	r1, [pc, #164]	; (800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800bf00:	4313      	orrs	r3, r2
 800bf02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf0e:	d10d      	bne.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	3304      	adds	r3, #4
 800bf14:	2102      	movs	r1, #2
 800bf16:	4618      	mov	r0, r3
 800bf18:	f000 fe0e 	bl	800cb38 <RCCEx_PLLSAI1_Config>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bf20:	7cfb      	ldrb	r3, [r7, #19]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d014      	beq.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800bf26:	7cfb      	ldrb	r3, [r7, #19]
 800bf28:	74bb      	strb	r3, [r7, #18]
 800bf2a:	e011      	b.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf34:	d10c      	bne.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	3320      	adds	r3, #32
 800bf3a:	2102      	movs	r1, #2
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f000 feed 	bl	800cd1c <RCCEx_PLLSAI2_Config>
 800bf42:	4603      	mov	r3, r0
 800bf44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bf46:	7cfb      	ldrb	r3, [r7, #19]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d001      	beq.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800bf4c:	7cfb      	ldrb	r3, [r7, #19]
 800bf4e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d00b      	beq.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bf5c:	4b11      	ldr	r3, [pc, #68]	; (800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800bf5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf62:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf6c:	490d      	ldr	r1, [pc, #52]	; (800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d00b      	beq.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bf80:	4b08      	ldr	r3, [pc, #32]	; (800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800bf82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf90:	4904      	ldr	r1, [pc, #16]	; (800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800bf92:	4313      	orrs	r3, r2
 800bf94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800bf98:	7cbb      	ldrb	r3, [r7, #18]
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3718      	adds	r7, #24
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	40021000 	.word	0x40021000

0800bfa8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b088      	sub	sp, #32
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfba:	d13e      	bne.n	800c03a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800bfbc:	4bb4      	ldr	r3, [pc, #720]	; (800c290 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800bfbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfc6:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfce:	d028      	beq.n	800c022 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfd6:	f200 858c 	bhi.w	800caf2 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfe0:	d005      	beq.n	800bfee <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfe8:	d00e      	beq.n	800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800bfea:	f000 bd82 	b.w	800caf2 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bfee:	4ba8      	ldr	r3, [pc, #672]	; (800c290 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800bff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bff4:	f003 0302 	and.w	r3, r3, #2
 800bff8:	2b02      	cmp	r3, #2
 800bffa:	f040 857c 	bne.w	800caf6 <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
        frequency = LSE_VALUE;
 800bffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c002:	61fb      	str	r3, [r7, #28]
      break;
 800c004:	f000 bd77 	b.w	800caf6 <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800c008:	4ba1      	ldr	r3, [pc, #644]	; (800c290 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c00a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c00e:	f003 0302 	and.w	r3, r3, #2
 800c012:	2b02      	cmp	r3, #2
 800c014:	f040 8571 	bne.w	800cafa <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
          frequency = LSI_VALUE;
 800c018:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c01c:	61fb      	str	r3, [r7, #28]
      break;
 800c01e:	f000 bd6c 	b.w	800cafa <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c022:	4b9b      	ldr	r3, [pc, #620]	; (800c290 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c02a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c02e:	f040 8566 	bne.w	800cafe <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
        frequency = HSE_VALUE / 32U;
 800c032:	4b98      	ldr	r3, [pc, #608]	; (800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800c034:	61fb      	str	r3, [r7, #28]
      break;
 800c036:	f000 bd62 	b.w	800cafe <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c03a:	4b95      	ldr	r3, [pc, #596]	; (800c290 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	f003 0303 	and.w	r3, r3, #3
 800c042:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	2b03      	cmp	r3, #3
 800c048:	d036      	beq.n	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	2b03      	cmp	r3, #3
 800c04e:	d840      	bhi.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	2b01      	cmp	r3, #1
 800c054:	d003      	beq.n	800c05e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	2b02      	cmp	r3, #2
 800c05a:	d020      	beq.n	800c09e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800c05c:	e039      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800c05e:	4b8c      	ldr	r3, [pc, #560]	; (800c290 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f003 0302 	and.w	r3, r3, #2
 800c066:	2b02      	cmp	r3, #2
 800c068:	d116      	bne.n	800c098 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800c06a:	4b89      	ldr	r3, [pc, #548]	; (800c290 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f003 0308 	and.w	r3, r3, #8
 800c072:	2b00      	cmp	r3, #0
 800c074:	d005      	beq.n	800c082 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800c076:	4b86      	ldr	r3, [pc, #536]	; (800c290 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	091b      	lsrs	r3, r3, #4
 800c07c:	f003 030f 	and.w	r3, r3, #15
 800c080:	e005      	b.n	800c08e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800c082:	4b83      	ldr	r3, [pc, #524]	; (800c290 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c088:	0a1b      	lsrs	r3, r3, #8
 800c08a:	f003 030f 	and.w	r3, r3, #15
 800c08e:	4a82      	ldr	r2, [pc, #520]	; (800c298 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c094:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800c096:	e01f      	b.n	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800c098:	2300      	movs	r3, #0
 800c09a:	61bb      	str	r3, [r7, #24]
      break;
 800c09c:	e01c      	b.n	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c09e:	4b7c      	ldr	r3, [pc, #496]	; (800c290 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c0a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0aa:	d102      	bne.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800c0ac:	4b7b      	ldr	r3, [pc, #492]	; (800c29c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800c0ae:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800c0b0:	e012      	b.n	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	61bb      	str	r3, [r7, #24]
      break;
 800c0b6:	e00f      	b.n	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c0b8:	4b75      	ldr	r3, [pc, #468]	; (800c290 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0c4:	d102      	bne.n	800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800c0c6:	4b76      	ldr	r3, [pc, #472]	; (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800c0c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800c0ca:	e005      	b.n	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	61bb      	str	r3, [r7, #24]
      break;
 800c0d0:	e002      	b.n	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	61bb      	str	r3, [r7, #24]
      break;
 800c0d6:	bf00      	nop
    }

    switch(PeriphClk)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0de:	f000 842a 	beq.w	800c936 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0e8:	f200 850b 	bhi.w	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c0f2:	f000 80df 	beq.w	800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c0fc:	f200 8501 	bhi.w	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c106:	f000 80d5 	beq.w	800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c110:	f200 84f7 	bhi.w	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c11a:	f000 8377 	beq.w	800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c124:	f200 84ed 	bhi.w	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c12e:	f000 84c3 	beq.w	800cab8 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c138:	f200 84e3 	bhi.w	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c142:	f000 82e6 	beq.w	800c712 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c14c:	f200 84d9 	bhi.w	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c156:	f000 80ad 	beq.w	800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c160:	f200 84cf 	bhi.w	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c16a:	f000 809b 	beq.w	800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c174:	f200 84c5 	bhi.w	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c17e:	d07f      	beq.n	800c280 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c186:	f200 84bc 	bhi.w	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c190:	f000 8448 	beq.w	800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c19a:	f200 84b2 	bhi.w	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1a4:	f000 83f0 	beq.w	800c988 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1ae:	f200 84a8 	bhi.w	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1b8:	f000 8391 	beq.w	800c8de <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1c2:	f200 849e 	bhi.w	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2b80      	cmp	r3, #128	; 0x80
 800c1ca:	f000 835c 	beq.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2b80      	cmp	r3, #128	; 0x80
 800c1d2:	f200 8496 	bhi.w	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2b20      	cmp	r3, #32
 800c1da:	d84b      	bhi.n	800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	f000 848f 	beq.w	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	3b01      	subs	r3, #1
 800c1e8:	2b1f      	cmp	r3, #31
 800c1ea:	f200 848a 	bhi.w	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c1ee:	a201      	add	r2, pc, #4	; (adr r2, 800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 800c1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1f4:	0800c40b 	.word	0x0800c40b
 800c1f8:	0800c47b 	.word	0x0800c47b
 800c1fc:	0800cb03 	.word	0x0800cb03
 800c200:	0800c50f 	.word	0x0800c50f
 800c204:	0800cb03 	.word	0x0800cb03
 800c208:	0800cb03 	.word	0x0800cb03
 800c20c:	0800cb03 	.word	0x0800cb03
 800c210:	0800c597 	.word	0x0800c597
 800c214:	0800cb03 	.word	0x0800cb03
 800c218:	0800cb03 	.word	0x0800cb03
 800c21c:	0800cb03 	.word	0x0800cb03
 800c220:	0800cb03 	.word	0x0800cb03
 800c224:	0800cb03 	.word	0x0800cb03
 800c228:	0800cb03 	.word	0x0800cb03
 800c22c:	0800cb03 	.word	0x0800cb03
 800c230:	0800c60f 	.word	0x0800c60f
 800c234:	0800cb03 	.word	0x0800cb03
 800c238:	0800cb03 	.word	0x0800cb03
 800c23c:	0800cb03 	.word	0x0800cb03
 800c240:	0800cb03 	.word	0x0800cb03
 800c244:	0800cb03 	.word	0x0800cb03
 800c248:	0800cb03 	.word	0x0800cb03
 800c24c:	0800cb03 	.word	0x0800cb03
 800c250:	0800cb03 	.word	0x0800cb03
 800c254:	0800cb03 	.word	0x0800cb03
 800c258:	0800cb03 	.word	0x0800cb03
 800c25c:	0800cb03 	.word	0x0800cb03
 800c260:	0800cb03 	.word	0x0800cb03
 800c264:	0800cb03 	.word	0x0800cb03
 800c268:	0800cb03 	.word	0x0800cb03
 800c26c:	0800cb03 	.word	0x0800cb03
 800c270:	0800c691 	.word	0x0800c691
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2b40      	cmp	r3, #64	; 0x40
 800c278:	f000 82d9 	beq.w	800c82e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800c27c:	f000 bc41 	b.w	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800c280:	69b9      	ldr	r1, [r7, #24]
 800c282:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c286:	f000 fe25 	bl	800ced4 <RCCEx_GetSAIxPeriphCLKFreq>
 800c28a:	61f8      	str	r0, [r7, #28]
      break;
 800c28c:	f000 bc3a 	b.w	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 800c290:	40021000 	.word	0x40021000
 800c294:	0003d090 	.word	0x0003d090
 800c298:	08013514 	.word	0x08013514
 800c29c:	00f42400 	.word	0x00f42400
 800c2a0:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800c2a4:	69b9      	ldr	r1, [r7, #24]
 800c2a6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c2aa:	f000 fe13 	bl	800ced4 <RCCEx_GetSAIxPeriphCLKFreq>
 800c2ae:	61f8      	str	r0, [r7, #28]
      break;
 800c2b0:	f000 bc28 	b.w	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800c2b4:	4ba6      	ldr	r3, [pc, #664]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c2b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2ba:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800c2be:	613b      	str	r3, [r7, #16]
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c2c6:	d015      	beq.n	800c2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c2ce:	f200 8092 	bhi.w	800c3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2d8:	d029      	beq.n	800c32e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2e0:	f200 8089 	bhi.w	800c3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d07b      	beq.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c2f0:	d04a      	beq.n	800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 800c2f2:	e080      	b.n	800c3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800c2f4:	4b96      	ldr	r3, [pc, #600]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f003 0302 	and.w	r3, r3, #2
 800c2fc:	2b02      	cmp	r3, #2
 800c2fe:	d17c      	bne.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800c300:	4b93      	ldr	r3, [pc, #588]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f003 0308 	and.w	r3, r3, #8
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d005      	beq.n	800c318 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800c30c:	4b90      	ldr	r3, [pc, #576]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	091b      	lsrs	r3, r3, #4
 800c312:	f003 030f 	and.w	r3, r3, #15
 800c316:	e005      	b.n	800c324 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800c318:	4b8d      	ldr	r3, [pc, #564]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c31a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c31e:	0a1b      	lsrs	r3, r3, #8
 800c320:	f003 030f 	and.w	r3, r3, #15
 800c324:	4a8b      	ldr	r2, [pc, #556]	; (800c554 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800c326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c32a:	61fb      	str	r3, [r7, #28]
          break;
 800c32c:	e065      	b.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800c32e:	4b88      	ldr	r3, [pc, #544]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c336:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c33a:	d160      	bne.n	800c3fe <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800c33c:	4b84      	ldr	r3, [pc, #528]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c33e:	68db      	ldr	r3, [r3, #12]
 800c340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c344:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c348:	d159      	bne.n	800c3fe <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800c34a:	4b81      	ldr	r3, [pc, #516]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c34c:	68db      	ldr	r3, [r3, #12]
 800c34e:	0a1b      	lsrs	r3, r3, #8
 800c350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c354:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c356:	69bb      	ldr	r3, [r7, #24]
 800c358:	68fa      	ldr	r2, [r7, #12]
 800c35a:	fb03 f202 	mul.w	r2, r3, r2
 800c35e:	4b7c      	ldr	r3, [pc, #496]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c360:	68db      	ldr	r3, [r3, #12]
 800c362:	091b      	lsrs	r3, r3, #4
 800c364:	f003 0307 	and.w	r3, r3, #7
 800c368:	3301      	adds	r3, #1
 800c36a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c36e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800c370:	4b77      	ldr	r3, [pc, #476]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c372:	68db      	ldr	r3, [r3, #12]
 800c374:	0d5b      	lsrs	r3, r3, #21
 800c376:	f003 0303 	and.w	r3, r3, #3
 800c37a:	3301      	adds	r3, #1
 800c37c:	005b      	lsls	r3, r3, #1
 800c37e:	69ba      	ldr	r2, [r7, #24]
 800c380:	fbb2 f3f3 	udiv	r3, r2, r3
 800c384:	61fb      	str	r3, [r7, #28]
          break;
 800c386:	e03a      	b.n	800c3fe <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800c388:	4b71      	ldr	r3, [pc, #452]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c390:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c394:	d135      	bne.n	800c402 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800c396:	4b6e      	ldr	r3, [pc, #440]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c398:	691b      	ldr	r3, [r3, #16]
 800c39a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c39e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3a2:	d12e      	bne.n	800c402 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800c3a4:	4b6a      	ldr	r3, [pc, #424]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c3a6:	691b      	ldr	r3, [r3, #16]
 800c3a8:	0a1b      	lsrs	r3, r3, #8
 800c3aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3ae:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c3b0:	69bb      	ldr	r3, [r7, #24]
 800c3b2:	68fa      	ldr	r2, [r7, #12]
 800c3b4:	fb03 f202 	mul.w	r2, r3, r2
 800c3b8:	4b65      	ldr	r3, [pc, #404]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	091b      	lsrs	r3, r3, #4
 800c3be:	f003 0307 	and.w	r3, r3, #7
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3c8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800c3ca:	4b61      	ldr	r3, [pc, #388]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c3cc:	691b      	ldr	r3, [r3, #16]
 800c3ce:	0d5b      	lsrs	r3, r3, #21
 800c3d0:	f003 0303 	and.w	r3, r3, #3
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	005b      	lsls	r3, r3, #1
 800c3d8:	69ba      	ldr	r2, [r7, #24]
 800c3da:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3de:	61fb      	str	r3, [r7, #28]
          break;
 800c3e0:	e00f      	b.n	800c402 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800c3e2:	4b5b      	ldr	r3, [pc, #364]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c3e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c3e8:	f003 0302 	and.w	r3, r3, #2
 800c3ec:	2b02      	cmp	r3, #2
 800c3ee:	d10a      	bne.n	800c406 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 800c3f0:	4b59      	ldr	r3, [pc, #356]	; (800c558 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 800c3f2:	61fb      	str	r3, [r7, #28]
          break;
 800c3f4:	e007      	b.n	800c406 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 800c3f6:	bf00      	nop
 800c3f8:	e384      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c3fa:	bf00      	nop
 800c3fc:	e382      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c3fe:	bf00      	nop
 800c400:	e380      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c402:	bf00      	nop
 800c404:	e37e      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c406:	bf00      	nop
        break;
 800c408:	e37c      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800c40a:	4b51      	ldr	r3, [pc, #324]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c40c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c410:	f003 0303 	and.w	r3, r3, #3
 800c414:	613b      	str	r3, [r7, #16]
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	2b03      	cmp	r3, #3
 800c41a:	d828      	bhi.n	800c46e <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 800c41c:	a201      	add	r2, pc, #4	; (adr r2, 800c424 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 800c41e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c422:	bf00      	nop
 800c424:	0800c435 	.word	0x0800c435
 800c428:	0800c43d 	.word	0x0800c43d
 800c42c:	0800c445 	.word	0x0800c445
 800c430:	0800c459 	.word	0x0800c459
          frequency = HAL_RCC_GetPCLK2Freq();
 800c434:	f7ff fa46 	bl	800b8c4 <HAL_RCC_GetPCLK2Freq>
 800c438:	61f8      	str	r0, [r7, #28]
          break;
 800c43a:	e01d      	b.n	800c478 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 800c43c:	f7ff f994 	bl	800b768 <HAL_RCC_GetSysClockFreq>
 800c440:	61f8      	str	r0, [r7, #28]
          break;
 800c442:	e019      	b.n	800c478 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c444:	4b42      	ldr	r3, [pc, #264]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c44c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c450:	d10f      	bne.n	800c472 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 800c452:	4b42      	ldr	r3, [pc, #264]	; (800c55c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 800c454:	61fb      	str	r3, [r7, #28]
          break;
 800c456:	e00c      	b.n	800c472 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c458:	4b3d      	ldr	r3, [pc, #244]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c45a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c45e:	f003 0302 	and.w	r3, r3, #2
 800c462:	2b02      	cmp	r3, #2
 800c464:	d107      	bne.n	800c476 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 800c466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c46a:	61fb      	str	r3, [r7, #28]
          break;
 800c46c:	e003      	b.n	800c476 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 800c46e:	bf00      	nop
 800c470:	e348      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c472:	bf00      	nop
 800c474:	e346      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c476:	bf00      	nop
        break;
 800c478:	e344      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800c47a:	4b35      	ldr	r3, [pc, #212]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c47c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c480:	f003 030c 	and.w	r3, r3, #12
 800c484:	613b      	str	r3, [r7, #16]
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	2b0c      	cmp	r3, #12
 800c48a:	d83a      	bhi.n	800c502 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 800c48c:	a201      	add	r2, pc, #4	; (adr r2, 800c494 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800c48e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c492:	bf00      	nop
 800c494:	0800c4c9 	.word	0x0800c4c9
 800c498:	0800c503 	.word	0x0800c503
 800c49c:	0800c503 	.word	0x0800c503
 800c4a0:	0800c503 	.word	0x0800c503
 800c4a4:	0800c4d1 	.word	0x0800c4d1
 800c4a8:	0800c503 	.word	0x0800c503
 800c4ac:	0800c503 	.word	0x0800c503
 800c4b0:	0800c503 	.word	0x0800c503
 800c4b4:	0800c4d9 	.word	0x0800c4d9
 800c4b8:	0800c503 	.word	0x0800c503
 800c4bc:	0800c503 	.word	0x0800c503
 800c4c0:	0800c503 	.word	0x0800c503
 800c4c4:	0800c4ed 	.word	0x0800c4ed
          frequency = HAL_RCC_GetPCLK1Freq();
 800c4c8:	f7ff f9e6 	bl	800b898 <HAL_RCC_GetPCLK1Freq>
 800c4cc:	61f8      	str	r0, [r7, #28]
          break;
 800c4ce:	e01d      	b.n	800c50c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 800c4d0:	f7ff f94a 	bl	800b768 <HAL_RCC_GetSysClockFreq>
 800c4d4:	61f8      	str	r0, [r7, #28]
          break;
 800c4d6:	e019      	b.n	800c50c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c4d8:	4b1d      	ldr	r3, [pc, #116]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c4e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4e4:	d10f      	bne.n	800c506 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 800c4e6:	4b1d      	ldr	r3, [pc, #116]	; (800c55c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 800c4e8:	61fb      	str	r3, [r7, #28]
          break;
 800c4ea:	e00c      	b.n	800c506 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c4ec:	4b18      	ldr	r3, [pc, #96]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c4ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4f2:	f003 0302 	and.w	r3, r3, #2
 800c4f6:	2b02      	cmp	r3, #2
 800c4f8:	d107      	bne.n	800c50a <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 800c4fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4fe:	61fb      	str	r3, [r7, #28]
          break;
 800c500:	e003      	b.n	800c50a <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 800c502:	bf00      	nop
 800c504:	e2fe      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c506:	bf00      	nop
 800c508:	e2fc      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c50a:	bf00      	nop
        break;
 800c50c:	e2fa      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800c50e:	4b10      	ldr	r3, [pc, #64]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c514:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c518:	613b      	str	r3, [r7, #16]
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	2b30      	cmp	r3, #48	; 0x30
 800c51e:	d029      	beq.n	800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	2b30      	cmp	r3, #48	; 0x30
 800c524:	d831      	bhi.n	800c58a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	2b20      	cmp	r3, #32
 800c52a:	d019      	beq.n	800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	2b20      	cmp	r3, #32
 800c530:	d82b      	bhi.n	800c58a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d003      	beq.n	800c540 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	2b10      	cmp	r3, #16
 800c53c:	d004      	beq.n	800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 800c53e:	e024      	b.n	800c58a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c540:	f7ff f9aa 	bl	800b898 <HAL_RCC_GetPCLK1Freq>
 800c544:	61f8      	str	r0, [r7, #28]
          break;
 800c546:	e025      	b.n	800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          frequency = HAL_RCC_GetSysClockFreq();
 800c548:	f7ff f90e 	bl	800b768 <HAL_RCC_GetSysClockFreq>
 800c54c:	61f8      	str	r0, [r7, #28]
          break;
 800c54e:	e021      	b.n	800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 800c550:	40021000 	.word	0x40021000
 800c554:	08013514 	.word	0x08013514
 800c558:	02dc6c00 	.word	0x02dc6c00
 800c55c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c560:	4b8f      	ldr	r3, [pc, #572]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c56c:	d10f      	bne.n	800c58e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
            frequency = HSI_VALUE;
 800c56e:	4b8d      	ldr	r3, [pc, #564]	; (800c7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800c570:	61fb      	str	r3, [r7, #28]
          break;
 800c572:	e00c      	b.n	800c58e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c574:	4b8a      	ldr	r3, [pc, #552]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c57a:	f003 0302 	and.w	r3, r3, #2
 800c57e:	2b02      	cmp	r3, #2
 800c580:	d107      	bne.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
            frequency = LSE_VALUE;
 800c582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c586:	61fb      	str	r3, [r7, #28]
          break;
 800c588:	e003      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          break;
 800c58a:	bf00      	nop
 800c58c:	e2ba      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c58e:	bf00      	nop
 800c590:	e2b8      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c592:	bf00      	nop
        break;
 800c594:	e2b6      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800c596:	4b82      	ldr	r3, [pc, #520]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c59c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c5a0:	613b      	str	r3, [r7, #16]
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	2bc0      	cmp	r3, #192	; 0xc0
 800c5a6:	d021      	beq.n	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	2bc0      	cmp	r3, #192	; 0xc0
 800c5ac:	d829      	bhi.n	800c602 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	2b80      	cmp	r3, #128	; 0x80
 800c5b2:	d011      	beq.n	800c5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	2b80      	cmp	r3, #128	; 0x80
 800c5b8:	d823      	bhi.n	800c602 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d003      	beq.n	800c5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	2b40      	cmp	r3, #64	; 0x40
 800c5c4:	d004      	beq.n	800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          break;
 800c5c6:	e01c      	b.n	800c602 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c5c8:	f7ff f966 	bl	800b898 <HAL_RCC_GetPCLK1Freq>
 800c5cc:	61f8      	str	r0, [r7, #28]
          break;
 800c5ce:	e01d      	b.n	800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HAL_RCC_GetSysClockFreq();
 800c5d0:	f7ff f8ca 	bl	800b768 <HAL_RCC_GetSysClockFreq>
 800c5d4:	61f8      	str	r0, [r7, #28]
          break;
 800c5d6:	e019      	b.n	800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c5d8:	4b71      	ldr	r3, [pc, #452]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c5e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5e4:	d10f      	bne.n	800c606 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = HSI_VALUE;
 800c5e6:	4b6f      	ldr	r3, [pc, #444]	; (800c7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800c5e8:	61fb      	str	r3, [r7, #28]
          break;
 800c5ea:	e00c      	b.n	800c606 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c5ec:	4b6c      	ldr	r3, [pc, #432]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c5ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5f2:	f003 0302 	and.w	r3, r3, #2
 800c5f6:	2b02      	cmp	r3, #2
 800c5f8:	d107      	bne.n	800c60a <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            frequency = LSE_VALUE;
 800c5fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c5fe:	61fb      	str	r3, [r7, #28]
          break;
 800c600:	e003      	b.n	800c60a <HAL_RCCEx_GetPeriphCLKFreq+0x662>
          break;
 800c602:	bf00      	nop
 800c604:	e27e      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c606:	bf00      	nop
 800c608:	e27c      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c60a:	bf00      	nop
        break;
 800c60c:	e27a      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800c60e:	4b64      	ldr	r3, [pc, #400]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c614:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c618:	613b      	str	r3, [r7, #16]
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c620:	d025      	beq.n	800c66e <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c628:	d82c      	bhi.n	800c684 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c630:	d013      	beq.n	800c65a <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c638:	d824      	bhi.n	800c684 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d004      	beq.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c646:	d004      	beq.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          break;
 800c648:	e01c      	b.n	800c684 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c64a:	f7ff f925 	bl	800b898 <HAL_RCC_GetPCLK1Freq>
 800c64e:	61f8      	str	r0, [r7, #28]
          break;
 800c650:	e01d      	b.n	800c68e <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetSysClockFreq();
 800c652:	f7ff f889 	bl	800b768 <HAL_RCC_GetSysClockFreq>
 800c656:	61f8      	str	r0, [r7, #28]
          break;
 800c658:	e019      	b.n	800c68e <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c65a:	4b51      	ldr	r3, [pc, #324]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c666:	d10f      	bne.n	800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            frequency = HSI_VALUE;
 800c668:	4b4e      	ldr	r3, [pc, #312]	; (800c7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800c66a:	61fb      	str	r3, [r7, #28]
          break;
 800c66c:	e00c      	b.n	800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c66e:	4b4c      	ldr	r3, [pc, #304]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c674:	f003 0302 	and.w	r3, r3, #2
 800c678:	2b02      	cmp	r3, #2
 800c67a:	d107      	bne.n	800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
            frequency = LSE_VALUE;
 800c67c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c680:	61fb      	str	r3, [r7, #28]
          break;
 800c682:	e003      	b.n	800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          break;
 800c684:	bf00      	nop
 800c686:	e23d      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c688:	bf00      	nop
 800c68a:	e23b      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c68c:	bf00      	nop
        break;
 800c68e:	e239      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800c690:	4b43      	ldr	r3, [pc, #268]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c696:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c69a:	613b      	str	r3, [r7, #16]
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c6a2:	d025      	beq.n	800c6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c6aa:	d82c      	bhi.n	800c706 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c6b2:	d013      	beq.n	800c6dc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c6ba:	d824      	bhi.n	800c706 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d004      	beq.n	800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6c8:	d004      	beq.n	800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
          break;
 800c6ca:	e01c      	b.n	800c706 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c6cc:	f7ff f8e4 	bl	800b898 <HAL_RCC_GetPCLK1Freq>
 800c6d0:	61f8      	str	r0, [r7, #28]
          break;
 800c6d2:	e01d      	b.n	800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          frequency = HAL_RCC_GetSysClockFreq();
 800c6d4:	f7ff f848 	bl	800b768 <HAL_RCC_GetSysClockFreq>
 800c6d8:	61f8      	str	r0, [r7, #28]
          break;
 800c6da:	e019      	b.n	800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c6dc:	4b30      	ldr	r3, [pc, #192]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6e8:	d10f      	bne.n	800c70a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
            frequency = HSI_VALUE;
 800c6ea:	4b2e      	ldr	r3, [pc, #184]	; (800c7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800c6ec:	61fb      	str	r3, [r7, #28]
          break;
 800c6ee:	e00c      	b.n	800c70a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c6f0:	4b2b      	ldr	r3, [pc, #172]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c6f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6f6:	f003 0302 	and.w	r3, r3, #2
 800c6fa:	2b02      	cmp	r3, #2
 800c6fc:	d107      	bne.n	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            frequency = LSE_VALUE;
 800c6fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c702:	61fb      	str	r3, [r7, #28]
          break;
 800c704:	e003      	b.n	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0x766>
          break;
 800c706:	bf00      	nop
 800c708:	e1fc      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c70a:	bf00      	nop
 800c70c:	e1fa      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c70e:	bf00      	nop
        break;
 800c710:	e1f8      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c712:	4b23      	ldr	r3, [pc, #140]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c718:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c71c:	613b      	str	r3, [r7, #16]
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c724:	d00c      	beq.n	800c740 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c72c:	d868      	bhi.n	800c800 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c734:	d008      	beq.n	800c748 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c73c:	d034      	beq.n	800c7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
          break;
 800c73e:	e05f      	b.n	800c800 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          frequency = HAL_RCC_GetSysClockFreq();
 800c740:	f7ff f812 	bl	800b768 <HAL_RCC_GetSysClockFreq>
 800c744:	61f8      	str	r0, [r7, #28]
          break;
 800c746:	e060      	b.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800c748:	4b15      	ldr	r3, [pc, #84]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c754:	d156      	bne.n	800c804 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 800c756:	4b12      	ldr	r3, [pc, #72]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c758:	691b      	ldr	r3, [r3, #16]
 800c75a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d050      	beq.n	800c804 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800c762:	4b0f      	ldr	r3, [pc, #60]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c764:	691b      	ldr	r3, [r3, #16]
 800c766:	0a1b      	lsrs	r3, r3, #8
 800c768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c76c:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c76e:	69bb      	ldr	r3, [r7, #24]
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	fb03 f202 	mul.w	r2, r3, r2
 800c776:	4b0a      	ldr	r3, [pc, #40]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c778:	68db      	ldr	r3, [r3, #12]
 800c77a:	091b      	lsrs	r3, r3, #4
 800c77c:	f003 0307 	and.w	r3, r3, #7
 800c780:	3301      	adds	r3, #1
 800c782:	fbb2 f3f3 	udiv	r3, r2, r3
 800c786:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800c788:	4b05      	ldr	r3, [pc, #20]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c78a:	691b      	ldr	r3, [r3, #16]
 800c78c:	0e5b      	lsrs	r3, r3, #25
 800c78e:	f003 0303 	and.w	r3, r3, #3
 800c792:	3301      	adds	r3, #1
 800c794:	005b      	lsls	r3, r3, #1
 800c796:	69ba      	ldr	r2, [r7, #24]
 800c798:	fbb2 f3f3 	udiv	r3, r2, r3
 800c79c:	61fb      	str	r3, [r7, #28]
          break;
 800c79e:	e031      	b.n	800c804 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 800c7a0:	40021000 	.word	0x40021000
 800c7a4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800c7a8:	4b9c      	ldr	r3, [pc, #624]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7b4:	d128      	bne.n	800c808 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 800c7b6:	4b99      	ldr	r3, [pc, #612]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c7b8:	695b      	ldr	r3, [r3, #20]
 800c7ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d022      	beq.n	800c808 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800c7c2:	4b96      	ldr	r3, [pc, #600]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c7c4:	695b      	ldr	r3, [r3, #20]
 800c7c6:	0a1b      	lsrs	r3, r3, #8
 800c7c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7cc:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c7ce:	69bb      	ldr	r3, [r7, #24]
 800c7d0:	68fa      	ldr	r2, [r7, #12]
 800c7d2:	fb03 f202 	mul.w	r2, r3, r2
 800c7d6:	4b91      	ldr	r3, [pc, #580]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c7d8:	68db      	ldr	r3, [r3, #12]
 800c7da:	091b      	lsrs	r3, r3, #4
 800c7dc:	f003 0307 	and.w	r3, r3, #7
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7e6:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800c7e8:	4b8c      	ldr	r3, [pc, #560]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c7ea:	695b      	ldr	r3, [r3, #20]
 800c7ec:	0e5b      	lsrs	r3, r3, #25
 800c7ee:	f003 0303 	and.w	r3, r3, #3
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	005b      	lsls	r3, r3, #1
 800c7f6:	69ba      	ldr	r2, [r7, #24]
 800c7f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7fc:	61fb      	str	r3, [r7, #28]
          break;
 800c7fe:	e003      	b.n	800c808 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 800c800:	bf00      	nop
 800c802:	e17f      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c804:	bf00      	nop
 800c806:	e17d      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c808:	bf00      	nop
        break;
 800c80a:	e17b      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800c80c:	4b83      	ldr	r3, [pc, #524]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c80e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c812:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c816:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d103      	bne.n	800c826 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          frequency = HAL_RCC_GetPCLK2Freq();
 800c81e:	f7ff f851 	bl	800b8c4 <HAL_RCC_GetPCLK2Freq>
 800c822:	61f8      	str	r0, [r7, #28]
        break;
 800c824:	e16e      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          frequency = HAL_RCC_GetSysClockFreq();
 800c826:	f7fe ff9f 	bl	800b768 <HAL_RCC_GetSysClockFreq>
 800c82a:	61f8      	str	r0, [r7, #28]
        break;
 800c82c:	e16a      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800c82e:	4b7b      	ldr	r3, [pc, #492]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c834:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c838:	613b      	str	r3, [r7, #16]
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c840:	d013      	beq.n	800c86a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c848:	d819      	bhi.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d004      	beq.n	800c85a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c856:	d004      	beq.n	800c862 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800c858:	e011      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c85a:	f7ff f81d 	bl	800b898 <HAL_RCC_GetPCLK1Freq>
 800c85e:	61f8      	str	r0, [r7, #28]
          break;
 800c860:	e010      	b.n	800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          frequency = HAL_RCC_GetSysClockFreq();
 800c862:	f7fe ff81 	bl	800b768 <HAL_RCC_GetSysClockFreq>
 800c866:	61f8      	str	r0, [r7, #28]
          break;
 800c868:	e00c      	b.n	800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c86a:	4b6c      	ldr	r3, [pc, #432]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c876:	d104      	bne.n	800c882 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
            frequency = HSI_VALUE;
 800c878:	4b69      	ldr	r3, [pc, #420]	; (800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800c87a:	61fb      	str	r3, [r7, #28]
          break;
 800c87c:	e001      	b.n	800c882 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
 800c87e:	bf00      	nop
 800c880:	e140      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c882:	bf00      	nop
        break;
 800c884:	e13e      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800c886:	4b65      	ldr	r3, [pc, #404]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c88c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c890:	613b      	str	r3, [r7, #16]
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c898:	d013      	beq.n	800c8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c8a0:	d819      	bhi.n	800c8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d004      	beq.n	800c8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c8ae:	d004      	beq.n	800c8ba <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 800c8b0:	e011      	b.n	800c8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c8b2:	f7fe fff1 	bl	800b898 <HAL_RCC_GetPCLK1Freq>
 800c8b6:	61f8      	str	r0, [r7, #28]
          break;
 800c8b8:	e010      	b.n	800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetSysClockFreq();
 800c8ba:	f7fe ff55 	bl	800b768 <HAL_RCC_GetSysClockFreq>
 800c8be:	61f8      	str	r0, [r7, #28]
          break;
 800c8c0:	e00c      	b.n	800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c8c2:	4b56      	ldr	r3, [pc, #344]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c8ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8ce:	d104      	bne.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = HSI_VALUE;
 800c8d0:	4b53      	ldr	r3, [pc, #332]	; (800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800c8d2:	61fb      	str	r3, [r7, #28]
          break;
 800c8d4:	e001      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 800c8d6:	bf00      	nop
 800c8d8:	e114      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c8da:	bf00      	nop
        break;
 800c8dc:	e112      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800c8de:	4b4f      	ldr	r3, [pc, #316]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c8e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c8e8:	613b      	str	r3, [r7, #16]
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8f0:	d013      	beq.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8f8:	d819      	bhi.n	800c92e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d004      	beq.n	800c90a <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c906:	d004      	beq.n	800c912 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          break;
 800c908:	e011      	b.n	800c92e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c90a:	f7fe ffc5 	bl	800b898 <HAL_RCC_GetPCLK1Freq>
 800c90e:	61f8      	str	r0, [r7, #28]
          break;
 800c910:	e010      	b.n	800c934 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = HAL_RCC_GetSysClockFreq();
 800c912:	f7fe ff29 	bl	800b768 <HAL_RCC_GetSysClockFreq>
 800c916:	61f8      	str	r0, [r7, #28]
          break;
 800c918:	e00c      	b.n	800c934 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c91a:	4b40      	ldr	r3, [pc, #256]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c926:	d104      	bne.n	800c932 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
            frequency = HSI_VALUE;
 800c928:	4b3d      	ldr	r3, [pc, #244]	; (800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800c92a:	61fb      	str	r3, [r7, #28]
          break;
 800c92c:	e001      	b.n	800c932 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
 800c92e:	bf00      	nop
 800c930:	e0e8      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c932:	bf00      	nop
        break;
 800c934:	e0e6      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800c936:	4b39      	ldr	r3, [pc, #228]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c938:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c93c:	f003 0303 	and.w	r3, r3, #3
 800c940:	613b      	str	r3, [r7, #16]
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	2b02      	cmp	r3, #2
 800c946:	d011      	beq.n	800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	2b02      	cmp	r3, #2
 800c94c:	d818      	bhi.n	800c980 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d003      	beq.n	800c95c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	2b01      	cmp	r3, #1
 800c958:	d004      	beq.n	800c964 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          break;
 800c95a:	e011      	b.n	800c980 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c95c:	f7fe ff9c 	bl	800b898 <HAL_RCC_GetPCLK1Freq>
 800c960:	61f8      	str	r0, [r7, #28]
          break;
 800c962:	e010      	b.n	800c986 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          frequency = HAL_RCC_GetSysClockFreq();
 800c964:	f7fe ff00 	bl	800b768 <HAL_RCC_GetSysClockFreq>
 800c968:	61f8      	str	r0, [r7, #28]
          break;
 800c96a:	e00c      	b.n	800c986 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c96c:	4b2b      	ldr	r3, [pc, #172]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c978:	d104      	bne.n	800c984 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = HSI_VALUE;
 800c97a:	4b29      	ldr	r3, [pc, #164]	; (800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800c97c:	61fb      	str	r3, [r7, #28]
          break;
 800c97e:	e001      	b.n	800c984 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 800c980:	bf00      	nop
 800c982:	e0bf      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c984:	bf00      	nop
        break;
 800c986:	e0bd      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800c988:	4b24      	ldr	r3, [pc, #144]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c98a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c98e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800c992:	613b      	str	r3, [r7, #16]
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c99a:	d02c      	beq.n	800c9f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c9a2:	d833      	bhi.n	800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c9aa:	d01a      	beq.n	800c9e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c9b2:	d82b      	bhi.n	800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d004      	beq.n	800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c9c0:	d004      	beq.n	800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 800c9c2:	e023      	b.n	800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c9c4:	f7fe ff68 	bl	800b898 <HAL_RCC_GetPCLK1Freq>
 800c9c8:	61f8      	str	r0, [r7, #28]
          break;
 800c9ca:	e026      	b.n	800ca1a <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800c9cc:	4b13      	ldr	r3, [pc, #76]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c9ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c9d2:	f003 0302 	and.w	r3, r3, #2
 800c9d6:	2b02      	cmp	r3, #2
 800c9d8:	d11a      	bne.n	800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 800c9da:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c9de:	61fb      	str	r3, [r7, #28]
          break;
 800c9e0:	e016      	b.n	800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c9e2:	4b0e      	ldr	r3, [pc, #56]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c9ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9ee:	d111      	bne.n	800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 800c9f0:	4b0b      	ldr	r3, [pc, #44]	; (800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800c9f2:	61fb      	str	r3, [r7, #28]
          break;
 800c9f4:	e00e      	b.n	800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c9f6:	4b09      	ldr	r3, [pc, #36]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c9f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9fc:	f003 0302 	and.w	r3, r3, #2
 800ca00:	2b02      	cmp	r3, #2
 800ca02:	d109      	bne.n	800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 800ca04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca08:	61fb      	str	r3, [r7, #28]
          break;
 800ca0a:	e005      	b.n	800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 800ca0c:	bf00      	nop
 800ca0e:	e079      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800ca10:	bf00      	nop
 800ca12:	e077      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800ca14:	bf00      	nop
 800ca16:	e075      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800ca18:	bf00      	nop
        break;
 800ca1a:	e073      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 800ca1c:	40021000 	.word	0x40021000
 800ca20:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800ca24:	4b3a      	ldr	r3, [pc, #232]	; (800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800ca26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca2a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800ca2e:	613b      	str	r3, [r7, #16]
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ca36:	d02c      	beq.n	800ca92 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ca3e:	d833      	bhi.n	800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca46:	d01a      	beq.n	800ca7e <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca4e:	d82b      	bhi.n	800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d004      	beq.n	800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca5c:	d004      	beq.n	800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800ca5e:	e023      	b.n	800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ca60:	f7fe ff1a 	bl	800b898 <HAL_RCC_GetPCLK1Freq>
 800ca64:	61f8      	str	r0, [r7, #28]
          break;
 800ca66:	e026      	b.n	800cab6 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800ca68:	4b29      	ldr	r3, [pc, #164]	; (800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800ca6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca6e:	f003 0302 	and.w	r3, r3, #2
 800ca72:	2b02      	cmp	r3, #2
 800ca74:	d11a      	bne.n	800caac <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
              frequency = LSI_VALUE;
 800ca76:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ca7a:	61fb      	str	r3, [r7, #28]
          break;
 800ca7c:	e016      	b.n	800caac <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ca7e:	4b24      	ldr	r3, [pc, #144]	; (800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca8a:	d111      	bne.n	800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
            frequency = HSI_VALUE;
 800ca8c:	4b21      	ldr	r3, [pc, #132]	; (800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 800ca8e:	61fb      	str	r3, [r7, #28]
          break;
 800ca90:	e00e      	b.n	800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ca92:	4b1f      	ldr	r3, [pc, #124]	; (800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800ca94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca98:	f003 0302 	and.w	r3, r3, #2
 800ca9c:	2b02      	cmp	r3, #2
 800ca9e:	d109      	bne.n	800cab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = LSE_VALUE;
 800caa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800caa4:	61fb      	str	r3, [r7, #28]
          break;
 800caa6:	e005      	b.n	800cab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 800caa8:	bf00      	nop
 800caaa:	e02b      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800caac:	bf00      	nop
 800caae:	e029      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800cab0:	bf00      	nop
 800cab2:	e027      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800cab4:	bf00      	nop
        break;
 800cab6:	e025      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800cab8:	4b15      	ldr	r3, [pc, #84]	; (800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800caba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cabe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cac2:	613b      	str	r3, [r7, #16]
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d004      	beq.n	800cad4 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cad0:	d004      	beq.n	800cadc <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 800cad2:	e00d      	b.n	800caf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cad4:	f7fe fee0 	bl	800b898 <HAL_RCC_GetPCLK1Freq>
 800cad8:	61f8      	str	r0, [r7, #28]
          break;
 800cada:	e009      	b.n	800caf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cadc:	4b0c      	ldr	r3, [pc, #48]	; (800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cae8:	d101      	bne.n	800caee <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
            frequency = HSI_VALUE;
 800caea:	4b0a      	ldr	r3, [pc, #40]	; (800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 800caec:	61fb      	str	r3, [r7, #28]
          break;
 800caee:	bf00      	nop
        break;
 800caf0:	e008      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800caf2:	bf00      	nop
 800caf4:	e006      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800caf6:	bf00      	nop
 800caf8:	e004      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800cafa:	bf00      	nop
 800cafc:	e002      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800cafe:	bf00      	nop
 800cb00:	e000      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800cb02:	bf00      	nop
    }
  }

  return(frequency);
 800cb04:	69fb      	ldr	r3, [r7, #28]
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3720      	adds	r7, #32
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	40021000 	.word	0x40021000
 800cb14:	00f42400 	.word	0x00f42400

0800cb18 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800cb18:	b480      	push	{r7}
 800cb1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800cb1c:	4b05      	ldr	r3, [pc, #20]	; (800cb34 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a04      	ldr	r2, [pc, #16]	; (800cb34 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800cb22:	f043 0304 	orr.w	r3, r3, #4
 800cb26:	6013      	str	r3, [r2, #0]
}
 800cb28:	bf00      	nop
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr
 800cb32:	bf00      	nop
 800cb34:	40021000 	.word	0x40021000

0800cb38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cb42:	2300      	movs	r3, #0
 800cb44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800cb46:	4b74      	ldr	r3, [pc, #464]	; (800cd18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	f003 0303 	and.w	r3, r3, #3
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d018      	beq.n	800cb84 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800cb52:	4b71      	ldr	r3, [pc, #452]	; (800cd18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cb54:	68db      	ldr	r3, [r3, #12]
 800cb56:	f003 0203 	and.w	r2, r3, #3
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d10d      	bne.n	800cb7e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
       ||
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d009      	beq.n	800cb7e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800cb6a:	4b6b      	ldr	r3, [pc, #428]	; (800cd18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cb6c:	68db      	ldr	r3, [r3, #12]
 800cb6e:	091b      	lsrs	r3, r3, #4
 800cb70:	f003 0307 	and.w	r3, r3, #7
 800cb74:	1c5a      	adds	r2, r3, #1
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	685b      	ldr	r3, [r3, #4]
       ||
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d047      	beq.n	800cc0e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800cb7e:	2301      	movs	r3, #1
 800cb80:	73fb      	strb	r3, [r7, #15]
 800cb82:	e044      	b.n	800cc0e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	2b03      	cmp	r3, #3
 800cb8a:	d018      	beq.n	800cbbe <RCCEx_PLLSAI1_Config+0x86>
 800cb8c:	2b03      	cmp	r3, #3
 800cb8e:	d825      	bhi.n	800cbdc <RCCEx_PLLSAI1_Config+0xa4>
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d002      	beq.n	800cb9a <RCCEx_PLLSAI1_Config+0x62>
 800cb94:	2b02      	cmp	r3, #2
 800cb96:	d009      	beq.n	800cbac <RCCEx_PLLSAI1_Config+0x74>
 800cb98:	e020      	b.n	800cbdc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800cb9a:	4b5f      	ldr	r3, [pc, #380]	; (800cd18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f003 0302 	and.w	r3, r3, #2
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d11d      	bne.n	800cbe2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800cba6:	2301      	movs	r3, #1
 800cba8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cbaa:	e01a      	b.n	800cbe2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cbac:	4b5a      	ldr	r3, [pc, #360]	; (800cd18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d116      	bne.n	800cbe6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800cbb8:	2301      	movs	r3, #1
 800cbba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cbbc:	e013      	b.n	800cbe6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800cbbe:	4b56      	ldr	r3, [pc, #344]	; (800cd18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d10f      	bne.n	800cbea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800cbca:	4b53      	ldr	r3, [pc, #332]	; (800cd18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d109      	bne.n	800cbea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cbda:	e006      	b.n	800cbea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800cbdc:	2301      	movs	r3, #1
 800cbde:	73fb      	strb	r3, [r7, #15]
      break;
 800cbe0:	e004      	b.n	800cbec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cbe2:	bf00      	nop
 800cbe4:	e002      	b.n	800cbec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cbe6:	bf00      	nop
 800cbe8:	e000      	b.n	800cbec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cbea:	bf00      	nop
    }

    if(status == HAL_OK)
 800cbec:	7bfb      	ldrb	r3, [r7, #15]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d10d      	bne.n	800cc0e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800cbf2:	4b49      	ldr	r3, [pc, #292]	; (800cd18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cbf4:	68db      	ldr	r3, [r3, #12]
 800cbf6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6819      	ldr	r1, [r3, #0]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	3b01      	subs	r3, #1
 800cc04:	011b      	lsls	r3, r3, #4
 800cc06:	430b      	orrs	r3, r1
 800cc08:	4943      	ldr	r1, [pc, #268]	; (800cd18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc0a:	4313      	orrs	r3, r2
 800cc0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800cc0e:	7bfb      	ldrb	r3, [r7, #15]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d17c      	bne.n	800cd0e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800cc14:	4b40      	ldr	r3, [pc, #256]	; (800cd18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4a3f      	ldr	r2, [pc, #252]	; (800cd18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cc1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc20:	f7fa fa22 	bl	8007068 <HAL_GetTick>
 800cc24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cc26:	e009      	b.n	800cc3c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cc28:	f7fa fa1e 	bl	8007068 <HAL_GetTick>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	1ad3      	subs	r3, r2, r3
 800cc32:	2b02      	cmp	r3, #2
 800cc34:	d902      	bls.n	800cc3c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800cc36:	2303      	movs	r3, #3
 800cc38:	73fb      	strb	r3, [r7, #15]
        break;
 800cc3a:	e005      	b.n	800cc48 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cc3c:	4b36      	ldr	r3, [pc, #216]	; (800cd18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d1ef      	bne.n	800cc28 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800cc48:	7bfb      	ldrb	r3, [r7, #15]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d15f      	bne.n	800cd0e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d110      	bne.n	800cc76 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cc54:	4b30      	ldr	r3, [pc, #192]	; (800cd18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc56:	691b      	ldr	r3, [r3, #16]
 800cc58:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800cc5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cc60:	687a      	ldr	r2, [r7, #4]
 800cc62:	6892      	ldr	r2, [r2, #8]
 800cc64:	0211      	lsls	r1, r2, #8
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	68d2      	ldr	r2, [r2, #12]
 800cc6a:	06d2      	lsls	r2, r2, #27
 800cc6c:	430a      	orrs	r2, r1
 800cc6e:	492a      	ldr	r1, [pc, #168]	; (800cd18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc70:	4313      	orrs	r3, r2
 800cc72:	610b      	str	r3, [r1, #16]
 800cc74:	e027      	b.n	800ccc6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	d112      	bne.n	800cca2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cc7c:	4b26      	ldr	r3, [pc, #152]	; (800cd18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc7e:	691b      	ldr	r3, [r3, #16]
 800cc80:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800cc84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cc88:	687a      	ldr	r2, [r7, #4]
 800cc8a:	6892      	ldr	r2, [r2, #8]
 800cc8c:	0211      	lsls	r1, r2, #8
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	6912      	ldr	r2, [r2, #16]
 800cc92:	0852      	lsrs	r2, r2, #1
 800cc94:	3a01      	subs	r2, #1
 800cc96:	0552      	lsls	r2, r2, #21
 800cc98:	430a      	orrs	r2, r1
 800cc9a:	491f      	ldr	r1, [pc, #124]	; (800cd18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc9c:	4313      	orrs	r3, r2
 800cc9e:	610b      	str	r3, [r1, #16]
 800cca0:	e011      	b.n	800ccc6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cca2:	4b1d      	ldr	r3, [pc, #116]	; (800cd18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cca4:	691b      	ldr	r3, [r3, #16]
 800cca6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800ccaa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ccae:	687a      	ldr	r2, [r7, #4]
 800ccb0:	6892      	ldr	r2, [r2, #8]
 800ccb2:	0211      	lsls	r1, r2, #8
 800ccb4:	687a      	ldr	r2, [r7, #4]
 800ccb6:	6952      	ldr	r2, [r2, #20]
 800ccb8:	0852      	lsrs	r2, r2, #1
 800ccba:	3a01      	subs	r2, #1
 800ccbc:	0652      	lsls	r2, r2, #25
 800ccbe:	430a      	orrs	r2, r1
 800ccc0:	4915      	ldr	r1, [pc, #84]	; (800cd18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800ccc6:	4b14      	ldr	r3, [pc, #80]	; (800cd18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	4a13      	ldr	r2, [pc, #76]	; (800cd18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cccc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ccd0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccd2:	f7fa f9c9 	bl	8007068 <HAL_GetTick>
 800ccd6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ccd8:	e009      	b.n	800ccee <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ccda:	f7fa f9c5 	bl	8007068 <HAL_GetTick>
 800ccde:	4602      	mov	r2, r0
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	1ad3      	subs	r3, r2, r3
 800cce4:	2b02      	cmp	r3, #2
 800cce6:	d902      	bls.n	800ccee <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800cce8:	2303      	movs	r3, #3
 800ccea:	73fb      	strb	r3, [r7, #15]
          break;
 800ccec:	e005      	b.n	800ccfa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ccee:	4b0a      	ldr	r3, [pc, #40]	; (800cd18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d0ef      	beq.n	800ccda <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800ccfa:	7bfb      	ldrb	r3, [r7, #15]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d106      	bne.n	800cd0e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800cd00:	4b05      	ldr	r3, [pc, #20]	; (800cd18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd02:	691a      	ldr	r2, [r3, #16]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	699b      	ldr	r3, [r3, #24]
 800cd08:	4903      	ldr	r1, [pc, #12]	; (800cd18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd0a:	4313      	orrs	r3, r2
 800cd0c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800cd0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3710      	adds	r7, #16
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}
 800cd18:	40021000 	.word	0x40021000

0800cd1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd26:	2300      	movs	r3, #0
 800cd28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800cd2a:	4b69      	ldr	r3, [pc, #420]	; (800ced0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cd2c:	68db      	ldr	r3, [r3, #12]
 800cd2e:	f003 0303 	and.w	r3, r3, #3
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d018      	beq.n	800cd68 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800cd36:	4b66      	ldr	r3, [pc, #408]	; (800ced0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cd38:	68db      	ldr	r3, [r3, #12]
 800cd3a:	f003 0203 	and.w	r2, r3, #3
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d10d      	bne.n	800cd62 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
       ||
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d009      	beq.n	800cd62 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800cd4e:	4b60      	ldr	r3, [pc, #384]	; (800ced0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	091b      	lsrs	r3, r3, #4
 800cd54:	f003 0307 	and.w	r3, r3, #7
 800cd58:	1c5a      	adds	r2, r3, #1
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	685b      	ldr	r3, [r3, #4]
       ||
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d047      	beq.n	800cdf2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800cd62:	2301      	movs	r3, #1
 800cd64:	73fb      	strb	r3, [r7, #15]
 800cd66:	e044      	b.n	800cdf2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	2b03      	cmp	r3, #3
 800cd6e:	d018      	beq.n	800cda2 <RCCEx_PLLSAI2_Config+0x86>
 800cd70:	2b03      	cmp	r3, #3
 800cd72:	d825      	bhi.n	800cdc0 <RCCEx_PLLSAI2_Config+0xa4>
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	d002      	beq.n	800cd7e <RCCEx_PLLSAI2_Config+0x62>
 800cd78:	2b02      	cmp	r3, #2
 800cd7a:	d009      	beq.n	800cd90 <RCCEx_PLLSAI2_Config+0x74>
 800cd7c:	e020      	b.n	800cdc0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800cd7e:	4b54      	ldr	r3, [pc, #336]	; (800ced0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f003 0302 	and.w	r3, r3, #2
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d11d      	bne.n	800cdc6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cd8e:	e01a      	b.n	800cdc6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cd90:	4b4f      	ldr	r3, [pc, #316]	; (800ced0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d116      	bne.n	800cdca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cda0:	e013      	b.n	800cdca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800cda2:	4b4b      	ldr	r3, [pc, #300]	; (800ced0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d10f      	bne.n	800cdce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800cdae:	4b48      	ldr	r3, [pc, #288]	; (800ced0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d109      	bne.n	800cdce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cdbe:	e006      	b.n	800cdce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	73fb      	strb	r3, [r7, #15]
      break;
 800cdc4:	e004      	b.n	800cdd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800cdc6:	bf00      	nop
 800cdc8:	e002      	b.n	800cdd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800cdca:	bf00      	nop
 800cdcc:	e000      	b.n	800cdd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800cdce:	bf00      	nop
    }

    if(status == HAL_OK)
 800cdd0:	7bfb      	ldrb	r3, [r7, #15]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d10d      	bne.n	800cdf2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800cdd6:	4b3e      	ldr	r3, [pc, #248]	; (800ced0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cdd8:	68db      	ldr	r3, [r3, #12]
 800cdda:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6819      	ldr	r1, [r3, #0]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	3b01      	subs	r3, #1
 800cde8:	011b      	lsls	r3, r3, #4
 800cdea:	430b      	orrs	r3, r1
 800cdec:	4938      	ldr	r1, [pc, #224]	; (800ced0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800cdf2:	7bfb      	ldrb	r3, [r7, #15]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d166      	bne.n	800cec6 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800cdf8:	4b35      	ldr	r3, [pc, #212]	; (800ced0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4a34      	ldr	r2, [pc, #208]	; (800ced0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cdfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce04:	f7fa f930 	bl	8007068 <HAL_GetTick>
 800ce08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ce0a:	e009      	b.n	800ce20 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ce0c:	f7fa f92c 	bl	8007068 <HAL_GetTick>
 800ce10:	4602      	mov	r2, r0
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	1ad3      	subs	r3, r2, r3
 800ce16:	2b02      	cmp	r3, #2
 800ce18:	d902      	bls.n	800ce20 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800ce1a:	2303      	movs	r3, #3
 800ce1c:	73fb      	strb	r3, [r7, #15]
        break;
 800ce1e:	e005      	b.n	800ce2c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ce20:	4b2b      	ldr	r3, [pc, #172]	; (800ced0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d1ef      	bne.n	800ce0c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800ce2c:	7bfb      	ldrb	r3, [r7, #15]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d149      	bne.n	800cec6 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d110      	bne.n	800ce5a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800ce38:	4b25      	ldr	r3, [pc, #148]	; (800ced0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800ce3a:	695b      	ldr	r3, [r3, #20]
 800ce3c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800ce40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ce44:	687a      	ldr	r2, [r7, #4]
 800ce46:	6892      	ldr	r2, [r2, #8]
 800ce48:	0211      	lsls	r1, r2, #8
 800ce4a:	687a      	ldr	r2, [r7, #4]
 800ce4c:	68d2      	ldr	r2, [r2, #12]
 800ce4e:	06d2      	lsls	r2, r2, #27
 800ce50:	430a      	orrs	r2, r1
 800ce52:	491f      	ldr	r1, [pc, #124]	; (800ced0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800ce54:	4313      	orrs	r3, r2
 800ce56:	614b      	str	r3, [r1, #20]
 800ce58:	e011      	b.n	800ce7e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800ce5a:	4b1d      	ldr	r3, [pc, #116]	; (800ced0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800ce5c:	695b      	ldr	r3, [r3, #20]
 800ce5e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800ce62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ce66:	687a      	ldr	r2, [r7, #4]
 800ce68:	6892      	ldr	r2, [r2, #8]
 800ce6a:	0211      	lsls	r1, r2, #8
 800ce6c:	687a      	ldr	r2, [r7, #4]
 800ce6e:	6912      	ldr	r2, [r2, #16]
 800ce70:	0852      	lsrs	r2, r2, #1
 800ce72:	3a01      	subs	r2, #1
 800ce74:	0652      	lsls	r2, r2, #25
 800ce76:	430a      	orrs	r2, r1
 800ce78:	4915      	ldr	r1, [pc, #84]	; (800ced0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800ce7e:	4b14      	ldr	r3, [pc, #80]	; (800ced0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	4a13      	ldr	r2, [pc, #76]	; (800ced0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800ce84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce88:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce8a:	f7fa f8ed 	bl	8007068 <HAL_GetTick>
 800ce8e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ce90:	e009      	b.n	800cea6 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ce92:	f7fa f8e9 	bl	8007068 <HAL_GetTick>
 800ce96:	4602      	mov	r2, r0
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	1ad3      	subs	r3, r2, r3
 800ce9c:	2b02      	cmp	r3, #2
 800ce9e:	d902      	bls.n	800cea6 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800cea0:	2303      	movs	r3, #3
 800cea2:	73fb      	strb	r3, [r7, #15]
          break;
 800cea4:	e005      	b.n	800ceb2 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800cea6:	4b0a      	ldr	r3, [pc, #40]	; (800ced0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d0ef      	beq.n	800ce92 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800ceb2:	7bfb      	ldrb	r3, [r7, #15]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d106      	bne.n	800cec6 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800ceb8:	4b05      	ldr	r3, [pc, #20]	; (800ced0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800ceba:	695a      	ldr	r2, [r3, #20]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	695b      	ldr	r3, [r3, #20]
 800cec0:	4903      	ldr	r1, [pc, #12]	; (800ced0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cec2:	4313      	orrs	r3, r2
 800cec4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800cec6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3710      	adds	r7, #16
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}
 800ced0:	40021000 	.word	0x40021000

0800ced4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b089      	sub	sp, #36	; 0x24
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800cede:	2300      	movs	r3, #0
 800cee0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800cee2:	2300      	movs	r3, #0
 800cee4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800cee6:	2300      	movs	r3, #0
 800cee8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cef0:	d10c      	bne.n	800cf0c <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800cef2:	4b77      	ldr	r3, [pc, #476]	; (800d0d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800cef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cef8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800cefc:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800cefe:	69bb      	ldr	r3, [r7, #24]
 800cf00:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cf04:	d112      	bne.n	800cf2c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800cf06:	4b73      	ldr	r3, [pc, #460]	; (800d0d4 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800cf08:	61fb      	str	r3, [r7, #28]
 800cf0a:	e00f      	b.n	800cf2c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf12:	d10b      	bne.n	800cf2c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800cf14:	4b6e      	ldr	r3, [pc, #440]	; (800d0d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800cf16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf1a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800cf1e:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800cf20:	69bb      	ldr	r3, [r7, #24]
 800cf22:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cf26:	d101      	bne.n	800cf2c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800cf28:	4b6a      	ldr	r3, [pc, #424]	; (800d0d4 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800cf2a:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800cf2c:	69fb      	ldr	r3, [r7, #28]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	f040 80c6 	bne.w	800d0c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800cf38:	69bb      	ldr	r3, [r7, #24]
 800cf3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cf3e:	d003      	beq.n	800cf48 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800cf40:	69bb      	ldr	r3, [r7, #24]
 800cf42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf46:	d13b      	bne.n	800cfc0 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800cf48:	4b61      	ldr	r3, [pc, #388]	; (800d0d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf54:	f040 80b3 	bne.w	800d0be <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 800cf58:	4b5d      	ldr	r3, [pc, #372]	; (800d0d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800cf5a:	68db      	ldr	r3, [r3, #12]
 800cf5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	f000 80ac 	beq.w	800d0be <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800cf66:	4b5a      	ldr	r3, [pc, #360]	; (800d0d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800cf68:	68db      	ldr	r3, [r3, #12]
 800cf6a:	091b      	lsrs	r3, r3, #4
 800cf6c:	f003 0307 	and.w	r3, r3, #7
 800cf70:	3301      	adds	r3, #1
 800cf72:	693a      	ldr	r2, [r7, #16]
 800cf74:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf78:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800cf7a:	4b55      	ldr	r3, [pc, #340]	; (800d0d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800cf7c:	68db      	ldr	r3, [r3, #12]
 800cf7e:	0a1b      	lsrs	r3, r3, #8
 800cf80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf84:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800cf86:	4b52      	ldr	r3, [pc, #328]	; (800d0d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800cf88:	68db      	ldr	r3, [r3, #12]
 800cf8a:	0edb      	lsrs	r3, r3, #27
 800cf8c:	f003 031f 	and.w	r3, r3, #31
 800cf90:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d10a      	bne.n	800cfae <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800cf98:	4b4d      	ldr	r3, [pc, #308]	; (800d0d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800cf9a:	68db      	ldr	r3, [r3, #12]
 800cf9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d002      	beq.n	800cfaa <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 800cfa4:	2311      	movs	r3, #17
 800cfa6:	617b      	str	r3, [r7, #20]
 800cfa8:	e001      	b.n	800cfae <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 800cfaa:	2307      	movs	r3, #7
 800cfac:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	68fa      	ldr	r2, [r7, #12]
 800cfb2:	fb03 f202 	mul.w	r2, r3, r2
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfbc:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800cfbe:	e07e      	b.n	800d0be <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800cfc0:	69bb      	ldr	r3, [r7, #24]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d139      	bne.n	800d03a <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800cfc6:	4b42      	ldr	r3, [pc, #264]	; (800d0d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cfd2:	d175      	bne.n	800d0c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 800cfd4:	4b3e      	ldr	r3, [pc, #248]	; (800d0d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800cfd6:	691b      	ldr	r3, [r3, #16]
 800cfd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d06f      	beq.n	800d0c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800cfe0:	4b3b      	ldr	r3, [pc, #236]	; (800d0d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800cfe2:	68db      	ldr	r3, [r3, #12]
 800cfe4:	091b      	lsrs	r3, r3, #4
 800cfe6:	f003 0307 	and.w	r3, r3, #7
 800cfea:	3301      	adds	r3, #1
 800cfec:	693a      	ldr	r2, [r7, #16]
 800cfee:	fbb2 f3f3 	udiv	r3, r2, r3
 800cff2:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800cff4:	4b36      	ldr	r3, [pc, #216]	; (800d0d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800cff6:	691b      	ldr	r3, [r3, #16]
 800cff8:	0a1b      	lsrs	r3, r3, #8
 800cffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cffe:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800d000:	4b33      	ldr	r3, [pc, #204]	; (800d0d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d002:	691b      	ldr	r3, [r3, #16]
 800d004:	0edb      	lsrs	r3, r3, #27
 800d006:	f003 031f 	and.w	r3, r3, #31
 800d00a:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d10a      	bne.n	800d028 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800d012:	4b2f      	ldr	r3, [pc, #188]	; (800d0d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d014:	691b      	ldr	r3, [r3, #16]
 800d016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d002      	beq.n	800d024 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 800d01e:	2311      	movs	r3, #17
 800d020:	617b      	str	r3, [r7, #20]
 800d022:	e001      	b.n	800d028 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 800d024:	2307      	movs	r3, #7
 800d026:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	68fa      	ldr	r2, [r7, #12]
 800d02c:	fb03 f202 	mul.w	r2, r3, r2
 800d030:	697b      	ldr	r3, [r7, #20]
 800d032:	fbb2 f3f3 	udiv	r3, r2, r3
 800d036:	61fb      	str	r3, [r7, #28]
 800d038:	e042      	b.n	800d0c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d040:	d003      	beq.n	800d04a <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 800d042:	69bb      	ldr	r3, [r7, #24]
 800d044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d048:	d13a      	bne.n	800d0c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800d04a:	4b21      	ldr	r3, [pc, #132]	; (800d0d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d056:	d133      	bne.n	800d0c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 800d058:	4b1d      	ldr	r3, [pc, #116]	; (800d0d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d05a:	695b      	ldr	r3, [r3, #20]
 800d05c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d060:	2b00      	cmp	r3, #0
 800d062:	d02d      	beq.n	800d0c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800d064:	4b1a      	ldr	r3, [pc, #104]	; (800d0d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d066:	68db      	ldr	r3, [r3, #12]
 800d068:	091b      	lsrs	r3, r3, #4
 800d06a:	f003 0307 	and.w	r3, r3, #7
 800d06e:	3301      	adds	r3, #1
 800d070:	693a      	ldr	r2, [r7, #16]
 800d072:	fbb2 f3f3 	udiv	r3, r2, r3
 800d076:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800d078:	4b15      	ldr	r3, [pc, #84]	; (800d0d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d07a:	695b      	ldr	r3, [r3, #20]
 800d07c:	0a1b      	lsrs	r3, r3, #8
 800d07e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d082:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800d084:	4b12      	ldr	r3, [pc, #72]	; (800d0d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d086:	695b      	ldr	r3, [r3, #20]
 800d088:	0edb      	lsrs	r3, r3, #27
 800d08a:	f003 031f 	and.w	r3, r3, #31
 800d08e:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d10a      	bne.n	800d0ac <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800d096:	4b0e      	ldr	r3, [pc, #56]	; (800d0d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d098:	695b      	ldr	r3, [r3, #20]
 800d09a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d002      	beq.n	800d0a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 800d0a2:	2311      	movs	r3, #17
 800d0a4:	617b      	str	r3, [r7, #20]
 800d0a6:	e001      	b.n	800d0ac <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 800d0a8:	2307      	movs	r3, #7
 800d0aa:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	68fa      	ldr	r2, [r7, #12]
 800d0b0:	fb03 f202 	mul.w	r2, r3, r2
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0ba:	61fb      	str	r3, [r7, #28]
 800d0bc:	e000      	b.n	800d0c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800d0be:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800d0c0:	69fb      	ldr	r3, [r7, #28]
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3724      	adds	r7, #36	; 0x24
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr
 800d0ce:	bf00      	nop
 800d0d0:	40021000 	.word	0x40021000
 800d0d4:	001fff68 	.word	0x001fff68

0800d0d8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b088      	sub	sp, #32
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d101      	bne.n	800d0ea <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	e155      	b.n	800d396 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d0f0:	b2db      	uxtb	r3, r3
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d106      	bne.n	800d104 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f7f4 fca4 	bl	8001a4c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f000 f959 	bl	800d3bc <SAI_Disable>
 800d10a:	4603      	mov	r3, r0
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d001      	beq.n	800d114 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 800d110:	2301      	movs	r3, #1
 800d112:	e140      	b.n	800d396 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2202      	movs	r2, #2
 800d118:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	68db      	ldr	r3, [r3, #12]
 800d120:	2b02      	cmp	r3, #2
 800d122:	d00c      	beq.n	800d13e <HAL_SAI_Init+0x66>
 800d124:	2b02      	cmp	r3, #2
 800d126:	d80d      	bhi.n	800d144 <HAL_SAI_Init+0x6c>
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d002      	beq.n	800d132 <HAL_SAI_Init+0x5a>
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d003      	beq.n	800d138 <HAL_SAI_Init+0x60>
 800d130:	e008      	b.n	800d144 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800d132:	2300      	movs	r3, #0
 800d134:	61fb      	str	r3, [r7, #28]
      break;
 800d136:	e008      	b.n	800d14a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800d138:	2310      	movs	r3, #16
 800d13a:	61fb      	str	r3, [r7, #28]
      break;
 800d13c:	e005      	b.n	800d14a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800d13e:	2320      	movs	r3, #32
 800d140:	61fb      	str	r3, [r7, #28]
      break;
 800d142:	e002      	b.n	800d14a <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 800d144:	2300      	movs	r3, #0
 800d146:	61fb      	str	r3, [r7, #28]
      break;
 800d148:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	689b      	ldr	r3, [r3, #8]
 800d14e:	2b03      	cmp	r3, #3
 800d150:	d81d      	bhi.n	800d18e <HAL_SAI_Init+0xb6>
 800d152:	a201      	add	r2, pc, #4	; (adr r2, 800d158 <HAL_SAI_Init+0x80>)
 800d154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d158:	0800d169 	.word	0x0800d169
 800d15c:	0800d16f 	.word	0x0800d16f
 800d160:	0800d177 	.word	0x0800d177
 800d164:	0800d17f 	.word	0x0800d17f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800d168:	2300      	movs	r3, #0
 800d16a:	617b      	str	r3, [r7, #20]
      break;
 800d16c:	e012      	b.n	800d194 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800d16e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d172:	617b      	str	r3, [r7, #20]
      break;
 800d174:	e00e      	b.n	800d194 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d176:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d17a:	617b      	str	r3, [r7, #20]
      break;
 800d17c:	e00a      	b.n	800d194 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d17e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d182:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800d184:	69fb      	ldr	r3, [r7, #28]
 800d186:	f043 0301 	orr.w	r3, r3, #1
 800d18a:	61fb      	str	r3, [r7, #28]
      break;
 800d18c:	e002      	b.n	800d194 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800d18e:	2300      	movs	r3, #0
 800d190:	617b      	str	r3, [r7, #20]
      break;
 800d192:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4a81      	ldr	r2, [pc, #516]	; (800d3a0 <HAL_SAI_Init+0x2c8>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d004      	beq.n	800d1a8 <HAL_SAI_Init+0xd0>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	4a80      	ldr	r2, [pc, #512]	; (800d3a4 <HAL_SAI_Init+0x2cc>)
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	d103      	bne.n	800d1b0 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 800d1a8:	4a7f      	ldr	r2, [pc, #508]	; (800d3a8 <HAL_SAI_Init+0x2d0>)
 800d1aa:	69fb      	ldr	r3, [r7, #28]
 800d1ac:	6013      	str	r3, [r2, #0]
 800d1ae:	e002      	b.n	800d1b6 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800d1b0:	4a7e      	ldr	r2, [pc, #504]	; (800d3ac <HAL_SAI_Init+0x2d4>)
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	69db      	ldr	r3, [r3, #28]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d041      	beq.n	800d242 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	4a77      	ldr	r2, [pc, #476]	; (800d3a0 <HAL_SAI_Init+0x2c8>)
 800d1c4:	4293      	cmp	r3, r2
 800d1c6:	d004      	beq.n	800d1d2 <HAL_SAI_Init+0xfa>
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	4a75      	ldr	r2, [pc, #468]	; (800d3a4 <HAL_SAI_Init+0x2cc>)
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d105      	bne.n	800d1de <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800d1d2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800d1d6:	f7fe fee7 	bl	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d1da:	6138      	str	r0, [r7, #16]
 800d1dc:	e004      	b.n	800d1e8 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800d1de:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800d1e2:	f7fe fee1 	bl	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d1e6:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 800d1e8:	693a      	ldr	r2, [r7, #16]
 800d1ea:	4613      	mov	r3, r2
 800d1ec:	009b      	lsls	r3, r3, #2
 800d1ee:	4413      	add	r3, r2
 800d1f0:	005b      	lsls	r3, r3, #1
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	69db      	ldr	r3, [r3, #28]
 800d1f8:	025b      	lsls	r3, r3, #9
 800d1fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1fe:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	4a6b      	ldr	r2, [pc, #428]	; (800d3b0 <HAL_SAI_Init+0x2d8>)
 800d204:	fba2 2303 	umull	r2, r3, r2, r3
 800d208:	08da      	lsrs	r2, r3, #3
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800d20e:	68f9      	ldr	r1, [r7, #12]
 800d210:	4b67      	ldr	r3, [pc, #412]	; (800d3b0 <HAL_SAI_Init+0x2d8>)
 800d212:	fba3 2301 	umull	r2, r3, r3, r1
 800d216:	08da      	lsrs	r2, r3, #3
 800d218:	4613      	mov	r3, r2
 800d21a:	009b      	lsls	r3, r3, #2
 800d21c:	4413      	add	r3, r2
 800d21e:	005b      	lsls	r3, r3, #1
 800d220:	1aca      	subs	r2, r1, r3
 800d222:	2a08      	cmp	r2, #8
 800d224:	d904      	bls.n	800d230 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6a1b      	ldr	r3, [r3, #32]
 800d22a:	1c5a      	adds	r2, r3, #1
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d234:	2b04      	cmp	r3, #4
 800d236:	d104      	bne.n	800d242 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6a1b      	ldr	r3, [r3, #32]
 800d23c:	085a      	lsrs	r2, r3, #1
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	685b      	ldr	r3, [r3, #4]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d003      	beq.n	800d252 <HAL_SAI_Init+0x17a>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	2b02      	cmp	r3, #2
 800d250:	d109      	bne.n	800d266 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d256:	2b01      	cmp	r3, #1
 800d258:	d101      	bne.n	800d25e <HAL_SAI_Init+0x186>
 800d25a:	2300      	movs	r3, #0
 800d25c:	e001      	b.n	800d262 <HAL_SAI_Init+0x18a>
 800d25e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d262:	61bb      	str	r3, [r7, #24]
 800d264:	e008      	b.n	800d278 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d102      	bne.n	800d274 <HAL_SAI_Init+0x19c>
 800d26e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d272:	e000      	b.n	800d276 <HAL_SAI_Init+0x19e>
 800d274:	2300      	movs	r3, #0
 800d276:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	6819      	ldr	r1, [r3, #0]
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681a      	ldr	r2, [r3, #0]
 800d282:	4b4c      	ldr	r3, [pc, #304]	; (800d3b4 <HAL_SAI_Init+0x2dc>)
 800d284:	400b      	ands	r3, r1
 800d286:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	6819      	ldr	r1, [r3, #0]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	685a      	ldr	r2, [r3, #4]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d296:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d29c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a2:	431a      	orrs	r2, r3
 800d2a4:	69bb      	ldr	r3, [r7, #24]
 800d2a6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 800d2b0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	691b      	ldr	r3, [r3, #16]
 800d2b6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d2bc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6a1b      	ldr	r3, [r3, #32]
 800d2c2:	051b      	lsls	r3, r3, #20
 800d2c4:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	430a      	orrs	r2, r1
 800d2cc:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	687a      	ldr	r2, [r7, #4]
 800d2d6:	6812      	ldr	r2, [r2, #0]
 800d2d8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800d2dc:	f023 030f 	bic.w	r3, r3, #15
 800d2e0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	6859      	ldr	r1, [r3, #4]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	699a      	ldr	r2, [r3, #24]
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2f0:	431a      	orrs	r2, r3
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f6:	431a      	orrs	r2, r3
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	430a      	orrs	r2, r1
 800d2fe:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	6899      	ldr	r1, [r3, #8]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681a      	ldr	r2, [r3, #0]
 800d30a:	4b2b      	ldr	r3, [pc, #172]	; (800d3b8 <HAL_SAI_Init+0x2e0>)
 800d30c:	400b      	ands	r3, r1
 800d30e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	6899      	ldr	r1, [r3, #8]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d31a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d320:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800d326:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800d32c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d332:	3b01      	subs	r3, #1
 800d334:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800d336:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	430a      	orrs	r2, r1
 800d33e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	68d9      	ldr	r1, [r3, #12]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681a      	ldr	r2, [r3, #0]
 800d34a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800d34e:	400b      	ands	r3, r1
 800d350:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	68d9      	ldr	r1, [r3, #12]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d360:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d366:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d368:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d36e:	3b01      	subs	r3, #1
 800d370:	021b      	lsls	r3, r3, #8
 800d372:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	430a      	orrs	r2, r1
 800d37a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2200      	movs	r2, #0
 800d380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2201      	movs	r2, #1
 800d388:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2200      	movs	r2, #0
 800d390:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d394:	2300      	movs	r3, #0
}
 800d396:	4618      	mov	r0, r3
 800d398:	3720      	adds	r7, #32
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	40015404 	.word	0x40015404
 800d3a4:	40015424 	.word	0x40015424
 800d3a8:	40015400 	.word	0x40015400
 800d3ac:	40015800 	.word	0x40015800
 800d3b0:	cccccccd 	.word	0xcccccccd
 800d3b4:	ff05c010 	.word	0xff05c010
 800d3b8:	fff88000 	.word	0xfff88000

0800d3bc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b085      	sub	sp, #20
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800d3c4:	4b18      	ldr	r3, [pc, #96]	; (800d428 <SAI_Disable+0x6c>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	4a18      	ldr	r2, [pc, #96]	; (800d42c <SAI_Disable+0x70>)
 800d3ca:	fba2 2303 	umull	r2, r3, r2, r3
 800d3ce:	0b1b      	lsrs	r3, r3, #12
 800d3d0:	009b      	lsls	r3, r3, #2
 800d3d2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d3e6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d10a      	bne.n	800d404 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d3f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800d3fe:	2303      	movs	r3, #3
 800d400:	72fb      	strb	r3, [r7, #11]
      break;
 800d402:	e009      	b.n	800d418 <SAI_Disable+0x5c>
    }
    count--;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	3b01      	subs	r3, #1
 800d408:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d414:	2b00      	cmp	r3, #0
 800d416:	d1e7      	bne.n	800d3e8 <SAI_Disable+0x2c>

  return status;
 800d418:	7afb      	ldrb	r3, [r7, #11]
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3714      	adds	r7, #20
 800d41e:	46bd      	mov	sp, r7
 800d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d424:	4770      	bx	lr
 800d426:	bf00      	nop
 800d428:	20000190 	.word	0x20000190
 800d42c:	95cbec1b 	.word	0x95cbec1b

0800d430 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d101      	bne.n	800d442 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d43e:	2301      	movs	r3, #1
 800d440:	e095      	b.n	800d56e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d446:	2b00      	cmp	r3, #0
 800d448:	d108      	bne.n	800d45c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	685b      	ldr	r3, [r3, #4]
 800d44e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d452:	d009      	beq.n	800d468 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2200      	movs	r2, #0
 800d458:	61da      	str	r2, [r3, #28]
 800d45a:	e005      	b.n	800d468 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2200      	movs	r2, #0
 800d460:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2200      	movs	r2, #0
 800d466:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2200      	movs	r2, #0
 800d46c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d474:	b2db      	uxtb	r3, r3
 800d476:	2b00      	cmp	r3, #0
 800d478:	d106      	bne.n	800d488 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2200      	movs	r2, #0
 800d47e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f7f4 fbd8 	bl	8001c38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2202      	movs	r2, #2
 800d48c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	681a      	ldr	r2, [r3, #0]
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d49e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	68db      	ldr	r3, [r3, #12]
 800d4a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d4a8:	d902      	bls.n	800d4b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	60fb      	str	r3, [r7, #12]
 800d4ae:	e002      	b.n	800d4b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d4b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d4b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	68db      	ldr	r3, [r3, #12]
 800d4ba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d4be:	d007      	beq.n	800d4d0 <HAL_SPI_Init+0xa0>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	68db      	ldr	r3, [r3, #12]
 800d4c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d4c8:	d002      	beq.n	800d4d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	685b      	ldr	r3, [r3, #4]
 800d4d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	689b      	ldr	r3, [r3, #8]
 800d4dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d4e0:	431a      	orrs	r2, r3
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	691b      	ldr	r3, [r3, #16]
 800d4e6:	f003 0302 	and.w	r3, r3, #2
 800d4ea:	431a      	orrs	r2, r3
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	695b      	ldr	r3, [r3, #20]
 800d4f0:	f003 0301 	and.w	r3, r3, #1
 800d4f4:	431a      	orrs	r2, r3
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	699b      	ldr	r3, [r3, #24]
 800d4fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d4fe:	431a      	orrs	r2, r3
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	69db      	ldr	r3, [r3, #28]
 800d504:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d508:	431a      	orrs	r2, r3
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6a1b      	ldr	r3, [r3, #32]
 800d50e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d512:	ea42 0103 	orr.w	r1, r2, r3
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d51a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	430a      	orrs	r2, r1
 800d524:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	699b      	ldr	r3, [r3, #24]
 800d52a:	0c1b      	lsrs	r3, r3, #16
 800d52c:	f003 0204 	and.w	r2, r3, #4
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d534:	f003 0310 	and.w	r3, r3, #16
 800d538:	431a      	orrs	r2, r3
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d53e:	f003 0308 	and.w	r3, r3, #8
 800d542:	431a      	orrs	r2, r3
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	68db      	ldr	r3, [r3, #12]
 800d548:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d54c:	ea42 0103 	orr.w	r1, r2, r3
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	430a      	orrs	r2, r1
 800d55c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2200      	movs	r2, #0
 800d562:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2201      	movs	r2, #1
 800d568:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d56c:	2300      	movs	r3, #0
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3710      	adds	r7, #16
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}

0800d576 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800d576:	b580      	push	{r7, lr}
 800d578:	b084      	sub	sp, #16
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	60f8      	str	r0, [r7, #12]
 800d57e:	60b9      	str	r1, [r7, #8]
 800d580:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d101      	bne.n	800d58c <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800d588:	2301      	movs	r3, #1
 800d58a:	e038      	b.n	800d5fe <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800d592:	b2db      	uxtb	r3, r3
 800d594:	2b00      	cmp	r3, #0
 800d596:	d106      	bne.n	800d5a6 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	2200      	movs	r2, #0
 800d59c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800d5a0:	68f8      	ldr	r0, [r7, #12]
 800d5a2:	f7f3 fcc9 	bl	8000f38 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	681a      	ldr	r2, [r3, #0]
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	3308      	adds	r3, #8
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	4610      	mov	r0, r2
 800d5b2:	f000 ffc7 	bl	800e544 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	6818      	ldr	r0, [r3, #0]
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	689b      	ldr	r3, [r3, #8]
 800d5be:	461a      	mov	r2, r3
 800d5c0:	68b9      	ldr	r1, [r7, #8]
 800d5c2:	f001 f84f 	bl	800e664 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	6858      	ldr	r0, [r3, #4]
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	689a      	ldr	r2, [r3, #8]
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d2:	6879      	ldr	r1, [r7, #4]
 800d5d4:	f001 f896 	bl	800e704 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	68fa      	ldr	r2, [r7, #12]
 800d5de:	6892      	ldr	r2, [r2, #8]
 800d5e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	68fa      	ldr	r2, [r7, #12]
 800d5ea:	6892      	ldr	r2, [r2, #8]
 800d5ec:	f041 0101 	orr.w	r1, r1, #1
 800d5f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800d5fc:	2300      	movs	r3, #0
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3710      	adds	r7, #16
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}

0800d606 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d606:	b580      	push	{r7, lr}
 800d608:	b082      	sub	sp, #8
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d101      	bne.n	800d618 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d614:	2301      	movs	r3, #1
 800d616:	e049      	b.n	800d6ac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d61e:	b2db      	uxtb	r3, r3
 800d620:	2b00      	cmp	r3, #0
 800d622:	d106      	bne.n	800d632 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2200      	movs	r2, #0
 800d628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f7f4 fd01 	bl	8002034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2202      	movs	r2, #2
 800d636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	3304      	adds	r3, #4
 800d642:	4619      	mov	r1, r3
 800d644:	4610      	mov	r0, r2
 800d646:	f000 f987 	bl	800d958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2201      	movs	r2, #1
 800d64e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2201      	movs	r2, #1
 800d656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2201      	movs	r2, #1
 800d65e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2201      	movs	r2, #1
 800d666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2201      	movs	r2, #1
 800d66e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2201      	movs	r2, #1
 800d676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2201      	movs	r2, #1
 800d67e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2201      	movs	r2, #1
 800d686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2201      	movs	r2, #1
 800d68e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2201      	movs	r2, #1
 800d696:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2201      	movs	r2, #1
 800d69e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2201      	movs	r2, #1
 800d6a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d6aa:	2300      	movs	r3, #0
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3708      	adds	r7, #8
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b082      	sub	sp, #8
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	691b      	ldr	r3, [r3, #16]
 800d6c2:	f003 0302 	and.w	r3, r3, #2
 800d6c6:	2b02      	cmp	r3, #2
 800d6c8:	d122      	bne.n	800d710 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	68db      	ldr	r3, [r3, #12]
 800d6d0:	f003 0302 	and.w	r3, r3, #2
 800d6d4:	2b02      	cmp	r3, #2
 800d6d6:	d11b      	bne.n	800d710 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f06f 0202 	mvn.w	r2, #2
 800d6e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2201      	movs	r2, #1
 800d6e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	699b      	ldr	r3, [r3, #24]
 800d6ee:	f003 0303 	and.w	r3, r3, #3
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d003      	beq.n	800d6fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f000 f90f 	bl	800d91a <HAL_TIM_IC_CaptureCallback>
 800d6fc:	e005      	b.n	800d70a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f000 f901 	bl	800d906 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f000 f912 	bl	800d92e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2200      	movs	r2, #0
 800d70e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	691b      	ldr	r3, [r3, #16]
 800d716:	f003 0304 	and.w	r3, r3, #4
 800d71a:	2b04      	cmp	r3, #4
 800d71c:	d122      	bne.n	800d764 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	68db      	ldr	r3, [r3, #12]
 800d724:	f003 0304 	and.w	r3, r3, #4
 800d728:	2b04      	cmp	r3, #4
 800d72a:	d11b      	bne.n	800d764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f06f 0204 	mvn.w	r2, #4
 800d734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2202      	movs	r2, #2
 800d73a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	699b      	ldr	r3, [r3, #24]
 800d742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d746:	2b00      	cmp	r3, #0
 800d748:	d003      	beq.n	800d752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f000 f8e5 	bl	800d91a <HAL_TIM_IC_CaptureCallback>
 800d750:	e005      	b.n	800d75e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f000 f8d7 	bl	800d906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f000 f8e8 	bl	800d92e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2200      	movs	r2, #0
 800d762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	691b      	ldr	r3, [r3, #16]
 800d76a:	f003 0308 	and.w	r3, r3, #8
 800d76e:	2b08      	cmp	r3, #8
 800d770:	d122      	bne.n	800d7b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	68db      	ldr	r3, [r3, #12]
 800d778:	f003 0308 	and.w	r3, r3, #8
 800d77c:	2b08      	cmp	r3, #8
 800d77e:	d11b      	bne.n	800d7b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f06f 0208 	mvn.w	r2, #8
 800d788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2204      	movs	r2, #4
 800d78e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	69db      	ldr	r3, [r3, #28]
 800d796:	f003 0303 	and.w	r3, r3, #3
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d003      	beq.n	800d7a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f000 f8bb 	bl	800d91a <HAL_TIM_IC_CaptureCallback>
 800d7a4:	e005      	b.n	800d7b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f000 f8ad 	bl	800d906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 f8be 	bl	800d92e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	691b      	ldr	r3, [r3, #16]
 800d7be:	f003 0310 	and.w	r3, r3, #16
 800d7c2:	2b10      	cmp	r3, #16
 800d7c4:	d122      	bne.n	800d80c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	68db      	ldr	r3, [r3, #12]
 800d7cc:	f003 0310 	and.w	r3, r3, #16
 800d7d0:	2b10      	cmp	r3, #16
 800d7d2:	d11b      	bne.n	800d80c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	f06f 0210 	mvn.w	r2, #16
 800d7dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2208      	movs	r2, #8
 800d7e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	69db      	ldr	r3, [r3, #28]
 800d7ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d003      	beq.n	800d7fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f000 f891 	bl	800d91a <HAL_TIM_IC_CaptureCallback>
 800d7f8:	e005      	b.n	800d806 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	f000 f883 	bl	800d906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f000 f894 	bl	800d92e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2200      	movs	r2, #0
 800d80a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	691b      	ldr	r3, [r3, #16]
 800d812:	f003 0301 	and.w	r3, r3, #1
 800d816:	2b01      	cmp	r3, #1
 800d818:	d10e      	bne.n	800d838 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	68db      	ldr	r3, [r3, #12]
 800d820:	f003 0301 	and.w	r3, r3, #1
 800d824:	2b01      	cmp	r3, #1
 800d826:	d107      	bne.n	800d838 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	f06f 0201 	mvn.w	r2, #1
 800d830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f000 f85d 	bl	800d8f2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	691b      	ldr	r3, [r3, #16]
 800d83e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d842:	2b80      	cmp	r3, #128	; 0x80
 800d844:	d10e      	bne.n	800d864 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	68db      	ldr	r3, [r3, #12]
 800d84c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d850:	2b80      	cmp	r3, #128	; 0x80
 800d852:	d107      	bne.n	800d864 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d85c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f000 f9a6 	bl	800dbb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	691b      	ldr	r3, [r3, #16]
 800d86a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d86e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d872:	d10e      	bne.n	800d892 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	68db      	ldr	r3, [r3, #12]
 800d87a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d87e:	2b80      	cmp	r3, #128	; 0x80
 800d880:	d107      	bne.n	800d892 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d88a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f000 f999 	bl	800dbc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	691b      	ldr	r3, [r3, #16]
 800d898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d89c:	2b40      	cmp	r3, #64	; 0x40
 800d89e:	d10e      	bne.n	800d8be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	68db      	ldr	r3, [r3, #12]
 800d8a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8aa:	2b40      	cmp	r3, #64	; 0x40
 800d8ac:	d107      	bne.n	800d8be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d8b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f000 f842 	bl	800d942 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	691b      	ldr	r3, [r3, #16]
 800d8c4:	f003 0320 	and.w	r3, r3, #32
 800d8c8:	2b20      	cmp	r3, #32
 800d8ca:	d10e      	bne.n	800d8ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	68db      	ldr	r3, [r3, #12]
 800d8d2:	f003 0320 	and.w	r3, r3, #32
 800d8d6:	2b20      	cmp	r3, #32
 800d8d8:	d107      	bne.n	800d8ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f06f 0220 	mvn.w	r2, #32
 800d8e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f000 f959 	bl	800db9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d8ea:	bf00      	nop
 800d8ec:	3708      	adds	r7, #8
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}

0800d8f2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d8f2:	b480      	push	{r7}
 800d8f4:	b083      	sub	sp, #12
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d8fa:	bf00      	nop
 800d8fc:	370c      	adds	r7, #12
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr

0800d906 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d906:	b480      	push	{r7}
 800d908:	b083      	sub	sp, #12
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d90e:	bf00      	nop
 800d910:	370c      	adds	r7, #12
 800d912:	46bd      	mov	sp, r7
 800d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d918:	4770      	bx	lr

0800d91a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d91a:	b480      	push	{r7}
 800d91c:	b083      	sub	sp, #12
 800d91e:	af00      	add	r7, sp, #0
 800d920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d922:	bf00      	nop
 800d924:	370c      	adds	r7, #12
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr

0800d92e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d92e:	b480      	push	{r7}
 800d930:	b083      	sub	sp, #12
 800d932:	af00      	add	r7, sp, #0
 800d934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d936:	bf00      	nop
 800d938:	370c      	adds	r7, #12
 800d93a:	46bd      	mov	sp, r7
 800d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d940:	4770      	bx	lr

0800d942 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d942:	b480      	push	{r7}
 800d944:	b083      	sub	sp, #12
 800d946:	af00      	add	r7, sp, #0
 800d948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d94a:	bf00      	nop
 800d94c:	370c      	adds	r7, #12
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr
	...

0800d958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d958:	b480      	push	{r7}
 800d95a:	b085      	sub	sp, #20
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	4a40      	ldr	r2, [pc, #256]	; (800da6c <TIM_Base_SetConfig+0x114>)
 800d96c:	4293      	cmp	r3, r2
 800d96e:	d013      	beq.n	800d998 <TIM_Base_SetConfig+0x40>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d976:	d00f      	beq.n	800d998 <TIM_Base_SetConfig+0x40>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	4a3d      	ldr	r2, [pc, #244]	; (800da70 <TIM_Base_SetConfig+0x118>)
 800d97c:	4293      	cmp	r3, r2
 800d97e:	d00b      	beq.n	800d998 <TIM_Base_SetConfig+0x40>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	4a3c      	ldr	r2, [pc, #240]	; (800da74 <TIM_Base_SetConfig+0x11c>)
 800d984:	4293      	cmp	r3, r2
 800d986:	d007      	beq.n	800d998 <TIM_Base_SetConfig+0x40>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	4a3b      	ldr	r2, [pc, #236]	; (800da78 <TIM_Base_SetConfig+0x120>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d003      	beq.n	800d998 <TIM_Base_SetConfig+0x40>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	4a3a      	ldr	r2, [pc, #232]	; (800da7c <TIM_Base_SetConfig+0x124>)
 800d994:	4293      	cmp	r3, r2
 800d996:	d108      	bne.n	800d9aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d99e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	685b      	ldr	r3, [r3, #4]
 800d9a4:	68fa      	ldr	r2, [r7, #12]
 800d9a6:	4313      	orrs	r3, r2
 800d9a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	4a2f      	ldr	r2, [pc, #188]	; (800da6c <TIM_Base_SetConfig+0x114>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d01f      	beq.n	800d9f2 <TIM_Base_SetConfig+0x9a>
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d9b8:	d01b      	beq.n	800d9f2 <TIM_Base_SetConfig+0x9a>
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	4a2c      	ldr	r2, [pc, #176]	; (800da70 <TIM_Base_SetConfig+0x118>)
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d017      	beq.n	800d9f2 <TIM_Base_SetConfig+0x9a>
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	4a2b      	ldr	r2, [pc, #172]	; (800da74 <TIM_Base_SetConfig+0x11c>)
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	d013      	beq.n	800d9f2 <TIM_Base_SetConfig+0x9a>
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	4a2a      	ldr	r2, [pc, #168]	; (800da78 <TIM_Base_SetConfig+0x120>)
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d00f      	beq.n	800d9f2 <TIM_Base_SetConfig+0x9a>
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	4a29      	ldr	r2, [pc, #164]	; (800da7c <TIM_Base_SetConfig+0x124>)
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d00b      	beq.n	800d9f2 <TIM_Base_SetConfig+0x9a>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	4a28      	ldr	r2, [pc, #160]	; (800da80 <TIM_Base_SetConfig+0x128>)
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	d007      	beq.n	800d9f2 <TIM_Base_SetConfig+0x9a>
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	4a27      	ldr	r2, [pc, #156]	; (800da84 <TIM_Base_SetConfig+0x12c>)
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d003      	beq.n	800d9f2 <TIM_Base_SetConfig+0x9a>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	4a26      	ldr	r2, [pc, #152]	; (800da88 <TIM_Base_SetConfig+0x130>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d108      	bne.n	800da04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d9f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	68db      	ldr	r3, [r3, #12]
 800d9fe:	68fa      	ldr	r2, [r7, #12]
 800da00:	4313      	orrs	r3, r2
 800da02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	695b      	ldr	r3, [r3, #20]
 800da0e:	4313      	orrs	r3, r2
 800da10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	68fa      	ldr	r2, [r7, #12]
 800da16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	689a      	ldr	r2, [r3, #8]
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	681a      	ldr	r2, [r3, #0]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	4a10      	ldr	r2, [pc, #64]	; (800da6c <TIM_Base_SetConfig+0x114>)
 800da2c:	4293      	cmp	r3, r2
 800da2e:	d00f      	beq.n	800da50 <TIM_Base_SetConfig+0xf8>
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	4a12      	ldr	r2, [pc, #72]	; (800da7c <TIM_Base_SetConfig+0x124>)
 800da34:	4293      	cmp	r3, r2
 800da36:	d00b      	beq.n	800da50 <TIM_Base_SetConfig+0xf8>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	4a11      	ldr	r2, [pc, #68]	; (800da80 <TIM_Base_SetConfig+0x128>)
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d007      	beq.n	800da50 <TIM_Base_SetConfig+0xf8>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	4a10      	ldr	r2, [pc, #64]	; (800da84 <TIM_Base_SetConfig+0x12c>)
 800da44:	4293      	cmp	r3, r2
 800da46:	d003      	beq.n	800da50 <TIM_Base_SetConfig+0xf8>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	4a0f      	ldr	r2, [pc, #60]	; (800da88 <TIM_Base_SetConfig+0x130>)
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d103      	bne.n	800da58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	691a      	ldr	r2, [r3, #16]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2201      	movs	r2, #1
 800da5c:	615a      	str	r2, [r3, #20]
}
 800da5e:	bf00      	nop
 800da60:	3714      	adds	r7, #20
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr
 800da6a:	bf00      	nop
 800da6c:	40012c00 	.word	0x40012c00
 800da70:	40000400 	.word	0x40000400
 800da74:	40000800 	.word	0x40000800
 800da78:	40000c00 	.word	0x40000c00
 800da7c:	40013400 	.word	0x40013400
 800da80:	40014000 	.word	0x40014000
 800da84:	40014400 	.word	0x40014400
 800da88:	40014800 	.word	0x40014800

0800da8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800da8c:	b480      	push	{r7}
 800da8e:	b085      	sub	sp, #20
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da9c:	2b01      	cmp	r3, #1
 800da9e:	d101      	bne.n	800daa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800daa0:	2302      	movs	r3, #2
 800daa2:	e068      	b.n	800db76 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2201      	movs	r2, #1
 800daa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2202      	movs	r2, #2
 800dab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	685b      	ldr	r3, [r3, #4]
 800daba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	689b      	ldr	r3, [r3, #8]
 800dac2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	4a2e      	ldr	r2, [pc, #184]	; (800db84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800daca:	4293      	cmp	r3, r2
 800dacc:	d004      	beq.n	800dad8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	4a2d      	ldr	r2, [pc, #180]	; (800db88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800dad4:	4293      	cmp	r3, r2
 800dad6:	d108      	bne.n	800daea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dade:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	685b      	ldr	r3, [r3, #4]
 800dae4:	68fa      	ldr	r2, [r7, #12]
 800dae6:	4313      	orrs	r3, r2
 800dae8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800daf0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	68fa      	ldr	r2, [r7, #12]
 800daf8:	4313      	orrs	r3, r2
 800dafa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	68fa      	ldr	r2, [r7, #12]
 800db02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	4a1e      	ldr	r2, [pc, #120]	; (800db84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d01d      	beq.n	800db4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db16:	d018      	beq.n	800db4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	4a1b      	ldr	r2, [pc, #108]	; (800db8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	d013      	beq.n	800db4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4a1a      	ldr	r2, [pc, #104]	; (800db90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800db28:	4293      	cmp	r3, r2
 800db2a:	d00e      	beq.n	800db4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4a18      	ldr	r2, [pc, #96]	; (800db94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800db32:	4293      	cmp	r3, r2
 800db34:	d009      	beq.n	800db4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	4a13      	ldr	r2, [pc, #76]	; (800db88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d004      	beq.n	800db4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4a14      	ldr	r2, [pc, #80]	; (800db98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d10c      	bne.n	800db64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	689b      	ldr	r3, [r3, #8]
 800db56:	68ba      	ldr	r2, [r7, #8]
 800db58:	4313      	orrs	r3, r2
 800db5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	68ba      	ldr	r2, [r7, #8]
 800db62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2201      	movs	r2, #1
 800db68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2200      	movs	r2, #0
 800db70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800db74:	2300      	movs	r3, #0
}
 800db76:	4618      	mov	r0, r3
 800db78:	3714      	adds	r7, #20
 800db7a:	46bd      	mov	sp, r7
 800db7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db80:	4770      	bx	lr
 800db82:	bf00      	nop
 800db84:	40012c00 	.word	0x40012c00
 800db88:	40013400 	.word	0x40013400
 800db8c:	40000400 	.word	0x40000400
 800db90:	40000800 	.word	0x40000800
 800db94:	40000c00 	.word	0x40000c00
 800db98:	40014000 	.word	0x40014000

0800db9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800db9c:	b480      	push	{r7}
 800db9e:	b083      	sub	sp, #12
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dba4:	bf00      	nop
 800dba6:	370c      	adds	r7, #12
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbae:	4770      	bx	lr

0800dbb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b083      	sub	sp, #12
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dbb8:	bf00      	nop
 800dbba:	370c      	adds	r7, #12
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr

0800dbc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dbcc:	bf00      	nop
 800dbce:	370c      	adds	r7, #12
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd6:	4770      	bx	lr

0800dbd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b082      	sub	sp, #8
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d101      	bne.n	800dbea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	e040      	b.n	800dc6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d106      	bne.n	800dc00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f7f4 face 	bl	800219c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2224      	movs	r2, #36	; 0x24
 800dc04:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	681a      	ldr	r2, [r3, #0]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f022 0201 	bic.w	r2, r2, #1
 800dc14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f000 f82c 	bl	800dc74 <UART_SetConfig>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	2b01      	cmp	r3, #1
 800dc20:	d101      	bne.n	800dc26 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800dc22:	2301      	movs	r3, #1
 800dc24:	e022      	b.n	800dc6c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d002      	beq.n	800dc34 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f000 fad8 	bl	800e1e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	685a      	ldr	r2, [r3, #4]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dc42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	689a      	ldr	r2, [r3, #8]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dc52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	681a      	ldr	r2, [r3, #0]
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f042 0201 	orr.w	r2, r2, #1
 800dc62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f000 fb5f 	bl	800e328 <UART_CheckIdleState>
 800dc6a:	4603      	mov	r3, r0
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3708      	adds	r7, #8
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dc74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dc78:	b08a      	sub	sp, #40	; 0x28
 800dc7a:	af00      	add	r7, sp, #0
 800dc7c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	689a      	ldr	r2, [r3, #8]
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	691b      	ldr	r3, [r3, #16]
 800dc8c:	431a      	orrs	r2, r3
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	695b      	ldr	r3, [r3, #20]
 800dc92:	431a      	orrs	r2, r3
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	69db      	ldr	r3, [r3, #28]
 800dc98:	4313      	orrs	r3, r2
 800dc9a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	681a      	ldr	r2, [r3, #0]
 800dca2:	4ba4      	ldr	r3, [pc, #656]	; (800df34 <UART_SetConfig+0x2c0>)
 800dca4:	4013      	ands	r3, r2
 800dca6:	68fa      	ldr	r2, [r7, #12]
 800dca8:	6812      	ldr	r2, [r2, #0]
 800dcaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dcac:	430b      	orrs	r3, r1
 800dcae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	685b      	ldr	r3, [r3, #4]
 800dcb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	68da      	ldr	r2, [r3, #12]
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	430a      	orrs	r2, r1
 800dcc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	699b      	ldr	r3, [r3, #24]
 800dcca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4a99      	ldr	r2, [pc, #612]	; (800df38 <UART_SetConfig+0x2c4>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d004      	beq.n	800dce0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	6a1b      	ldr	r3, [r3, #32]
 800dcda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcdc:	4313      	orrs	r3, r2
 800dcde:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	689b      	ldr	r3, [r3, #8]
 800dce6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcf0:	430a      	orrs	r2, r1
 800dcf2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	4a90      	ldr	r2, [pc, #576]	; (800df3c <UART_SetConfig+0x2c8>)
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d126      	bne.n	800dd4c <UART_SetConfig+0xd8>
 800dcfe:	4b90      	ldr	r3, [pc, #576]	; (800df40 <UART_SetConfig+0x2cc>)
 800dd00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd04:	f003 0303 	and.w	r3, r3, #3
 800dd08:	2b03      	cmp	r3, #3
 800dd0a:	d81b      	bhi.n	800dd44 <UART_SetConfig+0xd0>
 800dd0c:	a201      	add	r2, pc, #4	; (adr r2, 800dd14 <UART_SetConfig+0xa0>)
 800dd0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd12:	bf00      	nop
 800dd14:	0800dd25 	.word	0x0800dd25
 800dd18:	0800dd35 	.word	0x0800dd35
 800dd1c:	0800dd2d 	.word	0x0800dd2d
 800dd20:	0800dd3d 	.word	0x0800dd3d
 800dd24:	2301      	movs	r3, #1
 800dd26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dd2a:	e116      	b.n	800df5a <UART_SetConfig+0x2e6>
 800dd2c:	2302      	movs	r3, #2
 800dd2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dd32:	e112      	b.n	800df5a <UART_SetConfig+0x2e6>
 800dd34:	2304      	movs	r3, #4
 800dd36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dd3a:	e10e      	b.n	800df5a <UART_SetConfig+0x2e6>
 800dd3c:	2308      	movs	r3, #8
 800dd3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dd42:	e10a      	b.n	800df5a <UART_SetConfig+0x2e6>
 800dd44:	2310      	movs	r3, #16
 800dd46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dd4a:	e106      	b.n	800df5a <UART_SetConfig+0x2e6>
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4a7c      	ldr	r2, [pc, #496]	; (800df44 <UART_SetConfig+0x2d0>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d138      	bne.n	800ddc8 <UART_SetConfig+0x154>
 800dd56:	4b7a      	ldr	r3, [pc, #488]	; (800df40 <UART_SetConfig+0x2cc>)
 800dd58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd5c:	f003 030c 	and.w	r3, r3, #12
 800dd60:	2b0c      	cmp	r3, #12
 800dd62:	d82d      	bhi.n	800ddc0 <UART_SetConfig+0x14c>
 800dd64:	a201      	add	r2, pc, #4	; (adr r2, 800dd6c <UART_SetConfig+0xf8>)
 800dd66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd6a:	bf00      	nop
 800dd6c:	0800dda1 	.word	0x0800dda1
 800dd70:	0800ddc1 	.word	0x0800ddc1
 800dd74:	0800ddc1 	.word	0x0800ddc1
 800dd78:	0800ddc1 	.word	0x0800ddc1
 800dd7c:	0800ddb1 	.word	0x0800ddb1
 800dd80:	0800ddc1 	.word	0x0800ddc1
 800dd84:	0800ddc1 	.word	0x0800ddc1
 800dd88:	0800ddc1 	.word	0x0800ddc1
 800dd8c:	0800dda9 	.word	0x0800dda9
 800dd90:	0800ddc1 	.word	0x0800ddc1
 800dd94:	0800ddc1 	.word	0x0800ddc1
 800dd98:	0800ddc1 	.word	0x0800ddc1
 800dd9c:	0800ddb9 	.word	0x0800ddb9
 800dda0:	2300      	movs	r3, #0
 800dda2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dda6:	e0d8      	b.n	800df5a <UART_SetConfig+0x2e6>
 800dda8:	2302      	movs	r3, #2
 800ddaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ddae:	e0d4      	b.n	800df5a <UART_SetConfig+0x2e6>
 800ddb0:	2304      	movs	r3, #4
 800ddb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ddb6:	e0d0      	b.n	800df5a <UART_SetConfig+0x2e6>
 800ddb8:	2308      	movs	r3, #8
 800ddba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ddbe:	e0cc      	b.n	800df5a <UART_SetConfig+0x2e6>
 800ddc0:	2310      	movs	r3, #16
 800ddc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ddc6:	e0c8      	b.n	800df5a <UART_SetConfig+0x2e6>
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4a5e      	ldr	r2, [pc, #376]	; (800df48 <UART_SetConfig+0x2d4>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d125      	bne.n	800de1e <UART_SetConfig+0x1aa>
 800ddd2:	4b5b      	ldr	r3, [pc, #364]	; (800df40 <UART_SetConfig+0x2cc>)
 800ddd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddd8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800dddc:	2b30      	cmp	r3, #48	; 0x30
 800ddde:	d016      	beq.n	800de0e <UART_SetConfig+0x19a>
 800dde0:	2b30      	cmp	r3, #48	; 0x30
 800dde2:	d818      	bhi.n	800de16 <UART_SetConfig+0x1a2>
 800dde4:	2b20      	cmp	r3, #32
 800dde6:	d00a      	beq.n	800ddfe <UART_SetConfig+0x18a>
 800dde8:	2b20      	cmp	r3, #32
 800ddea:	d814      	bhi.n	800de16 <UART_SetConfig+0x1a2>
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d002      	beq.n	800ddf6 <UART_SetConfig+0x182>
 800ddf0:	2b10      	cmp	r3, #16
 800ddf2:	d008      	beq.n	800de06 <UART_SetConfig+0x192>
 800ddf4:	e00f      	b.n	800de16 <UART_SetConfig+0x1a2>
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ddfc:	e0ad      	b.n	800df5a <UART_SetConfig+0x2e6>
 800ddfe:	2302      	movs	r3, #2
 800de00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de04:	e0a9      	b.n	800df5a <UART_SetConfig+0x2e6>
 800de06:	2304      	movs	r3, #4
 800de08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de0c:	e0a5      	b.n	800df5a <UART_SetConfig+0x2e6>
 800de0e:	2308      	movs	r3, #8
 800de10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de14:	e0a1      	b.n	800df5a <UART_SetConfig+0x2e6>
 800de16:	2310      	movs	r3, #16
 800de18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de1c:	e09d      	b.n	800df5a <UART_SetConfig+0x2e6>
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	4a4a      	ldr	r2, [pc, #296]	; (800df4c <UART_SetConfig+0x2d8>)
 800de24:	4293      	cmp	r3, r2
 800de26:	d125      	bne.n	800de74 <UART_SetConfig+0x200>
 800de28:	4b45      	ldr	r3, [pc, #276]	; (800df40 <UART_SetConfig+0x2cc>)
 800de2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800de32:	2bc0      	cmp	r3, #192	; 0xc0
 800de34:	d016      	beq.n	800de64 <UART_SetConfig+0x1f0>
 800de36:	2bc0      	cmp	r3, #192	; 0xc0
 800de38:	d818      	bhi.n	800de6c <UART_SetConfig+0x1f8>
 800de3a:	2b80      	cmp	r3, #128	; 0x80
 800de3c:	d00a      	beq.n	800de54 <UART_SetConfig+0x1e0>
 800de3e:	2b80      	cmp	r3, #128	; 0x80
 800de40:	d814      	bhi.n	800de6c <UART_SetConfig+0x1f8>
 800de42:	2b00      	cmp	r3, #0
 800de44:	d002      	beq.n	800de4c <UART_SetConfig+0x1d8>
 800de46:	2b40      	cmp	r3, #64	; 0x40
 800de48:	d008      	beq.n	800de5c <UART_SetConfig+0x1e8>
 800de4a:	e00f      	b.n	800de6c <UART_SetConfig+0x1f8>
 800de4c:	2300      	movs	r3, #0
 800de4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de52:	e082      	b.n	800df5a <UART_SetConfig+0x2e6>
 800de54:	2302      	movs	r3, #2
 800de56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de5a:	e07e      	b.n	800df5a <UART_SetConfig+0x2e6>
 800de5c:	2304      	movs	r3, #4
 800de5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de62:	e07a      	b.n	800df5a <UART_SetConfig+0x2e6>
 800de64:	2308      	movs	r3, #8
 800de66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de6a:	e076      	b.n	800df5a <UART_SetConfig+0x2e6>
 800de6c:	2310      	movs	r3, #16
 800de6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de72:	e072      	b.n	800df5a <UART_SetConfig+0x2e6>
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4a35      	ldr	r2, [pc, #212]	; (800df50 <UART_SetConfig+0x2dc>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d12a      	bne.n	800ded4 <UART_SetConfig+0x260>
 800de7e:	4b30      	ldr	r3, [pc, #192]	; (800df40 <UART_SetConfig+0x2cc>)
 800de80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800de8c:	d01a      	beq.n	800dec4 <UART_SetConfig+0x250>
 800de8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800de92:	d81b      	bhi.n	800decc <UART_SetConfig+0x258>
 800de94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de98:	d00c      	beq.n	800deb4 <UART_SetConfig+0x240>
 800de9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de9e:	d815      	bhi.n	800decc <UART_SetConfig+0x258>
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d003      	beq.n	800deac <UART_SetConfig+0x238>
 800dea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dea8:	d008      	beq.n	800debc <UART_SetConfig+0x248>
 800deaa:	e00f      	b.n	800decc <UART_SetConfig+0x258>
 800deac:	2300      	movs	r3, #0
 800deae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800deb2:	e052      	b.n	800df5a <UART_SetConfig+0x2e6>
 800deb4:	2302      	movs	r3, #2
 800deb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800deba:	e04e      	b.n	800df5a <UART_SetConfig+0x2e6>
 800debc:	2304      	movs	r3, #4
 800debe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dec2:	e04a      	b.n	800df5a <UART_SetConfig+0x2e6>
 800dec4:	2308      	movs	r3, #8
 800dec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800deca:	e046      	b.n	800df5a <UART_SetConfig+0x2e6>
 800decc:	2310      	movs	r3, #16
 800dece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ded2:	e042      	b.n	800df5a <UART_SetConfig+0x2e6>
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4a17      	ldr	r2, [pc, #92]	; (800df38 <UART_SetConfig+0x2c4>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d13a      	bne.n	800df54 <UART_SetConfig+0x2e0>
 800dede:	4b18      	ldr	r3, [pc, #96]	; (800df40 <UART_SetConfig+0x2cc>)
 800dee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dee4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800dee8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800deec:	d01a      	beq.n	800df24 <UART_SetConfig+0x2b0>
 800deee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800def2:	d81b      	bhi.n	800df2c <UART_SetConfig+0x2b8>
 800def4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800def8:	d00c      	beq.n	800df14 <UART_SetConfig+0x2a0>
 800defa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800defe:	d815      	bhi.n	800df2c <UART_SetConfig+0x2b8>
 800df00:	2b00      	cmp	r3, #0
 800df02:	d003      	beq.n	800df0c <UART_SetConfig+0x298>
 800df04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df08:	d008      	beq.n	800df1c <UART_SetConfig+0x2a8>
 800df0a:	e00f      	b.n	800df2c <UART_SetConfig+0x2b8>
 800df0c:	2300      	movs	r3, #0
 800df0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df12:	e022      	b.n	800df5a <UART_SetConfig+0x2e6>
 800df14:	2302      	movs	r3, #2
 800df16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df1a:	e01e      	b.n	800df5a <UART_SetConfig+0x2e6>
 800df1c:	2304      	movs	r3, #4
 800df1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df22:	e01a      	b.n	800df5a <UART_SetConfig+0x2e6>
 800df24:	2308      	movs	r3, #8
 800df26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df2a:	e016      	b.n	800df5a <UART_SetConfig+0x2e6>
 800df2c:	2310      	movs	r3, #16
 800df2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df32:	e012      	b.n	800df5a <UART_SetConfig+0x2e6>
 800df34:	efff69f3 	.word	0xefff69f3
 800df38:	40008000 	.word	0x40008000
 800df3c:	40013800 	.word	0x40013800
 800df40:	40021000 	.word	0x40021000
 800df44:	40004400 	.word	0x40004400
 800df48:	40004800 	.word	0x40004800
 800df4c:	40004c00 	.word	0x40004c00
 800df50:	40005000 	.word	0x40005000
 800df54:	2310      	movs	r3, #16
 800df56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	4a9f      	ldr	r2, [pc, #636]	; (800e1dc <UART_SetConfig+0x568>)
 800df60:	4293      	cmp	r3, r2
 800df62:	d17a      	bne.n	800e05a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800df64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df68:	2b08      	cmp	r3, #8
 800df6a:	d824      	bhi.n	800dfb6 <UART_SetConfig+0x342>
 800df6c:	a201      	add	r2, pc, #4	; (adr r2, 800df74 <UART_SetConfig+0x300>)
 800df6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df72:	bf00      	nop
 800df74:	0800df99 	.word	0x0800df99
 800df78:	0800dfb7 	.word	0x0800dfb7
 800df7c:	0800dfa1 	.word	0x0800dfa1
 800df80:	0800dfb7 	.word	0x0800dfb7
 800df84:	0800dfa7 	.word	0x0800dfa7
 800df88:	0800dfb7 	.word	0x0800dfb7
 800df8c:	0800dfb7 	.word	0x0800dfb7
 800df90:	0800dfb7 	.word	0x0800dfb7
 800df94:	0800dfaf 	.word	0x0800dfaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800df98:	f7fd fc7e 	bl	800b898 <HAL_RCC_GetPCLK1Freq>
 800df9c:	61f8      	str	r0, [r7, #28]
        break;
 800df9e:	e010      	b.n	800dfc2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dfa0:	4b8f      	ldr	r3, [pc, #572]	; (800e1e0 <UART_SetConfig+0x56c>)
 800dfa2:	61fb      	str	r3, [r7, #28]
        break;
 800dfa4:	e00d      	b.n	800dfc2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dfa6:	f7fd fbdf 	bl	800b768 <HAL_RCC_GetSysClockFreq>
 800dfaa:	61f8      	str	r0, [r7, #28]
        break;
 800dfac:	e009      	b.n	800dfc2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dfae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dfb2:	61fb      	str	r3, [r7, #28]
        break;
 800dfb4:	e005      	b.n	800dfc2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800dfba:	2301      	movs	r3, #1
 800dfbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800dfc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dfc2:	69fb      	ldr	r3, [r7, #28]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	f000 80fb 	beq.w	800e1c0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	685a      	ldr	r2, [r3, #4]
 800dfce:	4613      	mov	r3, r2
 800dfd0:	005b      	lsls	r3, r3, #1
 800dfd2:	4413      	add	r3, r2
 800dfd4:	69fa      	ldr	r2, [r7, #28]
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d305      	bcc.n	800dfe6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	685b      	ldr	r3, [r3, #4]
 800dfde:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800dfe0:	69fa      	ldr	r2, [r7, #28]
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d903      	bls.n	800dfee <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800dfec:	e0e8      	b.n	800e1c0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800dfee:	69fb      	ldr	r3, [r7, #28]
 800dff0:	2200      	movs	r2, #0
 800dff2:	461c      	mov	r4, r3
 800dff4:	4615      	mov	r5, r2
 800dff6:	f04f 0200 	mov.w	r2, #0
 800dffa:	f04f 0300 	mov.w	r3, #0
 800dffe:	022b      	lsls	r3, r5, #8
 800e000:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800e004:	0222      	lsls	r2, r4, #8
 800e006:	68f9      	ldr	r1, [r7, #12]
 800e008:	6849      	ldr	r1, [r1, #4]
 800e00a:	0849      	lsrs	r1, r1, #1
 800e00c:	2000      	movs	r0, #0
 800e00e:	4688      	mov	r8, r1
 800e010:	4681      	mov	r9, r0
 800e012:	eb12 0a08 	adds.w	sl, r2, r8
 800e016:	eb43 0b09 	adc.w	fp, r3, r9
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	685b      	ldr	r3, [r3, #4]
 800e01e:	2200      	movs	r2, #0
 800e020:	603b      	str	r3, [r7, #0]
 800e022:	607a      	str	r2, [r7, #4]
 800e024:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e028:	4650      	mov	r0, sl
 800e02a:	4659      	mov	r1, fp
 800e02c:	f7f2 f930 	bl	8000290 <__aeabi_uldivmod>
 800e030:	4602      	mov	r2, r0
 800e032:	460b      	mov	r3, r1
 800e034:	4613      	mov	r3, r2
 800e036:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e038:	69bb      	ldr	r3, [r7, #24]
 800e03a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e03e:	d308      	bcc.n	800e052 <UART_SetConfig+0x3de>
 800e040:	69bb      	ldr	r3, [r7, #24]
 800e042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e046:	d204      	bcs.n	800e052 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	69ba      	ldr	r2, [r7, #24]
 800e04e:	60da      	str	r2, [r3, #12]
 800e050:	e0b6      	b.n	800e1c0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800e052:	2301      	movs	r3, #1
 800e054:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e058:	e0b2      	b.n	800e1c0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	69db      	ldr	r3, [r3, #28]
 800e05e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e062:	d15e      	bne.n	800e122 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800e064:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e068:	2b08      	cmp	r3, #8
 800e06a:	d828      	bhi.n	800e0be <UART_SetConfig+0x44a>
 800e06c:	a201      	add	r2, pc, #4	; (adr r2, 800e074 <UART_SetConfig+0x400>)
 800e06e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e072:	bf00      	nop
 800e074:	0800e099 	.word	0x0800e099
 800e078:	0800e0a1 	.word	0x0800e0a1
 800e07c:	0800e0a9 	.word	0x0800e0a9
 800e080:	0800e0bf 	.word	0x0800e0bf
 800e084:	0800e0af 	.word	0x0800e0af
 800e088:	0800e0bf 	.word	0x0800e0bf
 800e08c:	0800e0bf 	.word	0x0800e0bf
 800e090:	0800e0bf 	.word	0x0800e0bf
 800e094:	0800e0b7 	.word	0x0800e0b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e098:	f7fd fbfe 	bl	800b898 <HAL_RCC_GetPCLK1Freq>
 800e09c:	61f8      	str	r0, [r7, #28]
        break;
 800e09e:	e014      	b.n	800e0ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e0a0:	f7fd fc10 	bl	800b8c4 <HAL_RCC_GetPCLK2Freq>
 800e0a4:	61f8      	str	r0, [r7, #28]
        break;
 800e0a6:	e010      	b.n	800e0ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e0a8:	4b4d      	ldr	r3, [pc, #308]	; (800e1e0 <UART_SetConfig+0x56c>)
 800e0aa:	61fb      	str	r3, [r7, #28]
        break;
 800e0ac:	e00d      	b.n	800e0ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e0ae:	f7fd fb5b 	bl	800b768 <HAL_RCC_GetSysClockFreq>
 800e0b2:	61f8      	str	r0, [r7, #28]
        break;
 800e0b4:	e009      	b.n	800e0ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e0b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e0ba:	61fb      	str	r3, [r7, #28]
        break;
 800e0bc:	e005      	b.n	800e0ca <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e0c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e0ca:	69fb      	ldr	r3, [r7, #28]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d077      	beq.n	800e1c0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e0d0:	69fb      	ldr	r3, [r7, #28]
 800e0d2:	005a      	lsls	r2, r3, #1
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	685b      	ldr	r3, [r3, #4]
 800e0d8:	085b      	lsrs	r3, r3, #1
 800e0da:	441a      	add	r2, r3
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e0e6:	69bb      	ldr	r3, [r7, #24]
 800e0e8:	2b0f      	cmp	r3, #15
 800e0ea:	d916      	bls.n	800e11a <UART_SetConfig+0x4a6>
 800e0ec:	69bb      	ldr	r3, [r7, #24]
 800e0ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0f2:	d212      	bcs.n	800e11a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e0f4:	69bb      	ldr	r3, [r7, #24]
 800e0f6:	b29b      	uxth	r3, r3
 800e0f8:	f023 030f 	bic.w	r3, r3, #15
 800e0fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e0fe:	69bb      	ldr	r3, [r7, #24]
 800e100:	085b      	lsrs	r3, r3, #1
 800e102:	b29b      	uxth	r3, r3
 800e104:	f003 0307 	and.w	r3, r3, #7
 800e108:	b29a      	uxth	r2, r3
 800e10a:	8afb      	ldrh	r3, [r7, #22]
 800e10c:	4313      	orrs	r3, r2
 800e10e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	8afa      	ldrh	r2, [r7, #22]
 800e116:	60da      	str	r2, [r3, #12]
 800e118:	e052      	b.n	800e1c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800e11a:	2301      	movs	r3, #1
 800e11c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e120:	e04e      	b.n	800e1c0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e122:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e126:	2b08      	cmp	r3, #8
 800e128:	d827      	bhi.n	800e17a <UART_SetConfig+0x506>
 800e12a:	a201      	add	r2, pc, #4	; (adr r2, 800e130 <UART_SetConfig+0x4bc>)
 800e12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e130:	0800e155 	.word	0x0800e155
 800e134:	0800e15d 	.word	0x0800e15d
 800e138:	0800e165 	.word	0x0800e165
 800e13c:	0800e17b 	.word	0x0800e17b
 800e140:	0800e16b 	.word	0x0800e16b
 800e144:	0800e17b 	.word	0x0800e17b
 800e148:	0800e17b 	.word	0x0800e17b
 800e14c:	0800e17b 	.word	0x0800e17b
 800e150:	0800e173 	.word	0x0800e173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e154:	f7fd fba0 	bl	800b898 <HAL_RCC_GetPCLK1Freq>
 800e158:	61f8      	str	r0, [r7, #28]
        break;
 800e15a:	e014      	b.n	800e186 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e15c:	f7fd fbb2 	bl	800b8c4 <HAL_RCC_GetPCLK2Freq>
 800e160:	61f8      	str	r0, [r7, #28]
        break;
 800e162:	e010      	b.n	800e186 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e164:	4b1e      	ldr	r3, [pc, #120]	; (800e1e0 <UART_SetConfig+0x56c>)
 800e166:	61fb      	str	r3, [r7, #28]
        break;
 800e168:	e00d      	b.n	800e186 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e16a:	f7fd fafd 	bl	800b768 <HAL_RCC_GetSysClockFreq>
 800e16e:	61f8      	str	r0, [r7, #28]
        break;
 800e170:	e009      	b.n	800e186 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e176:	61fb      	str	r3, [r7, #28]
        break;
 800e178:	e005      	b.n	800e186 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800e17a:	2300      	movs	r3, #0
 800e17c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e17e:	2301      	movs	r3, #1
 800e180:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e184:	bf00      	nop
    }

    if (pclk != 0U)
 800e186:	69fb      	ldr	r3, [r7, #28]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d019      	beq.n	800e1c0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	685b      	ldr	r3, [r3, #4]
 800e190:	085a      	lsrs	r2, r3, #1
 800e192:	69fb      	ldr	r3, [r7, #28]
 800e194:	441a      	add	r2, r3
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	685b      	ldr	r3, [r3, #4]
 800e19a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e19e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e1a0:	69bb      	ldr	r3, [r7, #24]
 800e1a2:	2b0f      	cmp	r3, #15
 800e1a4:	d909      	bls.n	800e1ba <UART_SetConfig+0x546>
 800e1a6:	69bb      	ldr	r3, [r7, #24]
 800e1a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1ac:	d205      	bcs.n	800e1ba <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e1ae:	69bb      	ldr	r3, [r7, #24]
 800e1b0:	b29a      	uxth	r2, r3
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	60da      	str	r2, [r3, #12]
 800e1b8:	e002      	b.n	800e1c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800e1cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3728      	adds	r7, #40	; 0x28
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e1da:	bf00      	nop
 800e1dc:	40008000 	.word	0x40008000
 800e1e0:	00f42400 	.word	0x00f42400

0800e1e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b083      	sub	sp, #12
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1f0:	f003 0301 	and.w	r3, r3, #1
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d00a      	beq.n	800e20e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	685b      	ldr	r3, [r3, #4]
 800e1fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	430a      	orrs	r2, r1
 800e20c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e212:	f003 0302 	and.w	r3, r3, #2
 800e216:	2b00      	cmp	r3, #0
 800e218:	d00a      	beq.n	800e230 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	685b      	ldr	r3, [r3, #4]
 800e220:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	430a      	orrs	r2, r1
 800e22e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e234:	f003 0304 	and.w	r3, r3, #4
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d00a      	beq.n	800e252 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	685b      	ldr	r3, [r3, #4]
 800e242:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	430a      	orrs	r2, r1
 800e250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e256:	f003 0308 	and.w	r3, r3, #8
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d00a      	beq.n	800e274 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	685b      	ldr	r3, [r3, #4]
 800e264:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	430a      	orrs	r2, r1
 800e272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e278:	f003 0310 	and.w	r3, r3, #16
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d00a      	beq.n	800e296 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	689b      	ldr	r3, [r3, #8]
 800e286:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	430a      	orrs	r2, r1
 800e294:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e29a:	f003 0320 	and.w	r3, r3, #32
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d00a      	beq.n	800e2b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	689b      	ldr	r3, [r3, #8]
 800e2a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	430a      	orrs	r2, r1
 800e2b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d01a      	beq.n	800e2fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	685b      	ldr	r3, [r3, #4]
 800e2ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	430a      	orrs	r2, r1
 800e2d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e2e2:	d10a      	bne.n	800e2fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	685b      	ldr	r3, [r3, #4]
 800e2ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	430a      	orrs	r2, r1
 800e2f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e302:	2b00      	cmp	r3, #0
 800e304:	d00a      	beq.n	800e31c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	685b      	ldr	r3, [r3, #4]
 800e30c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	430a      	orrs	r2, r1
 800e31a:	605a      	str	r2, [r3, #4]
  }
}
 800e31c:	bf00      	nop
 800e31e:	370c      	adds	r7, #12
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr

0800e328 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b086      	sub	sp, #24
 800e32c:	af02      	add	r7, sp, #8
 800e32e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2200      	movs	r2, #0
 800e334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e338:	f7f8 fe96 	bl	8007068 <HAL_GetTick>
 800e33c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	f003 0308 	and.w	r3, r3, #8
 800e348:	2b08      	cmp	r3, #8
 800e34a:	d10e      	bne.n	800e36a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e34c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e350:	9300      	str	r3, [sp, #0]
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	2200      	movs	r2, #0
 800e356:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f000 f82d 	bl	800e3ba <UART_WaitOnFlagUntilTimeout>
 800e360:	4603      	mov	r3, r0
 800e362:	2b00      	cmp	r3, #0
 800e364:	d001      	beq.n	800e36a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e366:	2303      	movs	r3, #3
 800e368:	e023      	b.n	800e3b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	f003 0304 	and.w	r3, r3, #4
 800e374:	2b04      	cmp	r3, #4
 800e376:	d10e      	bne.n	800e396 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e378:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e37c:	9300      	str	r3, [sp, #0]
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2200      	movs	r2, #0
 800e382:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f000 f817 	bl	800e3ba <UART_WaitOnFlagUntilTimeout>
 800e38c:	4603      	mov	r3, r0
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d001      	beq.n	800e396 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e392:	2303      	movs	r3, #3
 800e394:	e00d      	b.n	800e3b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2220      	movs	r2, #32
 800e39a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2220      	movs	r2, #32
 800e3a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800e3b0:	2300      	movs	r3, #0
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3710      	adds	r7, #16
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}

0800e3ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e3ba:	b580      	push	{r7, lr}
 800e3bc:	b09c      	sub	sp, #112	; 0x70
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	60f8      	str	r0, [r7, #12]
 800e3c2:	60b9      	str	r1, [r7, #8]
 800e3c4:	603b      	str	r3, [r7, #0]
 800e3c6:	4613      	mov	r3, r2
 800e3c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e3ca:	e0a5      	b.n	800e518 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e3cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e3ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3d2:	f000 80a1 	beq.w	800e518 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e3d6:	f7f8 fe47 	bl	8007068 <HAL_GetTick>
 800e3da:	4602      	mov	r2, r0
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	1ad3      	subs	r3, r2, r3
 800e3e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e3e2:	429a      	cmp	r2, r3
 800e3e4:	d302      	bcc.n	800e3ec <UART_WaitOnFlagUntilTimeout+0x32>
 800e3e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d13e      	bne.n	800e46a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3f4:	e853 3f00 	ldrex	r3, [r3]
 800e3f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e3fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e400:	667b      	str	r3, [r7, #100]	; 0x64
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	461a      	mov	r2, r3
 800e408:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e40a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e40c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e40e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e410:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e412:	e841 2300 	strex	r3, r2, [r1]
 800e416:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d1e6      	bne.n	800e3ec <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	3308      	adds	r3, #8
 800e424:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e428:	e853 3f00 	ldrex	r3, [r3]
 800e42c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e430:	f023 0301 	bic.w	r3, r3, #1
 800e434:	663b      	str	r3, [r7, #96]	; 0x60
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	3308      	adds	r3, #8
 800e43c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e43e:	64ba      	str	r2, [r7, #72]	; 0x48
 800e440:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e442:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e444:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e446:	e841 2300 	strex	r3, r2, [r1]
 800e44a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e44c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d1e5      	bne.n	800e41e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	2220      	movs	r2, #32
 800e456:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	2220      	movs	r2, #32
 800e45c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	2200      	movs	r2, #0
 800e462:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800e466:	2303      	movs	r3, #3
 800e468:	e067      	b.n	800e53a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f003 0304 	and.w	r3, r3, #4
 800e474:	2b00      	cmp	r3, #0
 800e476:	d04f      	beq.n	800e518 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	69db      	ldr	r3, [r3, #28]
 800e47e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e486:	d147      	bne.n	800e518 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e490:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e49a:	e853 3f00 	ldrex	r3, [r3]
 800e49e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e4a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	461a      	mov	r2, r3
 800e4ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4b0:	637b      	str	r3, [r7, #52]	; 0x34
 800e4b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e4b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e4b8:	e841 2300 	strex	r3, r2, [r1]
 800e4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d1e6      	bne.n	800e492 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	3308      	adds	r3, #8
 800e4ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	e853 3f00 	ldrex	r3, [r3]
 800e4d2:	613b      	str	r3, [r7, #16]
   return(result);
 800e4d4:	693b      	ldr	r3, [r7, #16]
 800e4d6:	f023 0301 	bic.w	r3, r3, #1
 800e4da:	66bb      	str	r3, [r7, #104]	; 0x68
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	3308      	adds	r3, #8
 800e4e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e4e4:	623a      	str	r2, [r7, #32]
 800e4e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4e8:	69f9      	ldr	r1, [r7, #28]
 800e4ea:	6a3a      	ldr	r2, [r7, #32]
 800e4ec:	e841 2300 	strex	r3, r2, [r1]
 800e4f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800e4f2:	69bb      	ldr	r3, [r7, #24]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d1e5      	bne.n	800e4c4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	2220      	movs	r2, #32
 800e4fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	2220      	movs	r2, #32
 800e502:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	2220      	movs	r2, #32
 800e508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	2200      	movs	r2, #0
 800e510:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800e514:	2303      	movs	r3, #3
 800e516:	e010      	b.n	800e53a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	69da      	ldr	r2, [r3, #28]
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	4013      	ands	r3, r2
 800e522:	68ba      	ldr	r2, [r7, #8]
 800e524:	429a      	cmp	r2, r3
 800e526:	bf0c      	ite	eq
 800e528:	2301      	moveq	r3, #1
 800e52a:	2300      	movne	r3, #0
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	461a      	mov	r2, r3
 800e530:	79fb      	ldrb	r3, [r7, #7]
 800e532:	429a      	cmp	r2, r3
 800e534:	f43f af4a 	beq.w	800e3cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e538:	2300      	movs	r3, #0
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3770      	adds	r7, #112	; 0x70
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
	...

0800e544 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800e544:	b480      	push	{r7}
 800e546:	b087      	sub	sp, #28
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
 800e54c:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	681a      	ldr	r2, [r3, #0]
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e558:	683a      	ldr	r2, [r7, #0]
 800e55a:	6812      	ldr	r2, [r2, #0]
 800e55c:	f023 0101 	bic.w	r1, r3, #1
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	689b      	ldr	r3, [r3, #8]
 800e56a:	2b08      	cmp	r3, #8
 800e56c:	d102      	bne.n	800e574 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800e56e:	2340      	movs	r3, #64	; 0x40
 800e570:	617b      	str	r3, [r7, #20]
 800e572:	e001      	b.n	800e578 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800e574:	2300      	movs	r3, #0
 800e576:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800e584:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800e58a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800e590:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800e596:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800e59c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800e5a2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800e5a8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800e5ae:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800e5b4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800e5ba:	4313      	orrs	r3, r2
 800e5bc:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5c2:	693a      	ldr	r2, [r7, #16]
 800e5c4:	4313      	orrs	r3, r2
 800e5c6:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5cc:	693a      	ldr	r2, [r7, #16]
 800e5ce:	4313      	orrs	r3, r2
 800e5d0:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5d6:	693a      	ldr	r2, [r7, #16]
 800e5d8:	4313      	orrs	r3, r2
 800e5da:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800e5dc:	4b20      	ldr	r3, [pc, #128]	; (800e660 <FMC_NORSRAM_Init+0x11c>)
 800e5de:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e5e6:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e5ee:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800e5f6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	681a      	ldr	r2, [r3, #0]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	43db      	mvns	r3, r3
 800e606:	ea02 0103 	and.w	r1, r2, r3
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	681a      	ldr	r2, [r3, #0]
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	4319      	orrs	r1, r3
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e61c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e620:	d10c      	bne.n	800e63c <FMC_NORSRAM_Init+0xf8>
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d008      	beq.n	800e63c <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e636:	431a      	orrs	r2, r3
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d006      	beq.n	800e652 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681a      	ldr	r2, [r3, #0]
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e64c:	431a      	orrs	r2, r3
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 800e652:	2300      	movs	r3, #0
}
 800e654:	4618      	mov	r0, r3
 800e656:	371c      	adds	r7, #28
 800e658:	46bd      	mov	sp, r7
 800e65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65e:	4770      	bx	lr
 800e660:	0008fb7f 	.word	0x0008fb7f

0800e664 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e664:	b480      	push	{r7}
 800e666:	b087      	sub	sp, #28
 800e668:	af00      	add	r7, sp, #0
 800e66a:	60f8      	str	r0, [r7, #12]
 800e66c:	60b9      	str	r1, [r7, #8]
 800e66e:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	1c5a      	adds	r2, r3, #1
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e67a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	681a      	ldr	r2, [r3, #0]
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	685b      	ldr	r3, [r3, #4]
 800e686:	011b      	lsls	r3, r3, #4
 800e688:	431a      	orrs	r2, r3
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	689b      	ldr	r3, [r3, #8]
 800e68e:	021b      	lsls	r3, r3, #8
 800e690:	431a      	orrs	r2, r3
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	691b      	ldr	r3, [r3, #16]
 800e696:	041b      	lsls	r3, r3, #16
 800e698:	431a      	orrs	r2, r3
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	695b      	ldr	r3, [r3, #20]
 800e69e:	3b01      	subs	r3, #1
 800e6a0:	051b      	lsls	r3, r3, #20
 800e6a2:	431a      	orrs	r2, r3
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	699b      	ldr	r3, [r3, #24]
 800e6a8:	3b02      	subs	r3, #2
 800e6aa:	061b      	lsls	r3, r3, #24
 800e6ac:	431a      	orrs	r2, r3
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	69db      	ldr	r3, [r3, #28]
 800e6b2:	4313      	orrs	r3, r2
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	3201      	adds	r2, #1
 800e6b8:	4319      	orrs	r1, r3
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e6c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e6cc:	d113      	bne.n	800e6f6 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	685b      	ldr	r3, [r3, #4]
 800e6d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e6d6:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	695b      	ldr	r3, [r3, #20]
 800e6dc:	3b01      	subs	r3, #1
 800e6de:	051b      	lsls	r3, r3, #20
 800e6e0:	697a      	ldr	r2, [r7, #20]
 800e6e2:	4313      	orrs	r3, r2
 800e6e4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	685b      	ldr	r3, [r3, #4]
 800e6ea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	431a      	orrs	r2, r3
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800e6f6:	2300      	movs	r3, #0
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	371c      	adds	r7, #28
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e702:	4770      	bx	lr

0800e704 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800e704:	b480      	push	{r7}
 800e706:	b085      	sub	sp, #20
 800e708:	af00      	add	r7, sp, #0
 800e70a:	60f8      	str	r0, [r7, #12]
 800e70c:	60b9      	str	r1, [r7, #8]
 800e70e:	607a      	str	r2, [r7, #4]
 800e710:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e718:	d11d      	bne.n	800e756 <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	687a      	ldr	r2, [r7, #4]
 800e71e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e722:	4b13      	ldr	r3, [pc, #76]	; (800e770 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800e724:	4013      	ands	r3, r2
 800e726:	68ba      	ldr	r2, [r7, #8]
 800e728:	6811      	ldr	r1, [r2, #0]
 800e72a:	68ba      	ldr	r2, [r7, #8]
 800e72c:	6852      	ldr	r2, [r2, #4]
 800e72e:	0112      	lsls	r2, r2, #4
 800e730:	4311      	orrs	r1, r2
 800e732:	68ba      	ldr	r2, [r7, #8]
 800e734:	6892      	ldr	r2, [r2, #8]
 800e736:	0212      	lsls	r2, r2, #8
 800e738:	4311      	orrs	r1, r2
 800e73a:	68ba      	ldr	r2, [r7, #8]
 800e73c:	69d2      	ldr	r2, [r2, #28]
 800e73e:	4311      	orrs	r1, r2
 800e740:	68ba      	ldr	r2, [r7, #8]
 800e742:	6912      	ldr	r2, [r2, #16]
 800e744:	0412      	lsls	r2, r2, #16
 800e746:	430a      	orrs	r2, r1
 800e748:	ea43 0102 	orr.w	r1, r3, r2
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	687a      	ldr	r2, [r7, #4]
 800e750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e754:	e005      	b.n	800e762 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	687a      	ldr	r2, [r7, #4]
 800e75a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800e75e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800e762:	2300      	movs	r3, #0
}
 800e764:	4618      	mov	r0, r3
 800e766:	3714      	adds	r7, #20
 800e768:	46bd      	mov	sp, r7
 800e76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76e:	4770      	bx	lr
 800e770:	cff00000 	.word	0xcff00000

0800e774 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e774:	b084      	sub	sp, #16
 800e776:	b580      	push	{r7, lr}
 800e778:	b084      	sub	sp, #16
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	6078      	str	r0, [r7, #4]
 800e77e:	f107 001c 	add.w	r0, r7, #28
 800e782:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	68db      	ldr	r3, [r3, #12]
 800e78a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f001 faf6 	bl	800fd84 <USB_CoreReset>
 800e798:	4603      	mov	r3, r0
 800e79a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800e79c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d106      	bne.n	800e7b0 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	639a      	str	r2, [r3, #56]	; 0x38
 800e7ae:	e005      	b.n	800e7bc <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800e7bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3710      	adds	r7, #16
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e7c8:	b004      	add	sp, #16
 800e7ca:	4770      	bx	lr

0800e7cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b087      	sub	sp, #28
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	60f8      	str	r0, [r7, #12]
 800e7d4:	60b9      	str	r1, [r7, #8]
 800e7d6:	4613      	mov	r3, r2
 800e7d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e7da:	79fb      	ldrb	r3, [r7, #7]
 800e7dc:	2b02      	cmp	r3, #2
 800e7de:	d165      	bne.n	800e8ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	4a3e      	ldr	r2, [pc, #248]	; (800e8dc <USB_SetTurnaroundTime+0x110>)
 800e7e4:	4293      	cmp	r3, r2
 800e7e6:	d906      	bls.n	800e7f6 <USB_SetTurnaroundTime+0x2a>
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	4a3d      	ldr	r2, [pc, #244]	; (800e8e0 <USB_SetTurnaroundTime+0x114>)
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d202      	bcs.n	800e7f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e7f0:	230f      	movs	r3, #15
 800e7f2:	617b      	str	r3, [r7, #20]
 800e7f4:	e05c      	b.n	800e8b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	4a39      	ldr	r2, [pc, #228]	; (800e8e0 <USB_SetTurnaroundTime+0x114>)
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	d306      	bcc.n	800e80c <USB_SetTurnaroundTime+0x40>
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	4a38      	ldr	r2, [pc, #224]	; (800e8e4 <USB_SetTurnaroundTime+0x118>)
 800e802:	4293      	cmp	r3, r2
 800e804:	d202      	bcs.n	800e80c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e806:	230e      	movs	r3, #14
 800e808:	617b      	str	r3, [r7, #20]
 800e80a:	e051      	b.n	800e8b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	4a35      	ldr	r2, [pc, #212]	; (800e8e4 <USB_SetTurnaroundTime+0x118>)
 800e810:	4293      	cmp	r3, r2
 800e812:	d306      	bcc.n	800e822 <USB_SetTurnaroundTime+0x56>
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	4a34      	ldr	r2, [pc, #208]	; (800e8e8 <USB_SetTurnaroundTime+0x11c>)
 800e818:	4293      	cmp	r3, r2
 800e81a:	d202      	bcs.n	800e822 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e81c:	230d      	movs	r3, #13
 800e81e:	617b      	str	r3, [r7, #20]
 800e820:	e046      	b.n	800e8b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	4a30      	ldr	r2, [pc, #192]	; (800e8e8 <USB_SetTurnaroundTime+0x11c>)
 800e826:	4293      	cmp	r3, r2
 800e828:	d306      	bcc.n	800e838 <USB_SetTurnaroundTime+0x6c>
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	4a2f      	ldr	r2, [pc, #188]	; (800e8ec <USB_SetTurnaroundTime+0x120>)
 800e82e:	4293      	cmp	r3, r2
 800e830:	d802      	bhi.n	800e838 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e832:	230c      	movs	r3, #12
 800e834:	617b      	str	r3, [r7, #20]
 800e836:	e03b      	b.n	800e8b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	4a2c      	ldr	r2, [pc, #176]	; (800e8ec <USB_SetTurnaroundTime+0x120>)
 800e83c:	4293      	cmp	r3, r2
 800e83e:	d906      	bls.n	800e84e <USB_SetTurnaroundTime+0x82>
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	4a2b      	ldr	r2, [pc, #172]	; (800e8f0 <USB_SetTurnaroundTime+0x124>)
 800e844:	4293      	cmp	r3, r2
 800e846:	d802      	bhi.n	800e84e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e848:	230b      	movs	r3, #11
 800e84a:	617b      	str	r3, [r7, #20]
 800e84c:	e030      	b.n	800e8b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	4a27      	ldr	r2, [pc, #156]	; (800e8f0 <USB_SetTurnaroundTime+0x124>)
 800e852:	4293      	cmp	r3, r2
 800e854:	d906      	bls.n	800e864 <USB_SetTurnaroundTime+0x98>
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	4a26      	ldr	r2, [pc, #152]	; (800e8f4 <USB_SetTurnaroundTime+0x128>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d802      	bhi.n	800e864 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e85e:	230a      	movs	r3, #10
 800e860:	617b      	str	r3, [r7, #20]
 800e862:	e025      	b.n	800e8b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	4a23      	ldr	r2, [pc, #140]	; (800e8f4 <USB_SetTurnaroundTime+0x128>)
 800e868:	4293      	cmp	r3, r2
 800e86a:	d906      	bls.n	800e87a <USB_SetTurnaroundTime+0xae>
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	4a22      	ldr	r2, [pc, #136]	; (800e8f8 <USB_SetTurnaroundTime+0x12c>)
 800e870:	4293      	cmp	r3, r2
 800e872:	d202      	bcs.n	800e87a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e874:	2309      	movs	r3, #9
 800e876:	617b      	str	r3, [r7, #20]
 800e878:	e01a      	b.n	800e8b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	4a1e      	ldr	r2, [pc, #120]	; (800e8f8 <USB_SetTurnaroundTime+0x12c>)
 800e87e:	4293      	cmp	r3, r2
 800e880:	d306      	bcc.n	800e890 <USB_SetTurnaroundTime+0xc4>
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	4a1d      	ldr	r2, [pc, #116]	; (800e8fc <USB_SetTurnaroundTime+0x130>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d802      	bhi.n	800e890 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e88a:	2308      	movs	r3, #8
 800e88c:	617b      	str	r3, [r7, #20]
 800e88e:	e00f      	b.n	800e8b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	4a1a      	ldr	r2, [pc, #104]	; (800e8fc <USB_SetTurnaroundTime+0x130>)
 800e894:	4293      	cmp	r3, r2
 800e896:	d906      	bls.n	800e8a6 <USB_SetTurnaroundTime+0xda>
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	4a19      	ldr	r2, [pc, #100]	; (800e900 <USB_SetTurnaroundTime+0x134>)
 800e89c:	4293      	cmp	r3, r2
 800e89e:	d202      	bcs.n	800e8a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e8a0:	2307      	movs	r3, #7
 800e8a2:	617b      	str	r3, [r7, #20]
 800e8a4:	e004      	b.n	800e8b0 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e8a6:	2306      	movs	r3, #6
 800e8a8:	617b      	str	r3, [r7, #20]
 800e8aa:	e001      	b.n	800e8b0 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e8ac:	2309      	movs	r3, #9
 800e8ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	68db      	ldr	r3, [r3, #12]
 800e8b4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	68da      	ldr	r2, [r3, #12]
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	029b      	lsls	r3, r3, #10
 800e8c4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e8c8:	431a      	orrs	r2, r3
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e8ce:	2300      	movs	r3, #0
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	371c      	adds	r7, #28
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8da:	4770      	bx	lr
 800e8dc:	00d8acbf 	.word	0x00d8acbf
 800e8e0:	00e4e1c0 	.word	0x00e4e1c0
 800e8e4:	00f42400 	.word	0x00f42400
 800e8e8:	01067380 	.word	0x01067380
 800e8ec:	011a499f 	.word	0x011a499f
 800e8f0:	01312cff 	.word	0x01312cff
 800e8f4:	014ca43f 	.word	0x014ca43f
 800e8f8:	016e3600 	.word	0x016e3600
 800e8fc:	01a6ab1f 	.word	0x01a6ab1f
 800e900:	01e84800 	.word	0x01e84800

0800e904 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e904:	b480      	push	{r7}
 800e906:	b083      	sub	sp, #12
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	689b      	ldr	r3, [r3, #8]
 800e910:	f043 0201 	orr.w	r2, r3, #1
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e918:	2300      	movs	r3, #0
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	370c      	adds	r7, #12
 800e91e:	46bd      	mov	sp, r7
 800e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e924:	4770      	bx	lr

0800e926 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e926:	b480      	push	{r7}
 800e928:	b083      	sub	sp, #12
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	689b      	ldr	r3, [r3, #8]
 800e932:	f023 0201 	bic.w	r2, r3, #1
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e93a:	2300      	movs	r3, #0
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	370c      	adds	r7, #12
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr

0800e948 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b084      	sub	sp, #16
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	460b      	mov	r3, r1
 800e952:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e954:	2300      	movs	r3, #0
 800e956:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	68db      	ldr	r3, [r3, #12]
 800e95c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e964:	78fb      	ldrb	r3, [r7, #3]
 800e966:	2b01      	cmp	r3, #1
 800e968:	d115      	bne.n	800e996 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	68db      	ldr	r3, [r3, #12]
 800e96e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e976:	2001      	movs	r0, #1
 800e978:	f7f8 fb82 	bl	8007080 <HAL_Delay>
      ms++;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	3301      	adds	r3, #1
 800e980:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f001 f985 	bl	800fc92 <USB_GetMode>
 800e988:	4603      	mov	r3, r0
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d01e      	beq.n	800e9cc <USB_SetCurrentMode+0x84>
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2b31      	cmp	r3, #49	; 0x31
 800e992:	d9f0      	bls.n	800e976 <USB_SetCurrentMode+0x2e>
 800e994:	e01a      	b.n	800e9cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e996:	78fb      	ldrb	r3, [r7, #3]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d115      	bne.n	800e9c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	68db      	ldr	r3, [r3, #12]
 800e9a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e9a8:	2001      	movs	r0, #1
 800e9aa:	f7f8 fb69 	bl	8007080 <HAL_Delay>
      ms++;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f001 f96c 	bl	800fc92 <USB_GetMode>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d005      	beq.n	800e9cc <USB_SetCurrentMode+0x84>
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2b31      	cmp	r3, #49	; 0x31
 800e9c4:	d9f0      	bls.n	800e9a8 <USB_SetCurrentMode+0x60>
 800e9c6:	e001      	b.n	800e9cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	e005      	b.n	800e9d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2b32      	cmp	r3, #50	; 0x32
 800e9d0:	d101      	bne.n	800e9d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	e000      	b.n	800e9d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e9d6:	2300      	movs	r3, #0
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	3710      	adds	r7, #16
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}

0800e9e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e9e0:	b084      	sub	sp, #16
 800e9e2:	b580      	push	{r7, lr}
 800e9e4:	b086      	sub	sp, #24
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	6078      	str	r0, [r7, #4]
 800e9ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e9ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	613b      	str	r3, [r7, #16]
 800e9fe:	e009      	b.n	800ea14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ea00:	687a      	ldr	r2, [r7, #4]
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	3340      	adds	r3, #64	; 0x40
 800ea06:	009b      	lsls	r3, r3, #2
 800ea08:	4413      	add	r3, r2
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	3301      	adds	r3, #1
 800ea12:	613b      	str	r3, [r7, #16]
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	2b0e      	cmp	r3, #14
 800ea18:	d9f2      	bls.n	800ea00 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ea1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d11c      	bne.n	800ea5a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea26:	685b      	ldr	r3, [r3, #4]
 800ea28:	68fa      	ldr	r2, [r7, #12]
 800ea2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea2e:	f043 0302 	orr.w	r3, r3, #2
 800ea32:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea38:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	601a      	str	r2, [r3, #0]
 800ea58:	e005      	b.n	800ea66 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ea6c:	461a      	mov	r2, r3
 800ea6e:	2300      	movs	r3, #0
 800ea70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea78:	4619      	mov	r1, r3
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea80:	461a      	mov	r2, r3
 800ea82:	680b      	ldr	r3, [r1, #0]
 800ea84:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ea86:	2103      	movs	r1, #3
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f000 f959 	bl	800ed40 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ea8e:	2110      	movs	r1, #16
 800ea90:	6878      	ldr	r0, [r7, #4]
 800ea92:	f000 f8f1 	bl	800ec78 <USB_FlushTxFifo>
 800ea96:	4603      	mov	r3, r0
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d001      	beq.n	800eaa0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	f000 f91d 	bl	800ece0 <USB_FlushRxFifo>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d001      	beq.n	800eab0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800eaac:	2301      	movs	r3, #1
 800eaae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eab6:	461a      	mov	r2, r3
 800eab8:	2300      	movs	r3, #0
 800eaba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eac2:	461a      	mov	r2, r3
 800eac4:	2300      	movs	r3, #0
 800eac6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eace:	461a      	mov	r2, r3
 800ead0:	2300      	movs	r3, #0
 800ead2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ead4:	2300      	movs	r3, #0
 800ead6:	613b      	str	r3, [r7, #16]
 800ead8:	e043      	b.n	800eb62 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eada:	693b      	ldr	r3, [r7, #16]
 800eadc:	015a      	lsls	r2, r3, #5
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	4413      	add	r3, r2
 800eae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eaec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eaf0:	d118      	bne.n	800eb24 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800eaf2:	693b      	ldr	r3, [r7, #16]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d10a      	bne.n	800eb0e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	015a      	lsls	r2, r3, #5
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	4413      	add	r3, r2
 800eb00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb04:	461a      	mov	r2, r3
 800eb06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800eb0a:	6013      	str	r3, [r2, #0]
 800eb0c:	e013      	b.n	800eb36 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	015a      	lsls	r2, r3, #5
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	4413      	add	r3, r2
 800eb16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800eb20:	6013      	str	r3, [r2, #0]
 800eb22:	e008      	b.n	800eb36 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800eb24:	693b      	ldr	r3, [r7, #16]
 800eb26:	015a      	lsls	r2, r3, #5
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	4413      	add	r3, r2
 800eb2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb30:	461a      	mov	r2, r3
 800eb32:	2300      	movs	r3, #0
 800eb34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800eb36:	693b      	ldr	r3, [r7, #16]
 800eb38:	015a      	lsls	r2, r3, #5
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	4413      	add	r3, r2
 800eb3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb42:	461a      	mov	r2, r3
 800eb44:	2300      	movs	r3, #0
 800eb46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800eb48:	693b      	ldr	r3, [r7, #16]
 800eb4a:	015a      	lsls	r2, r3, #5
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	4413      	add	r3, r2
 800eb50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb54:	461a      	mov	r2, r3
 800eb56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800eb5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	3301      	adds	r3, #1
 800eb60:	613b      	str	r3, [r7, #16]
 800eb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb64:	693a      	ldr	r2, [r7, #16]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d3b7      	bcc.n	800eada <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	613b      	str	r3, [r7, #16]
 800eb6e:	e043      	b.n	800ebf8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eb70:	693b      	ldr	r3, [r7, #16]
 800eb72:	015a      	lsls	r2, r3, #5
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	4413      	add	r3, r2
 800eb78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eb82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eb86:	d118      	bne.n	800ebba <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800eb88:	693b      	ldr	r3, [r7, #16]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d10a      	bne.n	800eba4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800eb8e:	693b      	ldr	r3, [r7, #16]
 800eb90:	015a      	lsls	r2, r3, #5
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	4413      	add	r3, r2
 800eb96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800eba0:	6013      	str	r3, [r2, #0]
 800eba2:	e013      	b.n	800ebcc <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800eba4:	693b      	ldr	r3, [r7, #16]
 800eba6:	015a      	lsls	r2, r3, #5
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	4413      	add	r3, r2
 800ebac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebb0:	461a      	mov	r2, r3
 800ebb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ebb6:	6013      	str	r3, [r2, #0]
 800ebb8:	e008      	b.n	800ebcc <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	015a      	lsls	r2, r3, #5
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	4413      	add	r3, r2
 800ebc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebc6:	461a      	mov	r2, r3
 800ebc8:	2300      	movs	r3, #0
 800ebca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	015a      	lsls	r2, r3, #5
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	4413      	add	r3, r2
 800ebd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebd8:	461a      	mov	r2, r3
 800ebda:	2300      	movs	r3, #0
 800ebdc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	015a      	lsls	r2, r3, #5
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	4413      	add	r3, r2
 800ebe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebea:	461a      	mov	r2, r3
 800ebec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ebf0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	3301      	adds	r3, #1
 800ebf6:	613b      	str	r3, [r7, #16]
 800ebf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebfa:	693a      	ldr	r2, [r7, #16]
 800ebfc:	429a      	cmp	r2, r3
 800ebfe:	d3b7      	bcc.n	800eb70 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec06:	691b      	ldr	r3, [r3, #16]
 800ec08:	68fa      	ldr	r2, [r7, #12]
 800ec0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ec0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ec12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2200      	movs	r2, #0
 800ec18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ec20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	699b      	ldr	r3, [r3, #24]
 800ec26:	f043 0210 	orr.w	r2, r3, #16
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	699a      	ldr	r2, [r3, #24]
 800ec32:	4b10      	ldr	r3, [pc, #64]	; (800ec74 <USB_DevInit+0x294>)
 800ec34:	4313      	orrs	r3, r2
 800ec36:	687a      	ldr	r2, [r7, #4]
 800ec38:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ec3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d005      	beq.n	800ec4c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	699b      	ldr	r3, [r3, #24]
 800ec44:	f043 0208 	orr.w	r2, r3, #8
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ec4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec4e:	2b01      	cmp	r3, #1
 800ec50:	d107      	bne.n	800ec62 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	699b      	ldr	r3, [r3, #24]
 800ec56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ec5a:	f043 0304 	orr.w	r3, r3, #4
 800ec5e:	687a      	ldr	r2, [r7, #4]
 800ec60:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ec62:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3718      	adds	r7, #24
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ec6e:	b004      	add	sp, #16
 800ec70:	4770      	bx	lr
 800ec72:	bf00      	nop
 800ec74:	803c3800 	.word	0x803c3800

0800ec78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ec78:	b480      	push	{r7}
 800ec7a:	b085      	sub	sp, #20
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
 800ec80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ec82:	2300      	movs	r3, #0
 800ec84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	3301      	adds	r3, #1
 800ec8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	4a13      	ldr	r2, [pc, #76]	; (800ecdc <USB_FlushTxFifo+0x64>)
 800ec90:	4293      	cmp	r3, r2
 800ec92:	d901      	bls.n	800ec98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ec94:	2303      	movs	r3, #3
 800ec96:	e01b      	b.n	800ecd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	691b      	ldr	r3, [r3, #16]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	daf2      	bge.n	800ec86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800eca0:	2300      	movs	r3, #0
 800eca2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	019b      	lsls	r3, r3, #6
 800eca8:	f043 0220 	orr.w	r2, r3, #32
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	4a08      	ldr	r2, [pc, #32]	; (800ecdc <USB_FlushTxFifo+0x64>)
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	d901      	bls.n	800ecc2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ecbe:	2303      	movs	r3, #3
 800ecc0:	e006      	b.n	800ecd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	691b      	ldr	r3, [r3, #16]
 800ecc6:	f003 0320 	and.w	r3, r3, #32
 800ecca:	2b20      	cmp	r3, #32
 800eccc:	d0f0      	beq.n	800ecb0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ecce:	2300      	movs	r3, #0
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3714      	adds	r7, #20
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr
 800ecdc:	00030d40 	.word	0x00030d40

0800ece0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ece0:	b480      	push	{r7}
 800ece2:	b085      	sub	sp, #20
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ece8:	2300      	movs	r3, #0
 800ecea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	3301      	adds	r3, #1
 800ecf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	4a11      	ldr	r2, [pc, #68]	; (800ed3c <USB_FlushRxFifo+0x5c>)
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	d901      	bls.n	800ecfe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ecfa:	2303      	movs	r3, #3
 800ecfc:	e018      	b.n	800ed30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	691b      	ldr	r3, [r3, #16]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	daf2      	bge.n	800ecec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ed06:	2300      	movs	r3, #0
 800ed08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2210      	movs	r2, #16
 800ed0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	3301      	adds	r3, #1
 800ed14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	4a08      	ldr	r2, [pc, #32]	; (800ed3c <USB_FlushRxFifo+0x5c>)
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	d901      	bls.n	800ed22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ed1e:	2303      	movs	r3, #3
 800ed20:	e006      	b.n	800ed30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	691b      	ldr	r3, [r3, #16]
 800ed26:	f003 0310 	and.w	r3, r3, #16
 800ed2a:	2b10      	cmp	r3, #16
 800ed2c:	d0f0      	beq.n	800ed10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ed2e:	2300      	movs	r3, #0
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3714      	adds	r7, #20
 800ed34:	46bd      	mov	sp, r7
 800ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3a:	4770      	bx	lr
 800ed3c:	00030d40 	.word	0x00030d40

0800ed40 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ed40:	b480      	push	{r7}
 800ed42:	b085      	sub	sp, #20
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	460b      	mov	r3, r1
 800ed4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed56:	681a      	ldr	r2, [r3, #0]
 800ed58:	78fb      	ldrb	r3, [r7, #3]
 800ed5a:	68f9      	ldr	r1, [r7, #12]
 800ed5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ed60:	4313      	orrs	r3, r2
 800ed62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ed64:	2300      	movs	r3, #0
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	3714      	adds	r7, #20
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed70:	4770      	bx	lr

0800ed72 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ed72:	b480      	push	{r7}
 800ed74:	b087      	sub	sp, #28
 800ed76:	af00      	add	r7, sp, #0
 800ed78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ed7e:	693b      	ldr	r3, [r7, #16]
 800ed80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed84:	689b      	ldr	r3, [r3, #8]
 800ed86:	f003 0306 	and.w	r3, r3, #6
 800ed8a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	2b02      	cmp	r3, #2
 800ed90:	d002      	beq.n	800ed98 <USB_GetDevSpeed+0x26>
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	2b06      	cmp	r3, #6
 800ed96:	d102      	bne.n	800ed9e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ed98:	2302      	movs	r3, #2
 800ed9a:	75fb      	strb	r3, [r7, #23]
 800ed9c:	e001      	b.n	800eda2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800ed9e:	230f      	movs	r3, #15
 800eda0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800eda2:	7dfb      	ldrb	r3, [r7, #23]
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	371c      	adds	r7, #28
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	4770      	bx	lr

0800edb0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800edb0:	b480      	push	{r7}
 800edb2:	b085      	sub	sp, #20
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	781b      	ldrb	r3, [r3, #0]
 800edc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	785b      	ldrb	r3, [r3, #1]
 800edc8:	2b01      	cmp	r3, #1
 800edca:	d13a      	bne.n	800ee42 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800edd2:	69da      	ldr	r2, [r3, #28]
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	781b      	ldrb	r3, [r3, #0]
 800edd8:	f003 030f 	and.w	r3, r3, #15
 800eddc:	2101      	movs	r1, #1
 800edde:	fa01 f303 	lsl.w	r3, r1, r3
 800ede2:	b29b      	uxth	r3, r3
 800ede4:	68f9      	ldr	r1, [r7, #12]
 800ede6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800edea:	4313      	orrs	r3, r2
 800edec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	015a      	lsls	r2, r3, #5
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	4413      	add	r3, r2
 800edf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d155      	bne.n	800eeb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	015a      	lsls	r2, r3, #5
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	4413      	add	r3, r2
 800ee0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee10:	681a      	ldr	r2, [r3, #0]
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	68db      	ldr	r3, [r3, #12]
 800ee16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	791b      	ldrb	r3, [r3, #4]
 800ee1e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ee20:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	059b      	lsls	r3, r3, #22
 800ee26:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ee28:	4313      	orrs	r3, r2
 800ee2a:	68ba      	ldr	r2, [r7, #8]
 800ee2c:	0151      	lsls	r1, r2, #5
 800ee2e:	68fa      	ldr	r2, [r7, #12]
 800ee30:	440a      	add	r2, r1
 800ee32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee3e:	6013      	str	r3, [r2, #0]
 800ee40:	e036      	b.n	800eeb0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee48:	69da      	ldr	r2, [r3, #28]
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	781b      	ldrb	r3, [r3, #0]
 800ee4e:	f003 030f 	and.w	r3, r3, #15
 800ee52:	2101      	movs	r1, #1
 800ee54:	fa01 f303 	lsl.w	r3, r1, r3
 800ee58:	041b      	lsls	r3, r3, #16
 800ee5a:	68f9      	ldr	r1, [r7, #12]
 800ee5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee60:	4313      	orrs	r3, r2
 800ee62:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	015a      	lsls	r2, r3, #5
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	4413      	add	r3, r2
 800ee6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d11a      	bne.n	800eeb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	015a      	lsls	r2, r3, #5
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	4413      	add	r3, r2
 800ee82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee86:	681a      	ldr	r2, [r3, #0]
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	68db      	ldr	r3, [r3, #12]
 800ee8c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	791b      	ldrb	r3, [r3, #4]
 800ee94:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ee96:	430b      	orrs	r3, r1
 800ee98:	4313      	orrs	r3, r2
 800ee9a:	68ba      	ldr	r2, [r7, #8]
 800ee9c:	0151      	lsls	r1, r2, #5
 800ee9e:	68fa      	ldr	r2, [r7, #12]
 800eea0:	440a      	add	r2, r1
 800eea2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eeaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eeae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800eeb0:	2300      	movs	r3, #0
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	3714      	adds	r7, #20
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr
	...

0800eec0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800eec0:	b480      	push	{r7}
 800eec2:	b085      	sub	sp, #20
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
 800eec8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	781b      	ldrb	r3, [r3, #0]
 800eed2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	785b      	ldrb	r3, [r3, #1]
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	d161      	bne.n	800efa0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	015a      	lsls	r2, r3, #5
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	4413      	add	r3, r2
 800eee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eeee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eef2:	d11f      	bne.n	800ef34 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800eef4:	68bb      	ldr	r3, [r7, #8]
 800eef6:	015a      	lsls	r2, r3, #5
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	4413      	add	r3, r2
 800eefc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	68ba      	ldr	r2, [r7, #8]
 800ef04:	0151      	lsls	r1, r2, #5
 800ef06:	68fa      	ldr	r2, [r7, #12]
 800ef08:	440a      	add	r2, r1
 800ef0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ef12:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	015a      	lsls	r2, r3, #5
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	4413      	add	r3, r2
 800ef1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	68ba      	ldr	r2, [r7, #8]
 800ef24:	0151      	lsls	r1, r2, #5
 800ef26:	68fa      	ldr	r2, [r7, #12]
 800ef28:	440a      	add	r2, r1
 800ef2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ef32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	781b      	ldrb	r3, [r3, #0]
 800ef40:	f003 030f 	and.w	r3, r3, #15
 800ef44:	2101      	movs	r1, #1
 800ef46:	fa01 f303 	lsl.w	r3, r1, r3
 800ef4a:	b29b      	uxth	r3, r3
 800ef4c:	43db      	mvns	r3, r3
 800ef4e:	68f9      	ldr	r1, [r7, #12]
 800ef50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef54:	4013      	ands	r3, r2
 800ef56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef5e:	69da      	ldr	r2, [r3, #28]
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	781b      	ldrb	r3, [r3, #0]
 800ef64:	f003 030f 	and.w	r3, r3, #15
 800ef68:	2101      	movs	r1, #1
 800ef6a:	fa01 f303 	lsl.w	r3, r1, r3
 800ef6e:	b29b      	uxth	r3, r3
 800ef70:	43db      	mvns	r3, r3
 800ef72:	68f9      	ldr	r1, [r7, #12]
 800ef74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef78:	4013      	ands	r3, r2
 800ef7a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	015a      	lsls	r2, r3, #5
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	4413      	add	r3, r2
 800ef84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef88:	681a      	ldr	r2, [r3, #0]
 800ef8a:	68bb      	ldr	r3, [r7, #8]
 800ef8c:	0159      	lsls	r1, r3, #5
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	440b      	add	r3, r1
 800ef92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef96:	4619      	mov	r1, r3
 800ef98:	4b35      	ldr	r3, [pc, #212]	; (800f070 <USB_DeactivateEndpoint+0x1b0>)
 800ef9a:	4013      	ands	r3, r2
 800ef9c:	600b      	str	r3, [r1, #0]
 800ef9e:	e060      	b.n	800f062 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	015a      	lsls	r2, r3, #5
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	4413      	add	r3, r2
 800efa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800efb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800efb6:	d11f      	bne.n	800eff8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	015a      	lsls	r2, r3, #5
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	4413      	add	r3, r2
 800efc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	68ba      	ldr	r2, [r7, #8]
 800efc8:	0151      	lsls	r1, r2, #5
 800efca:	68fa      	ldr	r2, [r7, #12]
 800efcc:	440a      	add	r2, r1
 800efce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800efd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800efd6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	015a      	lsls	r2, r3, #5
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	4413      	add	r3, r2
 800efe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	68ba      	ldr	r2, [r7, #8]
 800efe8:	0151      	lsls	r1, r2, #5
 800efea:	68fa      	ldr	r2, [r7, #12]
 800efec:	440a      	add	r2, r1
 800efee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eff2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eff6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800effe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	f003 030f 	and.w	r3, r3, #15
 800f008:	2101      	movs	r1, #1
 800f00a:	fa01 f303 	lsl.w	r3, r1, r3
 800f00e:	041b      	lsls	r3, r3, #16
 800f010:	43db      	mvns	r3, r3
 800f012:	68f9      	ldr	r1, [r7, #12]
 800f014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f018:	4013      	ands	r3, r2
 800f01a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f022:	69da      	ldr	r2, [r3, #28]
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	f003 030f 	and.w	r3, r3, #15
 800f02c:	2101      	movs	r1, #1
 800f02e:	fa01 f303 	lsl.w	r3, r1, r3
 800f032:	041b      	lsls	r3, r3, #16
 800f034:	43db      	mvns	r3, r3
 800f036:	68f9      	ldr	r1, [r7, #12]
 800f038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f03c:	4013      	ands	r3, r2
 800f03e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	015a      	lsls	r2, r3, #5
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	4413      	add	r3, r2
 800f048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f04c:	681a      	ldr	r2, [r3, #0]
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	0159      	lsls	r1, r3, #5
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	440b      	add	r3, r1
 800f056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f05a:	4619      	mov	r1, r3
 800f05c:	4b05      	ldr	r3, [pc, #20]	; (800f074 <USB_DeactivateEndpoint+0x1b4>)
 800f05e:	4013      	ands	r3, r2
 800f060:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f062:	2300      	movs	r3, #0
}
 800f064:	4618      	mov	r0, r3
 800f066:	3714      	adds	r7, #20
 800f068:	46bd      	mov	sp, r7
 800f06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06e:	4770      	bx	lr
 800f070:	ec337800 	.word	0xec337800
 800f074:	eff37800 	.word	0xeff37800

0800f078 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b086      	sub	sp, #24
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
 800f080:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	781b      	ldrb	r3, [r3, #0]
 800f08a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	785b      	ldrb	r3, [r3, #1]
 800f090:	2b01      	cmp	r3, #1
 800f092:	f040 810a 	bne.w	800f2aa <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	699b      	ldr	r3, [r3, #24]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d132      	bne.n	800f104 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f09e:	693b      	ldr	r3, [r7, #16]
 800f0a0:	015a      	lsls	r2, r3, #5
 800f0a2:	697b      	ldr	r3, [r7, #20]
 800f0a4:	4413      	add	r3, r2
 800f0a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0aa:	691b      	ldr	r3, [r3, #16]
 800f0ac:	693a      	ldr	r2, [r7, #16]
 800f0ae:	0151      	lsls	r1, r2, #5
 800f0b0:	697a      	ldr	r2, [r7, #20]
 800f0b2:	440a      	add	r2, r1
 800f0b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f0bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f0c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f0c2:	693b      	ldr	r3, [r7, #16]
 800f0c4:	015a      	lsls	r2, r3, #5
 800f0c6:	697b      	ldr	r3, [r7, #20]
 800f0c8:	4413      	add	r3, r2
 800f0ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0ce:	691b      	ldr	r3, [r3, #16]
 800f0d0:	693a      	ldr	r2, [r7, #16]
 800f0d2:	0151      	lsls	r1, r2, #5
 800f0d4:	697a      	ldr	r2, [r7, #20]
 800f0d6:	440a      	add	r2, r1
 800f0d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f0e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f0e2:	693b      	ldr	r3, [r7, #16]
 800f0e4:	015a      	lsls	r2, r3, #5
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	4413      	add	r3, r2
 800f0ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0ee:	691b      	ldr	r3, [r3, #16]
 800f0f0:	693a      	ldr	r2, [r7, #16]
 800f0f2:	0151      	lsls	r1, r2, #5
 800f0f4:	697a      	ldr	r2, [r7, #20]
 800f0f6:	440a      	add	r2, r1
 800f0f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0fc:	0cdb      	lsrs	r3, r3, #19
 800f0fe:	04db      	lsls	r3, r3, #19
 800f100:	6113      	str	r3, [r2, #16]
 800f102:	e074      	b.n	800f1ee <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f104:	693b      	ldr	r3, [r7, #16]
 800f106:	015a      	lsls	r2, r3, #5
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	4413      	add	r3, r2
 800f10c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f110:	691b      	ldr	r3, [r3, #16]
 800f112:	693a      	ldr	r2, [r7, #16]
 800f114:	0151      	lsls	r1, r2, #5
 800f116:	697a      	ldr	r2, [r7, #20]
 800f118:	440a      	add	r2, r1
 800f11a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f11e:	0cdb      	lsrs	r3, r3, #19
 800f120:	04db      	lsls	r3, r3, #19
 800f122:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f124:	693b      	ldr	r3, [r7, #16]
 800f126:	015a      	lsls	r2, r3, #5
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	4413      	add	r3, r2
 800f12c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f130:	691b      	ldr	r3, [r3, #16]
 800f132:	693a      	ldr	r2, [r7, #16]
 800f134:	0151      	lsls	r1, r2, #5
 800f136:	697a      	ldr	r2, [r7, #20]
 800f138:	440a      	add	r2, r1
 800f13a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f13e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f142:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f146:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f148:	693b      	ldr	r3, [r7, #16]
 800f14a:	015a      	lsls	r2, r3, #5
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	4413      	add	r3, r2
 800f150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f154:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	6999      	ldr	r1, [r3, #24]
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	68db      	ldr	r3, [r3, #12]
 800f15e:	440b      	add	r3, r1
 800f160:	1e59      	subs	r1, r3, #1
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	68db      	ldr	r3, [r3, #12]
 800f166:	fbb1 f3f3 	udiv	r3, r1, r3
 800f16a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f16c:	4b9e      	ldr	r3, [pc, #632]	; (800f3e8 <USB_EPStartXfer+0x370>)
 800f16e:	400b      	ands	r3, r1
 800f170:	6939      	ldr	r1, [r7, #16]
 800f172:	0148      	lsls	r0, r1, #5
 800f174:	6979      	ldr	r1, [r7, #20]
 800f176:	4401      	add	r1, r0
 800f178:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f17c:	4313      	orrs	r3, r2
 800f17e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f180:	693b      	ldr	r3, [r7, #16]
 800f182:	015a      	lsls	r2, r3, #5
 800f184:	697b      	ldr	r3, [r7, #20]
 800f186:	4413      	add	r3, r2
 800f188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f18c:	691a      	ldr	r2, [r3, #16]
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	699b      	ldr	r3, [r3, #24]
 800f192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f196:	6939      	ldr	r1, [r7, #16]
 800f198:	0148      	lsls	r0, r1, #5
 800f19a:	6979      	ldr	r1, [r7, #20]
 800f19c:	4401      	add	r1, r0
 800f19e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f1a2:	4313      	orrs	r3, r2
 800f1a4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	791b      	ldrb	r3, [r3, #4]
 800f1aa:	2b01      	cmp	r3, #1
 800f1ac:	d11f      	bne.n	800f1ee <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f1ae:	693b      	ldr	r3, [r7, #16]
 800f1b0:	015a      	lsls	r2, r3, #5
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	4413      	add	r3, r2
 800f1b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1ba:	691b      	ldr	r3, [r3, #16]
 800f1bc:	693a      	ldr	r2, [r7, #16]
 800f1be:	0151      	lsls	r1, r2, #5
 800f1c0:	697a      	ldr	r2, [r7, #20]
 800f1c2:	440a      	add	r2, r1
 800f1c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f1cc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f1ce:	693b      	ldr	r3, [r7, #16]
 800f1d0:	015a      	lsls	r2, r3, #5
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	4413      	add	r3, r2
 800f1d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1da:	691b      	ldr	r3, [r3, #16]
 800f1dc:	693a      	ldr	r2, [r7, #16]
 800f1de:	0151      	lsls	r1, r2, #5
 800f1e0:	697a      	ldr	r2, [r7, #20]
 800f1e2:	440a      	add	r2, r1
 800f1e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f1ec:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f1ee:	693b      	ldr	r3, [r7, #16]
 800f1f0:	015a      	lsls	r2, r3, #5
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	4413      	add	r3, r2
 800f1f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	693a      	ldr	r2, [r7, #16]
 800f1fe:	0151      	lsls	r1, r2, #5
 800f200:	697a      	ldr	r2, [r7, #20]
 800f202:	440a      	add	r2, r1
 800f204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f208:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f20c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	791b      	ldrb	r3, [r3, #4]
 800f212:	2b01      	cmp	r3, #1
 800f214:	d015      	beq.n	800f242 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	699b      	ldr	r3, [r3, #24]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	f000 8106 	beq.w	800f42c <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	781b      	ldrb	r3, [r3, #0]
 800f22c:	f003 030f 	and.w	r3, r3, #15
 800f230:	2101      	movs	r1, #1
 800f232:	fa01 f303 	lsl.w	r3, r1, r3
 800f236:	6979      	ldr	r1, [r7, #20]
 800f238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f23c:	4313      	orrs	r3, r2
 800f23e:	634b      	str	r3, [r1, #52]	; 0x34
 800f240:	e0f4      	b.n	800f42c <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f248:	689b      	ldr	r3, [r3, #8]
 800f24a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d110      	bne.n	800f274 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f252:	693b      	ldr	r3, [r7, #16]
 800f254:	015a      	lsls	r2, r3, #5
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	4413      	add	r3, r2
 800f25a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	693a      	ldr	r2, [r7, #16]
 800f262:	0151      	lsls	r1, r2, #5
 800f264:	697a      	ldr	r2, [r7, #20]
 800f266:	440a      	add	r2, r1
 800f268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f26c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f270:	6013      	str	r3, [r2, #0]
 800f272:	e00f      	b.n	800f294 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f274:	693b      	ldr	r3, [r7, #16]
 800f276:	015a      	lsls	r2, r3, #5
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	4413      	add	r3, r2
 800f27c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	693a      	ldr	r2, [r7, #16]
 800f284:	0151      	lsls	r1, r2, #5
 800f286:	697a      	ldr	r2, [r7, #20]
 800f288:	440a      	add	r2, r1
 800f28a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f28e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f292:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	6919      	ldr	r1, [r3, #16]
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	781a      	ldrb	r2, [r3, #0]
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	699b      	ldr	r3, [r3, #24]
 800f2a0:	b29b      	uxth	r3, r3
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f000 fa94 	bl	800f7d0 <USB_WritePacket>
 800f2a8:	e0c0      	b.n	800f42c <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f2aa:	693b      	ldr	r3, [r7, #16]
 800f2ac:	015a      	lsls	r2, r3, #5
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	4413      	add	r3, r2
 800f2b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2b6:	691b      	ldr	r3, [r3, #16]
 800f2b8:	693a      	ldr	r2, [r7, #16]
 800f2ba:	0151      	lsls	r1, r2, #5
 800f2bc:	697a      	ldr	r2, [r7, #20]
 800f2be:	440a      	add	r2, r1
 800f2c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f2c4:	0cdb      	lsrs	r3, r3, #19
 800f2c6:	04db      	lsls	r3, r3, #19
 800f2c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f2ca:	693b      	ldr	r3, [r7, #16]
 800f2cc:	015a      	lsls	r2, r3, #5
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	4413      	add	r3, r2
 800f2d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2d6:	691b      	ldr	r3, [r3, #16]
 800f2d8:	693a      	ldr	r2, [r7, #16]
 800f2da:	0151      	lsls	r1, r2, #5
 800f2dc:	697a      	ldr	r2, [r7, #20]
 800f2de:	440a      	add	r2, r1
 800f2e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f2e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f2e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f2ec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	699b      	ldr	r3, [r3, #24]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d123      	bne.n	800f33e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f2f6:	693b      	ldr	r3, [r7, #16]
 800f2f8:	015a      	lsls	r2, r3, #5
 800f2fa:	697b      	ldr	r3, [r7, #20]
 800f2fc:	4413      	add	r3, r2
 800f2fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f302:	691a      	ldr	r2, [r3, #16]
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	68db      	ldr	r3, [r3, #12]
 800f308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f30c:	6939      	ldr	r1, [r7, #16]
 800f30e:	0148      	lsls	r0, r1, #5
 800f310:	6979      	ldr	r1, [r7, #20]
 800f312:	4401      	add	r1, r0
 800f314:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f318:	4313      	orrs	r3, r2
 800f31a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f31c:	693b      	ldr	r3, [r7, #16]
 800f31e:	015a      	lsls	r2, r3, #5
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	4413      	add	r3, r2
 800f324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f328:	691b      	ldr	r3, [r3, #16]
 800f32a:	693a      	ldr	r2, [r7, #16]
 800f32c:	0151      	lsls	r1, r2, #5
 800f32e:	697a      	ldr	r2, [r7, #20]
 800f330:	440a      	add	r2, r1
 800f332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f336:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f33a:	6113      	str	r3, [r2, #16]
 800f33c:	e037      	b.n	800f3ae <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	699a      	ldr	r2, [r3, #24]
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	68db      	ldr	r3, [r3, #12]
 800f346:	4413      	add	r3, r2
 800f348:	1e5a      	subs	r2, r3, #1
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	68db      	ldr	r3, [r3, #12]
 800f34e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f352:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	68db      	ldr	r3, [r3, #12]
 800f358:	89fa      	ldrh	r2, [r7, #14]
 800f35a:	fb03 f202 	mul.w	r2, r3, r2
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f362:	693b      	ldr	r3, [r7, #16]
 800f364:	015a      	lsls	r2, r3, #5
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	4413      	add	r3, r2
 800f36a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f36e:	691a      	ldr	r2, [r3, #16]
 800f370:	89fb      	ldrh	r3, [r7, #14]
 800f372:	04d9      	lsls	r1, r3, #19
 800f374:	4b1c      	ldr	r3, [pc, #112]	; (800f3e8 <USB_EPStartXfer+0x370>)
 800f376:	400b      	ands	r3, r1
 800f378:	6939      	ldr	r1, [r7, #16]
 800f37a:	0148      	lsls	r0, r1, #5
 800f37c:	6979      	ldr	r1, [r7, #20]
 800f37e:	4401      	add	r1, r0
 800f380:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f384:	4313      	orrs	r3, r2
 800f386:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800f388:	693b      	ldr	r3, [r7, #16]
 800f38a:	015a      	lsls	r2, r3, #5
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	4413      	add	r3, r2
 800f390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f394:	691a      	ldr	r2, [r3, #16]
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	69db      	ldr	r3, [r3, #28]
 800f39a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f39e:	6939      	ldr	r1, [r7, #16]
 800f3a0:	0148      	lsls	r0, r1, #5
 800f3a2:	6979      	ldr	r1, [r7, #20]
 800f3a4:	4401      	add	r1, r0
 800f3a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f3aa:	4313      	orrs	r3, r2
 800f3ac:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	791b      	ldrb	r3, [r3, #4]
 800f3b2:	2b01      	cmp	r3, #1
 800f3b4:	d12a      	bne.n	800f40c <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3bc:	689b      	ldr	r3, [r3, #8]
 800f3be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d112      	bne.n	800f3ec <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f3c6:	693b      	ldr	r3, [r7, #16]
 800f3c8:	015a      	lsls	r2, r3, #5
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	4413      	add	r3, r2
 800f3ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	693a      	ldr	r2, [r7, #16]
 800f3d6:	0151      	lsls	r1, r2, #5
 800f3d8:	697a      	ldr	r2, [r7, #20]
 800f3da:	440a      	add	r2, r1
 800f3dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f3e4:	6013      	str	r3, [r2, #0]
 800f3e6:	e011      	b.n	800f40c <USB_EPStartXfer+0x394>
 800f3e8:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f3ec:	693b      	ldr	r3, [r7, #16]
 800f3ee:	015a      	lsls	r2, r3, #5
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	4413      	add	r3, r2
 800f3f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	693a      	ldr	r2, [r7, #16]
 800f3fc:	0151      	lsls	r1, r2, #5
 800f3fe:	697a      	ldr	r2, [r7, #20]
 800f400:	440a      	add	r2, r1
 800f402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f40a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f40c:	693b      	ldr	r3, [r7, #16]
 800f40e:	015a      	lsls	r2, r3, #5
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	4413      	add	r3, r2
 800f414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	693a      	ldr	r2, [r7, #16]
 800f41c:	0151      	lsls	r1, r2, #5
 800f41e:	697a      	ldr	r2, [r7, #20]
 800f420:	440a      	add	r2, r1
 800f422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f426:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f42a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f42c:	2300      	movs	r3, #0
}
 800f42e:	4618      	mov	r0, r3
 800f430:	3718      	adds	r7, #24
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}
 800f436:	bf00      	nop

0800f438 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f438:	b480      	push	{r7}
 800f43a:	b085      	sub	sp, #20
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	781b      	ldrb	r3, [r3, #0]
 800f44a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	785b      	ldrb	r3, [r3, #1]
 800f450:	2b01      	cmp	r3, #1
 800f452:	f040 80ab 	bne.w	800f5ac <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	699b      	ldr	r3, [r3, #24]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d132      	bne.n	800f4c4 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	015a      	lsls	r2, r3, #5
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	4413      	add	r3, r2
 800f466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f46a:	691b      	ldr	r3, [r3, #16]
 800f46c:	68ba      	ldr	r2, [r7, #8]
 800f46e:	0151      	lsls	r1, r2, #5
 800f470:	68fa      	ldr	r2, [r7, #12]
 800f472:	440a      	add	r2, r1
 800f474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f478:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f47c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f480:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	015a      	lsls	r2, r3, #5
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	4413      	add	r3, r2
 800f48a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f48e:	691b      	ldr	r3, [r3, #16]
 800f490:	68ba      	ldr	r2, [r7, #8]
 800f492:	0151      	lsls	r1, r2, #5
 800f494:	68fa      	ldr	r2, [r7, #12]
 800f496:	440a      	add	r2, r1
 800f498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f49c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f4a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	015a      	lsls	r2, r3, #5
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	4413      	add	r3, r2
 800f4aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4ae:	691b      	ldr	r3, [r3, #16]
 800f4b0:	68ba      	ldr	r2, [r7, #8]
 800f4b2:	0151      	lsls	r1, r2, #5
 800f4b4:	68fa      	ldr	r2, [r7, #12]
 800f4b6:	440a      	add	r2, r1
 800f4b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4bc:	0cdb      	lsrs	r3, r3, #19
 800f4be:	04db      	lsls	r3, r3, #19
 800f4c0:	6113      	str	r3, [r2, #16]
 800f4c2:	e04e      	b.n	800f562 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	015a      	lsls	r2, r3, #5
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	4413      	add	r3, r2
 800f4cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4d0:	691b      	ldr	r3, [r3, #16]
 800f4d2:	68ba      	ldr	r2, [r7, #8]
 800f4d4:	0151      	lsls	r1, r2, #5
 800f4d6:	68fa      	ldr	r2, [r7, #12]
 800f4d8:	440a      	add	r2, r1
 800f4da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4de:	0cdb      	lsrs	r3, r3, #19
 800f4e0:	04db      	lsls	r3, r3, #19
 800f4e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	015a      	lsls	r2, r3, #5
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	4413      	add	r3, r2
 800f4ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4f0:	691b      	ldr	r3, [r3, #16]
 800f4f2:	68ba      	ldr	r2, [r7, #8]
 800f4f4:	0151      	lsls	r1, r2, #5
 800f4f6:	68fa      	ldr	r2, [r7, #12]
 800f4f8:	440a      	add	r2, r1
 800f4fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f502:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f506:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	699a      	ldr	r2, [r3, #24]
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	68db      	ldr	r3, [r3, #12]
 800f510:	429a      	cmp	r2, r3
 800f512:	d903      	bls.n	800f51c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	68da      	ldr	r2, [r3, #12]
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	015a      	lsls	r2, r3, #5
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	4413      	add	r3, r2
 800f524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f528:	691b      	ldr	r3, [r3, #16]
 800f52a:	68ba      	ldr	r2, [r7, #8]
 800f52c:	0151      	lsls	r1, r2, #5
 800f52e:	68fa      	ldr	r2, [r7, #12]
 800f530:	440a      	add	r2, r1
 800f532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f536:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f53a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	015a      	lsls	r2, r3, #5
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	4413      	add	r3, r2
 800f544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f548:	691a      	ldr	r2, [r3, #16]
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	699b      	ldr	r3, [r3, #24]
 800f54e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f552:	68b9      	ldr	r1, [r7, #8]
 800f554:	0148      	lsls	r0, r1, #5
 800f556:	68f9      	ldr	r1, [r7, #12]
 800f558:	4401      	add	r1, r0
 800f55a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f55e:	4313      	orrs	r3, r2
 800f560:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	015a      	lsls	r2, r3, #5
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	4413      	add	r3, r2
 800f56a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	68ba      	ldr	r2, [r7, #8]
 800f572:	0151      	lsls	r1, r2, #5
 800f574:	68fa      	ldr	r2, [r7, #12]
 800f576:	440a      	add	r2, r1
 800f578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f57c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f580:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	699b      	ldr	r3, [r3, #24]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d071      	beq.n	800f66e <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	781b      	ldrb	r3, [r3, #0]
 800f596:	f003 030f 	and.w	r3, r3, #15
 800f59a:	2101      	movs	r1, #1
 800f59c:	fa01 f303 	lsl.w	r3, r1, r3
 800f5a0:	68f9      	ldr	r1, [r7, #12]
 800f5a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f5a6:	4313      	orrs	r3, r2
 800f5a8:	634b      	str	r3, [r1, #52]	; 0x34
 800f5aa:	e060      	b.n	800f66e <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	015a      	lsls	r2, r3, #5
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	4413      	add	r3, r2
 800f5b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5b8:	691b      	ldr	r3, [r3, #16]
 800f5ba:	68ba      	ldr	r2, [r7, #8]
 800f5bc:	0151      	lsls	r1, r2, #5
 800f5be:	68fa      	ldr	r2, [r7, #12]
 800f5c0:	440a      	add	r2, r1
 800f5c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f5c6:	0cdb      	lsrs	r3, r3, #19
 800f5c8:	04db      	lsls	r3, r3, #19
 800f5ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	015a      	lsls	r2, r3, #5
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	4413      	add	r3, r2
 800f5d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5d8:	691b      	ldr	r3, [r3, #16]
 800f5da:	68ba      	ldr	r2, [r7, #8]
 800f5dc:	0151      	lsls	r1, r2, #5
 800f5de:	68fa      	ldr	r2, [r7, #12]
 800f5e0:	440a      	add	r2, r1
 800f5e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f5e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f5ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f5ee:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	699b      	ldr	r3, [r3, #24]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d003      	beq.n	800f600 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	68da      	ldr	r2, [r3, #12]
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	68da      	ldr	r2, [r3, #12]
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	015a      	lsls	r2, r3, #5
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	4413      	add	r3, r2
 800f610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f614:	691b      	ldr	r3, [r3, #16]
 800f616:	68ba      	ldr	r2, [r7, #8]
 800f618:	0151      	lsls	r1, r2, #5
 800f61a:	68fa      	ldr	r2, [r7, #12]
 800f61c:	440a      	add	r2, r1
 800f61e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f622:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f626:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	015a      	lsls	r2, r3, #5
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	4413      	add	r3, r2
 800f630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f634:	691a      	ldr	r2, [r3, #16]
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	69db      	ldr	r3, [r3, #28]
 800f63a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f63e:	68b9      	ldr	r1, [r7, #8]
 800f640:	0148      	lsls	r0, r1, #5
 800f642:	68f9      	ldr	r1, [r7, #12]
 800f644:	4401      	add	r1, r0
 800f646:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f64a:	4313      	orrs	r3, r2
 800f64c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	015a      	lsls	r2, r3, #5
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	4413      	add	r3, r2
 800f656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	68ba      	ldr	r2, [r7, #8]
 800f65e:	0151      	lsls	r1, r2, #5
 800f660:	68fa      	ldr	r2, [r7, #12]
 800f662:	440a      	add	r2, r1
 800f664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f668:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f66c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f66e:	2300      	movs	r3, #0
}
 800f670:	4618      	mov	r0, r3
 800f672:	3714      	adds	r7, #20
 800f674:	46bd      	mov	sp, r7
 800f676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67a:	4770      	bx	lr

0800f67c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f67c:	b480      	push	{r7}
 800f67e:	b087      	sub	sp, #28
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
 800f684:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f686:	2300      	movs	r3, #0
 800f688:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800f68a:	2300      	movs	r3, #0
 800f68c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	785b      	ldrb	r3, [r3, #1]
 800f696:	2b01      	cmp	r3, #1
 800f698:	d14a      	bne.n	800f730 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	781b      	ldrb	r3, [r3, #0]
 800f69e:	015a      	lsls	r2, r3, #5
 800f6a0:	693b      	ldr	r3, [r7, #16]
 800f6a2:	4413      	add	r3, r2
 800f6a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f6ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f6b2:	f040 8086 	bne.w	800f7c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	015a      	lsls	r2, r3, #5
 800f6bc:	693b      	ldr	r3, [r7, #16]
 800f6be:	4413      	add	r3, r2
 800f6c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	683a      	ldr	r2, [r7, #0]
 800f6c8:	7812      	ldrb	r2, [r2, #0]
 800f6ca:	0151      	lsls	r1, r2, #5
 800f6cc:	693a      	ldr	r2, [r7, #16]
 800f6ce:	440a      	add	r2, r1
 800f6d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f6d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	781b      	ldrb	r3, [r3, #0]
 800f6de:	015a      	lsls	r2, r3, #5
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	4413      	add	r3, r2
 800f6e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	683a      	ldr	r2, [r7, #0]
 800f6ec:	7812      	ldrb	r2, [r2, #0]
 800f6ee:	0151      	lsls	r1, r2, #5
 800f6f0:	693a      	ldr	r2, [r7, #16]
 800f6f2:	440a      	add	r2, r1
 800f6f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f6fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	3301      	adds	r3, #1
 800f702:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f242 7210 	movw	r2, #10000	; 0x2710
 800f70a:	4293      	cmp	r3, r2
 800f70c:	d902      	bls.n	800f714 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800f70e:	2301      	movs	r3, #1
 800f710:	75fb      	strb	r3, [r7, #23]
          break;
 800f712:	e056      	b.n	800f7c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	781b      	ldrb	r3, [r3, #0]
 800f718:	015a      	lsls	r2, r3, #5
 800f71a:	693b      	ldr	r3, [r7, #16]
 800f71c:	4413      	add	r3, r2
 800f71e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f728:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f72c:	d0e7      	beq.n	800f6fe <USB_EPStopXfer+0x82>
 800f72e:	e048      	b.n	800f7c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	781b      	ldrb	r3, [r3, #0]
 800f734:	015a      	lsls	r2, r3, #5
 800f736:	693b      	ldr	r3, [r7, #16]
 800f738:	4413      	add	r3, r2
 800f73a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f748:	d13b      	bne.n	800f7c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	015a      	lsls	r2, r3, #5
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	4413      	add	r3, r2
 800f754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	683a      	ldr	r2, [r7, #0]
 800f75c:	7812      	ldrb	r2, [r2, #0]
 800f75e:	0151      	lsls	r1, r2, #5
 800f760:	693a      	ldr	r2, [r7, #16]
 800f762:	440a      	add	r2, r1
 800f764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f768:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f76c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	781b      	ldrb	r3, [r3, #0]
 800f772:	015a      	lsls	r2, r3, #5
 800f774:	693b      	ldr	r3, [r7, #16]
 800f776:	4413      	add	r3, r2
 800f778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	683a      	ldr	r2, [r7, #0]
 800f780:	7812      	ldrb	r2, [r2, #0]
 800f782:	0151      	lsls	r1, r2, #5
 800f784:	693a      	ldr	r2, [r7, #16]
 800f786:	440a      	add	r2, r1
 800f788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f78c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f790:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	3301      	adds	r3, #1
 800f796:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	f242 7210 	movw	r2, #10000	; 0x2710
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	d902      	bls.n	800f7a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	75fb      	strb	r3, [r7, #23]
          break;
 800f7a6:	e00c      	b.n	800f7c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	781b      	ldrb	r3, [r3, #0]
 800f7ac:	015a      	lsls	r2, r3, #5
 800f7ae:	693b      	ldr	r3, [r7, #16]
 800f7b0:	4413      	add	r3, r2
 800f7b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f7bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f7c0:	d0e7      	beq.n	800f792 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800f7c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	371c      	adds	r7, #28
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ce:	4770      	bx	lr

0800f7d0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800f7d0:	b480      	push	{r7}
 800f7d2:	b089      	sub	sp, #36	; 0x24
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	60f8      	str	r0, [r7, #12]
 800f7d8:	60b9      	str	r1, [r7, #8]
 800f7da:	4611      	mov	r1, r2
 800f7dc:	461a      	mov	r2, r3
 800f7de:	460b      	mov	r3, r1
 800f7e0:	71fb      	strb	r3, [r7, #7]
 800f7e2:	4613      	mov	r3, r2
 800f7e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800f7ee:	88bb      	ldrh	r3, [r7, #4]
 800f7f0:	3303      	adds	r3, #3
 800f7f2:	089b      	lsrs	r3, r3, #2
 800f7f4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	61bb      	str	r3, [r7, #24]
 800f7fa:	e018      	b.n	800f82e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f7fc:	79fb      	ldrb	r3, [r7, #7]
 800f7fe:	031a      	lsls	r2, r3, #12
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	4413      	add	r3, r2
 800f804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f808:	461a      	mov	r2, r3
 800f80a:	69fb      	ldr	r3, [r7, #28]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	6013      	str	r3, [r2, #0]
    pSrc++;
 800f810:	69fb      	ldr	r3, [r7, #28]
 800f812:	3301      	adds	r3, #1
 800f814:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800f816:	69fb      	ldr	r3, [r7, #28]
 800f818:	3301      	adds	r3, #1
 800f81a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800f81c:	69fb      	ldr	r3, [r7, #28]
 800f81e:	3301      	adds	r3, #1
 800f820:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800f822:	69fb      	ldr	r3, [r7, #28]
 800f824:	3301      	adds	r3, #1
 800f826:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800f828:	69bb      	ldr	r3, [r7, #24]
 800f82a:	3301      	adds	r3, #1
 800f82c:	61bb      	str	r3, [r7, #24]
 800f82e:	69ba      	ldr	r2, [r7, #24]
 800f830:	693b      	ldr	r3, [r7, #16]
 800f832:	429a      	cmp	r2, r3
 800f834:	d3e2      	bcc.n	800f7fc <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800f836:	2300      	movs	r3, #0
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3724      	adds	r7, #36	; 0x24
 800f83c:	46bd      	mov	sp, r7
 800f83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f842:	4770      	bx	lr

0800f844 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f844:	b480      	push	{r7}
 800f846:	b08b      	sub	sp, #44	; 0x2c
 800f848:	af00      	add	r7, sp, #0
 800f84a:	60f8      	str	r0, [r7, #12]
 800f84c:	60b9      	str	r1, [r7, #8]
 800f84e:	4613      	mov	r3, r2
 800f850:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f85a:	88fb      	ldrh	r3, [r7, #6]
 800f85c:	089b      	lsrs	r3, r3, #2
 800f85e:	b29b      	uxth	r3, r3
 800f860:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f862:	88fb      	ldrh	r3, [r7, #6]
 800f864:	f003 0303 	and.w	r3, r3, #3
 800f868:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f86a:	2300      	movs	r3, #0
 800f86c:	623b      	str	r3, [r7, #32]
 800f86e:	e014      	b.n	800f89a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f870:	69bb      	ldr	r3, [r7, #24]
 800f872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f876:	681a      	ldr	r2, [r3, #0]
 800f878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f87a:	601a      	str	r2, [r3, #0]
    pDest++;
 800f87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f87e:	3301      	adds	r3, #1
 800f880:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f884:	3301      	adds	r3, #1
 800f886:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88a:	3301      	adds	r3, #1
 800f88c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f890:	3301      	adds	r3, #1
 800f892:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800f894:	6a3b      	ldr	r3, [r7, #32]
 800f896:	3301      	adds	r3, #1
 800f898:	623b      	str	r3, [r7, #32]
 800f89a:	6a3a      	ldr	r2, [r7, #32]
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	429a      	cmp	r2, r3
 800f8a0:	d3e6      	bcc.n	800f870 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f8a2:	8bfb      	ldrh	r3, [r7, #30]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d01e      	beq.n	800f8e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f8ac:	69bb      	ldr	r3, [r7, #24]
 800f8ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8b2:	461a      	mov	r2, r3
 800f8b4:	f107 0310 	add.w	r3, r7, #16
 800f8b8:	6812      	ldr	r2, [r2, #0]
 800f8ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f8bc:	693a      	ldr	r2, [r7, #16]
 800f8be:	6a3b      	ldr	r3, [r7, #32]
 800f8c0:	b2db      	uxtb	r3, r3
 800f8c2:	00db      	lsls	r3, r3, #3
 800f8c4:	fa22 f303 	lsr.w	r3, r2, r3
 800f8c8:	b2da      	uxtb	r2, r3
 800f8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8cc:	701a      	strb	r2, [r3, #0]
      i++;
 800f8ce:	6a3b      	ldr	r3, [r7, #32]
 800f8d0:	3301      	adds	r3, #1
 800f8d2:	623b      	str	r3, [r7, #32]
      pDest++;
 800f8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8d6:	3301      	adds	r3, #1
 800f8d8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800f8da:	8bfb      	ldrh	r3, [r7, #30]
 800f8dc:	3b01      	subs	r3, #1
 800f8de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f8e0:	8bfb      	ldrh	r3, [r7, #30]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d1ea      	bne.n	800f8bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	372c      	adds	r7, #44	; 0x2c
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f2:	4770      	bx	lr

0800f8f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b085      	sub	sp, #20
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
 800f8fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	781b      	ldrb	r3, [r3, #0]
 800f906:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	785b      	ldrb	r3, [r3, #1]
 800f90c:	2b01      	cmp	r3, #1
 800f90e:	d12c      	bne.n	800f96a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	015a      	lsls	r2, r3, #5
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	4413      	add	r3, r2
 800f918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	db12      	blt.n	800f948 <USB_EPSetStall+0x54>
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d00f      	beq.n	800f948 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f928:	68bb      	ldr	r3, [r7, #8]
 800f92a:	015a      	lsls	r2, r3, #5
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	4413      	add	r3, r2
 800f930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	68ba      	ldr	r2, [r7, #8]
 800f938:	0151      	lsls	r1, r2, #5
 800f93a:	68fa      	ldr	r2, [r7, #12]
 800f93c:	440a      	add	r2, r1
 800f93e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f942:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f946:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	015a      	lsls	r2, r3, #5
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	4413      	add	r3, r2
 800f950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	68ba      	ldr	r2, [r7, #8]
 800f958:	0151      	lsls	r1, r2, #5
 800f95a:	68fa      	ldr	r2, [r7, #12]
 800f95c:	440a      	add	r2, r1
 800f95e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f962:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f966:	6013      	str	r3, [r2, #0]
 800f968:	e02b      	b.n	800f9c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f96a:	68bb      	ldr	r3, [r7, #8]
 800f96c:	015a      	lsls	r2, r3, #5
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	4413      	add	r3, r2
 800f972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	db12      	blt.n	800f9a2 <USB_EPSetStall+0xae>
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d00f      	beq.n	800f9a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	015a      	lsls	r2, r3, #5
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	4413      	add	r3, r2
 800f98a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	68ba      	ldr	r2, [r7, #8]
 800f992:	0151      	lsls	r1, r2, #5
 800f994:	68fa      	ldr	r2, [r7, #12]
 800f996:	440a      	add	r2, r1
 800f998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f99c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f9a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f9a2:	68bb      	ldr	r3, [r7, #8]
 800f9a4:	015a      	lsls	r2, r3, #5
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	4413      	add	r3, r2
 800f9aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	68ba      	ldr	r2, [r7, #8]
 800f9b2:	0151      	lsls	r1, r2, #5
 800f9b4:	68fa      	ldr	r2, [r7, #12]
 800f9b6:	440a      	add	r2, r1
 800f9b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f9bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f9c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f9c2:	2300      	movs	r3, #0
}
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	3714      	adds	r7, #20
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ce:	4770      	bx	lr

0800f9d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f9d0:	b480      	push	{r7}
 800f9d2:	b085      	sub	sp, #20
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
 800f9d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	785b      	ldrb	r3, [r3, #1]
 800f9e8:	2b01      	cmp	r3, #1
 800f9ea:	d128      	bne.n	800fa3e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	015a      	lsls	r2, r3, #5
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	4413      	add	r3, r2
 800f9f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	68ba      	ldr	r2, [r7, #8]
 800f9fc:	0151      	lsls	r1, r2, #5
 800f9fe:	68fa      	ldr	r2, [r7, #12]
 800fa00:	440a      	add	r2, r1
 800fa02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fa0a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	791b      	ldrb	r3, [r3, #4]
 800fa10:	2b03      	cmp	r3, #3
 800fa12:	d003      	beq.n	800fa1c <USB_EPClearStall+0x4c>
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	791b      	ldrb	r3, [r3, #4]
 800fa18:	2b02      	cmp	r3, #2
 800fa1a:	d138      	bne.n	800fa8e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	015a      	lsls	r2, r3, #5
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	4413      	add	r3, r2
 800fa24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	68ba      	ldr	r2, [r7, #8]
 800fa2c:	0151      	lsls	r1, r2, #5
 800fa2e:	68fa      	ldr	r2, [r7, #12]
 800fa30:	440a      	add	r2, r1
 800fa32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fa3a:	6013      	str	r3, [r2, #0]
 800fa3c:	e027      	b.n	800fa8e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	015a      	lsls	r2, r3, #5
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	4413      	add	r3, r2
 800fa46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	68ba      	ldr	r2, [r7, #8]
 800fa4e:	0151      	lsls	r1, r2, #5
 800fa50:	68fa      	ldr	r2, [r7, #12]
 800fa52:	440a      	add	r2, r1
 800fa54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fa5c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	791b      	ldrb	r3, [r3, #4]
 800fa62:	2b03      	cmp	r3, #3
 800fa64:	d003      	beq.n	800fa6e <USB_EPClearStall+0x9e>
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	791b      	ldrb	r3, [r3, #4]
 800fa6a:	2b02      	cmp	r3, #2
 800fa6c:	d10f      	bne.n	800fa8e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	015a      	lsls	r2, r3, #5
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	4413      	add	r3, r2
 800fa76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	68ba      	ldr	r2, [r7, #8]
 800fa7e:	0151      	lsls	r1, r2, #5
 800fa80:	68fa      	ldr	r2, [r7, #12]
 800fa82:	440a      	add	r2, r1
 800fa84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fa8c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800fa8e:	2300      	movs	r3, #0
}
 800fa90:	4618      	mov	r0, r3
 800fa92:	3714      	adds	r7, #20
 800fa94:	46bd      	mov	sp, r7
 800fa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9a:	4770      	bx	lr

0800fa9c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	b085      	sub	sp, #20
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	460b      	mov	r3, r1
 800faa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	68fa      	ldr	r2, [r7, #12]
 800fab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800faba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800fabe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fac6:	681a      	ldr	r2, [r3, #0]
 800fac8:	78fb      	ldrb	r3, [r7, #3]
 800faca:	011b      	lsls	r3, r3, #4
 800facc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800fad0:	68f9      	ldr	r1, [r7, #12]
 800fad2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fad6:	4313      	orrs	r3, r2
 800fad8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800fada:	2300      	movs	r3, #0
}
 800fadc:	4618      	mov	r0, r3
 800fade:	3714      	adds	r7, #20
 800fae0:	46bd      	mov	sp, r7
 800fae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae6:	4770      	bx	lr

0800fae8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fae8:	b480      	push	{r7}
 800faea:	b085      	sub	sp, #20
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	68fa      	ldr	r2, [r7, #12]
 800fafe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fb02:	f023 0303 	bic.w	r3, r3, #3
 800fb06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb0e:	685b      	ldr	r3, [r3, #4]
 800fb10:	68fa      	ldr	r2, [r7, #12]
 800fb12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fb16:	f023 0302 	bic.w	r3, r3, #2
 800fb1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fb1c:	2300      	movs	r3, #0
}
 800fb1e:	4618      	mov	r0, r3
 800fb20:	3714      	adds	r7, #20
 800fb22:	46bd      	mov	sp, r7
 800fb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb28:	4770      	bx	lr

0800fb2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fb2a:	b480      	push	{r7}
 800fb2c:	b085      	sub	sp, #20
 800fb2e:	af00      	add	r7, sp, #0
 800fb30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	68fa      	ldr	r2, [r7, #12]
 800fb40:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fb44:	f023 0303 	bic.w	r3, r3, #3
 800fb48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb50:	685b      	ldr	r3, [r3, #4]
 800fb52:	68fa      	ldr	r2, [r7, #12]
 800fb54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fb58:	f043 0302 	orr.w	r3, r3, #2
 800fb5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fb5e:	2300      	movs	r3, #0
}
 800fb60:	4618      	mov	r0, r3
 800fb62:	3714      	adds	r7, #20
 800fb64:	46bd      	mov	sp, r7
 800fb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6a:	4770      	bx	lr

0800fb6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800fb6c:	b480      	push	{r7}
 800fb6e:	b085      	sub	sp, #20
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	695b      	ldr	r3, [r3, #20]
 800fb78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	699b      	ldr	r3, [r3, #24]
 800fb7e:	68fa      	ldr	r2, [r7, #12]
 800fb80:	4013      	ands	r3, r2
 800fb82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800fb84:	68fb      	ldr	r3, [r7, #12]
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3714      	adds	r7, #20
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb90:	4770      	bx	lr

0800fb92 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fb92:	b480      	push	{r7}
 800fb94:	b085      	sub	sp, #20
 800fb96:	af00      	add	r7, sp, #0
 800fb98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fba4:	699b      	ldr	r3, [r3, #24]
 800fba6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbae:	69db      	ldr	r3, [r3, #28]
 800fbb0:	68ba      	ldr	r2, [r7, #8]
 800fbb2:	4013      	ands	r3, r2
 800fbb4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800fbb6:	68bb      	ldr	r3, [r7, #8]
 800fbb8:	0c1b      	lsrs	r3, r3, #16
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3714      	adds	r7, #20
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc4:	4770      	bx	lr

0800fbc6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fbc6:	b480      	push	{r7}
 800fbc8:	b085      	sub	sp, #20
 800fbca:	af00      	add	r7, sp, #0
 800fbcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbd8:	699b      	ldr	r3, [r3, #24]
 800fbda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbe2:	69db      	ldr	r3, [r3, #28]
 800fbe4:	68ba      	ldr	r2, [r7, #8]
 800fbe6:	4013      	ands	r3, r2
 800fbe8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800fbea:	68bb      	ldr	r3, [r7, #8]
 800fbec:	b29b      	uxth	r3, r3
}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	3714      	adds	r7, #20
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf8:	4770      	bx	lr

0800fbfa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fbfa:	b480      	push	{r7}
 800fbfc:	b085      	sub	sp, #20
 800fbfe:	af00      	add	r7, sp, #0
 800fc00:	6078      	str	r0, [r7, #4]
 800fc02:	460b      	mov	r3, r1
 800fc04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fc0a:	78fb      	ldrb	r3, [r7, #3]
 800fc0c:	015a      	lsls	r2, r3, #5
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	4413      	add	r3, r2
 800fc12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc16:	689b      	ldr	r3, [r3, #8]
 800fc18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc20:	695b      	ldr	r3, [r3, #20]
 800fc22:	68ba      	ldr	r2, [r7, #8]
 800fc24:	4013      	ands	r3, r2
 800fc26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fc28:	68bb      	ldr	r3, [r7, #8]
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	3714      	adds	r7, #20
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc34:	4770      	bx	lr

0800fc36 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fc36:	b480      	push	{r7}
 800fc38:	b087      	sub	sp, #28
 800fc3a:	af00      	add	r7, sp, #0
 800fc3c:	6078      	str	r0, [r7, #4]
 800fc3e:	460b      	mov	r3, r1
 800fc40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc4c:	691b      	ldr	r3, [r3, #16]
 800fc4e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc58:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fc5a:	78fb      	ldrb	r3, [r7, #3]
 800fc5c:	f003 030f 	and.w	r3, r3, #15
 800fc60:	68fa      	ldr	r2, [r7, #12]
 800fc62:	fa22 f303 	lsr.w	r3, r2, r3
 800fc66:	01db      	lsls	r3, r3, #7
 800fc68:	b2db      	uxtb	r3, r3
 800fc6a:	693a      	ldr	r2, [r7, #16]
 800fc6c:	4313      	orrs	r3, r2
 800fc6e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fc70:	78fb      	ldrb	r3, [r7, #3]
 800fc72:	015a      	lsls	r2, r3, #5
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	4413      	add	r3, r2
 800fc78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc7c:	689b      	ldr	r3, [r3, #8]
 800fc7e:	693a      	ldr	r2, [r7, #16]
 800fc80:	4013      	ands	r3, r2
 800fc82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fc84:	68bb      	ldr	r3, [r7, #8]
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	371c      	adds	r7, #28
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc90:	4770      	bx	lr

0800fc92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800fc92:	b480      	push	{r7}
 800fc94:	b083      	sub	sp, #12
 800fc96:	af00      	add	r7, sp, #0
 800fc98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	695b      	ldr	r3, [r3, #20]
 800fc9e:	f003 0301 	and.w	r3, r3, #1
}
 800fca2:	4618      	mov	r0, r3
 800fca4:	370c      	adds	r7, #12
 800fca6:	46bd      	mov	sp, r7
 800fca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcac:	4770      	bx	lr

0800fcae <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800fcae:	b480      	push	{r7}
 800fcb0:	b085      	sub	sp, #20
 800fcb2:	af00      	add	r7, sp, #0
 800fcb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	68fa      	ldr	r2, [r7, #12]
 800fcc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fcc8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800fccc:	f023 0307 	bic.w	r3, r3, #7
 800fcd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcd8:	685b      	ldr	r3, [r3, #4]
 800fcda:	68fa      	ldr	r2, [r7, #12]
 800fcdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fce4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fce6:	2300      	movs	r3, #0
}
 800fce8:	4618      	mov	r0, r3
 800fcea:	3714      	adds	r7, #20
 800fcec:	46bd      	mov	sp, r7
 800fcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf2:	4770      	bx	lr

0800fcf4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	b085      	sub	sp, #20
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	333c      	adds	r3, #60	; 0x3c
 800fd06:	3304      	adds	r3, #4
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fd0c:	68bb      	ldr	r3, [r7, #8]
 800fd0e:	4a1c      	ldr	r2, [pc, #112]	; (800fd80 <USB_EP0_OutStart+0x8c>)
 800fd10:	4293      	cmp	r3, r2
 800fd12:	d90a      	bls.n	800fd2a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fd20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fd24:	d101      	bne.n	800fd2a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800fd26:	2300      	movs	r3, #0
 800fd28:	e024      	b.n	800fd74 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd30:	461a      	mov	r2, r3
 800fd32:	2300      	movs	r3, #0
 800fd34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd3c:	691b      	ldr	r3, [r3, #16]
 800fd3e:	68fa      	ldr	r2, [r7, #12]
 800fd40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fd48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd50:	691b      	ldr	r3, [r3, #16]
 800fd52:	68fa      	ldr	r2, [r7, #12]
 800fd54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd58:	f043 0318 	orr.w	r3, r3, #24
 800fd5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd64:	691b      	ldr	r3, [r3, #16]
 800fd66:	68fa      	ldr	r2, [r7, #12]
 800fd68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd6c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800fd70:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800fd72:	2300      	movs	r3, #0
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	3714      	adds	r7, #20
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7e:	4770      	bx	lr
 800fd80:	4f54300a 	.word	0x4f54300a

0800fd84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fd84:	b480      	push	{r7}
 800fd86:	b085      	sub	sp, #20
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	3301      	adds	r3, #1
 800fd94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	4a13      	ldr	r2, [pc, #76]	; (800fde8 <USB_CoreReset+0x64>)
 800fd9a:	4293      	cmp	r3, r2
 800fd9c:	d901      	bls.n	800fda2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fd9e:	2303      	movs	r3, #3
 800fda0:	e01b      	b.n	800fdda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	691b      	ldr	r3, [r3, #16]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	daf2      	bge.n	800fd90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	691b      	ldr	r3, [r3, #16]
 800fdb2:	f043 0201 	orr.w	r2, r3, #1
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	3301      	adds	r3, #1
 800fdbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	4a09      	ldr	r2, [pc, #36]	; (800fde8 <USB_CoreReset+0x64>)
 800fdc4:	4293      	cmp	r3, r2
 800fdc6:	d901      	bls.n	800fdcc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fdc8:	2303      	movs	r3, #3
 800fdca:	e006      	b.n	800fdda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	691b      	ldr	r3, [r3, #16]
 800fdd0:	f003 0301 	and.w	r3, r3, #1
 800fdd4:	2b01      	cmp	r3, #1
 800fdd6:	d0f0      	beq.n	800fdba <USB_CoreReset+0x36>

  return HAL_OK;
 800fdd8:	2300      	movs	r3, #0
}
 800fdda:	4618      	mov	r0, r3
 800fddc:	3714      	adds	r7, #20
 800fdde:	46bd      	mov	sp, r7
 800fde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde4:	4770      	bx	lr
 800fde6:	bf00      	nop
 800fde8:	00030d40 	.word	0x00030d40

0800fdec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b084      	sub	sp, #16
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
 800fdf4:	460b      	mov	r3, r1
 800fdf6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800fdf8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800fdfc:	f002 fa6c 	bl	80122d8 <USBD_static_malloc>
 800fe00:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d105      	bne.n	800fe14 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800fe10:	2302      	movs	r3, #2
 800fe12:	e066      	b.n	800fee2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	68fa      	ldr	r2, [r7, #12]
 800fe18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	7c1b      	ldrb	r3, [r3, #16]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d119      	bne.n	800fe58 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fe24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe28:	2202      	movs	r2, #2
 800fe2a:	2181      	movs	r1, #129	; 0x81
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f002 f83f 	bl	8011eb0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	2201      	movs	r2, #1
 800fe36:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fe38:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe3c:	2202      	movs	r2, #2
 800fe3e:	2101      	movs	r1, #1
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f002 f835 	bl	8011eb0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2201      	movs	r2, #1
 800fe4a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2210      	movs	r2, #16
 800fe52:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800fe56:	e016      	b.n	800fe86 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fe58:	2340      	movs	r3, #64	; 0x40
 800fe5a:	2202      	movs	r2, #2
 800fe5c:	2181      	movs	r1, #129	; 0x81
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f002 f826 	bl	8011eb0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2201      	movs	r2, #1
 800fe68:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fe6a:	2340      	movs	r3, #64	; 0x40
 800fe6c:	2202      	movs	r2, #2
 800fe6e:	2101      	movs	r1, #1
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f002 f81d 	bl	8011eb0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2201      	movs	r2, #1
 800fe7a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	2210      	movs	r2, #16
 800fe82:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fe86:	2308      	movs	r3, #8
 800fe88:	2203      	movs	r2, #3
 800fe8a:	2182      	movs	r1, #130	; 0x82
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f002 f80f 	bl	8011eb0 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2201      	movs	r2, #1
 800fe96:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	2200      	movs	r2, #0
 800fea8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	2200      	movs	r2, #0
 800feb0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	7c1b      	ldrb	r3, [r3, #16]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d109      	bne.n	800fed0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fec2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fec6:	2101      	movs	r1, #1
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f002 f96b 	bl	80121a4 <USBD_LL_PrepareReceive>
 800fece:	e007      	b.n	800fee0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fed6:	2340      	movs	r3, #64	; 0x40
 800fed8:	2101      	movs	r1, #1
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	f002 f962 	bl	80121a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fee0:	2300      	movs	r3, #0
}
 800fee2:	4618      	mov	r0, r3
 800fee4:	3710      	adds	r7, #16
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}

0800feea <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800feea:	b580      	push	{r7, lr}
 800feec:	b082      	sub	sp, #8
 800feee:	af00      	add	r7, sp, #0
 800fef0:	6078      	str	r0, [r7, #4]
 800fef2:	460b      	mov	r3, r1
 800fef4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800fef6:	2181      	movs	r1, #129	; 0x81
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f002 f817 	bl	8011f2c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2200      	movs	r2, #0
 800ff02:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ff04:	2101      	movs	r1, #1
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f002 f810 	bl	8011f2c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2200      	movs	r2, #0
 800ff10:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ff14:	2182      	movs	r1, #130	; 0x82
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f002 f808 	bl	8011f2c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2200      	movs	r2, #0
 800ff20:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2200      	movs	r2, #0
 800ff28:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d00e      	beq.n	800ff54 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ff3c:	685b      	ldr	r3, [r3, #4]
 800ff3e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ff46:	4618      	mov	r0, r3
 800ff48:	f002 f9d4 	bl	80122f4 <USBD_static_free>
    pdev->pClassData = NULL;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2200      	movs	r2, #0
 800ff50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ff54:	2300      	movs	r3, #0
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3708      	adds	r7, #8
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}
	...

0800ff60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b086      	sub	sp, #24
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
 800ff68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ff70:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ff72:	2300      	movs	r3, #0
 800ff74:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ff76:	2300      	movs	r3, #0
 800ff78:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ff7e:	693b      	ldr	r3, [r7, #16]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d101      	bne.n	800ff88 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ff84:	2303      	movs	r3, #3
 800ff86:	e0af      	b.n	80100e8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	781b      	ldrb	r3, [r3, #0]
 800ff8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d03f      	beq.n	8010014 <USBD_CDC_Setup+0xb4>
 800ff94:	2b20      	cmp	r3, #32
 800ff96:	f040 809f 	bne.w	80100d8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	88db      	ldrh	r3, [r3, #6]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d02e      	beq.n	8010000 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ffa2:	683b      	ldr	r3, [r7, #0]
 800ffa4:	781b      	ldrb	r3, [r3, #0]
 800ffa6:	b25b      	sxtb	r3, r3
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	da16      	bge.n	800ffda <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ffb2:	689b      	ldr	r3, [r3, #8]
 800ffb4:	683a      	ldr	r2, [r7, #0]
 800ffb6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ffb8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ffba:	683a      	ldr	r2, [r7, #0]
 800ffbc:	88d2      	ldrh	r2, [r2, #6]
 800ffbe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ffc0:	683b      	ldr	r3, [r7, #0]
 800ffc2:	88db      	ldrh	r3, [r3, #6]
 800ffc4:	2b07      	cmp	r3, #7
 800ffc6:	bf28      	it	cs
 800ffc8:	2307      	movcs	r3, #7
 800ffca:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ffcc:	693b      	ldr	r3, [r7, #16]
 800ffce:	89fa      	ldrh	r2, [r7, #14]
 800ffd0:	4619      	mov	r1, r3
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f001 fb13 	bl	80115fe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ffd8:	e085      	b.n	80100e6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	785a      	ldrb	r2, [r3, #1]
 800ffde:	693b      	ldr	r3, [r7, #16]
 800ffe0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	88db      	ldrh	r3, [r3, #6]
 800ffe8:	b2da      	uxtb	r2, r3
 800ffea:	693b      	ldr	r3, [r7, #16]
 800ffec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800fff0:	6939      	ldr	r1, [r7, #16]
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	88db      	ldrh	r3, [r3, #6]
 800fff6:	461a      	mov	r2, r3
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f001 fb2c 	bl	8011656 <USBD_CtlPrepareRx>
      break;
 800fffe:	e072      	b.n	80100e6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010006:	689b      	ldr	r3, [r3, #8]
 8010008:	683a      	ldr	r2, [r7, #0]
 801000a:	7850      	ldrb	r0, [r2, #1]
 801000c:	2200      	movs	r2, #0
 801000e:	6839      	ldr	r1, [r7, #0]
 8010010:	4798      	blx	r3
      break;
 8010012:	e068      	b.n	80100e6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	785b      	ldrb	r3, [r3, #1]
 8010018:	2b0b      	cmp	r3, #11
 801001a:	d852      	bhi.n	80100c2 <USBD_CDC_Setup+0x162>
 801001c:	a201      	add	r2, pc, #4	; (adr r2, 8010024 <USBD_CDC_Setup+0xc4>)
 801001e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010022:	bf00      	nop
 8010024:	08010055 	.word	0x08010055
 8010028:	080100d1 	.word	0x080100d1
 801002c:	080100c3 	.word	0x080100c3
 8010030:	080100c3 	.word	0x080100c3
 8010034:	080100c3 	.word	0x080100c3
 8010038:	080100c3 	.word	0x080100c3
 801003c:	080100c3 	.word	0x080100c3
 8010040:	080100c3 	.word	0x080100c3
 8010044:	080100c3 	.word	0x080100c3
 8010048:	080100c3 	.word	0x080100c3
 801004c:	0801007f 	.word	0x0801007f
 8010050:	080100a9 	.word	0x080100a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801005a:	b2db      	uxtb	r3, r3
 801005c:	2b03      	cmp	r3, #3
 801005e:	d107      	bne.n	8010070 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010060:	f107 030a 	add.w	r3, r7, #10
 8010064:	2202      	movs	r2, #2
 8010066:	4619      	mov	r1, r3
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f001 fac8 	bl	80115fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801006e:	e032      	b.n	80100d6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8010070:	6839      	ldr	r1, [r7, #0]
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f001 fa52 	bl	801151c <USBD_CtlError>
            ret = USBD_FAIL;
 8010078:	2303      	movs	r3, #3
 801007a:	75fb      	strb	r3, [r7, #23]
          break;
 801007c:	e02b      	b.n	80100d6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010084:	b2db      	uxtb	r3, r3
 8010086:	2b03      	cmp	r3, #3
 8010088:	d107      	bne.n	801009a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801008a:	f107 030d 	add.w	r3, r7, #13
 801008e:	2201      	movs	r2, #1
 8010090:	4619      	mov	r1, r3
 8010092:	6878      	ldr	r0, [r7, #4]
 8010094:	f001 fab3 	bl	80115fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010098:	e01d      	b.n	80100d6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801009a:	6839      	ldr	r1, [r7, #0]
 801009c:	6878      	ldr	r0, [r7, #4]
 801009e:	f001 fa3d 	bl	801151c <USBD_CtlError>
            ret = USBD_FAIL;
 80100a2:	2303      	movs	r3, #3
 80100a4:	75fb      	strb	r3, [r7, #23]
          break;
 80100a6:	e016      	b.n	80100d6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100ae:	b2db      	uxtb	r3, r3
 80100b0:	2b03      	cmp	r3, #3
 80100b2:	d00f      	beq.n	80100d4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80100b4:	6839      	ldr	r1, [r7, #0]
 80100b6:	6878      	ldr	r0, [r7, #4]
 80100b8:	f001 fa30 	bl	801151c <USBD_CtlError>
            ret = USBD_FAIL;
 80100bc:	2303      	movs	r3, #3
 80100be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80100c0:	e008      	b.n	80100d4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80100c2:	6839      	ldr	r1, [r7, #0]
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f001 fa29 	bl	801151c <USBD_CtlError>
          ret = USBD_FAIL;
 80100ca:	2303      	movs	r3, #3
 80100cc:	75fb      	strb	r3, [r7, #23]
          break;
 80100ce:	e002      	b.n	80100d6 <USBD_CDC_Setup+0x176>
          break;
 80100d0:	bf00      	nop
 80100d2:	e008      	b.n	80100e6 <USBD_CDC_Setup+0x186>
          break;
 80100d4:	bf00      	nop
      }
      break;
 80100d6:	e006      	b.n	80100e6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80100d8:	6839      	ldr	r1, [r7, #0]
 80100da:	6878      	ldr	r0, [r7, #4]
 80100dc:	f001 fa1e 	bl	801151c <USBD_CtlError>
      ret = USBD_FAIL;
 80100e0:	2303      	movs	r3, #3
 80100e2:	75fb      	strb	r3, [r7, #23]
      break;
 80100e4:	bf00      	nop
  }

  return (uint8_t)ret;
 80100e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	3718      	adds	r7, #24
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b084      	sub	sp, #16
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
 80100f8:	460b      	mov	r3, r1
 80100fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010102:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801010a:	2b00      	cmp	r3, #0
 801010c:	d101      	bne.n	8010112 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801010e:	2303      	movs	r3, #3
 8010110:	e04f      	b.n	80101b2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010118:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801011a:	78fa      	ldrb	r2, [r7, #3]
 801011c:	6879      	ldr	r1, [r7, #4]
 801011e:	4613      	mov	r3, r2
 8010120:	009b      	lsls	r3, r3, #2
 8010122:	4413      	add	r3, r2
 8010124:	009b      	lsls	r3, r3, #2
 8010126:	440b      	add	r3, r1
 8010128:	3318      	adds	r3, #24
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d029      	beq.n	8010184 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010130:	78fa      	ldrb	r2, [r7, #3]
 8010132:	6879      	ldr	r1, [r7, #4]
 8010134:	4613      	mov	r3, r2
 8010136:	009b      	lsls	r3, r3, #2
 8010138:	4413      	add	r3, r2
 801013a:	009b      	lsls	r3, r3, #2
 801013c:	440b      	add	r3, r1
 801013e:	3318      	adds	r3, #24
 8010140:	681a      	ldr	r2, [r3, #0]
 8010142:	78f9      	ldrb	r1, [r7, #3]
 8010144:	68f8      	ldr	r0, [r7, #12]
 8010146:	460b      	mov	r3, r1
 8010148:	00db      	lsls	r3, r3, #3
 801014a:	440b      	add	r3, r1
 801014c:	009b      	lsls	r3, r3, #2
 801014e:	4403      	add	r3, r0
 8010150:	3348      	adds	r3, #72	; 0x48
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	fbb2 f1f3 	udiv	r1, r2, r3
 8010158:	fb01 f303 	mul.w	r3, r1, r3
 801015c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801015e:	2b00      	cmp	r3, #0
 8010160:	d110      	bne.n	8010184 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8010162:	78fa      	ldrb	r2, [r7, #3]
 8010164:	6879      	ldr	r1, [r7, #4]
 8010166:	4613      	mov	r3, r2
 8010168:	009b      	lsls	r3, r3, #2
 801016a:	4413      	add	r3, r2
 801016c:	009b      	lsls	r3, r3, #2
 801016e:	440b      	add	r3, r1
 8010170:	3318      	adds	r3, #24
 8010172:	2200      	movs	r2, #0
 8010174:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010176:	78f9      	ldrb	r1, [r7, #3]
 8010178:	2300      	movs	r3, #0
 801017a:	2200      	movs	r2, #0
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	f001 ffd9 	bl	8012134 <USBD_LL_Transmit>
 8010182:	e015      	b.n	80101b0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	2200      	movs	r2, #0
 8010188:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010192:	691b      	ldr	r3, [r3, #16]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d00b      	beq.n	80101b0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801019e:	691b      	ldr	r3, [r3, #16]
 80101a0:	68ba      	ldr	r2, [r7, #8]
 80101a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80101a6:	68ba      	ldr	r2, [r7, #8]
 80101a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80101ac:	78fa      	ldrb	r2, [r7, #3]
 80101ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80101b0:	2300      	movs	r3, #0
}
 80101b2:	4618      	mov	r0, r3
 80101b4:	3710      	adds	r7, #16
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}

080101ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80101ba:	b580      	push	{r7, lr}
 80101bc:	b084      	sub	sp, #16
 80101be:	af00      	add	r7, sp, #0
 80101c0:	6078      	str	r0, [r7, #4]
 80101c2:	460b      	mov	r3, r1
 80101c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80101cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d101      	bne.n	80101dc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80101d8:	2303      	movs	r3, #3
 80101da:	e015      	b.n	8010208 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80101dc:	78fb      	ldrb	r3, [r7, #3]
 80101de:	4619      	mov	r1, r3
 80101e0:	6878      	ldr	r0, [r7, #4]
 80101e2:	f002 f817 	bl	8012214 <USBD_LL_GetRxDataSize>
 80101e6:	4602      	mov	r2, r0
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80101f4:	68db      	ldr	r3, [r3, #12]
 80101f6:	68fa      	ldr	r2, [r7, #12]
 80101f8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80101fc:	68fa      	ldr	r2, [r7, #12]
 80101fe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010202:	4611      	mov	r1, r2
 8010204:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010206:	2300      	movs	r3, #0
}
 8010208:	4618      	mov	r0, r3
 801020a:	3710      	adds	r7, #16
 801020c:	46bd      	mov	sp, r7
 801020e:	bd80      	pop	{r7, pc}

08010210 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b084      	sub	sp, #16
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801021e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d101      	bne.n	801022a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8010226:	2303      	movs	r3, #3
 8010228:	e01b      	b.n	8010262 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010230:	2b00      	cmp	r3, #0
 8010232:	d015      	beq.n	8010260 <USBD_CDC_EP0_RxReady+0x50>
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801023a:	2bff      	cmp	r3, #255	; 0xff
 801023c:	d010      	beq.n	8010260 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010244:	689b      	ldr	r3, [r3, #8]
 8010246:	68fa      	ldr	r2, [r7, #12]
 8010248:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 801024c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801024e:	68fa      	ldr	r2, [r7, #12]
 8010250:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010254:	b292      	uxth	r2, r2
 8010256:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	22ff      	movs	r2, #255	; 0xff
 801025c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8010260:	2300      	movs	r3, #0
}
 8010262:	4618      	mov	r0, r3
 8010264:	3710      	adds	r7, #16
 8010266:	46bd      	mov	sp, r7
 8010268:	bd80      	pop	{r7, pc}
	...

0801026c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801026c:	b480      	push	{r7}
 801026e:	b083      	sub	sp, #12
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2243      	movs	r2, #67	; 0x43
 8010278:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801027a:	4b03      	ldr	r3, [pc, #12]	; (8010288 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801027c:	4618      	mov	r0, r3
 801027e:	370c      	adds	r7, #12
 8010280:	46bd      	mov	sp, r7
 8010282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010286:	4770      	bx	lr
 8010288:	200004e0 	.word	0x200004e0

0801028c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801028c:	b480      	push	{r7}
 801028e:	b083      	sub	sp, #12
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2243      	movs	r2, #67	; 0x43
 8010298:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801029a:	4b03      	ldr	r3, [pc, #12]	; (80102a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801029c:	4618      	mov	r0, r3
 801029e:	370c      	adds	r7, #12
 80102a0:	46bd      	mov	sp, r7
 80102a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a6:	4770      	bx	lr
 80102a8:	2000049c 	.word	0x2000049c

080102ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80102ac:	b480      	push	{r7}
 80102ae:	b083      	sub	sp, #12
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2243      	movs	r2, #67	; 0x43
 80102b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80102ba:	4b03      	ldr	r3, [pc, #12]	; (80102c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80102bc:	4618      	mov	r0, r3
 80102be:	370c      	adds	r7, #12
 80102c0:	46bd      	mov	sp, r7
 80102c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c6:	4770      	bx	lr
 80102c8:	20000524 	.word	0x20000524

080102cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80102cc:	b480      	push	{r7}
 80102ce:	b083      	sub	sp, #12
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	220a      	movs	r2, #10
 80102d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80102da:	4b03      	ldr	r3, [pc, #12]	; (80102e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80102dc:	4618      	mov	r0, r3
 80102de:	370c      	adds	r7, #12
 80102e0:	46bd      	mov	sp, r7
 80102e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e6:	4770      	bx	lr
 80102e8:	20000458 	.word	0x20000458

080102ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80102ec:	b480      	push	{r7}
 80102ee:	b083      	sub	sp, #12
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
 80102f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d101      	bne.n	8010300 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80102fc:	2303      	movs	r3, #3
 80102fe:	e004      	b.n	801030a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	683a      	ldr	r2, [r7, #0]
 8010304:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8010308:	2300      	movs	r3, #0
}
 801030a:	4618      	mov	r0, r3
 801030c:	370c      	adds	r7, #12
 801030e:	46bd      	mov	sp, r7
 8010310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010314:	4770      	bx	lr

08010316 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010316:	b480      	push	{r7}
 8010318:	b087      	sub	sp, #28
 801031a:	af00      	add	r7, sp, #0
 801031c:	60f8      	str	r0, [r7, #12]
 801031e:	60b9      	str	r1, [r7, #8]
 8010320:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010328:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801032a:	697b      	ldr	r3, [r7, #20]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d101      	bne.n	8010334 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010330:	2303      	movs	r3, #3
 8010332:	e008      	b.n	8010346 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	68ba      	ldr	r2, [r7, #8]
 8010338:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	687a      	ldr	r2, [r7, #4]
 8010340:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8010344:	2300      	movs	r3, #0
}
 8010346:	4618      	mov	r0, r3
 8010348:	371c      	adds	r7, #28
 801034a:	46bd      	mov	sp, r7
 801034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010350:	4770      	bx	lr

08010352 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010352:	b480      	push	{r7}
 8010354:	b085      	sub	sp, #20
 8010356:	af00      	add	r7, sp, #0
 8010358:	6078      	str	r0, [r7, #4]
 801035a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010362:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d101      	bne.n	801036e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801036a:	2303      	movs	r3, #3
 801036c:	e004      	b.n	8010378 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	683a      	ldr	r2, [r7, #0]
 8010372:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8010376:	2300      	movs	r3, #0
}
 8010378:	4618      	mov	r0, r3
 801037a:	3714      	adds	r7, #20
 801037c:	46bd      	mov	sp, r7
 801037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010382:	4770      	bx	lr

08010384 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b084      	sub	sp, #16
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010392:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801039a:	2b00      	cmp	r3, #0
 801039c:	d101      	bne.n	80103a2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801039e:	2303      	movs	r3, #3
 80103a0:	e016      	b.n	80103d0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	7c1b      	ldrb	r3, [r3, #16]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d109      	bne.n	80103be <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80103b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80103b4:	2101      	movs	r1, #1
 80103b6:	6878      	ldr	r0, [r7, #4]
 80103b8:	f001 fef4 	bl	80121a4 <USBD_LL_PrepareReceive>
 80103bc:	e007      	b.n	80103ce <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80103c4:	2340      	movs	r3, #64	; 0x40
 80103c6:	2101      	movs	r1, #1
 80103c8:	6878      	ldr	r0, [r7, #4]
 80103ca:	f001 feeb 	bl	80121a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80103ce:	2300      	movs	r3, #0
}
 80103d0:	4618      	mov	r0, r3
 80103d2:	3710      	adds	r7, #16
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}

080103d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b086      	sub	sp, #24
 80103dc:	af00      	add	r7, sp, #0
 80103de:	60f8      	str	r0, [r7, #12]
 80103e0:	60b9      	str	r1, [r7, #8]
 80103e2:	4613      	mov	r3, r2
 80103e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d101      	bne.n	80103f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80103ec:	2303      	movs	r3, #3
 80103ee:	e01f      	b.n	8010430 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	2200      	movs	r2, #0
 80103f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	2200      	movs	r2, #0
 80103fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	2200      	movs	r2, #0
 8010404:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d003      	beq.n	8010416 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	68ba      	ldr	r2, [r7, #8]
 8010412:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	2201      	movs	r2, #1
 801041a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	79fa      	ldrb	r2, [r7, #7]
 8010422:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010424:	68f8      	ldr	r0, [r7, #12]
 8010426:	f001 fcc5 	bl	8011db4 <USBD_LL_Init>
 801042a:	4603      	mov	r3, r0
 801042c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801042e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010430:	4618      	mov	r0, r3
 8010432:	3718      	adds	r7, #24
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}

08010438 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b084      	sub	sp, #16
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
 8010440:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010442:	2300      	movs	r3, #0
 8010444:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d101      	bne.n	8010450 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801044c:	2303      	movs	r3, #3
 801044e:	e016      	b.n	801047e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	683a      	ldr	r2, [r7, #0]
 8010454:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801045e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010460:	2b00      	cmp	r3, #0
 8010462:	d00b      	beq.n	801047c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801046a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801046c:	f107 020e 	add.w	r2, r7, #14
 8010470:	4610      	mov	r0, r2
 8010472:	4798      	blx	r3
 8010474:	4602      	mov	r2, r0
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 801047c:	2300      	movs	r3, #0
}
 801047e:	4618      	mov	r0, r3
 8010480:	3710      	adds	r7, #16
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}

08010486 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010486:	b580      	push	{r7, lr}
 8010488:	b082      	sub	sp, #8
 801048a:	af00      	add	r7, sp, #0
 801048c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f001 fcdc 	bl	8011e4c <USBD_LL_Start>
 8010494:	4603      	mov	r3, r0
}
 8010496:	4618      	mov	r0, r3
 8010498:	3708      	adds	r7, #8
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}

0801049e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801049e:	b480      	push	{r7}
 80104a0:	b083      	sub	sp, #12
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80104a6:	2300      	movs	r3, #0
}
 80104a8:	4618      	mov	r0, r3
 80104aa:	370c      	adds	r7, #12
 80104ac:	46bd      	mov	sp, r7
 80104ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b2:	4770      	bx	lr

080104b4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b084      	sub	sp, #16
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
 80104bc:	460b      	mov	r3, r1
 80104be:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80104c0:	2303      	movs	r3, #3
 80104c2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d009      	beq.n	80104e2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	78fa      	ldrb	r2, [r7, #3]
 80104d8:	4611      	mov	r1, r2
 80104da:	6878      	ldr	r0, [r7, #4]
 80104dc:	4798      	blx	r3
 80104de:	4603      	mov	r3, r0
 80104e0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80104e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80104e4:	4618      	mov	r0, r3
 80104e6:	3710      	adds	r7, #16
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}

080104ec <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b082      	sub	sp, #8
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
 80104f4:	460b      	mov	r3, r1
 80104f6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d007      	beq.n	8010512 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010508:	685b      	ldr	r3, [r3, #4]
 801050a:	78fa      	ldrb	r2, [r7, #3]
 801050c:	4611      	mov	r1, r2
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	4798      	blx	r3
  }

  return USBD_OK;
 8010512:	2300      	movs	r3, #0
}
 8010514:	4618      	mov	r0, r3
 8010516:	3708      	adds	r7, #8
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}

0801051c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b084      	sub	sp, #16
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
 8010524:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801052c:	6839      	ldr	r1, [r7, #0]
 801052e:	4618      	mov	r0, r3
 8010530:	f000 ffba 	bl	80114a8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2201      	movs	r2, #1
 8010538:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8010542:	461a      	mov	r2, r3
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010550:	f003 031f 	and.w	r3, r3, #31
 8010554:	2b02      	cmp	r3, #2
 8010556:	d01a      	beq.n	801058e <USBD_LL_SetupStage+0x72>
 8010558:	2b02      	cmp	r3, #2
 801055a:	d822      	bhi.n	80105a2 <USBD_LL_SetupStage+0x86>
 801055c:	2b00      	cmp	r3, #0
 801055e:	d002      	beq.n	8010566 <USBD_LL_SetupStage+0x4a>
 8010560:	2b01      	cmp	r3, #1
 8010562:	d00a      	beq.n	801057a <USBD_LL_SetupStage+0x5e>
 8010564:	e01d      	b.n	80105a2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801056c:	4619      	mov	r1, r3
 801056e:	6878      	ldr	r0, [r7, #4]
 8010570:	f000 fa62 	bl	8010a38 <USBD_StdDevReq>
 8010574:	4603      	mov	r3, r0
 8010576:	73fb      	strb	r3, [r7, #15]
      break;
 8010578:	e020      	b.n	80105bc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010580:	4619      	mov	r1, r3
 8010582:	6878      	ldr	r0, [r7, #4]
 8010584:	f000 fac6 	bl	8010b14 <USBD_StdItfReq>
 8010588:	4603      	mov	r3, r0
 801058a:	73fb      	strb	r3, [r7, #15]
      break;
 801058c:	e016      	b.n	80105bc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010594:	4619      	mov	r1, r3
 8010596:	6878      	ldr	r0, [r7, #4]
 8010598:	f000 fb05 	bl	8010ba6 <USBD_StdEPReq>
 801059c:	4603      	mov	r3, r0
 801059e:	73fb      	strb	r3, [r7, #15]
      break;
 80105a0:	e00c      	b.n	80105bc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80105a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80105ac:	b2db      	uxtb	r3, r3
 80105ae:	4619      	mov	r1, r3
 80105b0:	6878      	ldr	r0, [r7, #4]
 80105b2:	f001 fcf1 	bl	8011f98 <USBD_LL_StallEP>
 80105b6:	4603      	mov	r3, r0
 80105b8:	73fb      	strb	r3, [r7, #15]
      break;
 80105ba:	bf00      	nop
  }

  return ret;
 80105bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80105be:	4618      	mov	r0, r3
 80105c0:	3710      	adds	r7, #16
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}

080105c6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80105c6:	b580      	push	{r7, lr}
 80105c8:	b086      	sub	sp, #24
 80105ca:	af00      	add	r7, sp, #0
 80105cc:	60f8      	str	r0, [r7, #12]
 80105ce:	460b      	mov	r3, r1
 80105d0:	607a      	str	r2, [r7, #4]
 80105d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80105d4:	7afb      	ldrb	r3, [r7, #11]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d138      	bne.n	801064c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80105e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80105e8:	2b03      	cmp	r3, #3
 80105ea:	d14a      	bne.n	8010682 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80105ec:	693b      	ldr	r3, [r7, #16]
 80105ee:	689a      	ldr	r2, [r3, #8]
 80105f0:	693b      	ldr	r3, [r7, #16]
 80105f2:	68db      	ldr	r3, [r3, #12]
 80105f4:	429a      	cmp	r2, r3
 80105f6:	d913      	bls.n	8010620 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	689a      	ldr	r2, [r3, #8]
 80105fc:	693b      	ldr	r3, [r7, #16]
 80105fe:	68db      	ldr	r3, [r3, #12]
 8010600:	1ad2      	subs	r2, r2, r3
 8010602:	693b      	ldr	r3, [r7, #16]
 8010604:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010606:	693b      	ldr	r3, [r7, #16]
 8010608:	68da      	ldr	r2, [r3, #12]
 801060a:	693b      	ldr	r3, [r7, #16]
 801060c:	689b      	ldr	r3, [r3, #8]
 801060e:	4293      	cmp	r3, r2
 8010610:	bf28      	it	cs
 8010612:	4613      	movcs	r3, r2
 8010614:	461a      	mov	r2, r3
 8010616:	6879      	ldr	r1, [r7, #4]
 8010618:	68f8      	ldr	r0, [r7, #12]
 801061a:	f001 f839 	bl	8011690 <USBD_CtlContinueRx>
 801061e:	e030      	b.n	8010682 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010626:	b2db      	uxtb	r3, r3
 8010628:	2b03      	cmp	r3, #3
 801062a:	d10b      	bne.n	8010644 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010632:	691b      	ldr	r3, [r3, #16]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d005      	beq.n	8010644 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801063e:	691b      	ldr	r3, [r3, #16]
 8010640:	68f8      	ldr	r0, [r7, #12]
 8010642:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010644:	68f8      	ldr	r0, [r7, #12]
 8010646:	f001 f834 	bl	80116b2 <USBD_CtlSendStatus>
 801064a:	e01a      	b.n	8010682 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010652:	b2db      	uxtb	r3, r3
 8010654:	2b03      	cmp	r3, #3
 8010656:	d114      	bne.n	8010682 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801065e:	699b      	ldr	r3, [r3, #24]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d00e      	beq.n	8010682 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801066a:	699b      	ldr	r3, [r3, #24]
 801066c:	7afa      	ldrb	r2, [r7, #11]
 801066e:	4611      	mov	r1, r2
 8010670:	68f8      	ldr	r0, [r7, #12]
 8010672:	4798      	blx	r3
 8010674:	4603      	mov	r3, r0
 8010676:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010678:	7dfb      	ldrb	r3, [r7, #23]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d001      	beq.n	8010682 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801067e:	7dfb      	ldrb	r3, [r7, #23]
 8010680:	e000      	b.n	8010684 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8010682:	2300      	movs	r3, #0
}
 8010684:	4618      	mov	r0, r3
 8010686:	3718      	adds	r7, #24
 8010688:	46bd      	mov	sp, r7
 801068a:	bd80      	pop	{r7, pc}

0801068c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b086      	sub	sp, #24
 8010690:	af00      	add	r7, sp, #0
 8010692:	60f8      	str	r0, [r7, #12]
 8010694:	460b      	mov	r3, r1
 8010696:	607a      	str	r2, [r7, #4]
 8010698:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801069a:	7afb      	ldrb	r3, [r7, #11]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d16b      	bne.n	8010778 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	3314      	adds	r3, #20
 80106a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80106ac:	2b02      	cmp	r3, #2
 80106ae:	d156      	bne.n	801075e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	689a      	ldr	r2, [r3, #8]
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	68db      	ldr	r3, [r3, #12]
 80106b8:	429a      	cmp	r2, r3
 80106ba:	d914      	bls.n	80106e6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	689a      	ldr	r2, [r3, #8]
 80106c0:	693b      	ldr	r3, [r7, #16]
 80106c2:	68db      	ldr	r3, [r3, #12]
 80106c4:	1ad2      	subs	r2, r2, r3
 80106c6:	693b      	ldr	r3, [r7, #16]
 80106c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80106ca:	693b      	ldr	r3, [r7, #16]
 80106cc:	689b      	ldr	r3, [r3, #8]
 80106ce:	461a      	mov	r2, r3
 80106d0:	6879      	ldr	r1, [r7, #4]
 80106d2:	68f8      	ldr	r0, [r7, #12]
 80106d4:	f000 ffae 	bl	8011634 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80106d8:	2300      	movs	r3, #0
 80106da:	2200      	movs	r2, #0
 80106dc:	2100      	movs	r1, #0
 80106de:	68f8      	ldr	r0, [r7, #12]
 80106e0:	f001 fd60 	bl	80121a4 <USBD_LL_PrepareReceive>
 80106e4:	e03b      	b.n	801075e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80106e6:	693b      	ldr	r3, [r7, #16]
 80106e8:	68da      	ldr	r2, [r3, #12]
 80106ea:	693b      	ldr	r3, [r7, #16]
 80106ec:	689b      	ldr	r3, [r3, #8]
 80106ee:	429a      	cmp	r2, r3
 80106f0:	d11c      	bne.n	801072c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80106f2:	693b      	ldr	r3, [r7, #16]
 80106f4:	685a      	ldr	r2, [r3, #4]
 80106f6:	693b      	ldr	r3, [r7, #16]
 80106f8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80106fa:	429a      	cmp	r2, r3
 80106fc:	d316      	bcc.n	801072c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80106fe:	693b      	ldr	r3, [r7, #16]
 8010700:	685a      	ldr	r2, [r3, #4]
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010708:	429a      	cmp	r2, r3
 801070a:	d20f      	bcs.n	801072c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801070c:	2200      	movs	r2, #0
 801070e:	2100      	movs	r1, #0
 8010710:	68f8      	ldr	r0, [r7, #12]
 8010712:	f000 ff8f 	bl	8011634 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	2200      	movs	r2, #0
 801071a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801071e:	2300      	movs	r3, #0
 8010720:	2200      	movs	r2, #0
 8010722:	2100      	movs	r1, #0
 8010724:	68f8      	ldr	r0, [r7, #12]
 8010726:	f001 fd3d 	bl	80121a4 <USBD_LL_PrepareReceive>
 801072a:	e018      	b.n	801075e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010732:	b2db      	uxtb	r3, r3
 8010734:	2b03      	cmp	r3, #3
 8010736:	d10b      	bne.n	8010750 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801073e:	68db      	ldr	r3, [r3, #12]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d005      	beq.n	8010750 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801074a:	68db      	ldr	r3, [r3, #12]
 801074c:	68f8      	ldr	r0, [r7, #12]
 801074e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010750:	2180      	movs	r1, #128	; 0x80
 8010752:	68f8      	ldr	r0, [r7, #12]
 8010754:	f001 fc20 	bl	8011f98 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010758:	68f8      	ldr	r0, [r7, #12]
 801075a:	f000 ffbd 	bl	80116d8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010764:	2b01      	cmp	r3, #1
 8010766:	d122      	bne.n	80107ae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8010768:	68f8      	ldr	r0, [r7, #12]
 801076a:	f7ff fe98 	bl	801049e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	2200      	movs	r2, #0
 8010772:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010776:	e01a      	b.n	80107ae <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801077e:	b2db      	uxtb	r3, r3
 8010780:	2b03      	cmp	r3, #3
 8010782:	d114      	bne.n	80107ae <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801078a:	695b      	ldr	r3, [r3, #20]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d00e      	beq.n	80107ae <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010796:	695b      	ldr	r3, [r3, #20]
 8010798:	7afa      	ldrb	r2, [r7, #11]
 801079a:	4611      	mov	r1, r2
 801079c:	68f8      	ldr	r0, [r7, #12]
 801079e:	4798      	blx	r3
 80107a0:	4603      	mov	r3, r0
 80107a2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80107a4:	7dfb      	ldrb	r3, [r7, #23]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d001      	beq.n	80107ae <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80107aa:	7dfb      	ldrb	r3, [r7, #23]
 80107ac:	e000      	b.n	80107b0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80107ae:	2300      	movs	r3, #0
}
 80107b0:	4618      	mov	r0, r3
 80107b2:	3718      	adds	r7, #24
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bd80      	pop	{r7, pc}

080107b8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b082      	sub	sp, #8
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	2201      	movs	r2, #1
 80107c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	2200      	movs	r2, #0
 80107cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2200      	movs	r2, #0
 80107d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2200      	movs	r2, #0
 80107da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d101      	bne.n	80107ec <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80107e8:	2303      	movs	r3, #3
 80107ea:	e02f      	b.n	801084c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d00f      	beq.n	8010816 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80107fc:	685b      	ldr	r3, [r3, #4]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d009      	beq.n	8010816 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010808:	685b      	ldr	r3, [r3, #4]
 801080a:	687a      	ldr	r2, [r7, #4]
 801080c:	6852      	ldr	r2, [r2, #4]
 801080e:	b2d2      	uxtb	r2, r2
 8010810:	4611      	mov	r1, r2
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010816:	2340      	movs	r3, #64	; 0x40
 8010818:	2200      	movs	r2, #0
 801081a:	2100      	movs	r1, #0
 801081c:	6878      	ldr	r0, [r7, #4]
 801081e:	f001 fb47 	bl	8011eb0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2201      	movs	r2, #1
 8010826:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2240      	movs	r2, #64	; 0x40
 801082e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010832:	2340      	movs	r3, #64	; 0x40
 8010834:	2200      	movs	r2, #0
 8010836:	2180      	movs	r1, #128	; 0x80
 8010838:	6878      	ldr	r0, [r7, #4]
 801083a:	f001 fb39 	bl	8011eb0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2201      	movs	r2, #1
 8010842:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2240      	movs	r2, #64	; 0x40
 8010848:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801084a:	2300      	movs	r3, #0
}
 801084c:	4618      	mov	r0, r3
 801084e:	3708      	adds	r7, #8
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}

08010854 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010854:	b480      	push	{r7}
 8010856:	b083      	sub	sp, #12
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
 801085c:	460b      	mov	r3, r1
 801085e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	78fa      	ldrb	r2, [r7, #3]
 8010864:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010866:	2300      	movs	r3, #0
}
 8010868:	4618      	mov	r0, r3
 801086a:	370c      	adds	r7, #12
 801086c:	46bd      	mov	sp, r7
 801086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010872:	4770      	bx	lr

08010874 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010874:	b480      	push	{r7}
 8010876:	b083      	sub	sp, #12
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010882:	b2da      	uxtb	r2, r3
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	2204      	movs	r2, #4
 801088e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010892:	2300      	movs	r3, #0
}
 8010894:	4618      	mov	r0, r3
 8010896:	370c      	adds	r7, #12
 8010898:	46bd      	mov	sp, r7
 801089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089e:	4770      	bx	lr

080108a0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80108a0:	b480      	push	{r7}
 80108a2:	b083      	sub	sp, #12
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108ae:	b2db      	uxtb	r3, r3
 80108b0:	2b04      	cmp	r3, #4
 80108b2:	d106      	bne.n	80108c2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80108ba:	b2da      	uxtb	r2, r3
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80108c2:	2300      	movs	r3, #0
}
 80108c4:	4618      	mov	r0, r3
 80108c6:	370c      	adds	r7, #12
 80108c8:	46bd      	mov	sp, r7
 80108ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ce:	4770      	bx	lr

080108d0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b082      	sub	sp, #8
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d101      	bne.n	80108e6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80108e2:	2303      	movs	r3, #3
 80108e4:	e012      	b.n	801090c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108ec:	b2db      	uxtb	r3, r3
 80108ee:	2b03      	cmp	r3, #3
 80108f0:	d10b      	bne.n	801090a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108f8:	69db      	ldr	r3, [r3, #28]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d005      	beq.n	801090a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010904:	69db      	ldr	r3, [r3, #28]
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801090a:	2300      	movs	r3, #0
}
 801090c:	4618      	mov	r0, r3
 801090e:	3708      	adds	r7, #8
 8010910:	46bd      	mov	sp, r7
 8010912:	bd80      	pop	{r7, pc}

08010914 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b082      	sub	sp, #8
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
 801091c:	460b      	mov	r3, r1
 801091e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010926:	2b00      	cmp	r3, #0
 8010928:	d101      	bne.n	801092e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 801092a:	2303      	movs	r3, #3
 801092c:	e014      	b.n	8010958 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010934:	b2db      	uxtb	r3, r3
 8010936:	2b03      	cmp	r3, #3
 8010938:	d10d      	bne.n	8010956 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010940:	6a1b      	ldr	r3, [r3, #32]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d007      	beq.n	8010956 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801094c:	6a1b      	ldr	r3, [r3, #32]
 801094e:	78fa      	ldrb	r2, [r7, #3]
 8010950:	4611      	mov	r1, r2
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010956:	2300      	movs	r3, #0
}
 8010958:	4618      	mov	r0, r3
 801095a:	3708      	adds	r7, #8
 801095c:	46bd      	mov	sp, r7
 801095e:	bd80      	pop	{r7, pc}

08010960 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b082      	sub	sp, #8
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	460b      	mov	r3, r1
 801096a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010972:	2b00      	cmp	r3, #0
 8010974:	d101      	bne.n	801097a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8010976:	2303      	movs	r3, #3
 8010978:	e014      	b.n	80109a4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010980:	b2db      	uxtb	r3, r3
 8010982:	2b03      	cmp	r3, #3
 8010984:	d10d      	bne.n	80109a2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801098c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801098e:	2b00      	cmp	r3, #0
 8010990:	d007      	beq.n	80109a2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801099a:	78fa      	ldrb	r2, [r7, #3]
 801099c:	4611      	mov	r1, r2
 801099e:	6878      	ldr	r0, [r7, #4]
 80109a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80109a2:	2300      	movs	r3, #0
}
 80109a4:	4618      	mov	r0, r3
 80109a6:	3708      	adds	r7, #8
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}

080109ac <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80109ac:	b480      	push	{r7}
 80109ae:	b083      	sub	sp, #12
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80109b4:	2300      	movs	r3, #0
}
 80109b6:	4618      	mov	r0, r3
 80109b8:	370c      	adds	r7, #12
 80109ba:	46bd      	mov	sp, r7
 80109bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c0:	4770      	bx	lr

080109c2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80109c2:	b580      	push	{r7, lr}
 80109c4:	b082      	sub	sp, #8
 80109c6:	af00      	add	r7, sp, #0
 80109c8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	2201      	movs	r2, #1
 80109ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d009      	beq.n	80109f0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109e2:	685b      	ldr	r3, [r3, #4]
 80109e4:	687a      	ldr	r2, [r7, #4]
 80109e6:	6852      	ldr	r2, [r2, #4]
 80109e8:	b2d2      	uxtb	r2, r2
 80109ea:	4611      	mov	r1, r2
 80109ec:	6878      	ldr	r0, [r7, #4]
 80109ee:	4798      	blx	r3
  }

  return USBD_OK;
 80109f0:	2300      	movs	r3, #0
}
 80109f2:	4618      	mov	r0, r3
 80109f4:	3708      	adds	r7, #8
 80109f6:	46bd      	mov	sp, r7
 80109f8:	bd80      	pop	{r7, pc}

080109fa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80109fa:	b480      	push	{r7}
 80109fc:	b087      	sub	sp, #28
 80109fe:	af00      	add	r7, sp, #0
 8010a00:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010a06:	697b      	ldr	r3, [r7, #20]
 8010a08:	781b      	ldrb	r3, [r3, #0]
 8010a0a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010a0c:	697b      	ldr	r3, [r7, #20]
 8010a0e:	3301      	adds	r3, #1
 8010a10:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010a12:	697b      	ldr	r3, [r7, #20]
 8010a14:	781b      	ldrb	r3, [r3, #0]
 8010a16:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010a18:	8a3b      	ldrh	r3, [r7, #16]
 8010a1a:	021b      	lsls	r3, r3, #8
 8010a1c:	b21a      	sxth	r2, r3
 8010a1e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010a22:	4313      	orrs	r3, r2
 8010a24:	b21b      	sxth	r3, r3
 8010a26:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010a28:	89fb      	ldrh	r3, [r7, #14]
}
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	371c      	adds	r7, #28
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a34:	4770      	bx	lr
	...

08010a38 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b084      	sub	sp, #16
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
 8010a40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010a42:	2300      	movs	r3, #0
 8010a44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	781b      	ldrb	r3, [r3, #0]
 8010a4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010a4e:	2b40      	cmp	r3, #64	; 0x40
 8010a50:	d005      	beq.n	8010a5e <USBD_StdDevReq+0x26>
 8010a52:	2b40      	cmp	r3, #64	; 0x40
 8010a54:	d853      	bhi.n	8010afe <USBD_StdDevReq+0xc6>
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d00b      	beq.n	8010a72 <USBD_StdDevReq+0x3a>
 8010a5a:	2b20      	cmp	r3, #32
 8010a5c:	d14f      	bne.n	8010afe <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a64:	689b      	ldr	r3, [r3, #8]
 8010a66:	6839      	ldr	r1, [r7, #0]
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	4798      	blx	r3
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8010a70:	e04a      	b.n	8010b08 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	785b      	ldrb	r3, [r3, #1]
 8010a76:	2b09      	cmp	r3, #9
 8010a78:	d83b      	bhi.n	8010af2 <USBD_StdDevReq+0xba>
 8010a7a:	a201      	add	r2, pc, #4	; (adr r2, 8010a80 <USBD_StdDevReq+0x48>)
 8010a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a80:	08010ad5 	.word	0x08010ad5
 8010a84:	08010ae9 	.word	0x08010ae9
 8010a88:	08010af3 	.word	0x08010af3
 8010a8c:	08010adf 	.word	0x08010adf
 8010a90:	08010af3 	.word	0x08010af3
 8010a94:	08010ab3 	.word	0x08010ab3
 8010a98:	08010aa9 	.word	0x08010aa9
 8010a9c:	08010af3 	.word	0x08010af3
 8010aa0:	08010acb 	.word	0x08010acb
 8010aa4:	08010abd 	.word	0x08010abd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010aa8:	6839      	ldr	r1, [r7, #0]
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f000 f9de 	bl	8010e6c <USBD_GetDescriptor>
          break;
 8010ab0:	e024      	b.n	8010afc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010ab2:	6839      	ldr	r1, [r7, #0]
 8010ab4:	6878      	ldr	r0, [r7, #4]
 8010ab6:	f000 fb6d 	bl	8011194 <USBD_SetAddress>
          break;
 8010aba:	e01f      	b.n	8010afc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010abc:	6839      	ldr	r1, [r7, #0]
 8010abe:	6878      	ldr	r0, [r7, #4]
 8010ac0:	f000 fbac 	bl	801121c <USBD_SetConfig>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	73fb      	strb	r3, [r7, #15]
          break;
 8010ac8:	e018      	b.n	8010afc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010aca:	6839      	ldr	r1, [r7, #0]
 8010acc:	6878      	ldr	r0, [r7, #4]
 8010ace:	f000 fc4b 	bl	8011368 <USBD_GetConfig>
          break;
 8010ad2:	e013      	b.n	8010afc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010ad4:	6839      	ldr	r1, [r7, #0]
 8010ad6:	6878      	ldr	r0, [r7, #4]
 8010ad8:	f000 fc7c 	bl	80113d4 <USBD_GetStatus>
          break;
 8010adc:	e00e      	b.n	8010afc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010ade:	6839      	ldr	r1, [r7, #0]
 8010ae0:	6878      	ldr	r0, [r7, #4]
 8010ae2:	f000 fcab 	bl	801143c <USBD_SetFeature>
          break;
 8010ae6:	e009      	b.n	8010afc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010ae8:	6839      	ldr	r1, [r7, #0]
 8010aea:	6878      	ldr	r0, [r7, #4]
 8010aec:	f000 fcba 	bl	8011464 <USBD_ClrFeature>
          break;
 8010af0:	e004      	b.n	8010afc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8010af2:	6839      	ldr	r1, [r7, #0]
 8010af4:	6878      	ldr	r0, [r7, #4]
 8010af6:	f000 fd11 	bl	801151c <USBD_CtlError>
          break;
 8010afa:	bf00      	nop
      }
      break;
 8010afc:	e004      	b.n	8010b08 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8010afe:	6839      	ldr	r1, [r7, #0]
 8010b00:	6878      	ldr	r0, [r7, #4]
 8010b02:	f000 fd0b 	bl	801151c <USBD_CtlError>
      break;
 8010b06:	bf00      	nop
  }

  return ret;
 8010b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	3710      	adds	r7, #16
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	bd80      	pop	{r7, pc}
 8010b12:	bf00      	nop

08010b14 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b084      	sub	sp, #16
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
 8010b1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010b1e:	2300      	movs	r3, #0
 8010b20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	781b      	ldrb	r3, [r3, #0]
 8010b26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010b2a:	2b40      	cmp	r3, #64	; 0x40
 8010b2c:	d005      	beq.n	8010b3a <USBD_StdItfReq+0x26>
 8010b2e:	2b40      	cmp	r3, #64	; 0x40
 8010b30:	d82f      	bhi.n	8010b92 <USBD_StdItfReq+0x7e>
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d001      	beq.n	8010b3a <USBD_StdItfReq+0x26>
 8010b36:	2b20      	cmp	r3, #32
 8010b38:	d12b      	bne.n	8010b92 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b40:	b2db      	uxtb	r3, r3
 8010b42:	3b01      	subs	r3, #1
 8010b44:	2b02      	cmp	r3, #2
 8010b46:	d81d      	bhi.n	8010b84 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	889b      	ldrh	r3, [r3, #4]
 8010b4c:	b2db      	uxtb	r3, r3
 8010b4e:	2b01      	cmp	r3, #1
 8010b50:	d813      	bhi.n	8010b7a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b58:	689b      	ldr	r3, [r3, #8]
 8010b5a:	6839      	ldr	r1, [r7, #0]
 8010b5c:	6878      	ldr	r0, [r7, #4]
 8010b5e:	4798      	blx	r3
 8010b60:	4603      	mov	r3, r0
 8010b62:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	88db      	ldrh	r3, [r3, #6]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d110      	bne.n	8010b8e <USBD_StdItfReq+0x7a>
 8010b6c:	7bfb      	ldrb	r3, [r7, #15]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d10d      	bne.n	8010b8e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010b72:	6878      	ldr	r0, [r7, #4]
 8010b74:	f000 fd9d 	bl	80116b2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010b78:	e009      	b.n	8010b8e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8010b7a:	6839      	ldr	r1, [r7, #0]
 8010b7c:	6878      	ldr	r0, [r7, #4]
 8010b7e:	f000 fccd 	bl	801151c <USBD_CtlError>
          break;
 8010b82:	e004      	b.n	8010b8e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8010b84:	6839      	ldr	r1, [r7, #0]
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	f000 fcc8 	bl	801151c <USBD_CtlError>
          break;
 8010b8c:	e000      	b.n	8010b90 <USBD_StdItfReq+0x7c>
          break;
 8010b8e:	bf00      	nop
      }
      break;
 8010b90:	e004      	b.n	8010b9c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8010b92:	6839      	ldr	r1, [r7, #0]
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f000 fcc1 	bl	801151c <USBD_CtlError>
      break;
 8010b9a:	bf00      	nop
  }

  return ret;
 8010b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3710      	adds	r7, #16
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}

08010ba6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ba6:	b580      	push	{r7, lr}
 8010ba8:	b084      	sub	sp, #16
 8010baa:	af00      	add	r7, sp, #0
 8010bac:	6078      	str	r0, [r7, #4]
 8010bae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	889b      	ldrh	r3, [r3, #4]
 8010bb8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	781b      	ldrb	r3, [r3, #0]
 8010bbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010bc2:	2b40      	cmp	r3, #64	; 0x40
 8010bc4:	d007      	beq.n	8010bd6 <USBD_StdEPReq+0x30>
 8010bc6:	2b40      	cmp	r3, #64	; 0x40
 8010bc8:	f200 8145 	bhi.w	8010e56 <USBD_StdEPReq+0x2b0>
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d00c      	beq.n	8010bea <USBD_StdEPReq+0x44>
 8010bd0:	2b20      	cmp	r3, #32
 8010bd2:	f040 8140 	bne.w	8010e56 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bdc:	689b      	ldr	r3, [r3, #8]
 8010bde:	6839      	ldr	r1, [r7, #0]
 8010be0:	6878      	ldr	r0, [r7, #4]
 8010be2:	4798      	blx	r3
 8010be4:	4603      	mov	r3, r0
 8010be6:	73fb      	strb	r3, [r7, #15]
      break;
 8010be8:	e13a      	b.n	8010e60 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010bea:	683b      	ldr	r3, [r7, #0]
 8010bec:	785b      	ldrb	r3, [r3, #1]
 8010bee:	2b03      	cmp	r3, #3
 8010bf0:	d007      	beq.n	8010c02 <USBD_StdEPReq+0x5c>
 8010bf2:	2b03      	cmp	r3, #3
 8010bf4:	f300 8129 	bgt.w	8010e4a <USBD_StdEPReq+0x2a4>
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d07f      	beq.n	8010cfc <USBD_StdEPReq+0x156>
 8010bfc:	2b01      	cmp	r3, #1
 8010bfe:	d03c      	beq.n	8010c7a <USBD_StdEPReq+0xd4>
 8010c00:	e123      	b.n	8010e4a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c08:	b2db      	uxtb	r3, r3
 8010c0a:	2b02      	cmp	r3, #2
 8010c0c:	d002      	beq.n	8010c14 <USBD_StdEPReq+0x6e>
 8010c0e:	2b03      	cmp	r3, #3
 8010c10:	d016      	beq.n	8010c40 <USBD_StdEPReq+0x9a>
 8010c12:	e02c      	b.n	8010c6e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010c14:	7bbb      	ldrb	r3, [r7, #14]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d00d      	beq.n	8010c36 <USBD_StdEPReq+0x90>
 8010c1a:	7bbb      	ldrb	r3, [r7, #14]
 8010c1c:	2b80      	cmp	r3, #128	; 0x80
 8010c1e:	d00a      	beq.n	8010c36 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010c20:	7bbb      	ldrb	r3, [r7, #14]
 8010c22:	4619      	mov	r1, r3
 8010c24:	6878      	ldr	r0, [r7, #4]
 8010c26:	f001 f9b7 	bl	8011f98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010c2a:	2180      	movs	r1, #128	; 0x80
 8010c2c:	6878      	ldr	r0, [r7, #4]
 8010c2e:	f001 f9b3 	bl	8011f98 <USBD_LL_StallEP>
 8010c32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010c34:	e020      	b.n	8010c78 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8010c36:	6839      	ldr	r1, [r7, #0]
 8010c38:	6878      	ldr	r0, [r7, #4]
 8010c3a:	f000 fc6f 	bl	801151c <USBD_CtlError>
              break;
 8010c3e:	e01b      	b.n	8010c78 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	885b      	ldrh	r3, [r3, #2]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d10e      	bne.n	8010c66 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010c48:	7bbb      	ldrb	r3, [r7, #14]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d00b      	beq.n	8010c66 <USBD_StdEPReq+0xc0>
 8010c4e:	7bbb      	ldrb	r3, [r7, #14]
 8010c50:	2b80      	cmp	r3, #128	; 0x80
 8010c52:	d008      	beq.n	8010c66 <USBD_StdEPReq+0xc0>
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	88db      	ldrh	r3, [r3, #6]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d104      	bne.n	8010c66 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010c5c:	7bbb      	ldrb	r3, [r7, #14]
 8010c5e:	4619      	mov	r1, r3
 8010c60:	6878      	ldr	r0, [r7, #4]
 8010c62:	f001 f999 	bl	8011f98 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	f000 fd23 	bl	80116b2 <USBD_CtlSendStatus>

              break;
 8010c6c:	e004      	b.n	8010c78 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8010c6e:	6839      	ldr	r1, [r7, #0]
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f000 fc53 	bl	801151c <USBD_CtlError>
              break;
 8010c76:	bf00      	nop
          }
          break;
 8010c78:	e0ec      	b.n	8010e54 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c80:	b2db      	uxtb	r3, r3
 8010c82:	2b02      	cmp	r3, #2
 8010c84:	d002      	beq.n	8010c8c <USBD_StdEPReq+0xe6>
 8010c86:	2b03      	cmp	r3, #3
 8010c88:	d016      	beq.n	8010cb8 <USBD_StdEPReq+0x112>
 8010c8a:	e030      	b.n	8010cee <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010c8c:	7bbb      	ldrb	r3, [r7, #14]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d00d      	beq.n	8010cae <USBD_StdEPReq+0x108>
 8010c92:	7bbb      	ldrb	r3, [r7, #14]
 8010c94:	2b80      	cmp	r3, #128	; 0x80
 8010c96:	d00a      	beq.n	8010cae <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010c98:	7bbb      	ldrb	r3, [r7, #14]
 8010c9a:	4619      	mov	r1, r3
 8010c9c:	6878      	ldr	r0, [r7, #4]
 8010c9e:	f001 f97b 	bl	8011f98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010ca2:	2180      	movs	r1, #128	; 0x80
 8010ca4:	6878      	ldr	r0, [r7, #4]
 8010ca6:	f001 f977 	bl	8011f98 <USBD_LL_StallEP>
 8010caa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010cac:	e025      	b.n	8010cfa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8010cae:	6839      	ldr	r1, [r7, #0]
 8010cb0:	6878      	ldr	r0, [r7, #4]
 8010cb2:	f000 fc33 	bl	801151c <USBD_CtlError>
              break;
 8010cb6:	e020      	b.n	8010cfa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	885b      	ldrh	r3, [r3, #2]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d11b      	bne.n	8010cf8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010cc0:	7bbb      	ldrb	r3, [r7, #14]
 8010cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d004      	beq.n	8010cd4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010cca:	7bbb      	ldrb	r3, [r7, #14]
 8010ccc:	4619      	mov	r1, r3
 8010cce:	6878      	ldr	r0, [r7, #4]
 8010cd0:	f001 f998 	bl	8012004 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010cd4:	6878      	ldr	r0, [r7, #4]
 8010cd6:	f000 fcec 	bl	80116b2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ce0:	689b      	ldr	r3, [r3, #8]
 8010ce2:	6839      	ldr	r1, [r7, #0]
 8010ce4:	6878      	ldr	r0, [r7, #4]
 8010ce6:	4798      	blx	r3
 8010ce8:	4603      	mov	r3, r0
 8010cea:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8010cec:	e004      	b.n	8010cf8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8010cee:	6839      	ldr	r1, [r7, #0]
 8010cf0:	6878      	ldr	r0, [r7, #4]
 8010cf2:	f000 fc13 	bl	801151c <USBD_CtlError>
              break;
 8010cf6:	e000      	b.n	8010cfa <USBD_StdEPReq+0x154>
              break;
 8010cf8:	bf00      	nop
          }
          break;
 8010cfa:	e0ab      	b.n	8010e54 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d02:	b2db      	uxtb	r3, r3
 8010d04:	2b02      	cmp	r3, #2
 8010d06:	d002      	beq.n	8010d0e <USBD_StdEPReq+0x168>
 8010d08:	2b03      	cmp	r3, #3
 8010d0a:	d032      	beq.n	8010d72 <USBD_StdEPReq+0x1cc>
 8010d0c:	e097      	b.n	8010e3e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010d0e:	7bbb      	ldrb	r3, [r7, #14]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d007      	beq.n	8010d24 <USBD_StdEPReq+0x17e>
 8010d14:	7bbb      	ldrb	r3, [r7, #14]
 8010d16:	2b80      	cmp	r3, #128	; 0x80
 8010d18:	d004      	beq.n	8010d24 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8010d1a:	6839      	ldr	r1, [r7, #0]
 8010d1c:	6878      	ldr	r0, [r7, #4]
 8010d1e:	f000 fbfd 	bl	801151c <USBD_CtlError>
                break;
 8010d22:	e091      	b.n	8010e48 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010d24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	da0b      	bge.n	8010d44 <USBD_StdEPReq+0x19e>
 8010d2c:	7bbb      	ldrb	r3, [r7, #14]
 8010d2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010d32:	4613      	mov	r3, r2
 8010d34:	009b      	lsls	r3, r3, #2
 8010d36:	4413      	add	r3, r2
 8010d38:	009b      	lsls	r3, r3, #2
 8010d3a:	3310      	adds	r3, #16
 8010d3c:	687a      	ldr	r2, [r7, #4]
 8010d3e:	4413      	add	r3, r2
 8010d40:	3304      	adds	r3, #4
 8010d42:	e00b      	b.n	8010d5c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010d44:	7bbb      	ldrb	r3, [r7, #14]
 8010d46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010d4a:	4613      	mov	r3, r2
 8010d4c:	009b      	lsls	r3, r3, #2
 8010d4e:	4413      	add	r3, r2
 8010d50:	009b      	lsls	r3, r3, #2
 8010d52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010d56:	687a      	ldr	r2, [r7, #4]
 8010d58:	4413      	add	r3, r2
 8010d5a:	3304      	adds	r3, #4
 8010d5c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	2200      	movs	r2, #0
 8010d62:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010d64:	68bb      	ldr	r3, [r7, #8]
 8010d66:	2202      	movs	r2, #2
 8010d68:	4619      	mov	r1, r3
 8010d6a:	6878      	ldr	r0, [r7, #4]
 8010d6c:	f000 fc47 	bl	80115fe <USBD_CtlSendData>
              break;
 8010d70:	e06a      	b.n	8010e48 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010d72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	da11      	bge.n	8010d9e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010d7a:	7bbb      	ldrb	r3, [r7, #14]
 8010d7c:	f003 020f 	and.w	r2, r3, #15
 8010d80:	6879      	ldr	r1, [r7, #4]
 8010d82:	4613      	mov	r3, r2
 8010d84:	009b      	lsls	r3, r3, #2
 8010d86:	4413      	add	r3, r2
 8010d88:	009b      	lsls	r3, r3, #2
 8010d8a:	440b      	add	r3, r1
 8010d8c:	3324      	adds	r3, #36	; 0x24
 8010d8e:	881b      	ldrh	r3, [r3, #0]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d117      	bne.n	8010dc4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010d94:	6839      	ldr	r1, [r7, #0]
 8010d96:	6878      	ldr	r0, [r7, #4]
 8010d98:	f000 fbc0 	bl	801151c <USBD_CtlError>
                  break;
 8010d9c:	e054      	b.n	8010e48 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010d9e:	7bbb      	ldrb	r3, [r7, #14]
 8010da0:	f003 020f 	and.w	r2, r3, #15
 8010da4:	6879      	ldr	r1, [r7, #4]
 8010da6:	4613      	mov	r3, r2
 8010da8:	009b      	lsls	r3, r3, #2
 8010daa:	4413      	add	r3, r2
 8010dac:	009b      	lsls	r3, r3, #2
 8010dae:	440b      	add	r3, r1
 8010db0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010db4:	881b      	ldrh	r3, [r3, #0]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d104      	bne.n	8010dc4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010dba:	6839      	ldr	r1, [r7, #0]
 8010dbc:	6878      	ldr	r0, [r7, #4]
 8010dbe:	f000 fbad 	bl	801151c <USBD_CtlError>
                  break;
 8010dc2:	e041      	b.n	8010e48 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010dc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	da0b      	bge.n	8010de4 <USBD_StdEPReq+0x23e>
 8010dcc:	7bbb      	ldrb	r3, [r7, #14]
 8010dce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010dd2:	4613      	mov	r3, r2
 8010dd4:	009b      	lsls	r3, r3, #2
 8010dd6:	4413      	add	r3, r2
 8010dd8:	009b      	lsls	r3, r3, #2
 8010dda:	3310      	adds	r3, #16
 8010ddc:	687a      	ldr	r2, [r7, #4]
 8010dde:	4413      	add	r3, r2
 8010de0:	3304      	adds	r3, #4
 8010de2:	e00b      	b.n	8010dfc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010de4:	7bbb      	ldrb	r3, [r7, #14]
 8010de6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010dea:	4613      	mov	r3, r2
 8010dec:	009b      	lsls	r3, r3, #2
 8010dee:	4413      	add	r3, r2
 8010df0:	009b      	lsls	r3, r3, #2
 8010df2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010df6:	687a      	ldr	r2, [r7, #4]
 8010df8:	4413      	add	r3, r2
 8010dfa:	3304      	adds	r3, #4
 8010dfc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010dfe:	7bbb      	ldrb	r3, [r7, #14]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d002      	beq.n	8010e0a <USBD_StdEPReq+0x264>
 8010e04:	7bbb      	ldrb	r3, [r7, #14]
 8010e06:	2b80      	cmp	r3, #128	; 0x80
 8010e08:	d103      	bne.n	8010e12 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8010e0a:	68bb      	ldr	r3, [r7, #8]
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	601a      	str	r2, [r3, #0]
 8010e10:	e00e      	b.n	8010e30 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010e12:	7bbb      	ldrb	r3, [r7, #14]
 8010e14:	4619      	mov	r1, r3
 8010e16:	6878      	ldr	r0, [r7, #4]
 8010e18:	f001 f92a 	bl	8012070 <USBD_LL_IsStallEP>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d003      	beq.n	8010e2a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8010e22:	68bb      	ldr	r3, [r7, #8]
 8010e24:	2201      	movs	r2, #1
 8010e26:	601a      	str	r2, [r3, #0]
 8010e28:	e002      	b.n	8010e30 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8010e2a:	68bb      	ldr	r3, [r7, #8]
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	2202      	movs	r2, #2
 8010e34:	4619      	mov	r1, r3
 8010e36:	6878      	ldr	r0, [r7, #4]
 8010e38:	f000 fbe1 	bl	80115fe <USBD_CtlSendData>
              break;
 8010e3c:	e004      	b.n	8010e48 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8010e3e:	6839      	ldr	r1, [r7, #0]
 8010e40:	6878      	ldr	r0, [r7, #4]
 8010e42:	f000 fb6b 	bl	801151c <USBD_CtlError>
              break;
 8010e46:	bf00      	nop
          }
          break;
 8010e48:	e004      	b.n	8010e54 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8010e4a:	6839      	ldr	r1, [r7, #0]
 8010e4c:	6878      	ldr	r0, [r7, #4]
 8010e4e:	f000 fb65 	bl	801151c <USBD_CtlError>
          break;
 8010e52:	bf00      	nop
      }
      break;
 8010e54:	e004      	b.n	8010e60 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8010e56:	6839      	ldr	r1, [r7, #0]
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	f000 fb5f 	bl	801151c <USBD_CtlError>
      break;
 8010e5e:	bf00      	nop
  }

  return ret;
 8010e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e62:	4618      	mov	r0, r3
 8010e64:	3710      	adds	r7, #16
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}
	...

08010e6c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b084      	sub	sp, #16
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
 8010e74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010e76:	2300      	movs	r3, #0
 8010e78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010e7e:	2300      	movs	r3, #0
 8010e80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	885b      	ldrh	r3, [r3, #2]
 8010e86:	0a1b      	lsrs	r3, r3, #8
 8010e88:	b29b      	uxth	r3, r3
 8010e8a:	3b01      	subs	r3, #1
 8010e8c:	2b0e      	cmp	r3, #14
 8010e8e:	f200 8152 	bhi.w	8011136 <USBD_GetDescriptor+0x2ca>
 8010e92:	a201      	add	r2, pc, #4	; (adr r2, 8010e98 <USBD_GetDescriptor+0x2c>)
 8010e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e98:	08010f09 	.word	0x08010f09
 8010e9c:	08010f21 	.word	0x08010f21
 8010ea0:	08010f61 	.word	0x08010f61
 8010ea4:	08011137 	.word	0x08011137
 8010ea8:	08011137 	.word	0x08011137
 8010eac:	080110d7 	.word	0x080110d7
 8010eb0:	08011103 	.word	0x08011103
 8010eb4:	08011137 	.word	0x08011137
 8010eb8:	08011137 	.word	0x08011137
 8010ebc:	08011137 	.word	0x08011137
 8010ec0:	08011137 	.word	0x08011137
 8010ec4:	08011137 	.word	0x08011137
 8010ec8:	08011137 	.word	0x08011137
 8010ecc:	08011137 	.word	0x08011137
 8010ed0:	08010ed5 	.word	0x08010ed5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010eda:	69db      	ldr	r3, [r3, #28]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d00b      	beq.n	8010ef8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010ee6:	69db      	ldr	r3, [r3, #28]
 8010ee8:	687a      	ldr	r2, [r7, #4]
 8010eea:	7c12      	ldrb	r2, [r2, #16]
 8010eec:	f107 0108 	add.w	r1, r7, #8
 8010ef0:	4610      	mov	r0, r2
 8010ef2:	4798      	blx	r3
 8010ef4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010ef6:	e126      	b.n	8011146 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010ef8:	6839      	ldr	r1, [r7, #0]
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f000 fb0e 	bl	801151c <USBD_CtlError>
        err++;
 8010f00:	7afb      	ldrb	r3, [r7, #11]
 8010f02:	3301      	adds	r3, #1
 8010f04:	72fb      	strb	r3, [r7, #11]
      break;
 8010f06:	e11e      	b.n	8011146 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	687a      	ldr	r2, [r7, #4]
 8010f12:	7c12      	ldrb	r2, [r2, #16]
 8010f14:	f107 0108 	add.w	r1, r7, #8
 8010f18:	4610      	mov	r0, r2
 8010f1a:	4798      	blx	r3
 8010f1c:	60f8      	str	r0, [r7, #12]
      break;
 8010f1e:	e112      	b.n	8011146 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	7c1b      	ldrb	r3, [r3, #16]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d10d      	bne.n	8010f44 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f30:	f107 0208 	add.w	r2, r7, #8
 8010f34:	4610      	mov	r0, r2
 8010f36:	4798      	blx	r3
 8010f38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	3301      	adds	r3, #1
 8010f3e:	2202      	movs	r2, #2
 8010f40:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010f42:	e100      	b.n	8011146 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f4c:	f107 0208 	add.w	r2, r7, #8
 8010f50:	4610      	mov	r0, r2
 8010f52:	4798      	blx	r3
 8010f54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	3301      	adds	r3, #1
 8010f5a:	2202      	movs	r2, #2
 8010f5c:	701a      	strb	r2, [r3, #0]
      break;
 8010f5e:	e0f2      	b.n	8011146 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010f60:	683b      	ldr	r3, [r7, #0]
 8010f62:	885b      	ldrh	r3, [r3, #2]
 8010f64:	b2db      	uxtb	r3, r3
 8010f66:	2b05      	cmp	r3, #5
 8010f68:	f200 80ac 	bhi.w	80110c4 <USBD_GetDescriptor+0x258>
 8010f6c:	a201      	add	r2, pc, #4	; (adr r2, 8010f74 <USBD_GetDescriptor+0x108>)
 8010f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f72:	bf00      	nop
 8010f74:	08010f8d 	.word	0x08010f8d
 8010f78:	08010fc1 	.word	0x08010fc1
 8010f7c:	08010ff5 	.word	0x08010ff5
 8010f80:	08011029 	.word	0x08011029
 8010f84:	0801105d 	.word	0x0801105d
 8010f88:	08011091 	.word	0x08011091
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f92:	685b      	ldr	r3, [r3, #4]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d00b      	beq.n	8010fb0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f9e:	685b      	ldr	r3, [r3, #4]
 8010fa0:	687a      	ldr	r2, [r7, #4]
 8010fa2:	7c12      	ldrb	r2, [r2, #16]
 8010fa4:	f107 0108 	add.w	r1, r7, #8
 8010fa8:	4610      	mov	r0, r2
 8010faa:	4798      	blx	r3
 8010fac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010fae:	e091      	b.n	80110d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010fb0:	6839      	ldr	r1, [r7, #0]
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f000 fab2 	bl	801151c <USBD_CtlError>
            err++;
 8010fb8:	7afb      	ldrb	r3, [r7, #11]
 8010fba:	3301      	adds	r3, #1
 8010fbc:	72fb      	strb	r3, [r7, #11]
          break;
 8010fbe:	e089      	b.n	80110d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010fc6:	689b      	ldr	r3, [r3, #8]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d00b      	beq.n	8010fe4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010fd2:	689b      	ldr	r3, [r3, #8]
 8010fd4:	687a      	ldr	r2, [r7, #4]
 8010fd6:	7c12      	ldrb	r2, [r2, #16]
 8010fd8:	f107 0108 	add.w	r1, r7, #8
 8010fdc:	4610      	mov	r0, r2
 8010fde:	4798      	blx	r3
 8010fe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010fe2:	e077      	b.n	80110d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010fe4:	6839      	ldr	r1, [r7, #0]
 8010fe6:	6878      	ldr	r0, [r7, #4]
 8010fe8:	f000 fa98 	bl	801151c <USBD_CtlError>
            err++;
 8010fec:	7afb      	ldrb	r3, [r7, #11]
 8010fee:	3301      	adds	r3, #1
 8010ff0:	72fb      	strb	r3, [r7, #11]
          break;
 8010ff2:	e06f      	b.n	80110d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010ffa:	68db      	ldr	r3, [r3, #12]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d00b      	beq.n	8011018 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011006:	68db      	ldr	r3, [r3, #12]
 8011008:	687a      	ldr	r2, [r7, #4]
 801100a:	7c12      	ldrb	r2, [r2, #16]
 801100c:	f107 0108 	add.w	r1, r7, #8
 8011010:	4610      	mov	r0, r2
 8011012:	4798      	blx	r3
 8011014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011016:	e05d      	b.n	80110d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011018:	6839      	ldr	r1, [r7, #0]
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f000 fa7e 	bl	801151c <USBD_CtlError>
            err++;
 8011020:	7afb      	ldrb	r3, [r7, #11]
 8011022:	3301      	adds	r3, #1
 8011024:	72fb      	strb	r3, [r7, #11]
          break;
 8011026:	e055      	b.n	80110d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801102e:	691b      	ldr	r3, [r3, #16]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d00b      	beq.n	801104c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801103a:	691b      	ldr	r3, [r3, #16]
 801103c:	687a      	ldr	r2, [r7, #4]
 801103e:	7c12      	ldrb	r2, [r2, #16]
 8011040:	f107 0108 	add.w	r1, r7, #8
 8011044:	4610      	mov	r0, r2
 8011046:	4798      	blx	r3
 8011048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801104a:	e043      	b.n	80110d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801104c:	6839      	ldr	r1, [r7, #0]
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f000 fa64 	bl	801151c <USBD_CtlError>
            err++;
 8011054:	7afb      	ldrb	r3, [r7, #11]
 8011056:	3301      	adds	r3, #1
 8011058:	72fb      	strb	r3, [r7, #11]
          break;
 801105a:	e03b      	b.n	80110d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011062:	695b      	ldr	r3, [r3, #20]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d00b      	beq.n	8011080 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801106e:	695b      	ldr	r3, [r3, #20]
 8011070:	687a      	ldr	r2, [r7, #4]
 8011072:	7c12      	ldrb	r2, [r2, #16]
 8011074:	f107 0108 	add.w	r1, r7, #8
 8011078:	4610      	mov	r0, r2
 801107a:	4798      	blx	r3
 801107c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801107e:	e029      	b.n	80110d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011080:	6839      	ldr	r1, [r7, #0]
 8011082:	6878      	ldr	r0, [r7, #4]
 8011084:	f000 fa4a 	bl	801151c <USBD_CtlError>
            err++;
 8011088:	7afb      	ldrb	r3, [r7, #11]
 801108a:	3301      	adds	r3, #1
 801108c:	72fb      	strb	r3, [r7, #11]
          break;
 801108e:	e021      	b.n	80110d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011096:	699b      	ldr	r3, [r3, #24]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d00b      	beq.n	80110b4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80110a2:	699b      	ldr	r3, [r3, #24]
 80110a4:	687a      	ldr	r2, [r7, #4]
 80110a6:	7c12      	ldrb	r2, [r2, #16]
 80110a8:	f107 0108 	add.w	r1, r7, #8
 80110ac:	4610      	mov	r0, r2
 80110ae:	4798      	blx	r3
 80110b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80110b2:	e00f      	b.n	80110d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80110b4:	6839      	ldr	r1, [r7, #0]
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f000 fa30 	bl	801151c <USBD_CtlError>
            err++;
 80110bc:	7afb      	ldrb	r3, [r7, #11]
 80110be:	3301      	adds	r3, #1
 80110c0:	72fb      	strb	r3, [r7, #11]
          break;
 80110c2:	e007      	b.n	80110d4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80110c4:	6839      	ldr	r1, [r7, #0]
 80110c6:	6878      	ldr	r0, [r7, #4]
 80110c8:	f000 fa28 	bl	801151c <USBD_CtlError>
          err++;
 80110cc:	7afb      	ldrb	r3, [r7, #11]
 80110ce:	3301      	adds	r3, #1
 80110d0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80110d2:	bf00      	nop
      }
      break;
 80110d4:	e037      	b.n	8011146 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	7c1b      	ldrb	r3, [r3, #16]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d109      	bne.n	80110f2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110e6:	f107 0208 	add.w	r2, r7, #8
 80110ea:	4610      	mov	r0, r2
 80110ec:	4798      	blx	r3
 80110ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80110f0:	e029      	b.n	8011146 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80110f2:	6839      	ldr	r1, [r7, #0]
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f000 fa11 	bl	801151c <USBD_CtlError>
        err++;
 80110fa:	7afb      	ldrb	r3, [r7, #11]
 80110fc:	3301      	adds	r3, #1
 80110fe:	72fb      	strb	r3, [r7, #11]
      break;
 8011100:	e021      	b.n	8011146 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	7c1b      	ldrb	r3, [r3, #16]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d10d      	bne.n	8011126 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011112:	f107 0208 	add.w	r2, r7, #8
 8011116:	4610      	mov	r0, r2
 8011118:	4798      	blx	r3
 801111a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	3301      	adds	r3, #1
 8011120:	2207      	movs	r2, #7
 8011122:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011124:	e00f      	b.n	8011146 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011126:	6839      	ldr	r1, [r7, #0]
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f000 f9f7 	bl	801151c <USBD_CtlError>
        err++;
 801112e:	7afb      	ldrb	r3, [r7, #11]
 8011130:	3301      	adds	r3, #1
 8011132:	72fb      	strb	r3, [r7, #11]
      break;
 8011134:	e007      	b.n	8011146 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8011136:	6839      	ldr	r1, [r7, #0]
 8011138:	6878      	ldr	r0, [r7, #4]
 801113a:	f000 f9ef 	bl	801151c <USBD_CtlError>
      err++;
 801113e:	7afb      	ldrb	r3, [r7, #11]
 8011140:	3301      	adds	r3, #1
 8011142:	72fb      	strb	r3, [r7, #11]
      break;
 8011144:	bf00      	nop
  }

  if (err != 0U)
 8011146:	7afb      	ldrb	r3, [r7, #11]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d11e      	bne.n	801118a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	88db      	ldrh	r3, [r3, #6]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d016      	beq.n	8011182 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8011154:	893b      	ldrh	r3, [r7, #8]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d00e      	beq.n	8011178 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	88da      	ldrh	r2, [r3, #6]
 801115e:	893b      	ldrh	r3, [r7, #8]
 8011160:	4293      	cmp	r3, r2
 8011162:	bf28      	it	cs
 8011164:	4613      	movcs	r3, r2
 8011166:	b29b      	uxth	r3, r3
 8011168:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801116a:	893b      	ldrh	r3, [r7, #8]
 801116c:	461a      	mov	r2, r3
 801116e:	68f9      	ldr	r1, [r7, #12]
 8011170:	6878      	ldr	r0, [r7, #4]
 8011172:	f000 fa44 	bl	80115fe <USBD_CtlSendData>
 8011176:	e009      	b.n	801118c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011178:	6839      	ldr	r1, [r7, #0]
 801117a:	6878      	ldr	r0, [r7, #4]
 801117c:	f000 f9ce 	bl	801151c <USBD_CtlError>
 8011180:	e004      	b.n	801118c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	f000 fa95 	bl	80116b2 <USBD_CtlSendStatus>
 8011188:	e000      	b.n	801118c <USBD_GetDescriptor+0x320>
    return;
 801118a:	bf00      	nop
  }
}
 801118c:	3710      	adds	r7, #16
 801118e:	46bd      	mov	sp, r7
 8011190:	bd80      	pop	{r7, pc}
 8011192:	bf00      	nop

08011194 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011194:	b580      	push	{r7, lr}
 8011196:	b084      	sub	sp, #16
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
 801119c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	889b      	ldrh	r3, [r3, #4]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d131      	bne.n	801120a <USBD_SetAddress+0x76>
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	88db      	ldrh	r3, [r3, #6]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d12d      	bne.n	801120a <USBD_SetAddress+0x76>
 80111ae:	683b      	ldr	r3, [r7, #0]
 80111b0:	885b      	ldrh	r3, [r3, #2]
 80111b2:	2b7f      	cmp	r3, #127	; 0x7f
 80111b4:	d829      	bhi.n	801120a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80111b6:	683b      	ldr	r3, [r7, #0]
 80111b8:	885b      	ldrh	r3, [r3, #2]
 80111ba:	b2db      	uxtb	r3, r3
 80111bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111c8:	b2db      	uxtb	r3, r3
 80111ca:	2b03      	cmp	r3, #3
 80111cc:	d104      	bne.n	80111d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80111ce:	6839      	ldr	r1, [r7, #0]
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	f000 f9a3 	bl	801151c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80111d6:	e01d      	b.n	8011214 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	7bfa      	ldrb	r2, [r7, #15]
 80111dc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80111e0:	7bfb      	ldrb	r3, [r7, #15]
 80111e2:	4619      	mov	r1, r3
 80111e4:	6878      	ldr	r0, [r7, #4]
 80111e6:	f000 ff6f 	bl	80120c8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	f000 fa61 	bl	80116b2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80111f0:	7bfb      	ldrb	r3, [r7, #15]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d004      	beq.n	8011200 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	2202      	movs	r2, #2
 80111fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80111fe:	e009      	b.n	8011214 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2201      	movs	r2, #1
 8011204:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011208:	e004      	b.n	8011214 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801120a:	6839      	ldr	r1, [r7, #0]
 801120c:	6878      	ldr	r0, [r7, #4]
 801120e:	f000 f985 	bl	801151c <USBD_CtlError>
  }
}
 8011212:	bf00      	nop
 8011214:	bf00      	nop
 8011216:	3710      	adds	r7, #16
 8011218:	46bd      	mov	sp, r7
 801121a:	bd80      	pop	{r7, pc}

0801121c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b084      	sub	sp, #16
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
 8011224:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011226:	2300      	movs	r3, #0
 8011228:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	885b      	ldrh	r3, [r3, #2]
 801122e:	b2da      	uxtb	r2, r3
 8011230:	4b4c      	ldr	r3, [pc, #304]	; (8011364 <USBD_SetConfig+0x148>)
 8011232:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011234:	4b4b      	ldr	r3, [pc, #300]	; (8011364 <USBD_SetConfig+0x148>)
 8011236:	781b      	ldrb	r3, [r3, #0]
 8011238:	2b01      	cmp	r3, #1
 801123a:	d905      	bls.n	8011248 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801123c:	6839      	ldr	r1, [r7, #0]
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f000 f96c 	bl	801151c <USBD_CtlError>
    return USBD_FAIL;
 8011244:	2303      	movs	r3, #3
 8011246:	e088      	b.n	801135a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801124e:	b2db      	uxtb	r3, r3
 8011250:	2b02      	cmp	r3, #2
 8011252:	d002      	beq.n	801125a <USBD_SetConfig+0x3e>
 8011254:	2b03      	cmp	r3, #3
 8011256:	d025      	beq.n	80112a4 <USBD_SetConfig+0x88>
 8011258:	e071      	b.n	801133e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801125a:	4b42      	ldr	r3, [pc, #264]	; (8011364 <USBD_SetConfig+0x148>)
 801125c:	781b      	ldrb	r3, [r3, #0]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d01c      	beq.n	801129c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8011262:	4b40      	ldr	r3, [pc, #256]	; (8011364 <USBD_SetConfig+0x148>)
 8011264:	781b      	ldrb	r3, [r3, #0]
 8011266:	461a      	mov	r2, r3
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801126c:	4b3d      	ldr	r3, [pc, #244]	; (8011364 <USBD_SetConfig+0x148>)
 801126e:	781b      	ldrb	r3, [r3, #0]
 8011270:	4619      	mov	r1, r3
 8011272:	6878      	ldr	r0, [r7, #4]
 8011274:	f7ff f91e 	bl	80104b4 <USBD_SetClassConfig>
 8011278:	4603      	mov	r3, r0
 801127a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801127c:	7bfb      	ldrb	r3, [r7, #15]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d004      	beq.n	801128c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8011282:	6839      	ldr	r1, [r7, #0]
 8011284:	6878      	ldr	r0, [r7, #4]
 8011286:	f000 f949 	bl	801151c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801128a:	e065      	b.n	8011358 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801128c:	6878      	ldr	r0, [r7, #4]
 801128e:	f000 fa10 	bl	80116b2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	2203      	movs	r2, #3
 8011296:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801129a:	e05d      	b.n	8011358 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f000 fa08 	bl	80116b2 <USBD_CtlSendStatus>
      break;
 80112a2:	e059      	b.n	8011358 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80112a4:	4b2f      	ldr	r3, [pc, #188]	; (8011364 <USBD_SetConfig+0x148>)
 80112a6:	781b      	ldrb	r3, [r3, #0]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d112      	bne.n	80112d2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2202      	movs	r2, #2
 80112b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80112b4:	4b2b      	ldr	r3, [pc, #172]	; (8011364 <USBD_SetConfig+0x148>)
 80112b6:	781b      	ldrb	r3, [r3, #0]
 80112b8:	461a      	mov	r2, r3
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80112be:	4b29      	ldr	r3, [pc, #164]	; (8011364 <USBD_SetConfig+0x148>)
 80112c0:	781b      	ldrb	r3, [r3, #0]
 80112c2:	4619      	mov	r1, r3
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f7ff f911 	bl	80104ec <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80112ca:	6878      	ldr	r0, [r7, #4]
 80112cc:	f000 f9f1 	bl	80116b2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80112d0:	e042      	b.n	8011358 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80112d2:	4b24      	ldr	r3, [pc, #144]	; (8011364 <USBD_SetConfig+0x148>)
 80112d4:	781b      	ldrb	r3, [r3, #0]
 80112d6:	461a      	mov	r2, r3
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	685b      	ldr	r3, [r3, #4]
 80112dc:	429a      	cmp	r2, r3
 80112de:	d02a      	beq.n	8011336 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	685b      	ldr	r3, [r3, #4]
 80112e4:	b2db      	uxtb	r3, r3
 80112e6:	4619      	mov	r1, r3
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f7ff f8ff 	bl	80104ec <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80112ee:	4b1d      	ldr	r3, [pc, #116]	; (8011364 <USBD_SetConfig+0x148>)
 80112f0:	781b      	ldrb	r3, [r3, #0]
 80112f2:	461a      	mov	r2, r3
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80112f8:	4b1a      	ldr	r3, [pc, #104]	; (8011364 <USBD_SetConfig+0x148>)
 80112fa:	781b      	ldrb	r3, [r3, #0]
 80112fc:	4619      	mov	r1, r3
 80112fe:	6878      	ldr	r0, [r7, #4]
 8011300:	f7ff f8d8 	bl	80104b4 <USBD_SetClassConfig>
 8011304:	4603      	mov	r3, r0
 8011306:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011308:	7bfb      	ldrb	r3, [r7, #15]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d00f      	beq.n	801132e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801130e:	6839      	ldr	r1, [r7, #0]
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f000 f903 	bl	801151c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	685b      	ldr	r3, [r3, #4]
 801131a:	b2db      	uxtb	r3, r3
 801131c:	4619      	mov	r1, r3
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f7ff f8e4 	bl	80104ec <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2202      	movs	r2, #2
 8011328:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801132c:	e014      	b.n	8011358 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801132e:	6878      	ldr	r0, [r7, #4]
 8011330:	f000 f9bf 	bl	80116b2 <USBD_CtlSendStatus>
      break;
 8011334:	e010      	b.n	8011358 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011336:	6878      	ldr	r0, [r7, #4]
 8011338:	f000 f9bb 	bl	80116b2 <USBD_CtlSendStatus>
      break;
 801133c:	e00c      	b.n	8011358 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801133e:	6839      	ldr	r1, [r7, #0]
 8011340:	6878      	ldr	r0, [r7, #4]
 8011342:	f000 f8eb 	bl	801151c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011346:	4b07      	ldr	r3, [pc, #28]	; (8011364 <USBD_SetConfig+0x148>)
 8011348:	781b      	ldrb	r3, [r3, #0]
 801134a:	4619      	mov	r1, r3
 801134c:	6878      	ldr	r0, [r7, #4]
 801134e:	f7ff f8cd 	bl	80104ec <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011352:	2303      	movs	r3, #3
 8011354:	73fb      	strb	r3, [r7, #15]
      break;
 8011356:	bf00      	nop
  }

  return ret;
 8011358:	7bfb      	ldrb	r3, [r7, #15]
}
 801135a:	4618      	mov	r0, r3
 801135c:	3710      	adds	r7, #16
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}
 8011362:	bf00      	nop
 8011364:	20000e34 	.word	0x20000e34

08011368 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011368:	b580      	push	{r7, lr}
 801136a:	b082      	sub	sp, #8
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
 8011370:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	88db      	ldrh	r3, [r3, #6]
 8011376:	2b01      	cmp	r3, #1
 8011378:	d004      	beq.n	8011384 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801137a:	6839      	ldr	r1, [r7, #0]
 801137c:	6878      	ldr	r0, [r7, #4]
 801137e:	f000 f8cd 	bl	801151c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011382:	e023      	b.n	80113cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801138a:	b2db      	uxtb	r3, r3
 801138c:	2b02      	cmp	r3, #2
 801138e:	dc02      	bgt.n	8011396 <USBD_GetConfig+0x2e>
 8011390:	2b00      	cmp	r3, #0
 8011392:	dc03      	bgt.n	801139c <USBD_GetConfig+0x34>
 8011394:	e015      	b.n	80113c2 <USBD_GetConfig+0x5a>
 8011396:	2b03      	cmp	r3, #3
 8011398:	d00b      	beq.n	80113b2 <USBD_GetConfig+0x4a>
 801139a:	e012      	b.n	80113c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	2200      	movs	r2, #0
 80113a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	3308      	adds	r3, #8
 80113a6:	2201      	movs	r2, #1
 80113a8:	4619      	mov	r1, r3
 80113aa:	6878      	ldr	r0, [r7, #4]
 80113ac:	f000 f927 	bl	80115fe <USBD_CtlSendData>
        break;
 80113b0:	e00c      	b.n	80113cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	3304      	adds	r3, #4
 80113b6:	2201      	movs	r2, #1
 80113b8:	4619      	mov	r1, r3
 80113ba:	6878      	ldr	r0, [r7, #4]
 80113bc:	f000 f91f 	bl	80115fe <USBD_CtlSendData>
        break;
 80113c0:	e004      	b.n	80113cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80113c2:	6839      	ldr	r1, [r7, #0]
 80113c4:	6878      	ldr	r0, [r7, #4]
 80113c6:	f000 f8a9 	bl	801151c <USBD_CtlError>
        break;
 80113ca:	bf00      	nop
}
 80113cc:	bf00      	nop
 80113ce:	3708      	adds	r7, #8
 80113d0:	46bd      	mov	sp, r7
 80113d2:	bd80      	pop	{r7, pc}

080113d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b082      	sub	sp, #8
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
 80113dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80113e4:	b2db      	uxtb	r3, r3
 80113e6:	3b01      	subs	r3, #1
 80113e8:	2b02      	cmp	r3, #2
 80113ea:	d81e      	bhi.n	801142a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80113ec:	683b      	ldr	r3, [r7, #0]
 80113ee:	88db      	ldrh	r3, [r3, #6]
 80113f0:	2b02      	cmp	r3, #2
 80113f2:	d004      	beq.n	80113fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80113f4:	6839      	ldr	r1, [r7, #0]
 80113f6:	6878      	ldr	r0, [r7, #4]
 80113f8:	f000 f890 	bl	801151c <USBD_CtlError>
        break;
 80113fc:	e01a      	b.n	8011434 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	2201      	movs	r2, #1
 8011402:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801140a:	2b00      	cmp	r3, #0
 801140c:	d005      	beq.n	801141a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	68db      	ldr	r3, [r3, #12]
 8011412:	f043 0202 	orr.w	r2, r3, #2
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	330c      	adds	r3, #12
 801141e:	2202      	movs	r2, #2
 8011420:	4619      	mov	r1, r3
 8011422:	6878      	ldr	r0, [r7, #4]
 8011424:	f000 f8eb 	bl	80115fe <USBD_CtlSendData>
      break;
 8011428:	e004      	b.n	8011434 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801142a:	6839      	ldr	r1, [r7, #0]
 801142c:	6878      	ldr	r0, [r7, #4]
 801142e:	f000 f875 	bl	801151c <USBD_CtlError>
      break;
 8011432:	bf00      	nop
  }
}
 8011434:	bf00      	nop
 8011436:	3708      	adds	r7, #8
 8011438:	46bd      	mov	sp, r7
 801143a:	bd80      	pop	{r7, pc}

0801143c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b082      	sub	sp, #8
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
 8011444:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011446:	683b      	ldr	r3, [r7, #0]
 8011448:	885b      	ldrh	r3, [r3, #2]
 801144a:	2b01      	cmp	r3, #1
 801144c:	d106      	bne.n	801145c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	2201      	movs	r2, #1
 8011452:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011456:	6878      	ldr	r0, [r7, #4]
 8011458:	f000 f92b 	bl	80116b2 <USBD_CtlSendStatus>
  }
}
 801145c:	bf00      	nop
 801145e:	3708      	adds	r7, #8
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}

08011464 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b082      	sub	sp, #8
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
 801146c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011474:	b2db      	uxtb	r3, r3
 8011476:	3b01      	subs	r3, #1
 8011478:	2b02      	cmp	r3, #2
 801147a:	d80b      	bhi.n	8011494 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	885b      	ldrh	r3, [r3, #2]
 8011480:	2b01      	cmp	r3, #1
 8011482:	d10c      	bne.n	801149e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	2200      	movs	r2, #0
 8011488:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801148c:	6878      	ldr	r0, [r7, #4]
 801148e:	f000 f910 	bl	80116b2 <USBD_CtlSendStatus>
      }
      break;
 8011492:	e004      	b.n	801149e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011494:	6839      	ldr	r1, [r7, #0]
 8011496:	6878      	ldr	r0, [r7, #4]
 8011498:	f000 f840 	bl	801151c <USBD_CtlError>
      break;
 801149c:	e000      	b.n	80114a0 <USBD_ClrFeature+0x3c>
      break;
 801149e:	bf00      	nop
  }
}
 80114a0:	bf00      	nop
 80114a2:	3708      	adds	r7, #8
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bd80      	pop	{r7, pc}

080114a8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b084      	sub	sp, #16
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
 80114b0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	781a      	ldrb	r2, [r3, #0]
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	3301      	adds	r3, #1
 80114c2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	781a      	ldrb	r2, [r3, #0]
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	3301      	adds	r3, #1
 80114d0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80114d2:	68f8      	ldr	r0, [r7, #12]
 80114d4:	f7ff fa91 	bl	80109fa <SWAPBYTE>
 80114d8:	4603      	mov	r3, r0
 80114da:	461a      	mov	r2, r3
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	3301      	adds	r3, #1
 80114e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	3301      	adds	r3, #1
 80114ea:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80114ec:	68f8      	ldr	r0, [r7, #12]
 80114ee:	f7ff fa84 	bl	80109fa <SWAPBYTE>
 80114f2:	4603      	mov	r3, r0
 80114f4:	461a      	mov	r2, r3
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	3301      	adds	r3, #1
 80114fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	3301      	adds	r3, #1
 8011504:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011506:	68f8      	ldr	r0, [r7, #12]
 8011508:	f7ff fa77 	bl	80109fa <SWAPBYTE>
 801150c:	4603      	mov	r3, r0
 801150e:	461a      	mov	r2, r3
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	80da      	strh	r2, [r3, #6]
}
 8011514:	bf00      	nop
 8011516:	3710      	adds	r7, #16
 8011518:	46bd      	mov	sp, r7
 801151a:	bd80      	pop	{r7, pc}

0801151c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b082      	sub	sp, #8
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
 8011524:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011526:	2180      	movs	r1, #128	; 0x80
 8011528:	6878      	ldr	r0, [r7, #4]
 801152a:	f000 fd35 	bl	8011f98 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801152e:	2100      	movs	r1, #0
 8011530:	6878      	ldr	r0, [r7, #4]
 8011532:	f000 fd31 	bl	8011f98 <USBD_LL_StallEP>
}
 8011536:	bf00      	nop
 8011538:	3708      	adds	r7, #8
 801153a:	46bd      	mov	sp, r7
 801153c:	bd80      	pop	{r7, pc}

0801153e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801153e:	b580      	push	{r7, lr}
 8011540:	b086      	sub	sp, #24
 8011542:	af00      	add	r7, sp, #0
 8011544:	60f8      	str	r0, [r7, #12]
 8011546:	60b9      	str	r1, [r7, #8]
 8011548:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801154a:	2300      	movs	r3, #0
 801154c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d036      	beq.n	80115c2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011558:	6938      	ldr	r0, [r7, #16]
 801155a:	f000 f836 	bl	80115ca <USBD_GetLen>
 801155e:	4603      	mov	r3, r0
 8011560:	3301      	adds	r3, #1
 8011562:	b29b      	uxth	r3, r3
 8011564:	005b      	lsls	r3, r3, #1
 8011566:	b29a      	uxth	r2, r3
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801156c:	7dfb      	ldrb	r3, [r7, #23]
 801156e:	68ba      	ldr	r2, [r7, #8]
 8011570:	4413      	add	r3, r2
 8011572:	687a      	ldr	r2, [r7, #4]
 8011574:	7812      	ldrb	r2, [r2, #0]
 8011576:	701a      	strb	r2, [r3, #0]
  idx++;
 8011578:	7dfb      	ldrb	r3, [r7, #23]
 801157a:	3301      	adds	r3, #1
 801157c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801157e:	7dfb      	ldrb	r3, [r7, #23]
 8011580:	68ba      	ldr	r2, [r7, #8]
 8011582:	4413      	add	r3, r2
 8011584:	2203      	movs	r2, #3
 8011586:	701a      	strb	r2, [r3, #0]
  idx++;
 8011588:	7dfb      	ldrb	r3, [r7, #23]
 801158a:	3301      	adds	r3, #1
 801158c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801158e:	e013      	b.n	80115b8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011590:	7dfb      	ldrb	r3, [r7, #23]
 8011592:	68ba      	ldr	r2, [r7, #8]
 8011594:	4413      	add	r3, r2
 8011596:	693a      	ldr	r2, [r7, #16]
 8011598:	7812      	ldrb	r2, [r2, #0]
 801159a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801159c:	693b      	ldr	r3, [r7, #16]
 801159e:	3301      	adds	r3, #1
 80115a0:	613b      	str	r3, [r7, #16]
    idx++;
 80115a2:	7dfb      	ldrb	r3, [r7, #23]
 80115a4:	3301      	adds	r3, #1
 80115a6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80115a8:	7dfb      	ldrb	r3, [r7, #23]
 80115aa:	68ba      	ldr	r2, [r7, #8]
 80115ac:	4413      	add	r3, r2
 80115ae:	2200      	movs	r2, #0
 80115b0:	701a      	strb	r2, [r3, #0]
    idx++;
 80115b2:	7dfb      	ldrb	r3, [r7, #23]
 80115b4:	3301      	adds	r3, #1
 80115b6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80115b8:	693b      	ldr	r3, [r7, #16]
 80115ba:	781b      	ldrb	r3, [r3, #0]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d1e7      	bne.n	8011590 <USBD_GetString+0x52>
 80115c0:	e000      	b.n	80115c4 <USBD_GetString+0x86>
    return;
 80115c2:	bf00      	nop
  }
}
 80115c4:	3718      	adds	r7, #24
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bd80      	pop	{r7, pc}

080115ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80115ca:	b480      	push	{r7}
 80115cc:	b085      	sub	sp, #20
 80115ce:	af00      	add	r7, sp, #0
 80115d0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80115d2:	2300      	movs	r3, #0
 80115d4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80115da:	e005      	b.n	80115e8 <USBD_GetLen+0x1e>
  {
    len++;
 80115dc:	7bfb      	ldrb	r3, [r7, #15]
 80115de:	3301      	adds	r3, #1
 80115e0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80115e2:	68bb      	ldr	r3, [r7, #8]
 80115e4:	3301      	adds	r3, #1
 80115e6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80115e8:	68bb      	ldr	r3, [r7, #8]
 80115ea:	781b      	ldrb	r3, [r3, #0]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d1f5      	bne.n	80115dc <USBD_GetLen+0x12>
  }

  return len;
 80115f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80115f2:	4618      	mov	r0, r3
 80115f4:	3714      	adds	r7, #20
 80115f6:	46bd      	mov	sp, r7
 80115f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fc:	4770      	bx	lr

080115fe <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80115fe:	b580      	push	{r7, lr}
 8011600:	b084      	sub	sp, #16
 8011602:	af00      	add	r7, sp, #0
 8011604:	60f8      	str	r0, [r7, #12]
 8011606:	60b9      	str	r1, [r7, #8]
 8011608:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	2202      	movs	r2, #2
 801160e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	687a      	ldr	r2, [r7, #4]
 8011616:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	687a      	ldr	r2, [r7, #4]
 801161c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	68ba      	ldr	r2, [r7, #8]
 8011622:	2100      	movs	r1, #0
 8011624:	68f8      	ldr	r0, [r7, #12]
 8011626:	f000 fd85 	bl	8012134 <USBD_LL_Transmit>

  return USBD_OK;
 801162a:	2300      	movs	r3, #0
}
 801162c:	4618      	mov	r0, r3
 801162e:	3710      	adds	r7, #16
 8011630:	46bd      	mov	sp, r7
 8011632:	bd80      	pop	{r7, pc}

08011634 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b084      	sub	sp, #16
 8011638:	af00      	add	r7, sp, #0
 801163a:	60f8      	str	r0, [r7, #12]
 801163c:	60b9      	str	r1, [r7, #8]
 801163e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	68ba      	ldr	r2, [r7, #8]
 8011644:	2100      	movs	r1, #0
 8011646:	68f8      	ldr	r0, [r7, #12]
 8011648:	f000 fd74 	bl	8012134 <USBD_LL_Transmit>

  return USBD_OK;
 801164c:	2300      	movs	r3, #0
}
 801164e:	4618      	mov	r0, r3
 8011650:	3710      	adds	r7, #16
 8011652:	46bd      	mov	sp, r7
 8011654:	bd80      	pop	{r7, pc}

08011656 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011656:	b580      	push	{r7, lr}
 8011658:	b084      	sub	sp, #16
 801165a:	af00      	add	r7, sp, #0
 801165c:	60f8      	str	r0, [r7, #12]
 801165e:	60b9      	str	r1, [r7, #8]
 8011660:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	2203      	movs	r2, #3
 8011666:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	687a      	ldr	r2, [r7, #4]
 801166e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	687a      	ldr	r2, [r7, #4]
 8011676:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	68ba      	ldr	r2, [r7, #8]
 801167e:	2100      	movs	r1, #0
 8011680:	68f8      	ldr	r0, [r7, #12]
 8011682:	f000 fd8f 	bl	80121a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011686:	2300      	movs	r3, #0
}
 8011688:	4618      	mov	r0, r3
 801168a:	3710      	adds	r7, #16
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}

08011690 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b084      	sub	sp, #16
 8011694:	af00      	add	r7, sp, #0
 8011696:	60f8      	str	r0, [r7, #12]
 8011698:	60b9      	str	r1, [r7, #8]
 801169a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	68ba      	ldr	r2, [r7, #8]
 80116a0:	2100      	movs	r1, #0
 80116a2:	68f8      	ldr	r0, [r7, #12]
 80116a4:	f000 fd7e 	bl	80121a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80116a8:	2300      	movs	r3, #0
}
 80116aa:	4618      	mov	r0, r3
 80116ac:	3710      	adds	r7, #16
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd80      	pop	{r7, pc}

080116b2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80116b2:	b580      	push	{r7, lr}
 80116b4:	b082      	sub	sp, #8
 80116b6:	af00      	add	r7, sp, #0
 80116b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	2204      	movs	r2, #4
 80116be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80116c2:	2300      	movs	r3, #0
 80116c4:	2200      	movs	r2, #0
 80116c6:	2100      	movs	r1, #0
 80116c8:	6878      	ldr	r0, [r7, #4]
 80116ca:	f000 fd33 	bl	8012134 <USBD_LL_Transmit>

  return USBD_OK;
 80116ce:	2300      	movs	r3, #0
}
 80116d0:	4618      	mov	r0, r3
 80116d2:	3708      	adds	r7, #8
 80116d4:	46bd      	mov	sp, r7
 80116d6:	bd80      	pop	{r7, pc}

080116d8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b082      	sub	sp, #8
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	2205      	movs	r2, #5
 80116e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80116e8:	2300      	movs	r3, #0
 80116ea:	2200      	movs	r2, #0
 80116ec:	2100      	movs	r1, #0
 80116ee:	6878      	ldr	r0, [r7, #4]
 80116f0:	f000 fd58 	bl	80121a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80116f4:	2300      	movs	r3, #0
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	3708      	adds	r7, #8
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}
	...

08011700 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011700:	b580      	push	{r7, lr}
 8011702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011704:	2200      	movs	r2, #0
 8011706:	4912      	ldr	r1, [pc, #72]	; (8011750 <MX_USB_DEVICE_Init+0x50>)
 8011708:	4812      	ldr	r0, [pc, #72]	; (8011754 <MX_USB_DEVICE_Init+0x54>)
 801170a:	f7fe fe65 	bl	80103d8 <USBD_Init>
 801170e:	4603      	mov	r3, r0
 8011710:	2b00      	cmp	r3, #0
 8011712:	d001      	beq.n	8011718 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011714:	f7f0 f85e 	bl	80017d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011718:	490f      	ldr	r1, [pc, #60]	; (8011758 <MX_USB_DEVICE_Init+0x58>)
 801171a:	480e      	ldr	r0, [pc, #56]	; (8011754 <MX_USB_DEVICE_Init+0x54>)
 801171c:	f7fe fe8c 	bl	8010438 <USBD_RegisterClass>
 8011720:	4603      	mov	r3, r0
 8011722:	2b00      	cmp	r3, #0
 8011724:	d001      	beq.n	801172a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011726:	f7f0 f855 	bl	80017d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801172a:	490c      	ldr	r1, [pc, #48]	; (801175c <MX_USB_DEVICE_Init+0x5c>)
 801172c:	4809      	ldr	r0, [pc, #36]	; (8011754 <MX_USB_DEVICE_Init+0x54>)
 801172e:	f7fe fddd 	bl	80102ec <USBD_CDC_RegisterInterface>
 8011732:	4603      	mov	r3, r0
 8011734:	2b00      	cmp	r3, #0
 8011736:	d001      	beq.n	801173c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011738:	f7f0 f84c 	bl	80017d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801173c:	4805      	ldr	r0, [pc, #20]	; (8011754 <MX_USB_DEVICE_Init+0x54>)
 801173e:	f7fe fea2 	bl	8010486 <USBD_Start>
 8011742:	4603      	mov	r3, r0
 8011744:	2b00      	cmp	r3, #0
 8011746:	d001      	beq.n	801174c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011748:	f7f0 f844 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801174c:	bf00      	nop
 801174e:	bd80      	pop	{r7, pc}
 8011750:	2000057c 	.word	0x2000057c
 8011754:	20000e38 	.word	0x20000e38
 8011758:	20000464 	.word	0x20000464
 801175c:	20000568 	.word	0x20000568

08011760 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011764:	2200      	movs	r2, #0
 8011766:	4905      	ldr	r1, [pc, #20]	; (801177c <CDC_Init_FS+0x1c>)
 8011768:	4805      	ldr	r0, [pc, #20]	; (8011780 <CDC_Init_FS+0x20>)
 801176a:	f7fe fdd4 	bl	8010316 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801176e:	4905      	ldr	r1, [pc, #20]	; (8011784 <CDC_Init_FS+0x24>)
 8011770:	4803      	ldr	r0, [pc, #12]	; (8011780 <CDC_Init_FS+0x20>)
 8011772:	f7fe fdee 	bl	8010352 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011776:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011778:	4618      	mov	r0, r3
 801177a:	bd80      	pop	{r7, pc}
 801177c:	20001908 	.word	0x20001908
 8011780:	20000e38 	.word	0x20000e38
 8011784:	20001108 	.word	0x20001108

08011788 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011788:	b480      	push	{r7}
 801178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801178c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801178e:	4618      	mov	r0, r3
 8011790:	46bd      	mov	sp, r7
 8011792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011796:	4770      	bx	lr

08011798 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011798:	b480      	push	{r7}
 801179a:	b083      	sub	sp, #12
 801179c:	af00      	add	r7, sp, #0
 801179e:	4603      	mov	r3, r0
 80117a0:	6039      	str	r1, [r7, #0]
 80117a2:	71fb      	strb	r3, [r7, #7]
 80117a4:	4613      	mov	r3, r2
 80117a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80117a8:	79fb      	ldrb	r3, [r7, #7]
 80117aa:	2b23      	cmp	r3, #35	; 0x23
 80117ac:	d84a      	bhi.n	8011844 <CDC_Control_FS+0xac>
 80117ae:	a201      	add	r2, pc, #4	; (adr r2, 80117b4 <CDC_Control_FS+0x1c>)
 80117b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117b4:	08011845 	.word	0x08011845
 80117b8:	08011845 	.word	0x08011845
 80117bc:	08011845 	.word	0x08011845
 80117c0:	08011845 	.word	0x08011845
 80117c4:	08011845 	.word	0x08011845
 80117c8:	08011845 	.word	0x08011845
 80117cc:	08011845 	.word	0x08011845
 80117d0:	08011845 	.word	0x08011845
 80117d4:	08011845 	.word	0x08011845
 80117d8:	08011845 	.word	0x08011845
 80117dc:	08011845 	.word	0x08011845
 80117e0:	08011845 	.word	0x08011845
 80117e4:	08011845 	.word	0x08011845
 80117e8:	08011845 	.word	0x08011845
 80117ec:	08011845 	.word	0x08011845
 80117f0:	08011845 	.word	0x08011845
 80117f4:	08011845 	.word	0x08011845
 80117f8:	08011845 	.word	0x08011845
 80117fc:	08011845 	.word	0x08011845
 8011800:	08011845 	.word	0x08011845
 8011804:	08011845 	.word	0x08011845
 8011808:	08011845 	.word	0x08011845
 801180c:	08011845 	.word	0x08011845
 8011810:	08011845 	.word	0x08011845
 8011814:	08011845 	.word	0x08011845
 8011818:	08011845 	.word	0x08011845
 801181c:	08011845 	.word	0x08011845
 8011820:	08011845 	.word	0x08011845
 8011824:	08011845 	.word	0x08011845
 8011828:	08011845 	.word	0x08011845
 801182c:	08011845 	.word	0x08011845
 8011830:	08011845 	.word	0x08011845
 8011834:	08011845 	.word	0x08011845
 8011838:	08011845 	.word	0x08011845
 801183c:	08011845 	.word	0x08011845
 8011840:	08011845 	.word	0x08011845
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011844:	bf00      	nop
  }

  return (USBD_OK);
 8011846:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011848:	4618      	mov	r0, r3
 801184a:	370c      	adds	r7, #12
 801184c:	46bd      	mov	sp, r7
 801184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011852:	4770      	bx	lr

08011854 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b082      	sub	sp, #8
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
 801185c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801185e:	6879      	ldr	r1, [r7, #4]
 8011860:	4805      	ldr	r0, [pc, #20]	; (8011878 <CDC_Receive_FS+0x24>)
 8011862:	f7fe fd76 	bl	8010352 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011866:	4804      	ldr	r0, [pc, #16]	; (8011878 <CDC_Receive_FS+0x24>)
 8011868:	f7fe fd8c 	bl	8010384 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801186c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801186e:	4618      	mov	r0, r3
 8011870:	3708      	adds	r7, #8
 8011872:	46bd      	mov	sp, r7
 8011874:	bd80      	pop	{r7, pc}
 8011876:	bf00      	nop
 8011878:	20000e38 	.word	0x20000e38

0801187c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801187c:	b480      	push	{r7}
 801187e:	b087      	sub	sp, #28
 8011880:	af00      	add	r7, sp, #0
 8011882:	60f8      	str	r0, [r7, #12]
 8011884:	60b9      	str	r1, [r7, #8]
 8011886:	4613      	mov	r3, r2
 8011888:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801188a:	2300      	movs	r3, #0
 801188c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801188e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011892:	4618      	mov	r0, r3
 8011894:	371c      	adds	r7, #28
 8011896:	46bd      	mov	sp, r7
 8011898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189c:	4770      	bx	lr
	...

080118a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80118a0:	b480      	push	{r7}
 80118a2:	b083      	sub	sp, #12
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	4603      	mov	r3, r0
 80118a8:	6039      	str	r1, [r7, #0]
 80118aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	2212      	movs	r2, #18
 80118b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80118b2:	4b03      	ldr	r3, [pc, #12]	; (80118c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80118b4:	4618      	mov	r0, r3
 80118b6:	370c      	adds	r7, #12
 80118b8:	46bd      	mov	sp, r7
 80118ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118be:	4770      	bx	lr
 80118c0:	2000059c 	.word	0x2000059c

080118c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80118c4:	b480      	push	{r7}
 80118c6:	b083      	sub	sp, #12
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	4603      	mov	r3, r0
 80118cc:	6039      	str	r1, [r7, #0]
 80118ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80118d0:	683b      	ldr	r3, [r7, #0]
 80118d2:	2204      	movs	r2, #4
 80118d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80118d6:	4b03      	ldr	r3, [pc, #12]	; (80118e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80118d8:	4618      	mov	r0, r3
 80118da:	370c      	adds	r7, #12
 80118dc:	46bd      	mov	sp, r7
 80118de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e2:	4770      	bx	lr
 80118e4:	200005bc 	.word	0x200005bc

080118e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b082      	sub	sp, #8
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	4603      	mov	r3, r0
 80118f0:	6039      	str	r1, [r7, #0]
 80118f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80118f4:	79fb      	ldrb	r3, [r7, #7]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d105      	bne.n	8011906 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80118fa:	683a      	ldr	r2, [r7, #0]
 80118fc:	4907      	ldr	r1, [pc, #28]	; (801191c <USBD_FS_ProductStrDescriptor+0x34>)
 80118fe:	4808      	ldr	r0, [pc, #32]	; (8011920 <USBD_FS_ProductStrDescriptor+0x38>)
 8011900:	f7ff fe1d 	bl	801153e <USBD_GetString>
 8011904:	e004      	b.n	8011910 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011906:	683a      	ldr	r2, [r7, #0]
 8011908:	4904      	ldr	r1, [pc, #16]	; (801191c <USBD_FS_ProductStrDescriptor+0x34>)
 801190a:	4805      	ldr	r0, [pc, #20]	; (8011920 <USBD_FS_ProductStrDescriptor+0x38>)
 801190c:	f7ff fe17 	bl	801153e <USBD_GetString>
  }
  return USBD_StrDesc;
 8011910:	4b02      	ldr	r3, [pc, #8]	; (801191c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011912:	4618      	mov	r0, r3
 8011914:	3708      	adds	r7, #8
 8011916:	46bd      	mov	sp, r7
 8011918:	bd80      	pop	{r7, pc}
 801191a:	bf00      	nop
 801191c:	20002108 	.word	0x20002108
 8011920:	080134b4 	.word	0x080134b4

08011924 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b082      	sub	sp, #8
 8011928:	af00      	add	r7, sp, #0
 801192a:	4603      	mov	r3, r0
 801192c:	6039      	str	r1, [r7, #0]
 801192e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011930:	683a      	ldr	r2, [r7, #0]
 8011932:	4904      	ldr	r1, [pc, #16]	; (8011944 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011934:	4804      	ldr	r0, [pc, #16]	; (8011948 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011936:	f7ff fe02 	bl	801153e <USBD_GetString>
  return USBD_StrDesc;
 801193a:	4b02      	ldr	r3, [pc, #8]	; (8011944 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801193c:	4618      	mov	r0, r3
 801193e:	3708      	adds	r7, #8
 8011940:	46bd      	mov	sp, r7
 8011942:	bd80      	pop	{r7, pc}
 8011944:	20002108 	.word	0x20002108
 8011948:	080134cc 	.word	0x080134cc

0801194c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b082      	sub	sp, #8
 8011950:	af00      	add	r7, sp, #0
 8011952:	4603      	mov	r3, r0
 8011954:	6039      	str	r1, [r7, #0]
 8011956:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	221a      	movs	r2, #26
 801195c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801195e:	f000 f855 	bl	8011a0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011962:	4b02      	ldr	r3, [pc, #8]	; (801196c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011964:	4618      	mov	r0, r3
 8011966:	3708      	adds	r7, #8
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}
 801196c:	200005c0 	.word	0x200005c0

08011970 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b082      	sub	sp, #8
 8011974:	af00      	add	r7, sp, #0
 8011976:	4603      	mov	r3, r0
 8011978:	6039      	str	r1, [r7, #0]
 801197a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801197c:	79fb      	ldrb	r3, [r7, #7]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d105      	bne.n	801198e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011982:	683a      	ldr	r2, [r7, #0]
 8011984:	4907      	ldr	r1, [pc, #28]	; (80119a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011986:	4808      	ldr	r0, [pc, #32]	; (80119a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011988:	f7ff fdd9 	bl	801153e <USBD_GetString>
 801198c:	e004      	b.n	8011998 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801198e:	683a      	ldr	r2, [r7, #0]
 8011990:	4904      	ldr	r1, [pc, #16]	; (80119a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011992:	4805      	ldr	r0, [pc, #20]	; (80119a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011994:	f7ff fdd3 	bl	801153e <USBD_GetString>
  }
  return USBD_StrDesc;
 8011998:	4b02      	ldr	r3, [pc, #8]	; (80119a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801199a:	4618      	mov	r0, r3
 801199c:	3708      	adds	r7, #8
 801199e:	46bd      	mov	sp, r7
 80119a0:	bd80      	pop	{r7, pc}
 80119a2:	bf00      	nop
 80119a4:	20002108 	.word	0x20002108
 80119a8:	080134e0 	.word	0x080134e0

080119ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80119ac:	b580      	push	{r7, lr}
 80119ae:	b082      	sub	sp, #8
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	4603      	mov	r3, r0
 80119b4:	6039      	str	r1, [r7, #0]
 80119b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80119b8:	79fb      	ldrb	r3, [r7, #7]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d105      	bne.n	80119ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80119be:	683a      	ldr	r2, [r7, #0]
 80119c0:	4907      	ldr	r1, [pc, #28]	; (80119e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80119c2:	4808      	ldr	r0, [pc, #32]	; (80119e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80119c4:	f7ff fdbb 	bl	801153e <USBD_GetString>
 80119c8:	e004      	b.n	80119d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80119ca:	683a      	ldr	r2, [r7, #0]
 80119cc:	4904      	ldr	r1, [pc, #16]	; (80119e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80119ce:	4805      	ldr	r0, [pc, #20]	; (80119e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80119d0:	f7ff fdb5 	bl	801153e <USBD_GetString>
  }
  return USBD_StrDesc;
 80119d4:	4b02      	ldr	r3, [pc, #8]	; (80119e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80119d6:	4618      	mov	r0, r3
 80119d8:	3708      	adds	r7, #8
 80119da:	46bd      	mov	sp, r7
 80119dc:	bd80      	pop	{r7, pc}
 80119de:	bf00      	nop
 80119e0:	20002108 	.word	0x20002108
 80119e4:	080134ec 	.word	0x080134ec

080119e8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80119e8:	b480      	push	{r7}
 80119ea:	b083      	sub	sp, #12
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	4603      	mov	r3, r0
 80119f0:	6039      	str	r1, [r7, #0]
 80119f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80119f4:	683b      	ldr	r3, [r7, #0]
 80119f6:	220c      	movs	r2, #12
 80119f8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80119fa:	4b03      	ldr	r3, [pc, #12]	; (8011a08 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80119fc:	4618      	mov	r0, r3
 80119fe:	370c      	adds	r7, #12
 8011a00:	46bd      	mov	sp, r7
 8011a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a06:	4770      	bx	lr
 8011a08:	200005b0 	.word	0x200005b0

08011a0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b084      	sub	sp, #16
 8011a10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011a12:	4b0f      	ldr	r3, [pc, #60]	; (8011a50 <Get_SerialNum+0x44>)
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011a18:	4b0e      	ldr	r3, [pc, #56]	; (8011a54 <Get_SerialNum+0x48>)
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011a1e:	4b0e      	ldr	r3, [pc, #56]	; (8011a58 <Get_SerialNum+0x4c>)
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011a24:	68fa      	ldr	r2, [r7, #12]
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	4413      	add	r3, r2
 8011a2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d009      	beq.n	8011a46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011a32:	2208      	movs	r2, #8
 8011a34:	4909      	ldr	r1, [pc, #36]	; (8011a5c <Get_SerialNum+0x50>)
 8011a36:	68f8      	ldr	r0, [r7, #12]
 8011a38:	f000 f814 	bl	8011a64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011a3c:	2204      	movs	r2, #4
 8011a3e:	4908      	ldr	r1, [pc, #32]	; (8011a60 <Get_SerialNum+0x54>)
 8011a40:	68b8      	ldr	r0, [r7, #8]
 8011a42:	f000 f80f 	bl	8011a64 <IntToUnicode>
  }
}
 8011a46:	bf00      	nop
 8011a48:	3710      	adds	r7, #16
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}
 8011a4e:	bf00      	nop
 8011a50:	1fff7590 	.word	0x1fff7590
 8011a54:	1fff7594 	.word	0x1fff7594
 8011a58:	1fff7598 	.word	0x1fff7598
 8011a5c:	200005c2 	.word	0x200005c2
 8011a60:	200005d2 	.word	0x200005d2

08011a64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011a64:	b480      	push	{r7}
 8011a66:	b087      	sub	sp, #28
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	60f8      	str	r0, [r7, #12]
 8011a6c:	60b9      	str	r1, [r7, #8]
 8011a6e:	4613      	mov	r3, r2
 8011a70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011a72:	2300      	movs	r3, #0
 8011a74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011a76:	2300      	movs	r3, #0
 8011a78:	75fb      	strb	r3, [r7, #23]
 8011a7a:	e027      	b.n	8011acc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	0f1b      	lsrs	r3, r3, #28
 8011a80:	2b09      	cmp	r3, #9
 8011a82:	d80b      	bhi.n	8011a9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	0f1b      	lsrs	r3, r3, #28
 8011a88:	b2da      	uxtb	r2, r3
 8011a8a:	7dfb      	ldrb	r3, [r7, #23]
 8011a8c:	005b      	lsls	r3, r3, #1
 8011a8e:	4619      	mov	r1, r3
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	440b      	add	r3, r1
 8011a94:	3230      	adds	r2, #48	; 0x30
 8011a96:	b2d2      	uxtb	r2, r2
 8011a98:	701a      	strb	r2, [r3, #0]
 8011a9a:	e00a      	b.n	8011ab2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	0f1b      	lsrs	r3, r3, #28
 8011aa0:	b2da      	uxtb	r2, r3
 8011aa2:	7dfb      	ldrb	r3, [r7, #23]
 8011aa4:	005b      	lsls	r3, r3, #1
 8011aa6:	4619      	mov	r1, r3
 8011aa8:	68bb      	ldr	r3, [r7, #8]
 8011aaa:	440b      	add	r3, r1
 8011aac:	3237      	adds	r2, #55	; 0x37
 8011aae:	b2d2      	uxtb	r2, r2
 8011ab0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	011b      	lsls	r3, r3, #4
 8011ab6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011ab8:	7dfb      	ldrb	r3, [r7, #23]
 8011aba:	005b      	lsls	r3, r3, #1
 8011abc:	3301      	adds	r3, #1
 8011abe:	68ba      	ldr	r2, [r7, #8]
 8011ac0:	4413      	add	r3, r2
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011ac6:	7dfb      	ldrb	r3, [r7, #23]
 8011ac8:	3301      	adds	r3, #1
 8011aca:	75fb      	strb	r3, [r7, #23]
 8011acc:	7dfa      	ldrb	r2, [r7, #23]
 8011ace:	79fb      	ldrb	r3, [r7, #7]
 8011ad0:	429a      	cmp	r2, r3
 8011ad2:	d3d3      	bcc.n	8011a7c <IntToUnicode+0x18>
  }
}
 8011ad4:	bf00      	nop
 8011ad6:	bf00      	nop
 8011ad8:	371c      	adds	r7, #28
 8011ada:	46bd      	mov	sp, r7
 8011adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae0:	4770      	bx	lr
	...

08011ae4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b08a      	sub	sp, #40	; 0x28
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011aec:	f107 0314 	add.w	r3, r7, #20
 8011af0:	2200      	movs	r2, #0
 8011af2:	601a      	str	r2, [r3, #0]
 8011af4:	605a      	str	r2, [r3, #4]
 8011af6:	609a      	str	r2, [r3, #8]
 8011af8:	60da      	str	r2, [r3, #12]
 8011afa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011b04:	d14e      	bne.n	8011ba4 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011b06:	4b29      	ldr	r3, [pc, #164]	; (8011bac <HAL_PCD_MspInit+0xc8>)
 8011b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b0a:	4a28      	ldr	r2, [pc, #160]	; (8011bac <HAL_PCD_MspInit+0xc8>)
 8011b0c:	f043 0301 	orr.w	r3, r3, #1
 8011b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011b12:	4b26      	ldr	r3, [pc, #152]	; (8011bac <HAL_PCD_MspInit+0xc8>)
 8011b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b16:	f003 0301 	and.w	r3, r3, #1
 8011b1a:	613b      	str	r3, [r7, #16]
 8011b1c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 8011b1e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8011b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011b24:	2302      	movs	r3, #2
 8011b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b28:	2300      	movs	r3, #0
 8011b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011b2c:	2303      	movs	r3, #3
 8011b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011b30:	230a      	movs	r3, #10
 8011b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011b34:	f107 0314 	add.w	r3, r7, #20
 8011b38:	4619      	mov	r1, r3
 8011b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011b3e:	f7f6 fd43 	bl	80085c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011b42:	4b1a      	ldr	r3, [pc, #104]	; (8011bac <HAL_PCD_MspInit+0xc8>)
 8011b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b46:	4a19      	ldr	r2, [pc, #100]	; (8011bac <HAL_PCD_MspInit+0xc8>)
 8011b48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011b4e:	4b17      	ldr	r3, [pc, #92]	; (8011bac <HAL_PCD_MspInit+0xc8>)
 8011b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011b56:	60fb      	str	r3, [r7, #12]
 8011b58:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011b5a:	4b14      	ldr	r3, [pc, #80]	; (8011bac <HAL_PCD_MspInit+0xc8>)
 8011b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d114      	bne.n	8011b90 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011b66:	4b11      	ldr	r3, [pc, #68]	; (8011bac <HAL_PCD_MspInit+0xc8>)
 8011b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b6a:	4a10      	ldr	r2, [pc, #64]	; (8011bac <HAL_PCD_MspInit+0xc8>)
 8011b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011b70:	6593      	str	r3, [r2, #88]	; 0x58
 8011b72:	4b0e      	ldr	r3, [pc, #56]	; (8011bac <HAL_PCD_MspInit+0xc8>)
 8011b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011b7a:	60bb      	str	r3, [r7, #8]
 8011b7c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8011b7e:	f7f8 fff7 	bl	800ab70 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8011b82:	4b0a      	ldr	r3, [pc, #40]	; (8011bac <HAL_PCD_MspInit+0xc8>)
 8011b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b86:	4a09      	ldr	r2, [pc, #36]	; (8011bac <HAL_PCD_MspInit+0xc8>)
 8011b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011b8c:	6593      	str	r3, [r2, #88]	; 0x58
 8011b8e:	e001      	b.n	8011b94 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8011b90:	f7f8 ffee 	bl	800ab70 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011b94:	2200      	movs	r2, #0
 8011b96:	2100      	movs	r1, #0
 8011b98:	2043      	movs	r0, #67	; 0x43
 8011b9a:	f7f6 fb4c 	bl	8008236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011b9e:	2043      	movs	r0, #67	; 0x43
 8011ba0:	f7f6 fb65 	bl	800826e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011ba4:	bf00      	nop
 8011ba6:	3728      	adds	r7, #40	; 0x28
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd80      	pop	{r7, pc}
 8011bac:	40021000 	.word	0x40021000

08011bb0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b082      	sub	sp, #8
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011bc4:	4619      	mov	r1, r3
 8011bc6:	4610      	mov	r0, r2
 8011bc8:	f7fe fca8 	bl	801051c <USBD_LL_SetupStage>
}
 8011bcc:	bf00      	nop
 8011bce:	3708      	adds	r7, #8
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd80      	pop	{r7, pc}

08011bd4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b082      	sub	sp, #8
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
 8011bdc:	460b      	mov	r3, r1
 8011bde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8011be6:	78fa      	ldrb	r2, [r7, #3]
 8011be8:	6879      	ldr	r1, [r7, #4]
 8011bea:	4613      	mov	r3, r2
 8011bec:	00db      	lsls	r3, r3, #3
 8011bee:	4413      	add	r3, r2
 8011bf0:	009b      	lsls	r3, r3, #2
 8011bf2:	440b      	add	r3, r1
 8011bf4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8011bf8:	681a      	ldr	r2, [r3, #0]
 8011bfa:	78fb      	ldrb	r3, [r7, #3]
 8011bfc:	4619      	mov	r1, r3
 8011bfe:	f7fe fce2 	bl	80105c6 <USBD_LL_DataOutStage>
}
 8011c02:	bf00      	nop
 8011c04:	3708      	adds	r7, #8
 8011c06:	46bd      	mov	sp, r7
 8011c08:	bd80      	pop	{r7, pc}

08011c0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c0a:	b580      	push	{r7, lr}
 8011c0c:	b082      	sub	sp, #8
 8011c0e:	af00      	add	r7, sp, #0
 8011c10:	6078      	str	r0, [r7, #4]
 8011c12:	460b      	mov	r3, r1
 8011c14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8011c1c:	78fa      	ldrb	r2, [r7, #3]
 8011c1e:	6879      	ldr	r1, [r7, #4]
 8011c20:	4613      	mov	r3, r2
 8011c22:	00db      	lsls	r3, r3, #3
 8011c24:	4413      	add	r3, r2
 8011c26:	009b      	lsls	r3, r3, #2
 8011c28:	440b      	add	r3, r1
 8011c2a:	334c      	adds	r3, #76	; 0x4c
 8011c2c:	681a      	ldr	r2, [r3, #0]
 8011c2e:	78fb      	ldrb	r3, [r7, #3]
 8011c30:	4619      	mov	r1, r3
 8011c32:	f7fe fd2b 	bl	801068c <USBD_LL_DataInStage>
}
 8011c36:	bf00      	nop
 8011c38:	3708      	adds	r7, #8
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}

08011c3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c3e:	b580      	push	{r7, lr}
 8011c40:	b082      	sub	sp, #8
 8011c42:	af00      	add	r7, sp, #0
 8011c44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f7fe fe3f 	bl	80108d0 <USBD_LL_SOF>
}
 8011c52:	bf00      	nop
 8011c54:	3708      	adds	r7, #8
 8011c56:	46bd      	mov	sp, r7
 8011c58:	bd80      	pop	{r7, pc}

08011c5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c5a:	b580      	push	{r7, lr}
 8011c5c:	b084      	sub	sp, #16
 8011c5e:	af00      	add	r7, sp, #0
 8011c60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011c62:	2301      	movs	r3, #1
 8011c64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	68db      	ldr	r3, [r3, #12]
 8011c6a:	2b02      	cmp	r3, #2
 8011c6c:	d001      	beq.n	8011c72 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8011c6e:	f7ef fdb1 	bl	80017d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011c78:	7bfa      	ldrb	r2, [r7, #15]
 8011c7a:	4611      	mov	r1, r2
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f7fe fde9 	bl	8010854 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f7fe fd95 	bl	80107b8 <USBD_LL_Reset>
}
 8011c8e:	bf00      	nop
 8011c90:	3710      	adds	r7, #16
 8011c92:	46bd      	mov	sp, r7
 8011c94:	bd80      	pop	{r7, pc}
	...

08011c98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b082      	sub	sp, #8
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	687a      	ldr	r2, [r7, #4]
 8011cac:	6812      	ldr	r2, [r2, #0]
 8011cae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011cb2:	f043 0301 	orr.w	r3, r3, #1
 8011cb6:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f7fe fdd8 	bl	8010874 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	6a1b      	ldr	r3, [r3, #32]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d005      	beq.n	8011cd8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011ccc:	4b04      	ldr	r3, [pc, #16]	; (8011ce0 <HAL_PCD_SuspendCallback+0x48>)
 8011cce:	691b      	ldr	r3, [r3, #16]
 8011cd0:	4a03      	ldr	r2, [pc, #12]	; (8011ce0 <HAL_PCD_SuspendCallback+0x48>)
 8011cd2:	f043 0306 	orr.w	r3, r3, #6
 8011cd6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011cd8:	bf00      	nop
 8011cda:	3708      	adds	r7, #8
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	bd80      	pop	{r7, pc}
 8011ce0:	e000ed00 	.word	0xe000ed00

08011ce4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b082      	sub	sp, #8
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	687a      	ldr	r2, [r7, #4]
 8011cf8:	6812      	ldr	r2, [r2, #0]
 8011cfa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011cfe:	f023 0301 	bic.w	r3, r3, #1
 8011d02:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	6a1b      	ldr	r3, [r3, #32]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d007      	beq.n	8011d1c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011d0c:	4b08      	ldr	r3, [pc, #32]	; (8011d30 <HAL_PCD_ResumeCallback+0x4c>)
 8011d0e:	691b      	ldr	r3, [r3, #16]
 8011d10:	4a07      	ldr	r2, [pc, #28]	; (8011d30 <HAL_PCD_ResumeCallback+0x4c>)
 8011d12:	f023 0306 	bic.w	r3, r3, #6
 8011d16:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8011d18:	f000 faf6 	bl	8012308 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011d22:	4618      	mov	r0, r3
 8011d24:	f7fe fdbc 	bl	80108a0 <USBD_LL_Resume>
}
 8011d28:	bf00      	nop
 8011d2a:	3708      	adds	r7, #8
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	bd80      	pop	{r7, pc}
 8011d30:	e000ed00 	.word	0xe000ed00

08011d34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b082      	sub	sp, #8
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
 8011d3c:	460b      	mov	r3, r1
 8011d3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011d46:	78fa      	ldrb	r2, [r7, #3]
 8011d48:	4611      	mov	r1, r2
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	f7fe fe08 	bl	8010960 <USBD_LL_IsoOUTIncomplete>
}
 8011d50:	bf00      	nop
 8011d52:	3708      	adds	r7, #8
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd80      	pop	{r7, pc}

08011d58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b082      	sub	sp, #8
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
 8011d60:	460b      	mov	r3, r1
 8011d62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011d6a:	78fa      	ldrb	r2, [r7, #3]
 8011d6c:	4611      	mov	r1, r2
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f7fe fdd0 	bl	8010914 <USBD_LL_IsoINIncomplete>
}
 8011d74:	bf00      	nop
 8011d76:	3708      	adds	r7, #8
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	bd80      	pop	{r7, pc}

08011d7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b082      	sub	sp, #8
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f7fe fe0e 	bl	80109ac <USBD_LL_DevConnected>
}
 8011d90:	bf00      	nop
 8011d92:	3708      	adds	r7, #8
 8011d94:	46bd      	mov	sp, r7
 8011d96:	bd80      	pop	{r7, pc}

08011d98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b082      	sub	sp, #8
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011da6:	4618      	mov	r0, r3
 8011da8:	f7fe fe0b 	bl	80109c2 <USBD_LL_DevDisconnected>
}
 8011dac:	bf00      	nop
 8011dae:	3708      	adds	r7, #8
 8011db0:	46bd      	mov	sp, r7
 8011db2:	bd80      	pop	{r7, pc}

08011db4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b082      	sub	sp, #8
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	781b      	ldrb	r3, [r3, #0]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d13c      	bne.n	8011e3e <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011dc4:	4a20      	ldr	r2, [pc, #128]	; (8011e48 <USBD_LL_Init+0x94>)
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	4a1e      	ldr	r2, [pc, #120]	; (8011e48 <USBD_LL_Init+0x94>)
 8011dd0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011dd4:	4b1c      	ldr	r3, [pc, #112]	; (8011e48 <USBD_LL_Init+0x94>)
 8011dd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011dda:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8011ddc:	4b1a      	ldr	r3, [pc, #104]	; (8011e48 <USBD_LL_Init+0x94>)
 8011dde:	2206      	movs	r2, #6
 8011de0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011de2:	4b19      	ldr	r3, [pc, #100]	; (8011e48 <USBD_LL_Init+0x94>)
 8011de4:	2202      	movs	r2, #2
 8011de6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011de8:	4b17      	ldr	r3, [pc, #92]	; (8011e48 <USBD_LL_Init+0x94>)
 8011dea:	2202      	movs	r2, #2
 8011dec:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011dee:	4b16      	ldr	r3, [pc, #88]	; (8011e48 <USBD_LL_Init+0x94>)
 8011df0:	2200      	movs	r2, #0
 8011df2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011df4:	4b14      	ldr	r3, [pc, #80]	; (8011e48 <USBD_LL_Init+0x94>)
 8011df6:	2200      	movs	r2, #0
 8011df8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011dfa:	4b13      	ldr	r3, [pc, #76]	; (8011e48 <USBD_LL_Init+0x94>)
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8011e00:	4b11      	ldr	r3, [pc, #68]	; (8011e48 <USBD_LL_Init+0x94>)
 8011e02:	2200      	movs	r2, #0
 8011e04:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011e06:	4b10      	ldr	r3, [pc, #64]	; (8011e48 <USBD_LL_Init+0x94>)
 8011e08:	2200      	movs	r2, #0
 8011e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011e0c:	4b0e      	ldr	r3, [pc, #56]	; (8011e48 <USBD_LL_Init+0x94>)
 8011e0e:	2200      	movs	r2, #0
 8011e10:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011e12:	480d      	ldr	r0, [pc, #52]	; (8011e48 <USBD_LL_Init+0x94>)
 8011e14:	f7f7 fc79 	bl	800970a <HAL_PCD_Init>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d001      	beq.n	8011e22 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011e1e:	f7ef fcd9 	bl	80017d4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011e22:	2180      	movs	r1, #128	; 0x80
 8011e24:	4808      	ldr	r0, [pc, #32]	; (8011e48 <USBD_LL_Init+0x94>)
 8011e26:	f7f8 fdfa 	bl	800aa1e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011e2a:	2240      	movs	r2, #64	; 0x40
 8011e2c:	2100      	movs	r1, #0
 8011e2e:	4806      	ldr	r0, [pc, #24]	; (8011e48 <USBD_LL_Init+0x94>)
 8011e30:	f7f8 fdae 	bl	800a990 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011e34:	2280      	movs	r2, #128	; 0x80
 8011e36:	2101      	movs	r1, #1
 8011e38:	4803      	ldr	r0, [pc, #12]	; (8011e48 <USBD_LL_Init+0x94>)
 8011e3a:	f7f8 fda9 	bl	800a990 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011e3e:	2300      	movs	r3, #0
}
 8011e40:	4618      	mov	r0, r3
 8011e42:	3708      	adds	r7, #8
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}
 8011e48:	20002308 	.word	0x20002308

08011e4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b084      	sub	sp, #16
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e54:	2300      	movs	r3, #0
 8011e56:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e58:	2300      	movs	r3, #0
 8011e5a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011e62:	4618      	mov	r0, r3
 8011e64:	f7f7 fd75 	bl	8009952 <HAL_PCD_Start>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011e6c:	7bbb      	ldrb	r3, [r7, #14]
 8011e6e:	2b03      	cmp	r3, #3
 8011e70:	d816      	bhi.n	8011ea0 <USBD_LL_Start+0x54>
 8011e72:	a201      	add	r2, pc, #4	; (adr r2, 8011e78 <USBD_LL_Start+0x2c>)
 8011e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e78:	08011e89 	.word	0x08011e89
 8011e7c:	08011e8f 	.word	0x08011e8f
 8011e80:	08011e95 	.word	0x08011e95
 8011e84:	08011e9b 	.word	0x08011e9b
    case HAL_OK :
      usb_status = USBD_OK;
 8011e88:	2300      	movs	r3, #0
 8011e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8011e8c:	e00b      	b.n	8011ea6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011e8e:	2303      	movs	r3, #3
 8011e90:	73fb      	strb	r3, [r7, #15]
    break;
 8011e92:	e008      	b.n	8011ea6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011e94:	2301      	movs	r3, #1
 8011e96:	73fb      	strb	r3, [r7, #15]
    break;
 8011e98:	e005      	b.n	8011ea6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011e9a:	2303      	movs	r3, #3
 8011e9c:	73fb      	strb	r3, [r7, #15]
    break;
 8011e9e:	e002      	b.n	8011ea6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8011ea0:	2303      	movs	r3, #3
 8011ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8011ea4:	bf00      	nop
  }
  return usb_status;
 8011ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	3710      	adds	r7, #16
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}

08011eb0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b084      	sub	sp, #16
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
 8011eb8:	4608      	mov	r0, r1
 8011eba:	4611      	mov	r1, r2
 8011ebc:	461a      	mov	r2, r3
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	70fb      	strb	r3, [r7, #3]
 8011ec2:	460b      	mov	r3, r1
 8011ec4:	70bb      	strb	r3, [r7, #2]
 8011ec6:	4613      	mov	r3, r2
 8011ec8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011eca:	2300      	movs	r3, #0
 8011ecc:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ece:	2300      	movs	r3, #0
 8011ed0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011ed8:	78bb      	ldrb	r3, [r7, #2]
 8011eda:	883a      	ldrh	r2, [r7, #0]
 8011edc:	78f9      	ldrb	r1, [r7, #3]
 8011ede:	f7f8 fa1f 	bl	800a320 <HAL_PCD_EP_Open>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011ee6:	7bbb      	ldrb	r3, [r7, #14]
 8011ee8:	2b03      	cmp	r3, #3
 8011eea:	d817      	bhi.n	8011f1c <USBD_LL_OpenEP+0x6c>
 8011eec:	a201      	add	r2, pc, #4	; (adr r2, 8011ef4 <USBD_LL_OpenEP+0x44>)
 8011eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ef2:	bf00      	nop
 8011ef4:	08011f05 	.word	0x08011f05
 8011ef8:	08011f0b 	.word	0x08011f0b
 8011efc:	08011f11 	.word	0x08011f11
 8011f00:	08011f17 	.word	0x08011f17
    case HAL_OK :
      usb_status = USBD_OK;
 8011f04:	2300      	movs	r3, #0
 8011f06:	73fb      	strb	r3, [r7, #15]
    break;
 8011f08:	e00b      	b.n	8011f22 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011f0a:	2303      	movs	r3, #3
 8011f0c:	73fb      	strb	r3, [r7, #15]
    break;
 8011f0e:	e008      	b.n	8011f22 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011f10:	2301      	movs	r3, #1
 8011f12:	73fb      	strb	r3, [r7, #15]
    break;
 8011f14:	e005      	b.n	8011f22 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011f16:	2303      	movs	r3, #3
 8011f18:	73fb      	strb	r3, [r7, #15]
    break;
 8011f1a:	e002      	b.n	8011f22 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8011f1c:	2303      	movs	r3, #3
 8011f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8011f20:	bf00      	nop
  }
  return usb_status;
 8011f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f24:	4618      	mov	r0, r3
 8011f26:	3710      	adds	r7, #16
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	bd80      	pop	{r7, pc}

08011f2c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b084      	sub	sp, #16
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
 8011f34:	460b      	mov	r3, r1
 8011f36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f38:	2300      	movs	r3, #0
 8011f3a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011f46:	78fa      	ldrb	r2, [r7, #3]
 8011f48:	4611      	mov	r1, r2
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	f7f8 fa50 	bl	800a3f0 <HAL_PCD_EP_Close>
 8011f50:	4603      	mov	r3, r0
 8011f52:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011f54:	7bbb      	ldrb	r3, [r7, #14]
 8011f56:	2b03      	cmp	r3, #3
 8011f58:	d816      	bhi.n	8011f88 <USBD_LL_CloseEP+0x5c>
 8011f5a:	a201      	add	r2, pc, #4	; (adr r2, 8011f60 <USBD_LL_CloseEP+0x34>)
 8011f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f60:	08011f71 	.word	0x08011f71
 8011f64:	08011f77 	.word	0x08011f77
 8011f68:	08011f7d 	.word	0x08011f7d
 8011f6c:	08011f83 	.word	0x08011f83
    case HAL_OK :
      usb_status = USBD_OK;
 8011f70:	2300      	movs	r3, #0
 8011f72:	73fb      	strb	r3, [r7, #15]
    break;
 8011f74:	e00b      	b.n	8011f8e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011f76:	2303      	movs	r3, #3
 8011f78:	73fb      	strb	r3, [r7, #15]
    break;
 8011f7a:	e008      	b.n	8011f8e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011f7c:	2301      	movs	r3, #1
 8011f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8011f80:	e005      	b.n	8011f8e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011f82:	2303      	movs	r3, #3
 8011f84:	73fb      	strb	r3, [r7, #15]
    break;
 8011f86:	e002      	b.n	8011f8e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011f88:	2303      	movs	r3, #3
 8011f8a:	73fb      	strb	r3, [r7, #15]
    break;
 8011f8c:	bf00      	nop
  }
  return usb_status;
 8011f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f90:	4618      	mov	r0, r3
 8011f92:	3710      	adds	r7, #16
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}

08011f98 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b084      	sub	sp, #16
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
 8011fa0:	460b      	mov	r3, r1
 8011fa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011fa8:	2300      	movs	r3, #0
 8011faa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011fb2:	78fa      	ldrb	r2, [r7, #3]
 8011fb4:	4611      	mov	r1, r2
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f7f8 faf7 	bl	800a5aa <HAL_PCD_EP_SetStall>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011fc0:	7bbb      	ldrb	r3, [r7, #14]
 8011fc2:	2b03      	cmp	r3, #3
 8011fc4:	d816      	bhi.n	8011ff4 <USBD_LL_StallEP+0x5c>
 8011fc6:	a201      	add	r2, pc, #4	; (adr r2, 8011fcc <USBD_LL_StallEP+0x34>)
 8011fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fcc:	08011fdd 	.word	0x08011fdd
 8011fd0:	08011fe3 	.word	0x08011fe3
 8011fd4:	08011fe9 	.word	0x08011fe9
 8011fd8:	08011fef 	.word	0x08011fef
    case HAL_OK :
      usb_status = USBD_OK;
 8011fdc:	2300      	movs	r3, #0
 8011fde:	73fb      	strb	r3, [r7, #15]
    break;
 8011fe0:	e00b      	b.n	8011ffa <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011fe2:	2303      	movs	r3, #3
 8011fe4:	73fb      	strb	r3, [r7, #15]
    break;
 8011fe6:	e008      	b.n	8011ffa <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011fe8:	2301      	movs	r3, #1
 8011fea:	73fb      	strb	r3, [r7, #15]
    break;
 8011fec:	e005      	b.n	8011ffa <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011fee:	2303      	movs	r3, #3
 8011ff0:	73fb      	strb	r3, [r7, #15]
    break;
 8011ff2:	e002      	b.n	8011ffa <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011ff4:	2303      	movs	r3, #3
 8011ff6:	73fb      	strb	r3, [r7, #15]
    break;
 8011ff8:	bf00      	nop
  }
  return usb_status;
 8011ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	3710      	adds	r7, #16
 8012000:	46bd      	mov	sp, r7
 8012002:	bd80      	pop	{r7, pc}

08012004 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b084      	sub	sp, #16
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
 801200c:	460b      	mov	r3, r1
 801200e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012010:	2300      	movs	r3, #0
 8012012:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012014:	2300      	movs	r3, #0
 8012016:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801201e:	78fa      	ldrb	r2, [r7, #3]
 8012020:	4611      	mov	r1, r2
 8012022:	4618      	mov	r0, r3
 8012024:	f7f8 fb23 	bl	800a66e <HAL_PCD_EP_ClrStall>
 8012028:	4603      	mov	r3, r0
 801202a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801202c:	7bbb      	ldrb	r3, [r7, #14]
 801202e:	2b03      	cmp	r3, #3
 8012030:	d816      	bhi.n	8012060 <USBD_LL_ClearStallEP+0x5c>
 8012032:	a201      	add	r2, pc, #4	; (adr r2, 8012038 <USBD_LL_ClearStallEP+0x34>)
 8012034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012038:	08012049 	.word	0x08012049
 801203c:	0801204f 	.word	0x0801204f
 8012040:	08012055 	.word	0x08012055
 8012044:	0801205b 	.word	0x0801205b
    case HAL_OK :
      usb_status = USBD_OK;
 8012048:	2300      	movs	r3, #0
 801204a:	73fb      	strb	r3, [r7, #15]
    break;
 801204c:	e00b      	b.n	8012066 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801204e:	2303      	movs	r3, #3
 8012050:	73fb      	strb	r3, [r7, #15]
    break;
 8012052:	e008      	b.n	8012066 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012054:	2301      	movs	r3, #1
 8012056:	73fb      	strb	r3, [r7, #15]
    break;
 8012058:	e005      	b.n	8012066 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801205a:	2303      	movs	r3, #3
 801205c:	73fb      	strb	r3, [r7, #15]
    break;
 801205e:	e002      	b.n	8012066 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8012060:	2303      	movs	r3, #3
 8012062:	73fb      	strb	r3, [r7, #15]
    break;
 8012064:	bf00      	nop
  }
  return usb_status;
 8012066:	7bfb      	ldrb	r3, [r7, #15]
}
 8012068:	4618      	mov	r0, r3
 801206a:	3710      	adds	r7, #16
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}

08012070 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012070:	b480      	push	{r7}
 8012072:	b085      	sub	sp, #20
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
 8012078:	460b      	mov	r3, r1
 801207a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012082:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012088:	2b00      	cmp	r3, #0
 801208a:	da0b      	bge.n	80120a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801208c:	78fb      	ldrb	r3, [r7, #3]
 801208e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012092:	68f9      	ldr	r1, [r7, #12]
 8012094:	4613      	mov	r3, r2
 8012096:	00db      	lsls	r3, r3, #3
 8012098:	4413      	add	r3, r2
 801209a:	009b      	lsls	r3, r3, #2
 801209c:	440b      	add	r3, r1
 801209e:	333e      	adds	r3, #62	; 0x3e
 80120a0:	781b      	ldrb	r3, [r3, #0]
 80120a2:	e00b      	b.n	80120bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80120a4:	78fb      	ldrb	r3, [r7, #3]
 80120a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80120aa:	68f9      	ldr	r1, [r7, #12]
 80120ac:	4613      	mov	r3, r2
 80120ae:	00db      	lsls	r3, r3, #3
 80120b0:	4413      	add	r3, r2
 80120b2:	009b      	lsls	r3, r3, #2
 80120b4:	440b      	add	r3, r1
 80120b6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80120ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80120bc:	4618      	mov	r0, r3
 80120be:	3714      	adds	r7, #20
 80120c0:	46bd      	mov	sp, r7
 80120c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c6:	4770      	bx	lr

080120c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b084      	sub	sp, #16
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
 80120d0:	460b      	mov	r3, r1
 80120d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120d4:	2300      	movs	r3, #0
 80120d6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120d8:	2300      	movs	r3, #0
 80120da:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80120e2:	78fa      	ldrb	r2, [r7, #3]
 80120e4:	4611      	mov	r1, r2
 80120e6:	4618      	mov	r0, r3
 80120e8:	f7f8 f8f5 	bl	800a2d6 <HAL_PCD_SetAddress>
 80120ec:	4603      	mov	r3, r0
 80120ee:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80120f0:	7bbb      	ldrb	r3, [r7, #14]
 80120f2:	2b03      	cmp	r3, #3
 80120f4:	d816      	bhi.n	8012124 <USBD_LL_SetUSBAddress+0x5c>
 80120f6:	a201      	add	r2, pc, #4	; (adr r2, 80120fc <USBD_LL_SetUSBAddress+0x34>)
 80120f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120fc:	0801210d 	.word	0x0801210d
 8012100:	08012113 	.word	0x08012113
 8012104:	08012119 	.word	0x08012119
 8012108:	0801211f 	.word	0x0801211f
    case HAL_OK :
      usb_status = USBD_OK;
 801210c:	2300      	movs	r3, #0
 801210e:	73fb      	strb	r3, [r7, #15]
    break;
 8012110:	e00b      	b.n	801212a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012112:	2303      	movs	r3, #3
 8012114:	73fb      	strb	r3, [r7, #15]
    break;
 8012116:	e008      	b.n	801212a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012118:	2301      	movs	r3, #1
 801211a:	73fb      	strb	r3, [r7, #15]
    break;
 801211c:	e005      	b.n	801212a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801211e:	2303      	movs	r3, #3
 8012120:	73fb      	strb	r3, [r7, #15]
    break;
 8012122:	e002      	b.n	801212a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8012124:	2303      	movs	r3, #3
 8012126:	73fb      	strb	r3, [r7, #15]
    break;
 8012128:	bf00      	nop
  }
  return usb_status;
 801212a:	7bfb      	ldrb	r3, [r7, #15]
}
 801212c:	4618      	mov	r0, r3
 801212e:	3710      	adds	r7, #16
 8012130:	46bd      	mov	sp, r7
 8012132:	bd80      	pop	{r7, pc}

08012134 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b086      	sub	sp, #24
 8012138:	af00      	add	r7, sp, #0
 801213a:	60f8      	str	r0, [r7, #12]
 801213c:	607a      	str	r2, [r7, #4]
 801213e:	603b      	str	r3, [r7, #0]
 8012140:	460b      	mov	r3, r1
 8012142:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012144:	2300      	movs	r3, #0
 8012146:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012148:	2300      	movs	r3, #0
 801214a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012152:	7af9      	ldrb	r1, [r7, #11]
 8012154:	683b      	ldr	r3, [r7, #0]
 8012156:	687a      	ldr	r2, [r7, #4]
 8012158:	f7f8 f9ea 	bl	800a530 <HAL_PCD_EP_Transmit>
 801215c:	4603      	mov	r3, r0
 801215e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8012160:	7dbb      	ldrb	r3, [r7, #22]
 8012162:	2b03      	cmp	r3, #3
 8012164:	d816      	bhi.n	8012194 <USBD_LL_Transmit+0x60>
 8012166:	a201      	add	r2, pc, #4	; (adr r2, 801216c <USBD_LL_Transmit+0x38>)
 8012168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801216c:	0801217d 	.word	0x0801217d
 8012170:	08012183 	.word	0x08012183
 8012174:	08012189 	.word	0x08012189
 8012178:	0801218f 	.word	0x0801218f
    case HAL_OK :
      usb_status = USBD_OK;
 801217c:	2300      	movs	r3, #0
 801217e:	75fb      	strb	r3, [r7, #23]
    break;
 8012180:	e00b      	b.n	801219a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012182:	2303      	movs	r3, #3
 8012184:	75fb      	strb	r3, [r7, #23]
    break;
 8012186:	e008      	b.n	801219a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012188:	2301      	movs	r3, #1
 801218a:	75fb      	strb	r3, [r7, #23]
    break;
 801218c:	e005      	b.n	801219a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801218e:	2303      	movs	r3, #3
 8012190:	75fb      	strb	r3, [r7, #23]
    break;
 8012192:	e002      	b.n	801219a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8012194:	2303      	movs	r3, #3
 8012196:	75fb      	strb	r3, [r7, #23]
    break;
 8012198:	bf00      	nop
  }
  return usb_status;
 801219a:	7dfb      	ldrb	r3, [r7, #23]
}
 801219c:	4618      	mov	r0, r3
 801219e:	3718      	adds	r7, #24
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bd80      	pop	{r7, pc}

080121a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b086      	sub	sp, #24
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	60f8      	str	r0, [r7, #12]
 80121ac:	607a      	str	r2, [r7, #4]
 80121ae:	603b      	str	r3, [r7, #0]
 80121b0:	460b      	mov	r3, r1
 80121b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80121b4:	2300      	movs	r3, #0
 80121b6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80121b8:	2300      	movs	r3, #0
 80121ba:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80121c2:	7af9      	ldrb	r1, [r7, #11]
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	687a      	ldr	r2, [r7, #4]
 80121c8:	f7f8 f95c 	bl	800a484 <HAL_PCD_EP_Receive>
 80121cc:	4603      	mov	r3, r0
 80121ce:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80121d0:	7dbb      	ldrb	r3, [r7, #22]
 80121d2:	2b03      	cmp	r3, #3
 80121d4:	d816      	bhi.n	8012204 <USBD_LL_PrepareReceive+0x60>
 80121d6:	a201      	add	r2, pc, #4	; (adr r2, 80121dc <USBD_LL_PrepareReceive+0x38>)
 80121d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121dc:	080121ed 	.word	0x080121ed
 80121e0:	080121f3 	.word	0x080121f3
 80121e4:	080121f9 	.word	0x080121f9
 80121e8:	080121ff 	.word	0x080121ff
    case HAL_OK :
      usb_status = USBD_OK;
 80121ec:	2300      	movs	r3, #0
 80121ee:	75fb      	strb	r3, [r7, #23]
    break;
 80121f0:	e00b      	b.n	801220a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80121f2:	2303      	movs	r3, #3
 80121f4:	75fb      	strb	r3, [r7, #23]
    break;
 80121f6:	e008      	b.n	801220a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80121f8:	2301      	movs	r3, #1
 80121fa:	75fb      	strb	r3, [r7, #23]
    break;
 80121fc:	e005      	b.n	801220a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80121fe:	2303      	movs	r3, #3
 8012200:	75fb      	strb	r3, [r7, #23]
    break;
 8012202:	e002      	b.n	801220a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8012204:	2303      	movs	r3, #3
 8012206:	75fb      	strb	r3, [r7, #23]
    break;
 8012208:	bf00      	nop
  }
  return usb_status;
 801220a:	7dfb      	ldrb	r3, [r7, #23]
}
 801220c:	4618      	mov	r0, r3
 801220e:	3718      	adds	r7, #24
 8012210:	46bd      	mov	sp, r7
 8012212:	bd80      	pop	{r7, pc}

08012214 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b082      	sub	sp, #8
 8012218:	af00      	add	r7, sp, #0
 801221a:	6078      	str	r0, [r7, #4]
 801221c:	460b      	mov	r3, r1
 801221e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012226:	78fa      	ldrb	r2, [r7, #3]
 8012228:	4611      	mov	r1, r2
 801222a:	4618      	mov	r0, r3
 801222c:	f7f8 f968 	bl	800a500 <HAL_PCD_EP_GetRxCount>
 8012230:	4603      	mov	r3, r0
}
 8012232:	4618      	mov	r0, r3
 8012234:	3708      	adds	r7, #8
 8012236:	46bd      	mov	sp, r7
 8012238:	bd80      	pop	{r7, pc}
	...

0801223c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b082      	sub	sp, #8
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]
 8012244:	460b      	mov	r3, r1
 8012246:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8012248:	78fb      	ldrb	r3, [r7, #3]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d002      	beq.n	8012254 <HAL_PCDEx_LPM_Callback+0x18>
 801224e:	2b01      	cmp	r3, #1
 8012250:	d01f      	beq.n	8012292 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8012252:	e03b      	b.n	80122cc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	6a1b      	ldr	r3, [r3, #32]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d007      	beq.n	801226c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801225c:	f000 f854 	bl	8012308 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012260:	4b1c      	ldr	r3, [pc, #112]	; (80122d4 <HAL_PCDEx_LPM_Callback+0x98>)
 8012262:	691b      	ldr	r3, [r3, #16]
 8012264:	4a1b      	ldr	r2, [pc, #108]	; (80122d4 <HAL_PCDEx_LPM_Callback+0x98>)
 8012266:	f023 0306 	bic.w	r3, r3, #6
 801226a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	687a      	ldr	r2, [r7, #4]
 8012278:	6812      	ldr	r2, [r2, #0]
 801227a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801227e:	f023 0301 	bic.w	r3, r3, #1
 8012282:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801228a:	4618      	mov	r0, r3
 801228c:	f7fe fb08 	bl	80108a0 <USBD_LL_Resume>
    break;
 8012290:	e01c      	b.n	80122cc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	687a      	ldr	r2, [r7, #4]
 801229e:	6812      	ldr	r2, [r2, #0]
 80122a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80122a4:	f043 0301 	orr.w	r3, r3, #1
 80122a8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80122b0:	4618      	mov	r0, r3
 80122b2:	f7fe fadf 	bl	8010874 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	6a1b      	ldr	r3, [r3, #32]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d005      	beq.n	80122ca <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80122be:	4b05      	ldr	r3, [pc, #20]	; (80122d4 <HAL_PCDEx_LPM_Callback+0x98>)
 80122c0:	691b      	ldr	r3, [r3, #16]
 80122c2:	4a04      	ldr	r2, [pc, #16]	; (80122d4 <HAL_PCDEx_LPM_Callback+0x98>)
 80122c4:	f043 0306 	orr.w	r3, r3, #6
 80122c8:	6113      	str	r3, [r2, #16]
    break;
 80122ca:	bf00      	nop
}
 80122cc:	bf00      	nop
 80122ce:	3708      	adds	r7, #8
 80122d0:	46bd      	mov	sp, r7
 80122d2:	bd80      	pop	{r7, pc}
 80122d4:	e000ed00 	.word	0xe000ed00

080122d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80122d8:	b480      	push	{r7}
 80122da:	b083      	sub	sp, #12
 80122dc:	af00      	add	r7, sp, #0
 80122de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80122e0:	4b03      	ldr	r3, [pc, #12]	; (80122f0 <USBD_static_malloc+0x18>)
}
 80122e2:	4618      	mov	r0, r3
 80122e4:	370c      	adds	r7, #12
 80122e6:	46bd      	mov	sp, r7
 80122e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ec:	4770      	bx	lr
 80122ee:	bf00      	nop
 80122f0:	20002814 	.word	0x20002814

080122f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80122f4:	b480      	push	{r7}
 80122f6:	b083      	sub	sp, #12
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]

}
 80122fc:	bf00      	nop
 80122fe:	370c      	adds	r7, #12
 8012300:	46bd      	mov	sp, r7
 8012302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012306:	4770      	bx	lr

08012308 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8012308:	b580      	push	{r7, lr}
 801230a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801230c:	f7ef f9ca 	bl	80016a4 <SystemClock_Config>
}
 8012310:	bf00      	nop
 8012312:	bd80      	pop	{r7, pc}

08012314 <__errno>:
 8012314:	4b01      	ldr	r3, [pc, #4]	; (801231c <__errno+0x8>)
 8012316:	6818      	ldr	r0, [r3, #0]
 8012318:	4770      	bx	lr
 801231a:	bf00      	nop
 801231c:	200005dc 	.word	0x200005dc

08012320 <__libc_init_array>:
 8012320:	b570      	push	{r4, r5, r6, lr}
 8012322:	4d0d      	ldr	r5, [pc, #52]	; (8012358 <__libc_init_array+0x38>)
 8012324:	4c0d      	ldr	r4, [pc, #52]	; (801235c <__libc_init_array+0x3c>)
 8012326:	1b64      	subs	r4, r4, r5
 8012328:	10a4      	asrs	r4, r4, #2
 801232a:	2600      	movs	r6, #0
 801232c:	42a6      	cmp	r6, r4
 801232e:	d109      	bne.n	8012344 <__libc_init_array+0x24>
 8012330:	4d0b      	ldr	r5, [pc, #44]	; (8012360 <__libc_init_array+0x40>)
 8012332:	4c0c      	ldr	r4, [pc, #48]	; (8012364 <__libc_init_array+0x44>)
 8012334:	f001 f83a 	bl	80133ac <_init>
 8012338:	1b64      	subs	r4, r4, r5
 801233a:	10a4      	asrs	r4, r4, #2
 801233c:	2600      	movs	r6, #0
 801233e:	42a6      	cmp	r6, r4
 8012340:	d105      	bne.n	801234e <__libc_init_array+0x2e>
 8012342:	bd70      	pop	{r4, r5, r6, pc}
 8012344:	f855 3b04 	ldr.w	r3, [r5], #4
 8012348:	4798      	blx	r3
 801234a:	3601      	adds	r6, #1
 801234c:	e7ee      	b.n	801232c <__libc_init_array+0xc>
 801234e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012352:	4798      	blx	r3
 8012354:	3601      	adds	r6, #1
 8012356:	e7f2      	b.n	801233e <__libc_init_array+0x1e>
 8012358:	080135e4 	.word	0x080135e4
 801235c:	080135e4 	.word	0x080135e4
 8012360:	080135e4 	.word	0x080135e4
 8012364:	080135e8 	.word	0x080135e8

08012368 <memcpy>:
 8012368:	440a      	add	r2, r1
 801236a:	4291      	cmp	r1, r2
 801236c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012370:	d100      	bne.n	8012374 <memcpy+0xc>
 8012372:	4770      	bx	lr
 8012374:	b510      	push	{r4, lr}
 8012376:	f811 4b01 	ldrb.w	r4, [r1], #1
 801237a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801237e:	4291      	cmp	r1, r2
 8012380:	d1f9      	bne.n	8012376 <memcpy+0xe>
 8012382:	bd10      	pop	{r4, pc}

08012384 <memset>:
 8012384:	4402      	add	r2, r0
 8012386:	4603      	mov	r3, r0
 8012388:	4293      	cmp	r3, r2
 801238a:	d100      	bne.n	801238e <memset+0xa>
 801238c:	4770      	bx	lr
 801238e:	f803 1b01 	strb.w	r1, [r3], #1
 8012392:	e7f9      	b.n	8012388 <memset+0x4>

08012394 <_free_r>:
 8012394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012396:	2900      	cmp	r1, #0
 8012398:	d044      	beq.n	8012424 <_free_r+0x90>
 801239a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801239e:	9001      	str	r0, [sp, #4]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	f1a1 0404 	sub.w	r4, r1, #4
 80123a6:	bfb8      	it	lt
 80123a8:	18e4      	addlt	r4, r4, r3
 80123aa:	f000 fc59 	bl	8012c60 <__malloc_lock>
 80123ae:	4a1e      	ldr	r2, [pc, #120]	; (8012428 <_free_r+0x94>)
 80123b0:	9801      	ldr	r0, [sp, #4]
 80123b2:	6813      	ldr	r3, [r2, #0]
 80123b4:	b933      	cbnz	r3, 80123c4 <_free_r+0x30>
 80123b6:	6063      	str	r3, [r4, #4]
 80123b8:	6014      	str	r4, [r2, #0]
 80123ba:	b003      	add	sp, #12
 80123bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80123c0:	f000 bc54 	b.w	8012c6c <__malloc_unlock>
 80123c4:	42a3      	cmp	r3, r4
 80123c6:	d908      	bls.n	80123da <_free_r+0x46>
 80123c8:	6825      	ldr	r5, [r4, #0]
 80123ca:	1961      	adds	r1, r4, r5
 80123cc:	428b      	cmp	r3, r1
 80123ce:	bf01      	itttt	eq
 80123d0:	6819      	ldreq	r1, [r3, #0]
 80123d2:	685b      	ldreq	r3, [r3, #4]
 80123d4:	1949      	addeq	r1, r1, r5
 80123d6:	6021      	streq	r1, [r4, #0]
 80123d8:	e7ed      	b.n	80123b6 <_free_r+0x22>
 80123da:	461a      	mov	r2, r3
 80123dc:	685b      	ldr	r3, [r3, #4]
 80123de:	b10b      	cbz	r3, 80123e4 <_free_r+0x50>
 80123e0:	42a3      	cmp	r3, r4
 80123e2:	d9fa      	bls.n	80123da <_free_r+0x46>
 80123e4:	6811      	ldr	r1, [r2, #0]
 80123e6:	1855      	adds	r5, r2, r1
 80123e8:	42a5      	cmp	r5, r4
 80123ea:	d10b      	bne.n	8012404 <_free_r+0x70>
 80123ec:	6824      	ldr	r4, [r4, #0]
 80123ee:	4421      	add	r1, r4
 80123f0:	1854      	adds	r4, r2, r1
 80123f2:	42a3      	cmp	r3, r4
 80123f4:	6011      	str	r1, [r2, #0]
 80123f6:	d1e0      	bne.n	80123ba <_free_r+0x26>
 80123f8:	681c      	ldr	r4, [r3, #0]
 80123fa:	685b      	ldr	r3, [r3, #4]
 80123fc:	6053      	str	r3, [r2, #4]
 80123fe:	4421      	add	r1, r4
 8012400:	6011      	str	r1, [r2, #0]
 8012402:	e7da      	b.n	80123ba <_free_r+0x26>
 8012404:	d902      	bls.n	801240c <_free_r+0x78>
 8012406:	230c      	movs	r3, #12
 8012408:	6003      	str	r3, [r0, #0]
 801240a:	e7d6      	b.n	80123ba <_free_r+0x26>
 801240c:	6825      	ldr	r5, [r4, #0]
 801240e:	1961      	adds	r1, r4, r5
 8012410:	428b      	cmp	r3, r1
 8012412:	bf04      	itt	eq
 8012414:	6819      	ldreq	r1, [r3, #0]
 8012416:	685b      	ldreq	r3, [r3, #4]
 8012418:	6063      	str	r3, [r4, #4]
 801241a:	bf04      	itt	eq
 801241c:	1949      	addeq	r1, r1, r5
 801241e:	6021      	streq	r1, [r4, #0]
 8012420:	6054      	str	r4, [r2, #4]
 8012422:	e7ca      	b.n	80123ba <_free_r+0x26>
 8012424:	b003      	add	sp, #12
 8012426:	bd30      	pop	{r4, r5, pc}
 8012428:	20002a34 	.word	0x20002a34

0801242c <sbrk_aligned>:
 801242c:	b570      	push	{r4, r5, r6, lr}
 801242e:	4e0e      	ldr	r6, [pc, #56]	; (8012468 <sbrk_aligned+0x3c>)
 8012430:	460c      	mov	r4, r1
 8012432:	6831      	ldr	r1, [r6, #0]
 8012434:	4605      	mov	r5, r0
 8012436:	b911      	cbnz	r1, 801243e <sbrk_aligned+0x12>
 8012438:	f000 f91a 	bl	8012670 <_sbrk_r>
 801243c:	6030      	str	r0, [r6, #0]
 801243e:	4621      	mov	r1, r4
 8012440:	4628      	mov	r0, r5
 8012442:	f000 f915 	bl	8012670 <_sbrk_r>
 8012446:	1c43      	adds	r3, r0, #1
 8012448:	d00a      	beq.n	8012460 <sbrk_aligned+0x34>
 801244a:	1cc4      	adds	r4, r0, #3
 801244c:	f024 0403 	bic.w	r4, r4, #3
 8012450:	42a0      	cmp	r0, r4
 8012452:	d007      	beq.n	8012464 <sbrk_aligned+0x38>
 8012454:	1a21      	subs	r1, r4, r0
 8012456:	4628      	mov	r0, r5
 8012458:	f000 f90a 	bl	8012670 <_sbrk_r>
 801245c:	3001      	adds	r0, #1
 801245e:	d101      	bne.n	8012464 <sbrk_aligned+0x38>
 8012460:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8012464:	4620      	mov	r0, r4
 8012466:	bd70      	pop	{r4, r5, r6, pc}
 8012468:	20002a38 	.word	0x20002a38

0801246c <_malloc_r>:
 801246c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012470:	1ccd      	adds	r5, r1, #3
 8012472:	f025 0503 	bic.w	r5, r5, #3
 8012476:	3508      	adds	r5, #8
 8012478:	2d0c      	cmp	r5, #12
 801247a:	bf38      	it	cc
 801247c:	250c      	movcc	r5, #12
 801247e:	2d00      	cmp	r5, #0
 8012480:	4607      	mov	r7, r0
 8012482:	db01      	blt.n	8012488 <_malloc_r+0x1c>
 8012484:	42a9      	cmp	r1, r5
 8012486:	d905      	bls.n	8012494 <_malloc_r+0x28>
 8012488:	230c      	movs	r3, #12
 801248a:	603b      	str	r3, [r7, #0]
 801248c:	2600      	movs	r6, #0
 801248e:	4630      	mov	r0, r6
 8012490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012494:	4e2e      	ldr	r6, [pc, #184]	; (8012550 <_malloc_r+0xe4>)
 8012496:	f000 fbe3 	bl	8012c60 <__malloc_lock>
 801249a:	6833      	ldr	r3, [r6, #0]
 801249c:	461c      	mov	r4, r3
 801249e:	bb34      	cbnz	r4, 80124ee <_malloc_r+0x82>
 80124a0:	4629      	mov	r1, r5
 80124a2:	4638      	mov	r0, r7
 80124a4:	f7ff ffc2 	bl	801242c <sbrk_aligned>
 80124a8:	1c43      	adds	r3, r0, #1
 80124aa:	4604      	mov	r4, r0
 80124ac:	d14d      	bne.n	801254a <_malloc_r+0xde>
 80124ae:	6834      	ldr	r4, [r6, #0]
 80124b0:	4626      	mov	r6, r4
 80124b2:	2e00      	cmp	r6, #0
 80124b4:	d140      	bne.n	8012538 <_malloc_r+0xcc>
 80124b6:	6823      	ldr	r3, [r4, #0]
 80124b8:	4631      	mov	r1, r6
 80124ba:	4638      	mov	r0, r7
 80124bc:	eb04 0803 	add.w	r8, r4, r3
 80124c0:	f000 f8d6 	bl	8012670 <_sbrk_r>
 80124c4:	4580      	cmp	r8, r0
 80124c6:	d13a      	bne.n	801253e <_malloc_r+0xd2>
 80124c8:	6821      	ldr	r1, [r4, #0]
 80124ca:	3503      	adds	r5, #3
 80124cc:	1a6d      	subs	r5, r5, r1
 80124ce:	f025 0503 	bic.w	r5, r5, #3
 80124d2:	3508      	adds	r5, #8
 80124d4:	2d0c      	cmp	r5, #12
 80124d6:	bf38      	it	cc
 80124d8:	250c      	movcc	r5, #12
 80124da:	4629      	mov	r1, r5
 80124dc:	4638      	mov	r0, r7
 80124de:	f7ff ffa5 	bl	801242c <sbrk_aligned>
 80124e2:	3001      	adds	r0, #1
 80124e4:	d02b      	beq.n	801253e <_malloc_r+0xd2>
 80124e6:	6823      	ldr	r3, [r4, #0]
 80124e8:	442b      	add	r3, r5
 80124ea:	6023      	str	r3, [r4, #0]
 80124ec:	e00e      	b.n	801250c <_malloc_r+0xa0>
 80124ee:	6822      	ldr	r2, [r4, #0]
 80124f0:	1b52      	subs	r2, r2, r5
 80124f2:	d41e      	bmi.n	8012532 <_malloc_r+0xc6>
 80124f4:	2a0b      	cmp	r2, #11
 80124f6:	d916      	bls.n	8012526 <_malloc_r+0xba>
 80124f8:	1961      	adds	r1, r4, r5
 80124fa:	42a3      	cmp	r3, r4
 80124fc:	6025      	str	r5, [r4, #0]
 80124fe:	bf18      	it	ne
 8012500:	6059      	strne	r1, [r3, #4]
 8012502:	6863      	ldr	r3, [r4, #4]
 8012504:	bf08      	it	eq
 8012506:	6031      	streq	r1, [r6, #0]
 8012508:	5162      	str	r2, [r4, r5]
 801250a:	604b      	str	r3, [r1, #4]
 801250c:	4638      	mov	r0, r7
 801250e:	f104 060b 	add.w	r6, r4, #11
 8012512:	f000 fbab 	bl	8012c6c <__malloc_unlock>
 8012516:	f026 0607 	bic.w	r6, r6, #7
 801251a:	1d23      	adds	r3, r4, #4
 801251c:	1af2      	subs	r2, r6, r3
 801251e:	d0b6      	beq.n	801248e <_malloc_r+0x22>
 8012520:	1b9b      	subs	r3, r3, r6
 8012522:	50a3      	str	r3, [r4, r2]
 8012524:	e7b3      	b.n	801248e <_malloc_r+0x22>
 8012526:	6862      	ldr	r2, [r4, #4]
 8012528:	42a3      	cmp	r3, r4
 801252a:	bf0c      	ite	eq
 801252c:	6032      	streq	r2, [r6, #0]
 801252e:	605a      	strne	r2, [r3, #4]
 8012530:	e7ec      	b.n	801250c <_malloc_r+0xa0>
 8012532:	4623      	mov	r3, r4
 8012534:	6864      	ldr	r4, [r4, #4]
 8012536:	e7b2      	b.n	801249e <_malloc_r+0x32>
 8012538:	4634      	mov	r4, r6
 801253a:	6876      	ldr	r6, [r6, #4]
 801253c:	e7b9      	b.n	80124b2 <_malloc_r+0x46>
 801253e:	230c      	movs	r3, #12
 8012540:	603b      	str	r3, [r7, #0]
 8012542:	4638      	mov	r0, r7
 8012544:	f000 fb92 	bl	8012c6c <__malloc_unlock>
 8012548:	e7a1      	b.n	801248e <_malloc_r+0x22>
 801254a:	6025      	str	r5, [r4, #0]
 801254c:	e7de      	b.n	801250c <_malloc_r+0xa0>
 801254e:	bf00      	nop
 8012550:	20002a34 	.word	0x20002a34

08012554 <iprintf>:
 8012554:	b40f      	push	{r0, r1, r2, r3}
 8012556:	4b0a      	ldr	r3, [pc, #40]	; (8012580 <iprintf+0x2c>)
 8012558:	b513      	push	{r0, r1, r4, lr}
 801255a:	681c      	ldr	r4, [r3, #0]
 801255c:	b124      	cbz	r4, 8012568 <iprintf+0x14>
 801255e:	69a3      	ldr	r3, [r4, #24]
 8012560:	b913      	cbnz	r3, 8012568 <iprintf+0x14>
 8012562:	4620      	mov	r0, r4
 8012564:	f000 fa76 	bl	8012a54 <__sinit>
 8012568:	ab05      	add	r3, sp, #20
 801256a:	9a04      	ldr	r2, [sp, #16]
 801256c:	68a1      	ldr	r1, [r4, #8]
 801256e:	9301      	str	r3, [sp, #4]
 8012570:	4620      	mov	r0, r4
 8012572:	f000 fbab 	bl	8012ccc <_vfiprintf_r>
 8012576:	b002      	add	sp, #8
 8012578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801257c:	b004      	add	sp, #16
 801257e:	4770      	bx	lr
 8012580:	200005dc 	.word	0x200005dc

08012584 <_puts_r>:
 8012584:	b570      	push	{r4, r5, r6, lr}
 8012586:	460e      	mov	r6, r1
 8012588:	4605      	mov	r5, r0
 801258a:	b118      	cbz	r0, 8012594 <_puts_r+0x10>
 801258c:	6983      	ldr	r3, [r0, #24]
 801258e:	b90b      	cbnz	r3, 8012594 <_puts_r+0x10>
 8012590:	f000 fa60 	bl	8012a54 <__sinit>
 8012594:	69ab      	ldr	r3, [r5, #24]
 8012596:	68ac      	ldr	r4, [r5, #8]
 8012598:	b913      	cbnz	r3, 80125a0 <_puts_r+0x1c>
 801259a:	4628      	mov	r0, r5
 801259c:	f000 fa5a 	bl	8012a54 <__sinit>
 80125a0:	4b2c      	ldr	r3, [pc, #176]	; (8012654 <_puts_r+0xd0>)
 80125a2:	429c      	cmp	r4, r3
 80125a4:	d120      	bne.n	80125e8 <_puts_r+0x64>
 80125a6:	686c      	ldr	r4, [r5, #4]
 80125a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80125aa:	07db      	lsls	r3, r3, #31
 80125ac:	d405      	bmi.n	80125ba <_puts_r+0x36>
 80125ae:	89a3      	ldrh	r3, [r4, #12]
 80125b0:	0598      	lsls	r0, r3, #22
 80125b2:	d402      	bmi.n	80125ba <_puts_r+0x36>
 80125b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80125b6:	f000 faeb 	bl	8012b90 <__retarget_lock_acquire_recursive>
 80125ba:	89a3      	ldrh	r3, [r4, #12]
 80125bc:	0719      	lsls	r1, r3, #28
 80125be:	d51d      	bpl.n	80125fc <_puts_r+0x78>
 80125c0:	6923      	ldr	r3, [r4, #16]
 80125c2:	b1db      	cbz	r3, 80125fc <_puts_r+0x78>
 80125c4:	3e01      	subs	r6, #1
 80125c6:	68a3      	ldr	r3, [r4, #8]
 80125c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80125cc:	3b01      	subs	r3, #1
 80125ce:	60a3      	str	r3, [r4, #8]
 80125d0:	bb39      	cbnz	r1, 8012622 <_puts_r+0x9e>
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	da38      	bge.n	8012648 <_puts_r+0xc4>
 80125d6:	4622      	mov	r2, r4
 80125d8:	210a      	movs	r1, #10
 80125da:	4628      	mov	r0, r5
 80125dc:	f000 f860 	bl	80126a0 <__swbuf_r>
 80125e0:	3001      	adds	r0, #1
 80125e2:	d011      	beq.n	8012608 <_puts_r+0x84>
 80125e4:	250a      	movs	r5, #10
 80125e6:	e011      	b.n	801260c <_puts_r+0x88>
 80125e8:	4b1b      	ldr	r3, [pc, #108]	; (8012658 <_puts_r+0xd4>)
 80125ea:	429c      	cmp	r4, r3
 80125ec:	d101      	bne.n	80125f2 <_puts_r+0x6e>
 80125ee:	68ac      	ldr	r4, [r5, #8]
 80125f0:	e7da      	b.n	80125a8 <_puts_r+0x24>
 80125f2:	4b1a      	ldr	r3, [pc, #104]	; (801265c <_puts_r+0xd8>)
 80125f4:	429c      	cmp	r4, r3
 80125f6:	bf08      	it	eq
 80125f8:	68ec      	ldreq	r4, [r5, #12]
 80125fa:	e7d5      	b.n	80125a8 <_puts_r+0x24>
 80125fc:	4621      	mov	r1, r4
 80125fe:	4628      	mov	r0, r5
 8012600:	f000 f8a0 	bl	8012744 <__swsetup_r>
 8012604:	2800      	cmp	r0, #0
 8012606:	d0dd      	beq.n	80125c4 <_puts_r+0x40>
 8012608:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801260c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801260e:	07da      	lsls	r2, r3, #31
 8012610:	d405      	bmi.n	801261e <_puts_r+0x9a>
 8012612:	89a3      	ldrh	r3, [r4, #12]
 8012614:	059b      	lsls	r3, r3, #22
 8012616:	d402      	bmi.n	801261e <_puts_r+0x9a>
 8012618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801261a:	f000 faba 	bl	8012b92 <__retarget_lock_release_recursive>
 801261e:	4628      	mov	r0, r5
 8012620:	bd70      	pop	{r4, r5, r6, pc}
 8012622:	2b00      	cmp	r3, #0
 8012624:	da04      	bge.n	8012630 <_puts_r+0xac>
 8012626:	69a2      	ldr	r2, [r4, #24]
 8012628:	429a      	cmp	r2, r3
 801262a:	dc06      	bgt.n	801263a <_puts_r+0xb6>
 801262c:	290a      	cmp	r1, #10
 801262e:	d004      	beq.n	801263a <_puts_r+0xb6>
 8012630:	6823      	ldr	r3, [r4, #0]
 8012632:	1c5a      	adds	r2, r3, #1
 8012634:	6022      	str	r2, [r4, #0]
 8012636:	7019      	strb	r1, [r3, #0]
 8012638:	e7c5      	b.n	80125c6 <_puts_r+0x42>
 801263a:	4622      	mov	r2, r4
 801263c:	4628      	mov	r0, r5
 801263e:	f000 f82f 	bl	80126a0 <__swbuf_r>
 8012642:	3001      	adds	r0, #1
 8012644:	d1bf      	bne.n	80125c6 <_puts_r+0x42>
 8012646:	e7df      	b.n	8012608 <_puts_r+0x84>
 8012648:	6823      	ldr	r3, [r4, #0]
 801264a:	250a      	movs	r5, #10
 801264c:	1c5a      	adds	r2, r3, #1
 801264e:	6022      	str	r2, [r4, #0]
 8012650:	701d      	strb	r5, [r3, #0]
 8012652:	e7db      	b.n	801260c <_puts_r+0x88>
 8012654:	08013568 	.word	0x08013568
 8012658:	08013588 	.word	0x08013588
 801265c:	08013548 	.word	0x08013548

08012660 <puts>:
 8012660:	4b02      	ldr	r3, [pc, #8]	; (801266c <puts+0xc>)
 8012662:	4601      	mov	r1, r0
 8012664:	6818      	ldr	r0, [r3, #0]
 8012666:	f7ff bf8d 	b.w	8012584 <_puts_r>
 801266a:	bf00      	nop
 801266c:	200005dc 	.word	0x200005dc

08012670 <_sbrk_r>:
 8012670:	b538      	push	{r3, r4, r5, lr}
 8012672:	4d06      	ldr	r5, [pc, #24]	; (801268c <_sbrk_r+0x1c>)
 8012674:	2300      	movs	r3, #0
 8012676:	4604      	mov	r4, r0
 8012678:	4608      	mov	r0, r1
 801267a:	602b      	str	r3, [r5, #0]
 801267c:	f7ef fc5c 	bl	8001f38 <_sbrk>
 8012680:	1c43      	adds	r3, r0, #1
 8012682:	d102      	bne.n	801268a <_sbrk_r+0x1a>
 8012684:	682b      	ldr	r3, [r5, #0]
 8012686:	b103      	cbz	r3, 801268a <_sbrk_r+0x1a>
 8012688:	6023      	str	r3, [r4, #0]
 801268a:	bd38      	pop	{r3, r4, r5, pc}
 801268c:	20002a40 	.word	0x20002a40

08012690 <strcpy>:
 8012690:	4603      	mov	r3, r0
 8012692:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012696:	f803 2b01 	strb.w	r2, [r3], #1
 801269a:	2a00      	cmp	r2, #0
 801269c:	d1f9      	bne.n	8012692 <strcpy+0x2>
 801269e:	4770      	bx	lr

080126a0 <__swbuf_r>:
 80126a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126a2:	460e      	mov	r6, r1
 80126a4:	4614      	mov	r4, r2
 80126a6:	4605      	mov	r5, r0
 80126a8:	b118      	cbz	r0, 80126b2 <__swbuf_r+0x12>
 80126aa:	6983      	ldr	r3, [r0, #24]
 80126ac:	b90b      	cbnz	r3, 80126b2 <__swbuf_r+0x12>
 80126ae:	f000 f9d1 	bl	8012a54 <__sinit>
 80126b2:	4b21      	ldr	r3, [pc, #132]	; (8012738 <__swbuf_r+0x98>)
 80126b4:	429c      	cmp	r4, r3
 80126b6:	d12b      	bne.n	8012710 <__swbuf_r+0x70>
 80126b8:	686c      	ldr	r4, [r5, #4]
 80126ba:	69a3      	ldr	r3, [r4, #24]
 80126bc:	60a3      	str	r3, [r4, #8]
 80126be:	89a3      	ldrh	r3, [r4, #12]
 80126c0:	071a      	lsls	r2, r3, #28
 80126c2:	d52f      	bpl.n	8012724 <__swbuf_r+0x84>
 80126c4:	6923      	ldr	r3, [r4, #16]
 80126c6:	b36b      	cbz	r3, 8012724 <__swbuf_r+0x84>
 80126c8:	6923      	ldr	r3, [r4, #16]
 80126ca:	6820      	ldr	r0, [r4, #0]
 80126cc:	1ac0      	subs	r0, r0, r3
 80126ce:	6963      	ldr	r3, [r4, #20]
 80126d0:	b2f6      	uxtb	r6, r6
 80126d2:	4283      	cmp	r3, r0
 80126d4:	4637      	mov	r7, r6
 80126d6:	dc04      	bgt.n	80126e2 <__swbuf_r+0x42>
 80126d8:	4621      	mov	r1, r4
 80126da:	4628      	mov	r0, r5
 80126dc:	f000 f926 	bl	801292c <_fflush_r>
 80126e0:	bb30      	cbnz	r0, 8012730 <__swbuf_r+0x90>
 80126e2:	68a3      	ldr	r3, [r4, #8]
 80126e4:	3b01      	subs	r3, #1
 80126e6:	60a3      	str	r3, [r4, #8]
 80126e8:	6823      	ldr	r3, [r4, #0]
 80126ea:	1c5a      	adds	r2, r3, #1
 80126ec:	6022      	str	r2, [r4, #0]
 80126ee:	701e      	strb	r6, [r3, #0]
 80126f0:	6963      	ldr	r3, [r4, #20]
 80126f2:	3001      	adds	r0, #1
 80126f4:	4283      	cmp	r3, r0
 80126f6:	d004      	beq.n	8012702 <__swbuf_r+0x62>
 80126f8:	89a3      	ldrh	r3, [r4, #12]
 80126fa:	07db      	lsls	r3, r3, #31
 80126fc:	d506      	bpl.n	801270c <__swbuf_r+0x6c>
 80126fe:	2e0a      	cmp	r6, #10
 8012700:	d104      	bne.n	801270c <__swbuf_r+0x6c>
 8012702:	4621      	mov	r1, r4
 8012704:	4628      	mov	r0, r5
 8012706:	f000 f911 	bl	801292c <_fflush_r>
 801270a:	b988      	cbnz	r0, 8012730 <__swbuf_r+0x90>
 801270c:	4638      	mov	r0, r7
 801270e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012710:	4b0a      	ldr	r3, [pc, #40]	; (801273c <__swbuf_r+0x9c>)
 8012712:	429c      	cmp	r4, r3
 8012714:	d101      	bne.n	801271a <__swbuf_r+0x7a>
 8012716:	68ac      	ldr	r4, [r5, #8]
 8012718:	e7cf      	b.n	80126ba <__swbuf_r+0x1a>
 801271a:	4b09      	ldr	r3, [pc, #36]	; (8012740 <__swbuf_r+0xa0>)
 801271c:	429c      	cmp	r4, r3
 801271e:	bf08      	it	eq
 8012720:	68ec      	ldreq	r4, [r5, #12]
 8012722:	e7ca      	b.n	80126ba <__swbuf_r+0x1a>
 8012724:	4621      	mov	r1, r4
 8012726:	4628      	mov	r0, r5
 8012728:	f000 f80c 	bl	8012744 <__swsetup_r>
 801272c:	2800      	cmp	r0, #0
 801272e:	d0cb      	beq.n	80126c8 <__swbuf_r+0x28>
 8012730:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012734:	e7ea      	b.n	801270c <__swbuf_r+0x6c>
 8012736:	bf00      	nop
 8012738:	08013568 	.word	0x08013568
 801273c:	08013588 	.word	0x08013588
 8012740:	08013548 	.word	0x08013548

08012744 <__swsetup_r>:
 8012744:	4b32      	ldr	r3, [pc, #200]	; (8012810 <__swsetup_r+0xcc>)
 8012746:	b570      	push	{r4, r5, r6, lr}
 8012748:	681d      	ldr	r5, [r3, #0]
 801274a:	4606      	mov	r6, r0
 801274c:	460c      	mov	r4, r1
 801274e:	b125      	cbz	r5, 801275a <__swsetup_r+0x16>
 8012750:	69ab      	ldr	r3, [r5, #24]
 8012752:	b913      	cbnz	r3, 801275a <__swsetup_r+0x16>
 8012754:	4628      	mov	r0, r5
 8012756:	f000 f97d 	bl	8012a54 <__sinit>
 801275a:	4b2e      	ldr	r3, [pc, #184]	; (8012814 <__swsetup_r+0xd0>)
 801275c:	429c      	cmp	r4, r3
 801275e:	d10f      	bne.n	8012780 <__swsetup_r+0x3c>
 8012760:	686c      	ldr	r4, [r5, #4]
 8012762:	89a3      	ldrh	r3, [r4, #12]
 8012764:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012768:	0719      	lsls	r1, r3, #28
 801276a:	d42c      	bmi.n	80127c6 <__swsetup_r+0x82>
 801276c:	06dd      	lsls	r5, r3, #27
 801276e:	d411      	bmi.n	8012794 <__swsetup_r+0x50>
 8012770:	2309      	movs	r3, #9
 8012772:	6033      	str	r3, [r6, #0]
 8012774:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012778:	81a3      	strh	r3, [r4, #12]
 801277a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801277e:	e03e      	b.n	80127fe <__swsetup_r+0xba>
 8012780:	4b25      	ldr	r3, [pc, #148]	; (8012818 <__swsetup_r+0xd4>)
 8012782:	429c      	cmp	r4, r3
 8012784:	d101      	bne.n	801278a <__swsetup_r+0x46>
 8012786:	68ac      	ldr	r4, [r5, #8]
 8012788:	e7eb      	b.n	8012762 <__swsetup_r+0x1e>
 801278a:	4b24      	ldr	r3, [pc, #144]	; (801281c <__swsetup_r+0xd8>)
 801278c:	429c      	cmp	r4, r3
 801278e:	bf08      	it	eq
 8012790:	68ec      	ldreq	r4, [r5, #12]
 8012792:	e7e6      	b.n	8012762 <__swsetup_r+0x1e>
 8012794:	0758      	lsls	r0, r3, #29
 8012796:	d512      	bpl.n	80127be <__swsetup_r+0x7a>
 8012798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801279a:	b141      	cbz	r1, 80127ae <__swsetup_r+0x6a>
 801279c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80127a0:	4299      	cmp	r1, r3
 80127a2:	d002      	beq.n	80127aa <__swsetup_r+0x66>
 80127a4:	4630      	mov	r0, r6
 80127a6:	f7ff fdf5 	bl	8012394 <_free_r>
 80127aa:	2300      	movs	r3, #0
 80127ac:	6363      	str	r3, [r4, #52]	; 0x34
 80127ae:	89a3      	ldrh	r3, [r4, #12]
 80127b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80127b4:	81a3      	strh	r3, [r4, #12]
 80127b6:	2300      	movs	r3, #0
 80127b8:	6063      	str	r3, [r4, #4]
 80127ba:	6923      	ldr	r3, [r4, #16]
 80127bc:	6023      	str	r3, [r4, #0]
 80127be:	89a3      	ldrh	r3, [r4, #12]
 80127c0:	f043 0308 	orr.w	r3, r3, #8
 80127c4:	81a3      	strh	r3, [r4, #12]
 80127c6:	6923      	ldr	r3, [r4, #16]
 80127c8:	b94b      	cbnz	r3, 80127de <__swsetup_r+0x9a>
 80127ca:	89a3      	ldrh	r3, [r4, #12]
 80127cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80127d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80127d4:	d003      	beq.n	80127de <__swsetup_r+0x9a>
 80127d6:	4621      	mov	r1, r4
 80127d8:	4630      	mov	r0, r6
 80127da:	f000 fa01 	bl	8012be0 <__smakebuf_r>
 80127de:	89a0      	ldrh	r0, [r4, #12]
 80127e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80127e4:	f010 0301 	ands.w	r3, r0, #1
 80127e8:	d00a      	beq.n	8012800 <__swsetup_r+0xbc>
 80127ea:	2300      	movs	r3, #0
 80127ec:	60a3      	str	r3, [r4, #8]
 80127ee:	6963      	ldr	r3, [r4, #20]
 80127f0:	425b      	negs	r3, r3
 80127f2:	61a3      	str	r3, [r4, #24]
 80127f4:	6923      	ldr	r3, [r4, #16]
 80127f6:	b943      	cbnz	r3, 801280a <__swsetup_r+0xc6>
 80127f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80127fc:	d1ba      	bne.n	8012774 <__swsetup_r+0x30>
 80127fe:	bd70      	pop	{r4, r5, r6, pc}
 8012800:	0781      	lsls	r1, r0, #30
 8012802:	bf58      	it	pl
 8012804:	6963      	ldrpl	r3, [r4, #20]
 8012806:	60a3      	str	r3, [r4, #8]
 8012808:	e7f4      	b.n	80127f4 <__swsetup_r+0xb0>
 801280a:	2000      	movs	r0, #0
 801280c:	e7f7      	b.n	80127fe <__swsetup_r+0xba>
 801280e:	bf00      	nop
 8012810:	200005dc 	.word	0x200005dc
 8012814:	08013568 	.word	0x08013568
 8012818:	08013588 	.word	0x08013588
 801281c:	08013548 	.word	0x08013548

08012820 <__sflush_r>:
 8012820:	898a      	ldrh	r2, [r1, #12]
 8012822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012826:	4605      	mov	r5, r0
 8012828:	0710      	lsls	r0, r2, #28
 801282a:	460c      	mov	r4, r1
 801282c:	d458      	bmi.n	80128e0 <__sflush_r+0xc0>
 801282e:	684b      	ldr	r3, [r1, #4]
 8012830:	2b00      	cmp	r3, #0
 8012832:	dc05      	bgt.n	8012840 <__sflush_r+0x20>
 8012834:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012836:	2b00      	cmp	r3, #0
 8012838:	dc02      	bgt.n	8012840 <__sflush_r+0x20>
 801283a:	2000      	movs	r0, #0
 801283c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012840:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012842:	2e00      	cmp	r6, #0
 8012844:	d0f9      	beq.n	801283a <__sflush_r+0x1a>
 8012846:	2300      	movs	r3, #0
 8012848:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801284c:	682f      	ldr	r7, [r5, #0]
 801284e:	602b      	str	r3, [r5, #0]
 8012850:	d032      	beq.n	80128b8 <__sflush_r+0x98>
 8012852:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012854:	89a3      	ldrh	r3, [r4, #12]
 8012856:	075a      	lsls	r2, r3, #29
 8012858:	d505      	bpl.n	8012866 <__sflush_r+0x46>
 801285a:	6863      	ldr	r3, [r4, #4]
 801285c:	1ac0      	subs	r0, r0, r3
 801285e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012860:	b10b      	cbz	r3, 8012866 <__sflush_r+0x46>
 8012862:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012864:	1ac0      	subs	r0, r0, r3
 8012866:	2300      	movs	r3, #0
 8012868:	4602      	mov	r2, r0
 801286a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801286c:	6a21      	ldr	r1, [r4, #32]
 801286e:	4628      	mov	r0, r5
 8012870:	47b0      	blx	r6
 8012872:	1c43      	adds	r3, r0, #1
 8012874:	89a3      	ldrh	r3, [r4, #12]
 8012876:	d106      	bne.n	8012886 <__sflush_r+0x66>
 8012878:	6829      	ldr	r1, [r5, #0]
 801287a:	291d      	cmp	r1, #29
 801287c:	d82c      	bhi.n	80128d8 <__sflush_r+0xb8>
 801287e:	4a2a      	ldr	r2, [pc, #168]	; (8012928 <__sflush_r+0x108>)
 8012880:	40ca      	lsrs	r2, r1
 8012882:	07d6      	lsls	r6, r2, #31
 8012884:	d528      	bpl.n	80128d8 <__sflush_r+0xb8>
 8012886:	2200      	movs	r2, #0
 8012888:	6062      	str	r2, [r4, #4]
 801288a:	04d9      	lsls	r1, r3, #19
 801288c:	6922      	ldr	r2, [r4, #16]
 801288e:	6022      	str	r2, [r4, #0]
 8012890:	d504      	bpl.n	801289c <__sflush_r+0x7c>
 8012892:	1c42      	adds	r2, r0, #1
 8012894:	d101      	bne.n	801289a <__sflush_r+0x7a>
 8012896:	682b      	ldr	r3, [r5, #0]
 8012898:	b903      	cbnz	r3, 801289c <__sflush_r+0x7c>
 801289a:	6560      	str	r0, [r4, #84]	; 0x54
 801289c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801289e:	602f      	str	r7, [r5, #0]
 80128a0:	2900      	cmp	r1, #0
 80128a2:	d0ca      	beq.n	801283a <__sflush_r+0x1a>
 80128a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80128a8:	4299      	cmp	r1, r3
 80128aa:	d002      	beq.n	80128b2 <__sflush_r+0x92>
 80128ac:	4628      	mov	r0, r5
 80128ae:	f7ff fd71 	bl	8012394 <_free_r>
 80128b2:	2000      	movs	r0, #0
 80128b4:	6360      	str	r0, [r4, #52]	; 0x34
 80128b6:	e7c1      	b.n	801283c <__sflush_r+0x1c>
 80128b8:	6a21      	ldr	r1, [r4, #32]
 80128ba:	2301      	movs	r3, #1
 80128bc:	4628      	mov	r0, r5
 80128be:	47b0      	blx	r6
 80128c0:	1c41      	adds	r1, r0, #1
 80128c2:	d1c7      	bne.n	8012854 <__sflush_r+0x34>
 80128c4:	682b      	ldr	r3, [r5, #0]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d0c4      	beq.n	8012854 <__sflush_r+0x34>
 80128ca:	2b1d      	cmp	r3, #29
 80128cc:	d001      	beq.n	80128d2 <__sflush_r+0xb2>
 80128ce:	2b16      	cmp	r3, #22
 80128d0:	d101      	bne.n	80128d6 <__sflush_r+0xb6>
 80128d2:	602f      	str	r7, [r5, #0]
 80128d4:	e7b1      	b.n	801283a <__sflush_r+0x1a>
 80128d6:	89a3      	ldrh	r3, [r4, #12]
 80128d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128dc:	81a3      	strh	r3, [r4, #12]
 80128de:	e7ad      	b.n	801283c <__sflush_r+0x1c>
 80128e0:	690f      	ldr	r7, [r1, #16]
 80128e2:	2f00      	cmp	r7, #0
 80128e4:	d0a9      	beq.n	801283a <__sflush_r+0x1a>
 80128e6:	0793      	lsls	r3, r2, #30
 80128e8:	680e      	ldr	r6, [r1, #0]
 80128ea:	bf08      	it	eq
 80128ec:	694b      	ldreq	r3, [r1, #20]
 80128ee:	600f      	str	r7, [r1, #0]
 80128f0:	bf18      	it	ne
 80128f2:	2300      	movne	r3, #0
 80128f4:	eba6 0807 	sub.w	r8, r6, r7
 80128f8:	608b      	str	r3, [r1, #8]
 80128fa:	f1b8 0f00 	cmp.w	r8, #0
 80128fe:	dd9c      	ble.n	801283a <__sflush_r+0x1a>
 8012900:	6a21      	ldr	r1, [r4, #32]
 8012902:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012904:	4643      	mov	r3, r8
 8012906:	463a      	mov	r2, r7
 8012908:	4628      	mov	r0, r5
 801290a:	47b0      	blx	r6
 801290c:	2800      	cmp	r0, #0
 801290e:	dc06      	bgt.n	801291e <__sflush_r+0xfe>
 8012910:	89a3      	ldrh	r3, [r4, #12]
 8012912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012916:	81a3      	strh	r3, [r4, #12]
 8012918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801291c:	e78e      	b.n	801283c <__sflush_r+0x1c>
 801291e:	4407      	add	r7, r0
 8012920:	eba8 0800 	sub.w	r8, r8, r0
 8012924:	e7e9      	b.n	80128fa <__sflush_r+0xda>
 8012926:	bf00      	nop
 8012928:	20400001 	.word	0x20400001

0801292c <_fflush_r>:
 801292c:	b538      	push	{r3, r4, r5, lr}
 801292e:	690b      	ldr	r3, [r1, #16]
 8012930:	4605      	mov	r5, r0
 8012932:	460c      	mov	r4, r1
 8012934:	b913      	cbnz	r3, 801293c <_fflush_r+0x10>
 8012936:	2500      	movs	r5, #0
 8012938:	4628      	mov	r0, r5
 801293a:	bd38      	pop	{r3, r4, r5, pc}
 801293c:	b118      	cbz	r0, 8012946 <_fflush_r+0x1a>
 801293e:	6983      	ldr	r3, [r0, #24]
 8012940:	b90b      	cbnz	r3, 8012946 <_fflush_r+0x1a>
 8012942:	f000 f887 	bl	8012a54 <__sinit>
 8012946:	4b14      	ldr	r3, [pc, #80]	; (8012998 <_fflush_r+0x6c>)
 8012948:	429c      	cmp	r4, r3
 801294a:	d11b      	bne.n	8012984 <_fflush_r+0x58>
 801294c:	686c      	ldr	r4, [r5, #4]
 801294e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d0ef      	beq.n	8012936 <_fflush_r+0xa>
 8012956:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012958:	07d0      	lsls	r0, r2, #31
 801295a:	d404      	bmi.n	8012966 <_fflush_r+0x3a>
 801295c:	0599      	lsls	r1, r3, #22
 801295e:	d402      	bmi.n	8012966 <_fflush_r+0x3a>
 8012960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012962:	f000 f915 	bl	8012b90 <__retarget_lock_acquire_recursive>
 8012966:	4628      	mov	r0, r5
 8012968:	4621      	mov	r1, r4
 801296a:	f7ff ff59 	bl	8012820 <__sflush_r>
 801296e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012970:	07da      	lsls	r2, r3, #31
 8012972:	4605      	mov	r5, r0
 8012974:	d4e0      	bmi.n	8012938 <_fflush_r+0xc>
 8012976:	89a3      	ldrh	r3, [r4, #12]
 8012978:	059b      	lsls	r3, r3, #22
 801297a:	d4dd      	bmi.n	8012938 <_fflush_r+0xc>
 801297c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801297e:	f000 f908 	bl	8012b92 <__retarget_lock_release_recursive>
 8012982:	e7d9      	b.n	8012938 <_fflush_r+0xc>
 8012984:	4b05      	ldr	r3, [pc, #20]	; (801299c <_fflush_r+0x70>)
 8012986:	429c      	cmp	r4, r3
 8012988:	d101      	bne.n	801298e <_fflush_r+0x62>
 801298a:	68ac      	ldr	r4, [r5, #8]
 801298c:	e7df      	b.n	801294e <_fflush_r+0x22>
 801298e:	4b04      	ldr	r3, [pc, #16]	; (80129a0 <_fflush_r+0x74>)
 8012990:	429c      	cmp	r4, r3
 8012992:	bf08      	it	eq
 8012994:	68ec      	ldreq	r4, [r5, #12]
 8012996:	e7da      	b.n	801294e <_fflush_r+0x22>
 8012998:	08013568 	.word	0x08013568
 801299c:	08013588 	.word	0x08013588
 80129a0:	08013548 	.word	0x08013548

080129a4 <std>:
 80129a4:	2300      	movs	r3, #0
 80129a6:	b510      	push	{r4, lr}
 80129a8:	4604      	mov	r4, r0
 80129aa:	e9c0 3300 	strd	r3, r3, [r0]
 80129ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80129b2:	6083      	str	r3, [r0, #8]
 80129b4:	8181      	strh	r1, [r0, #12]
 80129b6:	6643      	str	r3, [r0, #100]	; 0x64
 80129b8:	81c2      	strh	r2, [r0, #14]
 80129ba:	6183      	str	r3, [r0, #24]
 80129bc:	4619      	mov	r1, r3
 80129be:	2208      	movs	r2, #8
 80129c0:	305c      	adds	r0, #92	; 0x5c
 80129c2:	f7ff fcdf 	bl	8012384 <memset>
 80129c6:	4b05      	ldr	r3, [pc, #20]	; (80129dc <std+0x38>)
 80129c8:	6263      	str	r3, [r4, #36]	; 0x24
 80129ca:	4b05      	ldr	r3, [pc, #20]	; (80129e0 <std+0x3c>)
 80129cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80129ce:	4b05      	ldr	r3, [pc, #20]	; (80129e4 <std+0x40>)
 80129d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80129d2:	4b05      	ldr	r3, [pc, #20]	; (80129e8 <std+0x44>)
 80129d4:	6224      	str	r4, [r4, #32]
 80129d6:	6323      	str	r3, [r4, #48]	; 0x30
 80129d8:	bd10      	pop	{r4, pc}
 80129da:	bf00      	nop
 80129dc:	08013255 	.word	0x08013255
 80129e0:	08013277 	.word	0x08013277
 80129e4:	080132af 	.word	0x080132af
 80129e8:	080132d3 	.word	0x080132d3

080129ec <_cleanup_r>:
 80129ec:	4901      	ldr	r1, [pc, #4]	; (80129f4 <_cleanup_r+0x8>)
 80129ee:	f000 b8af 	b.w	8012b50 <_fwalk_reent>
 80129f2:	bf00      	nop
 80129f4:	0801292d 	.word	0x0801292d

080129f8 <__sfmoreglue>:
 80129f8:	b570      	push	{r4, r5, r6, lr}
 80129fa:	2268      	movs	r2, #104	; 0x68
 80129fc:	1e4d      	subs	r5, r1, #1
 80129fe:	4355      	muls	r5, r2
 8012a00:	460e      	mov	r6, r1
 8012a02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012a06:	f7ff fd31 	bl	801246c <_malloc_r>
 8012a0a:	4604      	mov	r4, r0
 8012a0c:	b140      	cbz	r0, 8012a20 <__sfmoreglue+0x28>
 8012a0e:	2100      	movs	r1, #0
 8012a10:	e9c0 1600 	strd	r1, r6, [r0]
 8012a14:	300c      	adds	r0, #12
 8012a16:	60a0      	str	r0, [r4, #8]
 8012a18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012a1c:	f7ff fcb2 	bl	8012384 <memset>
 8012a20:	4620      	mov	r0, r4
 8012a22:	bd70      	pop	{r4, r5, r6, pc}

08012a24 <__sfp_lock_acquire>:
 8012a24:	4801      	ldr	r0, [pc, #4]	; (8012a2c <__sfp_lock_acquire+0x8>)
 8012a26:	f000 b8b3 	b.w	8012b90 <__retarget_lock_acquire_recursive>
 8012a2a:	bf00      	nop
 8012a2c:	20002a3d 	.word	0x20002a3d

08012a30 <__sfp_lock_release>:
 8012a30:	4801      	ldr	r0, [pc, #4]	; (8012a38 <__sfp_lock_release+0x8>)
 8012a32:	f000 b8ae 	b.w	8012b92 <__retarget_lock_release_recursive>
 8012a36:	bf00      	nop
 8012a38:	20002a3d 	.word	0x20002a3d

08012a3c <__sinit_lock_acquire>:
 8012a3c:	4801      	ldr	r0, [pc, #4]	; (8012a44 <__sinit_lock_acquire+0x8>)
 8012a3e:	f000 b8a7 	b.w	8012b90 <__retarget_lock_acquire_recursive>
 8012a42:	bf00      	nop
 8012a44:	20002a3e 	.word	0x20002a3e

08012a48 <__sinit_lock_release>:
 8012a48:	4801      	ldr	r0, [pc, #4]	; (8012a50 <__sinit_lock_release+0x8>)
 8012a4a:	f000 b8a2 	b.w	8012b92 <__retarget_lock_release_recursive>
 8012a4e:	bf00      	nop
 8012a50:	20002a3e 	.word	0x20002a3e

08012a54 <__sinit>:
 8012a54:	b510      	push	{r4, lr}
 8012a56:	4604      	mov	r4, r0
 8012a58:	f7ff fff0 	bl	8012a3c <__sinit_lock_acquire>
 8012a5c:	69a3      	ldr	r3, [r4, #24]
 8012a5e:	b11b      	cbz	r3, 8012a68 <__sinit+0x14>
 8012a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a64:	f7ff bff0 	b.w	8012a48 <__sinit_lock_release>
 8012a68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012a6c:	6523      	str	r3, [r4, #80]	; 0x50
 8012a6e:	4b13      	ldr	r3, [pc, #76]	; (8012abc <__sinit+0x68>)
 8012a70:	4a13      	ldr	r2, [pc, #76]	; (8012ac0 <__sinit+0x6c>)
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	62a2      	str	r2, [r4, #40]	; 0x28
 8012a76:	42a3      	cmp	r3, r4
 8012a78:	bf04      	itt	eq
 8012a7a:	2301      	moveq	r3, #1
 8012a7c:	61a3      	streq	r3, [r4, #24]
 8012a7e:	4620      	mov	r0, r4
 8012a80:	f000 f820 	bl	8012ac4 <__sfp>
 8012a84:	6060      	str	r0, [r4, #4]
 8012a86:	4620      	mov	r0, r4
 8012a88:	f000 f81c 	bl	8012ac4 <__sfp>
 8012a8c:	60a0      	str	r0, [r4, #8]
 8012a8e:	4620      	mov	r0, r4
 8012a90:	f000 f818 	bl	8012ac4 <__sfp>
 8012a94:	2200      	movs	r2, #0
 8012a96:	60e0      	str	r0, [r4, #12]
 8012a98:	2104      	movs	r1, #4
 8012a9a:	6860      	ldr	r0, [r4, #4]
 8012a9c:	f7ff ff82 	bl	80129a4 <std>
 8012aa0:	68a0      	ldr	r0, [r4, #8]
 8012aa2:	2201      	movs	r2, #1
 8012aa4:	2109      	movs	r1, #9
 8012aa6:	f7ff ff7d 	bl	80129a4 <std>
 8012aaa:	68e0      	ldr	r0, [r4, #12]
 8012aac:	2202      	movs	r2, #2
 8012aae:	2112      	movs	r1, #18
 8012ab0:	f7ff ff78 	bl	80129a4 <std>
 8012ab4:	2301      	movs	r3, #1
 8012ab6:	61a3      	str	r3, [r4, #24]
 8012ab8:	e7d2      	b.n	8012a60 <__sinit+0xc>
 8012aba:	bf00      	nop
 8012abc:	08013544 	.word	0x08013544
 8012ac0:	080129ed 	.word	0x080129ed

08012ac4 <__sfp>:
 8012ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ac6:	4607      	mov	r7, r0
 8012ac8:	f7ff ffac 	bl	8012a24 <__sfp_lock_acquire>
 8012acc:	4b1e      	ldr	r3, [pc, #120]	; (8012b48 <__sfp+0x84>)
 8012ace:	681e      	ldr	r6, [r3, #0]
 8012ad0:	69b3      	ldr	r3, [r6, #24]
 8012ad2:	b913      	cbnz	r3, 8012ada <__sfp+0x16>
 8012ad4:	4630      	mov	r0, r6
 8012ad6:	f7ff ffbd 	bl	8012a54 <__sinit>
 8012ada:	3648      	adds	r6, #72	; 0x48
 8012adc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012ae0:	3b01      	subs	r3, #1
 8012ae2:	d503      	bpl.n	8012aec <__sfp+0x28>
 8012ae4:	6833      	ldr	r3, [r6, #0]
 8012ae6:	b30b      	cbz	r3, 8012b2c <__sfp+0x68>
 8012ae8:	6836      	ldr	r6, [r6, #0]
 8012aea:	e7f7      	b.n	8012adc <__sfp+0x18>
 8012aec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012af0:	b9d5      	cbnz	r5, 8012b28 <__sfp+0x64>
 8012af2:	4b16      	ldr	r3, [pc, #88]	; (8012b4c <__sfp+0x88>)
 8012af4:	60e3      	str	r3, [r4, #12]
 8012af6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012afa:	6665      	str	r5, [r4, #100]	; 0x64
 8012afc:	f000 f847 	bl	8012b8e <__retarget_lock_init_recursive>
 8012b00:	f7ff ff96 	bl	8012a30 <__sfp_lock_release>
 8012b04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012b08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012b0c:	6025      	str	r5, [r4, #0]
 8012b0e:	61a5      	str	r5, [r4, #24]
 8012b10:	2208      	movs	r2, #8
 8012b12:	4629      	mov	r1, r5
 8012b14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012b18:	f7ff fc34 	bl	8012384 <memset>
 8012b1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012b20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012b24:	4620      	mov	r0, r4
 8012b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b28:	3468      	adds	r4, #104	; 0x68
 8012b2a:	e7d9      	b.n	8012ae0 <__sfp+0x1c>
 8012b2c:	2104      	movs	r1, #4
 8012b2e:	4638      	mov	r0, r7
 8012b30:	f7ff ff62 	bl	80129f8 <__sfmoreglue>
 8012b34:	4604      	mov	r4, r0
 8012b36:	6030      	str	r0, [r6, #0]
 8012b38:	2800      	cmp	r0, #0
 8012b3a:	d1d5      	bne.n	8012ae8 <__sfp+0x24>
 8012b3c:	f7ff ff78 	bl	8012a30 <__sfp_lock_release>
 8012b40:	230c      	movs	r3, #12
 8012b42:	603b      	str	r3, [r7, #0]
 8012b44:	e7ee      	b.n	8012b24 <__sfp+0x60>
 8012b46:	bf00      	nop
 8012b48:	08013544 	.word	0x08013544
 8012b4c:	ffff0001 	.word	0xffff0001

08012b50 <_fwalk_reent>:
 8012b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b54:	4606      	mov	r6, r0
 8012b56:	4688      	mov	r8, r1
 8012b58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012b5c:	2700      	movs	r7, #0
 8012b5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012b62:	f1b9 0901 	subs.w	r9, r9, #1
 8012b66:	d505      	bpl.n	8012b74 <_fwalk_reent+0x24>
 8012b68:	6824      	ldr	r4, [r4, #0]
 8012b6a:	2c00      	cmp	r4, #0
 8012b6c:	d1f7      	bne.n	8012b5e <_fwalk_reent+0xe>
 8012b6e:	4638      	mov	r0, r7
 8012b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b74:	89ab      	ldrh	r3, [r5, #12]
 8012b76:	2b01      	cmp	r3, #1
 8012b78:	d907      	bls.n	8012b8a <_fwalk_reent+0x3a>
 8012b7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012b7e:	3301      	adds	r3, #1
 8012b80:	d003      	beq.n	8012b8a <_fwalk_reent+0x3a>
 8012b82:	4629      	mov	r1, r5
 8012b84:	4630      	mov	r0, r6
 8012b86:	47c0      	blx	r8
 8012b88:	4307      	orrs	r7, r0
 8012b8a:	3568      	adds	r5, #104	; 0x68
 8012b8c:	e7e9      	b.n	8012b62 <_fwalk_reent+0x12>

08012b8e <__retarget_lock_init_recursive>:
 8012b8e:	4770      	bx	lr

08012b90 <__retarget_lock_acquire_recursive>:
 8012b90:	4770      	bx	lr

08012b92 <__retarget_lock_release_recursive>:
 8012b92:	4770      	bx	lr

08012b94 <__swhatbuf_r>:
 8012b94:	b570      	push	{r4, r5, r6, lr}
 8012b96:	460e      	mov	r6, r1
 8012b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b9c:	2900      	cmp	r1, #0
 8012b9e:	b096      	sub	sp, #88	; 0x58
 8012ba0:	4614      	mov	r4, r2
 8012ba2:	461d      	mov	r5, r3
 8012ba4:	da08      	bge.n	8012bb8 <__swhatbuf_r+0x24>
 8012ba6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012baa:	2200      	movs	r2, #0
 8012bac:	602a      	str	r2, [r5, #0]
 8012bae:	061a      	lsls	r2, r3, #24
 8012bb0:	d410      	bmi.n	8012bd4 <__swhatbuf_r+0x40>
 8012bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012bb6:	e00e      	b.n	8012bd6 <__swhatbuf_r+0x42>
 8012bb8:	466a      	mov	r2, sp
 8012bba:	f000 fbb1 	bl	8013320 <_fstat_r>
 8012bbe:	2800      	cmp	r0, #0
 8012bc0:	dbf1      	blt.n	8012ba6 <__swhatbuf_r+0x12>
 8012bc2:	9a01      	ldr	r2, [sp, #4]
 8012bc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012bc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012bcc:	425a      	negs	r2, r3
 8012bce:	415a      	adcs	r2, r3
 8012bd0:	602a      	str	r2, [r5, #0]
 8012bd2:	e7ee      	b.n	8012bb2 <__swhatbuf_r+0x1e>
 8012bd4:	2340      	movs	r3, #64	; 0x40
 8012bd6:	2000      	movs	r0, #0
 8012bd8:	6023      	str	r3, [r4, #0]
 8012bda:	b016      	add	sp, #88	; 0x58
 8012bdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08012be0 <__smakebuf_r>:
 8012be0:	898b      	ldrh	r3, [r1, #12]
 8012be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012be4:	079d      	lsls	r5, r3, #30
 8012be6:	4606      	mov	r6, r0
 8012be8:	460c      	mov	r4, r1
 8012bea:	d507      	bpl.n	8012bfc <__smakebuf_r+0x1c>
 8012bec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012bf0:	6023      	str	r3, [r4, #0]
 8012bf2:	6123      	str	r3, [r4, #16]
 8012bf4:	2301      	movs	r3, #1
 8012bf6:	6163      	str	r3, [r4, #20]
 8012bf8:	b002      	add	sp, #8
 8012bfa:	bd70      	pop	{r4, r5, r6, pc}
 8012bfc:	ab01      	add	r3, sp, #4
 8012bfe:	466a      	mov	r2, sp
 8012c00:	f7ff ffc8 	bl	8012b94 <__swhatbuf_r>
 8012c04:	9900      	ldr	r1, [sp, #0]
 8012c06:	4605      	mov	r5, r0
 8012c08:	4630      	mov	r0, r6
 8012c0a:	f7ff fc2f 	bl	801246c <_malloc_r>
 8012c0e:	b948      	cbnz	r0, 8012c24 <__smakebuf_r+0x44>
 8012c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c14:	059a      	lsls	r2, r3, #22
 8012c16:	d4ef      	bmi.n	8012bf8 <__smakebuf_r+0x18>
 8012c18:	f023 0303 	bic.w	r3, r3, #3
 8012c1c:	f043 0302 	orr.w	r3, r3, #2
 8012c20:	81a3      	strh	r3, [r4, #12]
 8012c22:	e7e3      	b.n	8012bec <__smakebuf_r+0xc>
 8012c24:	4b0d      	ldr	r3, [pc, #52]	; (8012c5c <__smakebuf_r+0x7c>)
 8012c26:	62b3      	str	r3, [r6, #40]	; 0x28
 8012c28:	89a3      	ldrh	r3, [r4, #12]
 8012c2a:	6020      	str	r0, [r4, #0]
 8012c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c30:	81a3      	strh	r3, [r4, #12]
 8012c32:	9b00      	ldr	r3, [sp, #0]
 8012c34:	6163      	str	r3, [r4, #20]
 8012c36:	9b01      	ldr	r3, [sp, #4]
 8012c38:	6120      	str	r0, [r4, #16]
 8012c3a:	b15b      	cbz	r3, 8012c54 <__smakebuf_r+0x74>
 8012c3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c40:	4630      	mov	r0, r6
 8012c42:	f000 fb7f 	bl	8013344 <_isatty_r>
 8012c46:	b128      	cbz	r0, 8012c54 <__smakebuf_r+0x74>
 8012c48:	89a3      	ldrh	r3, [r4, #12]
 8012c4a:	f023 0303 	bic.w	r3, r3, #3
 8012c4e:	f043 0301 	orr.w	r3, r3, #1
 8012c52:	81a3      	strh	r3, [r4, #12]
 8012c54:	89a0      	ldrh	r0, [r4, #12]
 8012c56:	4305      	orrs	r5, r0
 8012c58:	81a5      	strh	r5, [r4, #12]
 8012c5a:	e7cd      	b.n	8012bf8 <__smakebuf_r+0x18>
 8012c5c:	080129ed 	.word	0x080129ed

08012c60 <__malloc_lock>:
 8012c60:	4801      	ldr	r0, [pc, #4]	; (8012c68 <__malloc_lock+0x8>)
 8012c62:	f7ff bf95 	b.w	8012b90 <__retarget_lock_acquire_recursive>
 8012c66:	bf00      	nop
 8012c68:	20002a3c 	.word	0x20002a3c

08012c6c <__malloc_unlock>:
 8012c6c:	4801      	ldr	r0, [pc, #4]	; (8012c74 <__malloc_unlock+0x8>)
 8012c6e:	f7ff bf90 	b.w	8012b92 <__retarget_lock_release_recursive>
 8012c72:	bf00      	nop
 8012c74:	20002a3c 	.word	0x20002a3c

08012c78 <__sfputc_r>:
 8012c78:	6893      	ldr	r3, [r2, #8]
 8012c7a:	3b01      	subs	r3, #1
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	b410      	push	{r4}
 8012c80:	6093      	str	r3, [r2, #8]
 8012c82:	da08      	bge.n	8012c96 <__sfputc_r+0x1e>
 8012c84:	6994      	ldr	r4, [r2, #24]
 8012c86:	42a3      	cmp	r3, r4
 8012c88:	db01      	blt.n	8012c8e <__sfputc_r+0x16>
 8012c8a:	290a      	cmp	r1, #10
 8012c8c:	d103      	bne.n	8012c96 <__sfputc_r+0x1e>
 8012c8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c92:	f7ff bd05 	b.w	80126a0 <__swbuf_r>
 8012c96:	6813      	ldr	r3, [r2, #0]
 8012c98:	1c58      	adds	r0, r3, #1
 8012c9a:	6010      	str	r0, [r2, #0]
 8012c9c:	7019      	strb	r1, [r3, #0]
 8012c9e:	4608      	mov	r0, r1
 8012ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ca4:	4770      	bx	lr

08012ca6 <__sfputs_r>:
 8012ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ca8:	4606      	mov	r6, r0
 8012caa:	460f      	mov	r7, r1
 8012cac:	4614      	mov	r4, r2
 8012cae:	18d5      	adds	r5, r2, r3
 8012cb0:	42ac      	cmp	r4, r5
 8012cb2:	d101      	bne.n	8012cb8 <__sfputs_r+0x12>
 8012cb4:	2000      	movs	r0, #0
 8012cb6:	e007      	b.n	8012cc8 <__sfputs_r+0x22>
 8012cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cbc:	463a      	mov	r2, r7
 8012cbe:	4630      	mov	r0, r6
 8012cc0:	f7ff ffda 	bl	8012c78 <__sfputc_r>
 8012cc4:	1c43      	adds	r3, r0, #1
 8012cc6:	d1f3      	bne.n	8012cb0 <__sfputs_r+0xa>
 8012cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012ccc <_vfiprintf_r>:
 8012ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cd0:	460d      	mov	r5, r1
 8012cd2:	b09d      	sub	sp, #116	; 0x74
 8012cd4:	4614      	mov	r4, r2
 8012cd6:	4698      	mov	r8, r3
 8012cd8:	4606      	mov	r6, r0
 8012cda:	b118      	cbz	r0, 8012ce4 <_vfiprintf_r+0x18>
 8012cdc:	6983      	ldr	r3, [r0, #24]
 8012cde:	b90b      	cbnz	r3, 8012ce4 <_vfiprintf_r+0x18>
 8012ce0:	f7ff feb8 	bl	8012a54 <__sinit>
 8012ce4:	4b89      	ldr	r3, [pc, #548]	; (8012f0c <_vfiprintf_r+0x240>)
 8012ce6:	429d      	cmp	r5, r3
 8012ce8:	d11b      	bne.n	8012d22 <_vfiprintf_r+0x56>
 8012cea:	6875      	ldr	r5, [r6, #4]
 8012cec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012cee:	07d9      	lsls	r1, r3, #31
 8012cf0:	d405      	bmi.n	8012cfe <_vfiprintf_r+0x32>
 8012cf2:	89ab      	ldrh	r3, [r5, #12]
 8012cf4:	059a      	lsls	r2, r3, #22
 8012cf6:	d402      	bmi.n	8012cfe <_vfiprintf_r+0x32>
 8012cf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012cfa:	f7ff ff49 	bl	8012b90 <__retarget_lock_acquire_recursive>
 8012cfe:	89ab      	ldrh	r3, [r5, #12]
 8012d00:	071b      	lsls	r3, r3, #28
 8012d02:	d501      	bpl.n	8012d08 <_vfiprintf_r+0x3c>
 8012d04:	692b      	ldr	r3, [r5, #16]
 8012d06:	b9eb      	cbnz	r3, 8012d44 <_vfiprintf_r+0x78>
 8012d08:	4629      	mov	r1, r5
 8012d0a:	4630      	mov	r0, r6
 8012d0c:	f7ff fd1a 	bl	8012744 <__swsetup_r>
 8012d10:	b1c0      	cbz	r0, 8012d44 <_vfiprintf_r+0x78>
 8012d12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d14:	07dc      	lsls	r4, r3, #31
 8012d16:	d50e      	bpl.n	8012d36 <_vfiprintf_r+0x6a>
 8012d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d1c:	b01d      	add	sp, #116	; 0x74
 8012d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d22:	4b7b      	ldr	r3, [pc, #492]	; (8012f10 <_vfiprintf_r+0x244>)
 8012d24:	429d      	cmp	r5, r3
 8012d26:	d101      	bne.n	8012d2c <_vfiprintf_r+0x60>
 8012d28:	68b5      	ldr	r5, [r6, #8]
 8012d2a:	e7df      	b.n	8012cec <_vfiprintf_r+0x20>
 8012d2c:	4b79      	ldr	r3, [pc, #484]	; (8012f14 <_vfiprintf_r+0x248>)
 8012d2e:	429d      	cmp	r5, r3
 8012d30:	bf08      	it	eq
 8012d32:	68f5      	ldreq	r5, [r6, #12]
 8012d34:	e7da      	b.n	8012cec <_vfiprintf_r+0x20>
 8012d36:	89ab      	ldrh	r3, [r5, #12]
 8012d38:	0598      	lsls	r0, r3, #22
 8012d3a:	d4ed      	bmi.n	8012d18 <_vfiprintf_r+0x4c>
 8012d3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012d3e:	f7ff ff28 	bl	8012b92 <__retarget_lock_release_recursive>
 8012d42:	e7e9      	b.n	8012d18 <_vfiprintf_r+0x4c>
 8012d44:	2300      	movs	r3, #0
 8012d46:	9309      	str	r3, [sp, #36]	; 0x24
 8012d48:	2320      	movs	r3, #32
 8012d4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012d4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d52:	2330      	movs	r3, #48	; 0x30
 8012d54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012f18 <_vfiprintf_r+0x24c>
 8012d58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012d5c:	f04f 0901 	mov.w	r9, #1
 8012d60:	4623      	mov	r3, r4
 8012d62:	469a      	mov	sl, r3
 8012d64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d68:	b10a      	cbz	r2, 8012d6e <_vfiprintf_r+0xa2>
 8012d6a:	2a25      	cmp	r2, #37	; 0x25
 8012d6c:	d1f9      	bne.n	8012d62 <_vfiprintf_r+0x96>
 8012d6e:	ebba 0b04 	subs.w	fp, sl, r4
 8012d72:	d00b      	beq.n	8012d8c <_vfiprintf_r+0xc0>
 8012d74:	465b      	mov	r3, fp
 8012d76:	4622      	mov	r2, r4
 8012d78:	4629      	mov	r1, r5
 8012d7a:	4630      	mov	r0, r6
 8012d7c:	f7ff ff93 	bl	8012ca6 <__sfputs_r>
 8012d80:	3001      	adds	r0, #1
 8012d82:	f000 80aa 	beq.w	8012eda <_vfiprintf_r+0x20e>
 8012d86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012d88:	445a      	add	r2, fp
 8012d8a:	9209      	str	r2, [sp, #36]	; 0x24
 8012d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	f000 80a2 	beq.w	8012eda <_vfiprintf_r+0x20e>
 8012d96:	2300      	movs	r3, #0
 8012d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012d9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012da0:	f10a 0a01 	add.w	sl, sl, #1
 8012da4:	9304      	str	r3, [sp, #16]
 8012da6:	9307      	str	r3, [sp, #28]
 8012da8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012dac:	931a      	str	r3, [sp, #104]	; 0x68
 8012dae:	4654      	mov	r4, sl
 8012db0:	2205      	movs	r2, #5
 8012db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012db6:	4858      	ldr	r0, [pc, #352]	; (8012f18 <_vfiprintf_r+0x24c>)
 8012db8:	f7ed fa1a 	bl	80001f0 <memchr>
 8012dbc:	9a04      	ldr	r2, [sp, #16]
 8012dbe:	b9d8      	cbnz	r0, 8012df8 <_vfiprintf_r+0x12c>
 8012dc0:	06d1      	lsls	r1, r2, #27
 8012dc2:	bf44      	itt	mi
 8012dc4:	2320      	movmi	r3, #32
 8012dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012dca:	0713      	lsls	r3, r2, #28
 8012dcc:	bf44      	itt	mi
 8012dce:	232b      	movmi	r3, #43	; 0x2b
 8012dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8012dd8:	2b2a      	cmp	r3, #42	; 0x2a
 8012dda:	d015      	beq.n	8012e08 <_vfiprintf_r+0x13c>
 8012ddc:	9a07      	ldr	r2, [sp, #28]
 8012dde:	4654      	mov	r4, sl
 8012de0:	2000      	movs	r0, #0
 8012de2:	f04f 0c0a 	mov.w	ip, #10
 8012de6:	4621      	mov	r1, r4
 8012de8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012dec:	3b30      	subs	r3, #48	; 0x30
 8012dee:	2b09      	cmp	r3, #9
 8012df0:	d94e      	bls.n	8012e90 <_vfiprintf_r+0x1c4>
 8012df2:	b1b0      	cbz	r0, 8012e22 <_vfiprintf_r+0x156>
 8012df4:	9207      	str	r2, [sp, #28]
 8012df6:	e014      	b.n	8012e22 <_vfiprintf_r+0x156>
 8012df8:	eba0 0308 	sub.w	r3, r0, r8
 8012dfc:	fa09 f303 	lsl.w	r3, r9, r3
 8012e00:	4313      	orrs	r3, r2
 8012e02:	9304      	str	r3, [sp, #16]
 8012e04:	46a2      	mov	sl, r4
 8012e06:	e7d2      	b.n	8012dae <_vfiprintf_r+0xe2>
 8012e08:	9b03      	ldr	r3, [sp, #12]
 8012e0a:	1d19      	adds	r1, r3, #4
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	9103      	str	r1, [sp, #12]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	bfbb      	ittet	lt
 8012e14:	425b      	neglt	r3, r3
 8012e16:	f042 0202 	orrlt.w	r2, r2, #2
 8012e1a:	9307      	strge	r3, [sp, #28]
 8012e1c:	9307      	strlt	r3, [sp, #28]
 8012e1e:	bfb8      	it	lt
 8012e20:	9204      	strlt	r2, [sp, #16]
 8012e22:	7823      	ldrb	r3, [r4, #0]
 8012e24:	2b2e      	cmp	r3, #46	; 0x2e
 8012e26:	d10c      	bne.n	8012e42 <_vfiprintf_r+0x176>
 8012e28:	7863      	ldrb	r3, [r4, #1]
 8012e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8012e2c:	d135      	bne.n	8012e9a <_vfiprintf_r+0x1ce>
 8012e2e:	9b03      	ldr	r3, [sp, #12]
 8012e30:	1d1a      	adds	r2, r3, #4
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	9203      	str	r2, [sp, #12]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	bfb8      	it	lt
 8012e3a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012e3e:	3402      	adds	r4, #2
 8012e40:	9305      	str	r3, [sp, #20]
 8012e42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012f28 <_vfiprintf_r+0x25c>
 8012e46:	7821      	ldrb	r1, [r4, #0]
 8012e48:	2203      	movs	r2, #3
 8012e4a:	4650      	mov	r0, sl
 8012e4c:	f7ed f9d0 	bl	80001f0 <memchr>
 8012e50:	b140      	cbz	r0, 8012e64 <_vfiprintf_r+0x198>
 8012e52:	2340      	movs	r3, #64	; 0x40
 8012e54:	eba0 000a 	sub.w	r0, r0, sl
 8012e58:	fa03 f000 	lsl.w	r0, r3, r0
 8012e5c:	9b04      	ldr	r3, [sp, #16]
 8012e5e:	4303      	orrs	r3, r0
 8012e60:	3401      	adds	r4, #1
 8012e62:	9304      	str	r3, [sp, #16]
 8012e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e68:	482c      	ldr	r0, [pc, #176]	; (8012f1c <_vfiprintf_r+0x250>)
 8012e6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012e6e:	2206      	movs	r2, #6
 8012e70:	f7ed f9be 	bl	80001f0 <memchr>
 8012e74:	2800      	cmp	r0, #0
 8012e76:	d03f      	beq.n	8012ef8 <_vfiprintf_r+0x22c>
 8012e78:	4b29      	ldr	r3, [pc, #164]	; (8012f20 <_vfiprintf_r+0x254>)
 8012e7a:	bb1b      	cbnz	r3, 8012ec4 <_vfiprintf_r+0x1f8>
 8012e7c:	9b03      	ldr	r3, [sp, #12]
 8012e7e:	3307      	adds	r3, #7
 8012e80:	f023 0307 	bic.w	r3, r3, #7
 8012e84:	3308      	adds	r3, #8
 8012e86:	9303      	str	r3, [sp, #12]
 8012e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e8a:	443b      	add	r3, r7
 8012e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8012e8e:	e767      	b.n	8012d60 <_vfiprintf_r+0x94>
 8012e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e94:	460c      	mov	r4, r1
 8012e96:	2001      	movs	r0, #1
 8012e98:	e7a5      	b.n	8012de6 <_vfiprintf_r+0x11a>
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	3401      	adds	r4, #1
 8012e9e:	9305      	str	r3, [sp, #20]
 8012ea0:	4619      	mov	r1, r3
 8012ea2:	f04f 0c0a 	mov.w	ip, #10
 8012ea6:	4620      	mov	r0, r4
 8012ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012eac:	3a30      	subs	r2, #48	; 0x30
 8012eae:	2a09      	cmp	r2, #9
 8012eb0:	d903      	bls.n	8012eba <_vfiprintf_r+0x1ee>
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d0c5      	beq.n	8012e42 <_vfiprintf_r+0x176>
 8012eb6:	9105      	str	r1, [sp, #20]
 8012eb8:	e7c3      	b.n	8012e42 <_vfiprintf_r+0x176>
 8012eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8012ebe:	4604      	mov	r4, r0
 8012ec0:	2301      	movs	r3, #1
 8012ec2:	e7f0      	b.n	8012ea6 <_vfiprintf_r+0x1da>
 8012ec4:	ab03      	add	r3, sp, #12
 8012ec6:	9300      	str	r3, [sp, #0]
 8012ec8:	462a      	mov	r2, r5
 8012eca:	4b16      	ldr	r3, [pc, #88]	; (8012f24 <_vfiprintf_r+0x258>)
 8012ecc:	a904      	add	r1, sp, #16
 8012ece:	4630      	mov	r0, r6
 8012ed0:	f3af 8000 	nop.w
 8012ed4:	4607      	mov	r7, r0
 8012ed6:	1c78      	adds	r0, r7, #1
 8012ed8:	d1d6      	bne.n	8012e88 <_vfiprintf_r+0x1bc>
 8012eda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012edc:	07d9      	lsls	r1, r3, #31
 8012ede:	d405      	bmi.n	8012eec <_vfiprintf_r+0x220>
 8012ee0:	89ab      	ldrh	r3, [r5, #12]
 8012ee2:	059a      	lsls	r2, r3, #22
 8012ee4:	d402      	bmi.n	8012eec <_vfiprintf_r+0x220>
 8012ee6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ee8:	f7ff fe53 	bl	8012b92 <__retarget_lock_release_recursive>
 8012eec:	89ab      	ldrh	r3, [r5, #12]
 8012eee:	065b      	lsls	r3, r3, #25
 8012ef0:	f53f af12 	bmi.w	8012d18 <_vfiprintf_r+0x4c>
 8012ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012ef6:	e711      	b.n	8012d1c <_vfiprintf_r+0x50>
 8012ef8:	ab03      	add	r3, sp, #12
 8012efa:	9300      	str	r3, [sp, #0]
 8012efc:	462a      	mov	r2, r5
 8012efe:	4b09      	ldr	r3, [pc, #36]	; (8012f24 <_vfiprintf_r+0x258>)
 8012f00:	a904      	add	r1, sp, #16
 8012f02:	4630      	mov	r0, r6
 8012f04:	f000 f880 	bl	8013008 <_printf_i>
 8012f08:	e7e4      	b.n	8012ed4 <_vfiprintf_r+0x208>
 8012f0a:	bf00      	nop
 8012f0c:	08013568 	.word	0x08013568
 8012f10:	08013588 	.word	0x08013588
 8012f14:	08013548 	.word	0x08013548
 8012f18:	080135a8 	.word	0x080135a8
 8012f1c:	080135b2 	.word	0x080135b2
 8012f20:	00000000 	.word	0x00000000
 8012f24:	08012ca7 	.word	0x08012ca7
 8012f28:	080135ae 	.word	0x080135ae

08012f2c <_printf_common>:
 8012f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f30:	4616      	mov	r6, r2
 8012f32:	4699      	mov	r9, r3
 8012f34:	688a      	ldr	r2, [r1, #8]
 8012f36:	690b      	ldr	r3, [r1, #16]
 8012f38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012f3c:	4293      	cmp	r3, r2
 8012f3e:	bfb8      	it	lt
 8012f40:	4613      	movlt	r3, r2
 8012f42:	6033      	str	r3, [r6, #0]
 8012f44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012f48:	4607      	mov	r7, r0
 8012f4a:	460c      	mov	r4, r1
 8012f4c:	b10a      	cbz	r2, 8012f52 <_printf_common+0x26>
 8012f4e:	3301      	adds	r3, #1
 8012f50:	6033      	str	r3, [r6, #0]
 8012f52:	6823      	ldr	r3, [r4, #0]
 8012f54:	0699      	lsls	r1, r3, #26
 8012f56:	bf42      	ittt	mi
 8012f58:	6833      	ldrmi	r3, [r6, #0]
 8012f5a:	3302      	addmi	r3, #2
 8012f5c:	6033      	strmi	r3, [r6, #0]
 8012f5e:	6825      	ldr	r5, [r4, #0]
 8012f60:	f015 0506 	ands.w	r5, r5, #6
 8012f64:	d106      	bne.n	8012f74 <_printf_common+0x48>
 8012f66:	f104 0a19 	add.w	sl, r4, #25
 8012f6a:	68e3      	ldr	r3, [r4, #12]
 8012f6c:	6832      	ldr	r2, [r6, #0]
 8012f6e:	1a9b      	subs	r3, r3, r2
 8012f70:	42ab      	cmp	r3, r5
 8012f72:	dc26      	bgt.n	8012fc2 <_printf_common+0x96>
 8012f74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012f78:	1e13      	subs	r3, r2, #0
 8012f7a:	6822      	ldr	r2, [r4, #0]
 8012f7c:	bf18      	it	ne
 8012f7e:	2301      	movne	r3, #1
 8012f80:	0692      	lsls	r2, r2, #26
 8012f82:	d42b      	bmi.n	8012fdc <_printf_common+0xb0>
 8012f84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012f88:	4649      	mov	r1, r9
 8012f8a:	4638      	mov	r0, r7
 8012f8c:	47c0      	blx	r8
 8012f8e:	3001      	adds	r0, #1
 8012f90:	d01e      	beq.n	8012fd0 <_printf_common+0xa4>
 8012f92:	6823      	ldr	r3, [r4, #0]
 8012f94:	68e5      	ldr	r5, [r4, #12]
 8012f96:	6832      	ldr	r2, [r6, #0]
 8012f98:	f003 0306 	and.w	r3, r3, #6
 8012f9c:	2b04      	cmp	r3, #4
 8012f9e:	bf08      	it	eq
 8012fa0:	1aad      	subeq	r5, r5, r2
 8012fa2:	68a3      	ldr	r3, [r4, #8]
 8012fa4:	6922      	ldr	r2, [r4, #16]
 8012fa6:	bf0c      	ite	eq
 8012fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012fac:	2500      	movne	r5, #0
 8012fae:	4293      	cmp	r3, r2
 8012fb0:	bfc4      	itt	gt
 8012fb2:	1a9b      	subgt	r3, r3, r2
 8012fb4:	18ed      	addgt	r5, r5, r3
 8012fb6:	2600      	movs	r6, #0
 8012fb8:	341a      	adds	r4, #26
 8012fba:	42b5      	cmp	r5, r6
 8012fbc:	d11a      	bne.n	8012ff4 <_printf_common+0xc8>
 8012fbe:	2000      	movs	r0, #0
 8012fc0:	e008      	b.n	8012fd4 <_printf_common+0xa8>
 8012fc2:	2301      	movs	r3, #1
 8012fc4:	4652      	mov	r2, sl
 8012fc6:	4649      	mov	r1, r9
 8012fc8:	4638      	mov	r0, r7
 8012fca:	47c0      	blx	r8
 8012fcc:	3001      	adds	r0, #1
 8012fce:	d103      	bne.n	8012fd8 <_printf_common+0xac>
 8012fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fd8:	3501      	adds	r5, #1
 8012fda:	e7c6      	b.n	8012f6a <_printf_common+0x3e>
 8012fdc:	18e1      	adds	r1, r4, r3
 8012fde:	1c5a      	adds	r2, r3, #1
 8012fe0:	2030      	movs	r0, #48	; 0x30
 8012fe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012fe6:	4422      	add	r2, r4
 8012fe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012fec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012ff0:	3302      	adds	r3, #2
 8012ff2:	e7c7      	b.n	8012f84 <_printf_common+0x58>
 8012ff4:	2301      	movs	r3, #1
 8012ff6:	4622      	mov	r2, r4
 8012ff8:	4649      	mov	r1, r9
 8012ffa:	4638      	mov	r0, r7
 8012ffc:	47c0      	blx	r8
 8012ffe:	3001      	adds	r0, #1
 8013000:	d0e6      	beq.n	8012fd0 <_printf_common+0xa4>
 8013002:	3601      	adds	r6, #1
 8013004:	e7d9      	b.n	8012fba <_printf_common+0x8e>
	...

08013008 <_printf_i>:
 8013008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801300c:	7e0f      	ldrb	r7, [r1, #24]
 801300e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013010:	2f78      	cmp	r7, #120	; 0x78
 8013012:	4691      	mov	r9, r2
 8013014:	4680      	mov	r8, r0
 8013016:	460c      	mov	r4, r1
 8013018:	469a      	mov	sl, r3
 801301a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801301e:	d807      	bhi.n	8013030 <_printf_i+0x28>
 8013020:	2f62      	cmp	r7, #98	; 0x62
 8013022:	d80a      	bhi.n	801303a <_printf_i+0x32>
 8013024:	2f00      	cmp	r7, #0
 8013026:	f000 80d8 	beq.w	80131da <_printf_i+0x1d2>
 801302a:	2f58      	cmp	r7, #88	; 0x58
 801302c:	f000 80a3 	beq.w	8013176 <_printf_i+0x16e>
 8013030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013038:	e03a      	b.n	80130b0 <_printf_i+0xa8>
 801303a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801303e:	2b15      	cmp	r3, #21
 8013040:	d8f6      	bhi.n	8013030 <_printf_i+0x28>
 8013042:	a101      	add	r1, pc, #4	; (adr r1, 8013048 <_printf_i+0x40>)
 8013044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013048:	080130a1 	.word	0x080130a1
 801304c:	080130b5 	.word	0x080130b5
 8013050:	08013031 	.word	0x08013031
 8013054:	08013031 	.word	0x08013031
 8013058:	08013031 	.word	0x08013031
 801305c:	08013031 	.word	0x08013031
 8013060:	080130b5 	.word	0x080130b5
 8013064:	08013031 	.word	0x08013031
 8013068:	08013031 	.word	0x08013031
 801306c:	08013031 	.word	0x08013031
 8013070:	08013031 	.word	0x08013031
 8013074:	080131c1 	.word	0x080131c1
 8013078:	080130e5 	.word	0x080130e5
 801307c:	080131a3 	.word	0x080131a3
 8013080:	08013031 	.word	0x08013031
 8013084:	08013031 	.word	0x08013031
 8013088:	080131e3 	.word	0x080131e3
 801308c:	08013031 	.word	0x08013031
 8013090:	080130e5 	.word	0x080130e5
 8013094:	08013031 	.word	0x08013031
 8013098:	08013031 	.word	0x08013031
 801309c:	080131ab 	.word	0x080131ab
 80130a0:	682b      	ldr	r3, [r5, #0]
 80130a2:	1d1a      	adds	r2, r3, #4
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	602a      	str	r2, [r5, #0]
 80130a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80130ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80130b0:	2301      	movs	r3, #1
 80130b2:	e0a3      	b.n	80131fc <_printf_i+0x1f4>
 80130b4:	6820      	ldr	r0, [r4, #0]
 80130b6:	6829      	ldr	r1, [r5, #0]
 80130b8:	0606      	lsls	r6, r0, #24
 80130ba:	f101 0304 	add.w	r3, r1, #4
 80130be:	d50a      	bpl.n	80130d6 <_printf_i+0xce>
 80130c0:	680e      	ldr	r6, [r1, #0]
 80130c2:	602b      	str	r3, [r5, #0]
 80130c4:	2e00      	cmp	r6, #0
 80130c6:	da03      	bge.n	80130d0 <_printf_i+0xc8>
 80130c8:	232d      	movs	r3, #45	; 0x2d
 80130ca:	4276      	negs	r6, r6
 80130cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80130d0:	485e      	ldr	r0, [pc, #376]	; (801324c <_printf_i+0x244>)
 80130d2:	230a      	movs	r3, #10
 80130d4:	e019      	b.n	801310a <_printf_i+0x102>
 80130d6:	680e      	ldr	r6, [r1, #0]
 80130d8:	602b      	str	r3, [r5, #0]
 80130da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80130de:	bf18      	it	ne
 80130e0:	b236      	sxthne	r6, r6
 80130e2:	e7ef      	b.n	80130c4 <_printf_i+0xbc>
 80130e4:	682b      	ldr	r3, [r5, #0]
 80130e6:	6820      	ldr	r0, [r4, #0]
 80130e8:	1d19      	adds	r1, r3, #4
 80130ea:	6029      	str	r1, [r5, #0]
 80130ec:	0601      	lsls	r1, r0, #24
 80130ee:	d501      	bpl.n	80130f4 <_printf_i+0xec>
 80130f0:	681e      	ldr	r6, [r3, #0]
 80130f2:	e002      	b.n	80130fa <_printf_i+0xf2>
 80130f4:	0646      	lsls	r6, r0, #25
 80130f6:	d5fb      	bpl.n	80130f0 <_printf_i+0xe8>
 80130f8:	881e      	ldrh	r6, [r3, #0]
 80130fa:	4854      	ldr	r0, [pc, #336]	; (801324c <_printf_i+0x244>)
 80130fc:	2f6f      	cmp	r7, #111	; 0x6f
 80130fe:	bf0c      	ite	eq
 8013100:	2308      	moveq	r3, #8
 8013102:	230a      	movne	r3, #10
 8013104:	2100      	movs	r1, #0
 8013106:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801310a:	6865      	ldr	r5, [r4, #4]
 801310c:	60a5      	str	r5, [r4, #8]
 801310e:	2d00      	cmp	r5, #0
 8013110:	bfa2      	ittt	ge
 8013112:	6821      	ldrge	r1, [r4, #0]
 8013114:	f021 0104 	bicge.w	r1, r1, #4
 8013118:	6021      	strge	r1, [r4, #0]
 801311a:	b90e      	cbnz	r6, 8013120 <_printf_i+0x118>
 801311c:	2d00      	cmp	r5, #0
 801311e:	d04d      	beq.n	80131bc <_printf_i+0x1b4>
 8013120:	4615      	mov	r5, r2
 8013122:	fbb6 f1f3 	udiv	r1, r6, r3
 8013126:	fb03 6711 	mls	r7, r3, r1, r6
 801312a:	5dc7      	ldrb	r7, [r0, r7]
 801312c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013130:	4637      	mov	r7, r6
 8013132:	42bb      	cmp	r3, r7
 8013134:	460e      	mov	r6, r1
 8013136:	d9f4      	bls.n	8013122 <_printf_i+0x11a>
 8013138:	2b08      	cmp	r3, #8
 801313a:	d10b      	bne.n	8013154 <_printf_i+0x14c>
 801313c:	6823      	ldr	r3, [r4, #0]
 801313e:	07de      	lsls	r6, r3, #31
 8013140:	d508      	bpl.n	8013154 <_printf_i+0x14c>
 8013142:	6923      	ldr	r3, [r4, #16]
 8013144:	6861      	ldr	r1, [r4, #4]
 8013146:	4299      	cmp	r1, r3
 8013148:	bfde      	ittt	le
 801314a:	2330      	movle	r3, #48	; 0x30
 801314c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013150:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013154:	1b52      	subs	r2, r2, r5
 8013156:	6122      	str	r2, [r4, #16]
 8013158:	f8cd a000 	str.w	sl, [sp]
 801315c:	464b      	mov	r3, r9
 801315e:	aa03      	add	r2, sp, #12
 8013160:	4621      	mov	r1, r4
 8013162:	4640      	mov	r0, r8
 8013164:	f7ff fee2 	bl	8012f2c <_printf_common>
 8013168:	3001      	adds	r0, #1
 801316a:	d14c      	bne.n	8013206 <_printf_i+0x1fe>
 801316c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013170:	b004      	add	sp, #16
 8013172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013176:	4835      	ldr	r0, [pc, #212]	; (801324c <_printf_i+0x244>)
 8013178:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801317c:	6829      	ldr	r1, [r5, #0]
 801317e:	6823      	ldr	r3, [r4, #0]
 8013180:	f851 6b04 	ldr.w	r6, [r1], #4
 8013184:	6029      	str	r1, [r5, #0]
 8013186:	061d      	lsls	r5, r3, #24
 8013188:	d514      	bpl.n	80131b4 <_printf_i+0x1ac>
 801318a:	07df      	lsls	r7, r3, #31
 801318c:	bf44      	itt	mi
 801318e:	f043 0320 	orrmi.w	r3, r3, #32
 8013192:	6023      	strmi	r3, [r4, #0]
 8013194:	b91e      	cbnz	r6, 801319e <_printf_i+0x196>
 8013196:	6823      	ldr	r3, [r4, #0]
 8013198:	f023 0320 	bic.w	r3, r3, #32
 801319c:	6023      	str	r3, [r4, #0]
 801319e:	2310      	movs	r3, #16
 80131a0:	e7b0      	b.n	8013104 <_printf_i+0xfc>
 80131a2:	6823      	ldr	r3, [r4, #0]
 80131a4:	f043 0320 	orr.w	r3, r3, #32
 80131a8:	6023      	str	r3, [r4, #0]
 80131aa:	2378      	movs	r3, #120	; 0x78
 80131ac:	4828      	ldr	r0, [pc, #160]	; (8013250 <_printf_i+0x248>)
 80131ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80131b2:	e7e3      	b.n	801317c <_printf_i+0x174>
 80131b4:	0659      	lsls	r1, r3, #25
 80131b6:	bf48      	it	mi
 80131b8:	b2b6      	uxthmi	r6, r6
 80131ba:	e7e6      	b.n	801318a <_printf_i+0x182>
 80131bc:	4615      	mov	r5, r2
 80131be:	e7bb      	b.n	8013138 <_printf_i+0x130>
 80131c0:	682b      	ldr	r3, [r5, #0]
 80131c2:	6826      	ldr	r6, [r4, #0]
 80131c4:	6961      	ldr	r1, [r4, #20]
 80131c6:	1d18      	adds	r0, r3, #4
 80131c8:	6028      	str	r0, [r5, #0]
 80131ca:	0635      	lsls	r5, r6, #24
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	d501      	bpl.n	80131d4 <_printf_i+0x1cc>
 80131d0:	6019      	str	r1, [r3, #0]
 80131d2:	e002      	b.n	80131da <_printf_i+0x1d2>
 80131d4:	0670      	lsls	r0, r6, #25
 80131d6:	d5fb      	bpl.n	80131d0 <_printf_i+0x1c8>
 80131d8:	8019      	strh	r1, [r3, #0]
 80131da:	2300      	movs	r3, #0
 80131dc:	6123      	str	r3, [r4, #16]
 80131de:	4615      	mov	r5, r2
 80131e0:	e7ba      	b.n	8013158 <_printf_i+0x150>
 80131e2:	682b      	ldr	r3, [r5, #0]
 80131e4:	1d1a      	adds	r2, r3, #4
 80131e6:	602a      	str	r2, [r5, #0]
 80131e8:	681d      	ldr	r5, [r3, #0]
 80131ea:	6862      	ldr	r2, [r4, #4]
 80131ec:	2100      	movs	r1, #0
 80131ee:	4628      	mov	r0, r5
 80131f0:	f7ec fffe 	bl	80001f0 <memchr>
 80131f4:	b108      	cbz	r0, 80131fa <_printf_i+0x1f2>
 80131f6:	1b40      	subs	r0, r0, r5
 80131f8:	6060      	str	r0, [r4, #4]
 80131fa:	6863      	ldr	r3, [r4, #4]
 80131fc:	6123      	str	r3, [r4, #16]
 80131fe:	2300      	movs	r3, #0
 8013200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013204:	e7a8      	b.n	8013158 <_printf_i+0x150>
 8013206:	6923      	ldr	r3, [r4, #16]
 8013208:	462a      	mov	r2, r5
 801320a:	4649      	mov	r1, r9
 801320c:	4640      	mov	r0, r8
 801320e:	47d0      	blx	sl
 8013210:	3001      	adds	r0, #1
 8013212:	d0ab      	beq.n	801316c <_printf_i+0x164>
 8013214:	6823      	ldr	r3, [r4, #0]
 8013216:	079b      	lsls	r3, r3, #30
 8013218:	d413      	bmi.n	8013242 <_printf_i+0x23a>
 801321a:	68e0      	ldr	r0, [r4, #12]
 801321c:	9b03      	ldr	r3, [sp, #12]
 801321e:	4298      	cmp	r0, r3
 8013220:	bfb8      	it	lt
 8013222:	4618      	movlt	r0, r3
 8013224:	e7a4      	b.n	8013170 <_printf_i+0x168>
 8013226:	2301      	movs	r3, #1
 8013228:	4632      	mov	r2, r6
 801322a:	4649      	mov	r1, r9
 801322c:	4640      	mov	r0, r8
 801322e:	47d0      	blx	sl
 8013230:	3001      	adds	r0, #1
 8013232:	d09b      	beq.n	801316c <_printf_i+0x164>
 8013234:	3501      	adds	r5, #1
 8013236:	68e3      	ldr	r3, [r4, #12]
 8013238:	9903      	ldr	r1, [sp, #12]
 801323a:	1a5b      	subs	r3, r3, r1
 801323c:	42ab      	cmp	r3, r5
 801323e:	dcf2      	bgt.n	8013226 <_printf_i+0x21e>
 8013240:	e7eb      	b.n	801321a <_printf_i+0x212>
 8013242:	2500      	movs	r5, #0
 8013244:	f104 0619 	add.w	r6, r4, #25
 8013248:	e7f5      	b.n	8013236 <_printf_i+0x22e>
 801324a:	bf00      	nop
 801324c:	080135b9 	.word	0x080135b9
 8013250:	080135ca 	.word	0x080135ca

08013254 <__sread>:
 8013254:	b510      	push	{r4, lr}
 8013256:	460c      	mov	r4, r1
 8013258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801325c:	f000 f894 	bl	8013388 <_read_r>
 8013260:	2800      	cmp	r0, #0
 8013262:	bfab      	itete	ge
 8013264:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013266:	89a3      	ldrhlt	r3, [r4, #12]
 8013268:	181b      	addge	r3, r3, r0
 801326a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801326e:	bfac      	ite	ge
 8013270:	6563      	strge	r3, [r4, #84]	; 0x54
 8013272:	81a3      	strhlt	r3, [r4, #12]
 8013274:	bd10      	pop	{r4, pc}

08013276 <__swrite>:
 8013276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801327a:	461f      	mov	r7, r3
 801327c:	898b      	ldrh	r3, [r1, #12]
 801327e:	05db      	lsls	r3, r3, #23
 8013280:	4605      	mov	r5, r0
 8013282:	460c      	mov	r4, r1
 8013284:	4616      	mov	r6, r2
 8013286:	d505      	bpl.n	8013294 <__swrite+0x1e>
 8013288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801328c:	2302      	movs	r3, #2
 801328e:	2200      	movs	r2, #0
 8013290:	f000 f868 	bl	8013364 <_lseek_r>
 8013294:	89a3      	ldrh	r3, [r4, #12]
 8013296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801329a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801329e:	81a3      	strh	r3, [r4, #12]
 80132a0:	4632      	mov	r2, r6
 80132a2:	463b      	mov	r3, r7
 80132a4:	4628      	mov	r0, r5
 80132a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80132aa:	f000 b817 	b.w	80132dc <_write_r>

080132ae <__sseek>:
 80132ae:	b510      	push	{r4, lr}
 80132b0:	460c      	mov	r4, r1
 80132b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132b6:	f000 f855 	bl	8013364 <_lseek_r>
 80132ba:	1c43      	adds	r3, r0, #1
 80132bc:	89a3      	ldrh	r3, [r4, #12]
 80132be:	bf15      	itete	ne
 80132c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80132c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80132c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80132ca:	81a3      	strheq	r3, [r4, #12]
 80132cc:	bf18      	it	ne
 80132ce:	81a3      	strhne	r3, [r4, #12]
 80132d0:	bd10      	pop	{r4, pc}

080132d2 <__sclose>:
 80132d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132d6:	f000 b813 	b.w	8013300 <_close_r>
	...

080132dc <_write_r>:
 80132dc:	b538      	push	{r3, r4, r5, lr}
 80132de:	4d07      	ldr	r5, [pc, #28]	; (80132fc <_write_r+0x20>)
 80132e0:	4604      	mov	r4, r0
 80132e2:	4608      	mov	r0, r1
 80132e4:	4611      	mov	r1, r2
 80132e6:	2200      	movs	r2, #0
 80132e8:	602a      	str	r2, [r5, #0]
 80132ea:	461a      	mov	r2, r3
 80132ec:	f7ee fdd3 	bl	8001e96 <_write>
 80132f0:	1c43      	adds	r3, r0, #1
 80132f2:	d102      	bne.n	80132fa <_write_r+0x1e>
 80132f4:	682b      	ldr	r3, [r5, #0]
 80132f6:	b103      	cbz	r3, 80132fa <_write_r+0x1e>
 80132f8:	6023      	str	r3, [r4, #0]
 80132fa:	bd38      	pop	{r3, r4, r5, pc}
 80132fc:	20002a40 	.word	0x20002a40

08013300 <_close_r>:
 8013300:	b538      	push	{r3, r4, r5, lr}
 8013302:	4d06      	ldr	r5, [pc, #24]	; (801331c <_close_r+0x1c>)
 8013304:	2300      	movs	r3, #0
 8013306:	4604      	mov	r4, r0
 8013308:	4608      	mov	r0, r1
 801330a:	602b      	str	r3, [r5, #0]
 801330c:	f7ee fddf 	bl	8001ece <_close>
 8013310:	1c43      	adds	r3, r0, #1
 8013312:	d102      	bne.n	801331a <_close_r+0x1a>
 8013314:	682b      	ldr	r3, [r5, #0]
 8013316:	b103      	cbz	r3, 801331a <_close_r+0x1a>
 8013318:	6023      	str	r3, [r4, #0]
 801331a:	bd38      	pop	{r3, r4, r5, pc}
 801331c:	20002a40 	.word	0x20002a40

08013320 <_fstat_r>:
 8013320:	b538      	push	{r3, r4, r5, lr}
 8013322:	4d07      	ldr	r5, [pc, #28]	; (8013340 <_fstat_r+0x20>)
 8013324:	2300      	movs	r3, #0
 8013326:	4604      	mov	r4, r0
 8013328:	4608      	mov	r0, r1
 801332a:	4611      	mov	r1, r2
 801332c:	602b      	str	r3, [r5, #0]
 801332e:	f7ee fdda 	bl	8001ee6 <_fstat>
 8013332:	1c43      	adds	r3, r0, #1
 8013334:	d102      	bne.n	801333c <_fstat_r+0x1c>
 8013336:	682b      	ldr	r3, [r5, #0]
 8013338:	b103      	cbz	r3, 801333c <_fstat_r+0x1c>
 801333a:	6023      	str	r3, [r4, #0]
 801333c:	bd38      	pop	{r3, r4, r5, pc}
 801333e:	bf00      	nop
 8013340:	20002a40 	.word	0x20002a40

08013344 <_isatty_r>:
 8013344:	b538      	push	{r3, r4, r5, lr}
 8013346:	4d06      	ldr	r5, [pc, #24]	; (8013360 <_isatty_r+0x1c>)
 8013348:	2300      	movs	r3, #0
 801334a:	4604      	mov	r4, r0
 801334c:	4608      	mov	r0, r1
 801334e:	602b      	str	r3, [r5, #0]
 8013350:	f7ee fdd9 	bl	8001f06 <_isatty>
 8013354:	1c43      	adds	r3, r0, #1
 8013356:	d102      	bne.n	801335e <_isatty_r+0x1a>
 8013358:	682b      	ldr	r3, [r5, #0]
 801335a:	b103      	cbz	r3, 801335e <_isatty_r+0x1a>
 801335c:	6023      	str	r3, [r4, #0]
 801335e:	bd38      	pop	{r3, r4, r5, pc}
 8013360:	20002a40 	.word	0x20002a40

08013364 <_lseek_r>:
 8013364:	b538      	push	{r3, r4, r5, lr}
 8013366:	4d07      	ldr	r5, [pc, #28]	; (8013384 <_lseek_r+0x20>)
 8013368:	4604      	mov	r4, r0
 801336a:	4608      	mov	r0, r1
 801336c:	4611      	mov	r1, r2
 801336e:	2200      	movs	r2, #0
 8013370:	602a      	str	r2, [r5, #0]
 8013372:	461a      	mov	r2, r3
 8013374:	f7ee fdd2 	bl	8001f1c <_lseek>
 8013378:	1c43      	adds	r3, r0, #1
 801337a:	d102      	bne.n	8013382 <_lseek_r+0x1e>
 801337c:	682b      	ldr	r3, [r5, #0]
 801337e:	b103      	cbz	r3, 8013382 <_lseek_r+0x1e>
 8013380:	6023      	str	r3, [r4, #0]
 8013382:	bd38      	pop	{r3, r4, r5, pc}
 8013384:	20002a40 	.word	0x20002a40

08013388 <_read_r>:
 8013388:	b538      	push	{r3, r4, r5, lr}
 801338a:	4d07      	ldr	r5, [pc, #28]	; (80133a8 <_read_r+0x20>)
 801338c:	4604      	mov	r4, r0
 801338e:	4608      	mov	r0, r1
 8013390:	4611      	mov	r1, r2
 8013392:	2200      	movs	r2, #0
 8013394:	602a      	str	r2, [r5, #0]
 8013396:	461a      	mov	r2, r3
 8013398:	f7ee fd60 	bl	8001e5c <_read>
 801339c:	1c43      	adds	r3, r0, #1
 801339e:	d102      	bne.n	80133a6 <_read_r+0x1e>
 80133a0:	682b      	ldr	r3, [r5, #0]
 80133a2:	b103      	cbz	r3, 80133a6 <_read_r+0x1e>
 80133a4:	6023      	str	r3, [r4, #0]
 80133a6:	bd38      	pop	{r3, r4, r5, pc}
 80133a8:	20002a40 	.word	0x20002a40

080133ac <_init>:
 80133ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133ae:	bf00      	nop
 80133b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80133b2:	bc08      	pop	{r3}
 80133b4:	469e      	mov	lr, r3
 80133b6:	4770      	bx	lr

080133b8 <_fini>:
 80133b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133ba:	bf00      	nop
 80133bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80133be:	bc08      	pop	{r3}
 80133c0:	469e      	mov	lr, r3
 80133c2:	4770      	bx	lr
