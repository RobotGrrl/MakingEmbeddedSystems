
testing24_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014a10  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08014bc0  08014bc0  00024bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014dd8  08014dd8  00030644  2**0
                  CONTENTS
  4 .ARM          00000008  08014dd8  08014dd8  00024dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014de0  08014de0  00030644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014de0  08014de0  00024de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014de4  08014de4  00024de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000644  20000000  08014de8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000266c  20000644  0801542c  00030644  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002cb0  0801542c  00032cb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030644  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d9e4  00000000  00000000  00030674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007912  00000000  00000000  0006e058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003180  00000000  00000000  00075970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002e40  00000000  00000000  00078af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003899e  00000000  00000000  0007b930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003ff3e  00000000  00000000  000b42ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00139fa7  00000000  00000000  000f420c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0022e1b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000db28  00000000  00000000  0022e204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000644 	.word	0x20000644
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08014ba8 	.word	0x08014ba8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000648 	.word	0x20000648
 80001ec:	08014ba8 	.word	0x08014ba8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]
 80005b4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005b6:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005b8:	4a2f      	ldr	r2, [pc, #188]	; (8000678 <MX_ADC1_Init+0xe4>)
 80005ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005bc:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c2:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c8:	4b2a      	ldr	r3, [pc, #168]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ce:	4b29      	ldr	r3, [pc, #164]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d4:	4b27      	ldr	r3, [pc, #156]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005d6:	2204      	movs	r2, #4
 80005d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005da:	4b26      	ldr	r3, [pc, #152]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005dc:	2200      	movs	r2, #0
 80005de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e0:	4b24      	ldr	r3, [pc, #144]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005e6:	4b23      	ldr	r3, [pc, #140]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005fa:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000602:	2200      	movs	r2, #0
 8000604:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_ADC1_Init+0xe0>)
 800060a:	2200      	movs	r2, #0
 800060c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000616:	4817      	ldr	r0, [pc, #92]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000618:	f006 ffe8 	bl	80075ec <HAL_ADC_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000622:	f001 f937 	bl	8001894 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	4619      	mov	r1, r3
 8000630:	4810      	ldr	r0, [pc, #64]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000632:	f007 fd67 	bl	8008104 <HAL_ADCEx_MultiModeConfigChannel>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800063c:	f001 f92a 	bl	8001894 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_ADC1_Init+0xe8>)
 8000642:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000644:	2306      	movs	r3, #6
 8000646:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800064c:	237f      	movs	r3, #127	; 0x7f
 800064e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000650:	2304      	movs	r3, #4
 8000652:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_ADC1_Init+0xe0>)
 800065e:	f007 f91f 	bl	80078a0 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000668:	f001 f914 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3728      	adds	r7, #40	; 0x28
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000660 	.word	0x20000660
 8000678:	50040000 	.word	0x50040000
 800067c:	10c00010 	.word	0x10c00010

08000680 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000686:	463b      	mov	r3, r7
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
 8000694:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000696:	4b29      	ldr	r3, [pc, #164]	; (800073c <MX_ADC2_Init+0xbc>)
 8000698:	4a29      	ldr	r2, [pc, #164]	; (8000740 <MX_ADC2_Init+0xc0>)
 800069a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <MX_ADC2_Init+0xbc>)
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006a2:	4b26      	ldr	r3, [pc, #152]	; (800073c <MX_ADC2_Init+0xbc>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a8:	4b24      	ldr	r3, [pc, #144]	; (800073c <MX_ADC2_Init+0xbc>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <MX_ADC2_Init+0xbc>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b4:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_ADC2_Init+0xbc>)
 80006b6:	2204      	movs	r2, #4
 80006b8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006ba:	4b20      	ldr	r3, [pc, #128]	; (800073c <MX_ADC2_Init+0xbc>)
 80006bc:	2200      	movs	r2, #0
 80006be:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006c0:	4b1e      	ldr	r3, [pc, #120]	; (800073c <MX_ADC2_Init+0xbc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_ADC2_Init+0xbc>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_ADC2_Init+0xbc>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d4:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_ADC2_Init+0xbc>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006da:	4b18      	ldr	r3, [pc, #96]	; (800073c <MX_ADC2_Init+0xbc>)
 80006dc:	2200      	movs	r2, #0
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_ADC2_Init+0xbc>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_ADC2_Init+0xbc>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_ADC2_Init+0xbc>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006f6:	4811      	ldr	r0, [pc, #68]	; (800073c <MX_ADC2_Init+0xbc>)
 80006f8:	f006 ff78 	bl	80075ec <HAL_ADC_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000702:	f001 f8c7 	bl	8001894 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_ADC2_Init+0xc4>)
 8000708:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800070a:	2306      	movs	r3, #6
 800070c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000712:	237f      	movs	r3, #127	; 0x7f
 8000714:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000716:	2304      	movs	r3, #4
 8000718:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800071e:	463b      	mov	r3, r7
 8000720:	4619      	mov	r1, r3
 8000722:	4806      	ldr	r0, [pc, #24]	; (800073c <MX_ADC2_Init+0xbc>)
 8000724:	f007 f8bc 	bl	80078a0 <HAL_ADC_ConfigChannel>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 800072e:	f001 f8b1 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200006c8 	.word	0x200006c8
 8000740:	50040100 	.word	0x50040100
 8000744:	25b00200 	.word	0x25b00200

08000748 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800074e:	463b      	mov	r3, r7
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
 800075c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800075e:	4b29      	ldr	r3, [pc, #164]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000760:	4a29      	ldr	r2, [pc, #164]	; (8000808 <MX_ADC3_Init+0xc0>)
 8000762:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000766:	2200      	movs	r2, #0
 8000768:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <MX_ADC3_Init+0xbc>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000770:	4b24      	ldr	r3, [pc, #144]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000776:	4b23      	ldr	r3, [pc, #140]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077c:	4b21      	ldr	r3, [pc, #132]	; (8000804 <MX_ADC3_Init+0xbc>)
 800077e:	2204      	movs	r2, #4
 8000780:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000784:	2200      	movs	r2, #0
 8000786:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <MX_ADC3_Init+0xbc>)
 800078a:	2200      	movs	r2, #0
 800078c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000790:	2201      	movs	r2, #1
 8000792:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000796:	2200      	movs	r2, #0
 8000798:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_ADC3_Init+0xbc>)
 800079e:	2200      	movs	r2, #0
 80007a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007be:	4811      	ldr	r0, [pc, #68]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007c0:	f006 ff14 	bl	80075ec <HAL_ADC_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80007ca:	f001 f863 	bl	8001894 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_ADC3_Init+0xc4>)
 80007d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d2:	2306      	movs	r3, #6
 80007d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007da:	237f      	movs	r3, #127	; 0x7f
 80007dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007de:	2304      	movs	r3, #4
 80007e0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007e6:	463b      	mov	r3, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007ec:	f007 f858 	bl	80078a0 <HAL_ADC_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80007f6:	f001 f84d 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000730 	.word	0x20000730
 8000808:	50040200 	.word	0x50040200
 800080c:	36902000 	.word	0x36902000

08000810 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08e      	sub	sp, #56	; 0x38
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a59      	ldr	r2, [pc, #356]	; (8000994 <HAL_ADC_MspInit+0x184>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d12d      	bne.n	800088e <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000832:	4b59      	ldr	r3, [pc, #356]	; (8000998 <HAL_ADC_MspInit+0x188>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	3301      	adds	r3, #1
 8000838:	4a57      	ldr	r2, [pc, #348]	; (8000998 <HAL_ADC_MspInit+0x188>)
 800083a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800083c:	4b56      	ldr	r3, [pc, #344]	; (8000998 <HAL_ADC_MspInit+0x188>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d10b      	bne.n	800085c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000844:	4b55      	ldr	r3, [pc, #340]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000848:	4a54      	ldr	r2, [pc, #336]	; (800099c <HAL_ADC_MspInit+0x18c>)
 800084a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800084e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000850:	4b52      	ldr	r3, [pc, #328]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000858:	623b      	str	r3, [r7, #32]
 800085a:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800085c:	4b4f      	ldr	r3, [pc, #316]	; (800099c <HAL_ADC_MspInit+0x18c>)
 800085e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000860:	4a4e      	ldr	r2, [pc, #312]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000868:	4b4c      	ldr	r3, [pc, #304]	; (800099c <HAL_ADC_MspInit+0x18c>)
 800086a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	61fb      	str	r3, [r7, #28]
 8000872:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 8000874:	2318      	movs	r3, #24
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000878:	230b      	movs	r3, #11
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000884:	4619      	mov	r1, r3
 8000886:	4846      	ldr	r0, [pc, #280]	; (80009a0 <HAL_ADC_MspInit+0x190>)
 8000888:	f007 ff90 	bl	80087ac <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800088c:	e07e      	b.n	800098c <HAL_ADC_MspInit+0x17c>
  else if(adcHandle->Instance==ADC2)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a44      	ldr	r2, [pc, #272]	; (80009a4 <HAL_ADC_MspInit+0x194>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d146      	bne.n	8000926 <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000898:	4b3f      	ldr	r3, [pc, #252]	; (8000998 <HAL_ADC_MspInit+0x188>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	4a3e      	ldr	r2, [pc, #248]	; (8000998 <HAL_ADC_MspInit+0x188>)
 80008a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80008a2:	4b3d      	ldr	r3, [pc, #244]	; (8000998 <HAL_ADC_MspInit+0x188>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d10b      	bne.n	80008c2 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80008aa:	4b3c      	ldr	r3, [pc, #240]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a3b      	ldr	r2, [pc, #236]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b39      	ldr	r3, [pc, #228]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	4b36      	ldr	r3, [pc, #216]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a35      	ldr	r2, [pc, #212]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b33      	ldr	r3, [pc, #204]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b30      	ldr	r3, [pc, #192]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4a2f      	ldr	r2, [pc, #188]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4b2d      	ldr	r3, [pc, #180]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 80008f2:	2303      	movs	r3, #3
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008f6:	230b      	movs	r3, #11
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000902:	4619      	mov	r1, r3
 8000904:	4826      	ldr	r0, [pc, #152]	; (80009a0 <HAL_ADC_MspInit+0x190>)
 8000906:	f007 ff51 	bl	80087ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 800090a:	2312      	movs	r3, #18
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800090e:	230b      	movs	r3, #11
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091a:	4619      	mov	r1, r3
 800091c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000920:	f007 ff44 	bl	80087ac <HAL_GPIO_Init>
}
 8000924:	e032      	b.n	800098c <HAL_ADC_MspInit+0x17c>
  else if(adcHandle->Instance==ADC3)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a1f      	ldr	r2, [pc, #124]	; (80009a8 <HAL_ADC_MspInit+0x198>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d12d      	bne.n	800098c <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000930:	4b19      	ldr	r3, [pc, #100]	; (8000998 <HAL_ADC_MspInit+0x188>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	4a18      	ldr	r2, [pc, #96]	; (8000998 <HAL_ADC_MspInit+0x188>)
 8000938:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <HAL_ADC_MspInit+0x188>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d10b      	bne.n	800095a <HAL_ADC_MspInit+0x14a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a15      	ldr	r2, [pc, #84]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000948:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <HAL_ADC_MspInit+0x18c>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a0f      	ldr	r2, [pc, #60]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000960:	f043 0320 	orr.w	r3, r3, #32
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0320 	and.w	r3, r3, #32
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000978:	230b      	movs	r3, #11
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	4619      	mov	r1, r3
 8000986:	4809      	ldr	r0, [pc, #36]	; (80009ac <HAL_ADC_MspInit+0x19c>)
 8000988:	f007 ff10 	bl	80087ac <HAL_GPIO_Init>
}
 800098c:	bf00      	nop
 800098e:	3738      	adds	r7, #56	; 0x38
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	50040000 	.word	0x50040000
 8000998:	20000798 	.word	0x20000798
 800099c:	40021000 	.word	0x40021000
 80009a0:	48000800 	.word	0x48000800
 80009a4:	50040100 	.word	0x50040100
 80009a8:	50040200 	.word	0x50040200
 80009ac:	48001400 	.word	0x48001400

080009b0 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009b6:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <MX_DCMI_Init+0x64>)
 80009b8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80009cc:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80009d8:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009fe:	f007 fd43 	bl	8008488 <HAL_DCMI_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000a08:	f000 ff44 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	2000079c 	.word	0x2000079c
 8000a14:	50050000 	.word	0x50050000

08000a18 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	; 0x30
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a33      	ldr	r2, [pc, #204]	; (8000b04 <HAL_DCMI_MspInit+0xec>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d160      	bne.n	8000afc <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000a3a:	4b33      	ldr	r3, [pc, #204]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a32      	ldr	r2, [pc, #200]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b30      	ldr	r3, [pc, #192]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4e:	61bb      	str	r3, [r7, #24]
 8000a50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a52:	4b2d      	ldr	r3, [pc, #180]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	4a2c      	ldr	r2, [pc, #176]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5e:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a6a:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4a26      	ldr	r2, [pc, #152]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a76:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	4a20      	ldr	r2, [pc, #128]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a88:	f043 0310 	orr.w	r3, r3, #16
 8000a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	f003 0310 	and.w	r3, r3, #16
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 8000a9a:	f645 7320 	movw	r3, #24352	; 0x5f20
 8000a9e:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000aac:	230a      	movs	r3, #10
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4815      	ldr	r0, [pc, #84]	; (8000b0c <HAL_DCMI_MspInit+0xf4>)
 8000ab8:	f007 fe78 	bl	80087ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8000abc:	23b0      	movs	r3, #176	; 0xb0
 8000abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000acc:	230a      	movs	r3, #10
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480e      	ldr	r0, [pc, #56]	; (8000b10 <HAL_DCMI_MspInit+0xf8>)
 8000ad8:	f007 fe68 	bl	80087ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8000adc:	2320      	movs	r3, #32
 8000ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000aec:	230a      	movs	r3, #10
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4619      	mov	r1, r3
 8000af6:	4807      	ldr	r0, [pc, #28]	; (8000b14 <HAL_DCMI_MspInit+0xfc>)
 8000af8:	f007 fe58 	bl	80087ac <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000afc:	bf00      	nop
 8000afe:	3730      	adds	r7, #48	; 0x30
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	50050000 	.word	0x50050000
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	48001c00 	.word	0x48001c00
 8000b10:	48002000 	.word	0x48002000
 8000b14:	48001000 	.word	0x48001000

08000b18 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;
DFSDM_Channel_HandleTypeDef hdfsdm1_channel2;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000b1c:	4b30      	ldr	r3, [pc, #192]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b1e:	4a31      	ldr	r2, [pc, #196]	; (8000be4 <MX_DFSDM1_Init+0xcc>)
 8000b20:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000b22:	4b2f      	ldr	r3, [pc, #188]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b28:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000b2e:	4b2c      	ldr	r3, [pc, #176]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b30:	2202      	movs	r2, #2
 8000b32:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b34:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b3a:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000b40:	4b27      	ldr	r3, [pc, #156]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000b46:	4b26      	ldr	r3, [pc, #152]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000b4c:	4b24      	ldr	r3, [pc, #144]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b4e:	2204      	movs	r2, #4
 8000b50:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b52:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000b58:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000b5e:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000b64:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000b6a:	481d      	ldr	r0, [pc, #116]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b6c:	f007 fd12 	bl	8008594 <HAL_DFSDM_ChannelInit>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000b76:	f000 fe8d 	bl	8001894 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b7c:	4a1b      	ldr	r2, [pc, #108]	; (8000bec <MX_DFSDM1_Init+0xd4>)
 8000b7e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000b80:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000b8c:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b8e:	2202      	movs	r2, #2
 8000b90:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ba4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bae:	2204      	movs	r2, #4
 8000bb0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000bca:	4807      	ldr	r0, [pc, #28]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bcc:	f007 fce2 	bl	8008594 <HAL_DFSDM_ChannelInit>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 8000bd6:	f000 fe5d 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000800 	.word	0x20000800
 8000be4:	40016020 	.word	0x40016020
 8000be8:	20000838 	.word	0x20000838
 8000bec:	40016040 	.word	0x40016040

08000bf0 <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b0ae      	sub	sp, #184	; 0xb8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c08:	f107 0318 	add.w	r3, r7, #24
 8000c0c:	228c      	movs	r2, #140	; 0x8c
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f012 ffb5 	bl	8013b80 <memset>
  if(DFSDM1_Init == 0)
 8000c16:	4b36      	ldr	r3, [pc, #216]	; (8000cf0 <HAL_DFSDM_ChannelMspInit+0x100>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d163      	bne.n	8000ce6 <HAL_DFSDM_ChannelMspInit+0xf6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c22:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c2a:	f107 0318 	add.w	r3, r7, #24
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f00a ffca 	bl	800bbc8 <HAL_RCCEx_PeriphCLKConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000c3a:	f000 fe2b 	bl	8001894 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000c3e:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c42:	4a2c      	ldr	r2, [pc, #176]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c48:	6613      	str	r3, [r2, #96]	; 0x60
 8000c4a:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	4a26      	ldr	r2, [pc, #152]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c62:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c72:	4a20      	ldr	r2, [pc, #128]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 8000c86:	2384      	movs	r3, #132	; 0x84
 8000c88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000c9e:	2306      	movs	r3, #6
 8000ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4813      	ldr	r0, [pc, #76]	; (8000cf8 <HAL_DFSDM_ChannelMspInit+0x108>)
 8000cac:	f007 fd7e 	bl	80087ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000cca:	2306      	movs	r3, #6
 8000ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4809      	ldr	r0, [pc, #36]	; (8000cfc <HAL_DFSDM_ChannelMspInit+0x10c>)
 8000cd8:	f007 fd68 	bl	80087ac <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <HAL_DFSDM_ChannelMspInit+0x100>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	4a03      	ldr	r2, [pc, #12]	; (8000cf0 <HAL_DFSDM_ChannelMspInit+0x100>)
 8000ce4:	6013      	str	r3, [r2, #0]
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	37b8      	adds	r7, #184	; 0xb8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000870 	.word	0x20000870
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	48000800 	.word	0x48000800
 8000cfc:	48000400 	.word	0x48000400

08000d00 <MX_FMC_Init>:
SRAM_HandleTypeDef hsram1;
SRAM_HandleTypeDef hsram2;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000d06:	463b      	mov	r3, r7
 8000d08:	2220      	movs	r2, #32
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f012 ff37 	bl	8013b80 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000d12:	4b4f      	ldr	r3, [pc, #316]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d14:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000d18:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000d1a:	4b4d      	ldr	r3, [pc, #308]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d1c:	4a4d      	ldr	r2, [pc, #308]	; (8000e54 <MX_FMC_Init+0x154>)
 8000d1e:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 8000d20:	4b4b      	ldr	r3, [pc, #300]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d22:	2202      	movs	r2, #2
 8000d24:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000d26:	4b4a      	ldr	r3, [pc, #296]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000d2c:	4b48      	ldr	r3, [pc, #288]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000d32:	4b47      	ldr	r3, [pc, #284]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d34:	2210      	movs	r2, #16
 8000d36:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000d38:	4b45      	ldr	r3, [pc, #276]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000d3e:	4b44      	ldr	r3, [pc, #272]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000d44:	4b42      	ldr	r3, [pc, #264]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000d4a:	4b41      	ldr	r3, [pc, #260]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000d50:	4b3f      	ldr	r3, [pc, #252]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000d56:	4b3e      	ldr	r3, [pc, #248]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000d5c:	4b3c      	ldr	r3, [pc, #240]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000d62:	4b3b      	ldr	r3, [pc, #236]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000d68:	4b39      	ldr	r3, [pc, #228]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000d6e:	4b38      	ldr	r3, [pc, #224]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000d74:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000d7a:	230f      	movs	r3, #15
 8000d7c:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000d7e:	230f      	movs	r3, #15
 8000d80:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000d82:	23ff      	movs	r3, #255	; 0xff
 8000d84:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8000d86:	230f      	movs	r3, #15
 8000d88:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000d8a:	2310      	movs	r3, #16
 8000d8c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000d8e:	2311      	movs	r3, #17
 8000d90:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000d96:	463b      	mov	r3, r7
 8000d98:	2200      	movs	r2, #0
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	482c      	ldr	r0, [pc, #176]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d9e:	f00d fae8 	bl	800e372 <HAL_SRAM_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 8000da8:	f000 fd74 	bl	8001894 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8000dac:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dae:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000db2:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000db4:	4b28      	ldr	r3, [pc, #160]	; (8000e58 <MX_FMC_Init+0x158>)
 8000db6:	4a27      	ldr	r2, [pc, #156]	; (8000e54 <MX_FMC_Init+0x154>)
 8000db8:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 8000dba:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000dc0:	4b25      	ldr	r3, [pc, #148]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dce:	2210      	movs	r2, #16
 8000dd0:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <MX_FMC_Init+0x158>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000de4:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <MX_FMC_Init+0x158>)
 8000de6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dea:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <MX_FMC_Init+0x158>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000df8:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000dfe:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000e16:	230f      	movs	r3, #15
 8000e18:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000e1a:	230f      	movs	r3, #15
 8000e1c:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000e1e:	23ff      	movs	r3, #255	; 0xff
 8000e20:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8000e22:	230f      	movs	r3, #15
 8000e24:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000e26:	2310      	movs	r3, #16
 8000e28:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000e2a:	2311      	movs	r3, #17
 8000e2c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8000e32:	463b      	mov	r3, r7
 8000e34:	2200      	movs	r2, #0
 8000e36:	4619      	mov	r1, r3
 8000e38:	4807      	ldr	r0, [pc, #28]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e3a:	f00d fa9a 	bl	800e372 <HAL_SRAM_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 8000e44:	f000 fd26 	bl	8001894 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000e48:	bf00      	nop
 8000e4a:	3720      	adds	r7, #32
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000874 	.word	0x20000874
 8000e54:	a0000104 	.word	0xa0000104
 8000e58:	200008c4 	.word	0x200008c4

08000e5c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000e70:	4b2b      	ldr	r3, [pc, #172]	; (8000f20 <HAL_FMC_MspInit+0xc4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d14f      	bne.n	8000f18 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 8000e78:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <HAL_FMC_MspInit+0xc4>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e7e:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <HAL_FMC_MspInit+0xc8>)
 8000e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e82:	4a28      	ldr	r2, [pc, #160]	; (8000f24 <HAL_FMC_MspInit+0xc8>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6513      	str	r3, [r2, #80]	; 0x50
 8000e8a:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <HAL_FMC_MspInit+0xc8>)
 8000e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 8000e96:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000e9a:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ea8:	230c      	movs	r3, #12
 8000eaa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	4619      	mov	r1, r3
 8000eb0:	481d      	ldr	r0, [pc, #116]	; (8000f28 <HAL_FMC_MspInit+0xcc>)
 8000eb2:	f007 fc7b 	bl	80087ac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 8000eb6:	f240 233f 	movw	r3, #575	; 0x23f
 8000eba:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ec8:	230c      	movs	r3, #12
 8000eca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4816      	ldr	r0, [pc, #88]	; (8000f2c <HAL_FMC_MspInit+0xd0>)
 8000ed2:	f007 fc6b 	bl	80087ac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 8000ed6:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8000eda:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ee8:	230c      	movs	r3, #12
 8000eea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480f      	ldr	r0, [pc, #60]	; (8000f30 <HAL_FMC_MspInit+0xd4>)
 8000ef2:	f007 fc5b 	bl	80087ac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8000ef6:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000efa:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f08:	230c      	movs	r3, #12
 8000f0a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4808      	ldr	r0, [pc, #32]	; (8000f34 <HAL_FMC_MspInit+0xd8>)
 8000f12:	f007 fc4b 	bl	80087ac <HAL_GPIO_Init>
 8000f16:	e000      	b.n	8000f1a <HAL_FMC_MspInit+0xbe>
    return;
 8000f18:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000914 	.word	0x20000914
 8000f24:	40021000 	.word	0x40021000
 8000f28:	48001000 	.word	0x48001000
 8000f2c:	48001800 	.word	0x48001800
 8000f30:	48000c00 	.word	0x48000c00
 8000f34:	48001400 	.word	0x48001400

08000f38 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000f40:	f7ff ff8c 	bl	8000e5c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <MX_GPIO_Init>:
     PH13   ------> TIM8_CH1N
     PB9   ------> S_TIM4_CH4
     PA8   ------> LPTIM2_OUT
*/
void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08e      	sub	sp, #56	; 0x38
 8000f50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f62:	4bb3      	ldr	r3, [pc, #716]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4ab2      	ldr	r2, [pc, #712]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4bb0      	ldr	r3, [pc, #704]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f76:	623b      	str	r3, [r7, #32]
 8000f78:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7a:	4bad      	ldr	r3, [pc, #692]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4aac      	ldr	r2, [pc, #688]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4baa      	ldr	r3, [pc, #680]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8e:	61fb      	str	r3, [r7, #28]
 8000f90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f92:	4ba7      	ldr	r3, [pc, #668]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	4aa6      	ldr	r2, [pc, #664]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000f98:	f043 0310 	orr.w	r3, r3, #16
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	4ba4      	ldr	r3, [pc, #656]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	f003 0310 	and.w	r3, r3, #16
 8000fa6:	61bb      	str	r3, [r7, #24]
 8000fa8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	4ba1      	ldr	r3, [pc, #644]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	4aa0      	ldr	r2, [pc, #640]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb6:	4b9e      	ldr	r3, [pc, #632]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	4b9b      	ldr	r3, [pc, #620]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	4a9a      	ldr	r2, [pc, #616]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fce:	4b98      	ldr	r3, [pc, #608]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fda:	4b95      	ldr	r3, [pc, #596]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4a94      	ldr	r2, [pc, #592]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4b92      	ldr	r3, [pc, #584]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000ff2:	f009 fed9 	bl	800ada8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff6:	4b8e      	ldr	r3, [pc, #568]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4a8d      	ldr	r2, [pc, #564]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4b8b      	ldr	r3, [pc, #556]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	4b88      	ldr	r3, [pc, #544]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	4a87      	ldr	r2, [pc, #540]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101a:	4b85      	ldr	r3, [pc, #532]	; (8001230 <MX_GPIO_Init+0x2e4>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001026:	4b82      	ldr	r3, [pc, #520]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	4a81      	ldr	r2, [pc, #516]	; (8001230 <MX_GPIO_Init+0x2e4>)
 800102c:	f043 0320 	orr.w	r3, r3, #32
 8001030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001032:	4b7f      	ldr	r3, [pc, #508]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	f003 0320 	and.w	r3, r3, #32
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2101      	movs	r1, #1
 8001042:	487c      	ldr	r0, [pc, #496]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8001044:	f007 fd44 	bl	8008ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	2143      	movs	r1, #67	; 0x43
 800104c:	487a      	ldr	r0, [pc, #488]	; (8001238 <MX_GPIO_Init+0x2ec>)
 800104e:	f007 fd3f 	bl	8008ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2140      	movs	r1, #64	; 0x40
 8001056:	4879      	ldr	r0, [pc, #484]	; (800123c <MX_GPIO_Init+0x2f0>)
 8001058:	f007 fd3a 	bl	8008ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ARD_D7_GPIO_Port, ARD_D7_Pin, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	2140      	movs	r1, #64	; 0x40
 8001060:	4877      	ldr	r0, [pc, #476]	; (8001240 <MX_GPIO_Init+0x2f4>)
 8001062:	f007 fd35 	bl	8008ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800106c:	4875      	ldr	r0, [pc, #468]	; (8001244 <MX_GPIO_Init+0x2f8>)
 800106e:	f007 fd2f 	bl	8008ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 8001072:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001078:	2300      	movs	r3, #0
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800107c:	2302      	movs	r3, #2
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001084:	4619      	mov	r1, r3
 8001086:	486b      	ldr	r0, [pc, #428]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8001088:	f007 fb90 	bl	80087ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 800108c:	2304      	movs	r3, #4
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001090:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109e:	4619      	mov	r1, r3
 80010a0:	4865      	ldr	r0, [pc, #404]	; (8001238 <MX_GPIO_Init+0x2ec>)
 80010a2:	f007 fb83 	bl	80087ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80010a6:	2301      	movs	r3, #1
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	2301      	movs	r3, #1
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ba:	4619      	mov	r1, r3
 80010bc:	485d      	ldr	r0, [pc, #372]	; (8001234 <MX_GPIO_Init+0x2e8>)
 80010be:	f007 fb75 	bl	80087ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80010c2:	2340      	movs	r3, #64	; 0x40
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80010d2:	2303      	movs	r3, #3
 80010d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010da:	4619      	mov	r1, r3
 80010dc:	4855      	ldr	r0, [pc, #340]	; (8001234 <MX_GPIO_Init+0x2e8>)
 80010de:	f007 fb65 	bl	80087ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 80010e2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80010f4:	2303      	movs	r3, #3
 80010f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fc:	4619      	mov	r1, r3
 80010fe:	484e      	ldr	r0, [pc, #312]	; (8001238 <MX_GPIO_Init+0x2ec>)
 8001100:	f007 fb54 	bl	80087ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8001104:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001116:	2302      	movs	r3, #2
 8001118:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111e:	4619      	mov	r1, r3
 8001120:	4848      	ldr	r0, [pc, #288]	; (8001244 <MX_GPIO_Init+0x2f8>)
 8001122:	f007 fb43 	bl	80087ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8001126:	2380      	movs	r3, #128	; 0x80
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112a:	2300      	movs	r3, #0
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 8001132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001136:	4619      	mov	r1, r3
 8001138:	483f      	ldr	r0, [pc, #252]	; (8001238 <MX_GPIO_Init+0x2ec>)
 800113a:	f007 fb37 	bl	80087ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 800113e:	2343      	movs	r3, #67	; 0x43
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800114e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001152:	4619      	mov	r1, r3
 8001154:	4838      	ldr	r0, [pc, #224]	; (8001238 <MX_GPIO_Init+0x2ec>)
 8001156:	f007 fb29 	bl	80087ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 800115a:	2340      	movs	r3, #64	; 0x40
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116e:	4619      	mov	r1, r3
 8001170:	4832      	ldr	r0, [pc, #200]	; (800123c <MX_GPIO_Init+0x2f0>)
 8001172:	f007 fb1b 	bl	80087ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001176:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800117c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118a:	4619      	mov	r1, r3
 800118c:	482c      	ldr	r0, [pc, #176]	; (8001240 <MX_GPIO_Init+0x2f4>)
 800118e:	f007 fb0d 	bl	80087ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 8001192:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 80011a4:	230e      	movs	r3, #14
 80011a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ac:	4619      	mov	r1, r3
 80011ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b2:	f007 fafb 	bl	80087ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80011b6:	2340      	movs	r3, #64	; 0x40
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ca:	4619      	mov	r1, r3
 80011cc:	481c      	ldr	r0, [pc, #112]	; (8001240 <MX_GPIO_Init+0x2f4>)
 80011ce:	f007 faed 	bl	80087ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 80011d2:	2320      	movs	r3, #32
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80011e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e4:	4619      	mov	r1, r3
 80011e6:	4815      	ldr	r0, [pc, #84]	; (800123c <MX_GPIO_Init+0x2f0>)
 80011e8:	f007 fae0 	bl	80087ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 80011ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011f6:	2302      	movs	r3, #2
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80011fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fe:	4619      	mov	r1, r3
 8001200:	4811      	ldr	r0, [pc, #68]	; (8001248 <MX_GPIO_Init+0x2fc>)
 8001202:	f007 fad3 	bl	80087ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 8001206:	2304      	movs	r3, #4
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120a:	2300      	movs	r3, #0
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001216:	4619      	mov	r1, r3
 8001218:	480a      	ldr	r0, [pc, #40]	; (8001244 <MX_GPIO_Init+0x2f8>)
 800121a:	f007 fac7 	bl	80087ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800121e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001224:	2311      	movs	r3, #17
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800122c:	e00e      	b.n	800124c <MX_GPIO_Init+0x300>
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000
 8001234:	48002000 	.word	0x48002000
 8001238:	48001c00 	.word	0x48001c00
 800123c:	48000800 	.word	0x48000800
 8001240:	48001800 	.word	0x48001800
 8001244:	48000400 	.word	0x48000400
 8001248:	48001400 	.word	0x48001400
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001254:	4619      	mov	r1, r3
 8001256:	4803      	ldr	r0, [pc, #12]	; (8001264 <MX_GPIO_Init+0x318>)
 8001258:	f007 faa8 	bl	80087ac <HAL_GPIO_Init>

}
 800125c:	bf00      	nop
 800125e:	3738      	adds	r7, #56	; 0x38
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	48000400 	.word	0x48000400

08001268 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <MX_I2C1_Init+0x74>)
 800126e:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <MX_I2C1_Init+0x78>)
 8001270:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_I2C1_Init+0x74>)
 8001274:	4a1b      	ldr	r2, [pc, #108]	; (80012e4 <MX_I2C1_Init+0x7c>)
 8001276:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001278:	4b18      	ldr	r3, [pc, #96]	; (80012dc <MX_I2C1_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <MX_I2C1_Init+0x74>)
 8001280:	2201      	movs	r2, #1
 8001282:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <MX_I2C1_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800128a:	4b14      	ldr	r3, [pc, #80]	; (80012dc <MX_I2C1_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_I2C1_Init+0x74>)
 8001292:	2200      	movs	r2, #0
 8001294:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_I2C1_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_I2C1_Init+0x74>)
 800129e:	2200      	movs	r2, #0
 80012a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a2:	480e      	ldr	r0, [pc, #56]	; (80012dc <MX_I2C1_Init+0x74>)
 80012a4:	f007 fc46 	bl	8008b34 <HAL_I2C_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012ae:	f000 faf1 	bl	8001894 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012b2:	2100      	movs	r1, #0
 80012b4:	4809      	ldr	r0, [pc, #36]	; (80012dc <MX_I2C1_Init+0x74>)
 80012b6:	f008 fa9d 	bl	80097f4 <HAL_I2CEx_ConfigAnalogFilter>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012c0:	f000 fae8 	bl	8001894 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012c4:	2100      	movs	r1, #0
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_I2C1_Init+0x74>)
 80012c8:	f008 fadf 	bl	800988a <HAL_I2CEx_ConfigDigitalFilter>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012d2:	f000 fadf 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000918 	.word	0x20000918
 80012e0:	40005400 	.word	0x40005400
 80012e4:	20303e5d 	.word	0x20303e5d

080012e8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <MX_I2C2_Init+0x74>)
 80012ee:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <MX_I2C2_Init+0x78>)
 80012f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80012f2:	4b1a      	ldr	r3, [pc, #104]	; (800135c <MX_I2C2_Init+0x74>)
 80012f4:	4a1b      	ldr	r2, [pc, #108]	; (8001364 <MX_I2C2_Init+0x7c>)
 80012f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80012f8:	4b18      	ldr	r3, [pc, #96]	; (800135c <MX_I2C2_Init+0x74>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012fe:	4b17      	ldr	r3, [pc, #92]	; (800135c <MX_I2C2_Init+0x74>)
 8001300:	2201      	movs	r2, #1
 8001302:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001304:	4b15      	ldr	r3, [pc, #84]	; (800135c <MX_I2C2_Init+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <MX_I2C2_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <MX_I2C2_Init+0x74>)
 8001312:	2200      	movs	r2, #0
 8001314:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_I2C2_Init+0x74>)
 8001318:	2200      	movs	r2, #0
 800131a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_I2C2_Init+0x74>)
 800131e:	2200      	movs	r2, #0
 8001320:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001322:	480e      	ldr	r0, [pc, #56]	; (800135c <MX_I2C2_Init+0x74>)
 8001324:	f007 fc06 	bl	8008b34 <HAL_I2C_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800132e:	f000 fab1 	bl	8001894 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001332:	2100      	movs	r1, #0
 8001334:	4809      	ldr	r0, [pc, #36]	; (800135c <MX_I2C2_Init+0x74>)
 8001336:	f008 fa5d 	bl	80097f4 <HAL_I2CEx_ConfigAnalogFilter>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001340:	f000 faa8 	bl	8001894 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001344:	2100      	movs	r1, #0
 8001346:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_I2C2_Init+0x74>)
 8001348:	f008 fa9f 	bl	800988a <HAL_I2CEx_ConfigDigitalFilter>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001352:	f000 fa9f 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	2000096c 	.word	0x2000096c
 8001360:	40005800 	.word	0x40005800
 8001364:	20303e5d 	.word	0x20303e5d

08001368 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b0b0      	sub	sp, #192	; 0xc0
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001380:	f107 0320 	add.w	r3, r7, #32
 8001384:	228c      	movs	r2, #140	; 0x8c
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f012 fbf9 	bl	8013b80 <memset>
  if(i2cHandle->Instance==I2C1)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a53      	ldr	r2, [pc, #332]	; (80014e0 <HAL_I2C_MspInit+0x178>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d13c      	bne.n	8001412 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001398:	2340      	movs	r3, #64	; 0x40
 800139a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800139c:	2300      	movs	r3, #0
 800139e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a0:	f107 0320 	add.w	r3, r7, #32
 80013a4:	4618      	mov	r0, r3
 80013a6:	f00a fc0f 	bl	800bbc8 <HAL_RCCEx_PeriphCLKConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80013b0:	f000 fa70 	bl	8001894 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b4:	4b4b      	ldr	r3, [pc, #300]	; (80014e4 <HAL_I2C_MspInit+0x17c>)
 80013b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b8:	4a4a      	ldr	r2, [pc, #296]	; (80014e4 <HAL_I2C_MspInit+0x17c>)
 80013ba:	f043 0302 	orr.w	r3, r3, #2
 80013be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c0:	4b48      	ldr	r3, [pc, #288]	; (80014e4 <HAL_I2C_MspInit+0x17c>)
 80013c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	61fb      	str	r3, [r7, #28]
 80013ca:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80013cc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80013d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d4:	2312      	movs	r3, #18
 80013d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013da:	2301      	movs	r3, #1
 80013dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e0:	2303      	movs	r3, #3
 80013e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013e6:	2304      	movs	r3, #4
 80013e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013f0:	4619      	mov	r1, r3
 80013f2:	483d      	ldr	r0, [pc, #244]	; (80014e8 <HAL_I2C_MspInit+0x180>)
 80013f4:	f007 f9da 	bl	80087ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013f8:	4b3a      	ldr	r3, [pc, #232]	; (80014e4 <HAL_I2C_MspInit+0x17c>)
 80013fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fc:	4a39      	ldr	r2, [pc, #228]	; (80014e4 <HAL_I2C_MspInit+0x17c>)
 80013fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001402:	6593      	str	r3, [r2, #88]	; 0x58
 8001404:	4b37      	ldr	r3, [pc, #220]	; (80014e4 <HAL_I2C_MspInit+0x17c>)
 8001406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800140c:	61bb      	str	r3, [r7, #24]
 800140e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001410:	e061      	b.n	80014d6 <HAL_I2C_MspInit+0x16e>
  else if(i2cHandle->Instance==I2C2)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a35      	ldr	r2, [pc, #212]	; (80014ec <HAL_I2C_MspInit+0x184>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d15c      	bne.n	80014d6 <HAL_I2C_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800141c:	2380      	movs	r3, #128	; 0x80
 800141e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001420:	2300      	movs	r3, #0
 8001422:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001424:	f107 0320 	add.w	r3, r7, #32
 8001428:	4618      	mov	r0, r3
 800142a:	f00a fbcd 	bl	800bbc8 <HAL_RCCEx_PeriphCLKConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001434:	f000 fa2e 	bl	8001894 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001438:	4b2a      	ldr	r3, [pc, #168]	; (80014e4 <HAL_I2C_MspInit+0x17c>)
 800143a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143c:	4a29      	ldr	r2, [pc, #164]	; (80014e4 <HAL_I2C_MspInit+0x17c>)
 800143e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001442:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001444:	4b27      	ldr	r3, [pc, #156]	; (80014e4 <HAL_I2C_MspInit+0x17c>)
 8001446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001450:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <HAL_I2C_MspInit+0x17c>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001454:	4a23      	ldr	r2, [pc, #140]	; (80014e4 <HAL_I2C_MspInit+0x17c>)
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145c:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <HAL_I2C_MspInit+0x17c>)
 800145e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8001468:	2310      	movs	r3, #16
 800146a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800146e:	2312      	movs	r3, #18
 8001470:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001474:	2301      	movs	r3, #1
 8001476:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001480:	2304      	movs	r3, #4
 8001482:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8001486:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800148a:	4619      	mov	r1, r3
 800148c:	4818      	ldr	r0, [pc, #96]	; (80014f0 <HAL_I2C_MspInit+0x188>)
 800148e:	f007 f98d 	bl	80087ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8001492:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001496:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800149a:	2312      	movs	r3, #18
 800149c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014ac:	2304      	movs	r3, #4
 80014ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 80014b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014b6:	4619      	mov	r1, r3
 80014b8:	480b      	ldr	r0, [pc, #44]	; (80014e8 <HAL_I2C_MspInit+0x180>)
 80014ba:	f007 f977 	bl	80087ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <HAL_I2C_MspInit+0x17c>)
 80014c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c2:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <HAL_I2C_MspInit+0x17c>)
 80014c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014c8:	6593      	str	r3, [r2, #88]	; 0x58
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_I2C_MspInit+0x17c>)
 80014cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
}
 80014d6:	bf00      	nop
 80014d8:	37c0      	adds	r7, #192	; 0xc0
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40005400 	.word	0x40005400
 80014e4:	40021000 	.word	0x40021000
 80014e8:	48000400 	.word	0x48000400
 80014ec:	40005800 	.word	0x40005800
 80014f0:	48001c00 	.word	0x48001c00

080014f4 <HAL_TIM_PeriodElapsedCallback>:
    }

    return Status;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

	if(htim == &htim6) {
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a05      	ldr	r2, [pc, #20]	; (8001514 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d103      	bne.n	800150c <HAL_TIM_PeriodElapsedCallback+0x18>
		// toggle ARD_D7
		// this should be 25 Hz, every 40 ms
		HAL_GPIO_TogglePin(ARD_D7_GPIO_Port, ARD_D7_Pin);
 8001504:	2140      	movs	r1, #64	; 0x40
 8001506:	4804      	ldr	r0, [pc, #16]	; (8001518 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001508:	f007 fafa 	bl	8008b00 <HAL_GPIO_TogglePin>
	}

}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000e60 	.word	0x20000e60
 8001518:	48001800 	.word	0x48001800

0800151c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b092      	sub	sp, #72	; 0x48
 8001520:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001522:	f005 fe2a 	bl	800717a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001526:	f000 f91d 	bl	8001764 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800152a:	f000 f97d 	bl	8001828 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800152e:	f7ff fd0d 	bl	8000f4c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001532:	f7ff f82f 	bl	8000594 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001536:	f7ff f8a3 	bl	8000680 <MX_ADC2_Init>
  MX_ADC3_Init();
 800153a:	f7ff f905 	bl	8000748 <MX_ADC3_Init>
  MX_DCMI_Init();
 800153e:	f7ff fa37 	bl	80009b0 <MX_DCMI_Init>
  MX_DFSDM1_Init();
 8001542:	f7ff fae9 	bl	8000b18 <MX_DFSDM1_Init>
  MX_FMC_Init();
 8001546:	f7ff fbdb 	bl	8000d00 <MX_FMC_Init>
  MX_I2C1_Init();
 800154a:	f7ff fe8d 	bl	8001268 <MX_I2C1_Init>
  MX_I2C2_Init();
 800154e:	f7ff fecb 	bl	80012e8 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8001552:	f000 fe87 	bl	8002264 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8001556:	f000 feb3 	bl	80022c0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800155a:	f000 fee1 	bl	8002320 <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 800155e:	f000 f99f 	bl	80018a0 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8001562:	f000 fa2b 	bl	80019bc <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8001566:	f000 fb4b 	bl	8001c00 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 800156a:	f000 fbdb 	bl	8001d24 <MX_SPI1_Init>
  MX_SPI2_Init();
 800156e:	f000 fc17 	bl	8001da0 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8001572:	f011 fcc3 	bl	8012efc <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 8001576:	f000 fe19 	bl	80021ac <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  // above: MX_SDMMC1_SD_Init(); has to be commented out to not be called

  // Start timer
  HAL_TIM_Base_Start_IT(&htim6);
 800157a:	4869      	ldr	r0, [pc, #420]	; (8001720 <main+0x204>)
 800157c:	f00c ff98 	bl	800e4b0 <HAL_TIM_Base_Start_IT>
  //ResetAndDetectSensor(1); // EK TODO: the parameter SetDisplay doesn't matter

  // EK test1
  HAL_StatusTypeDef status;
	uint8_t pData;
	status = HAL_I2C_Mem_Read(&hi2c1, 0x52, 0xC0, 1, &pData, 1, HAL_TIMEOUT);
 8001580:	2303      	movs	r3, #3
 8001582:	9302      	str	r3, [sp, #8]
 8001584:	2301      	movs	r3, #1
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	2301      	movs	r3, #1
 8001590:	22c0      	movs	r2, #192	; 0xc0
 8001592:	2152      	movs	r1, #82	; 0x52
 8001594:	4863      	ldr	r0, [pc, #396]	; (8001724 <main+0x208>)
 8001596:	f007 fd47 	bl	8009028 <HAL_I2C_Mem_Read>
 800159a:	4603      	mov	r3, r0
 800159c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	// pData should be 0xEE
	if(status == HAL_OK) {
 80015a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <main+0x92>
		printf("good");
 80015a8:	485f      	ldr	r0, [pc, #380]	; (8001728 <main+0x20c>)
 80015aa:	f012 fbd1 	bl	8013d50 <iprintf>
	}
	//--

  // EK test2
  VL53L0X_Dev_t *pDev;
	pDev = &VL53L0XDev;
 80015ae:	4b5f      	ldr	r3, [pc, #380]	; (800172c <main+0x210>)
 80015b0:	633b      	str	r3, [r7, #48]	; 0x30
	pDev->I2cDevAddr = 0x52;
 80015b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b4:	2252      	movs	r2, #82	; 0x52
 80015b6:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	pDev->Present = 0;
 80015ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015bc:	2200      	movs	r2, #0
 80015be:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

  int status2 = VL53L0X_DataInit(pDev);
 80015c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015c4:	f001 fa48 	bl	8002a58 <VL53L0X_DataInit>
 80015c8:	4603      	mov	r3, r0
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	if( status2 == 0 ){
 80015cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d104      	bne.n	80015dc <main+0xc0>
			pDev->Present = 1;
 80015d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015d4:	2201      	movs	r2, #1
 80015d6:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 80015da:	e002      	b.n	80015e2 <main+0xc6>
	}
	else{
			printf("VL53L0X_DataInit fail\n");
 80015dc:	4854      	ldr	r0, [pc, #336]	; (8001730 <main+0x214>)
 80015de:	f012 fc3d 	bl	8013e5c <puts>
	}
	printf("VL53L0X %d Present and initiated to final 0x%x\n", pDev->Id, pDev->I2cDevAddr);
 80015e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015e4:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
 80015e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ea:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80015ee:	461a      	mov	r2, r3
 80015f0:	4850      	ldr	r0, [pc, #320]	; (8001734 <main+0x218>)
 80015f2:	f012 fbad 	bl	8013d50 <iprintf>
	pDev->Present = 1;
 80015f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015f8:	2201      	movs	r2, #1
 80015fa:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	uint8_t isApertureSpads;
	VL53L0X_RangingMeasurementData_t RangingMeasurementData;
	//int range;

	// Initialize the device in continuous ranging mode
	VL53L0X_StaticInit(pDev);
 80015fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001600:	f001 fb8e 	bl	8002d20 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(pDev, &VhvSettings, &PhaseCal);
 8001604:	f107 0229 	add.w	r2, r7, #41	; 0x29
 8001608:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800160c:	4619      	mov	r1, r3
 800160e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001610:	f002 fa36 	bl	8003a80 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(pDev, &refSpadCount, &isApertureSpads);
 8001614:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8001618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161c:	4619      	mov	r1, r3
 800161e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001620:	f002 febc 	bl	800439c <VL53L0X_PerformRefSpadManagement>
	//VL53L0X_SetInterMeasurementPeriodMilliSeconds(pDev, 250); // Program continuous mode Inter-Measurement period in milliseconds
	//VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
	VL53L0X_SetInterMeasurementPeriodMilliSeconds(pDev, TIMED_RANGING_PERIOD);
 8001624:	2132      	movs	r1, #50	; 0x32
 8001626:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001628:	f001 ff74 	bl	8003514 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>
	VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING);
 800162c:	2103      	movs	r1, #3
 800162e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001630:	f001 fd88 	bl	8003144 <VL53L0X_SetDeviceMode>

	// Start continuous ranging
	VL53L0X_StartMeasurement(pDev);
 8001634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001636:	f002 fa9f 	bl	8003b78 <VL53L0X_StartMeasurement>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  	if(HAL_GetTick()-last_sample >= TIMED_RANGING_PERIOD) {
 800163a:	f005 fe07 	bl	800724c <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	4b3d      	ldr	r3, [pc, #244]	; (8001738 <main+0x21c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b31      	cmp	r3, #49	; 0x31
 8001648:	d9f7      	bls.n	800163a <main+0x11e>

			VL53L0X_GetRangingMeasurementData(pDev, &RangingMeasurementData);
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	4619      	mov	r1, r3
 800164e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001650:	f002 fb94 	bl	8003d7c <VL53L0X_GetRangingMeasurementData>
			range = RangingMeasurementData.RangeMilliMeter/10; // cm
 8001654:	89bb      	ldrh	r3, [r7, #12]
 8001656:	4a39      	ldr	r2, [pc, #228]	; (800173c <main+0x220>)
 8001658:	fba2 2303 	umull	r2, r3, r2, r3
 800165c:	08db      	lsrs	r3, r3, #3
 800165e:	b29a      	uxth	r2, r3
 8001660:	4b37      	ldr	r3, [pc, #220]	; (8001740 <main+0x224>)
 8001662:	801a      	strh	r2, [r3, #0]
			range_mm = RangingMeasurementData.RangeMilliMeter; // mm
 8001664:	89ba      	ldrh	r2, [r7, #12]
 8001666:	4b37      	ldr	r3, [pc, #220]	; (8001744 <main+0x228>)
 8001668:	801a      	strh	r2, [r3, #0]

			// check it's in range
			if(range_mm < 1000) {
 800166a:	4b36      	ldr	r3, [pc, #216]	; (8001744 <main+0x228>)
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001672:	d20e      	bcs.n	8001692 <main+0x176>
				range_mm_sum += range_mm;
 8001674:	4b33      	ldr	r3, [pc, #204]	; (8001744 <main+0x228>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	4b33      	ldr	r3, [pc, #204]	; (8001748 <main+0x22c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4413      	add	r3, r2
 8001680:	4a31      	ldr	r2, [pc, #196]	; (8001748 <main+0x22c>)
 8001682:	6013      	str	r3, [r2, #0]
				sum_count++;
 8001684:	4b31      	ldr	r3, [pc, #196]	; (800174c <main+0x230>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	3301      	adds	r3, #1
 800168a:	b2da      	uxtb	r2, r3
 800168c:	4b2f      	ldr	r3, [pc, #188]	; (800174c <main+0x230>)
 800168e:	701a      	strb	r2, [r3, #0]
 8001690:	e005      	b.n	800169e <main+0x182>
			} else {
				// to keep up with the timing
				sum_skip++;
 8001692:	4b2f      	ldr	r3, [pc, #188]	; (8001750 <main+0x234>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	3301      	adds	r3, #1
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4b2d      	ldr	r3, [pc, #180]	; (8001750 <main+0x234>)
 800169c:	701a      	strb	r2, [r3, #0]
			}

			if( (sum_count+sum_skip) >= 20) { // 20 because 1 sample / 50 ms = 20 samples / s (1000/50=20)
 800169e:	4b2b      	ldr	r3, [pc, #172]	; (800174c <main+0x230>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <main+0x234>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4413      	add	r3, r2
 80016aa:	2b13      	cmp	r3, #19
 80016ac:	dd32      	ble.n	8001714 <main+0x1f8>
				range_mm_avg = (float)range_mm_sum / (float)sum_count;
 80016ae:	4b26      	ldr	r3, [pc, #152]	; (8001748 <main+0x22c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	ee07 3a90 	vmov	s15, r3
 80016b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80016ba:	4b24      	ldr	r3, [pc, #144]	; (800174c <main+0x230>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ca:	4b22      	ldr	r3, [pc, #136]	; (8001754 <main+0x238>)
 80016cc:	edc3 7a00 	vstr	s15, [r3]

				sum_count = 0;
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <main+0x230>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
				sum_skip = 0;
 80016d6:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <main+0x234>)
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]
				range_mm_sum = 0;
 80016dc:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <main+0x22c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]

				if(sample_index < num_samples && sample_index < 120) {
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <main+0x23c>)
 80016e4:	881a      	ldrh	r2, [r3, #0]
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <main+0x240>)
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d212      	bcs.n	8001714 <main+0x1f8>
 80016ee:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <main+0x23c>)
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	2b77      	cmp	r3, #119	; 0x77
 80016f4:	d80e      	bhi.n	8001714 <main+0x1f8>
					all_samples[sample_index] = range_mm_avg;
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <main+0x23c>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	4b15      	ldr	r3, [pc, #84]	; (8001754 <main+0x238>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4917      	ldr	r1, [pc, #92]	; (8001760 <main+0x244>)
 8001702:	0083      	lsls	r3, r0, #2
 8001704:	440b      	add	r3, r1
 8001706:	601a      	str	r2, [r3, #0]
					sample_index++;
 8001708:	4b13      	ldr	r3, [pc, #76]	; (8001758 <main+0x23c>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	3301      	adds	r3, #1
 800170e:	b29a      	uxth	r2, r3
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <main+0x23c>)
 8001712:	801a      	strh	r2, [r3, #0]
					// TODO: process all samples
				}

			}

			last_sample = HAL_GetTick();
 8001714:	f005 fd9a 	bl	800724c <HAL_GetTick>
 8001718:	4603      	mov	r3, r0
 800171a:	4a07      	ldr	r2, [pc, #28]	; (8001738 <main+0x21c>)
 800171c:	6013      	str	r3, [r2, #0]
  	if(HAL_GetTick()-last_sample >= TIMED_RANGING_PERIOD) {
 800171e:	e78c      	b.n	800163a <main+0x11e>
 8001720:	20000e60 	.word	0x20000e60
 8001724:	20000918 	.word	0x20000918
 8001728:	08014c90 	.word	0x08014c90
 800172c:	20000000 	.word	0x20000000
 8001730:	08014c98 	.word	0x08014c98
 8001734:	08014c38 	.word	0x08014c38
 8001738:	200009d0 	.word	0x200009d0
 800173c:	cccccccd 	.word	0xcccccccd
 8001740:	200009c0 	.word	0x200009c0
 8001744:	200009c2 	.word	0x200009c2
 8001748:	200009c4 	.word	0x200009c4
 800174c:	200009c8 	.word	0x200009c8
 8001750:	200009c9 	.word	0x200009c9
 8001754:	200009cc 	.word	0x200009cc
 8001758:	20000bb4 	.word	0x20000bb4
 800175c:	20000190 	.word	0x20000190
 8001760:	200009d4 	.word	0x200009d4

08001764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b096      	sub	sp, #88	; 0x58
 8001768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	2244      	movs	r2, #68	; 0x44
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f012 fa04 	bl	8013b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001778:	463b      	mov	r3, r7
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001786:	f44f 7000 	mov.w	r0, #512	; 0x200
 800178a:	f009 faa7 	bl	800acdc <HAL_PWREx_ControlVoltageScaling>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001794:	f000 f87e 	bl	8001894 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001798:	f009 fa82 	bl	800aca0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800179c:	4b21      	ldr	r3, [pc, #132]	; (8001824 <SystemClock_Config+0xc0>)
 800179e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a2:	4a20      	ldr	r2, [pc, #128]	; (8001824 <SystemClock_Config+0xc0>)
 80017a4:	f023 0318 	bic.w	r3, r3, #24
 80017a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80017ac:	2314      	movs	r3, #20
 80017ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017b0:	2301      	movs	r3, #1
 80017b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017b4:	2301      	movs	r3, #1
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017bc:	2360      	movs	r3, #96	; 0x60
 80017be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c0:	2302      	movs	r3, #2
 80017c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80017c4:	2301      	movs	r3, #1
 80017c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017c8:	2301      	movs	r3, #1
 80017ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 80017cc:	2318      	movs	r3, #24
 80017ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017d0:	2302      	movs	r3, #2
 80017d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017d4:	2302      	movs	r3, #2
 80017d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017d8:	2302      	movs	r3, #2
 80017da:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	4618      	mov	r0, r3
 80017e2:	f009 fbb3 	bl	800af4c <HAL_RCC_OscConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80017ec:	f000 f852 	bl	8001894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f0:	230f      	movs	r3, #15
 80017f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f4:	2303      	movs	r3, #3
 80017f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001800:	2300      	movs	r3, #0
 8001802:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001804:	463b      	mov	r3, r7
 8001806:	2102      	movs	r1, #2
 8001808:	4618      	mov	r0, r3
 800180a:	f009 ffb9 	bl	800b780 <HAL_RCC_ClockConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001814:	f000 f83e 	bl	8001894 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001818:	f00b fa8a 	bl	800cd30 <HAL_RCCEx_EnableMSIPLLMode>
}
 800181c:	bf00      	nop
 800181e:	3758      	adds	r7, #88	; 0x58
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40021000 	.word	0x40021000

08001828 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b0a4      	sub	sp, #144	; 0x90
 800182c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	228c      	movs	r2, #140	; 0x8c
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f012 f9a3 	bl	8013b80 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB
 800183a:	4b14      	ldr	r3, [pc, #80]	; (800188c <PeriphCommonClock_Config+0x64>)
 800183c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800183e:	2300      	movs	r3, #0
 8001840:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001842:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001846:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800184a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800184e:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8001850:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001854:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001856:	2301      	movs	r3, #1
 8001858:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800185a:	2301      	movs	r3, #1
 800185c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800185e:	2318      	movs	r3, #24
 8001860:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001862:	2302      	movs	r3, #2
 8001864:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001866:	2302      	movs	r3, #2
 8001868:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800186a:	2302      	movs	r3, #2
 800186c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <PeriphCommonClock_Config+0x68>)
 8001870:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	4618      	mov	r0, r3
 8001876:	f00a f9a7 	bl	800bbc8 <HAL_RCCEx_PeriphCLKConfig>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001880:	f000 f808 	bl	8001894 <Error_Handler>
  }
}
 8001884:	bf00      	nop
 8001886:	3790      	adds	r7, #144	; 0x90
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	00086800 	.word	0x00086800
 8001890:	01110000 	.word	0x01110000

08001894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001898:	b672      	cpsid	i
}
 800189a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800189c:	e7fe      	b.n	800189c <Error_Handler+0x8>
	...

080018a0 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <MX_QUADSPI_Init+0x50>)
 80018a6:	4a13      	ldr	r2, [pc, #76]	; (80018f4 <MX_QUADSPI_Init+0x54>)
 80018a8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <MX_QUADSPI_Init+0x50>)
 80018ac:	2202      	movs	r2, #2
 80018ae:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <MX_QUADSPI_Init+0x50>)
 80018b2:	2204      	movs	r2, #4
 80018b4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <MX_QUADSPI_Init+0x50>)
 80018b8:	2210      	movs	r2, #16
 80018ba:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <MX_QUADSPI_Init+0x50>)
 80018be:	2217      	movs	r2, #23
 80018c0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <MX_QUADSPI_Init+0x50>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <MX_QUADSPI_Init+0x50>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <MX_QUADSPI_Init+0x50>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <MX_QUADSPI_Init+0x50>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80018da:	4805      	ldr	r0, [pc, #20]	; (80018f0 <MX_QUADSPI_Init+0x50>)
 80018dc:	f009 fa74 	bl	800adc8 <HAL_QSPI_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80018e6:	f7ff ffd5 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000bb8 	.word	0x20000bb8
 80018f4:	a0001000 	.word	0xa0001000

080018f8 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a26      	ldr	r2, [pc, #152]	; (80019b0 <HAL_QSPI_MspInit+0xb8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d145      	bne.n	80019a6 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800191a:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <HAL_QSPI_MspInit+0xbc>)
 800191c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800191e:	4a25      	ldr	r2, [pc, #148]	; (80019b4 <HAL_QSPI_MspInit+0xbc>)
 8001920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001924:	6513      	str	r3, [r2, #80]	; 0x50
 8001926:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <HAL_QSPI_MspInit+0xbc>)
 8001928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800192a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001932:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <HAL_QSPI_MspInit+0xbc>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	4a1f      	ldr	r2, [pc, #124]	; (80019b4 <HAL_QSPI_MspInit+0xbc>)
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193e:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <HAL_QSPI_MspInit+0xbc>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194a:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <HAL_QSPI_MspInit+0xbc>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	4a19      	ldr	r2, [pc, #100]	; (80019b4 <HAL_QSPI_MspInit+0xbc>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001956:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <HAL_QSPI_MspInit+0xbc>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001962:	f640 0303 	movw	r3, #2051	; 0x803
 8001966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001968:	2302      	movs	r3, #2
 800196a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001970:	2303      	movs	r3, #3
 8001972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001974:	230a      	movs	r3, #10
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	4619      	mov	r1, r3
 800197e:	480e      	ldr	r0, [pc, #56]	; (80019b8 <HAL_QSPI_MspInit+0xc0>)
 8001980:	f006 ff14 	bl	80087ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8001984:	23c8      	movs	r3, #200	; 0xc8
 8001986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001994:	230a      	movs	r3, #10
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a2:	f006 ff03 	bl	80087ac <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80019a6:	bf00      	nop
 80019a8:	3728      	adds	r7, #40	; 0x28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	a0001000 	.word	0xa0001000
 80019b4:	40021000 	.word	0x40021000
 80019b8:	48000400 	.word	0x48000400

080019bc <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80019c0:	4b4d      	ldr	r3, [pc, #308]	; (8001af8 <MX_SAI1_Init+0x13c>)
 80019c2:	4a4e      	ldr	r2, [pc, #312]	; (8001afc <MX_SAI1_Init+0x140>)
 80019c4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80019c6:	4b4c      	ldr	r3, [pc, #304]	; (8001af8 <MX_SAI1_Init+0x13c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80019cc:	4b4a      	ldr	r3, [pc, #296]	; (8001af8 <MX_SAI1_Init+0x13c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 80019d2:	4b49      	ldr	r3, [pc, #292]	; (8001af8 <MX_SAI1_Init+0x13c>)
 80019d4:	2240      	movs	r2, #64	; 0x40
 80019d6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80019d8:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <MX_SAI1_Init+0x13c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80019de:	4b46      	ldr	r3, [pc, #280]	; (8001af8 <MX_SAI1_Init+0x13c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80019e4:	4b44      	ldr	r3, [pc, #272]	; (8001af8 <MX_SAI1_Init+0x13c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80019ea:	4b43      	ldr	r3, [pc, #268]	; (8001af8 <MX_SAI1_Init+0x13c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80019f0:	4b41      	ldr	r3, [pc, #260]	; (8001af8 <MX_SAI1_Init+0x13c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80019f6:	4b40      	ldr	r3, [pc, #256]	; (8001af8 <MX_SAI1_Init+0x13c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80019fc:	4b3e      	ldr	r3, [pc, #248]	; (8001af8 <MX_SAI1_Init+0x13c>)
 80019fe:	4a40      	ldr	r2, [pc, #256]	; (8001b00 <MX_SAI1_Init+0x144>)
 8001a00:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001a02:	4b3d      	ldr	r3, [pc, #244]	; (8001af8 <MX_SAI1_Init+0x13c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001a08:	4b3b      	ldr	r3, [pc, #236]	; (8001af8 <MX_SAI1_Init+0x13c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001a0e:	4b3a      	ldr	r3, [pc, #232]	; (8001af8 <MX_SAI1_Init+0x13c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001a14:	4b38      	ldr	r3, [pc, #224]	; (8001af8 <MX_SAI1_Init+0x13c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001a1a:	4b37      	ldr	r3, [pc, #220]	; (8001af8 <MX_SAI1_Init+0x13c>)
 8001a1c:	2208      	movs	r2, #8
 8001a1e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001a20:	4b35      	ldr	r3, [pc, #212]	; (8001af8 <MX_SAI1_Init+0x13c>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001a26:	4b34      	ldr	r3, [pc, #208]	; (8001af8 <MX_SAI1_Init+0x13c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001a2c:	4b32      	ldr	r3, [pc, #200]	; (8001af8 <MX_SAI1_Init+0x13c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001a32:	4b31      	ldr	r3, [pc, #196]	; (8001af8 <MX_SAI1_Init+0x13c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001a38:	4b2f      	ldr	r3, [pc, #188]	; (8001af8 <MX_SAI1_Init+0x13c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001a3e:	4b2e      	ldr	r3, [pc, #184]	; (8001af8 <MX_SAI1_Init+0x13c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001a44:	4b2c      	ldr	r3, [pc, #176]	; (8001af8 <MX_SAI1_Init+0x13c>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001a4a:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <MX_SAI1_Init+0x13c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001a50:	4829      	ldr	r0, [pc, #164]	; (8001af8 <MX_SAI1_Init+0x13c>)
 8001a52:	f00b fc4d 	bl	800d2f0 <HAL_SAI_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8001a5c:	f7ff ff1a 	bl	8001894 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8001a60:	4b28      	ldr	r3, [pc, #160]	; (8001b04 <MX_SAI1_Init+0x148>)
 8001a62:	4a29      	ldr	r2, [pc, #164]	; (8001b08 <MX_SAI1_Init+0x14c>)
 8001a64:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001a66:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <MX_SAI1_Init+0x148>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001a6c:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <MX_SAI1_Init+0x148>)
 8001a6e:	2203      	movs	r2, #3
 8001a70:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8001a72:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <MX_SAI1_Init+0x148>)
 8001a74:	2240      	movs	r2, #64	; 0x40
 8001a76:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001a78:	4b22      	ldr	r3, [pc, #136]	; (8001b04 <MX_SAI1_Init+0x148>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001a7e:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <MX_SAI1_Init+0x148>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001a84:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <MX_SAI1_Init+0x148>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001a8a:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <MX_SAI1_Init+0x148>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001a90:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <MX_SAI1_Init+0x148>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001a96:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <MX_SAI1_Init+0x148>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <MX_SAI1_Init+0x148>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001aa2:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <MX_SAI1_Init+0x148>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001aa8:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <MX_SAI1_Init+0x148>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <MX_SAI1_Init+0x148>)
 8001ab0:	2208      	movs	r2, #8
 8001ab2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001ab4:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <MX_SAI1_Init+0x148>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001aba:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <MX_SAI1_Init+0x148>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001ac0:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <MX_SAI1_Init+0x148>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <MX_SAI1_Init+0x148>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001acc:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <MX_SAI1_Init+0x148>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <MX_SAI1_Init+0x148>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <MX_SAI1_Init+0x148>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <MX_SAI1_Init+0x148>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001ae4:	4807      	ldr	r0, [pc, #28]	; (8001b04 <MX_SAI1_Init+0x148>)
 8001ae6:	f00b fc03 	bl	800d2f0 <HAL_SAI_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8001af0:	f7ff fed0 	bl	8001894 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000c04 	.word	0x20000c04
 8001afc:	40015404 	.word	0x40015404
 8001b00:	0002ee00 	.word	0x0002ee00
 8001b04:	20000c88 	.word	0x20000c88
 8001b08:	40015424 	.word	0x40015424

08001b0c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	; 0x28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a33      	ldr	r2, [pc, #204]	; (8001be8 <HAL_SAI_MspInit+0xdc>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d135      	bne.n	8001b8a <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8001b1e:	4b33      	ldr	r3, [pc, #204]	; (8001bec <HAL_SAI_MspInit+0xe0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10b      	bne.n	8001b3e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001b26:	4b32      	ldr	r3, [pc, #200]	; (8001bf0 <HAL_SAI_MspInit+0xe4>)
 8001b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b2a:	4a31      	ldr	r2, [pc, #196]	; (8001bf0 <HAL_SAI_MspInit+0xe4>)
 8001b2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b30:	6613      	str	r3, [r2, #96]	; 0x60
 8001b32:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <HAL_SAI_MspInit+0xe4>)
 8001b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001b3e:	4b2b      	ldr	r3, [pc, #172]	; (8001bec <HAL_SAI_MspInit+0xe0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	3301      	adds	r3, #1
 8001b44:	4a29      	ldr	r2, [pc, #164]	; (8001bec <HAL_SAI_MspInit+0xe0>)
 8001b46:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 8001b48:	2354      	movs	r3, #84	; 0x54
 8001b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001b58:	230d      	movs	r3, #13
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	4619      	mov	r1, r3
 8001b62:	4824      	ldr	r0, [pc, #144]	; (8001bf4 <HAL_SAI_MspInit+0xe8>)
 8001b64:	f006 fe22 	bl	80087ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001b7a:	230d      	movs	r3, #13
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	481c      	ldr	r0, [pc, #112]	; (8001bf8 <HAL_SAI_MspInit+0xec>)
 8001b86:	f006 fe11 	bl	80087ac <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI1_Block_B)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a1b      	ldr	r2, [pc, #108]	; (8001bfc <HAL_SAI_MspInit+0xf0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d124      	bne.n	8001bde <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8001b94:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_SAI_MspInit+0xe0>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d10b      	bne.n	8001bb4 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001b9c:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <HAL_SAI_MspInit+0xe4>)
 8001b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba0:	4a13      	ldr	r2, [pc, #76]	; (8001bf0 <HAL_SAI_MspInit+0xe4>)
 8001ba2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ba6:	6613      	str	r3, [r2, #96]	; 0x60
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <HAL_SAI_MspInit+0xe4>)
 8001baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001bb4:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <HAL_SAI_MspInit+0xe0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	4a0c      	ldr	r2, [pc, #48]	; (8001bec <HAL_SAI_MspInit+0xe0>)
 8001bbc:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001bce:	230d      	movs	r3, #13
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4806      	ldr	r0, [pc, #24]	; (8001bf4 <HAL_SAI_MspInit+0xe8>)
 8001bda:	f006 fde7 	bl	80087ac <HAL_GPIO_Init>

    }
}
 8001bde:	bf00      	nop
 8001be0:	3728      	adds	r7, #40	; 0x28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40015404 	.word	0x40015404
 8001bec:	20000d0c 	.word	0x20000d0c
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	48001000 	.word	0x48001000
 8001bf8:	48000400 	.word	0x48000400
 8001bfc:	40015424 	.word	0x40015424

08001c00 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <MX_SDMMC1_SD_Init+0x58>)
 8001c06:	4a15      	ldr	r2, [pc, #84]	; (8001c5c <MX_SDMMC1_SD_Init+0x5c>)
 8001c08:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <MX_SDMMC1_SD_Init+0x58>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <MX_SDMMC1_SD_Init+0x58>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <MX_SDMMC1_SD_Init+0x58>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <MX_SDMMC1_SD_Init+0x58>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001c22:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <MX_SDMMC1_SD_Init+0x58>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <MX_SDMMC1_SD_Init+0x58>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001c2e:	480a      	ldr	r0, [pc, #40]	; (8001c58 <MX_SDMMC1_SD_Init+0x58>)
 8001c30:	f00b fd0a 	bl	800d648 <HAL_SD_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8001c3a:	f7ff fe2b 	bl	8001894 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8001c3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c42:	4805      	ldr	r0, [pc, #20]	; (8001c58 <MX_SDMMC1_SD_Init+0x58>)
 8001c44:	f00b ff7a 	bl	800db3c <HAL_SD_ConfigWideBusOperation>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8001c4e:	f7ff fe21 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000d10 	.word	0x20000d10
 8001c5c:	40012800 	.word	0x40012800

08001c60 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	; 0x28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a25      	ldr	r2, [pc, #148]	; (8001d14 <HAL_SD_MspInit+0xb4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d144      	bne.n	8001d0c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001c82:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <HAL_SD_MspInit+0xb8>)
 8001c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c86:	4a24      	ldr	r2, [pc, #144]	; (8001d18 <HAL_SD_MspInit+0xb8>)
 8001c88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c8c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c8e:	4b22      	ldr	r3, [pc, #136]	; (8001d18 <HAL_SD_MspInit+0xb8>)
 8001c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c9a:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <HAL_SD_MspInit+0xb8>)
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9e:	4a1e      	ldr	r2, [pc, #120]	; (8001d18 <HAL_SD_MspInit+0xb8>)
 8001ca0:	f043 0308 	orr.w	r3, r3, #8
 8001ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ca6:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <HAL_SD_MspInit+0xb8>)
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb2:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <HAL_SD_MspInit+0xb8>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb6:	4a18      	ldr	r2, [pc, #96]	; (8001d18 <HAL_SD_MspInit+0xb8>)
 8001cb8:	f043 0304 	orr.w	r3, r3, #4
 8001cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cbe:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <HAL_SD_MspInit+0xb8>)
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001cca:	2304      	movs	r3, #4
 8001ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001cda:	230c      	movs	r3, #12
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001cde:	f107 0314 	add.w	r3, r7, #20
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	480d      	ldr	r0, [pc, #52]	; (8001d1c <HAL_SD_MspInit+0xbc>)
 8001ce6:	f006 fd61 	bl	80087ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 8001cea:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001cee:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001cfc:	230c      	movs	r3, #12
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	4619      	mov	r1, r3
 8001d06:	4806      	ldr	r0, [pc, #24]	; (8001d20 <HAL_SD_MspInit+0xc0>)
 8001d08:	f006 fd50 	bl	80087ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	3728      	adds	r7, #40	; 0x28
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40012800 	.word	0x40012800
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	48000c00 	.word	0x48000c00
 8001d20:	48000800 	.word	0x48000800

08001d24 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d28:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d2a:	4a1c      	ldr	r2, [pc, #112]	; (8001d9c <MX_SPI1_Init+0x78>)
 8001d2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d36:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001d3c:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d3e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001d42:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d44:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d4a:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d52:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001d56:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d72:	2207      	movs	r2, #7
 8001d74:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d76:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d7e:	2208      	movs	r2, #8
 8001d80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d82:	4805      	ldr	r0, [pc, #20]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d84:	f00c fa52 	bl	800e22c <HAL_SPI_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d8e:	f7ff fd81 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000d94 	.word	0x20000d94
 8001d9c:	40013000 	.word	0x40013000

08001da0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001da4:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <MX_SPI2_Init+0x74>)
 8001da6:	4a1c      	ldr	r2, [pc, #112]	; (8001e18 <MX_SPI2_Init+0x78>)
 8001da8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001daa:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <MX_SPI2_Init+0x74>)
 8001dac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001db0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001db2:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <MX_SPI2_Init+0x74>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001db8:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <MX_SPI2_Init+0x74>)
 8001dba:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001dbe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dc0:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <MX_SPI2_Init+0x74>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <MX_SPI2_Init+0x74>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <MX_SPI2_Init+0x74>)
 8001dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <MX_SPI2_Init+0x74>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <MX_SPI2_Init+0x74>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <MX_SPI2_Init+0x74>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <MX_SPI2_Init+0x74>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <MX_SPI2_Init+0x74>)
 8001dee:	2207      	movs	r2, #7
 8001df0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001df2:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <MX_SPI2_Init+0x74>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <MX_SPI2_Init+0x74>)
 8001dfa:	2208      	movs	r2, #8
 8001dfc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001dfe:	4805      	ldr	r0, [pc, #20]	; (8001e14 <MX_SPI2_Init+0x74>)
 8001e00:	f00c fa14 	bl	800e22c <HAL_SPI_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001e0a:	f7ff fd43 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000df8 	.word	0x20000df8
 8001e18:	40003800 	.word	0x40003800

08001e1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08e      	sub	sp, #56	; 0x38
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a4b      	ldr	r2, [pc, #300]	; (8001f68 <HAL_SPI_MspInit+0x14c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d146      	bne.n	8001ecc <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e3e:	4b4b      	ldr	r3, [pc, #300]	; (8001f6c <HAL_SPI_MspInit+0x150>)
 8001e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e42:	4a4a      	ldr	r2, [pc, #296]	; (8001f6c <HAL_SPI_MspInit+0x150>)
 8001e44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e48:	6613      	str	r3, [r2, #96]	; 0x60
 8001e4a:	4b48      	ldr	r3, [pc, #288]	; (8001f6c <HAL_SPI_MspInit+0x150>)
 8001e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e52:	623b      	str	r3, [r7, #32]
 8001e54:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e56:	4b45      	ldr	r3, [pc, #276]	; (8001f6c <HAL_SPI_MspInit+0x150>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5a:	4a44      	ldr	r2, [pc, #272]	; (8001f6c <HAL_SPI_MspInit+0x150>)
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e62:	4b42      	ldr	r3, [pc, #264]	; (8001f6c <HAL_SPI_MspInit+0x150>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	4b3f      	ldr	r3, [pc, #252]	; (8001f6c <HAL_SPI_MspInit+0x150>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e72:	4a3e      	ldr	r2, [pc, #248]	; (8001f6c <HAL_SPI_MspInit+0x150>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e7a:	4b3c      	ldr	r3, [pc, #240]	; (8001f6c <HAL_SPI_MspInit+0x150>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	61bb      	str	r3, [r7, #24]
 8001e84:	69bb      	ldr	r3, [r7, #24]
    PB4 (NJTRST)     ------> SPI1_MISO
    PA15 (JTDI)     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001e86:	2330      	movs	r3, #48	; 0x30
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e92:	2303      	movs	r3, #3
 8001e94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e96:	2305      	movs	r3, #5
 8001e98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4833      	ldr	r0, [pc, #204]	; (8001f70 <HAL_SPI_MspInit+0x154>)
 8001ea2:	f006 fc83 	bl	80087ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 8001ea6:	f248 0320 	movw	r3, #32800	; 0x8020
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eac:	2302      	movs	r3, #2
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eb8:	2305      	movs	r3, #5
 8001eba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec6:	f006 fc71 	bl	80087ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001eca:	e049      	b.n	8001f60 <HAL_SPI_MspInit+0x144>
  else if(spiHandle->Instance==SPI2)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a28      	ldr	r2, [pc, #160]	; (8001f74 <HAL_SPI_MspInit+0x158>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d144      	bne.n	8001f60 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ed6:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <HAL_SPI_MspInit+0x150>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	4a24      	ldr	r2, [pc, #144]	; (8001f6c <HAL_SPI_MspInit+0x150>)
 8001edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee2:	4b22      	ldr	r3, [pc, #136]	; (8001f6c <HAL_SPI_MspInit+0x150>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001eee:	4b1f      	ldr	r3, [pc, #124]	; (8001f6c <HAL_SPI_MspInit+0x150>)
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef2:	4a1e      	ldr	r2, [pc, #120]	; (8001f6c <HAL_SPI_MspInit+0x150>)
 8001ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001efa:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <HAL_SPI_MspInit+0x150>)
 8001efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f06:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <HAL_SPI_MspInit+0x150>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0a:	4a18      	ldr	r2, [pc, #96]	; (8001f6c <HAL_SPI_MspInit+0x150>)
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f12:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <HAL_SPI_MspInit+0x150>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 8001f1e:	2306      	movs	r3, #6
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f2e:	2305      	movs	r3, #5
 8001f30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f36:	4619      	mov	r1, r3
 8001f38:	480f      	ldr	r0, [pc, #60]	; (8001f78 <HAL_SPI_MspInit+0x15c>)
 8001f3a:	f006 fc37 	bl	80087ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8001f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f50:	2305      	movs	r3, #5
 8001f52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4805      	ldr	r0, [pc, #20]	; (8001f70 <HAL_SPI_MspInit+0x154>)
 8001f5c:	f006 fc26 	bl	80087ac <HAL_GPIO_Init>
}
 8001f60:	bf00      	nop
 8001f62:	3738      	adds	r7, #56	; 0x38
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40013000 	.word	0x40013000
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	48000400 	.word	0x48000400
 8001f74:	40003800 	.word	0x40003800
 8001f78:	48002000 	.word	0x48002000

08001f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f82:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <HAL_MspInit+0x44>)
 8001f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f86:	4a0e      	ldr	r2, [pc, #56]	; (8001fc0 <HAL_MspInit+0x44>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <HAL_MspInit+0x44>)
 8001f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <HAL_MspInit+0x44>)
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9e:	4a08      	ldr	r2, [pc, #32]	; (8001fc0 <HAL_MspInit+0x44>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	6593      	str	r3, [r2, #88]	; 0x58
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_MspInit+0x44>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40021000 	.word	0x40021000

08001fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <NMI_Handler+0x4>

08001fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fce:	e7fe      	b.n	8001fce <HardFault_Handler+0x4>

08001fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <MemManage_Handler+0x4>

08001fd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fda:	e7fe      	b.n	8001fda <BusFault_Handler+0x4>

08001fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe0:	e7fe      	b.n	8001fe0 <UsageFault_Handler+0x4>

08001fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002010:	f005 f908 	bl	8007224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}

08002018 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800201c:	4802      	ldr	r0, [pc, #8]	; (8002028 <TIM6_DAC_IRQHandler+0x10>)
 800201e:	f00c fab7 	bl	800e590 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000e60 	.word	0x20000e60

0800202c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002030:	4802      	ldr	r0, [pc, #8]	; (800203c <OTG_FS_IRQHandler+0x10>)
 8002032:	f007 fdc9 	bl	8009bc8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20002574 	.word	0x20002574

08002040 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	e00a      	b.n	8002068 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002052:	f3af 8000 	nop.w
 8002056:	4601      	mov	r1, r0
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	60ba      	str	r2, [r7, #8]
 800205e:	b2ca      	uxtb	r2, r1
 8002060:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	3301      	adds	r3, #1
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	429a      	cmp	r2, r3
 800206e:	dbf0      	blt.n	8002052 <_read+0x12>
	}

return len;
 8002070:	687b      	ldr	r3, [r7, #4]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b086      	sub	sp, #24
 800207e:	af00      	add	r7, sp, #0
 8002080:	60f8      	str	r0, [r7, #12]
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	e009      	b.n	80020a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	60ba      	str	r2, [r7, #8]
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	3301      	adds	r3, #1
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	dbf1      	blt.n	800208c <_write+0x12>
	}
	return len;
 80020a8:	687b      	ldr	r3, [r7, #4]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <_close>:

int _close(int file)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
	return -1;
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020da:	605a      	str	r2, [r3, #4]
	return 0;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <_isatty>:

int _isatty(int file)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
	return 1;
 80020f2:	2301      	movs	r3, #1
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
	return 0;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002124:	4a14      	ldr	r2, [pc, #80]	; (8002178 <_sbrk+0x5c>)
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <_sbrk+0x60>)
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002130:	4b13      	ldr	r3, [pc, #76]	; (8002180 <_sbrk+0x64>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d102      	bne.n	800213e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <_sbrk+0x64>)
 800213a:	4a12      	ldr	r2, [pc, #72]	; (8002184 <_sbrk+0x68>)
 800213c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	429a      	cmp	r2, r3
 800214a:	d207      	bcs.n	800215c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800214c:	f011 fce0 	bl	8013b10 <__errno>
 8002150:	4603      	mov	r3, r0
 8002152:	220c      	movs	r2, #12
 8002154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800215a:	e009      	b.n	8002170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800215c:	4b08      	ldr	r3, [pc, #32]	; (8002180 <_sbrk+0x64>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002162:	4b07      	ldr	r3, [pc, #28]	; (8002180 <_sbrk+0x64>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	4a05      	ldr	r2, [pc, #20]	; (8002180 <_sbrk+0x64>)
 800216c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800216e:	68fb      	ldr	r3, [r7, #12]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20050000 	.word	0x20050000
 800217c:	00000400 	.word	0x00000400
 8002180:	20000e5c 	.word	0x20000e5c
 8002184:	20002cb0 	.word	0x20002cb0

08002188 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <SystemInit+0x20>)
 800218e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002192:	4a05      	ldr	r2, [pc, #20]	; (80021a8 <SystemInit+0x20>)
 8002194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80021bc:	4b14      	ldr	r3, [pc, #80]	; (8002210 <MX_TIM6_Init+0x64>)
 80021be:	4a15      	ldr	r2, [pc, #84]	; (8002214 <MX_TIM6_Init+0x68>)
 80021c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100-1;
 80021c2:	4b13      	ldr	r3, [pc, #76]	; (8002210 <MX_TIM6_Init+0x64>)
 80021c4:	2263      	movs	r2, #99	; 0x63
 80021c6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <MX_TIM6_Init+0x64>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19200-1;
 80021ce:	4b10      	ldr	r3, [pc, #64]	; (8002210 <MX_TIM6_Init+0x64>)
 80021d0:	f644 22ff 	movw	r2, #19199	; 0x4aff
 80021d4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d6:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <MX_TIM6_Init+0x64>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80021dc:	480c      	ldr	r0, [pc, #48]	; (8002210 <MX_TIM6_Init+0x64>)
 80021de:	f00c f910 	bl	800e402 <HAL_TIM_Base_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80021e8:	f7ff fb54 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ec:	2300      	movs	r3, #0
 80021ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80021f4:	1d3b      	adds	r3, r7, #4
 80021f6:	4619      	mov	r1, r3
 80021f8:	4805      	ldr	r0, [pc, #20]	; (8002210 <MX_TIM6_Init+0x64>)
 80021fa:	f00c fbab 	bl	800e954 <HAL_TIMEx_MasterConfigSynchronization>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002204:	f7ff fb46 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002208:	bf00      	nop
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000e60 	.word	0x20000e60
 8002214:	40001000 	.word	0x40001000

08002218 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a0d      	ldr	r2, [pc, #52]	; (800225c <HAL_TIM_Base_MspInit+0x44>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d113      	bne.n	8002252 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800222a:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <HAL_TIM_Base_MspInit+0x48>)
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	4a0c      	ldr	r2, [pc, #48]	; (8002260 <HAL_TIM_Base_MspInit+0x48>)
 8002230:	f043 0310 	orr.w	r3, r3, #16
 8002234:	6593      	str	r3, [r2, #88]	; 0x58
 8002236:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <HAL_TIM_Base_MspInit+0x48>)
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2100      	movs	r1, #0
 8002246:	2036      	movs	r0, #54	; 0x36
 8002248:	f006 f8e7 	bl	800841a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800224c:	2036      	movs	r0, #54	; 0x36
 800224e:	f006 f900 	bl	8008452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40001000 	.word	0x40001000
 8002260:	40021000 	.word	0x40021000

08002264 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <MX_LPUART1_UART_Init+0x50>)
 800226a:	4a13      	ldr	r2, [pc, #76]	; (80022b8 <MX_LPUART1_UART_Init+0x54>)
 800226c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800226e:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <MX_LPUART1_UART_Init+0x50>)
 8002270:	4a12      	ldr	r2, [pc, #72]	; (80022bc <MX_LPUART1_UART_Init+0x58>)
 8002272:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8002274:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <MX_LPUART1_UART_Init+0x50>)
 8002276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800227a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800227c:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <MX_LPUART1_UART_Init+0x50>)
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002282:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <MX_LPUART1_UART_Init+0x50>)
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002288:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <MX_LPUART1_UART_Init+0x50>)
 800228a:	220c      	movs	r2, #12
 800228c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <MX_LPUART1_UART_Init+0x50>)
 8002290:	2200      	movs	r2, #0
 8002292:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002294:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <MX_LPUART1_UART_Init+0x50>)
 8002296:	2200      	movs	r2, #0
 8002298:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <MX_LPUART1_UART_Init+0x50>)
 800229c:	2200      	movs	r2, #0
 800229e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80022a0:	4804      	ldr	r0, [pc, #16]	; (80022b4 <MX_LPUART1_UART_Init+0x50>)
 80022a2:	f00c fbfd 	bl	800eaa0 <HAL_UART_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80022ac:	f7ff faf2 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80022b0:	bf00      	nop
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20000eac 	.word	0x20000eac
 80022b8:	40008000 	.word	0x40008000
 80022bc:	00033324 	.word	0x00033324

080022c0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022c4:	4b14      	ldr	r3, [pc, #80]	; (8002318 <MX_USART1_UART_Init+0x58>)
 80022c6:	4a15      	ldr	r2, [pc, #84]	; (800231c <MX_USART1_UART_Init+0x5c>)
 80022c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022ca:	4b13      	ldr	r3, [pc, #76]	; (8002318 <MX_USART1_UART_Init+0x58>)
 80022cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <MX_USART1_UART_Init+0x58>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <MX_USART1_UART_Init+0x58>)
 80022da:	2200      	movs	r2, #0
 80022dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <MX_USART1_UART_Init+0x58>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <MX_USART1_UART_Init+0x58>)
 80022e6:	220c      	movs	r2, #12
 80022e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80022ea:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <MX_USART1_UART_Init+0x58>)
 80022ec:	f44f 7240 	mov.w	r2, #768	; 0x300
 80022f0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <MX_USART1_UART_Init+0x58>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022f8:	4b07      	ldr	r3, [pc, #28]	; (8002318 <MX_USART1_UART_Init+0x58>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <MX_USART1_UART_Init+0x58>)
 8002300:	2200      	movs	r2, #0
 8002302:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002304:	4804      	ldr	r0, [pc, #16]	; (8002318 <MX_USART1_UART_Init+0x58>)
 8002306:	f00c fbcb 	bl	800eaa0 <HAL_UART_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8002310:	f7ff fac0 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002314:	bf00      	nop
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000f30 	.word	0x20000f30
 800231c:	40013800 	.word	0x40013800

08002320 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002326:	4a15      	ldr	r2, [pc, #84]	; (800237c <MX_USART2_UART_Init+0x5c>)
 8002328:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <MX_USART2_UART_Init+0x58>)
 800232c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002330:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002332:	4b11      	ldr	r3, [pc, #68]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <MX_USART2_UART_Init+0x58>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002346:	220c      	movs	r2, #12
 8002348:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234a:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <MX_USART2_UART_Init+0x58>)
 800234c:	2200      	movs	r2, #0
 800234e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002350:	4b09      	ldr	r3, [pc, #36]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002352:	2200      	movs	r2, #0
 8002354:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002358:	2200      	movs	r2, #0
 800235a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <MX_USART2_UART_Init+0x58>)
 800235e:	2200      	movs	r2, #0
 8002360:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002362:	4805      	ldr	r0, [pc, #20]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002364:	f00c fb9c 	bl	800eaa0 <HAL_UART_Init>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800236e:	f7ff fa91 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000fb4 	.word	0x20000fb4
 800237c:	40004400 	.word	0x40004400

08002380 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b0b2      	sub	sp, #200	; 0xc8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002398:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800239c:	228c      	movs	r2, #140	; 0x8c
 800239e:	2100      	movs	r1, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f011 fbed 	bl	8013b80 <memset>
  if(uartHandle->Instance==LPUART1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a86      	ldr	r2, [pc, #536]	; (80025c4 <HAL_UART_MspInit+0x244>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d13e      	bne.n	800242e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80023b0:	2320      	movs	r3, #32
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80023b4:	2300      	movs	r3, #0
 80023b6:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023bc:	4618      	mov	r0, r3
 80023be:	f009 fc03 	bl	800bbc8 <HAL_RCCEx_PeriphCLKConfig>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023c8:	f7ff fa64 	bl	8001894 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80023cc:	4b7e      	ldr	r3, [pc, #504]	; (80025c8 <HAL_UART_MspInit+0x248>)
 80023ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d0:	4a7d      	ldr	r2, [pc, #500]	; (80025c8 <HAL_UART_MspInit+0x248>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80023d8:	4b7b      	ldr	r3, [pc, #492]	; (80025c8 <HAL_UART_MspInit+0x248>)
 80023da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023e4:	4b78      	ldr	r3, [pc, #480]	; (80025c8 <HAL_UART_MspInit+0x248>)
 80023e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e8:	4a77      	ldr	r2, [pc, #476]	; (80025c8 <HAL_UART_MspInit+0x248>)
 80023ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023f0:	4b75      	ldr	r3, [pc, #468]	; (80025c8 <HAL_UART_MspInit+0x248>)
 80023f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f8:	623b      	str	r3, [r7, #32]
 80023fa:	6a3b      	ldr	r3, [r7, #32]
    HAL_PWREx_EnableVddIO2();
 80023fc:	f008 fcd4 	bl	800ada8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8002400:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002404:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002408:	2302      	movs	r3, #2
 800240a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002414:	2303      	movs	r3, #3
 8002416:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800241a:	2308      	movs	r3, #8
 800241c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002420:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002424:	4619      	mov	r1, r3
 8002426:	4869      	ldr	r0, [pc, #420]	; (80025cc <HAL_UART_MspInit+0x24c>)
 8002428:	f006 f9c0 	bl	80087ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800242c:	e0c6      	b.n	80025bc <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART1)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a67      	ldr	r2, [pc, #412]	; (80025d0 <HAL_UART_MspInit+0x250>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d15f      	bne.n	80024f8 <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002438:	2301      	movs	r3, #1
 800243a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800243c:	2300      	movs	r3, #0
 800243e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002440:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002444:	4618      	mov	r0, r3
 8002446:	f009 fbbf 	bl	800bbc8 <HAL_RCCEx_PeriphCLKConfig>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002450:	f7ff fa20 	bl	8001894 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002454:	4b5c      	ldr	r3, [pc, #368]	; (80025c8 <HAL_UART_MspInit+0x248>)
 8002456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002458:	4a5b      	ldr	r2, [pc, #364]	; (80025c8 <HAL_UART_MspInit+0x248>)
 800245a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800245e:	6613      	str	r3, [r2, #96]	; 0x60
 8002460:	4b59      	ldr	r3, [pc, #356]	; (80025c8 <HAL_UART_MspInit+0x248>)
 8002462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246c:	4b56      	ldr	r3, [pc, #344]	; (80025c8 <HAL_UART_MspInit+0x248>)
 800246e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002470:	4a55      	ldr	r2, [pc, #340]	; (80025c8 <HAL_UART_MspInit+0x248>)
 8002472:	f043 0302 	orr.w	r3, r3, #2
 8002476:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002478:	4b53      	ldr	r3, [pc, #332]	; (80025c8 <HAL_UART_MspInit+0x248>)
 800247a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	61bb      	str	r3, [r7, #24]
 8002482:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002484:	4b50      	ldr	r3, [pc, #320]	; (80025c8 <HAL_UART_MspInit+0x248>)
 8002486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002488:	4a4f      	ldr	r2, [pc, #316]	; (80025c8 <HAL_UART_MspInit+0x248>)
 800248a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800248e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002490:	4b4d      	ldr	r3, [pc, #308]	; (80025c8 <HAL_UART_MspInit+0x248>)
 8002492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 800249c:	f008 fc84 	bl	800ada8 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 80024a0:	2340      	movs	r3, #64	; 0x40
 80024a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b2:	2303      	movs	r3, #3
 80024b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024b8:	2307      	movs	r3, #7
 80024ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 80024be:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80024c2:	4619      	mov	r1, r3
 80024c4:	4843      	ldr	r0, [pc, #268]	; (80025d4 <HAL_UART_MspInit+0x254>)
 80024c6:	f006 f971 	bl	80087ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 80024ca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80024ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d2:	2302      	movs	r3, #2
 80024d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024de:	2303      	movs	r3, #3
 80024e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024e4:	2307      	movs	r3, #7
 80024e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024ea:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80024ee:	4619      	mov	r1, r3
 80024f0:	4836      	ldr	r0, [pc, #216]	; (80025cc <HAL_UART_MspInit+0x24c>)
 80024f2:	f006 f95b 	bl	80087ac <HAL_GPIO_Init>
}
 80024f6:	e061      	b.n	80025bc <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART2)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a36      	ldr	r2, [pc, #216]	; (80025d8 <HAL_UART_MspInit+0x258>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d15c      	bne.n	80025bc <HAL_UART_MspInit+0x23c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002502:	2302      	movs	r3, #2
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002506:	2300      	movs	r3, #0
 8002508:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800250a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800250e:	4618      	mov	r0, r3
 8002510:	f009 fb5a 	bl	800bbc8 <HAL_RCCEx_PeriphCLKConfig>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_UART_MspInit+0x19e>
      Error_Handler();
 800251a:	f7ff f9bb 	bl	8001894 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800251e:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <HAL_UART_MspInit+0x248>)
 8002520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002522:	4a29      	ldr	r2, [pc, #164]	; (80025c8 <HAL_UART_MspInit+0x248>)
 8002524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002528:	6593      	str	r3, [r2, #88]	; 0x58
 800252a:	4b27      	ldr	r3, [pc, #156]	; (80025c8 <HAL_UART_MspInit+0x248>)
 800252c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002536:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <HAL_UART_MspInit+0x248>)
 8002538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253a:	4a23      	ldr	r2, [pc, #140]	; (80025c8 <HAL_UART_MspInit+0x248>)
 800253c:	f043 0308 	orr.w	r3, r3, #8
 8002540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002542:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <HAL_UART_MspInit+0x248>)
 8002544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	4b1e      	ldr	r3, [pc, #120]	; (80025c8 <HAL_UART_MspInit+0x248>)
 8002550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002552:	4a1d      	ldr	r2, [pc, #116]	; (80025c8 <HAL_UART_MspInit+0x248>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800255a:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <HAL_UART_MspInit+0x248>)
 800255c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 8002566:	2340      	movs	r3, #64	; 0x40
 8002568:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256c:	2302      	movs	r3, #2
 800256e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002578:	2303      	movs	r3, #3
 800257a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800257e:	2307      	movs	r3, #7
 8002580:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8002584:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002588:	4619      	mov	r1, r3
 800258a:	4814      	ldr	r0, [pc, #80]	; (80025dc <HAL_UART_MspInit+0x25c>)
 800258c:	f006 f90e 	bl	80087ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8002590:	2304      	movs	r3, #4
 8002592:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002596:	2302      	movs	r3, #2
 8002598:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a2:	2303      	movs	r3, #3
 80025a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025a8:	2307      	movs	r3, #7
 80025aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80025ae:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80025b2:	4619      	mov	r1, r3
 80025b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025b8:	f006 f8f8 	bl	80087ac <HAL_GPIO_Init>
}
 80025bc:	bf00      	nop
 80025be:	37c8      	adds	r7, #200	; 0xc8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40008000 	.word	0x40008000
 80025c8:	40021000 	.word	0x40021000
 80025cc:	48001800 	.word	0x48001800
 80025d0:	40013800 	.word	0x40013800
 80025d4:	48000400 	.word	0x48000400
 80025d8:	40004400 	.word	0x40004400
 80025dc:	48000c00 	.word	0x48000c00

080025e0 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af02      	add	r7, sp, #8
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	330a      	adds	r3, #10
 80025f0:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80025fe:	b299      	uxth	r1, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	b29a      	uxth	r2, r3
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	4613      	mov	r3, r2
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	f006 fb22 	bl	8008c54 <HAL_I2C_Master_Transmit>
 8002610:	4603      	mov	r3, r0
 8002612:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8002614:	693b      	ldr	r3, [r7, #16]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800261e:	b580      	push	{r7, lr}
 8002620:	b088      	sub	sp, #32
 8002622:	af02      	add	r7, sp, #8
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	330a      	adds	r3, #10
 800262e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	b2db      	uxtb	r3, r3
 8002642:	b299      	uxth	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	b29a      	uxth	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	4613      	mov	r3, r2
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	f006 fbf4 	bl	8008e3c <HAL_I2C_Master_Receive>
 8002654:	4603      	mov	r3, r0
 8002656:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8002658:	693b      	ldr	r3, [r7, #16]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	607a      	str	r2, [r7, #4]
 800266e:	603b      	str	r3, [r7, #0]
 8002670:	460b      	mov	r3, r1
 8002672:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002674:	2300      	movs	r3, #0
 8002676:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	2b3f      	cmp	r3, #63	; 0x3f
 800267c:	d902      	bls.n	8002684 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800267e:	f06f 0303 	mvn.w	r3, #3
 8002682:	e016      	b.n	80026b2 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8002684:	4a0d      	ldr	r2, [pc, #52]	; (80026bc <VL53L0X_WriteMulti+0x58>)
 8002686:	7afb      	ldrb	r3, [r7, #11]
 8002688:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	480c      	ldr	r0, [pc, #48]	; (80026c0 <VL53L0X_WriteMulti+0x5c>)
 8002690:	f011 fa68 	bl	8013b64 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	3301      	adds	r3, #1
 8002698:	461a      	mov	r2, r3
 800269a:	4908      	ldr	r1, [pc, #32]	; (80026bc <VL53L0X_WriteMulti+0x58>)
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f7ff ff9f 	bl	80025e0 <_I2CWrite>
 80026a2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80026aa:	23ec      	movs	r3, #236	; 0xec
 80026ac:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80026ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20001038 	.word	0x20001038
 80026c0:	20001039 	.word	0x20001039

080026c4 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	460b      	mov	r3, r1
 80026d2:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80026d8:	f107 030b 	add.w	r3, r7, #11
 80026dc:	2201      	movs	r2, #1
 80026de:	4619      	mov	r1, r3
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f7ff ff7d 	bl	80025e0 <_I2CWrite>
 80026e6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80026ee:	23ec      	movs	r3, #236	; 0xec
 80026f0:	75fb      	strb	r3, [r7, #23]
        goto done;
 80026f2:	e00c      	b.n	800270e <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f7ff ff90 	bl	800261e <_I2CRead>
 80026fe:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002706:	23ec      	movs	r3, #236	; 0xec
 8002708:	75fb      	strb	r3, [r7, #23]
 800270a:	e000      	b.n	800270e <VL53L0X_ReadMulti+0x4a>
    }
done:
 800270c:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800270e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	70fb      	strb	r3, [r7, #3]
 8002728:	4613      	mov	r3, r2
 800272a:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800272c:	2300      	movs	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8002730:	4a0b      	ldr	r2, [pc, #44]	; (8002760 <VL53L0X_WrByte+0x44>)
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8002736:	4a0a      	ldr	r2, [pc, #40]	; (8002760 <VL53L0X_WrByte+0x44>)
 8002738:	78bb      	ldrb	r3, [r7, #2]
 800273a:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800273c:	2202      	movs	r2, #2
 800273e:	4908      	ldr	r1, [pc, #32]	; (8002760 <VL53L0X_WrByte+0x44>)
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff ff4d 	bl	80025e0 <_I2CWrite>
 8002746:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800274e:	23ec      	movs	r3, #236	; 0xec
 8002750:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8002752:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20001038 	.word	0x20001038

08002764 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	70fb      	strb	r3, [r7, #3]
 8002770:	4613      	mov	r3, r2
 8002772:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002774:	2300      	movs	r3, #0
 8002776:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8002778:	4a0e      	ldr	r2, [pc, #56]	; (80027b4 <VL53L0X_WrWord+0x50>)
 800277a:	78fb      	ldrb	r3, [r7, #3]
 800277c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800277e:	883b      	ldrh	r3, [r7, #0]
 8002780:	0a1b      	lsrs	r3, r3, #8
 8002782:	b29b      	uxth	r3, r3
 8002784:	b2da      	uxtb	r2, r3
 8002786:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <VL53L0X_WrWord+0x50>)
 8002788:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800278a:	883b      	ldrh	r3, [r7, #0]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <VL53L0X_WrWord+0x50>)
 8002790:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8002792:	2203      	movs	r2, #3
 8002794:	4907      	ldr	r1, [pc, #28]	; (80027b4 <VL53L0X_WrWord+0x50>)
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff ff22 	bl	80025e0 <_I2CWrite>
 800279c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80027a4:	23ec      	movs	r3, #236	; 0xec
 80027a6:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80027a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20001038 	.word	0x20001038

080027b8 <VL53L0X_WrDWord>:

VL53L0X_Error VL53L0X_WrDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t data) {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	460b      	mov	r3, r1
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80027c6:	2300      	movs	r3, #0
 80027c8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    _I2CBuffer[0] = index;
 80027ca:	4a13      	ldr	r2, [pc, #76]	; (8002818 <VL53L0X_WrDWord+0x60>)
 80027cc:	7afb      	ldrb	r3, [r7, #11]
 80027ce:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = (data >> 24) & 0xFF;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	0e1b      	lsrs	r3, r3, #24
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <VL53L0X_WrDWord+0x60>)
 80027d8:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = (data >> 16) & 0xFF;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	0c1b      	lsrs	r3, r3, #16
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <VL53L0X_WrDWord+0x60>)
 80027e2:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = (data >> 8)  & 0xFF;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	0a1b      	lsrs	r3, r3, #8
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <VL53L0X_WrDWord+0x60>)
 80027ec:	70da      	strb	r2, [r3, #3]
    _I2CBuffer[4] = (data >> 0 ) & 0xFF;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <VL53L0X_WrDWord+0x60>)
 80027f4:	711a      	strb	r2, [r3, #4]
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 5);
 80027f6:	2205      	movs	r2, #5
 80027f8:	4907      	ldr	r1, [pc, #28]	; (8002818 <VL53L0X_WrDWord+0x60>)
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f7ff fef0 	bl	80025e0 <_I2CWrite>
 8002800:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <VL53L0X_WrDWord+0x54>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002808:	23ec      	movs	r3, #236	; 0xec
 800280a:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800280c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20001038 	.word	0x20001038

0800281c <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	4608      	mov	r0, r1
 8002826:	4611      	mov	r1, r2
 8002828:	461a      	mov	r2, r3
 800282a:	4603      	mov	r3, r0
 800282c:	70fb      	strb	r3, [r7, #3]
 800282e:	460b      	mov	r3, r1
 8002830:	70bb      	strb	r3, [r7, #2]
 8002832:	4613      	mov	r3, r2
 8002834:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002836:	2300      	movs	r3, #0
 8002838:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800283a:	f107 020e 	add.w	r2, r7, #14
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	4619      	mov	r1, r3
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f81e 	bl	8002884 <VL53L0X_RdByte>
 8002848:	4603      	mov	r3, r0
 800284a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800284c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d110      	bne.n	8002876 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8002854:	7bba      	ldrb	r2, [r7, #14]
 8002856:	78bb      	ldrb	r3, [r7, #2]
 8002858:	4013      	ands	r3, r2
 800285a:	b2da      	uxtb	r2, r3
 800285c:	787b      	ldrb	r3, [r7, #1]
 800285e:	4313      	orrs	r3, r2
 8002860:	b2db      	uxtb	r3, r3
 8002862:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8002864:	7bba      	ldrb	r2, [r7, #14]
 8002866:	78fb      	ldrb	r3, [r7, #3]
 8002868:	4619      	mov	r1, r3
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff ff56 	bl	800271c <VL53L0X_WrByte>
 8002870:	4603      	mov	r3, r0
 8002872:	73fb      	strb	r3, [r7, #15]
 8002874:	e000      	b.n	8002878 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8002876:	bf00      	nop
done:
    return Status;
 8002878:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	460b      	mov	r3, r1
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002892:	2300      	movs	r3, #0
 8002894:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8002896:	f107 030b 	add.w	r3, r7, #11
 800289a:	2201      	movs	r2, #1
 800289c:	4619      	mov	r1, r3
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f7ff fe9e 	bl	80025e0 <_I2CWrite>
 80028a4:	6138      	str	r0, [r7, #16]
    if( status_int ){
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80028ac:	23ec      	movs	r3, #236	; 0xec
 80028ae:	75fb      	strb	r3, [r7, #23]
        goto done;
 80028b0:	e00c      	b.n	80028cc <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 80028b2:	2201      	movs	r2, #1
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f7ff feb1 	bl	800261e <_I2CRead>
 80028bc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80028c4:	23ec      	movs	r3, #236	; 0xec
 80028c6:	75fb      	strb	r3, [r7, #23]
 80028c8:	e000      	b.n	80028cc <VL53L0X_RdByte+0x48>
    }
done:
 80028ca:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80028cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	460b      	mov	r3, r1
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80028ea:	f107 030b 	add.w	r3, r7, #11
 80028ee:	2201      	movs	r2, #1
 80028f0:	4619      	mov	r1, r3
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f7ff fe74 	bl	80025e0 <_I2CWrite>
 80028f8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002900:	23ec      	movs	r3, #236	; 0xec
 8002902:	75fb      	strb	r3, [r7, #23]
        goto done;
 8002904:	e017      	b.n	8002936 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8002906:	2202      	movs	r2, #2
 8002908:	490e      	ldr	r1, [pc, #56]	; (8002944 <VL53L0X_RdWord+0x6c>)
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f7ff fe87 	bl	800261e <_I2CRead>
 8002910:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002918:	23ec      	movs	r3, #236	; 0xec
 800291a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800291c:	e00b      	b.n	8002936 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800291e:	4b09      	ldr	r3, [pc, #36]	; (8002944 <VL53L0X_RdWord+0x6c>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	b29b      	uxth	r3, r3
 8002924:	021b      	lsls	r3, r3, #8
 8002926:	b29a      	uxth	r2, r3
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <VL53L0X_RdWord+0x6c>)
 800292a:	785b      	ldrb	r3, [r3, #1]
 800292c:	b29b      	uxth	r3, r3
 800292e:	4413      	add	r3, r2
 8002930:	b29a      	uxth	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8002936:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20001038 	.word	0x20001038

08002948 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	460b      	mov	r3, r1
 8002952:	607a      	str	r2, [r7, #4]
 8002954:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002956:	2300      	movs	r3, #0
 8002958:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800295a:	f107 030b 	add.w	r3, r7, #11
 800295e:	2201      	movs	r2, #1
 8002960:	4619      	mov	r1, r3
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f7ff fe3c 	bl	80025e0 <_I2CWrite>
 8002968:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d002      	beq.n	8002976 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002970:	23ec      	movs	r3, #236	; 0xec
 8002972:	75fb      	strb	r3, [r7, #23]
        goto done;
 8002974:	e01b      	b.n	80029ae <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8002976:	2204      	movs	r2, #4
 8002978:	4910      	ldr	r1, [pc, #64]	; (80029bc <VL53L0X_RdDWord+0x74>)
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f7ff fe4f 	bl	800261e <_I2CRead>
 8002980:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002988:	23ec      	movs	r3, #236	; 0xec
 800298a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800298c:	e00f      	b.n	80029ae <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800298e:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <VL53L0X_RdDWord+0x74>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	061a      	lsls	r2, r3, #24
 8002994:	4b09      	ldr	r3, [pc, #36]	; (80029bc <VL53L0X_RdDWord+0x74>)
 8002996:	785b      	ldrb	r3, [r3, #1]
 8002998:	041b      	lsls	r3, r3, #16
 800299a:	441a      	add	r2, r3
 800299c:	4b07      	ldr	r3, [pc, #28]	; (80029bc <VL53L0X_RdDWord+0x74>)
 800299e:	789b      	ldrb	r3, [r3, #2]
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	4413      	add	r3, r2
 80029a4:	4a05      	ldr	r2, [pc, #20]	; (80029bc <VL53L0X_RdDWord+0x74>)
 80029a6:	78d2      	ldrb	r2, [r2, #3]
 80029a8:	441a      	add	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 80029ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20001038 	.word	0x20001038

080029c0 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80029c8:	2300      	movs	r3, #0
 80029ca:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 80029cc:	2002      	movs	r0, #2
 80029ce:	f004 fc49 	bl	8007264 <HAL_Delay>
    return status;
 80029d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80029e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80029e4:	f7ff fbd0 	bl	8002188 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029e8:	480c      	ldr	r0, [pc, #48]	; (8002a1c <LoopForever+0x6>)
  ldr r1, =_edata
 80029ea:	490d      	ldr	r1, [pc, #52]	; (8002a20 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029ec:	4a0d      	ldr	r2, [pc, #52]	; (8002a24 <LoopForever+0xe>)
  movs r3, #0
 80029ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029f0:	e002      	b.n	80029f8 <LoopCopyDataInit>

080029f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029f6:	3304      	adds	r3, #4

080029f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029fc:	d3f9      	bcc.n	80029f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029fe:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a00:	4c0a      	ldr	r4, [pc, #40]	; (8002a2c <LoopForever+0x16>)
  movs r3, #0
 8002a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a04:	e001      	b.n	8002a0a <LoopFillZerobss>

08002a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a08:	3204      	adds	r2, #4

08002a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a0c:	d3fb      	bcc.n	8002a06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a0e:	f011 f885 	bl	8013b1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a12:	f7fe fd83 	bl	800151c <main>

08002a16 <LoopForever>:

LoopForever:
    b LoopForever
 8002a16:	e7fe      	b.n	8002a16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002a18:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a20:	20000644 	.word	0x20000644
  ldr r2, =_sidata
 8002a24:	08014de8 	.word	0x08014de8
  ldr r2, =_sbss
 8002a28:	20000644 	.word	0x20000644
  ldr r4, =_ebss
 8002a2c:	20002cb0 	.word	0x20002cb0

08002a30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a30:	e7fe      	b.n	8002a30 <ADC1_2_IRQHandler>

08002a32 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b084      	sub	sp, #16
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8002a40:	6839      	ldr	r1, [r7, #0]
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f001 fcbf 	bl	80043c6 <VL53L0X_get_offset_calibration_data_micro_meter>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8002a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8002a58:	b5b0      	push	{r4, r5, r7, lr}
 8002a5a:	b096      	sub	sp, #88	; 0x58
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a60:	2300      	movs	r3, #0
 8002a62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8002a66:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d107      	bne.n	8002a7e <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2188      	movs	r1, #136	; 0x88
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff fe52 	bl	800271c <VL53L0X_WrByte>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a8c:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002a96:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a9e      	ldr	r2, [pc, #632]	; (8002d18 <VL53L0X_DataInit+0x2c0>)
 8002a9e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a9d      	ldr	r2, [pc, #628]	; (8002d1c <VL53L0X_DataInit+0x2c4>)
 8002aa6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8002ab0:	f107 0310 	add.w	r3, r7, #16
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 fab4 	bl	8003024 <VL53L0X_GetDeviceParameters>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8002ac2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d112      	bne.n	8002af0 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8002aca:	2300      	movs	r3, #0
 8002acc:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f103 0410 	add.w	r4, r3, #16
 8002ad8:	f107 0510 	add.w	r5, r7, #16
 8002adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ae8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002aec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2264      	movs	r2, #100	; 0x64
 8002af4:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002afe:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002b08:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002b12:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002b1e:	2201      	movs	r2, #1
 8002b20:	2180      	movs	r1, #128	; 0x80
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff fdfa 	bl	800271c <VL53L0X_WrByte>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002b36:	2201      	movs	r2, #1
 8002b38:	21ff      	movs	r1, #255	; 0xff
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff fdee 	bl	800271c <VL53L0X_WrByte>
 8002b40:	4603      	mov	r3, r0
 8002b42:	461a      	mov	r2, r3
 8002b44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2100      	movs	r1, #0
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff fde2 	bl	800271c <VL53L0X_WrByte>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8002b66:	f107 030f 	add.w	r3, r7, #15
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	2191      	movs	r1, #145	; 0x91
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff fe88 	bl	8002884 <VL53L0X_RdByte>
 8002b74:	4603      	mov	r3, r0
 8002b76:	461a      	mov	r2, r3
 8002b78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8002b82:	7bfa      	ldrb	r2, [r7, #15]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff fdc4 	bl	800271c <VL53L0X_WrByte>
 8002b94:	4603      	mov	r3, r0
 8002b96:	461a      	mov	r2, r3
 8002b98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	21ff      	movs	r1, #255	; 0xff
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff fdb8 	bl	800271c <VL53L0X_WrByte>
 8002bac:	4603      	mov	r3, r0
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2180      	movs	r1, #128	; 0x80
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff fdac 	bl	800271c <VL53L0X_WrByte>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	653b      	str	r3, [r7, #80]	; 0x50
 8002bd6:	e014      	b.n	8002c02 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8002bd8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d114      	bne.n	8002c0a <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8002be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	2201      	movs	r2, #1
 8002be6:	4619      	mov	r1, r3
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 fd43 	bl	8003674 <VL53L0X_SetLimitCheckEnable>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bfe:	3301      	adds	r3, #1
 8002c00:	653b      	str	r3, [r7, #80]	; 0x50
 8002c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c04:	2b05      	cmp	r3, #5
 8002c06:	dde7      	ble.n	8002bd8 <VL53L0X_DataInit+0x180>
 8002c08:	e000      	b.n	8002c0c <VL53L0X_DataInit+0x1b4>
		else
			break;
 8002c0a:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8002c0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d107      	bne.n	8002c24 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002c14:	2200      	movs	r2, #0
 8002c16:	2102      	movs	r1, #2
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 fd2b 	bl	8003674 <VL53L0X_SetLimitCheckEnable>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002c24:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d107      	bne.n	8002c3c <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2103      	movs	r1, #3
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 fd1f 	bl	8003674 <VL53L0X_SetLimitCheckEnable>
 8002c36:	4603      	mov	r3, r0
 8002c38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002c3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d107      	bne.n	8002c54 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002c44:	2200      	movs	r2, #0
 8002c46:	2104      	movs	r1, #4
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fd13 	bl	8003674 <VL53L0X_SetLimitCheckEnable>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002c54:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d107      	bne.n	8002c6c <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2105      	movs	r1, #5
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 fd07 	bl	8003674 <VL53L0X_SetLimitCheckEnable>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8002c6c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d108      	bne.n	8002c86 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002c74:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8002c78:	2100      	movs	r1, #0
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fdaa 	bl	80037d4 <VL53L0X_SetLimitCheckValue>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002c86:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d108      	bne.n	8002ca0 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002c8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c92:	2101      	movs	r1, #1
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 fd9d 	bl	80037d4 <VL53L0X_SetLimitCheckValue>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002ca0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d108      	bne.n	8002cba <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002ca8:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8002cac:	2102      	movs	r1, #2
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fd90 	bl	80037d4 <VL53L0X_SetLimitCheckValue>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002cba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d107      	bne.n	8002cd2 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2103      	movs	r1, #3
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fd84 	bl	80037d4 <VL53L0X_SetLimitCheckValue>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002cd2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10f      	bne.n	8002cfa <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	22ff      	movs	r2, #255	; 0xff
 8002cde:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002ce2:	22ff      	movs	r2, #255	; 0xff
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff fd18 	bl	800271c <VL53L0X_WrByte>
 8002cec:	4603      	mov	r3, r0
 8002cee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8002cfa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d103      	bne.n	8002d0a <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8002d0a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3758      	adds	r7, #88	; 0x58
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bdb0      	pop	{r4, r5, r7, pc}
 8002d16:	bf00      	nop
 8002d18:	00016b85 	.word	0x00016b85
 8002d1c:	000970a4 	.word	0x000970a4

08002d20 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8002d20:	b5b0      	push	{r4, r5, r7, lr}
 8002d22:	b09e      	sub	sp, #120	; 0x78
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8002d2e:	f107 031c 	add.w	r3, r7, #28
 8002d32:	2240      	movs	r2, #64	; 0x40
 8002d34:	2100      	movs	r1, #0
 8002d36:	4618      	mov	r0, r3
 8002d38:	f010 ff22 	bl	8013b80 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f002 fa74 	bl	800524c <VL53L0X_get_info_from_device>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8002d70:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8002d78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8002d7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d80d      	bhi.n	8002da0 <VL53L0X_StaticInit+0x80>
 8002d84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d102      	bne.n	8002d92 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8002d8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d8e:	2b20      	cmp	r3, #32
 8002d90:	d806      	bhi.n	8002da0 <VL53L0X_StaticInit+0x80>
 8002d92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10e      	bne.n	8002db8 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8002d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d9c:	2b0c      	cmp	r3, #12
 8002d9e:	d90b      	bls.n	8002db8 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8002da0:	f107 0218 	add.w	r2, r7, #24
 8002da4:	f107 0314 	add.w	r3, r7, #20
 8002da8:	4619      	mov	r1, r3
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f001 fd06 	bl	80047bc <VL53L0X_perform_ref_spad_management>
 8002db0:	4603      	mov	r3, r0
 8002db2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002db6:	e009      	b.n	8002dcc <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8002db8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f001 ff07 	bl	8004bd4 <VL53L0X_set_reference_spads>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8002dcc:	4b94      	ldr	r3, [pc, #592]	; (8003020 <VL53L0X_StaticInit+0x300>)
 8002dce:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8002dd0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10f      	bne.n	8002df8 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8002dde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8002de2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d104      	bne.n	8002df4 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8002df0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002df2:	e001      	b.n	8002df8 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8002df4:	4b8a      	ldr	r3, [pc, #552]	; (8003020 <VL53L0X_StaticInit+0x300>)
 8002df6:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8002df8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d106      	bne.n	8002e0e <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8002e00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f003 fb40 	bl	8006488 <VL53L0X_load_tuning_settings>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8002e0e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10a      	bne.n	8002e2c <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8002e16:	2300      	movs	r3, #0
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	2304      	movs	r3, #4
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2100      	movs	r1, #0
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f001 f8ff 	bl	8004024 <VL53L0X_SetGpioConfig>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002e2c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d121      	bne.n	8002e78 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002e34:	2201      	movs	r2, #1
 8002e36:	21ff      	movs	r1, #255	; 0xff
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff fc6f 	bl	800271c <VL53L0X_WrByte>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8002e44:	f107 031a 	add.w	r3, r7, #26
 8002e48:	461a      	mov	r2, r3
 8002e4a:	2184      	movs	r1, #132	; 0x84
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff fd43 	bl	80028d8 <VL53L0X_RdWord>
 8002e52:	4603      	mov	r3, r0
 8002e54:	461a      	mov	r2, r3
 8002e56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002e60:	2200      	movs	r2, #0
 8002e62:	21ff      	movs	r1, #255	; 0xff
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff fc59 	bl	800271c <VL53L0X_WrByte>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002e78:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d105      	bne.n	8002e8c <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8002e80:	8b7b      	ldrh	r3, [r7, #26]
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	461a      	mov	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8002e8c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d108      	bne.n	8002ea6 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8002e94:	f107 031c 	add.w	r3, r7, #28
 8002e98:	4619      	mov	r1, r3
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f8c2 	bl	8003024 <VL53L0X_GetDeviceParameters>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8002ea6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d110      	bne.n	8002ed0 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8002eae:	f107 0319 	add.w	r3, r7, #25
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f984 	bl	80031c2 <VL53L0X_GetFractionEnable>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8002ec0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d103      	bne.n	8002ed0 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8002ec8:	7e7a      	ldrb	r2, [r7, #25]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8002ed0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10e      	bne.n	8002ef6 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f103 0410 	add.w	r4, r3, #16
 8002ede:	f107 051c 	add.w	r5, r7, #28
 8002ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002eee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002ef2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8002ef6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d111      	bne.n	8002f22 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8002efe:	f107 0319 	add.w	r3, r7, #25
 8002f02:	461a      	mov	r2, r3
 8002f04:	2101      	movs	r1, #1
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff fcbc 	bl	8002884 <VL53L0X_RdByte>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8002f12:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d103      	bne.n	8002f22 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8002f1a:	7e7a      	ldrb	r2, [r7, #25]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8002f22:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d107      	bne.n	8002f3a <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f9a4 	bl	800327c <VL53L0X_SetSequenceStepEnable>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8002f3a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d107      	bne.n	8002f52 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8002f42:	2200      	movs	r2, #0
 8002f44:	2102      	movs	r1, #2
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f998 	bl	800327c <VL53L0X_SetSequenceStepEnable>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8002f52:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d103      	bne.n	8002f62 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8002f62:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8002f6a:	f107 0313 	add.w	r3, r7, #19
 8002f6e:	461a      	mov	r2, r3
 8002f70:	2100      	movs	r1, #0
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f96a 	bl	800324c <VL53L0X_GetVcselPulsePeriod>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002f7e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d103      	bne.n	8002f8e <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002f86:	7cfa      	ldrb	r2, [r7, #19]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8002f8e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d109      	bne.n	8002faa <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8002f96:	f107 0313 	add.w	r3, r7, #19
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f954 	bl	800324c <VL53L0X_GetVcselPulsePeriod>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002faa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d103      	bne.n	8002fba <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002fb2:	7cfa      	ldrb	r2, [r7, #19]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8002fba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d109      	bne.n	8002fd6 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8002fc2:	f107 030c 	add.w	r3, r7, #12
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	2103      	movs	r1, #3
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f002 fec0 	bl	8005d50 <get_sequence_step_timeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002fd6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d103      	bne.n	8002fe6 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8002fe6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d109      	bne.n	8003002 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8002fee:	f107 030c 	add.w	r3, r7, #12
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	2104      	movs	r1, #4
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f002 feaa 	bl	8005d50 <get_sequence_step_timeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003002:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003006:	2b00      	cmp	r3, #0
 8003008:	d103      	bne.n	8003012 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003012:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8003016:	4618      	mov	r0, r3
 8003018:	3770      	adds	r7, #112	; 0x70
 800301a:	46bd      	mov	sp, r7
 800301c:	bdb0      	pop	{r4, r5, r7, pc}
 800301e:	bf00      	nop
 8003020:	20000198 	.word	0x20000198

08003024 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800302e:	2300      	movs	r3, #0
 8003030:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	4619      	mov	r1, r3
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f8b0 	bl	800319c <VL53L0X_GetDeviceMode>
 800303c:	4603      	mov	r3, r0
 800303e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d107      	bne.n	8003058 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	3308      	adds	r3, #8
 800304c:	4619      	mov	r1, r3
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 fa94 	bl	800357c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8003054:	4603      	mov	r3, r0
 8003056:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8003058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d102      	bne.n	8003066 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2200      	movs	r2, #0
 8003064:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8003066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d107      	bne.n	800307e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	3310      	adds	r3, #16
 8003072:	4619      	mov	r1, r3
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 faca 	bl	800360e <VL53L0X_GetXTalkCompensationRateMegaCps>
 800307a:	4603      	mov	r3, r0
 800307c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800307e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d107      	bne.n	8003096 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	3314      	adds	r3, #20
 800308a:	4619      	mov	r1, r3
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff fcd0 	bl	8002a32 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8003092:	4603      	mov	r3, r0
 8003094:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8003096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d134      	bne.n	8003108 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800309e:	2300      	movs	r3, #0
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	e02a      	b.n	80030fa <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80030a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d12a      	bne.n	8003102 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	b299      	uxth	r1, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	3308      	adds	r3, #8
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	4413      	add	r3, r2
 80030ba:	3304      	adds	r3, #4
 80030bc:	461a      	mov	r2, r3
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fbea 	bl	8003898 <VL53L0X_GetLimitCheckValue>
 80030c4:	4603      	mov	r3, r0
 80030c6:	461a      	mov	r2, r3
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80030ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d117      	bne.n	8003106 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	b299      	uxth	r1, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	3318      	adds	r3, #24
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	4413      	add	r3, r2
 80030e2:	461a      	mov	r2, r3
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 fb51 	bl	800378c <VL53L0X_GetLimitCheckEnable>
 80030ea:	4603      	mov	r3, r0
 80030ec:	461a      	mov	r2, r3
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	3301      	adds	r3, #1
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b05      	cmp	r3, #5
 80030fe:	ddd1      	ble.n	80030a4 <VL53L0X_GetDeviceParameters+0x80>
 8003100:	e002      	b.n	8003108 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8003102:	bf00      	nop
 8003104:	e000      	b.n	8003108 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8003106:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d107      	bne.n	8003120 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	333c      	adds	r3, #60	; 0x3c
 8003114:	4619      	mov	r1, r3
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fc4c 	bl	80039b4 <VL53L0X_GetWrapAroundCheckEnable>
 800311c:	4603      	mov	r3, r0
 800311e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8003120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d107      	bne.n	8003138 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	3304      	adds	r3, #4
 800312c:	4619      	mov	r1, r3
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f879 	bl	8003226 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8003134:	4603      	mov	r3, r0
 8003136:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003138:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003150:	2300      	movs	r3, #0
 8003152:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	2b15      	cmp	r3, #21
 8003158:	bf8c      	ite	hi
 800315a:	2201      	movhi	r2, #1
 800315c:	2200      	movls	r2, #0
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	2a00      	cmp	r2, #0
 8003162:	d10e      	bne.n	8003182 <VL53L0X_SetDeviceMode+0x3e>
 8003164:	2201      	movs	r2, #1
 8003166:	409a      	lsls	r2, r3
 8003168:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <VL53L0X_SetDeviceMode+0x54>)
 800316a:	4013      	ands	r3, r2
 800316c:	2b00      	cmp	r3, #0
 800316e:	bf14      	ite	ne
 8003170:	2301      	movne	r3, #1
 8003172:	2300      	moveq	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	78fa      	ldrb	r2, [r7, #3]
 800317e:	741a      	strb	r2, [r3, #16]
		break;
 8003180:	e001      	b.n	8003186 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003182:	23f8      	movs	r3, #248	; 0xf8
 8003184:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003186:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	0030000b 	.word	0x0030000b

0800319c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80031a6:	2300      	movs	r3, #0
 80031a8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	7c1a      	ldrb	r2, [r3, #16]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80031b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80031cc:	2300      	movs	r3, #0
 80031ce:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	2109      	movs	r1, #9
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff fb55 	bl	8002884 <VL53L0X_RdByte>
 80031da:	4603      	mov	r3, r0
 80031dc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80031de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80031f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800320a:	2300      	movs	r3, #0
 800320c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800320e:	6839      	ldr	r1, [r7, #0]
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f002 ffa7 	bl	8006164 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8003216:	4603      	mov	r3, r0
 8003218:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800321a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003230:	2300      	movs	r3, #0
 8003232:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8003234:	6839      	ldr	r1, [r7, #0]
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f003 f874 	bl	8006324 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800323c:	4603      	mov	r3, r0
 800323e:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8003240:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	460b      	mov	r3, r1
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800325a:	2300      	movs	r3, #0
 800325c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800325e:	7afb      	ldrb	r3, [r7, #11]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	4619      	mov	r1, r3
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f002 ff46 	bl	80060f6 <VL53L0X_get_vcsel_pulse_period>
 800326a:	4603      	mov	r3, r0
 800326c:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800326e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	70fb      	strb	r3, [r7, #3]
 8003288:	4613      	mov	r3, r2
 800328a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800328c:	2300      	movs	r3, #0
 800328e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003290:	2300      	movs	r3, #0
 8003292:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8003294:	2300      	movs	r3, #0
 8003296:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003298:	f107 030f 	add.w	r3, r7, #15
 800329c:	461a      	mov	r2, r3
 800329e:	2101      	movs	r1, #1
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff faef 	bl	8002884 <VL53L0X_RdByte>
 80032a6:	4603      	mov	r3, r0
 80032a8:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80032ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d15a      	bne.n	800336c <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80032b6:	78bb      	ldrb	r3, [r7, #2]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d12b      	bne.n	8003314 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80032bc:	78fb      	ldrb	r3, [r7, #3]
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d825      	bhi.n	800330e <VL53L0X_SetSequenceStepEnable+0x92>
 80032c2:	a201      	add	r2, pc, #4	; (adr r2, 80032c8 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80032c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c8:	080032dd 	.word	0x080032dd
 80032cc:	080032e7 	.word	0x080032e7
 80032d0:	080032f1 	.word	0x080032f1
 80032d4:	080032fb 	.word	0x080032fb
 80032d8:	08003305 	.word	0x08003305
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80032dc:	7dbb      	ldrb	r3, [r7, #22]
 80032de:	f043 0310 	orr.w	r3, r3, #16
 80032e2:	75bb      	strb	r3, [r7, #22]
				break;
 80032e4:	e043      	b.n	800336e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80032e6:	7dbb      	ldrb	r3, [r7, #22]
 80032e8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80032ec:	75bb      	strb	r3, [r7, #22]
				break;
 80032ee:	e03e      	b.n	800336e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80032f0:	7dbb      	ldrb	r3, [r7, #22]
 80032f2:	f043 0304 	orr.w	r3, r3, #4
 80032f6:	75bb      	strb	r3, [r7, #22]
				break;
 80032f8:	e039      	b.n	800336e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80032fa:	7dbb      	ldrb	r3, [r7, #22]
 80032fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003300:	75bb      	strb	r3, [r7, #22]
				break;
 8003302:	e034      	b.n	800336e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8003304:	7dbb      	ldrb	r3, [r7, #22]
 8003306:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800330a:	75bb      	strb	r3, [r7, #22]
				break;
 800330c:	e02f      	b.n	800336e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800330e:	23fc      	movs	r3, #252	; 0xfc
 8003310:	75fb      	strb	r3, [r7, #23]
 8003312:	e02c      	b.n	800336e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8003314:	78fb      	ldrb	r3, [r7, #3]
 8003316:	2b04      	cmp	r3, #4
 8003318:	d825      	bhi.n	8003366 <VL53L0X_SetSequenceStepEnable+0xea>
 800331a:	a201      	add	r2, pc, #4	; (adr r2, 8003320 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800331c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003320:	08003335 	.word	0x08003335
 8003324:	0800333f 	.word	0x0800333f
 8003328:	08003349 	.word	0x08003349
 800332c:	08003353 	.word	0x08003353
 8003330:	0800335d 	.word	0x0800335d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8003334:	7dbb      	ldrb	r3, [r7, #22]
 8003336:	f023 0310 	bic.w	r3, r3, #16
 800333a:	75bb      	strb	r3, [r7, #22]
				break;
 800333c:	e017      	b.n	800336e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800333e:	7dbb      	ldrb	r3, [r7, #22]
 8003340:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8003344:	75bb      	strb	r3, [r7, #22]
				break;
 8003346:	e012      	b.n	800336e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8003348:	7dbb      	ldrb	r3, [r7, #22]
 800334a:	f023 0304 	bic.w	r3, r3, #4
 800334e:	75bb      	strb	r3, [r7, #22]
				break;
 8003350:	e00d      	b.n	800336e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8003352:	7dbb      	ldrb	r3, [r7, #22]
 8003354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003358:	75bb      	strb	r3, [r7, #22]
				break;
 800335a:	e008      	b.n	800336e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800335c:	7dbb      	ldrb	r3, [r7, #22]
 800335e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003362:	75bb      	strb	r3, [r7, #22]
				break;
 8003364:	e003      	b.n	800336e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003366:	23fc      	movs	r3, #252	; 0xfc
 8003368:	75fb      	strb	r3, [r7, #23]
 800336a:	e000      	b.n	800336e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800336c:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800336e:	7bfb      	ldrb	r3, [r7, #15]
 8003370:	7dba      	ldrb	r2, [r7, #22]
 8003372:	429a      	cmp	r2, r3
 8003374:	d01e      	beq.n	80033b4 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8003376:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d107      	bne.n	800338e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800337e:	7dbb      	ldrb	r3, [r7, #22]
 8003380:	461a      	mov	r2, r3
 8003382:	2101      	movs	r1, #1
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff f9c9 	bl	800271c <VL53L0X_WrByte>
 800338a:	4603      	mov	r3, r0
 800338c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800338e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d103      	bne.n	800339e <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	7dba      	ldrb	r2, [r7, #22]
 800339a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800339e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80033ac:	6939      	ldr	r1, [r7, #16]
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff ff26 	bl	8003200 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80033b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	607b      	str	r3, [r7, #4]
 80033ca:	460b      	mov	r3, r1
 80033cc:	72fb      	strb	r3, [r7, #11]
 80033ce:	4613      	mov	r3, r2
 80033d0:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80033d2:	2300      	movs	r3, #0
 80033d4:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80033dc:	7afb      	ldrb	r3, [r7, #11]
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d836      	bhi.n	8003450 <sequence_step_enabled+0x90>
 80033e2:	a201      	add	r2, pc, #4	; (adr r2, 80033e8 <sequence_step_enabled+0x28>)
 80033e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e8:	080033fd 	.word	0x080033fd
 80033ec:	0800340f 	.word	0x0800340f
 80033f0:	08003421 	.word	0x08003421
 80033f4:	08003433 	.word	0x08003433
 80033f8:	08003445 	.word	0x08003445
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80033fc:	7abb      	ldrb	r3, [r7, #10]
 80033fe:	111b      	asrs	r3, r3, #4
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	b2da      	uxtb	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	701a      	strb	r2, [r3, #0]
		break;
 800340c:	e022      	b.n	8003454 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800340e:	7abb      	ldrb	r3, [r7, #10]
 8003410:	10db      	asrs	r3, r3, #3
 8003412:	b2db      	uxtb	r3, r3
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	b2da      	uxtb	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	701a      	strb	r2, [r3, #0]
		break;
 800341e:	e019      	b.n	8003454 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8003420:	7abb      	ldrb	r3, [r7, #10]
 8003422:	109b      	asrs	r3, r3, #2
 8003424:	b2db      	uxtb	r3, r3
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	b2da      	uxtb	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	701a      	strb	r2, [r3, #0]
		break;
 8003430:	e010      	b.n	8003454 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8003432:	7abb      	ldrb	r3, [r7, #10]
 8003434:	119b      	asrs	r3, r3, #6
 8003436:	b2db      	uxtb	r3, r3
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	b2da      	uxtb	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	701a      	strb	r2, [r3, #0]
		break;
 8003442:	e007      	b.n	8003454 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8003444:	7abb      	ldrb	r3, [r7, #10]
 8003446:	09db      	lsrs	r3, r3, #7
 8003448:	b2da      	uxtb	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	701a      	strb	r2, [r3, #0]
		break;
 800344e:	e001      	b.n	8003454 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003450:	23fc      	movs	r3, #252	; 0xfc
 8003452:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003454:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003458:	4618      	mov	r0, r3
 800345a:	371c      	adds	r7, #28
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800346e:	2300      	movs	r3, #0
 8003470:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8003472:	2300      	movs	r3, #0
 8003474:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003476:	f107 030e 	add.w	r3, r7, #14
 800347a:	461a      	mov	r2, r3
 800347c:	2101      	movs	r1, #1
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7ff fa00 	bl	8002884 <VL53L0X_RdByte>
 8003484:	4603      	mov	r3, r0
 8003486:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8003488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d107      	bne.n	80034a0 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8003490:	7bba      	ldrb	r2, [r7, #14]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2100      	movs	r1, #0
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7ff ff92 	bl	80033c0 <sequence_step_enabled>
 800349c:	4603      	mov	r3, r0
 800349e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80034a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d108      	bne.n	80034ba <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80034a8:	7bba      	ldrb	r2, [r7, #14]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	3302      	adds	r3, #2
 80034ae:	2101      	movs	r1, #1
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff ff85 	bl	80033c0 <sequence_step_enabled>
 80034b6:	4603      	mov	r3, r0
 80034b8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80034ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d108      	bne.n	80034d4 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80034c2:	7bba      	ldrb	r2, [r7, #14]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	3301      	adds	r3, #1
 80034c8:	2102      	movs	r1, #2
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff ff78 	bl	80033c0 <sequence_step_enabled>
 80034d0:	4603      	mov	r3, r0
 80034d2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80034d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d108      	bne.n	80034ee <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80034dc:	7bba      	ldrb	r2, [r7, #14]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	3303      	adds	r3, #3
 80034e2:	2103      	movs	r1, #3
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff ff6b 	bl	80033c0 <sequence_step_enabled>
 80034ea:	4603      	mov	r3, r0
 80034ec:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80034ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d108      	bne.n	8003508 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80034f6:	7bba      	ldrb	r2, [r7, #14]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	3304      	adds	r3, #4
 80034fc:	2104      	movs	r1, #4
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff ff5e 	bl	80033c0 <sequence_step_enabled>
 8003504:	4603      	mov	r3, r0
 8003506:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003508:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800351e:	2300      	movs	r3, #0
 8003520:	75fb      	strb	r3, [r7, #23]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8003522:	f107 030e 	add.w	r3, r7, #14
 8003526:	461a      	mov	r2, r3
 8003528:	21f8      	movs	r1, #248	; 0xf8
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff f9d4 	bl	80028d8 <VL53L0X_RdWord>
 8003530:	4603      	mov	r3, r0
 8003532:	75fb      	strb	r3, [r7, #23]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8003534:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d112      	bne.n	8003562 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x4e>
		if (osc_calibrate_val != 0) {
 800353c:	89fb      	ldrh	r3, [r7, #14]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d006      	beq.n	8003550 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x3c>
			IMPeriodMilliSeconds =
				InterMeasurementPeriodMilliSeconds
					* osc_calibrate_val;
 8003542:	89fb      	ldrh	r3, [r7, #14]
 8003544:	461a      	mov	r2, r3
			IMPeriodMilliSeconds =
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	fb02 f303 	mul.w	r3, r2, r3
 800354c:	613b      	str	r3, [r7, #16]
 800354e:	e001      	b.n	8003554 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x40>
		} else {
			IMPeriodMilliSeconds =
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	613b      	str	r3, [r7, #16]
				InterMeasurementPeriodMilliSeconds;
		}
		Status = VL53L0X_WrDWord(Dev,
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	2104      	movs	r1, #4
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff f92d 	bl	80027b8 <VL53L0X_WrDWord>
 800355e:	4603      	mov	r3, r0
 8003560:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003562:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d102      	bne.n	8003570 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x5c>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			InterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003570:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003586:	2300      	movs	r3, #0
 8003588:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800358a:	f107 030c 	add.w	r3, r7, #12
 800358e:	461a      	mov	r2, r3
 8003590:	21f8      	movs	r1, #248	; 0xf8
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff f9a0 	bl	80028d8 <VL53L0X_RdWord>
 8003598:	4603      	mov	r3, r0
 800359a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800359c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d108      	bne.n	80035b6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80035a4:	f107 0308 	add.w	r3, r7, #8
 80035a8:	461a      	mov	r2, r3
 80035aa:	2104      	movs	r1, #4
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7ff f9cb 	bl	8002948 <VL53L0X_RdDWord>
 80035b2:	4603      	mov	r3, r0
 80035b4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80035b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10c      	bne.n	80035d8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80035be:	89bb      	ldrh	r3, [r7, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	89ba      	ldrh	r2, [r7, #12]
 80035c8:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80035d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80035ee:	2300      	movs	r3, #0
 80035f0:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	7f1b      	ldrb	r3, [r3, #28]
 80035f6:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	7bba      	ldrb	r2, [r7, #14]
 80035fc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80035fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b086      	sub	sp, #24
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003618:	2300      	movs	r3, #0
 800361a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800361c:	f107 030e 	add.w	r3, r7, #14
 8003620:	461a      	mov	r2, r3
 8003622:	2120      	movs	r1, #32
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7ff f957 	bl	80028d8 <VL53L0X_RdWord>
 800362a:	4603      	mov	r3, r0
 800362c:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800362e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d118      	bne.n	8003668 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8003636:	89fb      	ldrh	r3, [r7, #14]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d109      	bne.n	8003650 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	771a      	strb	r2, [r3, #28]
 800364e:	e00b      	b.n	8003668 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8003650:	89fb      	ldrh	r3, [r7, #14]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003668:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	807b      	strh	r3, [r7, #2]
 8003680:	4613      	mov	r3, r2
 8003682:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003684:	2300      	movs	r3, #0
 8003686:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8003688:	2300      	movs	r3, #0
 800368a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003694:	887b      	ldrh	r3, [r7, #2]
 8003696:	2b05      	cmp	r3, #5
 8003698:	d902      	bls.n	80036a0 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800369a:	23fc      	movs	r3, #252	; 0xfc
 800369c:	75fb      	strb	r3, [r7, #23]
 800369e:	e05b      	b.n	8003758 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80036a0:	787b      	ldrb	r3, [r7, #1]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80036a6:	2300      	movs	r3, #0
 80036a8:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80036aa:	2300      	movs	r3, #0
 80036ac:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80036ae:	2301      	movs	r3, #1
 80036b0:	73bb      	strb	r3, [r7, #14]
 80036b2:	e00a      	b.n	80036ca <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80036b4:	887b      	ldrh	r3, [r7, #2]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	330c      	adds	r3, #12
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80036c6:	2301      	movs	r3, #1
 80036c8:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80036ca:	887b      	ldrh	r3, [r7, #2]
 80036cc:	2b05      	cmp	r3, #5
 80036ce:	d841      	bhi.n	8003754 <VL53L0X_SetLimitCheckEnable+0xe0>
 80036d0:	a201      	add	r2, pc, #4	; (adr r2, 80036d8 <VL53L0X_SetLimitCheckEnable+0x64>)
 80036d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d6:	bf00      	nop
 80036d8:	080036f1 	.word	0x080036f1
 80036dc:	080036fb 	.word	0x080036fb
 80036e0:	08003711 	.word	0x08003711
 80036e4:	0800371b 	.word	0x0800371b
 80036e8:	08003725 	.word	0x08003725
 80036ec:	0800373d 	.word	0x0800373d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	7bfa      	ldrb	r2, [r7, #15]
 80036f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80036f8:	e02e      	b.n	8003758 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80036fe:	b29b      	uxth	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	2144      	movs	r1, #68	; 0x44
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff f82d 	bl	8002764 <VL53L0X_WrWord>
 800370a:	4603      	mov	r3, r0
 800370c:	75fb      	strb	r3, [r7, #23]

			break;
 800370e:	e023      	b.n	8003758 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	7bfa      	ldrb	r2, [r7, #15]
 8003714:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8003718:	e01e      	b.n	8003758 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	7bfa      	ldrb	r2, [r7, #15]
 800371e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8003722:	e019      	b.n	8003758 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8003724:	7bbb      	ldrb	r3, [r7, #14]
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800372a:	7b7b      	ldrb	r3, [r7, #13]
 800372c:	22fe      	movs	r2, #254	; 0xfe
 800372e:	2160      	movs	r1, #96	; 0x60
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f7ff f873 	bl	800281c <VL53L0X_UpdateByte>
 8003736:	4603      	mov	r3, r0
 8003738:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800373a:	e00d      	b.n	8003758 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800373c:	7bbb      	ldrb	r3, [r7, #14]
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8003742:	7b7b      	ldrb	r3, [r7, #13]
 8003744:	22ef      	movs	r2, #239	; 0xef
 8003746:	2160      	movs	r1, #96	; 0x60
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff f867 	bl	800281c <VL53L0X_UpdateByte>
 800374e:	4603      	mov	r3, r0
 8003750:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8003752:	e001      	b.n	8003758 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003754:	23fc      	movs	r3, #252	; 0xfc
 8003756:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003758:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10f      	bne.n	8003780 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8003760:	787b      	ldrb	r3, [r7, #1]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d106      	bne.n	8003774 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003766:	887b      	ldrh	r3, [r7, #2]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	4413      	add	r3, r2
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003772:	e005      	b.n	8003780 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003774:	887b      	ldrh	r3, [r7, #2]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	4413      	add	r3, r2
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003780:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	460b      	mov	r3, r1
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800379a:	2300      	movs	r3, #0
 800379c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800379e:	897b      	ldrh	r3, [r7, #10]
 80037a0:	2b05      	cmp	r3, #5
 80037a2:	d905      	bls.n	80037b0 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80037a4:	23fc      	movs	r3, #252	; 0xfc
 80037a6:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	701a      	strb	r2, [r3, #0]
 80037ae:	e008      	b.n	80037c2 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80037b0:	897b      	ldrh	r3, [r7, #10]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4413      	add	r3, r2
 80037b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037ba:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	7dba      	ldrb	r2, [r7, #22]
 80037c0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80037c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	371c      	adds	r7, #28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
	...

080037d4 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	460b      	mov	r3, r1
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80037e2:	2300      	movs	r3, #0
 80037e4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80037e6:	897b      	ldrh	r3, [r7, #10]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4413      	add	r3, r2
 80037ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037f0:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80037f2:	7dbb      	ldrb	r3, [r7, #22]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d107      	bne.n	8003808 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80037f8:	897b      	ldrh	r3, [r7, #10]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	330c      	adds	r3, #12
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	605a      	str	r2, [r3, #4]
 8003806:	e040      	b.n	800388a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8003808:	897b      	ldrh	r3, [r7, #10]
 800380a:	2b05      	cmp	r3, #5
 800380c:	d830      	bhi.n	8003870 <VL53L0X_SetLimitCheckValue+0x9c>
 800380e:	a201      	add	r2, pc, #4	; (adr r2, 8003814 <VL53L0X_SetLimitCheckValue+0x40>)
 8003810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003814:	0800382d 	.word	0x0800382d
 8003818:	08003835 	.word	0x08003835
 800381c:	0800384b 	.word	0x0800384b
 8003820:	08003853 	.word	0x08003853
 8003824:	0800385b 	.word	0x0800385b
 8003828:	0800385b 	.word	0x0800385b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8003832:	e01f      	b.n	8003874 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8003838:	b29b      	uxth	r3, r3
 800383a:	461a      	mov	r2, r3
 800383c:	2144      	movs	r1, #68	; 0x44
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f7fe ff90 	bl	8002764 <VL53L0X_WrWord>
 8003844:	4603      	mov	r3, r0
 8003846:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8003848:	e014      	b.n	8003874 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8003850:	e010      	b.n	8003874 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8003858:	e00c      	b.n	8003874 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800385e:	b29b      	uxth	r3, r3
 8003860:	461a      	mov	r2, r3
 8003862:	2164      	movs	r1, #100	; 0x64
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f7fe ff7d 	bl	8002764 <VL53L0X_WrWord>
 800386a:	4603      	mov	r3, r0
 800386c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800386e:	e001      	b.n	8003874 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003870:	23fc      	movs	r3, #252	; 0xfc
 8003872:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8003874:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d106      	bne.n	800388a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800387c:	897b      	ldrh	r3, [r7, #10]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	330c      	adds	r3, #12
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800388a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop

08003898 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	460b      	mov	r3, r1
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80038a6:	2300      	movs	r3, #0
 80038a8:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80038aa:	2300      	movs	r3, #0
 80038ac:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80038ae:	897b      	ldrh	r3, [r7, #10]
 80038b0:	2b05      	cmp	r3, #5
 80038b2:	d847      	bhi.n	8003944 <VL53L0X_GetLimitCheckValue+0xac>
 80038b4:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <VL53L0X_GetLimitCheckValue+0x24>)
 80038b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ba:	bf00      	nop
 80038bc:	080038d5 	.word	0x080038d5
 80038c0:	080038e1 	.word	0x080038e1
 80038c4:	08003907 	.word	0x08003907
 80038c8:	08003913 	.word	0x08003913
 80038cc:	0800391f 	.word	0x0800391f
 80038d0:	0800391f 	.word	0x0800391f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d8:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80038da:	2300      	movs	r3, #0
 80038dc:	77bb      	strb	r3, [r7, #30]
		break;
 80038de:	e033      	b.n	8003948 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80038e0:	f107 0316 	add.w	r3, r7, #22
 80038e4:	461a      	mov	r2, r3
 80038e6:	2144      	movs	r1, #68	; 0x44
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f7fe fff5 	bl	80028d8 <VL53L0X_RdWord>
 80038ee:	4603      	mov	r3, r0
 80038f0:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80038f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d102      	bne.n	8003900 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80038fa:	8afb      	ldrh	r3, [r7, #22]
 80038fc:	025b      	lsls	r3, r3, #9
 80038fe:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8003900:	2301      	movs	r3, #1
 8003902:	77bb      	strb	r3, [r7, #30]
		break;
 8003904:	e020      	b.n	8003948 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	77bb      	strb	r3, [r7, #30]
		break;
 8003910:	e01a      	b.n	8003948 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8003918:	2300      	movs	r3, #0
 800391a:	77bb      	strb	r3, [r7, #30]
		break;
 800391c:	e014      	b.n	8003948 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800391e:	f107 0316 	add.w	r3, r7, #22
 8003922:	461a      	mov	r2, r3
 8003924:	2164      	movs	r1, #100	; 0x64
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f7fe ffd6 	bl	80028d8 <VL53L0X_RdWord>
 800392c:	4603      	mov	r3, r0
 800392e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8003930:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d102      	bne.n	800393e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8003938:	8afb      	ldrh	r3, [r7, #22]
 800393a:	025b      	lsls	r3, r3, #9
 800393c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800393e:	2300      	movs	r3, #0
 8003940:	77bb      	strb	r3, [r7, #30]
		break;
 8003942:	e001      	b.n	8003948 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003944:	23fc      	movs	r3, #252	; 0xfc
 8003946:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003948:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d12a      	bne.n	80039a6 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8003950:	7fbb      	ldrb	r3, [r7, #30]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d124      	bne.n	80039a0 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d110      	bne.n	800397e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800395c:	897b      	ldrh	r3, [r7, #10]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	330c      	adds	r3, #12
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003970:	897b      	ldrh	r3, [r7, #10]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4413      	add	r3, r2
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800397c:	e013      	b.n	80039a6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003984:	897b      	ldrh	r3, [r7, #10]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	330c      	adds	r3, #12
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003992:	897b      	ldrh	r3, [r7, #10]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4413      	add	r3, r2
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800399e:	e002      	b.n	80039a6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80039a6:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3720      	adds	r7, #32
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop

080039b4 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80039be:	2300      	movs	r3, #0
 80039c0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80039c2:	f107 030e 	add.w	r3, r7, #14
 80039c6:	461a      	mov	r2, r3
 80039c8:	2101      	movs	r1, #1
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fe ff5a 	bl	8002884 <VL53L0X_RdByte>
 80039d0:	4603      	mov	r3, r0
 80039d2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80039d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10e      	bne.n	80039fa <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80039dc:	7bba      	ldrb	r2, [r7, #14]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80039e4:	7bbb      	ldrb	r3, [r7, #14]
 80039e6:	b25b      	sxtb	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	da03      	bge.n	80039f4 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2201      	movs	r2, #1
 80039f0:	701a      	strb	r2, [r3, #0]
 80039f2:	e002      	b.n	80039fa <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2200      	movs	r2, #0
 80039f8:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80039fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d104      	bne.n	8003a0c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	781a      	ldrb	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a20:	2300      	movs	r3, #0
 8003a22:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8003a24:	f107 030e 	add.w	r3, r7, #14
 8003a28:	4619      	mov	r1, r3
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff fbb6 	bl	800319c <VL53L0X_GetDeviceMode>
 8003a30:	4603      	mov	r3, r0
 8003a32:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8003a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d107      	bne.n	8003a4c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8003a3c:	7bbb      	ldrb	r3, [r7, #14]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d104      	bne.n	8003a4c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f898 	bl	8003b78 <VL53L0X_StartMeasurement>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d104      	bne.n	8003a5e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f001 fb3f 	bl	80050d8 <VL53L0X_measurement_poll_for_completion>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8003a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d106      	bne.n	8003a74 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8003a66:	7bbb      	ldrb	r3, [r7, #14]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d103      	bne.n	8003a74 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2203      	movs	r2, #3
 8003a70:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8003a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8003a90:	2301      	movs	r3, #1
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68b9      	ldr	r1, [r7, #8]
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f001 fae1 	bl	800505e <VL53L0X_perform_ref_calibration>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8003aa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8003ac2:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8003ac4:	7dbb      	ldrb	r3, [r7, #22]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d005      	beq.n	8003ad6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8003aca:	7dbb      	ldrb	r3, [r7, #22]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d002      	beq.n	8003ad6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8003ad0:	7dbb      	ldrb	r3, [r7, #22]
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d147      	bne.n	8003b66 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8003ad6:	f107 030c 	add.w	r3, r7, #12
 8003ada:	f107 0210 	add.w	r2, r7, #16
 8003ade:	2101      	movs	r1, #1
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 fbc3 	bl	800426c <VL53L0X_GetInterruptThresholds>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8003af0:	d803      	bhi.n	8003afa <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8003af2:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8003af4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8003af8:	d935      	bls.n	8003b66 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8003afa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d131      	bne.n	8003b66 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8003b02:	78fb      	ldrb	r3, [r7, #3]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d006      	beq.n	8003b16 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8003b08:	491a      	ldr	r1, [pc, #104]	; (8003b74 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f002 fcbc 	bl	8006488 <VL53L0X_load_tuning_settings>
 8003b10:	4603      	mov	r3, r0
 8003b12:	75fb      	strb	r3, [r7, #23]
 8003b14:	e027      	b.n	8003b66 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8003b16:	2204      	movs	r2, #4
 8003b18:	21ff      	movs	r1, #255	; 0xff
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fe fdfe 	bl	800271c <VL53L0X_WrByte>
 8003b20:	4603      	mov	r3, r0
 8003b22:	461a      	mov	r2, r3
 8003b24:	7dfb      	ldrb	r3, [r7, #23]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	2170      	movs	r1, #112	; 0x70
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fe fdf4 	bl	800271c <VL53L0X_WrByte>
 8003b34:	4603      	mov	r3, r0
 8003b36:	461a      	mov	r2, r3
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003b3e:	2200      	movs	r2, #0
 8003b40:	21ff      	movs	r1, #255	; 0xff
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7fe fdea 	bl	800271c <VL53L0X_WrByte>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	7dfb      	ldrb	r3, [r7, #23]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003b52:	2200      	movs	r2, #0
 8003b54:	2180      	movs	r1, #128	; 0x80
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7fe fde0 	bl	800271c <VL53L0X_WrByte>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	461a      	mov	r2, r3
 8003b60:	7dfb      	ldrb	r3, [r7, #23]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8003b66:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3718      	adds	r7, #24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	2000028c 	.word	0x2000028c

08003b78 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003b80:	2300      	movs	r3, #0
 8003b82:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8003b84:	2301      	movs	r3, #1
 8003b86:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8003b88:	f107 030e 	add.w	r3, r7, #14
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff fb04 	bl	800319c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003b94:	2201      	movs	r2, #1
 8003b96:	2180      	movs	r1, #128	; 0x80
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7fe fdbf 	bl	800271c <VL53L0X_WrByte>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	21ff      	movs	r1, #255	; 0xff
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fe fdb8 	bl	800271c <VL53L0X_WrByte>
 8003bac:	4603      	mov	r3, r0
 8003bae:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7fe fdb1 	bl	800271c <VL53L0X_WrByte>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	2191      	movs	r1, #145	; 0x91
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7fe fda7 	bl	800271c <VL53L0X_WrByte>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7fe fda0 	bl	800271c <VL53L0X_WrByte>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003be0:	2200      	movs	r2, #0
 8003be2:	21ff      	movs	r1, #255	; 0xff
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7fe fd99 	bl	800271c <VL53L0X_WrByte>
 8003bea:	4603      	mov	r3, r0
 8003bec:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2180      	movs	r1, #128	; 0x80
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7fe fd92 	bl	800271c <VL53L0X_WrByte>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8003bfc:	7bbb      	ldrb	r3, [r7, #14]
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	d054      	beq.n	8003cac <VL53L0X_StartMeasurement+0x134>
 8003c02:	2b03      	cmp	r3, #3
 8003c04:	dc6c      	bgt.n	8003ce0 <VL53L0X_StartMeasurement+0x168>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <VL53L0X_StartMeasurement+0x98>
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d034      	beq.n	8003c78 <VL53L0X_StartMeasurement+0x100>
 8003c0e:	e067      	b.n	8003ce0 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8003c10:	2201      	movs	r2, #1
 8003c12:	2100      	movs	r1, #0
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7fe fd81 	bl	800271c <VL53L0X_WrByte>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8003c22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d15d      	bne.n	8003ce6 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d008      	beq.n	8003c46 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8003c34:	f107 030d 	add.w	r3, r7, #13
 8003c38:	461a      	mov	r2, r3
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7fe fe21 	bl	8002884 <VL53L0X_RdByte>
 8003c42:	4603      	mov	r3, r0
 8003c44:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8003c4c:	7b7a      	ldrb	r2, [r7, #13]
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	4013      	ands	r3, r2
 8003c52:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8003c54:	7bfa      	ldrb	r2, [r7, #15]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d107      	bne.n	8003c6a <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8003c5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d103      	bne.n	8003c6a <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003c68:	d3e1      	bcc.n	8003c2e <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003c70:	d339      	bcc.n	8003ce6 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8003c72:	23f9      	movs	r3, #249	; 0xf9
 8003c74:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8003c76:	e036      	b.n	8003ce6 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003c78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d105      	bne.n	8003c8c <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8003c80:	2101      	movs	r1, #1
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff ff12 	bl	8003aac <VL53L0X_CheckAndLoadInterruptSettings>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	2100      	movs	r1, #0
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7fe fd43 	bl	800271c <VL53L0X_WrByte>
 8003c96:	4603      	mov	r3, r0
 8003c98:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8003c9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d123      	bne.n	8003cea <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2204      	movs	r2, #4
 8003ca6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8003caa:	e01e      	b.n	8003cea <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003cac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d105      	bne.n	8003cc0 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7ff fef8 	bl	8003aac <VL53L0X_CheckAndLoadInterruptSettings>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7fe fd29 	bl	800271c <VL53L0X_WrByte>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8003cce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10b      	bne.n	8003cee <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2204      	movs	r2, #4
 8003cda:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8003cde:	e006      	b.n	8003cee <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003ce0:	23f8      	movs	r3, #248	; 0xf8
 8003ce2:	75fb      	strb	r3, [r7, #23]
 8003ce4:	e004      	b.n	8003cf0 <VL53L0X_StartMeasurement+0x178>
		break;
 8003ce6:	bf00      	nop
 8003ce8:	e002      	b.n	8003cf0 <VL53L0X_StartMeasurement+0x178>
		break;
 8003cea:	bf00      	nop
 8003cec:	e000      	b.n	8003cf0 <VL53L0X_StartMeasurement+0x178>
		break;
 8003cee:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8003cf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d06:	2300      	movs	r3, #0
 8003d08:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8003d10:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8003d12:	7bbb      	ldrb	r3, [r7, #14]
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d112      	bne.n	8003d3e <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8003d18:	f107 0308 	add.w	r3, r7, #8
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fb1a 	bl	8004358 <VL53L0X_GetInterruptMaskStatus>
 8003d24:	4603      	mov	r3, r0
 8003d26:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d103      	bne.n	8003d36 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2201      	movs	r2, #1
 8003d32:	701a      	strb	r2, [r3, #0]
 8003d34:	e01c      	b.n	8003d70 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	701a      	strb	r2, [r3, #0]
 8003d3c:	e018      	b.n	8003d70 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8003d3e:	f107 030d 	add.w	r3, r7, #13
 8003d42:	461a      	mov	r2, r3
 8003d44:	2114      	movs	r1, #20
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7fe fd9c 	bl	8002884 <VL53L0X_RdByte>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8003d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10b      	bne.n	8003d70 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8003d58:	7b7b      	ldrb	r3, [r7, #13]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2201      	movs	r2, #1
 8003d66:	701a      	strb	r2, [r3, #0]
 8003d68:	e002      	b.n	8003d70 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8003d7c:	b5b0      	push	{r4, r5, r7, lr}
 8003d7e:	b096      	sub	sp, #88	; 0x58
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d86:	2300      	movs	r3, #0
 8003d88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8003d8c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d90:	230c      	movs	r3, #12
 8003d92:	2114      	movs	r1, #20
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7fe fc95 	bl	80026c4 <VL53L0X_ReadMulti>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8003da0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f040 80d1 	bne.w	8003f4c <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2200      	movs	r2, #0
 8003dae:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8003db6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	021b      	lsls	r3, r3, #8
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8003dd2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	021b      	lsls	r3, r3, #8
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	4413      	add	r3, r2
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	025b      	lsls	r3, r3, #9
 8003de8:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dee:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8003df0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	4413      	add	r3, r2
 8003e02:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8003e06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003e0a:	025b      	lsls	r3, r3, #9
 8003e0c:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8003e12:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	021b      	lsls	r3, r3, #8
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	4413      	add	r3, r2
 8003e24:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003e2e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8003e30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8003e3e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8003e46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8003e4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003e4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e50:	d046      	beq.n	8003ee0 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8003e52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003e54:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003e58:	fb02 f303 	mul.w	r3, r2, r3
 8003e5c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003e60:	4a57      	ldr	r2, [pc, #348]	; (8003fc0 <VL53L0X_GetRangingMeasurementData+0x244>)
 8003e62:	fb82 1203 	smull	r1, r2, r2, r3
 8003e66:	1192      	asrs	r2, r2, #6
 8003e68:	17db      	asrs	r3, r3, #31
 8003e6a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8003e6c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	7f1b      	ldrb	r3, [r3, #28]
 8003e7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8003e7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d02c      	beq.n	8003ee0 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8003e86:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003e88:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003e8c:	fb02 f303 	mul.w	r3, r2, r3
 8003e90:	121a      	asrs	r2, r3, #8
					<= 0) {
 8003e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d10d      	bne.n	8003eb4 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8003e98:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d004      	beq.n	8003eaa <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8003ea0:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8003ea4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003ea8:	e016      	b.n	8003ed8 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8003eaa:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8003eae:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003eb2:	e011      	b.n	8003ed8 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8003eb4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003eb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003eba:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8003ebe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003ec0:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8003ec4:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8003ec8:	121b      	asrs	r3, r3, #8
 8003eca:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8003ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ece:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8003ed0:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8003ed4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8003ed8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003edc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8003ee0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00d      	beq.n	8003f04 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8003ee8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003eec:	089b      	lsrs	r3, r3, #2
 8003eee:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8003ef4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	019b      	lsls	r3, r3, #6
 8003efc:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	75da      	strb	r2, [r3, #23]
 8003f02:	e006      	b.n	8003f12 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003f0a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8003f12:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003f16:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8003f1a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8003f1e:	9301      	str	r3, [sp, #4]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	4613      	mov	r3, r2
 8003f26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f002 ff4b 	bl	8006dc4 <VL53L0X_get_pal_range_status>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	461a      	mov	r2, r3
 8003f32:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8003f3c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d103      	bne.n	8003f4c <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8003f44:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003f4c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d12f      	bne.n	8003fb4 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f107 040c 	add.w	r4, r7, #12
 8003f5a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8003f5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003f66:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8003f6e:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8003f74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8003f7c:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8003f82:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8003f88:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8003f8e:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8003f94:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8003f9a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8003fa4:	f107 050c 	add.w	r5, r7, #12
 8003fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003fb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003fb4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3750      	adds	r7, #80	; 0x50
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bdb0      	pop	{r4, r5, r7, pc}
 8003fc0:	10624dd3 	.word	0x10624dd3

08003fc4 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7ff f8b5 	bl	8003144 <VL53L0X_SetDeviceMode>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d104      	bne.n	8003ff0 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7ff fd16 	bl	8003a18 <VL53L0X_PerformSingleMeasurement>
 8003fec:	4603      	mov	r3, r0
 8003fee:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d105      	bne.n	8004004 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8003ff8:	6839      	ldr	r1, [r7, #0]
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff febe 	bl	8003d7c <VL53L0X_GetRangingMeasurementData>
 8004000:	4603      	mov	r3, r0
 8004002:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8004004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d105      	bne.n	8004018 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800400c:	2100      	movs	r1, #0
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f962 	bl	80042d8 <VL53L0X_ClearInterruptMask>
 8004014:	4603      	mov	r3, r0
 8004016:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8004018:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	4608      	mov	r0, r1
 800402e:	4611      	mov	r1, r2
 8004030:	461a      	mov	r2, r3
 8004032:	4603      	mov	r3, r0
 8004034:	70fb      	strb	r3, [r7, #3]
 8004036:	460b      	mov	r3, r1
 8004038:	70bb      	strb	r3, [r7, #2]
 800403a:	4613      	mov	r3, r2
 800403c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800403e:	2300      	movs	r3, #0
 8004040:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8004042:	78fb      	ldrb	r3, [r7, #3]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8004048:	23f6      	movs	r3, #246	; 0xf6
 800404a:	73fb      	strb	r3, [r7, #15]
 800404c:	e107      	b.n	800425e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800404e:	78bb      	ldrb	r3, [r7, #2]
 8004050:	2b14      	cmp	r3, #20
 8004052:	d110      	bne.n	8004076 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004054:	7e3b      	ldrb	r3, [r7, #24]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d102      	bne.n	8004060 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800405a:	2310      	movs	r3, #16
 800405c:	73bb      	strb	r3, [r7, #14]
 800405e:	e001      	b.n	8004064 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8004060:	2301      	movs	r3, #1
 8004062:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8004064:	7bbb      	ldrb	r3, [r7, #14]
 8004066:	461a      	mov	r2, r3
 8004068:	2184      	movs	r1, #132	; 0x84
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fe fb56 	bl	800271c <VL53L0X_WrByte>
 8004070:	4603      	mov	r3, r0
 8004072:	73fb      	strb	r3, [r7, #15]
 8004074:	e0f3      	b.n	800425e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8004076:	78bb      	ldrb	r3, [r7, #2]
 8004078:	2b15      	cmp	r3, #21
 800407a:	f040 8097 	bne.w	80041ac <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800407e:	2201      	movs	r2, #1
 8004080:	21ff      	movs	r1, #255	; 0xff
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fe fb4a 	bl	800271c <VL53L0X_WrByte>
 8004088:	4603      	mov	r3, r0
 800408a:	461a      	mov	r2, r3
 800408c:	7bfb      	ldrb	r3, [r7, #15]
 800408e:	4313      	orrs	r3, r2
 8004090:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004092:	2200      	movs	r2, #0
 8004094:	2100      	movs	r1, #0
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fe fb40 	bl	800271c <VL53L0X_WrByte>
 800409c:	4603      	mov	r3, r0
 800409e:	461a      	mov	r2, r3
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80040a6:	2200      	movs	r2, #0
 80040a8:	21ff      	movs	r1, #255	; 0xff
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fe fb36 	bl	800271c <VL53L0X_WrByte>
 80040b0:	4603      	mov	r3, r0
 80040b2:	461a      	mov	r2, r3
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80040ba:	2201      	movs	r2, #1
 80040bc:	2180      	movs	r1, #128	; 0x80
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fe fb2c 	bl	800271c <VL53L0X_WrByte>
 80040c4:	4603      	mov	r3, r0
 80040c6:	461a      	mov	r2, r3
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80040ce:	2202      	movs	r2, #2
 80040d0:	2185      	movs	r1, #133	; 0x85
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7fe fb22 	bl	800271c <VL53L0X_WrByte>
 80040d8:	4603      	mov	r3, r0
 80040da:	461a      	mov	r2, r3
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
 80040de:	4313      	orrs	r3, r2
 80040e0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80040e2:	2204      	movs	r2, #4
 80040e4:	21ff      	movs	r1, #255	; 0xff
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fe fb18 	bl	800271c <VL53L0X_WrByte>
 80040ec:	4603      	mov	r3, r0
 80040ee:	461a      	mov	r2, r3
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80040f6:	2200      	movs	r2, #0
 80040f8:	21cd      	movs	r1, #205	; 0xcd
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fe fb0e 	bl	800271c <VL53L0X_WrByte>
 8004100:	4603      	mov	r3, r0
 8004102:	461a      	mov	r2, r3
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	4313      	orrs	r3, r2
 8004108:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800410a:	2211      	movs	r2, #17
 800410c:	21cc      	movs	r1, #204	; 0xcc
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fe fb04 	bl	800271c <VL53L0X_WrByte>
 8004114:	4603      	mov	r3, r0
 8004116:	461a      	mov	r2, r3
 8004118:	7bfb      	ldrb	r3, [r7, #15]
 800411a:	4313      	orrs	r3, r2
 800411c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800411e:	2207      	movs	r2, #7
 8004120:	21ff      	movs	r1, #255	; 0xff
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7fe fafa 	bl	800271c <VL53L0X_WrByte>
 8004128:	4603      	mov	r3, r0
 800412a:	461a      	mov	r2, r3
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	4313      	orrs	r3, r2
 8004130:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8004132:	2200      	movs	r2, #0
 8004134:	21be      	movs	r1, #190	; 0xbe
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fe faf0 	bl	800271c <VL53L0X_WrByte>
 800413c:	4603      	mov	r3, r0
 800413e:	461a      	mov	r2, r3
 8004140:	7bfb      	ldrb	r3, [r7, #15]
 8004142:	4313      	orrs	r3, r2
 8004144:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8004146:	2206      	movs	r2, #6
 8004148:	21ff      	movs	r1, #255	; 0xff
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fe fae6 	bl	800271c <VL53L0X_WrByte>
 8004150:	4603      	mov	r3, r0
 8004152:	461a      	mov	r2, r3
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	4313      	orrs	r3, r2
 8004158:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800415a:	2209      	movs	r2, #9
 800415c:	21cc      	movs	r1, #204	; 0xcc
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7fe fadc 	bl	800271c <VL53L0X_WrByte>
 8004164:	4603      	mov	r3, r0
 8004166:	461a      	mov	r2, r3
 8004168:	7bfb      	ldrb	r3, [r7, #15]
 800416a:	4313      	orrs	r3, r2
 800416c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800416e:	2200      	movs	r2, #0
 8004170:	21ff      	movs	r1, #255	; 0xff
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fe fad2 	bl	800271c <VL53L0X_WrByte>
 8004178:	4603      	mov	r3, r0
 800417a:	461a      	mov	r2, r3
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	4313      	orrs	r3, r2
 8004180:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004182:	2201      	movs	r2, #1
 8004184:	21ff      	movs	r1, #255	; 0xff
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fe fac8 	bl	800271c <VL53L0X_WrByte>
 800418c:	4603      	mov	r3, r0
 800418e:	461a      	mov	r2, r3
 8004190:	7bfb      	ldrb	r3, [r7, #15]
 8004192:	4313      	orrs	r3, r2
 8004194:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004196:	2200      	movs	r2, #0
 8004198:	2100      	movs	r1, #0
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7fe fabe 	bl	800271c <VL53L0X_WrByte>
 80041a0:	4603      	mov	r3, r0
 80041a2:	461a      	mov	r2, r3
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	73fb      	strb	r3, [r7, #15]
 80041aa:	e058      	b.n	800425e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80041ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d121      	bne.n	80041f8 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80041b4:	787b      	ldrb	r3, [r7, #1]
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d81b      	bhi.n	80041f2 <VL53L0X_SetGpioConfig+0x1ce>
 80041ba:	a201      	add	r2, pc, #4	; (adr r2, 80041c0 <VL53L0X_SetGpioConfig+0x19c>)
 80041bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c0:	080041d5 	.word	0x080041d5
 80041c4:	080041db 	.word	0x080041db
 80041c8:	080041e1 	.word	0x080041e1
 80041cc:	080041e7 	.word	0x080041e7
 80041d0:	080041ed 	.word	0x080041ed
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80041d4:	2300      	movs	r3, #0
 80041d6:	73bb      	strb	r3, [r7, #14]
				break;
 80041d8:	e00f      	b.n	80041fa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80041da:	2301      	movs	r3, #1
 80041dc:	73bb      	strb	r3, [r7, #14]
				break;
 80041de:	e00c      	b.n	80041fa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80041e0:	2302      	movs	r3, #2
 80041e2:	73bb      	strb	r3, [r7, #14]
				break;
 80041e4:	e009      	b.n	80041fa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80041e6:	2303      	movs	r3, #3
 80041e8:	73bb      	strb	r3, [r7, #14]
				break;
 80041ea:	e006      	b.n	80041fa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80041ec:	2304      	movs	r3, #4
 80041ee:	73bb      	strb	r3, [r7, #14]
				break;
 80041f0:	e003      	b.n	80041fa <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80041f2:	23f5      	movs	r3, #245	; 0xf5
 80041f4:	73fb      	strb	r3, [r7, #15]
 80041f6:	e000      	b.n	80041fa <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80041f8:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80041fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d107      	bne.n	8004212 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8004202:	7bbb      	ldrb	r3, [r7, #14]
 8004204:	461a      	mov	r2, r3
 8004206:	210a      	movs	r1, #10
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7fe fa87 	bl	800271c <VL53L0X_WrByte>
 800420e:	4603      	mov	r3, r0
 8004210:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8004212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10f      	bne.n	800423a <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800421a:	7e3b      	ldrb	r3, [r7, #24]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d102      	bne.n	8004226 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8004220:	2300      	movs	r3, #0
 8004222:	73bb      	strb	r3, [r7, #14]
 8004224:	e001      	b.n	800422a <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8004226:	2310      	movs	r3, #16
 8004228:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800422a:	7bbb      	ldrb	r3, [r7, #14]
 800422c:	22ef      	movs	r2, #239	; 0xef
 800422e:	2184      	movs	r1, #132	; 0x84
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7fe faf3 	bl	800281c <VL53L0X_UpdateByte>
 8004236:	4603      	mov	r3, r0
 8004238:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800423a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d103      	bne.n	800424a <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	787a      	ldrb	r2, [r7, #1]
 8004246:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800424a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d105      	bne.n	800425e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004252:	2100      	movs	r1, #0
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f83f 	bl	80042d8 <VL53L0X_ClearInterruptMask>
 800425a:	4603      	mov	r3, r0
 800425c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800425e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop

0800426c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	607a      	str	r2, [r7, #4]
 8004276:	603b      	str	r3, [r7, #0]
 8004278:	460b      	mov	r3, r1
 800427a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800427c:	2300      	movs	r3, #0
 800427e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8004280:	f107 0314 	add.w	r3, r7, #20
 8004284:	461a      	mov	r2, r3
 8004286:	210e      	movs	r1, #14
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f7fe fb25 	bl	80028d8 <VL53L0X_RdWord>
 800428e:	4603      	mov	r3, r0
 8004290:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004292:	8abb      	ldrh	r3, [r7, #20]
 8004294:	045b      	lsls	r3, r3, #17
 8004296:	461a      	mov	r2, r3
 8004298:	4b0e      	ldr	r3, [pc, #56]	; (80042d4 <VL53L0X_GetInterruptThresholds+0x68>)
 800429a:	4013      	ands	r3, r2
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80042a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10f      	bne.n	80042c8 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80042a8:	f107 0314 	add.w	r3, r7, #20
 80042ac:	461a      	mov	r2, r3
 80042ae:	210c      	movs	r1, #12
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f7fe fb11 	bl	80028d8 <VL53L0X_RdWord>
 80042b6:	4603      	mov	r3, r0
 80042b8:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80042ba:	8abb      	ldrh	r3, [r7, #20]
 80042bc:	045b      	lsls	r3, r3, #17
 80042be:	461a      	mov	r2, r3
 80042c0:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <VL53L0X_GetInterruptThresholds+0x68>)
 80042c2:	4013      	ands	r3, r2
		*pThresholdHigh =
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80042c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	1ffe0000 	.word	0x1ffe0000

080042d8 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042e2:	2300      	movs	r3, #0
 80042e4:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80042e6:	2300      	movs	r3, #0
 80042e8:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80042ea:	2201      	movs	r2, #1
 80042ec:	210b      	movs	r1, #11
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fe fa14 	bl	800271c <VL53L0X_WrByte>
 80042f4:	4603      	mov	r3, r0
 80042f6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80042f8:	2200      	movs	r2, #0
 80042fa:	210b      	movs	r1, #11
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7fe fa0d 	bl	800271c <VL53L0X_WrByte>
 8004302:	4603      	mov	r3, r0
 8004304:	461a      	mov	r2, r3
 8004306:	7bfb      	ldrb	r3, [r7, #15]
 8004308:	4313      	orrs	r3, r2
 800430a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800430c:	f107 030d 	add.w	r3, r7, #13
 8004310:	461a      	mov	r2, r3
 8004312:	2113      	movs	r1, #19
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7fe fab5 	bl	8002884 <VL53L0X_RdByte>
 800431a:	4603      	mov	r3, r0
 800431c:	461a      	mov	r2, r3
 800431e:	7bfb      	ldrb	r3, [r7, #15]
 8004320:	4313      	orrs	r3, r2
 8004322:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8004324:	7bbb      	ldrb	r3, [r7, #14]
 8004326:	3301      	adds	r3, #1
 8004328:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800432a:	7b7b      	ldrb	r3, [r7, #13]
 800432c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8004330:	2b00      	cmp	r3, #0
 8004332:	d006      	beq.n	8004342 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8004334:	7bbb      	ldrb	r3, [r7, #14]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d803      	bhi.n	8004342 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800433a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0d3      	beq.n	80042ea <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8004342:	7bbb      	ldrb	r3, [r7, #14]
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8004348:	23f4      	movs	r3, #244	; 0xf4
 800434a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800434c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004362:	2300      	movs	r3, #0
 8004364:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8004366:	f107 030e 	add.w	r3, r7, #14
 800436a:	461a      	mov	r2, r3
 800436c:	2113      	movs	r1, #19
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fe fa88 	bl	8002884 <VL53L0X_RdByte>
 8004374:	4603      	mov	r3, r0
 8004376:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8004378:	7bbb      	ldrb	r3, [r7, #14]
 800437a:	f003 0207 	and.w	r2, r3, #7
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8004382:	7bbb      	ldrb	r3, [r7, #14]
 8004384:	f003 0318 	and.w	r3, r3, #24
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800438c:	23fa      	movs	r3, #250	; 0xfa
 800438e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004390:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80043a8:	2300      	movs	r3, #0
 80043aa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	68b9      	ldr	r1, [r7, #8]
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f000 fa03 	bl	80047bc <VL53L0X_perform_ref_spad_management>
 80043b6:	4603      	mov	r3, r0
 80043b8:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80043ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b084      	sub	sp, #16
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
 80043ce:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80043d0:	2300      	movs	r3, #0
 80043d2:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80043d4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80043d8:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80043da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043de:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80043e0:	f107 0308 	add.w	r3, r7, #8
 80043e4:	461a      	mov	r2, r3
 80043e6:	2128      	movs	r1, #40	; 0x28
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7fe fa75 	bl	80028d8 <VL53L0X_RdWord>
 80043ee:	4603      	mov	r3, r0
 80043f0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80043f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d11e      	bne.n	8004438 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80043fa:	893b      	ldrh	r3, [r7, #8]
 80043fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004400:	b29b      	uxth	r3, r3
 8004402:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8004404:	893b      	ldrh	r3, [r7, #8]
 8004406:	461a      	mov	r2, r3
 8004408:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800440c:	429a      	cmp	r2, r3
 800440e:	dd0b      	ble.n	8004428 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8004410:	893a      	ldrh	r2, [r7, #8]
 8004412:	897b      	ldrh	r3, [r7, #10]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	b29b      	uxth	r3, r3
 8004418:	b21b      	sxth	r3, r3
 800441a:	461a      	mov	r2, r3
					* 250;
 800441c:	23fa      	movs	r3, #250	; 0xfa
 800441e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	e007      	b.n	8004438 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8004428:	893b      	ldrh	r3, [r7, #8]
 800442a:	b21b      	sxth	r3, r3
 800442c:	461a      	mov	r2, r3
 800442e:	23fa      	movs	r3, #250	; 0xfa
 8004430:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8004438:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8004444:	b480      	push	{r7}
 8004446:	b08b      	sub	sp, #44	; 0x2c
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8004452:	2308      	movs	r3, #8
 8004454:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8004456:	2300      	movs	r3, #0
 8004458:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004460:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	fbb2 f3f3 	udiv	r3, r2, r3
 800446a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	fbb3 f2f2 	udiv	r2, r3, r2
 8004474:	69b9      	ldr	r1, [r7, #24]
 8004476:	fb01 f202 	mul.w	r2, r1, r2
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
 8004482:	e030      	b.n	80044e6 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8004484:	2300      	movs	r3, #0
 8004486:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	4413      	add	r3, r2
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8004492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	429a      	cmp	r2, r3
 8004498:	d11e      	bne.n	80044d8 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800449a:	7ffa      	ldrb	r2, [r7, #31]
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	fa42 f303 	asr.w	r3, r2, r3
 80044a2:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80044a8:	e016      	b.n	80044d8 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80044aa:	7ffb      	ldrb	r3, [r7, #31]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00b      	beq.n	80044cc <get_next_good_spad+0x88>
				success = 1;
 80044b4:	2301      	movs	r3, #1
 80044b6:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	fb03 f202 	mul.w	r2, r3, r2
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	4413      	add	r3, r2
 80044c4:	461a      	mov	r2, r3
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	601a      	str	r2, [r3, #0]
				break;
 80044ca:	e009      	b.n	80044e0 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80044cc:	7ffb      	ldrb	r3, [r7, #31]
 80044ce:	085b      	lsrs	r3, r3, #1
 80044d0:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	3301      	adds	r3, #1
 80044d6:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80044d8:	6a3a      	ldr	r2, [r7, #32]
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d3e4      	bcc.n	80044aa <get_next_good_spad+0x66>
				coarseIndex++) {
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	3301      	adds	r3, #1
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80044e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d202      	bcs.n	80044f4 <get_next_good_spad+0xb0>
 80044ee:	7fbb      	ldrb	r3, [r7, #30]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0c7      	beq.n	8004484 <get_next_good_spad+0x40>
		}
	}
}
 80044f4:	bf00      	nop
 80044f6:	372c      	adds	r7, #44	; 0x2c
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8004508:	2301      	movs	r3, #1
 800450a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	099b      	lsrs	r3, r3, #6
 8004510:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8004512:	4a07      	ldr	r2, [pc, #28]	; (8004530 <is_aperture+0x30>)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <is_aperture+0x22>
		isAperture = 0;
 800451e:	2300      	movs	r3, #0
 8004520:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8004522:	7bfb      	ldrb	r3, [r7, #15]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	20000444 	.word	0x20000444

08004534 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8004534:	b480      	push	{r7}
 8004536:	b089      	sub	sp, #36	; 0x24
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8004540:	2300      	movs	r3, #0
 8004542:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8004544:	2308      	movs	r3, #8
 8004546:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004550:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	fbb3 f2f2 	udiv	r2, r3, r2
 800455a:	69b9      	ldr	r1, [r7, #24]
 800455c:	fb01 f202 	mul.w	r2, r1, r2
 8004560:	1a9b      	subs	r3, r3, r2
 8004562:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	429a      	cmp	r2, r3
 800456a:	d302      	bcc.n	8004572 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800456c:	23ce      	movs	r3, #206	; 0xce
 800456e:	77fb      	strb	r3, [r7, #31]
 8004570:	e010      	b.n	8004594 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	4413      	add	r3, r2
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	b25a      	sxtb	r2, r3
 800457c:	2101      	movs	r1, #1
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	fa01 f303 	lsl.w	r3, r1, r3
 8004584:	b25b      	sxtb	r3, r3
 8004586:	4313      	orrs	r3, r2
 8004588:	b259      	sxtb	r1, r3
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	4413      	add	r3, r2
 8004590:	b2ca      	uxtb	r2, r1
 8004592:	701a      	strb	r2, [r3, #0]

	return status;
 8004594:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3724      	adds	r7, #36	; 0x24
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80045ae:	2306      	movs	r3, #6
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	21b0      	movs	r1, #176	; 0xb0
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7fe f855 	bl	8002664 <VL53L0X_WriteMulti>
 80045ba:	4603      	mov	r3, r0
 80045bc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80045be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80045d4:	2306      	movs	r3, #6
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	21b0      	movs	r1, #176	; 0xb0
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fe f872 	bl	80026c4 <VL53L0X_ReadMulti>
 80045e0:	4603      	mov	r3, r0
 80045e2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80045e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08c      	sub	sp, #48	; 0x30
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	607a      	str	r2, [r7, #4]
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	460b      	mov	r3, r1
 80045fe:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8004600:	2300      	movs	r3, #0
 8004602:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8004606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004608:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800460a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800460c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800460e:	2300      	movs	r3, #0
 8004610:	62bb      	str	r3, [r7, #40]	; 0x28
 8004612:	e02b      	b.n	800466c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8004614:	f107 031c 	add.w	r3, r7, #28
 8004618:	6a3a      	ldr	r2, [r7, #32]
 800461a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7ff ff11 	bl	8004444 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004628:	d103      	bne.n	8004632 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800462a:	23ce      	movs	r3, #206	; 0xce
 800462c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8004630:	e020      	b.n	8004674 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	461a      	mov	r2, r3
 8004636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004638:	4413      	add	r3, r2
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff ff60 	bl	8004500 <is_aperture>
 8004640:	4603      	mov	r3, r0
 8004642:	461a      	mov	r2, r3
 8004644:	7afb      	ldrb	r3, [r7, #11]
 8004646:	4293      	cmp	r3, r2
 8004648:	d003      	beq.n	8004652 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800464a:	23ce      	movs	r3, #206	; 0xce
 800464c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8004650:	e010      	b.n	8004674 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8004656:	6a3a      	ldr	r2, [r7, #32]
 8004658:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800465a:	6838      	ldr	r0, [r7, #0]
 800465c:	f7ff ff6a 	bl	8004534 <enable_spad_bit>
		currentSpad++;
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	3301      	adds	r3, #1
 8004664:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8004666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004668:	3301      	adds	r3, #1
 800466a:	62bb      	str	r3, [r7, #40]	; 0x28
 800466c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800466e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004670:	429a      	cmp	r2, r3
 8004672:	d3cf      	bcc.n	8004614 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8004674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004676:	6a3a      	ldr	r2, [r7, #32]
 8004678:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800467a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800467e:	2b00      	cmp	r3, #0
 8004680:	d106      	bne.n	8004690 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8004682:	6839      	ldr	r1, [r7, #0]
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f7ff ff8d 	bl	80045a4 <set_ref_spad_map>
 800468a:	4603      	mov	r3, r0
 800468c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8004690:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004694:	2b00      	cmp	r3, #0
 8004696:	d121      	bne.n	80046dc <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8004698:	f107 0314 	add.w	r3, r7, #20
 800469c:	4619      	mov	r1, r3
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f7ff ff93 	bl	80045ca <get_ref_spad_map>
 80046a4:	4603      	mov	r3, r0
 80046a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80046aa:	2300      	movs	r3, #0
 80046ac:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80046ae:	e011      	b.n	80046d4 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	4413      	add	r3, r2
 80046b6:	781a      	ldrb	r2, [r3, #0]
 80046b8:	f107 0114 	add.w	r1, r7, #20
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	440b      	add	r3, r1
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d003      	beq.n	80046ce <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80046c6:	23ce      	movs	r3, #206	; 0xce
 80046c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80046cc:	e006      	b.n	80046dc <enable_ref_spads+0xec>
			}
			i++;
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	3301      	adds	r3, #1
 80046d2:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80046d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d8:	429a      	cmp	r2, r3
 80046da:	d3e9      	bcc.n	80046b0 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80046dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3730      	adds	r7, #48	; 0x30
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08a      	sub	sp, #40	; 0x28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80046f2:	2300      	movs	r3, #0
 80046f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004704:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8004708:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800470c:	2b00      	cmp	r3, #0
 800470e:	d107      	bne.n	8004720 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8004710:	22c0      	movs	r2, #192	; 0xc0
 8004712:	2101      	movs	r1, #1
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7fe f801 	bl	800271c <VL53L0X_WrByte>
 800471a:	4603      	mov	r3, r0
 800471c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8004720:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004724:	2b00      	cmp	r3, #0
 8004726:	d108      	bne.n	800473a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8004728:	f107 0308 	add.w	r3, r7, #8
 800472c:	4619      	mov	r1, r3
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7ff fc48 	bl	8003fc4 <VL53L0X_PerformSingleRangingMeasurement>
 8004734:	4603      	mov	r3, r0
 8004736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800473a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800473e:	2b00      	cmp	r3, #0
 8004740:	d107      	bne.n	8004752 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004742:	2201      	movs	r2, #1
 8004744:	21ff      	movs	r1, #255	; 0xff
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fd ffe8 	bl	800271c <VL53L0X_WrByte>
 800474c:	4603      	mov	r3, r0
 800474e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8004752:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004756:	2b00      	cmp	r3, #0
 8004758:	d107      	bne.n	800476a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	21b6      	movs	r1, #182	; 0xb6
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7fe f8ba 	bl	80028d8 <VL53L0X_RdWord>
 8004764:	4603      	mov	r3, r0
 8004766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800476a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800476e:	2b00      	cmp	r3, #0
 8004770:	d107      	bne.n	8004782 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004772:	2200      	movs	r2, #0
 8004774:	21ff      	movs	r1, #255	; 0xff
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7fd ffd0 	bl	800271c <VL53L0X_WrByte>
 800477c:	4603      	mov	r3, r0
 800477e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8004782:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004786:	2b00      	cmp	r3, #0
 8004788:	d112      	bne.n	80047b0 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800478a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800478e:	461a      	mov	r2, r3
 8004790:	2101      	movs	r1, #1
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7fd ffc2 	bl	800271c <VL53L0X_WrByte>
 8004798:	4603      	mov	r3, r0
 800479a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800479e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d104      	bne.n	80047b0 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80047ac:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80047b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3728      	adds	r7, #40	; 0x28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80047bc:	b590      	push	{r4, r7, lr}
 80047be:	b09d      	sub	sp, #116	; 0x74
 80047c0:	af06      	add	r7, sp, #24
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80047c8:	2300      	movs	r3, #0
 80047ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80047ce:	23b4      	movs	r3, #180	; 0xb4
 80047d0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80047d4:	2303      	movs	r3, #3
 80047d6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80047d8:	232c      	movs	r3, #44	; 0x2c
 80047da:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80047dc:	2300      	movs	r3, #0
 80047de:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80047e0:	2300      	movs	r3, #0
 80047e2:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80047e8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80047ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80047ee:	2300      	movs	r3, #0
 80047f0:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80047f2:	2300      	movs	r3, #0
 80047f4:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80047f6:	2306      	movs	r3, #6
 80047f8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80047fe:	2300      	movs	r3, #0
 8004800:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8004802:	2300      	movs	r3, #0
 8004804:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8004808:	2300      	movs	r3, #0
 800480a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800480c:	2300      	movs	r3, #0
 800480e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8004810:	2300      	movs	r3, #0
 8004812:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8004814:	2300      	movs	r3, #0
 8004816:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8004820:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8004822:	2300      	movs	r3, #0
 8004824:	64bb      	str	r3, [r7, #72]	; 0x48
 8004826:	e009      	b.n	800483c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800482c:	4413      	add	r3, r2
 800482e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004832:	2200      	movs	r2, #0
 8004834:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8004836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004838:	3301      	adds	r3, #1
 800483a:	64bb      	str	r3, [r7, #72]	; 0x48
 800483c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800483e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004840:	429a      	cmp	r2, r3
 8004842:	d3f1      	bcc.n	8004828 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004844:	2201      	movs	r2, #1
 8004846:	21ff      	movs	r1, #255	; 0xff
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f7fd ff67 	bl	800271c <VL53L0X_WrByte>
 800484e:	4603      	mov	r3, r0
 8004850:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8004854:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004858:	2b00      	cmp	r3, #0
 800485a:	d107      	bne.n	800486c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800485c:	2200      	movs	r2, #0
 800485e:	214f      	movs	r1, #79	; 0x4f
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f7fd ff5b 	bl	800271c <VL53L0X_WrByte>
 8004866:	4603      	mov	r3, r0
 8004868:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800486c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004870:	2b00      	cmp	r3, #0
 8004872:	d107      	bne.n	8004884 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8004874:	222c      	movs	r2, #44	; 0x2c
 8004876:	214e      	movs	r1, #78	; 0x4e
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f7fd ff4f 	bl	800271c <VL53L0X_WrByte>
 800487e:	4603      	mov	r3, r0
 8004880:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8004884:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004888:	2b00      	cmp	r3, #0
 800488a:	d107      	bne.n	800489c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800488c:	2200      	movs	r2, #0
 800488e:	21ff      	movs	r1, #255	; 0xff
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f7fd ff43 	bl	800271c <VL53L0X_WrByte>
 8004896:	4603      	mov	r3, r0
 8004898:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800489c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d109      	bne.n	80048b8 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80048a4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80048a8:	461a      	mov	r2, r3
 80048aa:	21b6      	movs	r1, #182	; 0xb6
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f7fd ff35 	bl	800271c <VL53L0X_WrByte>
 80048b2:	4603      	mov	r3, r0
 80048b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80048b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d107      	bne.n	80048d0 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80048c0:	2200      	movs	r2, #0
 80048c2:	2180      	movs	r1, #128	; 0x80
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f7fd ff29 	bl	800271c <VL53L0X_WrByte>
 80048ca:	4603      	mov	r3, r0
 80048cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80048d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10a      	bne.n	80048ee <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80048d8:	f107 0210 	add.w	r2, r7, #16
 80048dc:	f107 0111 	add.w	r1, r7, #17
 80048e0:	2300      	movs	r3, #0
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 fbbb 	bl	800505e <VL53L0X_perform_ref_calibration>
 80048e8:	4603      	mov	r3, r0
 80048ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80048ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d121      	bne.n	800493a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80048f6:	2300      	movs	r3, #0
 80048f8:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80048fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048fc:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80048fe:	2300      	movs	r3, #0
 8004900:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8004902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004904:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8004912:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004916:	f107 0218 	add.w	r2, r7, #24
 800491a:	9204      	str	r2, [sp, #16]
 800491c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800491e:	9203      	str	r2, [sp, #12]
 8004920:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004922:	9202      	str	r2, [sp, #8]
 8004924:	9301      	str	r3, [sp, #4]
 8004926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	4623      	mov	r3, r4
 800492c:	4602      	mov	r2, r0
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f7ff fe5e 	bl	80045f0 <enable_ref_spads>
 8004934:	4603      	mov	r3, r0
 8004936:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800493a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800493e:	2b00      	cmp	r3, #0
 8004940:	d174      	bne.n	8004a2c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8004946:	f107 0312 	add.w	r3, r7, #18
 800494a:	4619      	mov	r1, r3
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f7ff fecb 	bl	80046e8 <perform_ref_signal_measurement>
 8004952:	4603      	mov	r3, r0
 8004954:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8004958:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800495c:	2b00      	cmp	r3, #0
 800495e:	d161      	bne.n	8004a24 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8004960:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8004962:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004964:	429a      	cmp	r2, r3
 8004966:	d25d      	bcs.n	8004a24 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8004968:	2300      	movs	r3, #0
 800496a:	64bb      	str	r3, [r7, #72]	; 0x48
 800496c:	e009      	b.n	8004982 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004972:	4413      	add	r3, r2
 8004974:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004978:	2200      	movs	r2, #0
 800497a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800497c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800497e:	3301      	adds	r3, #1
 8004980:	64bb      	str	r3, [r7, #72]	; 0x48
 8004982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004986:	429a      	cmp	r2, r3
 8004988:	d3f1      	bcc.n	800496e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800498a:	e002      	b.n	8004992 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800498c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800498e:	3301      	adds	r3, #1
 8004990:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8004992:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8004996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004998:	4413      	add	r3, r2
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff fdb0 	bl	8004500 <is_aperture>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d103      	bne.n	80049ae <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80049a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80049a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d3ee      	bcc.n	800498c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80049ae:	2301      	movs	r3, #1
 80049b0:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80049b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80049c2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80049c6:	f107 0218 	add.w	r2, r7, #24
 80049ca:	9204      	str	r2, [sp, #16]
 80049cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049ce:	9203      	str	r2, [sp, #12]
 80049d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80049d2:	9202      	str	r2, [sp, #8]
 80049d4:	9301      	str	r3, [sp, #4]
 80049d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	4623      	mov	r3, r4
 80049dc:	4602      	mov	r2, r0
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f7ff fe06 	bl	80045f0 <enable_ref_spads>
 80049e4:	4603      	mov	r3, r0
 80049e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80049ea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d11b      	bne.n	8004a2a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80049f6:	f107 0312 	add.w	r3, r7, #18
 80049fa:	4619      	mov	r1, r3
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f7ff fe73 	bl	80046e8 <perform_ref_signal_measurement>
 8004a02:	4603      	mov	r3, r0
 8004a04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8004a08:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10c      	bne.n	8004a2a <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8004a10:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8004a12:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d208      	bcs.n	8004a2a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8004a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a20:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8004a22:	e002      	b.n	8004a2a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a28:	e000      	b.n	8004a2c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8004a2a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8004a2c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f040 80af 	bne.w	8004b94 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8004a36:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8004a38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	f240 80aa 	bls.w	8004b94 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8004a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8004a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a48:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8004a50:	f107 031c 	add.w	r3, r7, #28
 8004a54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a56:	4618      	mov	r0, r3
 8004a58:	f00f f884 	bl	8013b64 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8004a5c:	8a7b      	ldrh	r3, [r7, #18]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	bfb8      	it	lt
 8004a68:	425b      	neglt	r3, r3
 8004a6a:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8004a72:	e086      	b.n	8004b82 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8004a7a:	f107 0314 	add.w	r3, r7, #20
 8004a7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004a80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a82:	f7ff fcdf 	bl	8004444 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a8c:	d103      	bne.n	8004a96 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004a8e:	23ce      	movs	r3, #206	; 0xce
 8004a90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8004a94:	e07e      	b.n	8004b94 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8004a96:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff fd2e 	bl	8004500 <is_aperture>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d003      	beq.n	8004ab6 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8004ab4:	e06e      	b.n	8004b94 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8004ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab8:	3301      	adds	r3, #1
 8004aba:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8004ac6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004ac8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7ff fd32 	bl	8004534 <enable_spad_bit>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8004ad6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10c      	bne.n	8004af8 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8004ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8004aea:	4619      	mov	r1, r3
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f7ff fd59 	bl	80045a4 <set_ref_spad_map>
 8004af2:	4603      	mov	r3, r0
 8004af4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8004af8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d146      	bne.n	8004b8e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8004b00:	f107 0312 	add.w	r3, r7, #18
 8004b04:	4619      	mov	r1, r3
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f7ff fdee 	bl	80046e8 <perform_ref_signal_measurement>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8004b12:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d13b      	bne.n	8004b92 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8004b1a:	8a7b      	ldrh	r3, [r7, #18]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	bfb8      	it	lt
 8004b26:	425b      	neglt	r3, r3
 8004b28:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8004b2a:	8a7b      	ldrh	r3, [r7, #18]
 8004b2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d21c      	bcs.n	8004b6c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8004b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d914      	bls.n	8004b64 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8004b3a:	f107 031c 	add.w	r3, r7, #28
 8004b3e:	4619      	mov	r1, r3
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f7ff fd2f 	bl	80045a4 <set_ref_spad_map>
 8004b46:	4603      	mov	r3, r0
 8004b48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8004b52:	f107 011c 	add.w	r1, r7, #28
 8004b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f00f f803 	bl	8013b64 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8004b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b60:	3b01      	subs	r3, #1
 8004b62:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8004b64:	2301      	movs	r3, #1
 8004b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b6a:	e00a      	b.n	8004b82 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8004b76:	f107 031c 	add.w	r3, r7, #28
 8004b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f00e fff1 	bl	8013b64 <memcpy>
		while (!complete) {
 8004b82:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f43f af74 	beq.w	8004a74 <VL53L0X_perform_ref_spad_management+0x2b8>
 8004b8c:	e002      	b.n	8004b94 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8004b8e:	bf00      	nop
 8004b90:	e000      	b.n	8004b94 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8004b92:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004b94:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d115      	bne.n	8004bc8 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ba0:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8004ba8:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	781a      	ldrb	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8004bc8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	375c      	adds	r7, #92	; 0x5c
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd90      	pop	{r4, r7, pc}

08004bd4 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8004bd4:	b590      	push	{r4, r7, lr}
 8004bd6:	b093      	sub	sp, #76	; 0x4c
 8004bd8:	af06      	add	r7, sp, #24
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	4613      	mov	r3, r2
 8004be0:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004be2:	2300      	movs	r3, #0
 8004be4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8004bec:	23b4      	movs	r3, #180	; 0xb4
 8004bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8004bf2:	2306      	movs	r3, #6
 8004bf4:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8004bf6:	232c      	movs	r3, #44	; 0x2c
 8004bf8:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	21ff      	movs	r1, #255	; 0xff
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f7fd fd8c 	bl	800271c <VL53L0X_WrByte>
 8004c04:	4603      	mov	r3, r0
 8004c06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8004c0a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d107      	bne.n	8004c22 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8004c12:	2200      	movs	r2, #0
 8004c14:	214f      	movs	r1, #79	; 0x4f
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f7fd fd80 	bl	800271c <VL53L0X_WrByte>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8004c22:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d107      	bne.n	8004c3a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8004c2a:	222c      	movs	r2, #44	; 0x2c
 8004c2c:	214e      	movs	r1, #78	; 0x4e
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f7fd fd74 	bl	800271c <VL53L0X_WrByte>
 8004c34:	4603      	mov	r3, r0
 8004c36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8004c3a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d107      	bne.n	8004c52 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004c42:	2200      	movs	r2, #0
 8004c44:	21ff      	movs	r1, #255	; 0xff
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f7fd fd68 	bl	800271c <VL53L0X_WrByte>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8004c52:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d109      	bne.n	8004c6e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8004c5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c5e:	461a      	mov	r2, r3
 8004c60:	21b6      	movs	r1, #182	; 0xb6
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f7fd fd5a 	bl	800271c <VL53L0X_WrByte>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8004c6e:	2300      	movs	r3, #0
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
 8004c72:	e009      	b.n	8004c88 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004c7e:	2200      	movs	r2, #0
 8004c80:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	3301      	adds	r3, #1
 8004c86:	627b      	str	r3, [r7, #36]	; 0x24
 8004c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d3f1      	bcc.n	8004c74 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8004c90:	79fb      	ldrb	r3, [r7, #7]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d011      	beq.n	8004cba <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004c96:	e002      	b.n	8004c9e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8004c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004c9e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca4:	4413      	add	r3, r2
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff fc2a 	bl	8004500 <is_aperture>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d103      	bne.n	8004cba <VL53L0X_set_reference_spads+0xe6>
 8004cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d3ee      	bcc.n	8004c98 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8004cc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cca:	79f9      	ldrb	r1, [r7, #7]
 8004ccc:	f107 0214 	add.w	r2, r7, #20
 8004cd0:	9204      	str	r2, [sp, #16]
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	9203      	str	r2, [sp, #12]
 8004cd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cd8:	9202      	str	r2, [sp, #8]
 8004cda:	9301      	str	r3, [sp, #4]
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	4623      	mov	r3, r4
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f7ff fc83 	bl	80045f0 <enable_ref_spads>
 8004cea:	4603      	mov	r3, r0
 8004cec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8004cf0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10c      	bne.n	8004d12 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	79fa      	ldrb	r2, [r7, #7]
 8004d0e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8004d12:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3734      	adds	r7, #52	; 0x34
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd90      	pop	{r4, r7, pc}

08004d1e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b084      	sub	sp, #16
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	460b      	mov	r3, r1
 8004d28:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10a      	bne.n	8004d4c <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8004d36:	78fb      	ldrb	r3, [r7, #3]
 8004d38:	f043 0301 	orr.w	r3, r3, #1
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	461a      	mov	r2, r3
 8004d40:	2100      	movs	r1, #0
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7fd fcea 	bl	800271c <VL53L0X_WrByte>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8004d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d104      	bne.n	8004d5e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f9bf 	bl	80050d8 <VL53L0X_measurement_poll_for_completion>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d105      	bne.n	8004d72 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004d66:	2100      	movs	r1, #0
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7ff fab5 	bl	80042d8 <VL53L0X_ClearInterruptMask>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7fd fccc 	bl	800271c <VL53L0X_WrByte>
 8004d84:	4603      	mov	r3, r0
 8004d86:	73fb      	strb	r3, [r7, #15]

	return Status;
 8004d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	4608      	mov	r0, r1
 8004d9e:	4611      	mov	r1, r2
 8004da0:	461a      	mov	r2, r3
 8004da2:	4603      	mov	r3, r0
 8004da4:	70fb      	strb	r3, [r7, #3]
 8004da6:	460b      	mov	r3, r1
 8004da8:	70bb      	strb	r3, [r7, #2]
 8004daa:	4613      	mov	r3, r2
 8004dac:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004dae:	2300      	movs	r3, #0
 8004db0:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8004db2:	2300      	movs	r3, #0
 8004db4:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004db6:	2201      	movs	r2, #1
 8004db8:	21ff      	movs	r1, #255	; 0xff
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7fd fcae 	bl	800271c <VL53L0X_WrByte>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	7bfb      	ldrb	r3, [r7, #15]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004dca:	2200      	movs	r2, #0
 8004dcc:	2100      	movs	r1, #0
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fd fca4 	bl	800271c <VL53L0X_WrByte>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004dde:	2200      	movs	r2, #0
 8004de0:	21ff      	movs	r1, #255	; 0xff
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7fd fc9a 	bl	800271c <VL53L0X_WrByte>
 8004de8:	4603      	mov	r3, r0
 8004dea:	461a      	mov	r2, r3
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8004df2:	78fb      	ldrb	r3, [r7, #3]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01e      	beq.n	8004e36 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8004df8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d009      	beq.n	8004e14 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	21cb      	movs	r1, #203	; 0xcb
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fd fd3d 	bl	8002884 <VL53L0X_RdByte>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004e14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d02a      	beq.n	8004e72 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8004e1c:	f107 030e 	add.w	r3, r7, #14
 8004e20:	461a      	mov	r2, r3
 8004e22:	21ee      	movs	r1, #238	; 0xee
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7fd fd2d 	bl	8002884 <VL53L0X_RdByte>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	7bfb      	ldrb	r3, [r7, #15]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	73fb      	strb	r3, [r7, #15]
 8004e34:	e01d      	b.n	8004e72 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8004e36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8004e3e:	78bb      	ldrb	r3, [r7, #2]
 8004e40:	461a      	mov	r2, r3
 8004e42:	21cb      	movs	r1, #203	; 0xcb
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7fd fc69 	bl	800271c <VL53L0X_WrByte>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	7bfb      	ldrb	r3, [r7, #15]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004e54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00a      	beq.n	8004e72 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8004e5c:	787b      	ldrb	r3, [r7, #1]
 8004e5e:	2280      	movs	r2, #128	; 0x80
 8004e60:	21ee      	movs	r1, #238	; 0xee
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7fd fcda 	bl	800281c <VL53L0X_UpdateByte>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004e72:	2201      	movs	r2, #1
 8004e74:	21ff      	movs	r1, #255	; 0xff
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7fd fc50 	bl	800271c <VL53L0X_WrByte>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	461a      	mov	r2, r3
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004e86:	2201      	movs	r2, #1
 8004e88:	2100      	movs	r1, #0
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7fd fc46 	bl	800271c <VL53L0X_WrByte>
 8004e90:	4603      	mov	r3, r0
 8004e92:	461a      	mov	r2, r3
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	21ff      	movs	r1, #255	; 0xff
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fd fc3c 	bl	800271c <VL53L0X_WrByte>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8004eae:	7bbb      	ldrb	r3, [r7, #14]
 8004eb0:	f023 0310 	bic.w	r3, r3, #16
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	701a      	strb	r2, [r3, #0]

	return Status;
 8004eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b08a      	sub	sp, #40	; 0x28
 8004eca:	af04      	add	r7, sp, #16
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	4611      	mov	r1, r2
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	71fb      	strb	r3, [r7, #7]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004edc:	2300      	movs	r3, #0
 8004ede:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8004ef0:	79bb      	ldrb	r3, [r7, #6]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004efc:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8004efe:	2201      	movs	r2, #1
 8004f00:	2101      	movs	r1, #1
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f7fd fc0a 	bl	800271c <VL53L0X_WrByte>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8004f0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d105      	bne.n	8004f20 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8004f14:	2140      	movs	r1, #64	; 0x40
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f7ff ff01 	bl	8004d1e <VL53L0X_perform_single_ref_calibration>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8004f20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d115      	bne.n	8004f54 <VL53L0X_perform_vhv_calibration+0x8e>
 8004f28:	79fb      	ldrb	r3, [r7, #7]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d112      	bne.n	8004f54 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8004f2e:	7d39      	ldrb	r1, [r7, #20]
 8004f30:	7d7a      	ldrb	r2, [r7, #21]
 8004f32:	2300      	movs	r3, #0
 8004f34:	9303      	str	r3, [sp, #12]
 8004f36:	2301      	movs	r3, #1
 8004f38:	9302      	str	r3, [sp, #8]
 8004f3a:	f107 0313 	add.w	r3, r7, #19
 8004f3e:	9301      	str	r3, [sp, #4]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	460b      	mov	r3, r1
 8004f46:	2101      	movs	r1, #1
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f7ff ff23 	bl	8004d94 <VL53L0X_ref_calibration_io>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	75fb      	strb	r3, [r7, #23]
 8004f52:	e002      	b.n	8004f5a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2200      	movs	r2, #0
 8004f58:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8004f5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d112      	bne.n	8004f88 <VL53L0X_perform_vhv_calibration+0xc2>
 8004f62:	79bb      	ldrb	r3, [r7, #6]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00f      	beq.n	8004f88 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004f68:	7dbb      	ldrb	r3, [r7, #22]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f7fd fbd4 	bl	800271c <VL53L0X_WrByte>
 8004f74:	4603      	mov	r3, r0
 8004f76:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004f78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d103      	bne.n	8004f88 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	7dba      	ldrb	r2, [r7, #22]
 8004f84:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8004f88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08a      	sub	sp, #40	; 0x28
 8004f98:	af04      	add	r7, sp, #16
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	71fb      	strb	r3, [r7, #7]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004faa:	2300      	movs	r3, #0
 8004fac:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8004fba:	79bb      	ldrb	r3, [r7, #6]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004fc6:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8004fc8:	2202      	movs	r2, #2
 8004fca:	2101      	movs	r1, #1
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f7fd fba5 	bl	800271c <VL53L0X_WrByte>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8004fd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d105      	bne.n	8004fea <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8004fde:	2100      	movs	r1, #0
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f7ff fe9c 	bl	8004d1e <VL53L0X_perform_single_ref_calibration>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8004fea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d115      	bne.n	800501e <VL53L0X_perform_phase_calibration+0x8a>
 8004ff2:	79fb      	ldrb	r3, [r7, #7]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d112      	bne.n	800501e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8004ff8:	7d39      	ldrb	r1, [r7, #20]
 8004ffa:	7d7a      	ldrb	r2, [r7, #21]
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	9303      	str	r3, [sp, #12]
 8005000:	2300      	movs	r3, #0
 8005002:	9302      	str	r3, [sp, #8]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	9301      	str	r3, [sp, #4]
 8005008:	f107 0313 	add.w	r3, r7, #19
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	460b      	mov	r3, r1
 8005010:	2101      	movs	r1, #1
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f7ff febe 	bl	8004d94 <VL53L0X_ref_calibration_io>
 8005018:	4603      	mov	r3, r0
 800501a:	75fb      	strb	r3, [r7, #23]
 800501c:	e002      	b.n	8005024 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	2200      	movs	r2, #0
 8005022:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005024:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d112      	bne.n	8005052 <VL53L0X_perform_phase_calibration+0xbe>
 800502c:	79bb      	ldrb	r3, [r7, #6]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00f      	beq.n	8005052 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005032:	7dbb      	ldrb	r3, [r7, #22]
 8005034:	461a      	mov	r2, r3
 8005036:	2101      	movs	r1, #1
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f7fd fb6f 	bl	800271c <VL53L0X_WrByte>
 800503e:	4603      	mov	r3, r0
 8005040:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005042:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d103      	bne.n	8005052 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	7dba      	ldrb	r2, [r7, #22]
 800504e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005052:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b086      	sub	sp, #24
 8005062:	af00      	add	r7, sp, #0
 8005064:	60f8      	str	r0, [r7, #12]
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	607a      	str	r2, [r7, #4]
 800506a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800506c:	2300      	movs	r3, #0
 800506e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005070:	2300      	movs	r3, #0
 8005072:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800507a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800507c:	78fa      	ldrb	r2, [r7, #3]
 800507e:	2300      	movs	r3, #0
 8005080:	68b9      	ldr	r1, [r7, #8]
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f7ff ff1f 	bl	8004ec6 <VL53L0X_perform_vhv_calibration>
 8005088:	4603      	mov	r3, r0
 800508a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800508c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d107      	bne.n	80050a4 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8005094:	78fa      	ldrb	r2, [r7, #3]
 8005096:	2300      	movs	r3, #0
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f7ff ff7a 	bl	8004f94 <VL53L0X_perform_phase_calibration>
 80050a0:	4603      	mov	r3, r0
 80050a2:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80050a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10f      	bne.n	80050cc <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80050ac:	7dbb      	ldrb	r3, [r7, #22]
 80050ae:	461a      	mov	r2, r3
 80050b0:	2101      	movs	r1, #1
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f7fd fb32 	bl	800271c <VL53L0X_WrByte>
 80050b8:	4603      	mov	r3, r0
 80050ba:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80050bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d103      	bne.n	80050cc <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	7dba      	ldrb	r2, [r7, #22]
 80050c8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80050cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3718      	adds	r7, #24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050e0:	2300      	movs	r3, #0
 80050e2:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80050e4:	2300      	movs	r3, #0
 80050e6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80050e8:	2300      	movs	r3, #0
 80050ea:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80050ec:	f107 030f 	add.w	r3, r7, #15
 80050f0:	4619      	mov	r1, r3
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fe fe02 	bl	8003cfc <VL53L0X_GetMeasurementDataReady>
 80050f8:	4603      	mov	r3, r0
 80050fa:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80050fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d110      	bne.n	8005126 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8005104:	7bfb      	ldrb	r3, [r7, #15]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d00f      	beq.n	800512a <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	3301      	adds	r3, #1
 800510e:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005116:	d302      	bcc.n	800511e <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005118:	23f9      	movs	r3, #249	; 0xf9
 800511a:	75fb      	strb	r3, [r7, #23]
			break;
 800511c:	e006      	b.n	800512c <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7fd fc4e 	bl	80029c0 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005124:	e7e2      	b.n	80050ec <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8005126:	bf00      	nop
 8005128:	e000      	b.n	800512c <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800512a:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800512c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005130:	4618      	mov	r0, r3
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	4603      	mov	r3, r0
 8005140:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8005142:	2300      	movs	r3, #0
 8005144:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	3301      	adds	r3, #1
 800514a:	b2db      	uxtb	r3, r3
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8005150:	7bfb      	ldrb	r3, [r7, #15]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800515e:	b480      	push	{r7}
 8005160:	b085      	sub	sp, #20
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8005166:	2300      	movs	r3, #0
 8005168:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800516a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800516e:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8005170:	e002      	b.n	8005178 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	089b      	lsrs	r3, r3, #2
 8005176:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	429a      	cmp	r2, r3
 800517e:	d8f8      	bhi.n	8005172 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8005180:	e017      	b.n	80051b2 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	4413      	add	r3, r2
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	429a      	cmp	r2, r3
 800518c:	d30b      	bcc.n	80051a6 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	4413      	add	r3, r2
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	085b      	lsrs	r3, r3, #1
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	4413      	add	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	e002      	b.n	80051ac <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	085b      	lsrs	r3, r3, #1
 80051aa:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	089b      	lsrs	r3, r3, #2
 80051b0:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1e4      	bne.n	8005182 <VL53L0X_isqrt+0x24>
	}

	return res;
 80051b8:	68fb      	ldr	r3, [r7, #12]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b086      	sub	sp, #24
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80051d2:	2200      	movs	r2, #0
 80051d4:	2183      	movs	r1, #131	; 0x83
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7fd faa0 	bl	800271c <VL53L0X_WrByte>
 80051dc:	4603      	mov	r3, r0
 80051de:	461a      	mov	r2, r3
 80051e0:	7dfb      	ldrb	r3, [r7, #23]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80051e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d11e      	bne.n	800522c <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80051ee:	2300      	movs	r3, #0
 80051f0:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80051f2:	f107 030f 	add.w	r3, r7, #15
 80051f6:	461a      	mov	r2, r3
 80051f8:	2183      	movs	r1, #131	; 0x83
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7fd fb42 	bl	8002884 <VL53L0X_RdByte>
 8005200:	4603      	mov	r3, r0
 8005202:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10a      	bne.n	8005220 <VL53L0X_device_read_strobe+0x5a>
 800520a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d106      	bne.n	8005220 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	3301      	adds	r3, #1
 8005216:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800521e:	d3e8      	bcc.n	80051f2 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005226:	d301      	bcc.n	800522c <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005228:	23f9      	movs	r3, #249	; 0xf9
 800522a:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800522c:	2201      	movs	r2, #1
 800522e:	2183      	movs	r1, #131	; 0x83
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f7fd fa73 	bl	800271c <VL53L0X_WrByte>
 8005236:	4603      	mov	r3, r0
 8005238:	461a      	mov	r2, r3
 800523a:	7dfb      	ldrb	r3, [r7, #23]
 800523c:	4313      	orrs	r3, r2
 800523e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8005240:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b098      	sub	sp, #96	; 0x60
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	460b      	mov	r3, r1
 8005256:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005258:	2300      	movs	r3, #0
 800525a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800525e:	2300      	movs	r3, #0
 8005260:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8005264:	2300      	movs	r3, #0
 8005266:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800526a:	2300      	movs	r3, #0
 800526c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800526e:	2300      	movs	r3, #0
 8005270:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8005272:	2300      	movs	r3, #0
 8005274:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800527c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8005280:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8005282:	2300      	movs	r3, #0
 8005284:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8005286:	2300      	movs	r3, #0
 8005288:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800528a:	2300      	movs	r3, #0
 800528c:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8005294:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8005298:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800529c:	2b07      	cmp	r3, #7
 800529e:	f000 8408 	beq.w	8005ab2 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80052a2:	2201      	movs	r2, #1
 80052a4:	2180      	movs	r1, #128	; 0x80
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7fd fa38 	bl	800271c <VL53L0X_WrByte>
 80052ac:	4603      	mov	r3, r0
 80052ae:	461a      	mov	r2, r3
 80052b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052b4:	4313      	orrs	r3, r2
 80052b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80052ba:	2201      	movs	r2, #1
 80052bc:	21ff      	movs	r1, #255	; 0xff
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7fd fa2c 	bl	800271c <VL53L0X_WrByte>
 80052c4:	4603      	mov	r3, r0
 80052c6:	461a      	mov	r2, r3
 80052c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80052d2:	2200      	movs	r2, #0
 80052d4:	2100      	movs	r1, #0
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7fd fa20 	bl	800271c <VL53L0X_WrByte>
 80052dc:	4603      	mov	r3, r0
 80052de:	461a      	mov	r2, r3
 80052e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052e4:	4313      	orrs	r3, r2
 80052e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80052ea:	2206      	movs	r2, #6
 80052ec:	21ff      	movs	r1, #255	; 0xff
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7fd fa14 	bl	800271c <VL53L0X_WrByte>
 80052f4:	4603      	mov	r3, r0
 80052f6:	461a      	mov	r2, r3
 80052f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052fc:	4313      	orrs	r3, r2
 80052fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005302:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8005306:	461a      	mov	r2, r3
 8005308:	2183      	movs	r1, #131	; 0x83
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fd faba 	bl	8002884 <VL53L0X_RdByte>
 8005310:	4603      	mov	r3, r0
 8005312:	461a      	mov	r2, r3
 8005314:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005318:	4313      	orrs	r3, r2
 800531a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800531e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005322:	f043 0304 	orr.w	r3, r3, #4
 8005326:	b2db      	uxtb	r3, r3
 8005328:	461a      	mov	r2, r3
 800532a:	2183      	movs	r1, #131	; 0x83
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7fd f9f5 	bl	800271c <VL53L0X_WrByte>
 8005332:	4603      	mov	r3, r0
 8005334:	461a      	mov	r2, r3
 8005336:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800533a:	4313      	orrs	r3, r2
 800533c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8005340:	2207      	movs	r2, #7
 8005342:	21ff      	movs	r1, #255	; 0xff
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7fd f9e9 	bl	800271c <VL53L0X_WrByte>
 800534a:	4603      	mov	r3, r0
 800534c:	461a      	mov	r2, r3
 800534e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005352:	4313      	orrs	r3, r2
 8005354:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8005358:	2201      	movs	r2, #1
 800535a:	2181      	movs	r1, #129	; 0x81
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7fd f9dd 	bl	800271c <VL53L0X_WrByte>
 8005362:	4603      	mov	r3, r0
 8005364:	461a      	mov	r2, r3
 8005366:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800536a:	4313      	orrs	r3, r2
 800536c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7fd fb25 	bl	80029c0 <VL53L0X_PollingDelay>
 8005376:	4603      	mov	r3, r0
 8005378:	461a      	mov	r2, r3
 800537a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800537e:	4313      	orrs	r3, r2
 8005380:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005384:	2201      	movs	r2, #1
 8005386:	2180      	movs	r1, #128	; 0x80
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f7fd f9c7 	bl	800271c <VL53L0X_WrByte>
 800538e:	4603      	mov	r3, r0
 8005390:	461a      	mov	r2, r3
 8005392:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005396:	4313      	orrs	r3, r2
 8005398:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800539c:	78fb      	ldrb	r3, [r7, #3]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 8098 	beq.w	80054d8 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80053a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80053ac:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f040 8091 	bne.w	80054d8 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80053b6:	226b      	movs	r2, #107	; 0x6b
 80053b8:	2194      	movs	r1, #148	; 0x94
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7fd f9ae 	bl	800271c <VL53L0X_WrByte>
 80053c0:	4603      	mov	r3, r0
 80053c2:	461a      	mov	r2, r3
 80053c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053c8:	4313      	orrs	r3, r2
 80053ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7ff fef9 	bl	80051c6 <VL53L0X_device_read_strobe>
 80053d4:	4603      	mov	r3, r0
 80053d6:	461a      	mov	r2, r3
 80053d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053dc:	4313      	orrs	r3, r2
 80053de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80053e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80053e6:	461a      	mov	r2, r3
 80053e8:	2190      	movs	r1, #144	; 0x90
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7fd faac 	bl	8002948 <VL53L0X_RdDWord>
 80053f0:	4603      	mov	r3, r0
 80053f2:	461a      	mov	r2, r3
 80053f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053f8:	4313      	orrs	r3, r2
 80053fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80053fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005400:	0a1b      	lsrs	r3, r3, #8
 8005402:	b2db      	uxtb	r3, r3
 8005404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005408:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	0bdb      	lsrs	r3, r3, #15
 8005410:	b2db      	uxtb	r3, r3
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800541a:	2224      	movs	r2, #36	; 0x24
 800541c:	2194      	movs	r1, #148	; 0x94
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7fd f97c 	bl	800271c <VL53L0X_WrByte>
 8005424:	4603      	mov	r3, r0
 8005426:	461a      	mov	r2, r3
 8005428:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800542c:	4313      	orrs	r3, r2
 800542e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7ff fec7 	bl	80051c6 <VL53L0X_device_read_strobe>
 8005438:	4603      	mov	r3, r0
 800543a:	461a      	mov	r2, r3
 800543c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005440:	4313      	orrs	r3, r2
 8005442:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005446:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800544a:	461a      	mov	r2, r3
 800544c:	2190      	movs	r1, #144	; 0x90
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fd fa7a 	bl	8002948 <VL53L0X_RdDWord>
 8005454:	4603      	mov	r3, r0
 8005456:	461a      	mov	r2, r3
 8005458:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800545c:	4313      	orrs	r3, r2
 800545e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8005462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005464:	0e1b      	lsrs	r3, r3, #24
 8005466:	b2db      	uxtb	r3, r3
 8005468:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	0c1b      	lsrs	r3, r3, #16
 800546e:	b2db      	uxtb	r3, r3
 8005470:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8005472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005474:	0a1b      	lsrs	r3, r3, #8
 8005476:	b2db      	uxtb	r3, r3
 8005478:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	b2db      	uxtb	r3, r3
 800547e:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8005480:	2225      	movs	r2, #37	; 0x25
 8005482:	2194      	movs	r1, #148	; 0x94
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f7fd f949 	bl	800271c <VL53L0X_WrByte>
 800548a:	4603      	mov	r3, r0
 800548c:	461a      	mov	r2, r3
 800548e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005492:	4313      	orrs	r3, r2
 8005494:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7ff fe94 	bl	80051c6 <VL53L0X_device_read_strobe>
 800549e:	4603      	mov	r3, r0
 80054a0:	461a      	mov	r2, r3
 80054a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80054ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054b0:	461a      	mov	r2, r3
 80054b2:	2190      	movs	r1, #144	; 0x90
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7fd fa47 	bl	8002948 <VL53L0X_RdDWord>
 80054ba:	4603      	mov	r3, r0
 80054bc:	461a      	mov	r2, r3
 80054be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	0e1b      	lsrs	r3, r3, #24
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80054d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d2:	0c1b      	lsrs	r3, r3, #16
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80054d8:	78fb      	ldrb	r3, [r7, #3]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 8189 	beq.w	80057f6 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80054e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80054e8:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f040 8182 	bne.w	80057f6 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80054f2:	2202      	movs	r2, #2
 80054f4:	2194      	movs	r1, #148	; 0x94
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7fd f910 	bl	800271c <VL53L0X_WrByte>
 80054fc:	4603      	mov	r3, r0
 80054fe:	461a      	mov	r2, r3
 8005500:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005504:	4313      	orrs	r3, r2
 8005506:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7ff fe5b 	bl	80051c6 <VL53L0X_device_read_strobe>
 8005510:	4603      	mov	r3, r0
 8005512:	461a      	mov	r2, r3
 8005514:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005518:	4313      	orrs	r3, r2
 800551a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800551e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8005522:	461a      	mov	r2, r3
 8005524:	2190      	movs	r1, #144	; 0x90
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fd f9ac 	bl	8002884 <VL53L0X_RdByte>
 800552c:	4603      	mov	r3, r0
 800552e:	461a      	mov	r2, r3
 8005530:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005534:	4313      	orrs	r3, r2
 8005536:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800553a:	227b      	movs	r2, #123	; 0x7b
 800553c:	2194      	movs	r1, #148	; 0x94
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7fd f8ec 	bl	800271c <VL53L0X_WrByte>
 8005544:	4603      	mov	r3, r0
 8005546:	461a      	mov	r2, r3
 8005548:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800554c:	4313      	orrs	r3, r2
 800554e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7ff fe37 	bl	80051c6 <VL53L0X_device_read_strobe>
 8005558:	4603      	mov	r3, r0
 800555a:	461a      	mov	r2, r3
 800555c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005560:	4313      	orrs	r3, r2
 8005562:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8005566:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800556a:	461a      	mov	r2, r3
 800556c:	2190      	movs	r1, #144	; 0x90
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fd f988 	bl	8002884 <VL53L0X_RdByte>
 8005574:	4603      	mov	r3, r0
 8005576:	461a      	mov	r2, r3
 8005578:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800557c:	4313      	orrs	r3, r2
 800557e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8005582:	2277      	movs	r2, #119	; 0x77
 8005584:	2194      	movs	r1, #148	; 0x94
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7fd f8c8 	bl	800271c <VL53L0X_WrByte>
 800558c:	4603      	mov	r3, r0
 800558e:	461a      	mov	r2, r3
 8005590:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005594:	4313      	orrs	r3, r2
 8005596:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7ff fe13 	bl	80051c6 <VL53L0X_device_read_strobe>
 80055a0:	4603      	mov	r3, r0
 80055a2:	461a      	mov	r2, r3
 80055a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055a8:	4313      	orrs	r3, r2
 80055aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80055ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80055b2:	461a      	mov	r2, r3
 80055b4:	2190      	movs	r1, #144	; 0x90
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fd f9c6 	bl	8002948 <VL53L0X_RdDWord>
 80055bc:	4603      	mov	r3, r0
 80055be:	461a      	mov	r2, r3
 80055c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055c4:	4313      	orrs	r3, r2
 80055c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	0e5b      	lsrs	r3, r3, #25
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	0c9b      	lsrs	r3, r3, #18
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	0adb      	lsrs	r3, r3, #11
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80055f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f6:	091b      	lsrs	r3, r3, #4
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	b2db      	uxtb	r3, r3
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	b2db      	uxtb	r3, r3
 800560a:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800560e:	b2db      	uxtb	r3, r3
 8005610:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8005614:	2278      	movs	r2, #120	; 0x78
 8005616:	2194      	movs	r1, #148	; 0x94
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7fd f87f 	bl	800271c <VL53L0X_WrByte>
 800561e:	4603      	mov	r3, r0
 8005620:	461a      	mov	r2, r3
 8005622:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005626:	4313      	orrs	r3, r2
 8005628:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff fdca 	bl	80051c6 <VL53L0X_device_read_strobe>
 8005632:	4603      	mov	r3, r0
 8005634:	461a      	mov	r2, r3
 8005636:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800563a:	4313      	orrs	r3, r2
 800563c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005640:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005644:	461a      	mov	r2, r3
 8005646:	2190      	movs	r1, #144	; 0x90
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7fd f97d 	bl	8002948 <VL53L0X_RdDWord>
 800564e:	4603      	mov	r3, r0
 8005650:	461a      	mov	r2, r3
 8005652:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005656:	4313      	orrs	r3, r2
 8005658:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800565c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565e:	0f5b      	lsrs	r3, r3, #29
 8005660:	b2db      	uxtb	r3, r3
 8005662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005666:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8005668:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800566c:	4413      	add	r3, r2
 800566e:	b2db      	uxtb	r3, r3
 8005670:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8005672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005674:	0d9b      	lsrs	r3, r3, #22
 8005676:	b2db      	uxtb	r3, r3
 8005678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800567c:	b2db      	uxtb	r3, r3
 800567e:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8005680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005682:	0bdb      	lsrs	r3, r3, #15
 8005684:	b2db      	uxtb	r3, r3
 8005686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800568a:	b2db      	uxtb	r3, r3
 800568c:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	0a1b      	lsrs	r3, r3, #8
 8005692:	b2db      	uxtb	r3, r3
 8005694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005698:	b2db      	uxtb	r3, r3
 800569a:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800569c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569e:	085b      	lsrs	r3, r3, #1
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	019b      	lsls	r3, r3, #6
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80056bc:	2279      	movs	r2, #121	; 0x79
 80056be:	2194      	movs	r1, #148	; 0x94
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7fd f82b 	bl	800271c <VL53L0X_WrByte>
 80056c6:	4603      	mov	r3, r0
 80056c8:	461a      	mov	r2, r3
 80056ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7ff fd76 	bl	80051c6 <VL53L0X_device_read_strobe>
 80056da:	4603      	mov	r3, r0
 80056dc:	461a      	mov	r2, r3
 80056de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056e2:	4313      	orrs	r3, r2
 80056e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80056e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056ec:	461a      	mov	r2, r3
 80056ee:	2190      	movs	r1, #144	; 0x90
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f7fd f929 	bl	8002948 <VL53L0X_RdDWord>
 80056f6:	4603      	mov	r3, r0
 80056f8:	461a      	mov	r2, r3
 80056fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056fe:	4313      	orrs	r3, r2
 8005700:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8005704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005706:	0e9b      	lsrs	r3, r3, #26
 8005708:	b2db      	uxtb	r3, r3
 800570a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800570e:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8005710:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005714:	4413      	add	r3, r2
 8005716:	b2db      	uxtb	r3, r3
 8005718:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	0cdb      	lsrs	r3, r3, #19
 800571e:	b2db      	uxtb	r3, r3
 8005720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005724:	b2db      	uxtb	r3, r3
 8005726:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8005728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572a:	0b1b      	lsrs	r3, r3, #12
 800572c:	b2db      	uxtb	r3, r3
 800572e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005732:	b2db      	uxtb	r3, r3
 8005734:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8005736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005738:	095b      	lsrs	r3, r3, #5
 800573a:	b2db      	uxtb	r3, r3
 800573c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005740:	b2db      	uxtb	r3, r3
 8005742:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8005744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005746:	b2db      	uxtb	r3, r3
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	b2db      	uxtb	r3, r3
 800574c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8005750:	b2db      	uxtb	r3, r3
 8005752:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8005756:	227a      	movs	r2, #122	; 0x7a
 8005758:	2194      	movs	r1, #148	; 0x94
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7fc ffde 	bl	800271c <VL53L0X_WrByte>
 8005760:	4603      	mov	r3, r0
 8005762:	461a      	mov	r2, r3
 8005764:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005768:	4313      	orrs	r3, r2
 800576a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7ff fd29 	bl	80051c6 <VL53L0X_device_read_strobe>
 8005774:	4603      	mov	r3, r0
 8005776:	461a      	mov	r2, r3
 8005778:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800577c:	4313      	orrs	r3, r2
 800577e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005782:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005786:	461a      	mov	r2, r3
 8005788:	2190      	movs	r1, #144	; 0x90
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7fd f8dc 	bl	8002948 <VL53L0X_RdDWord>
 8005790:	4603      	mov	r3, r0
 8005792:	461a      	mov	r2, r3
 8005794:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005798:	4313      	orrs	r3, r2
 800579a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	0f9b      	lsrs	r3, r3, #30
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057a8:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80057aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057ae:	4413      	add	r3, r2
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80057b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b6:	0ddb      	lsrs	r3, r3, #23
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80057c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c4:	0c1b      	lsrs	r3, r3, #16
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80057d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d2:	0a5b      	lsrs	r3, r3, #9
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80057e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e2:	089b      	lsrs	r3, r3, #2
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 80057f0:	2300      	movs	r3, #0
 80057f2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80057f6:	78fb      	ldrb	r3, [r7, #3]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f000 80f1 	beq.w	80059e4 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8005802:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005806:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800580a:	2b00      	cmp	r3, #0
 800580c:	f040 80ea 	bne.w	80059e4 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8005810:	227b      	movs	r2, #123	; 0x7b
 8005812:	2194      	movs	r1, #148	; 0x94
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f7fc ff81 	bl	800271c <VL53L0X_WrByte>
 800581a:	4603      	mov	r3, r0
 800581c:	461a      	mov	r2, r3
 800581e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005822:	4313      	orrs	r3, r2
 8005824:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7ff fccc 	bl	80051c6 <VL53L0X_device_read_strobe>
 800582e:	4603      	mov	r3, r0
 8005830:	461a      	mov	r2, r3
 8005832:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005836:	4313      	orrs	r3, r2
 8005838:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800583c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005840:	461a      	mov	r2, r3
 8005842:	2190      	movs	r1, #144	; 0x90
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f7fd f87f 	bl	8002948 <VL53L0X_RdDWord>
 800584a:	4603      	mov	r3, r0
 800584c:	461a      	mov	r2, r3
 800584e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005852:	4313      	orrs	r3, r2
 8005854:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8005858:	227c      	movs	r2, #124	; 0x7c
 800585a:	2194      	movs	r1, #148	; 0x94
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7fc ff5d 	bl	800271c <VL53L0X_WrByte>
 8005862:	4603      	mov	r3, r0
 8005864:	461a      	mov	r2, r3
 8005866:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800586a:	4313      	orrs	r3, r2
 800586c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f7ff fca8 	bl	80051c6 <VL53L0X_device_read_strobe>
 8005876:	4603      	mov	r3, r0
 8005878:	461a      	mov	r2, r3
 800587a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800587e:	4313      	orrs	r3, r2
 8005880:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8005884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005888:	461a      	mov	r2, r3
 800588a:	2190      	movs	r1, #144	; 0x90
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7fd f85b 	bl	8002948 <VL53L0X_RdDWord>
 8005892:	4603      	mov	r3, r0
 8005894:	461a      	mov	r2, r3
 8005896:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800589a:	4313      	orrs	r3, r2
 800589c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80058a0:	2273      	movs	r2, #115	; 0x73
 80058a2:	2194      	movs	r1, #148	; 0x94
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7fc ff39 	bl	800271c <VL53L0X_WrByte>
 80058aa:	4603      	mov	r3, r0
 80058ac:	461a      	mov	r2, r3
 80058ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7ff fc84 	bl	80051c6 <VL53L0X_device_read_strobe>
 80058be:	4603      	mov	r3, r0
 80058c0:	461a      	mov	r2, r3
 80058c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80058cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058d0:	461a      	mov	r2, r3
 80058d2:	2190      	movs	r1, #144	; 0x90
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7fd f837 	bl	8002948 <VL53L0X_RdDWord>
 80058da:	4603      	mov	r3, r0
 80058dc:	461a      	mov	r2, r3
 80058de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058e2:	4313      	orrs	r3, r2
 80058e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 80058e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ea:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 80058f0:	2274      	movs	r2, #116	; 0x74
 80058f2:	2194      	movs	r1, #148	; 0x94
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7fc ff11 	bl	800271c <VL53L0X_WrByte>
 80058fa:	4603      	mov	r3, r0
 80058fc:	461a      	mov	r2, r3
 80058fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005902:	4313      	orrs	r3, r2
 8005904:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7ff fc5c 	bl	80051c6 <VL53L0X_device_read_strobe>
 800590e:	4603      	mov	r3, r0
 8005910:	461a      	mov	r2, r3
 8005912:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005916:	4313      	orrs	r3, r2
 8005918:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800591c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005920:	461a      	mov	r2, r3
 8005922:	2190      	movs	r1, #144	; 0x90
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7fd f80f 	bl	8002948 <VL53L0X_RdDWord>
 800592a:	4603      	mov	r3, r0
 800592c:	461a      	mov	r2, r3
 800592e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005932:	4313      	orrs	r3, r2
 8005934:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8005938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593a:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800593c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800593e:	4313      	orrs	r3, r2
 8005940:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8005942:	2275      	movs	r2, #117	; 0x75
 8005944:	2194      	movs	r1, #148	; 0x94
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7fc fee8 	bl	800271c <VL53L0X_WrByte>
 800594c:	4603      	mov	r3, r0
 800594e:	461a      	mov	r2, r3
 8005950:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005954:	4313      	orrs	r3, r2
 8005956:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7ff fc33 	bl	80051c6 <VL53L0X_device_read_strobe>
 8005960:	4603      	mov	r3, r0
 8005962:	461a      	mov	r2, r3
 8005964:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005968:	4313      	orrs	r3, r2
 800596a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800596e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005972:	461a      	mov	r2, r3
 8005974:	2190      	movs	r1, #144	; 0x90
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7fc ffe6 	bl	8002948 <VL53L0X_RdDWord>
 800597c:	4603      	mov	r3, r0
 800597e:	461a      	mov	r2, r3
 8005980:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005984:	4313      	orrs	r3, r2
 8005986:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800598a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598c:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800598e:	b29b      	uxth	r3, r3
 8005990:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8005992:	2276      	movs	r2, #118	; 0x76
 8005994:	2194      	movs	r1, #148	; 0x94
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7fc fec0 	bl	800271c <VL53L0X_WrByte>
 800599c:	4603      	mov	r3, r0
 800599e:	461a      	mov	r2, r3
 80059a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059a4:	4313      	orrs	r3, r2
 80059a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff fc0b 	bl	80051c6 <VL53L0X_device_read_strobe>
 80059b0:	4603      	mov	r3, r0
 80059b2:	461a      	mov	r2, r3
 80059b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059b8:	4313      	orrs	r3, r2
 80059ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80059be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80059c2:	461a      	mov	r2, r3
 80059c4:	2190      	movs	r1, #144	; 0x90
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fc ffbe 	bl	8002948 <VL53L0X_RdDWord>
 80059cc:	4603      	mov	r3, r0
 80059ce:	461a      	mov	r2, r3
 80059d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80059de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80059e0:	4313      	orrs	r3, r2
 80059e2:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80059e4:	2200      	movs	r2, #0
 80059e6:	2181      	movs	r1, #129	; 0x81
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7fc fe97 	bl	800271c <VL53L0X_WrByte>
 80059ee:	4603      	mov	r3, r0
 80059f0:	461a      	mov	r2, r3
 80059f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059f6:	4313      	orrs	r3, r2
 80059f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80059fc:	2206      	movs	r2, #6
 80059fe:	21ff      	movs	r1, #255	; 0xff
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7fc fe8b 	bl	800271c <VL53L0X_WrByte>
 8005a06:	4603      	mov	r3, r0
 8005a08:	461a      	mov	r2, r3
 8005a0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005a14:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8005a18:	461a      	mov	r2, r3
 8005a1a:	2183      	movs	r1, #131	; 0x83
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7fc ff31 	bl	8002884 <VL53L0X_RdByte>
 8005a22:	4603      	mov	r3, r0
 8005a24:	461a      	mov	r2, r3
 8005a26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8005a30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a34:	f023 0304 	bic.w	r3, r3, #4
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	2183      	movs	r1, #131	; 0x83
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fc fe6c 	bl	800271c <VL53L0X_WrByte>
 8005a44:	4603      	mov	r3, r0
 8005a46:	461a      	mov	r2, r3
 8005a48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005a52:	2201      	movs	r2, #1
 8005a54:	21ff      	movs	r1, #255	; 0xff
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7fc fe60 	bl	800271c <VL53L0X_WrByte>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	461a      	mov	r2, r3
 8005a60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a64:	4313      	orrs	r3, r2
 8005a66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7fc fe54 	bl	800271c <VL53L0X_WrByte>
 8005a74:	4603      	mov	r3, r0
 8005a76:	461a      	mov	r2, r3
 8005a78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005a82:	2200      	movs	r2, #0
 8005a84:	21ff      	movs	r1, #255	; 0xff
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7fc fe48 	bl	800271c <VL53L0X_WrByte>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a94:	4313      	orrs	r3, r2
 8005a96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	2180      	movs	r1, #128	; 0x80
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fc fe3c 	bl	800271c <VL53L0X_WrByte>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005aac:	4313      	orrs	r3, r2
 8005aae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8005ab2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f040 808f 	bne.w	8005bda <VL53L0X_get_info_from_device+0x98e>
 8005abc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ac0:	2b07      	cmp	r3, #7
 8005ac2:	f000 808a 	beq.w	8005bda <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8005ac6:	78fb      	ldrb	r3, [r7, #3]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d024      	beq.n	8005b1a <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8005ad0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ad4:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d11e      	bne.n	8005b1a <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8005ae2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8005aec:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8005af0:	2300      	movs	r3, #0
 8005af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005af4:	e00e      	b.n	8005b14 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8005af6:	f107 0208 	add.w	r2, r7, #8
 8005afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005afc:	4413      	add	r3, r2
 8005afe:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8005b0a:	460a      	mov	r2, r1
 8005b0c:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8005b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b10:	3301      	adds	r3, #1
 8005b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b16:	2b05      	cmp	r3, #5
 8005b18:	dded      	ble.n	8005af6 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8005b1a:	78fb      	ldrb	r3, [r7, #3]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d018      	beq.n	8005b56 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8005b24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b28:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d112      	bne.n	8005b56 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005b30:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005b3a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	33f3      	adds	r3, #243	; 0xf3
 8005b48:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8005b4a:	f107 0310 	add.w	r3, r7, #16
 8005b4e:	4619      	mov	r1, r3
 8005b50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b52:	f00e f99b 	bl	8013e8c <strcpy>

		}

		if (((option & 4) == 4) &&
 8005b56:	78fb      	ldrb	r3, [r7, #3]
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d030      	beq.n	8005bc2 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8005b60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b64:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d12a      	bne.n	8005bc2 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005b6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8005b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b7e:	025b      	lsls	r3, r3, #9
 8005b80:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b86:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8005b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d011      	beq.n	8005bba <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8005b96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8005b9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ba0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ba4:	fb02 f303 	mul.w	r3, r2, r3
 8005ba8:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8005baa:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8005bae:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005bb2:	425b      	negs	r3, r3
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8005bba:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8005bc2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005bc6:	78fb      	ldrb	r3, [r7, #3]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8005bd0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005bda:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3760      	adds	r7, #96	; 0x60
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b087      	sub	sp, #28
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	460b      	mov	r3, r1
 8005bf0:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8005bf2:	f240 6277 	movw	r2, #1655	; 0x677
 8005bf6:	f04f 0300 	mov.w	r3, #0
 8005bfa:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8005bfe:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8005c02:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8005c04:	78fb      	ldrb	r3, [r7, #3]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	fb02 f303 	mul.w	r3, r2, r3
 8005c12:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8005c14:	68bb      	ldr	r3, [r7, #8]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	371c      	adds	r7, #28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b087      	sub	sp, #28
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8005c32:	2300      	movs	r3, #0
 8005c34:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d017      	beq.n	8005c6c <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005c42:	e005      	b.n	8005c50 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	085b      	lsrs	r3, r3, #1
 8005c48:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8005c4a:	89fb      	ldrh	r3, [r7, #14]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1f4      	bne.n	8005c44 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8005c5a:	89fb      	ldrh	r3, [r7, #14]
 8005c5c:	021b      	lsls	r3, r3, #8
 8005c5e:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8005c68:	4413      	add	r3, r2
 8005c6a:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8005c6c:	8afb      	ldrh	r3, [r7, #22]

}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	371c      	adds	r7, #28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b085      	sub	sp, #20
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	4603      	mov	r3, r0
 8005c82:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8005c84:	2300      	movs	r3, #0
 8005c86:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005c88:	88fb      	ldrh	r3, [r7, #6]
 8005c8a:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8005c8c:	88fa      	ldrh	r2, [r7, #6]
 8005c8e:	0a12      	lsrs	r2, r2, #8
 8005c90:	b292      	uxth	r2, r2
 8005c92:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005c94:	3301      	adds	r3, #1
 8005c96:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8005c98:	68fb      	ldr	r3, [r7, #12]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
	...

08005ca8 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b088      	sub	sp, #32
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005cba:	79fb      	ldrb	r3, [r7, #7]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f7ff ff91 	bl	8005be6 <VL53L0X_calc_macro_period_ps>
 8005cc4:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005ccc:	4a0a      	ldr	r2, [pc, #40]	; (8005cf8 <VL53L0X_calc_timeout_mclks+0x50>)
 8005cce:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd2:	099b      	lsrs	r3, r3, #6
 8005cd4:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005cdc:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	085b      	lsrs	r3, r3, #1
 8005ce4:	441a      	add	r2, r3
	timeout_period_mclks =
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cec:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8005cee:	69fb      	ldr	r3, [r7, #28]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3720      	adds	r7, #32
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	10624dd3 	.word	0x10624dd3

08005cfc <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	460b      	mov	r3, r1
 8005d06:	807b      	strh	r3, [r7, #2]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005d10:	787b      	ldrb	r3, [r7, #1]
 8005d12:	4619      	mov	r1, r3
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7ff ff66 	bl	8005be6 <VL53L0X_calc_macro_period_ps>
 8005d1a:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005d22:	4a0a      	ldr	r2, [pc, #40]	; (8005d4c <VL53L0X_calc_timeout_us+0x50>)
 8005d24:	fba2 2303 	umull	r2, r3, r2, r3
 8005d28:	099b      	lsrs	r3, r3, #6
 8005d2a:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8005d2c:	887b      	ldrh	r3, [r7, #2]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	fb02 f303 	mul.w	r3, r2, r3
 8005d34:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8005d38:	4a04      	ldr	r2, [pc, #16]	; (8005d4c <VL53L0X_calc_timeout_us+0x50>)
 8005d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3e:	099b      	lsrs	r3, r3, #6
 8005d40:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8005d42:	697b      	ldr	r3, [r7, #20]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	10624dd3 	.word	0x10624dd3

08005d50 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08c      	sub	sp, #48	; 0x30
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	607a      	str	r2, [r7, #4]
 8005d5c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8005d64:	2300      	movs	r3, #0
 8005d66:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8005d72:	2300      	movs	r3, #0
 8005d74:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8005d76:	7afb      	ldrb	r3, [r7, #11]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d005      	beq.n	8005d88 <get_sequence_step_timeout+0x38>
 8005d7c:	7afb      	ldrb	r3, [r7, #11]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d002      	beq.n	8005d88 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8005d82:	7afb      	ldrb	r3, [r7, #11]
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d128      	bne.n	8005dda <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005d88:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	2100      	movs	r1, #0
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f7fd fa5b 	bl	800324c <VL53L0X_GetVcselPulsePeriod>
 8005d96:	4603      	mov	r3, r0
 8005d98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8005d9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d109      	bne.n	8005db8 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8005da4:	f107 0320 	add.w	r3, r7, #32
 8005da8:	461a      	mov	r2, r3
 8005daa:	2146      	movs	r1, #70	; 0x46
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f7fc fd69 	bl	8002884 <VL53L0X_RdByte>
 8005db2:	4603      	mov	r3, r0
 8005db4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8005db8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7ff ff5b 	bl	8005c7a <VL53L0X_decode_timeout>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005dc8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005dcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005dce:	4619      	mov	r1, r3
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f7ff ff93 	bl	8005cfc <VL53L0X_calc_timeout_us>
 8005dd6:	62b8      	str	r0, [r7, #40]	; 0x28
 8005dd8:	e092      	b.n	8005f00 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005dda:	7afb      	ldrb	r3, [r7, #11]
 8005ddc:	2b03      	cmp	r3, #3
 8005dde:	d135      	bne.n	8005e4c <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005de0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005de4:	461a      	mov	r2, r3
 8005de6:	2100      	movs	r1, #0
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f7fd fa2f 	bl	800324c <VL53L0X_GetVcselPulsePeriod>
 8005dee:	4603      	mov	r3, r0
 8005df0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005df4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f040 8081 	bne.w	8005f00 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005dfe:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005e02:	461a      	mov	r2, r3
 8005e04:	2100      	movs	r1, #0
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f7fd fa20 	bl	800324c <VL53L0X_GetVcselPulsePeriod>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8005e12:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d109      	bne.n	8005e2e <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8005e1a:	f107 031e 	add.w	r3, r7, #30
 8005e1e:	461a      	mov	r2, r3
 8005e20:	2151      	movs	r1, #81	; 0x51
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f7fc fd58 	bl	80028d8 <VL53L0X_RdWord>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005e2e:	8bfb      	ldrh	r3, [r7, #30]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7ff ff22 	bl	8005c7a <VL53L0X_decode_timeout>
 8005e36:	4603      	mov	r3, r0
 8005e38:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005e3a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005e3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e40:	4619      	mov	r1, r3
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f7ff ff5a 	bl	8005cfc <VL53L0X_calc_timeout_us>
 8005e48:	62b8      	str	r0, [r7, #40]	; 0x28
 8005e4a:	e059      	b.n	8005f00 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8005e4c:	7afb      	ldrb	r3, [r7, #11]
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d156      	bne.n	8005f00 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005e52:	f107 0314 	add.w	r3, r7, #20
 8005e56:	4619      	mov	r1, r3
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f7fd fb03 	bl	8003464 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8005e62:	7dfb      	ldrb	r3, [r7, #23]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d01d      	beq.n	8005ea4 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005e68:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	2100      	movs	r1, #0
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f7fd f9eb 	bl	800324c <VL53L0X_GetVcselPulsePeriod>
 8005e76:	4603      	mov	r3, r0
 8005e78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8005e7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10f      	bne.n	8005ea4 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8005e84:	f107 031e 	add.w	r3, r7, #30
 8005e88:	461a      	mov	r2, r3
 8005e8a:	2151      	movs	r1, #81	; 0x51
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f7fc fd23 	bl	80028d8 <VL53L0X_RdWord>
 8005e92:	4603      	mov	r3, r0
 8005e94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005e98:	8bfb      	ldrh	r3, [r7, #30]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7ff feed 	bl	8005c7a <VL53L0X_decode_timeout>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005ea4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d109      	bne.n	8005ec0 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005eac:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f7fd f9c9 	bl	800324c <VL53L0X_GetVcselPulsePeriod>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005ec0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10f      	bne.n	8005ee8 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8005ec8:	f107 031c 	add.w	r3, r7, #28
 8005ecc:	461a      	mov	r2, r3
 8005ece:	2171      	movs	r1, #113	; 0x71
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f7fc fd01 	bl	80028d8 <VL53L0X_RdWord>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005edc:	8bbb      	ldrh	r3, [r7, #28]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7ff fecb 	bl	8005c7a <VL53L0X_decode_timeout>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8005ee8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005eea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005ef0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005ef4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f7ff feff 	bl	8005cfc <VL53L0X_calc_timeout_us>
 8005efe:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f04:	601a      	str	r2, [r3, #0]

	return Status;
 8005f06:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3730      	adds	r7, #48	; 0x30
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b08a      	sub	sp, #40	; 0x28
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	60f8      	str	r0, [r7, #12]
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	607a      	str	r2, [r7, #4]
 8005f1e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f20:	2300      	movs	r3, #0
 8005f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8005f26:	7afb      	ldrb	r3, [r7, #11]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d005      	beq.n	8005f38 <set_sequence_step_timeout+0x26>
 8005f2c:	7afb      	ldrb	r3, [r7, #11]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d002      	beq.n	8005f38 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8005f32:	7afb      	ldrb	r3, [r7, #11]
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d138      	bne.n	8005faa <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005f38:	f107 031b 	add.w	r3, r7, #27
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	2100      	movs	r1, #0
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f7fd f983 	bl	800324c <VL53L0X_GetVcselPulsePeriod>
 8005f46:	4603      	mov	r3, r0
 8005f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8005f4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d11a      	bne.n	8005f8a <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8005f54:	7efb      	ldrb	r3, [r7, #27]
 8005f56:	461a      	mov	r2, r3
 8005f58:	6879      	ldr	r1, [r7, #4]
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f7ff fea4 	bl	8005ca8 <VL53L0X_calc_timeout_mclks>
 8005f60:	4603      	mov	r3, r0
 8005f62:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8005f64:	8bbb      	ldrh	r3, [r7, #28]
 8005f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f6a:	d903      	bls.n	8005f74 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8005f6c:	23ff      	movs	r3, #255	; 0xff
 8005f6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005f72:	e004      	b.n	8005f7e <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8005f74:	8bbb      	ldrh	r3, [r7, #28]
 8005f76:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005f7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005f8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f040 80ab 	bne.w	80060ea <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8005f94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f98:	461a      	mov	r2, r3
 8005f9a:	2146      	movs	r1, #70	; 0x46
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f7fc fbbd 	bl	800271c <VL53L0X_WrByte>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8005fa8:	e09f      	b.n	80060ea <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005faa:	7afb      	ldrb	r3, [r7, #11]
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d135      	bne.n	800601c <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8005fb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d11b      	bne.n	8005ff0 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005fb8:	f107 031b 	add.w	r3, r7, #27
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f7fd f943 	bl	800324c <VL53L0X_GetVcselPulsePeriod>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8005fcc:	7efb      	ldrb	r3, [r7, #27]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	6879      	ldr	r1, [r7, #4]
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f7ff fe68 	bl	8005ca8 <VL53L0X_calc_timeout_mclks>
 8005fd8:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8005fda:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8005fdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7ff fe1f 	bl	8005c22 <VL53L0X_encode_timeout>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005fe8:	8b3a      	ldrh	r2, [r7, #24]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8005ff0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d108      	bne.n	800600a <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8005ff8:	8b3b      	ldrh	r3, [r7, #24]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	2151      	movs	r1, #81	; 0x51
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f7fc fbb0 	bl	8002764 <VL53L0X_WrWord>
 8006004:	4603      	mov	r3, r0
 8006006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800600a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800600e:	2b00      	cmp	r3, #0
 8006010:	d16b      	bne.n	80060ea <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800601a:	e066      	b.n	80060ea <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800601c:	7afb      	ldrb	r3, [r7, #11]
 800601e:	2b04      	cmp	r3, #4
 8006020:	d160      	bne.n	80060e4 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8006022:	f107 0310 	add.w	r3, r7, #16
 8006026:	4619      	mov	r1, r3
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f7fd fa1b 	bl	8003464 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800602e:	2300      	movs	r3, #0
 8006030:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8006032:	7cfb      	ldrb	r3, [r7, #19]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d01d      	beq.n	8006074 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006038:	f107 031b 	add.w	r3, r7, #27
 800603c:	461a      	mov	r2, r3
 800603e:	2100      	movs	r1, #0
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f7fd f903 	bl	800324c <VL53L0X_GetVcselPulsePeriod>
 8006046:	4603      	mov	r3, r0
 8006048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800604c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10f      	bne.n	8006074 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8006054:	f107 0318 	add.w	r3, r7, #24
 8006058:	461a      	mov	r2, r3
 800605a:	2151      	movs	r1, #81	; 0x51
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f7fc fc3b 	bl	80028d8 <VL53L0X_RdWord>
 8006062:	4603      	mov	r3, r0
 8006064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8006068:	8b3b      	ldrh	r3, [r7, #24]
 800606a:	4618      	mov	r0, r3
 800606c:	f7ff fe05 	bl	8005c7a <VL53L0X_decode_timeout>
 8006070:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8006072:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006074:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006078:	2b00      	cmp	r3, #0
 800607a:	d109      	bne.n	8006090 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800607c:	f107 031b 	add.w	r3, r7, #27
 8006080:	461a      	mov	r2, r3
 8006082:	2101      	movs	r1, #1
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f7fd f8e1 	bl	800324c <VL53L0X_GetVcselPulsePeriod>
 800608a:	4603      	mov	r3, r0
 800608c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006090:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006094:	2b00      	cmp	r3, #0
 8006096:	d128      	bne.n	80060ea <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006098:	7efb      	ldrb	r3, [r7, #27]
 800609a:	461a      	mov	r2, r3
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f7ff fe02 	bl	8005ca8 <VL53L0X_calc_timeout_mclks>
 80060a4:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80060a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060a8:	6a3a      	ldr	r2, [r7, #32]
 80060aa:	4413      	add	r3, r2
 80060ac:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 80060ae:	6a38      	ldr	r0, [r7, #32]
 80060b0:	f7ff fdb7 	bl	8005c22 <VL53L0X_encode_timeout>
 80060b4:	4603      	mov	r3, r0
 80060b6:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 80060b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d108      	bne.n	80060d2 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80060c0:	8bfb      	ldrh	r3, [r7, #30]
 80060c2:	461a      	mov	r2, r3
 80060c4:	2171      	movs	r1, #113	; 0x71
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f7fc fb4c 	bl	8002764 <VL53L0X_WrWord>
 80060cc:	4603      	mov	r3, r0
 80060ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80060d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d107      	bne.n	80060ea <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80060e2:	e002      	b.n	80060ea <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80060e4:	23fc      	movs	r3, #252	; 0xfc
 80060e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80060ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3728      	adds	r7, #40	; 0x28
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b086      	sub	sp, #24
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	60f8      	str	r0, [r7, #12]
 80060fe:	460b      	mov	r3, r1
 8006100:	607a      	str	r2, [r7, #4]
 8006102:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006104:	2300      	movs	r3, #0
 8006106:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8006108:	7afb      	ldrb	r3, [r7, #11]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d002      	beq.n	8006114 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800610e:	2b01      	cmp	r3, #1
 8006110:	d00a      	beq.n	8006128 <VL53L0X_get_vcsel_pulse_period+0x32>
 8006112:	e013      	b.n	800613c <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8006114:	f107 0316 	add.w	r3, r7, #22
 8006118:	461a      	mov	r2, r3
 800611a:	2150      	movs	r1, #80	; 0x50
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f7fc fbb1 	bl	8002884 <VL53L0X_RdByte>
 8006122:	4603      	mov	r3, r0
 8006124:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8006126:	e00b      	b.n	8006140 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8006128:	f107 0316 	add.w	r3, r7, #22
 800612c:	461a      	mov	r2, r3
 800612e:	2170      	movs	r1, #112	; 0x70
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f7fc fba7 	bl	8002884 <VL53L0X_RdByte>
 8006136:	4603      	mov	r3, r0
 8006138:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800613a:	e001      	b.n	8006140 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800613c:	23fc      	movs	r3, #252	; 0xfc
 800613e:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006140:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d107      	bne.n	8006158 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8006148:	7dbb      	ldrb	r3, [r7, #22]
 800614a:	4618      	mov	r0, r3
 800614c:	f7fe fff4 	bl	8005138 <VL53L0X_decode_vcsel_period>
 8006150:	4603      	mov	r3, r0
 8006152:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	701a      	strb	r2, [r3, #0]

	return Status;
 8006158:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3718      	adds	r7, #24
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b092      	sub	sp, #72	; 0x48
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800616e:	2300      	movs	r3, #0
 8006170:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8006174:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006178:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800617a:	f240 7376 	movw	r3, #1910	; 0x776
 800617e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8006180:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006184:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8006186:	f44f 7325 	mov.w	r3, #660	; 0x294
 800618a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800618c:	f240 234e 	movw	r3, #590	; 0x24e
 8006190:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8006192:	f240 23b2 	movw	r3, #690	; 0x2b2
 8006196:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8006198:	f44f 7325 	mov.w	r3, #660	; 0x294
 800619c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800619e:	f240 2326 	movw	r3, #550	; 0x226
 80061a2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80061a4:	2300      	movs	r3, #0
 80061a6:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80061a8:	f644 6320 	movw	r3, #20000	; 0x4e20
 80061ac:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80061ae:	2300      	movs	r3, #0
 80061b0:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d205      	bcs.n	80061c6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80061ba:	23fc      	movs	r3, #252	; 0xfc
 80061bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 80061c0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80061c4:	e0aa      	b.n	800631c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80061c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ca:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80061d2:	f107 0314 	add.w	r3, r7, #20
 80061d6:	4619      	mov	r1, r3
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7fd f943 	bl	8003464 <VL53L0X_GetSequenceStepEnables>
 80061de:	4603      	mov	r3, r0
 80061e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 80061e4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d15b      	bne.n	80062a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 80061ec:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d105      	bne.n	80061fe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 80061f2:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d102      	bne.n	80061fe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 80061f8:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d052      	beq.n	80062a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80061fe:	f107 0310 	add.w	r3, r7, #16
 8006202:	461a      	mov	r2, r3
 8006204:	2102      	movs	r1, #2
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7ff fda2 	bl	8005d50 <get_sequence_step_timeout>
 800620c:	4603      	mov	r3, r0
 800620e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8006212:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800621a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800621e:	e07d      	b.n	800631c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8006220:	7d3b      	ldrb	r3, [r7, #20]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00f      	beq.n	8006246 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8006226:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8006228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800622a:	4413      	add	r3, r2
 800622c:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800622e:	69fa      	ldr	r2, [r7, #28]
 8006230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006232:	429a      	cmp	r2, r3
 8006234:	d204      	bcs.n	8006240 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8006236:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	643b      	str	r3, [r7, #64]	; 0x40
 800623e:	e002      	b.n	8006246 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006240:	23fc      	movs	r3, #252	; 0xfc
 8006242:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8006246:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800624e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006252:	e063      	b.n	800631c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8006254:	7dbb      	ldrb	r3, [r7, #22]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d011      	beq.n	800627e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625e:	4413      	add	r3, r2
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006264:	69fa      	ldr	r2, [r7, #28]
 8006266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006268:	429a      	cmp	r2, r3
 800626a:	d204      	bcs.n	8006276 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800626c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	643b      	str	r3, [r7, #64]	; 0x40
 8006274:	e016      	b.n	80062a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006276:	23fc      	movs	r3, #252	; 0xfc
 8006278:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800627c:	e012      	b.n	80062a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800627e:	7d7b      	ldrb	r3, [r7, #21]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00f      	beq.n	80062a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006288:	4413      	add	r3, r2
 800628a:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800628c:	69fa      	ldr	r2, [r7, #28]
 800628e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006290:	429a      	cmp	r2, r3
 8006292:	d204      	bcs.n	800629e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8006294:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	643b      	str	r3, [r7, #64]	; 0x40
 800629c:	e002      	b.n	80062a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800629e:	23fc      	movs	r3, #252	; 0xfc
 80062a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80062a4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 80062ac:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80062b0:	e034      	b.n	800631c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80062b2:	7dfb      	ldrb	r3, [r7, #23]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d019      	beq.n	80062ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 80062b8:	f107 030c 	add.w	r3, r7, #12
 80062bc:	461a      	mov	r2, r3
 80062be:	2103      	movs	r1, #3
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7ff fd45 	bl	8005d50 <get_sequence_step_timeout>
 80062c6:	4603      	mov	r3, r0
 80062c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062d0:	4413      	add	r3, r2
 80062d2:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80062d4:	69fa      	ldr	r2, [r7, #28]
 80062d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062d8:	429a      	cmp	r2, r3
 80062da:	d204      	bcs.n	80062e6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80062dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	643b      	str	r3, [r7, #64]	; 0x40
 80062e4:	e002      	b.n	80062ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80062e6:	23fc      	movs	r3, #252	; 0xfc
 80062e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 80062ec:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d111      	bne.n	8006318 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 80062f4:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00e      	beq.n	8006318 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 80062fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8006302:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006304:	2104      	movs	r1, #4
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7ff fe03 	bl	8005f12 <set_sequence_step_timeout>
 800630c:	4603      	mov	r3, r0
 800630e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8006318:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800631c:	4618      	mov	r0, r3
 800631e:	3748      	adds	r7, #72	; 0x48
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b090      	sub	sp, #64	; 0x40
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800632e:	2300      	movs	r3, #0
 8006330:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8006334:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006338:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800633a:	f240 7376 	movw	r3, #1910	; 0x776
 800633e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8006340:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006344:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8006346:	f44f 7325 	mov.w	r3, #660	; 0x294
 800634a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800634c:	f240 234e 	movw	r3, #590	; 0x24e
 8006350:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8006352:	f240 23b2 	movw	r3, #690	; 0x2b2
 8006356:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8006358:	f44f 7325 	mov.w	r3, #660	; 0x294
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800635e:	f240 2326 	movw	r3, #550	; 0x226
 8006362:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8006364:	2300      	movs	r3, #0
 8006366:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8006368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800636a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636c:	441a      	add	r2, r3
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006372:	f107 0318 	add.w	r3, r7, #24
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f7fd f873 	bl	8003464 <VL53L0X_GetSequenceStepEnables>
 800637e:	4603      	mov	r3, r0
 8006380:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8006384:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006388:	2b00      	cmp	r3, #0
 800638a:	d002      	beq.n	8006392 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800638c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006390:	e075      	b.n	800647e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8006392:	7e3b      	ldrb	r3, [r7, #24]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d105      	bne.n	80063a4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8006398:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800639a:	2b00      	cmp	r3, #0
 800639c:	d102      	bne.n	80063a4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800639e:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d030      	beq.n	8006406 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80063a4:	f107 0310 	add.w	r3, r7, #16
 80063a8:	461a      	mov	r2, r3
 80063aa:	2102      	movs	r1, #2
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff fccf 	bl	8005d50 <get_sequence_step_timeout>
 80063b2:	4603      	mov	r3, r0
 80063b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80063b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d122      	bne.n	8006406 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 80063c0:	7e3b      	ldrb	r3, [r7, #24]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d007      	beq.n	80063d6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80063ca:	6939      	ldr	r1, [r7, #16]
 80063cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ce:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80063d0:	441a      	add	r2, r3
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80063d6:	7ebb      	ldrb	r3, [r7, #26]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d009      	beq.n	80063f0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80063e0:	6939      	ldr	r1, [r7, #16]
 80063e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e4:	440b      	add	r3, r1
 80063e6:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80063e8:	441a      	add	r2, r3
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	e00a      	b.n	8006406 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80063f0:	7e7b      	ldrb	r3, [r7, #25]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d007      	beq.n	8006406 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80063fa:	6939      	ldr	r1, [r7, #16]
 80063fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fe:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8006400:	441a      	add	r2, r3
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006406:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800640a:	2b00      	cmp	r3, #0
 800640c:	d114      	bne.n	8006438 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800640e:	7efb      	ldrb	r3, [r7, #27]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d011      	beq.n	8006438 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8006414:	f107 030c 	add.w	r3, r7, #12
 8006418:	461a      	mov	r2, r3
 800641a:	2103      	movs	r1, #3
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7ff fc97 	bl	8005d50 <get_sequence_step_timeout>
 8006422:	4603      	mov	r3, r0
 8006424:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800642c:	68f9      	ldr	r1, [r7, #12]
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8006432:	441a      	add	r2, r3
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006438:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800643c:	2b00      	cmp	r3, #0
 800643e:	d114      	bne.n	800646a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8006440:	7f3b      	ldrb	r3, [r7, #28]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d011      	beq.n	800646a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8006446:	f107 0314 	add.w	r3, r7, #20
 800644a:	461a      	mov	r2, r3
 800644c:	2104      	movs	r1, #4
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7ff fc7e 	bl	8005d50 <get_sequence_step_timeout>
 8006454:	4603      	mov	r3, r0
 8006456:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800645e:	6979      	ldr	r1, [r7, #20]
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8006464:	441a      	add	r2, r3
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800646a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800646e:	2b00      	cmp	r3, #0
 8006470:	d103      	bne.n	800647a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800647a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800647e:	4618      	mov	r0, r3
 8006480:	3740      	adds	r7, #64	; 0x40
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
	...

08006488 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b088      	sub	sp, #32
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006492:	2300      	movs	r3, #0
 8006494:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8006496:	2300      	movs	r3, #0
 8006498:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800649a:	e0c6      	b.n	800662a <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	4413      	add	r3, r2
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	74fb      	strb	r3, [r7, #19]
		Index++;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	3301      	adds	r3, #1
 80064aa:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 80064ac:	7cfb      	ldrb	r3, [r7, #19]
 80064ae:	2bff      	cmp	r3, #255	; 0xff
 80064b0:	f040 808d 	bne.w	80065ce <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	4413      	add	r3, r2
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	747b      	strb	r3, [r7, #17]
			Index++;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	3301      	adds	r3, #1
 80064c2:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 80064c4:	7c7b      	ldrb	r3, [r7, #17]
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d87e      	bhi.n	80065c8 <VL53L0X_load_tuning_settings+0x140>
 80064ca:	a201      	add	r2, pc, #4	; (adr r2, 80064d0 <VL53L0X_load_tuning_settings+0x48>)
 80064cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d0:	080064e1 	.word	0x080064e1
 80064d4:	0800651b 	.word	0x0800651b
 80064d8:	08006555 	.word	0x08006555
 80064dc:	0800658f 	.word	0x0800658f
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	4413      	add	r3, r2
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	743b      	strb	r3, [r7, #16]
				Index++;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	3301      	adds	r3, #1
 80064ee:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	683a      	ldr	r2, [r7, #0]
 80064f4:	4413      	add	r3, r2
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	73fb      	strb	r3, [r7, #15]
				Index++;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	3301      	adds	r3, #1
 80064fe:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006500:	7c3b      	ldrb	r3, [r7, #16]
 8006502:	b29b      	uxth	r3, r3
 8006504:	021b      	lsls	r3, r3, #8
 8006506:	b29a      	uxth	r2, r3
 8006508:	7bfb      	ldrb	r3, [r7, #15]
 800650a:	b29b      	uxth	r3, r3
 800650c:	4413      	add	r3, r2
 800650e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	89ba      	ldrh	r2, [r7, #12]
 8006514:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8006518:	e087      	b.n	800662a <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	4413      	add	r3, r2
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	743b      	strb	r3, [r7, #16]
				Index++;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	3301      	adds	r3, #1
 8006528:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	683a      	ldr	r2, [r7, #0]
 800652e:	4413      	add	r3, r2
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	3301      	adds	r3, #1
 8006538:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800653a:	7c3b      	ldrb	r3, [r7, #16]
 800653c:	b29b      	uxth	r3, r3
 800653e:	021b      	lsls	r3, r3, #8
 8006540:	b29a      	uxth	r2, r3
 8006542:	7bfb      	ldrb	r3, [r7, #15]
 8006544:	b29b      	uxth	r3, r3
 8006546:	4413      	add	r3, r2
 8006548:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	89ba      	ldrh	r2, [r7, #12]
 800654e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8006552:	e06a      	b.n	800662a <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	4413      	add	r3, r2
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	743b      	strb	r3, [r7, #16]
				Index++;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	3301      	adds	r3, #1
 8006562:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	4413      	add	r3, r2
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	3301      	adds	r3, #1
 8006572:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006574:	7c3b      	ldrb	r3, [r7, #16]
 8006576:	b29b      	uxth	r3, r3
 8006578:	021b      	lsls	r3, r3, #8
 800657a:	b29a      	uxth	r2, r3
 800657c:	7bfb      	ldrb	r3, [r7, #15]
 800657e:	b29b      	uxth	r3, r3
 8006580:	4413      	add	r3, r2
 8006582:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	89ba      	ldrh	r2, [r7, #12]
 8006588:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800658c:	e04d      	b.n	800662a <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	4413      	add	r3, r2
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	743b      	strb	r3, [r7, #16]
				Index++;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	3301      	adds	r3, #1
 800659c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	4413      	add	r3, r2
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	73fb      	strb	r3, [r7, #15]
				Index++;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	3301      	adds	r3, #1
 80065ac:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80065ae:	7c3b      	ldrb	r3, [r7, #16]
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	021b      	lsls	r3, r3, #8
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	7bfb      	ldrb	r3, [r7, #15]
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	4413      	add	r3, r2
 80065bc:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	89ba      	ldrh	r2, [r7, #12]
 80065c2:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 80065c6:	e030      	b.n	800662a <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80065c8:	23fc      	movs	r3, #252	; 0xfc
 80065ca:	77fb      	strb	r3, [r7, #31]
 80065cc:	e02d      	b.n	800662a <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 80065ce:	7cfb      	ldrb	r3, [r7, #19]
 80065d0:	2b04      	cmp	r3, #4
 80065d2:	d828      	bhi.n	8006626 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	4413      	add	r3, r2
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	74bb      	strb	r3, [r7, #18]
			Index++;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	3301      	adds	r3, #1
 80065e2:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 80065e4:	2300      	movs	r3, #0
 80065e6:	61bb      	str	r3, [r7, #24]
 80065e8:	e00f      	b.n	800660a <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	4413      	add	r3, r2
 80065f0:	7819      	ldrb	r1, [r3, #0]
 80065f2:	f107 0208 	add.w	r2, r7, #8
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	4413      	add	r3, r2
 80065fa:	460a      	mov	r2, r1
 80065fc:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	3301      	adds	r3, #1
 8006602:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	3301      	adds	r3, #1
 8006608:	61bb      	str	r3, [r7, #24]
 800660a:	7cfb      	ldrb	r3, [r7, #19]
 800660c:	69ba      	ldr	r2, [r7, #24]
 800660e:	429a      	cmp	r2, r3
 8006610:	dbeb      	blt.n	80065ea <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8006612:	7cfb      	ldrb	r3, [r7, #19]
 8006614:	f107 0208 	add.w	r2, r7, #8
 8006618:	7cb9      	ldrb	r1, [r7, #18]
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7fc f822 	bl	8002664 <VL53L0X_WriteMulti>
 8006620:	4603      	mov	r3, r0
 8006622:	77fb      	strb	r3, [r7, #31]
 8006624:	e001      	b.n	800662a <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006626:	23fc      	movs	r3, #252	; 0xfc
 8006628:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	4413      	add	r3, r2
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d004      	beq.n	8006640 <VL53L0X_load_tuning_settings+0x1b8>
 8006636:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800663a:	2b00      	cmp	r3, #0
 800663c:	f43f af2e 	beq.w	800649c <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006640:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3720      	adds	r7, #32
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b088      	sub	sp, #32
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006658:	2300      	movs	r3, #0
 800665a:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8006662:	f107 0313 	add.w	r3, r7, #19
 8006666:	4619      	mov	r1, r3
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f7fc ffbb 	bl	80035e4 <VL53L0X_GetXTalkCompensationEnable>
 800666e:	4603      	mov	r3, r0
 8006670:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8006672:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d111      	bne.n	800669e <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800667a:	7cfb      	ldrb	r3, [r7, #19]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00e      	beq.n	800669e <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6a1b      	ldr	r3, [r3, #32]
 8006684:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	8a9b      	ldrh	r3, [r3, #20]
 800668a:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	fb02 f303 	mul.w	r3, r2, r3
 8006692:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	3380      	adds	r3, #128	; 0x80
 8006698:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800669e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3720      	adds	r7, #32
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b086      	sub	sp, #24
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	60f8      	str	r0, [r7, #12]
 80066b2:	60b9      	str	r1, [r7, #8]
 80066b4:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066b6:	2300      	movs	r3, #0
 80066b8:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 80066c2:	f107 0310 	add.w	r3, r7, #16
 80066c6:	461a      	mov	r2, r3
 80066c8:	68b9      	ldr	r1, [r7, #8]
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f7ff ffbe 	bl	800664c <VL53L0X_get_total_xtalk_rate>
 80066d0:	4603      	mov	r3, r0
 80066d2:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80066d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d105      	bne.n	80066e8 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	441a      	add	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	601a      	str	r2, [r3, #0]

	return Status;
 80066e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b09a      	sub	sp, #104	; 0x68
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8006702:	2312      	movs	r3, #18
 8006704:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8006706:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800670a:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800670c:	2342      	movs	r3, #66	; 0x42
 800670e:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8006710:	2306      	movs	r3, #6
 8006712:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8006714:	2307      	movs	r3, #7
 8006716:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006718:	2300      	movs	r3, #0
 800671a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8006724:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800672c:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800672e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006730:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006732:	fb02 f303 	mul.w	r3, r2, r3
 8006736:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8006738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800673a:	3380      	adds	r3, #128	; 0x80
 800673c:	0a1b      	lsrs	r3, r3, #8
 800673e:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8006740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006742:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006744:	fb02 f303 	mul.w	r3, r2, r3
 8006748:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800674a:	2300      	movs	r3, #0
 800674c:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d01a      	beq.n	800678a <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	029b      	lsls	r3, r3, #10
 8006758:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800675e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006760:	4413      	add	r3, r2
 8006762:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8006764:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	fbb2 f3f3 	udiv	r3, r2, r3
 800676c:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800676e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006770:	4613      	mov	r3, r2
 8006772:	005b      	lsls	r3, r3, #1
 8006774:	4413      	add	r3, r2
 8006776:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8006778:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800677a:	fb03 f303 	mul.w	r3, r3, r3
 800677e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8006780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006782:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006786:	0c1b      	lsrs	r3, r3, #16
 8006788:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800678e:	fb02 f303 	mul.w	r3, r2, r3
 8006792:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8006794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006796:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800679a:	0c1b      	lsrs	r3, r3, #16
 800679c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800679e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a0:	fb03 f303 	mul.w	r3, r3, r3
 80067a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80067a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80067ac:	0c1b      	lsrs	r3, r3, #16
 80067ae:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 80067b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067b2:	085a      	lsrs	r2, r3, #1
 80067b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b6:	441a      	add	r2, r3
 80067b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80067be:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 80067c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067c4:	fb02 f303 	mul.w	r3, r2, r3
 80067c8:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 80067ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067d0:	d302      	bcc.n	80067d8 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 80067d2:	4b54      	ldr	r3, [pc, #336]	; (8006924 <VL53L0X_calc_dmax+0x230>)
 80067d4:	663b      	str	r3, [r7, #96]	; 0x60
 80067d6:	e015      	b.n	8006804 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 80067d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067da:	085a      	lsrs	r2, r3, #1
 80067dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067de:	441a      	add	r2, r3
 80067e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e6:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 80067e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067ec:	fb02 f303 	mul.w	r3, r2, r3
 80067f0:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80067f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067f4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80067f8:	0c1b      	lsrs	r3, r3, #16
 80067fa:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 80067fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067fe:	fb03 f303 	mul.w	r3, r3, r3
 8006802:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8006804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006806:	039b      	lsls	r3, r3, #14
 8006808:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800680c:	4a46      	ldr	r2, [pc, #280]	; (8006928 <VL53L0X_calc_dmax+0x234>)
 800680e:	fba2 2303 	umull	r2, r3, r2, r3
 8006812:	099b      	lsrs	r3, r3, #6
 8006814:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8006816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006818:	fb03 f303 	mul.w	r3, r3, r3
 800681c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800681e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006820:	fb03 f303 	mul.w	r3, r3, r3
 8006824:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	3308      	adds	r3, #8
 800682a:	091b      	lsrs	r3, r3, #4
 800682c:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800682e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8006836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006838:	4613      	mov	r3, r2
 800683a:	005b      	lsls	r3, r3, #1
 800683c:	4413      	add	r3, r2
 800683e:	011b      	lsls	r3, r3, #4
 8006840:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006848:	0b9b      	lsrs	r3, r3, #14
 800684a:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800684c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800684e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006850:	4413      	add	r3, r2
 8006852:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8006854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006856:	085b      	lsrs	r3, r3, #1
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	4413      	add	r3, r2
 800685c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006862:	fbb2 f3f3 	udiv	r3, r2, r3
 8006866:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	039b      	lsls	r3, r3, #14
 800686c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	085b      	lsrs	r3, r3, #1
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	4413      	add	r3, r2
 8006876:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006880:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006886:	fb02 f303 	mul.w	r3, r2, r3
 800688a:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006892:	4a25      	ldr	r2, [pc, #148]	; (8006928 <VL53L0X_calc_dmax+0x234>)
 8006894:	fba2 2303 	umull	r2, r3, r2, r3
 8006898:	099b      	lsrs	r3, r3, #6
 800689a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	011b      	lsls	r3, r3, #4
 80068a0:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80068a8:	4a1f      	ldr	r2, [pc, #124]	; (8006928 <VL53L0X_calc_dmax+0x234>)
 80068aa:	fba2 2303 	umull	r2, r3, r2, r3
 80068ae:	099b      	lsrs	r3, r3, #6
 80068b0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 80068b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068b4:	3380      	adds	r3, #128	; 0x80
 80068b6:	0a1b      	lsrs	r3, r3, #8
 80068b8:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d008      	beq.n	80068d2 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	085a      	lsrs	r2, r3, #1
 80068c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c6:	441a      	add	r2, r3
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80068d0:	e001      	b.n	80068d6 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 80068d2:	2300      	movs	r3, #0
 80068d4:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 80068d6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80068d8:	f7fe fc41 	bl	800515e <VL53L0X_isqrt>
 80068dc:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d008      	beq.n	80068f6 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	085a      	lsrs	r2, r3, #1
 80068e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ea:	441a      	add	r2, r3
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068f4:	e001      	b.n	80068fa <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 80068f6:	2300      	movs	r3, #0
 80068f8:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 80068fa:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80068fc:	f7fe fc2f 	bl	800515e <VL53L0X_isqrt>
 8006900:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8006902:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800690c:	429a      	cmp	r2, r3
 800690e:	d902      	bls.n	8006916 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8006910:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006912:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006914:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8006916:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800691a:	4618      	mov	r0, r3
 800691c:	3768      	adds	r7, #104	; 0x68
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	fff00000 	.word	0xfff00000
 8006928:	10624dd3 	.word	0x10624dd3

0800692c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b0b4      	sub	sp, #208	; 0xd0
 8006930:	af04      	add	r7, sp, #16
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
 8006938:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800693a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800693e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8006942:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006946:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800694a:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800694e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8006952:	f241 235c 	movw	r3, #4700	; 0x125c
 8006956:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800695a:	4b9e      	ldr	r3, [pc, #632]	; (8006bd4 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800695c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8006960:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8006964:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8006966:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800696a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800696e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006972:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8006974:	4b98      	ldr	r3, [pc, #608]	; (8006bd8 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8006976:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8006978:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800697c:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800697e:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8006982:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8006984:	f240 6377 	movw	r3, #1655	; 0x677
 8006988:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800698a:	2300      	movs	r3, #0
 800698c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800699e:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 80069a2:	0c1b      	lsrs	r3, r3, #16
 80069a4:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 80069ac:	f107 0310 	add.w	r3, r7, #16
 80069b0:	461a      	mov	r2, r3
 80069b2:	68b9      	ldr	r1, [r7, #8]
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f7ff fe78 	bl	80066aa <VL53L0X_get_total_signal_rate>
 80069ba:	4603      	mov	r3, r0
 80069bc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 80069c0:	f107 0314 	add.w	r3, r7, #20
 80069c4:	461a      	mov	r2, r3
 80069c6:	68b9      	ldr	r1, [r7, #8]
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f7ff fe3f 	bl	800664c <VL53L0X_get_total_xtalk_rate>
 80069ce:	4603      	mov	r3, r0
 80069d0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80069da:	fb02 f303 	mul.w	r3, r2, r3
 80069de:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80069e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069e2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80069e6:	0c1b      	lsrs	r3, r3, #16
 80069e8:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80069f0:	fb02 f303 	mul.w	r3, r2, r3
 80069f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 80069f8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80069fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d902      	bls.n	8006a08 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8006a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8006a08:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d168      	bne.n	8006ae2 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006a16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8006a20:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8006a24:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006a28:	461a      	mov	r2, r3
 8006a2a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f7ff f93a 	bl	8005ca8 <VL53L0X_calc_timeout_mclks>
 8006a34:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8006a46:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8006a4a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f7ff f927 	bl	8005ca8 <VL53L0X_calc_timeout_mclks>
 8006a5a:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8006a62:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006a66:	2b08      	cmp	r3, #8
 8006a68:	d102      	bne.n	8006a70 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8006a70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a74:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8006a76:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006a7a:	fb02 f303 	mul.w	r3, r2, r3
 8006a7e:	02db      	lsls	r3, r3, #11
 8006a80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8006a84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a88:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006a8c:	4a53      	ldr	r2, [pc, #332]	; (8006bdc <VL53L0X_calc_sigma_estimate+0x2b0>)
 8006a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a92:	099b      	lsrs	r3, r3, #6
 8006a94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8006a98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a9e:	fb02 f303 	mul.w	r3, r2, r3
 8006aa2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8006aa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006aaa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006aae:	4a4b      	ldr	r2, [pc, #300]	; (8006bdc <VL53L0X_calc_sigma_estimate+0x2b0>)
 8006ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab4:	099b      	lsrs	r3, r3, #6
 8006ab6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	3380      	adds	r3, #128	; 0x80
 8006abe:	0a1b      	lsrs	r3, r3, #8
 8006ac0:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006ac8:	fb02 f303 	mul.w	r3, r2, r3
 8006acc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8006ad0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006ad4:	3380      	adds	r3, #128	; 0x80
 8006ad6:	0a1b      	lsrs	r3, r3, #8
 8006ad8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	021b      	lsls	r3, r3, #8
 8006ae0:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8006ae2:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d002      	beq.n	8006af0 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8006aea:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8006aee:	e15e      	b.n	8006dae <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8006af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10c      	bne.n	8006b10 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006afc:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b04:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	e14c      	b.n	8006daa <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8006b10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d102      	bne.n	8006b1e <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8006b1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b22:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8006b24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b26:	041a      	lsls	r2, r3, #16
 8006b28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8006b32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d902      	bls.n	8006b42 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8006b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8006b42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b46:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006b4a:	fb02 f303 	mul.w	r3, r2, r3
 8006b4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8006b52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006b56:	4613      	mov	r3, r2
 8006b58:	005b      	lsls	r3, r3, #1
 8006b5a:	4413      	add	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fe fafd 	bl	800515e <VL53L0X_isqrt>
 8006b64:	4603      	mov	r3, r0
 8006b66:	005b      	lsls	r3, r3, #1
 8006b68:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	891b      	ldrh	r3, [r3, #8]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b72:	fb02 f303 	mul.w	r3, r2, r3
 8006b76:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8006b78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b7a:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8006b7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b80:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8006b82:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8006b84:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8006b88:	4a14      	ldr	r2, [pc, #80]	; (8006bdc <VL53L0X_calc_sigma_estimate+0x2b0>)
 8006b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b8e:	099b      	lsrs	r3, r3, #6
 8006b90:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8006b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b94:	041b      	lsls	r3, r3, #16
 8006b96:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006b9a:	4a10      	ldr	r2, [pc, #64]	; (8006bdc <VL53L0X_calc_sigma_estimate+0x2b0>)
 8006b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba0:	099b      	lsrs	r3, r3, #6
 8006ba2:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8006ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba6:	021b      	lsls	r3, r3, #8
 8006ba8:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8006baa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	bfb8      	it	lt
 8006bb6:	425b      	neglt	r3, r3
 8006bb8:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8006bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bbc:	021b      	lsls	r3, r3, #8
 8006bbe:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	7e1b      	ldrb	r3, [r3, #24]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00b      	beq.n	8006be0 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8006bc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006bcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006bd0:	e033      	b.n	8006c3a <VL53L0X_calc_sigma_estimate+0x30e>
 8006bd2:	bf00      	nop
 8006bd4:	028f87ae 	.word	0x028f87ae
 8006bd8:	0006999a 	.word	0x0006999a
 8006bdc:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8006be0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006be2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8006bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf0:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8006bf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bf8:	fb02 f303 	mul.w	r3, r2, r3
 8006bfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8006c00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006c04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c06:	4413      	add	r3, r2
 8006c08:	0c1b      	lsrs	r3, r3, #16
 8006c0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8006c0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c12:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8006c16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8006c1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c1e:	085b      	lsrs	r3, r3, #1
 8006c20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8006c24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c28:	fb03 f303 	mul.w	r3, r3, r3
 8006c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8006c30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c34:	0b9b      	lsrs	r3, r3, #14
 8006c36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8006c3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c40:	fb02 f303 	mul.w	r3, r2, r3
 8006c44:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006c4c:	0c1b      	lsrs	r3, r3, #16
 8006c4e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8006c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c52:	fb03 f303 	mul.w	r3, r3, r3
 8006c56:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8006c58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006c5c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8006c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c60:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006c64:	0c1b      	lsrs	r3, r3, #16
 8006c66:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8006c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6a:	fb03 f303 	mul.w	r3, r3, r3
 8006c6e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8006c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c74:	4413      	add	r3, r2
 8006c76:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8006c78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c7a:	f7fe fa70 	bl	800515e <VL53L0X_isqrt>
 8006c7e:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8006c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c82:	041b      	lsls	r3, r3, #16
 8006c84:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	3332      	adds	r3, #50	; 0x32
 8006c8a:	4a4b      	ldr	r2, [pc, #300]	; (8006db8 <VL53L0X_calc_sigma_estimate+0x48c>)
 8006c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c90:	095a      	lsrs	r2, r3, #5
 8006c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8006c9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ca0:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8006ca4:	fb02 f303 	mul.w	r3, r2, r3
 8006ca8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8006cac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006cb0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006cb4:	3308      	adds	r3, #8
 8006cb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8006cba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006cbe:	4a3f      	ldr	r2, [pc, #252]	; (8006dbc <VL53L0X_calc_sigma_estimate+0x490>)
 8006cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc4:	0b5b      	lsrs	r3, r3, #13
 8006cc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8006cca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006cce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d902      	bls.n	8006cda <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8006cd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8006cda:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006cde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8006ce8:	4a35      	ldr	r2, [pc, #212]	; (8006dc0 <VL53L0X_calc_sigma_estimate+0x494>)
 8006cea:	fba2 2303 	umull	r2, r3, r2, r3
 8006cee:	099b      	lsrs	r3, r3, #6
 8006cf0:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8006cf2:	6a3b      	ldr	r3, [r7, #32]
 8006cf4:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8006cf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cfa:	441a      	add	r2, r3
 8006cfc:	6a3b      	ldr	r3, [r7, #32]
 8006cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fe fa2b 	bl	800515e <VL53L0X_isqrt>
 8006d08:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	021b      	lsls	r3, r3, #8
 8006d0e:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006d16:	4a2a      	ldr	r2, [pc, #168]	; (8006dc0 <VL53L0X_calc_sigma_estimate+0x494>)
 8006d18:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1c:	099b      	lsrs	r3, r3, #6
 8006d1e:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8006d20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d24:	fb03 f303 	mul.w	r3, r3, r3
 8006d28:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	fb03 f303 	mul.w	r3, r3, r3
 8006d30:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8006d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d36:	4413      	add	r3, r2
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fe fa10 	bl	800515e <VL53L0X_isqrt>
 8006d3e:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d46:	fb02 f303 	mul.w	r3, r2, r3
 8006d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8006d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d009      	beq.n	8006d68 <VL53L0X_calc_sigma_estimate+0x43c>
 8006d54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d005      	beq.n	8006d68 <VL53L0X_calc_sigma_estimate+0x43c>
 8006d5c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8006d60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d903      	bls.n	8006d70 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8006d68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8006d76:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8006d82:	6939      	ldr	r1, [r7, #16]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	9303      	str	r3, [sp, #12]
 8006d88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d8c:	9302      	str	r3, [sp, #8]
 8006d8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006d92:	9301      	str	r3, [sp, #4]
 8006d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f7ff fca8 	bl	80066f4 <VL53L0X_calc_dmax>
 8006da4:	4603      	mov	r3, r0
 8006da6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006daa:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	37c0      	adds	r7, #192	; 0xc0
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	51eb851f 	.word	0x51eb851f
 8006dbc:	d1b71759 	.word	0xd1b71759
 8006dc0:	10624dd3 	.word	0x10624dd3

08006dc4 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b090      	sub	sp, #64	; 0x40
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	607a      	str	r2, [r7, #4]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	72fb      	strb	r3, [r7, #11]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8006dde:	2300      	movs	r3, #0
 8006de0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8006de4:	2300      	movs	r3, #0
 8006de6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8006dea:	2300      	movs	r3, #0
 8006dec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8006df0:	2300      	movs	r3, #0
 8006df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8006df6:	2300      	movs	r3, #0
 8006df8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8006e02:	2300      	movs	r3, #0
 8006e04:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8006e12:	2300      	movs	r3, #0
 8006e14:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8006e16:	7afb      	ldrb	r3, [r7, #11]
 8006e18:	10db      	asrs	r3, r3, #3
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	f003 030f 	and.w	r3, r3, #15
 8006e20:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8006e24:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d017      	beq.n	8006e5c <VL53L0X_get_pal_range_status+0x98>
 8006e2c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006e30:	2b05      	cmp	r3, #5
 8006e32:	d013      	beq.n	8006e5c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8006e34:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006e38:	2b07      	cmp	r3, #7
 8006e3a:	d00f      	beq.n	8006e5c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8006e3c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006e40:	2b0c      	cmp	r3, #12
 8006e42:	d00b      	beq.n	8006e5c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8006e44:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006e48:	2b0d      	cmp	r3, #13
 8006e4a:	d007      	beq.n	8006e5c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8006e4c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006e50:	2b0e      	cmp	r3, #14
 8006e52:	d003      	beq.n	8006e5c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8006e54:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006e58:	2b0f      	cmp	r3, #15
 8006e5a:	d103      	bne.n	8006e64 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8006e62:	e002      	b.n	8006e6a <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8006e64:	2300      	movs	r3, #0
 8006e66:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8006e6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d109      	bne.n	8006e86 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006e72:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8006e76:	461a      	mov	r2, r3
 8006e78:	2100      	movs	r1, #0
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f7fc fc86 	bl	800378c <VL53L0X_GetLimitCheckEnable>
 8006e80:	4603      	mov	r3, r0
 8006e82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8006e86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d02e      	beq.n	8006eec <VL53L0X_get_pal_range_status+0x128>
 8006e8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d12a      	bne.n	8006eec <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8006e96:	f107 0310 	add.w	r3, r7, #16
 8006e9a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006e9e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f7ff fd43 	bl	800692c <VL53L0X_calc_sigma_estimate>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8006eac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d103      	bne.n	8006ebc <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eba:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8006ebc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d113      	bne.n	8006eec <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8006ec4:	f107 0320 	add.w	r3, r7, #32
 8006ec8:	461a      	mov	r2, r3
 8006eca:	2100      	movs	r1, #0
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f7fc fce3 	bl	8003898 <VL53L0X_GetLimitCheckValue>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d006      	beq.n	8006eec <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8006ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d902      	bls.n	8006eec <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8006eec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d109      	bne.n	8006f08 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006ef4:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8006ef8:	461a      	mov	r2, r3
 8006efa:	2102      	movs	r1, #2
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f7fc fc45 	bl	800378c <VL53L0X_GetLimitCheckEnable>
 8006f02:	4603      	mov	r3, r0
 8006f04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8006f08:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d044      	beq.n	8006f9a <VL53L0X_get_pal_range_status+0x1d6>
 8006f10:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d140      	bne.n	8006f9a <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8006f18:	f107 031c 	add.w	r3, r7, #28
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	2102      	movs	r1, #2
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f7fc fcb9 	bl	8003898 <VL53L0X_GetLimitCheckValue>
 8006f26:	4603      	mov	r3, r0
 8006f28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8006f2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d107      	bne.n	8006f44 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006f34:	2201      	movs	r2, #1
 8006f36:	21ff      	movs	r1, #255	; 0xff
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f7fb fbef 	bl	800271c <VL53L0X_WrByte>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8006f44:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d109      	bne.n	8006f60 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8006f4c:	f107 0316 	add.w	r3, r7, #22
 8006f50:	461a      	mov	r2, r3
 8006f52:	21b6      	movs	r1, #182	; 0xb6
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f7fb fcbf 	bl	80028d8 <VL53L0X_RdWord>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8006f60:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d107      	bne.n	8006f78 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006f68:	2200      	movs	r2, #0
 8006f6a:	21ff      	movs	r1, #255	; 0xff
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f7fb fbd5 	bl	800271c <VL53L0X_WrByte>
 8006f72:	4603      	mov	r3, r0
 8006f74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8006f78:	8afb      	ldrh	r3, [r7, #22]
 8006f7a:	025b      	lsls	r3, r3, #9
 8006f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f82:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d006      	beq.n	8006f9a <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8006f8c:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8006f8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d902      	bls.n	8006f9a <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8006f94:	2301      	movs	r3, #1
 8006f96:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8006f9a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d109      	bne.n	8006fb6 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006fa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	2103      	movs	r1, #3
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f7fc fbee 	bl	800378c <VL53L0X_GetLimitCheckEnable>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8006fb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d023      	beq.n	8007006 <VL53L0X_get_pal_range_status+0x242>
 8006fbe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d11f      	bne.n	8007006 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8006fc6:	893b      	ldrh	r3, [r7, #8]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d102      	bne.n	8006fd2 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	637b      	str	r3, [r7, #52]	; 0x34
 8006fd0:	e005      	b.n	8006fde <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	021a      	lsls	r2, r3, #8
 8006fd6:	893b      	ldrh	r3, [r7, #8]
 8006fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fdc:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8006fde:	f107 0318 	add.w	r3, r7, #24
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	2103      	movs	r1, #3
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f7fc fc56 	bl	8003898 <VL53L0X_GetLimitCheckValue>
 8006fec:	4603      	mov	r3, r0
 8006fee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d006      	beq.n	8007006 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8006ff8:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8006ffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d202      	bcs.n	8007006 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8007000:	2301      	movs	r3, #1
 8007002:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007006:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800700a:	2b00      	cmp	r3, #0
 800700c:	d14a      	bne.n	80070a4 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800700e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007012:	2b01      	cmp	r3, #1
 8007014:	d103      	bne.n	800701e <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8007016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007018:	22ff      	movs	r2, #255	; 0xff
 800701a:	701a      	strb	r2, [r3, #0]
 800701c:	e042      	b.n	80070a4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800701e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007022:	2b01      	cmp	r3, #1
 8007024:	d007      	beq.n	8007036 <VL53L0X_get_pal_range_status+0x272>
 8007026:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800702a:	2b02      	cmp	r3, #2
 800702c:	d003      	beq.n	8007036 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800702e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007032:	2b03      	cmp	r3, #3
 8007034:	d103      	bne.n	800703e <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8007036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007038:	2205      	movs	r2, #5
 800703a:	701a      	strb	r2, [r3, #0]
 800703c:	e032      	b.n	80070a4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800703e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007042:	2b06      	cmp	r3, #6
 8007044:	d003      	beq.n	800704e <VL53L0X_get_pal_range_status+0x28a>
 8007046:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800704a:	2b09      	cmp	r3, #9
 800704c:	d103      	bne.n	8007056 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800704e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007050:	2204      	movs	r2, #4
 8007052:	701a      	strb	r2, [r3, #0]
 8007054:	e026      	b.n	80070a4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8007056:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800705a:	2b08      	cmp	r3, #8
 800705c:	d007      	beq.n	800706e <VL53L0X_get_pal_range_status+0x2aa>
 800705e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007062:	2b0a      	cmp	r3, #10
 8007064:	d003      	beq.n	800706e <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8007066:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800706a:	2b01      	cmp	r3, #1
 800706c:	d103      	bne.n	8007076 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800706e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007070:	2203      	movs	r2, #3
 8007072:	701a      	strb	r2, [r3, #0]
 8007074:	e016      	b.n	80070a4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8007076:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800707a:	2b04      	cmp	r3, #4
 800707c:	d003      	beq.n	8007086 <VL53L0X_get_pal_range_status+0x2c2>
 800707e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007082:	2b01      	cmp	r3, #1
 8007084:	d103      	bne.n	800708e <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8007086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007088:	2202      	movs	r2, #2
 800708a:	701a      	strb	r2, [r3, #0]
 800708c:	e00a      	b.n	80070a4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800708e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8007092:	2b01      	cmp	r3, #1
 8007094:	d103      	bne.n	800709e <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8007096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007098:	2201      	movs	r2, #1
 800709a:	701a      	strb	r2, [r3, #0]
 800709c:	e002      	b.n	80070a4 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800709e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a0:	2200      	movs	r2, #0
 80070a2:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 80070a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d102      	bne.n	80070b2 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 80070ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070ae:	2200      	movs	r2, #0
 80070b0:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80070b2:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80070b6:	461a      	mov	r2, r3
 80070b8:	2101      	movs	r1, #1
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f7fc fb66 	bl	800378c <VL53L0X_GetLimitCheckEnable>
 80070c0:	4603      	mov	r3, r0
 80070c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80070c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d14f      	bne.n	800716e <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80070ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d003      	beq.n	80070de <VL53L0X_get_pal_range_status+0x31a>
 80070d6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d103      	bne.n	80070e6 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 80070de:	2301      	movs	r3, #1
 80070e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070e4:	e002      	b.n	80070ec <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 80070e6:	2300      	movs	r3, #0
 80070e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80070f2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 80070f6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80070fa:	2b04      	cmp	r3, #4
 80070fc:	d003      	beq.n	8007106 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 80070fe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8007102:	2b00      	cmp	r3, #0
 8007104:	d103      	bne.n	800710e <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8007106:	2301      	movs	r3, #1
 8007108:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800710c:	e002      	b.n	8007114 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800710e:	2300      	movs	r3, #0
 8007110:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800711a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800711e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007122:	2b00      	cmp	r3, #0
 8007124:	d003      	beq.n	800712e <VL53L0X_get_pal_range_status+0x36a>
 8007126:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800712a:	2b01      	cmp	r3, #1
 800712c:	d103      	bne.n	8007136 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800712e:	2301      	movs	r3, #1
 8007130:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007134:	e002      	b.n	800713c <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8007136:	2300      	movs	r3, #0
 8007138:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007142:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8007146:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <VL53L0X_get_pal_range_status+0x392>
 800714e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007152:	2b01      	cmp	r3, #1
 8007154:	d103      	bne.n	800715e <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8007156:	2301      	movs	r3, #1
 8007158:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800715c:	e002      	b.n	8007164 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800715e:	2300      	movs	r3, #0
 8007160:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800716a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800716e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8007172:	4618      	mov	r0, r3
 8007174:	3740      	adds	r7, #64	; 0x40
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b082      	sub	sp, #8
 800717e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007180:	2300      	movs	r3, #0
 8007182:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007184:	2003      	movs	r0, #3
 8007186:	f001 f93d 	bl	8008404 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800718a:	2000      	movs	r0, #0
 800718c:	f000 f80e 	bl	80071ac <HAL_InitTick>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d002      	beq.n	800719c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	71fb      	strb	r3, [r7, #7]
 800719a:	e001      	b.n	80071a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800719c:	f7fa feee 	bl	8001f7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80071a0:	79fb      	ldrb	r3, [r7, #7]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
	...

080071ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80071b4:	2300      	movs	r3, #0
 80071b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80071b8:	4b17      	ldr	r3, [pc, #92]	; (8007218 <HAL_InitTick+0x6c>)
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d023      	beq.n	8007208 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80071c0:	4b16      	ldr	r3, [pc, #88]	; (800721c <HAL_InitTick+0x70>)
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	4b14      	ldr	r3, [pc, #80]	; (8007218 <HAL_InitTick+0x6c>)
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	4619      	mov	r1, r3
 80071ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80071ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80071d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d6:	4618      	mov	r0, r3
 80071d8:	f001 f949 	bl	800846e <HAL_SYSTICK_Config>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10f      	bne.n	8007202 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b0f      	cmp	r3, #15
 80071e6:	d809      	bhi.n	80071fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80071e8:	2200      	movs	r2, #0
 80071ea:	6879      	ldr	r1, [r7, #4]
 80071ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071f0:	f001 f913 	bl	800841a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80071f4:	4a0a      	ldr	r2, [pc, #40]	; (8007220 <HAL_InitTick+0x74>)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6013      	str	r3, [r2, #0]
 80071fa:	e007      	b.n	800720c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	73fb      	strb	r3, [r7, #15]
 8007200:	e004      	b.n	800720c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	73fb      	strb	r3, [r7, #15]
 8007206:	e001      	b.n	800720c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800720c:	7bfb      	ldrb	r3, [r7, #15]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20000458 	.word	0x20000458
 800721c:	20000194 	.word	0x20000194
 8007220:	20000454 	.word	0x20000454

08007224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007224:	b480      	push	{r7}
 8007226:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007228:	4b06      	ldr	r3, [pc, #24]	; (8007244 <HAL_IncTick+0x20>)
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	461a      	mov	r2, r3
 800722e:	4b06      	ldr	r3, [pc, #24]	; (8007248 <HAL_IncTick+0x24>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4413      	add	r3, r2
 8007234:	4a04      	ldr	r2, [pc, #16]	; (8007248 <HAL_IncTick+0x24>)
 8007236:	6013      	str	r3, [r2, #0]
}
 8007238:	bf00      	nop
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	20000458 	.word	0x20000458
 8007248:	20001078 	.word	0x20001078

0800724c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800724c:	b480      	push	{r7}
 800724e:	af00      	add	r7, sp, #0
  return uwTick;
 8007250:	4b03      	ldr	r3, [pc, #12]	; (8007260 <HAL_GetTick+0x14>)
 8007252:	681b      	ldr	r3, [r3, #0]
}
 8007254:	4618      	mov	r0, r3
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	20001078 	.word	0x20001078

08007264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800726c:	f7ff ffee 	bl	800724c <HAL_GetTick>
 8007270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800727c:	d005      	beq.n	800728a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800727e:	4b0a      	ldr	r3, [pc, #40]	; (80072a8 <HAL_Delay+0x44>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	4413      	add	r3, r2
 8007288:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800728a:	bf00      	nop
 800728c:	f7ff ffde 	bl	800724c <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	429a      	cmp	r2, r3
 800729a:	d8f7      	bhi.n	800728c <HAL_Delay+0x28>
  {
  }
}
 800729c:	bf00      	nop
 800729e:	bf00      	nop
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	20000458 	.word	0x20000458

080072ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	431a      	orrs	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	609a      	str	r2, [r3, #8]
}
 80072c6:	bf00      	nop
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b083      	sub	sp, #12
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
 80072da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	431a      	orrs	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	609a      	str	r2, [r3, #8]
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007308:	4618      	mov	r0, r3
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007314:	b480      	push	{r7}
 8007316:	b087      	sub	sp, #28
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
 8007320:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	3360      	adds	r3, #96	; 0x60
 8007326:	461a      	mov	r2, r3
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	4b08      	ldr	r3, [pc, #32]	; (8007358 <LL_ADC_SetOffset+0x44>)
 8007336:	4013      	ands	r3, r2
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	430a      	orrs	r2, r1
 8007342:	4313      	orrs	r3, r2
 8007344:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800734c:	bf00      	nop
 800734e:	371c      	adds	r7, #28
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	03fff000 	.word	0x03fff000

0800735c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	3360      	adds	r3, #96	; 0x60
 800736a:	461a      	mov	r2, r3
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800737c:	4618      	mov	r0, r3
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	3360      	adds	r3, #96	; 0x60
 8007398:	461a      	mov	r2, r3
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	431a      	orrs	r2, r3
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80073b2:	bf00      	nop
 80073b4:	371c      	adds	r7, #28
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80073be:	b480      	push	{r7}
 80073c0:	b083      	sub	sp, #12
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	431a      	orrs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	615a      	str	r2, [r3, #20]
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b087      	sub	sp, #28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	3330      	adds	r3, #48	; 0x30
 80073f4:	461a      	mov	r2, r3
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	0a1b      	lsrs	r3, r3, #8
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	f003 030c 	and.w	r3, r3, #12
 8007400:	4413      	add	r3, r2
 8007402:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	f003 031f 	and.w	r3, r3, #31
 800740e:	211f      	movs	r1, #31
 8007410:	fa01 f303 	lsl.w	r3, r1, r3
 8007414:	43db      	mvns	r3, r3
 8007416:	401a      	ands	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	0e9b      	lsrs	r3, r3, #26
 800741c:	f003 011f 	and.w	r1, r3, #31
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	f003 031f 	and.w	r3, r3, #31
 8007426:	fa01 f303 	lsl.w	r3, r1, r3
 800742a:	431a      	orrs	r2, r3
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007430:	bf00      	nop
 8007432:	371c      	adds	r7, #28
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800743c:	b480      	push	{r7}
 800743e:	b087      	sub	sp, #28
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	3314      	adds	r3, #20
 800744c:	461a      	mov	r2, r3
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	0e5b      	lsrs	r3, r3, #25
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	f003 0304 	and.w	r3, r3, #4
 8007458:	4413      	add	r3, r2
 800745a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	0d1b      	lsrs	r3, r3, #20
 8007464:	f003 031f 	and.w	r3, r3, #31
 8007468:	2107      	movs	r1, #7
 800746a:	fa01 f303 	lsl.w	r3, r1, r3
 800746e:	43db      	mvns	r3, r3
 8007470:	401a      	ands	r2, r3
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	0d1b      	lsrs	r3, r3, #20
 8007476:	f003 031f 	and.w	r3, r3, #31
 800747a:	6879      	ldr	r1, [r7, #4]
 800747c:	fa01 f303 	lsl.w	r3, r1, r3
 8007480:	431a      	orrs	r2, r3
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8007486:	bf00      	nop
 8007488:	371c      	adds	r7, #28
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
	...

08007494 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074ac:	43db      	mvns	r3, r3
 80074ae:	401a      	ands	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f003 0318 	and.w	r3, r3, #24
 80074b6:	4908      	ldr	r1, [pc, #32]	; (80074d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80074b8:	40d9      	lsrs	r1, r3
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	400b      	ands	r3, r1
 80074be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074c2:	431a      	orrs	r2, r3
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80074ca:	bf00      	nop
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	0007ffff 	.word	0x0007ffff

080074dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80074ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	6093      	str	r3, [r2, #8]
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007514:	d101      	bne.n	800751a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007516:	2301      	movs	r3, #1
 8007518:	e000      	b.n	800751c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007538:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800753c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007560:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007564:	d101      	bne.n	800756a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007566:	2301      	movs	r3, #1
 8007568:	e000      	b.n	800756c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	2b01      	cmp	r3, #1
 800758a:	d101      	bne.n	8007590 <LL_ADC_IsEnabled+0x18>
 800758c:	2301      	movs	r3, #1
 800758e:	e000      	b.n	8007592 <LL_ADC_IsEnabled+0x1a>
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	370c      	adds	r7, #12
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr

0800759e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800759e:	b480      	push	{r7}
 80075a0:	b083      	sub	sp, #12
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f003 0304 	and.w	r3, r3, #4
 80075ae:	2b04      	cmp	r3, #4
 80075b0:	d101      	bne.n	80075b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80075b2:	2301      	movs	r3, #1
 80075b4:	e000      	b.n	80075b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f003 0308 	and.w	r3, r3, #8
 80075d4:	2b08      	cmp	r3, #8
 80075d6:	d101      	bne.n	80075dc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80075d8:	2301      	movs	r3, #1
 80075da:	e000      	b.n	80075de <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
	...

080075ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80075ec:	b590      	push	{r4, r7, lr}
 80075ee:	b089      	sub	sp, #36	; 0x24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80075f4:	2300      	movs	r3, #0
 80075f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80075f8:	2300      	movs	r3, #0
 80075fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e139      	b.n	800787a <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007610:	2b00      	cmp	r3, #0
 8007612:	d109      	bne.n	8007628 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f7f9 f8fb 	bl	8000810 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4618      	mov	r0, r3
 800762e:	f7ff ff67 	bl	8007500 <LL_ADC_IsDeepPowerDownEnabled>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d004      	beq.n	8007642 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4618      	mov	r0, r3
 800763e:	f7ff ff4d 	bl	80074dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4618      	mov	r0, r3
 8007648:	f7ff ff82 	bl	8007550 <LL_ADC_IsInternalRegulatorEnabled>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d115      	bne.n	800767e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4618      	mov	r0, r3
 8007658:	f7ff ff66 	bl	8007528 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800765c:	4b89      	ldr	r3, [pc, #548]	; (8007884 <HAL_ADC_Init+0x298>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	099b      	lsrs	r3, r3, #6
 8007662:	4a89      	ldr	r2, [pc, #548]	; (8007888 <HAL_ADC_Init+0x29c>)
 8007664:	fba2 2303 	umull	r2, r3, r2, r3
 8007668:	099b      	lsrs	r3, r3, #6
 800766a:	3301      	adds	r3, #1
 800766c:	005b      	lsls	r3, r3, #1
 800766e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007670:	e002      	b.n	8007678 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	3b01      	subs	r3, #1
 8007676:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1f9      	bne.n	8007672 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4618      	mov	r0, r3
 8007684:	f7ff ff64 	bl	8007550 <LL_ADC_IsInternalRegulatorEnabled>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10d      	bne.n	80076aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007692:	f043 0210 	orr.w	r2, r3, #16
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800769e:	f043 0201 	orr.w	r2, r3, #1
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7ff ff75 	bl	800759e <LL_ADC_REG_IsConversionOngoing>
 80076b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ba:	f003 0310 	and.w	r3, r3, #16
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f040 80d2 	bne.w	8007868 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f040 80ce 	bne.w	8007868 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80076d4:	f043 0202 	orr.w	r2, r3, #2
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4618      	mov	r0, r3
 80076e2:	f7ff ff49 	bl	8007578 <LL_ADC_IsEnabled>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d115      	bne.n	8007718 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80076ec:	4867      	ldr	r0, [pc, #412]	; (800788c <HAL_ADC_Init+0x2a0>)
 80076ee:	f7ff ff43 	bl	8007578 <LL_ADC_IsEnabled>
 80076f2:	4604      	mov	r4, r0
 80076f4:	4866      	ldr	r0, [pc, #408]	; (8007890 <HAL_ADC_Init+0x2a4>)
 80076f6:	f7ff ff3f 	bl	8007578 <LL_ADC_IsEnabled>
 80076fa:	4603      	mov	r3, r0
 80076fc:	431c      	orrs	r4, r3
 80076fe:	4865      	ldr	r0, [pc, #404]	; (8007894 <HAL_ADC_Init+0x2a8>)
 8007700:	f7ff ff3a 	bl	8007578 <LL_ADC_IsEnabled>
 8007704:	4603      	mov	r3, r0
 8007706:	4323      	orrs	r3, r4
 8007708:	2b00      	cmp	r3, #0
 800770a:	d105      	bne.n	8007718 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	4619      	mov	r1, r3
 8007712:	4861      	ldr	r0, [pc, #388]	; (8007898 <HAL_ADC_Init+0x2ac>)
 8007714:	f7ff fdca 	bl	80072ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	7e5b      	ldrb	r3, [r3, #25]
 800771c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007722:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8007728:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800772e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007736:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007738:	4313      	orrs	r3, r2
 800773a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d106      	bne.n	8007754 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774a:	3b01      	subs	r3, #1
 800774c:	045b      	lsls	r3, r3, #17
 800774e:	69ba      	ldr	r2, [r7, #24]
 8007750:	4313      	orrs	r3, r2
 8007752:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007758:	2b00      	cmp	r3, #0
 800775a:	d009      	beq.n	8007770 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007760:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007768:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	4313      	orrs	r3, r2
 800776e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68da      	ldr	r2, [r3, #12]
 8007776:	4b49      	ldr	r3, [pc, #292]	; (800789c <HAL_ADC_Init+0x2b0>)
 8007778:	4013      	ands	r3, r2
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	6812      	ldr	r2, [r2, #0]
 800777e:	69b9      	ldr	r1, [r7, #24]
 8007780:	430b      	orrs	r3, r1
 8007782:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4618      	mov	r0, r3
 800778a:	f7ff ff08 	bl	800759e <LL_ADC_REG_IsConversionOngoing>
 800778e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4618      	mov	r0, r3
 8007796:	f7ff ff15 	bl	80075c4 <LL_ADC_INJ_IsConversionOngoing>
 800779a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d140      	bne.n	8007824 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d13d      	bne.n	8007824 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	7e1b      	ldrb	r3, [r3, #24]
 80077b0:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80077b2:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80077ba:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80077bc:	4313      	orrs	r3, r2
 80077be:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077ca:	f023 0306 	bic.w	r3, r3, #6
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	6812      	ldr	r2, [r2, #0]
 80077d2:	69b9      	ldr	r1, [r7, #24]
 80077d4:	430b      	orrs	r3, r1
 80077d6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d118      	bne.n	8007814 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80077ec:	f023 0304 	bic.w	r3, r3, #4
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80077f8:	4311      	orrs	r1, r2
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80077fe:	4311      	orrs	r1, r2
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007804:	430a      	orrs	r2, r1
 8007806:	431a      	orrs	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f042 0201 	orr.w	r2, r2, #1
 8007810:	611a      	str	r2, [r3, #16]
 8007812:	e007      	b.n	8007824 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	691a      	ldr	r2, [r3, #16]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f022 0201 	bic.w	r2, r2, #1
 8007822:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d10c      	bne.n	8007846 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007832:	f023 010f 	bic.w	r1, r3, #15
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	1e5a      	subs	r2, r3, #1
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	430a      	orrs	r2, r1
 8007842:	631a      	str	r2, [r3, #48]	; 0x30
 8007844:	e007      	b.n	8007856 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f022 020f 	bic.w	r2, r2, #15
 8007854:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800785a:	f023 0303 	bic.w	r3, r3, #3
 800785e:	f043 0201 	orr.w	r2, r3, #1
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	659a      	str	r2, [r3, #88]	; 0x58
 8007866:	e007      	b.n	8007878 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800786c:	f043 0210 	orr.w	r2, r3, #16
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007878:	7ffb      	ldrb	r3, [r7, #31]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3724      	adds	r7, #36	; 0x24
 800787e:	46bd      	mov	sp, r7
 8007880:	bd90      	pop	{r4, r7, pc}
 8007882:	bf00      	nop
 8007884:	20000194 	.word	0x20000194
 8007888:	053e2d63 	.word	0x053e2d63
 800788c:	50040000 	.word	0x50040000
 8007890:	50040100 	.word	0x50040100
 8007894:	50040200 	.word	0x50040200
 8007898:	50040300 	.word	0x50040300
 800789c:	fff0c007 	.word	0xfff0c007

080078a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b0b6      	sub	sp, #216	; 0xd8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80078aa:	2300      	movs	r3, #0
 80078ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80078b0:	2300      	movs	r3, #0
 80078b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d101      	bne.n	80078c2 <HAL_ADC_ConfigChannel+0x22>
 80078be:	2302      	movs	r3, #2
 80078c0:	e3e3      	b.n	800808a <HAL_ADC_ConfigChannel+0x7ea>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7ff fe65 	bl	800759e <LL_ADC_REG_IsConversionOngoing>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f040 83c4 	bne.w	8008064 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	2b05      	cmp	r3, #5
 80078e2:	d824      	bhi.n	800792e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	3b02      	subs	r3, #2
 80078ea:	2b03      	cmp	r3, #3
 80078ec:	d81b      	bhi.n	8007926 <HAL_ADC_ConfigChannel+0x86>
 80078ee:	a201      	add	r2, pc, #4	; (adr r2, 80078f4 <HAL_ADC_ConfigChannel+0x54>)
 80078f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f4:	08007905 	.word	0x08007905
 80078f8:	0800790d 	.word	0x0800790d
 80078fc:	08007915 	.word	0x08007915
 8007900:	0800791d 	.word	0x0800791d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	220c      	movs	r2, #12
 8007908:	605a      	str	r2, [r3, #4]
          break;
 800790a:	e011      	b.n	8007930 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	2212      	movs	r2, #18
 8007910:	605a      	str	r2, [r3, #4]
          break;
 8007912:	e00d      	b.n	8007930 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	2218      	movs	r2, #24
 8007918:	605a      	str	r2, [r3, #4]
          break;
 800791a:	e009      	b.n	8007930 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007922:	605a      	str	r2, [r3, #4]
          break;
 8007924:	e004      	b.n	8007930 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2206      	movs	r2, #6
 800792a:	605a      	str	r2, [r3, #4]
          break;
 800792c:	e000      	b.n	8007930 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800792e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6818      	ldr	r0, [r3, #0]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	6859      	ldr	r1, [r3, #4]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	461a      	mov	r2, r3
 800793e:	f7ff fd51 	bl	80073e4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4618      	mov	r0, r3
 8007948:	f7ff fe29 	bl	800759e <LL_ADC_REG_IsConversionOngoing>
 800794c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4618      	mov	r0, r3
 8007956:	f7ff fe35 	bl	80075c4 <LL_ADC_INJ_IsConversionOngoing>
 800795a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800795e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007962:	2b00      	cmp	r3, #0
 8007964:	f040 81c1 	bne.w	8007cea <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007968:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800796c:	2b00      	cmp	r3, #0
 800796e:	f040 81bc 	bne.w	8007cea <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800797a:	d10f      	bne.n	800799c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6818      	ldr	r0, [r3, #0]
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2200      	movs	r2, #0
 8007986:	4619      	mov	r1, r3
 8007988:	f7ff fd58 	bl	800743c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007994:	4618      	mov	r0, r3
 8007996:	f7ff fd12 	bl	80073be <LL_ADC_SetSamplingTimeCommonConfig>
 800799a:	e00e      	b.n	80079ba <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6818      	ldr	r0, [r3, #0]
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	6819      	ldr	r1, [r3, #0]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	461a      	mov	r2, r3
 80079aa:	f7ff fd47 	bl	800743c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2100      	movs	r1, #0
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7ff fd02 	bl	80073be <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	695a      	ldr	r2, [r3, #20]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	08db      	lsrs	r3, r3, #3
 80079c6:	f003 0303 	and.w	r3, r3, #3
 80079ca:	005b      	lsls	r3, r3, #1
 80079cc:	fa02 f303 	lsl.w	r3, r2, r3
 80079d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	2b04      	cmp	r3, #4
 80079da:	d00a      	beq.n	80079f2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6818      	ldr	r0, [r3, #0]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	6919      	ldr	r1, [r3, #16]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079ec:	f7ff fc92 	bl	8007314 <LL_ADC_SetOffset>
 80079f0:	e17b      	b.n	8007cea <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2100      	movs	r1, #0
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7ff fcaf 	bl	800735c <LL_ADC_GetOffsetChannel>
 80079fe:	4603      	mov	r3, r0
 8007a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10a      	bne.n	8007a1e <HAL_ADC_ConfigChannel+0x17e>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7ff fca4 	bl	800735c <LL_ADC_GetOffsetChannel>
 8007a14:	4603      	mov	r3, r0
 8007a16:	0e9b      	lsrs	r3, r3, #26
 8007a18:	f003 021f 	and.w	r2, r3, #31
 8007a1c:	e01e      	b.n	8007a5c <HAL_ADC_ConfigChannel+0x1bc>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2100      	movs	r1, #0
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7ff fc99 	bl	800735c <LL_ADC_GetOffsetChannel>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a34:	fa93 f3a3 	rbit	r3, r3
 8007a38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007a3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007a44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d101      	bne.n	8007a50 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8007a4c:	2320      	movs	r3, #32
 8007a4e:	e004      	b.n	8007a5a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8007a50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a54:	fab3 f383 	clz	r3, r3
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d105      	bne.n	8007a74 <HAL_ADC_ConfigChannel+0x1d4>
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	0e9b      	lsrs	r3, r3, #26
 8007a6e:	f003 031f 	and.w	r3, r3, #31
 8007a72:	e018      	b.n	8007aa6 <HAL_ADC_ConfigChannel+0x206>
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007a80:	fa93 f3a3 	rbit	r3, r3
 8007a84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8007a88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8007a90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8007a98:	2320      	movs	r3, #32
 8007a9a:	e004      	b.n	8007aa6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8007a9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007aa0:	fab3 f383 	clz	r3, r3
 8007aa4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d106      	bne.n	8007ab8 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7ff fc68 	bl	8007388 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2101      	movs	r1, #1
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7ff fc4c 	bl	800735c <LL_ADC_GetOffsetChannel>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10a      	bne.n	8007ae4 <HAL_ADC_ConfigChannel+0x244>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7ff fc41 	bl	800735c <LL_ADC_GetOffsetChannel>
 8007ada:	4603      	mov	r3, r0
 8007adc:	0e9b      	lsrs	r3, r3, #26
 8007ade:	f003 021f 	and.w	r2, r3, #31
 8007ae2:	e01e      	b.n	8007b22 <HAL_ADC_ConfigChannel+0x282>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2101      	movs	r1, #1
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7ff fc36 	bl	800735c <LL_ADC_GetOffsetChannel>
 8007af0:	4603      	mov	r3, r0
 8007af2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007af6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007afa:	fa93 f3a3 	rbit	r3, r3
 8007afe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8007b02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8007b0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d101      	bne.n	8007b16 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8007b12:	2320      	movs	r3, #32
 8007b14:	e004      	b.n	8007b20 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8007b16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b1a:	fab3 f383 	clz	r3, r3
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d105      	bne.n	8007b3a <HAL_ADC_ConfigChannel+0x29a>
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	0e9b      	lsrs	r3, r3, #26
 8007b34:	f003 031f 	and.w	r3, r3, #31
 8007b38:	e018      	b.n	8007b6c <HAL_ADC_ConfigChannel+0x2cc>
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b46:	fa93 f3a3 	rbit	r3, r3
 8007b4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8007b4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8007b56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d101      	bne.n	8007b62 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8007b5e:	2320      	movs	r3, #32
 8007b60:	e004      	b.n	8007b6c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8007b62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b66:	fab3 f383 	clz	r3, r3
 8007b6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d106      	bne.n	8007b7e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2200      	movs	r2, #0
 8007b76:	2101      	movs	r1, #1
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7ff fc05 	bl	8007388 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2102      	movs	r1, #2
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7ff fbe9 	bl	800735c <LL_ADC_GetOffsetChannel>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10a      	bne.n	8007baa <HAL_ADC_ConfigChannel+0x30a>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2102      	movs	r1, #2
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7ff fbde 	bl	800735c <LL_ADC_GetOffsetChannel>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	0e9b      	lsrs	r3, r3, #26
 8007ba4:	f003 021f 	and.w	r2, r3, #31
 8007ba8:	e01e      	b.n	8007be8 <HAL_ADC_ConfigChannel+0x348>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2102      	movs	r1, #2
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7ff fbd3 	bl	800735c <LL_ADC_GetOffsetChannel>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bc0:	fa93 f3a3 	rbit	r3, r3
 8007bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8007bc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007bcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8007bd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8007bd8:	2320      	movs	r3, #32
 8007bda:	e004      	b.n	8007be6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8007bdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007be0:	fab3 f383 	clz	r3, r3
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d105      	bne.n	8007c00 <HAL_ADC_ConfigChannel+0x360>
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	0e9b      	lsrs	r3, r3, #26
 8007bfa:	f003 031f 	and.w	r3, r3, #31
 8007bfe:	e016      	b.n	8007c2e <HAL_ADC_ConfigChannel+0x38e>
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c0c:	fa93 f3a3 	rbit	r3, r3
 8007c10:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8007c12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8007c18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d101      	bne.n	8007c24 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8007c20:	2320      	movs	r3, #32
 8007c22:	e004      	b.n	8007c2e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8007c24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c28:	fab3 f383 	clz	r3, r3
 8007c2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d106      	bne.n	8007c40 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2200      	movs	r2, #0
 8007c38:	2102      	movs	r1, #2
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7ff fba4 	bl	8007388 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2103      	movs	r1, #3
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7ff fb88 	bl	800735c <LL_ADC_GetOffsetChannel>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10a      	bne.n	8007c6c <HAL_ADC_ConfigChannel+0x3cc>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2103      	movs	r1, #3
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7ff fb7d 	bl	800735c <LL_ADC_GetOffsetChannel>
 8007c62:	4603      	mov	r3, r0
 8007c64:	0e9b      	lsrs	r3, r3, #26
 8007c66:	f003 021f 	and.w	r2, r3, #31
 8007c6a:	e017      	b.n	8007c9c <HAL_ADC_ConfigChannel+0x3fc>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2103      	movs	r1, #3
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7ff fb72 	bl	800735c <LL_ADC_GetOffsetChannel>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c7e:	fa93 f3a3 	rbit	r3, r3
 8007c82:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8007c84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c86:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8007c88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d101      	bne.n	8007c92 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8007c8e:	2320      	movs	r3, #32
 8007c90:	e003      	b.n	8007c9a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8007c92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c94:	fab3 f383 	clz	r3, r3
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d105      	bne.n	8007cb4 <HAL_ADC_ConfigChannel+0x414>
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	0e9b      	lsrs	r3, r3, #26
 8007cae:	f003 031f 	and.w	r3, r3, #31
 8007cb2:	e011      	b.n	8007cd8 <HAL_ADC_ConfigChannel+0x438>
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007cbc:	fa93 f3a3 	rbit	r3, r3
 8007cc0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8007cc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cc4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8007cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d101      	bne.n	8007cd0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8007ccc:	2320      	movs	r3, #32
 8007cce:	e003      	b.n	8007cd8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8007cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cd2:	fab3 f383 	clz	r3, r3
 8007cd6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d106      	bne.n	8007cea <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	2103      	movs	r1, #3
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7ff fb4f 	bl	8007388 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7ff fc42 	bl	8007578 <LL_ADC_IsEnabled>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f040 8140 	bne.w	8007f7c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6818      	ldr	r0, [r3, #0]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	6819      	ldr	r1, [r3, #0]
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	461a      	mov	r2, r3
 8007d0a:	f7ff fbc3 	bl	8007494 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	4a8f      	ldr	r2, [pc, #572]	; (8007f50 <HAL_ADC_ConfigChannel+0x6b0>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	f040 8131 	bne.w	8007f7c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10b      	bne.n	8007d42 <HAL_ADC_ConfigChannel+0x4a2>
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	0e9b      	lsrs	r3, r3, #26
 8007d30:	3301      	adds	r3, #1
 8007d32:	f003 031f 	and.w	r3, r3, #31
 8007d36:	2b09      	cmp	r3, #9
 8007d38:	bf94      	ite	ls
 8007d3a:	2301      	movls	r3, #1
 8007d3c:	2300      	movhi	r3, #0
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	e019      	b.n	8007d76 <HAL_ADC_ConfigChannel+0x4d6>
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d4a:	fa93 f3a3 	rbit	r3, r3
 8007d4e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8007d50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d52:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8007d54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d101      	bne.n	8007d5e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8007d5a:	2320      	movs	r3, #32
 8007d5c:	e003      	b.n	8007d66 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8007d5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d60:	fab3 f383 	clz	r3, r3
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	3301      	adds	r3, #1
 8007d68:	f003 031f 	and.w	r3, r3, #31
 8007d6c:	2b09      	cmp	r3, #9
 8007d6e:	bf94      	ite	ls
 8007d70:	2301      	movls	r3, #1
 8007d72:	2300      	movhi	r3, #0
 8007d74:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d079      	beq.n	8007e6e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d107      	bne.n	8007d96 <HAL_ADC_ConfigChannel+0x4f6>
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	0e9b      	lsrs	r3, r3, #26
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	069b      	lsls	r3, r3, #26
 8007d90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007d94:	e015      	b.n	8007dc2 <HAL_ADC_ConfigChannel+0x522>
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d9e:	fa93 f3a3 	rbit	r3, r3
 8007da2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007da6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8007da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d101      	bne.n	8007db2 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8007dae:	2320      	movs	r3, #32
 8007db0:	e003      	b.n	8007dba <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8007db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007db4:	fab3 f383 	clz	r3, r3
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	3301      	adds	r3, #1
 8007dbc:	069b      	lsls	r3, r3, #26
 8007dbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d109      	bne.n	8007de2 <HAL_ADC_ConfigChannel+0x542>
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	0e9b      	lsrs	r3, r3, #26
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	f003 031f 	and.w	r3, r3, #31
 8007dda:	2101      	movs	r1, #1
 8007ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8007de0:	e017      	b.n	8007e12 <HAL_ADC_ConfigChannel+0x572>
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dea:	fa93 f3a3 	rbit	r3, r3
 8007dee:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8007df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007df2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8007df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8007dfa:	2320      	movs	r3, #32
 8007dfc:	e003      	b.n	8007e06 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8007dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e00:	fab3 f383 	clz	r3, r3
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	3301      	adds	r3, #1
 8007e08:	f003 031f 	and.w	r3, r3, #31
 8007e0c:	2101      	movs	r1, #1
 8007e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e12:	ea42 0103 	orr.w	r1, r2, r3
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10a      	bne.n	8007e38 <HAL_ADC_ConfigChannel+0x598>
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	0e9b      	lsrs	r3, r3, #26
 8007e28:	3301      	adds	r3, #1
 8007e2a:	f003 021f 	and.w	r2, r3, #31
 8007e2e:	4613      	mov	r3, r2
 8007e30:	005b      	lsls	r3, r3, #1
 8007e32:	4413      	add	r3, r2
 8007e34:	051b      	lsls	r3, r3, #20
 8007e36:	e018      	b.n	8007e6a <HAL_ADC_ConfigChannel+0x5ca>
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e40:	fa93 f3a3 	rbit	r3, r3
 8007e44:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e48:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8007e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d101      	bne.n	8007e54 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8007e50:	2320      	movs	r3, #32
 8007e52:	e003      	b.n	8007e5c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8007e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e56:	fab3 f383 	clz	r3, r3
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	f003 021f 	and.w	r2, r3, #31
 8007e62:	4613      	mov	r3, r2
 8007e64:	005b      	lsls	r3, r3, #1
 8007e66:	4413      	add	r3, r2
 8007e68:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007e6a:	430b      	orrs	r3, r1
 8007e6c:	e081      	b.n	8007f72 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d107      	bne.n	8007e8a <HAL_ADC_ConfigChannel+0x5ea>
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	0e9b      	lsrs	r3, r3, #26
 8007e80:	3301      	adds	r3, #1
 8007e82:	069b      	lsls	r3, r3, #26
 8007e84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007e88:	e015      	b.n	8007eb6 <HAL_ADC_ConfigChannel+0x616>
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e92:	fa93 f3a3 	rbit	r3, r3
 8007e96:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8007e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d101      	bne.n	8007ea6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8007ea2:	2320      	movs	r3, #32
 8007ea4:	e003      	b.n	8007eae <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea8:	fab3 f383 	clz	r3, r3
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	3301      	adds	r3, #1
 8007eb0:	069b      	lsls	r3, r3, #26
 8007eb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d109      	bne.n	8007ed6 <HAL_ADC_ConfigChannel+0x636>
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	0e9b      	lsrs	r3, r3, #26
 8007ec8:	3301      	adds	r3, #1
 8007eca:	f003 031f 	and.w	r3, r3, #31
 8007ece:	2101      	movs	r1, #1
 8007ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ed4:	e017      	b.n	8007f06 <HAL_ADC_ConfigChannel+0x666>
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007edc:	6a3b      	ldr	r3, [r7, #32]
 8007ede:	fa93 f3a3 	rbit	r3, r3
 8007ee2:	61fb      	str	r3, [r7, #28]
  return result;
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8007eee:	2320      	movs	r3, #32
 8007ef0:	e003      	b.n	8007efa <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	fab3 f383 	clz	r3, r3
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	3301      	adds	r3, #1
 8007efc:	f003 031f 	and.w	r3, r3, #31
 8007f00:	2101      	movs	r1, #1
 8007f02:	fa01 f303 	lsl.w	r3, r1, r3
 8007f06:	ea42 0103 	orr.w	r1, r2, r3
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10d      	bne.n	8007f32 <HAL_ADC_ConfigChannel+0x692>
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	0e9b      	lsrs	r3, r3, #26
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	f003 021f 	and.w	r2, r3, #31
 8007f22:	4613      	mov	r3, r2
 8007f24:	005b      	lsls	r3, r3, #1
 8007f26:	4413      	add	r3, r2
 8007f28:	3b1e      	subs	r3, #30
 8007f2a:	051b      	lsls	r3, r3, #20
 8007f2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007f30:	e01e      	b.n	8007f70 <HAL_ADC_ConfigChannel+0x6d0>
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	fa93 f3a3 	rbit	r3, r3
 8007f3e:	613b      	str	r3, [r7, #16]
  return result;
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d104      	bne.n	8007f54 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8007f4a:	2320      	movs	r3, #32
 8007f4c:	e006      	b.n	8007f5c <HAL_ADC_ConfigChannel+0x6bc>
 8007f4e:	bf00      	nop
 8007f50:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	fab3 f383 	clz	r3, r3
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	f003 021f 	and.w	r2, r3, #31
 8007f62:	4613      	mov	r3, r2
 8007f64:	005b      	lsls	r3, r3, #1
 8007f66:	4413      	add	r3, r2
 8007f68:	3b1e      	subs	r3, #30
 8007f6a:	051b      	lsls	r3, r3, #20
 8007f6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007f70:	430b      	orrs	r3, r1
 8007f72:	683a      	ldr	r2, [r7, #0]
 8007f74:	6892      	ldr	r2, [r2, #8]
 8007f76:	4619      	mov	r1, r3
 8007f78:	f7ff fa60 	bl	800743c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	4b44      	ldr	r3, [pc, #272]	; (8008094 <HAL_ADC_ConfigChannel+0x7f4>)
 8007f82:	4013      	ands	r3, r2
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d07a      	beq.n	800807e <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007f88:	4843      	ldr	r0, [pc, #268]	; (8008098 <HAL_ADC_ConfigChannel+0x7f8>)
 8007f8a:	f7ff f9b5 	bl	80072f8 <LL_ADC_GetCommonPathInternalCh>
 8007f8e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a41      	ldr	r2, [pc, #260]	; (800809c <HAL_ADC_ConfigChannel+0x7fc>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d12c      	bne.n	8007ff6 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007f9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007fa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d126      	bne.n	8007ff6 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a3c      	ldr	r2, [pc, #240]	; (80080a0 <HAL_ADC_ConfigChannel+0x800>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d004      	beq.n	8007fbc <HAL_ADC_ConfigChannel+0x71c>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a3b      	ldr	r2, [pc, #236]	; (80080a4 <HAL_ADC_ConfigChannel+0x804>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d15d      	bne.n	8008078 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007fbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007fc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	4834      	ldr	r0, [pc, #208]	; (8008098 <HAL_ADC_ConfigChannel+0x7f8>)
 8007fc8:	f7ff f983 	bl	80072d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007fcc:	4b36      	ldr	r3, [pc, #216]	; (80080a8 <HAL_ADC_ConfigChannel+0x808>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	099b      	lsrs	r3, r3, #6
 8007fd2:	4a36      	ldr	r2, [pc, #216]	; (80080ac <HAL_ADC_ConfigChannel+0x80c>)
 8007fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd8:	099b      	lsrs	r3, r3, #6
 8007fda:	1c5a      	adds	r2, r3, #1
 8007fdc:	4613      	mov	r3, r2
 8007fde:	005b      	lsls	r3, r3, #1
 8007fe0:	4413      	add	r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007fe6:	e002      	b.n	8007fee <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	3b01      	subs	r3, #1
 8007fec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1f9      	bne.n	8007fe8 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007ff4:	e040      	b.n	8008078 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a2d      	ldr	r2, [pc, #180]	; (80080b0 <HAL_ADC_ConfigChannel+0x810>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d118      	bne.n	8008032 <HAL_ADC_ConfigChannel+0x792>
 8008000:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008004:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008008:	2b00      	cmp	r3, #0
 800800a:	d112      	bne.n	8008032 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a23      	ldr	r2, [pc, #140]	; (80080a0 <HAL_ADC_ConfigChannel+0x800>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d004      	beq.n	8008020 <HAL_ADC_ConfigChannel+0x780>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a22      	ldr	r2, [pc, #136]	; (80080a4 <HAL_ADC_ConfigChannel+0x804>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d12d      	bne.n	800807c <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008020:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008024:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008028:	4619      	mov	r1, r3
 800802a:	481b      	ldr	r0, [pc, #108]	; (8008098 <HAL_ADC_ConfigChannel+0x7f8>)
 800802c:	f7ff f951 	bl	80072d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008030:	e024      	b.n	800807c <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a1f      	ldr	r2, [pc, #124]	; (80080b4 <HAL_ADC_ConfigChannel+0x814>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d120      	bne.n	800807e <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800803c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008044:	2b00      	cmp	r3, #0
 8008046:	d11a      	bne.n	800807e <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a14      	ldr	r2, [pc, #80]	; (80080a0 <HAL_ADC_ConfigChannel+0x800>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d115      	bne.n	800807e <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008052:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008056:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800805a:	4619      	mov	r1, r3
 800805c:	480e      	ldr	r0, [pc, #56]	; (8008098 <HAL_ADC_ConfigChannel+0x7f8>)
 800805e:	f7ff f938 	bl	80072d2 <LL_ADC_SetCommonPathInternalCh>
 8008062:	e00c      	b.n	800807e <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008068:	f043 0220 	orr.w	r2, r3, #32
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8008076:	e002      	b.n	800807e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008078:	bf00      	nop
 800807a:	e000      	b.n	800807e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800807c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8008086:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800808a:	4618      	mov	r0, r3
 800808c:	37d8      	adds	r7, #216	; 0xd8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	80080000 	.word	0x80080000
 8008098:	50040300 	.word	0x50040300
 800809c:	c7520000 	.word	0xc7520000
 80080a0:	50040000 	.word	0x50040000
 80080a4:	50040200 	.word	0x50040200
 80080a8:	20000194 	.word	0x20000194
 80080ac:	053e2d63 	.word	0x053e2d63
 80080b0:	cb840000 	.word	0xcb840000
 80080b4:	80000001 	.word	0x80000001

080080b8 <LL_ADC_IsEnabled>:
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f003 0301 	and.w	r3, r3, #1
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d101      	bne.n	80080d0 <LL_ADC_IsEnabled+0x18>
 80080cc:	2301      	movs	r3, #1
 80080ce:	e000      	b.n	80080d2 <LL_ADC_IsEnabled+0x1a>
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <LL_ADC_REG_IsConversionOngoing>:
{
 80080de:	b480      	push	{r7}
 80080e0:	b083      	sub	sp, #12
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	f003 0304 	and.w	r3, r3, #4
 80080ee:	2b04      	cmp	r3, #4
 80080f0:	d101      	bne.n	80080f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80080f2:	2301      	movs	r3, #1
 80080f4:	e000      	b.n	80080f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008104:	b590      	push	{r4, r7, lr}
 8008106:	b0a1      	sub	sp, #132	; 0x84
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800811a:	2b01      	cmp	r3, #1
 800811c:	d101      	bne.n	8008122 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800811e:	2302      	movs	r3, #2
 8008120:	e093      	b.n	800824a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800812a:	2300      	movs	r3, #0
 800812c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800812e:	2300      	movs	r3, #0
 8008130:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a47      	ldr	r2, [pc, #284]	; (8008254 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d102      	bne.n	8008142 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800813c:	4b46      	ldr	r3, [pc, #280]	; (8008258 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	e001      	b.n	8008146 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008142:	2300      	movs	r3, #0
 8008144:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10b      	bne.n	8008164 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008150:	f043 0220 	orr.w	r2, r3, #32
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e072      	b.n	800824a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	4618      	mov	r0, r3
 8008168:	f7ff ffb9 	bl	80080de <LL_ADC_REG_IsConversionOngoing>
 800816c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4618      	mov	r0, r3
 8008174:	f7ff ffb3 	bl	80080de <LL_ADC_REG_IsConversionOngoing>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d154      	bne.n	8008228 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800817e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008180:	2b00      	cmp	r3, #0
 8008182:	d151      	bne.n	8008228 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008184:	4b35      	ldr	r3, [pc, #212]	; (800825c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8008186:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d02c      	beq.n	80081ea <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008190:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	6859      	ldr	r1, [r3, #4]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80081a2:	035b      	lsls	r3, r3, #13
 80081a4:	430b      	orrs	r3, r1
 80081a6:	431a      	orrs	r2, r3
 80081a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80081ac:	4829      	ldr	r0, [pc, #164]	; (8008254 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80081ae:	f7ff ff83 	bl	80080b8 <LL_ADC_IsEnabled>
 80081b2:	4604      	mov	r4, r0
 80081b4:	4828      	ldr	r0, [pc, #160]	; (8008258 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80081b6:	f7ff ff7f 	bl	80080b8 <LL_ADC_IsEnabled>
 80081ba:	4603      	mov	r3, r0
 80081bc:	431c      	orrs	r4, r3
 80081be:	4828      	ldr	r0, [pc, #160]	; (8008260 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80081c0:	f7ff ff7a 	bl	80080b8 <LL_ADC_IsEnabled>
 80081c4:	4603      	mov	r3, r0
 80081c6:	4323      	orrs	r3, r4
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d137      	bne.n	800823c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80081cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80081d4:	f023 030f 	bic.w	r3, r3, #15
 80081d8:	683a      	ldr	r2, [r7, #0]
 80081da:	6811      	ldr	r1, [r2, #0]
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	6892      	ldr	r2, [r2, #8]
 80081e0:	430a      	orrs	r2, r1
 80081e2:	431a      	orrs	r2, r3
 80081e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081e6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80081e8:	e028      	b.n	800823c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80081ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80081f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081f4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80081f6:	4817      	ldr	r0, [pc, #92]	; (8008254 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80081f8:	f7ff ff5e 	bl	80080b8 <LL_ADC_IsEnabled>
 80081fc:	4604      	mov	r4, r0
 80081fe:	4816      	ldr	r0, [pc, #88]	; (8008258 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8008200:	f7ff ff5a 	bl	80080b8 <LL_ADC_IsEnabled>
 8008204:	4603      	mov	r3, r0
 8008206:	431c      	orrs	r4, r3
 8008208:	4815      	ldr	r0, [pc, #84]	; (8008260 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800820a:	f7ff ff55 	bl	80080b8 <LL_ADC_IsEnabled>
 800820e:	4603      	mov	r3, r0
 8008210:	4323      	orrs	r3, r4
 8008212:	2b00      	cmp	r3, #0
 8008214:	d112      	bne.n	800823c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800821e:	f023 030f 	bic.w	r3, r3, #15
 8008222:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008224:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008226:	e009      	b.n	800823c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800822c:	f043 0220 	orr.w	r2, r3, #32
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800823a:	e000      	b.n	800823e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800823c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8008246:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800824a:	4618      	mov	r0, r3
 800824c:	3784      	adds	r7, #132	; 0x84
 800824e:	46bd      	mov	sp, r7
 8008250:	bd90      	pop	{r4, r7, pc}
 8008252:	bf00      	nop
 8008254:	50040000 	.word	0x50040000
 8008258:	50040100 	.word	0x50040100
 800825c:	50040300 	.word	0x50040300
 8008260:	50040200 	.word	0x50040200

08008264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f003 0307 	and.w	r3, r3, #7
 8008272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008274:	4b0c      	ldr	r3, [pc, #48]	; (80082a8 <__NVIC_SetPriorityGrouping+0x44>)
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008280:	4013      	ands	r3, r2
 8008282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800828c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008296:	4a04      	ldr	r2, [pc, #16]	; (80082a8 <__NVIC_SetPriorityGrouping+0x44>)
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	60d3      	str	r3, [r2, #12]
}
 800829c:	bf00      	nop
 800829e:	3714      	adds	r7, #20
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr
 80082a8:	e000ed00 	.word	0xe000ed00

080082ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80082ac:	b480      	push	{r7}
 80082ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80082b0:	4b04      	ldr	r3, [pc, #16]	; (80082c4 <__NVIC_GetPriorityGrouping+0x18>)
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	0a1b      	lsrs	r3, r3, #8
 80082b6:	f003 0307 	and.w	r3, r3, #7
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr
 80082c4:	e000ed00 	.word	0xe000ed00

080082c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	4603      	mov	r3, r0
 80082d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	db0b      	blt.n	80082f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082da:	79fb      	ldrb	r3, [r7, #7]
 80082dc:	f003 021f 	and.w	r2, r3, #31
 80082e0:	4907      	ldr	r1, [pc, #28]	; (8008300 <__NVIC_EnableIRQ+0x38>)
 80082e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082e6:	095b      	lsrs	r3, r3, #5
 80082e8:	2001      	movs	r0, #1
 80082ea:	fa00 f202 	lsl.w	r2, r0, r2
 80082ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80082f2:	bf00      	nop
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	e000e100 	.word	0xe000e100

08008304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	4603      	mov	r3, r0
 800830c:	6039      	str	r1, [r7, #0]
 800830e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008314:	2b00      	cmp	r3, #0
 8008316:	db0a      	blt.n	800832e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	b2da      	uxtb	r2, r3
 800831c:	490c      	ldr	r1, [pc, #48]	; (8008350 <__NVIC_SetPriority+0x4c>)
 800831e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008322:	0112      	lsls	r2, r2, #4
 8008324:	b2d2      	uxtb	r2, r2
 8008326:	440b      	add	r3, r1
 8008328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800832c:	e00a      	b.n	8008344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	b2da      	uxtb	r2, r3
 8008332:	4908      	ldr	r1, [pc, #32]	; (8008354 <__NVIC_SetPriority+0x50>)
 8008334:	79fb      	ldrb	r3, [r7, #7]
 8008336:	f003 030f 	and.w	r3, r3, #15
 800833a:	3b04      	subs	r3, #4
 800833c:	0112      	lsls	r2, r2, #4
 800833e:	b2d2      	uxtb	r2, r2
 8008340:	440b      	add	r3, r1
 8008342:	761a      	strb	r2, [r3, #24]
}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr
 8008350:	e000e100 	.word	0xe000e100
 8008354:	e000ed00 	.word	0xe000ed00

08008358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008358:	b480      	push	{r7}
 800835a:	b089      	sub	sp, #36	; 0x24
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f003 0307 	and.w	r3, r3, #7
 800836a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	f1c3 0307 	rsb	r3, r3, #7
 8008372:	2b04      	cmp	r3, #4
 8008374:	bf28      	it	cs
 8008376:	2304      	movcs	r3, #4
 8008378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	3304      	adds	r3, #4
 800837e:	2b06      	cmp	r3, #6
 8008380:	d902      	bls.n	8008388 <NVIC_EncodePriority+0x30>
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	3b03      	subs	r3, #3
 8008386:	e000      	b.n	800838a <NVIC_EncodePriority+0x32>
 8008388:	2300      	movs	r3, #0
 800838a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800838c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	fa02 f303 	lsl.w	r3, r2, r3
 8008396:	43da      	mvns	r2, r3
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	401a      	ands	r2, r3
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80083a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	fa01 f303 	lsl.w	r3, r1, r3
 80083aa:	43d9      	mvns	r1, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083b0:	4313      	orrs	r3, r2
         );
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3724      	adds	r7, #36	; 0x24
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
	...

080083c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	3b01      	subs	r3, #1
 80083cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80083d0:	d301      	bcc.n	80083d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80083d2:	2301      	movs	r3, #1
 80083d4:	e00f      	b.n	80083f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80083d6:	4a0a      	ldr	r2, [pc, #40]	; (8008400 <SysTick_Config+0x40>)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	3b01      	subs	r3, #1
 80083dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80083de:	210f      	movs	r1, #15
 80083e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083e4:	f7ff ff8e 	bl	8008304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80083e8:	4b05      	ldr	r3, [pc, #20]	; (8008400 <SysTick_Config+0x40>)
 80083ea:	2200      	movs	r2, #0
 80083ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80083ee:	4b04      	ldr	r3, [pc, #16]	; (8008400 <SysTick_Config+0x40>)
 80083f0:	2207      	movs	r2, #7
 80083f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3708      	adds	r7, #8
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	e000e010 	.word	0xe000e010

08008404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f7ff ff29 	bl	8008264 <__NVIC_SetPriorityGrouping>
}
 8008412:	bf00      	nop
 8008414:	3708      	adds	r7, #8
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800841a:	b580      	push	{r7, lr}
 800841c:	b086      	sub	sp, #24
 800841e:	af00      	add	r7, sp, #0
 8008420:	4603      	mov	r3, r0
 8008422:	60b9      	str	r1, [r7, #8]
 8008424:	607a      	str	r2, [r7, #4]
 8008426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008428:	2300      	movs	r3, #0
 800842a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800842c:	f7ff ff3e 	bl	80082ac <__NVIC_GetPriorityGrouping>
 8008430:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	68b9      	ldr	r1, [r7, #8]
 8008436:	6978      	ldr	r0, [r7, #20]
 8008438:	f7ff ff8e 	bl	8008358 <NVIC_EncodePriority>
 800843c:	4602      	mov	r2, r0
 800843e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008442:	4611      	mov	r1, r2
 8008444:	4618      	mov	r0, r3
 8008446:	f7ff ff5d 	bl	8008304 <__NVIC_SetPriority>
}
 800844a:	bf00      	nop
 800844c:	3718      	adds	r7, #24
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b082      	sub	sp, #8
 8008456:	af00      	add	r7, sp, #0
 8008458:	4603      	mov	r3, r0
 800845a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800845c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008460:	4618      	mov	r0, r3
 8008462:	f7ff ff31 	bl	80082c8 <__NVIC_EnableIRQ>
}
 8008466:	bf00      	nop
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b082      	sub	sp, #8
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7ff ffa2 	bl	80083c0 <SysTick_Config>
 800847c:	4603      	mov	r3, r0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3708      	adds	r7, #8
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
	...

08008488 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d101      	bne.n	800849a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e075      	b.n	8008586 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d106      	bne.n	80084b4 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7f8 fab2 	bl	8000a18 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2202      	movs	r2, #2
 80084b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80084ca:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d002      	beq.n	80084da <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	6819      	ldr	r1, [r3, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	4b2a      	ldr	r3, [pc, #168]	; (8008590 <HAL_DCMI_Init+0x108>)
 80084e6:	400b      	ands	r3, r1
 80084e8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6819      	ldr	r1, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	695b      	ldr	r3, [r3, #20]
 80084f8:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80084fe:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800850a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	699b      	ldr	r3, [r3, #24]
 8008510:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8008516:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851c:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8008522:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008528:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800852e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	430a      	orrs	r2, r1
 8008536:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	2b10      	cmp	r3, #16
 800853e:	d112      	bne.n	8008566 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	7f1b      	ldrb	r3, [r3, #28]
 8008544:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	7f5b      	ldrb	r3, [r3, #29]
 800854a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800854c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	7f9b      	ldrb	r3, [r3, #30]
 8008552:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8008554:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	7fdb      	ldrb	r3, [r3, #31]
 800855c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8008562:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8008564:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68da      	ldr	r2, [r3, #12]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f042 021f 	orr.w	r2, r2, #31
 8008574:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3708      	adds	r7, #8
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	ffe0f007 	.word	0xffe0f007

08008594 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d101      	bne.n	80085a6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e0ac      	b.n	8008700 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 f8b2 	bl	8008714 <DFSDM_GetChannelFromInstance>
 80085b0:	4603      	mov	r3, r0
 80085b2:	4a55      	ldr	r2, [pc, #340]	; (8008708 <HAL_DFSDM_ChannelInit+0x174>)
 80085b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d001      	beq.n	80085c0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e09f      	b.n	8008700 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f7f8 fb15 	bl	8000bf0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80085c6:	4b51      	ldr	r3, [pc, #324]	; (800870c <HAL_DFSDM_ChannelInit+0x178>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	3301      	adds	r3, #1
 80085cc:	4a4f      	ldr	r2, [pc, #316]	; (800870c <HAL_DFSDM_ChannelInit+0x178>)
 80085ce:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80085d0:	4b4e      	ldr	r3, [pc, #312]	; (800870c <HAL_DFSDM_ChannelInit+0x178>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d125      	bne.n	8008624 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80085d8:	4b4d      	ldr	r3, [pc, #308]	; (8008710 <HAL_DFSDM_ChannelInit+0x17c>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a4c      	ldr	r2, [pc, #304]	; (8008710 <HAL_DFSDM_ChannelInit+0x17c>)
 80085de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80085e2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80085e4:	4b4a      	ldr	r3, [pc, #296]	; (8008710 <HAL_DFSDM_ChannelInit+0x17c>)
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	4948      	ldr	r1, [pc, #288]	; (8008710 <HAL_DFSDM_ChannelInit+0x17c>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80085f2:	4b47      	ldr	r3, [pc, #284]	; (8008710 <HAL_DFSDM_ChannelInit+0x17c>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a46      	ldr	r2, [pc, #280]	; (8008710 <HAL_DFSDM_ChannelInit+0x17c>)
 80085f8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80085fc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	791b      	ldrb	r3, [r3, #4]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d108      	bne.n	8008618 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8008606:	4b42      	ldr	r3, [pc, #264]	; (8008710 <HAL_DFSDM_ChannelInit+0x17c>)
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	3b01      	subs	r3, #1
 8008610:	041b      	lsls	r3, r3, #16
 8008612:	493f      	ldr	r1, [pc, #252]	; (8008710 <HAL_DFSDM_ChannelInit+0x17c>)
 8008614:	4313      	orrs	r3, r2
 8008616:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8008618:	4b3d      	ldr	r3, [pc, #244]	; (8008710 <HAL_DFSDM_ChannelInit+0x17c>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a3c      	ldr	r2, [pc, #240]	; (8008710 <HAL_DFSDM_ChannelInit+0x17c>)
 800861e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008622:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8008632:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	6819      	ldr	r1, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8008642:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8008648:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	430a      	orrs	r2, r1
 8008650:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f022 020f 	bic.w	r2, r2, #15
 8008660:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	6819      	ldr	r1, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8008670:	431a      	orrs	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	430a      	orrs	r2, r1
 8008678:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	689a      	ldr	r2, [r3, #8]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8008688:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	6899      	ldr	r1, [r3, #8]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008698:	3b01      	subs	r3, #1
 800869a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800869c:	431a      	orrs	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	430a      	orrs	r2, r1
 80086a4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f002 0207 	and.w	r2, r2, #7
 80086b4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	6859      	ldr	r1, [r3, #4]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80086c8:	431a      	orrs	r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	430a      	orrs	r2, r1
 80086d0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80086e0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 f810 	bl	8008714 <DFSDM_GetChannelFromInstance>
 80086f4:	4602      	mov	r2, r0
 80086f6:	4904      	ldr	r1, [pc, #16]	; (8008708 <HAL_DFSDM_ChannelInit+0x174>)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3708      	adds	r7, #8
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	20001080 	.word	0x20001080
 800870c:	2000107c 	.word	0x2000107c
 8008710:	40016000 	.word	0x40016000

08008714 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a1c      	ldr	r2, [pc, #112]	; (8008790 <DFSDM_GetChannelFromInstance+0x7c>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d102      	bne.n	800872a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8008724:	2300      	movs	r3, #0
 8008726:	60fb      	str	r3, [r7, #12]
 8008728:	e02b      	b.n	8008782 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a19      	ldr	r2, [pc, #100]	; (8008794 <DFSDM_GetChannelFromInstance+0x80>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d102      	bne.n	8008738 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8008732:	2301      	movs	r3, #1
 8008734:	60fb      	str	r3, [r7, #12]
 8008736:	e024      	b.n	8008782 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a17      	ldr	r2, [pc, #92]	; (8008798 <DFSDM_GetChannelFromInstance+0x84>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d102      	bne.n	8008746 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8008740:	2302      	movs	r3, #2
 8008742:	60fb      	str	r3, [r7, #12]
 8008744:	e01d      	b.n	8008782 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a14      	ldr	r2, [pc, #80]	; (800879c <DFSDM_GetChannelFromInstance+0x88>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d102      	bne.n	8008754 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800874e:	2304      	movs	r3, #4
 8008750:	60fb      	str	r3, [r7, #12]
 8008752:	e016      	b.n	8008782 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a12      	ldr	r2, [pc, #72]	; (80087a0 <DFSDM_GetChannelFromInstance+0x8c>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d102      	bne.n	8008762 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800875c:	2305      	movs	r3, #5
 800875e:	60fb      	str	r3, [r7, #12]
 8008760:	e00f      	b.n	8008782 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a0f      	ldr	r2, [pc, #60]	; (80087a4 <DFSDM_GetChannelFromInstance+0x90>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d102      	bne.n	8008770 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800876a:	2306      	movs	r3, #6
 800876c:	60fb      	str	r3, [r7, #12]
 800876e:	e008      	b.n	8008782 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a0d      	ldr	r2, [pc, #52]	; (80087a8 <DFSDM_GetChannelFromInstance+0x94>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d102      	bne.n	800877e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8008778:	2307      	movs	r3, #7
 800877a:	60fb      	str	r3, [r7, #12]
 800877c:	e001      	b.n	8008782 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800877e:	2303      	movs	r3, #3
 8008780:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8008782:	68fb      	ldr	r3, [r7, #12]
}
 8008784:	4618      	mov	r0, r3
 8008786:	3714      	adds	r7, #20
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	40016000 	.word	0x40016000
 8008794:	40016020 	.word	0x40016020
 8008798:	40016040 	.word	0x40016040
 800879c:	40016080 	.word	0x40016080
 80087a0:	400160a0 	.word	0x400160a0
 80087a4:	400160c0 	.word	0x400160c0
 80087a8:	400160e0 	.word	0x400160e0

080087ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b087      	sub	sp, #28
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80087b6:	2300      	movs	r3, #0
 80087b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80087ba:	e166      	b.n	8008a8a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	2101      	movs	r1, #1
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	fa01 f303 	lsl.w	r3, r1, r3
 80087c8:	4013      	ands	r3, r2
 80087ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f000 8158 	beq.w	8008a84 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	f003 0303 	and.w	r3, r3, #3
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d005      	beq.n	80087ec <HAL_GPIO_Init+0x40>
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	f003 0303 	and.w	r3, r3, #3
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d130      	bne.n	800884e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	005b      	lsls	r3, r3, #1
 80087f6:	2203      	movs	r2, #3
 80087f8:	fa02 f303 	lsl.w	r3, r2, r3
 80087fc:	43db      	mvns	r3, r3
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	4013      	ands	r3, r2
 8008802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	68da      	ldr	r2, [r3, #12]
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	005b      	lsls	r3, r3, #1
 800880c:	fa02 f303 	lsl.w	r3, r2, r3
 8008810:	693a      	ldr	r2, [r7, #16]
 8008812:	4313      	orrs	r3, r2
 8008814:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	693a      	ldr	r2, [r7, #16]
 800881a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008822:	2201      	movs	r2, #1
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	fa02 f303 	lsl.w	r3, r2, r3
 800882a:	43db      	mvns	r3, r3
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	4013      	ands	r3, r2
 8008830:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	091b      	lsrs	r3, r3, #4
 8008838:	f003 0201 	and.w	r2, r3, #1
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	fa02 f303 	lsl.w	r3, r2, r3
 8008842:	693a      	ldr	r2, [r7, #16]
 8008844:	4313      	orrs	r3, r2
 8008846:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	693a      	ldr	r2, [r7, #16]
 800884c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	f003 0303 	and.w	r3, r3, #3
 8008856:	2b03      	cmp	r3, #3
 8008858:	d017      	beq.n	800888a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	005b      	lsls	r3, r3, #1
 8008864:	2203      	movs	r2, #3
 8008866:	fa02 f303 	lsl.w	r3, r2, r3
 800886a:	43db      	mvns	r3, r3
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	4013      	ands	r3, r2
 8008870:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	689a      	ldr	r2, [r3, #8]
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	005b      	lsls	r3, r3, #1
 800887a:	fa02 f303 	lsl.w	r3, r2, r3
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	4313      	orrs	r3, r2
 8008882:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	f003 0303 	and.w	r3, r3, #3
 8008892:	2b02      	cmp	r3, #2
 8008894:	d123      	bne.n	80088de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	08da      	lsrs	r2, r3, #3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	3208      	adds	r2, #8
 800889e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	f003 0307 	and.w	r3, r3, #7
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	220f      	movs	r2, #15
 80088ae:	fa02 f303 	lsl.w	r3, r2, r3
 80088b2:	43db      	mvns	r3, r3
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	4013      	ands	r3, r2
 80088b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	691a      	ldr	r2, [r3, #16]
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	f003 0307 	and.w	r3, r3, #7
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	fa02 f303 	lsl.w	r3, r2, r3
 80088ca:	693a      	ldr	r2, [r7, #16]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	08da      	lsrs	r2, r3, #3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	3208      	adds	r2, #8
 80088d8:	6939      	ldr	r1, [r7, #16]
 80088da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	005b      	lsls	r3, r3, #1
 80088e8:	2203      	movs	r2, #3
 80088ea:	fa02 f303 	lsl.w	r3, r2, r3
 80088ee:	43db      	mvns	r3, r3
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	4013      	ands	r3, r2
 80088f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f003 0203 	and.w	r2, r3, #3
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	005b      	lsls	r3, r3, #1
 8008902:	fa02 f303 	lsl.w	r3, r2, r3
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	4313      	orrs	r3, r2
 800890a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	693a      	ldr	r2, [r7, #16]
 8008910:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800891a:	2b00      	cmp	r3, #0
 800891c:	f000 80b2 	beq.w	8008a84 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008920:	4b61      	ldr	r3, [pc, #388]	; (8008aa8 <HAL_GPIO_Init+0x2fc>)
 8008922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008924:	4a60      	ldr	r2, [pc, #384]	; (8008aa8 <HAL_GPIO_Init+0x2fc>)
 8008926:	f043 0301 	orr.w	r3, r3, #1
 800892a:	6613      	str	r3, [r2, #96]	; 0x60
 800892c:	4b5e      	ldr	r3, [pc, #376]	; (8008aa8 <HAL_GPIO_Init+0x2fc>)
 800892e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008930:	f003 0301 	and.w	r3, r3, #1
 8008934:	60bb      	str	r3, [r7, #8]
 8008936:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008938:	4a5c      	ldr	r2, [pc, #368]	; (8008aac <HAL_GPIO_Init+0x300>)
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	089b      	lsrs	r3, r3, #2
 800893e:	3302      	adds	r3, #2
 8008940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008944:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f003 0303 	and.w	r3, r3, #3
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	220f      	movs	r2, #15
 8008950:	fa02 f303 	lsl.w	r3, r2, r3
 8008954:	43db      	mvns	r3, r3
 8008956:	693a      	ldr	r2, [r7, #16]
 8008958:	4013      	ands	r3, r2
 800895a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008962:	d02b      	beq.n	80089bc <HAL_GPIO_Init+0x210>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a52      	ldr	r2, [pc, #328]	; (8008ab0 <HAL_GPIO_Init+0x304>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d025      	beq.n	80089b8 <HAL_GPIO_Init+0x20c>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a51      	ldr	r2, [pc, #324]	; (8008ab4 <HAL_GPIO_Init+0x308>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d01f      	beq.n	80089b4 <HAL_GPIO_Init+0x208>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4a50      	ldr	r2, [pc, #320]	; (8008ab8 <HAL_GPIO_Init+0x30c>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d019      	beq.n	80089b0 <HAL_GPIO_Init+0x204>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a4f      	ldr	r2, [pc, #316]	; (8008abc <HAL_GPIO_Init+0x310>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d013      	beq.n	80089ac <HAL_GPIO_Init+0x200>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a4e      	ldr	r2, [pc, #312]	; (8008ac0 <HAL_GPIO_Init+0x314>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d00d      	beq.n	80089a8 <HAL_GPIO_Init+0x1fc>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a4d      	ldr	r2, [pc, #308]	; (8008ac4 <HAL_GPIO_Init+0x318>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d007      	beq.n	80089a4 <HAL_GPIO_Init+0x1f8>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a4c      	ldr	r2, [pc, #304]	; (8008ac8 <HAL_GPIO_Init+0x31c>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d101      	bne.n	80089a0 <HAL_GPIO_Init+0x1f4>
 800899c:	2307      	movs	r3, #7
 800899e:	e00e      	b.n	80089be <HAL_GPIO_Init+0x212>
 80089a0:	2308      	movs	r3, #8
 80089a2:	e00c      	b.n	80089be <HAL_GPIO_Init+0x212>
 80089a4:	2306      	movs	r3, #6
 80089a6:	e00a      	b.n	80089be <HAL_GPIO_Init+0x212>
 80089a8:	2305      	movs	r3, #5
 80089aa:	e008      	b.n	80089be <HAL_GPIO_Init+0x212>
 80089ac:	2304      	movs	r3, #4
 80089ae:	e006      	b.n	80089be <HAL_GPIO_Init+0x212>
 80089b0:	2303      	movs	r3, #3
 80089b2:	e004      	b.n	80089be <HAL_GPIO_Init+0x212>
 80089b4:	2302      	movs	r3, #2
 80089b6:	e002      	b.n	80089be <HAL_GPIO_Init+0x212>
 80089b8:	2301      	movs	r3, #1
 80089ba:	e000      	b.n	80089be <HAL_GPIO_Init+0x212>
 80089bc:	2300      	movs	r3, #0
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	f002 0203 	and.w	r2, r2, #3
 80089c4:	0092      	lsls	r2, r2, #2
 80089c6:	4093      	lsls	r3, r2
 80089c8:	693a      	ldr	r2, [r7, #16]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80089ce:	4937      	ldr	r1, [pc, #220]	; (8008aac <HAL_GPIO_Init+0x300>)
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	089b      	lsrs	r3, r3, #2
 80089d4:	3302      	adds	r3, #2
 80089d6:	693a      	ldr	r2, [r7, #16]
 80089d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80089dc:	4b3b      	ldr	r3, [pc, #236]	; (8008acc <HAL_GPIO_Init+0x320>)
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	43db      	mvns	r3, r3
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	4013      	ands	r3, r2
 80089ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d003      	beq.n	8008a00 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008a00:	4a32      	ldr	r2, [pc, #200]	; (8008acc <HAL_GPIO_Init+0x320>)
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008a06:	4b31      	ldr	r3, [pc, #196]	; (8008acc <HAL_GPIO_Init+0x320>)
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	43db      	mvns	r3, r3
 8008a10:	693a      	ldr	r2, [r7, #16]
 8008a12:	4013      	ands	r3, r2
 8008a14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d003      	beq.n	8008a2a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8008a22:	693a      	ldr	r2, [r7, #16]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008a2a:	4a28      	ldr	r2, [pc, #160]	; (8008acc <HAL_GPIO_Init+0x320>)
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008a30:	4b26      	ldr	r3, [pc, #152]	; (8008acc <HAL_GPIO_Init+0x320>)
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	43db      	mvns	r3, r3
 8008a3a:	693a      	ldr	r2, [r7, #16]
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d003      	beq.n	8008a54 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8008a4c:	693a      	ldr	r2, [r7, #16]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008a54:	4a1d      	ldr	r2, [pc, #116]	; (8008acc <HAL_GPIO_Init+0x320>)
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8008a5a:	4b1c      	ldr	r3, [pc, #112]	; (8008acc <HAL_GPIO_Init+0x320>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	43db      	mvns	r3, r3
 8008a64:	693a      	ldr	r2, [r7, #16]
 8008a66:	4013      	ands	r3, r2
 8008a68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d003      	beq.n	8008a7e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8008a76:	693a      	ldr	r2, [r7, #16]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008a7e:	4a13      	ldr	r2, [pc, #76]	; (8008acc <HAL_GPIO_Init+0x320>)
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	3301      	adds	r3, #1
 8008a88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	fa22 f303 	lsr.w	r3, r2, r3
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f47f ae91 	bne.w	80087bc <HAL_GPIO_Init+0x10>
  }
}
 8008a9a:	bf00      	nop
 8008a9c:	bf00      	nop
 8008a9e:	371c      	adds	r7, #28
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	40021000 	.word	0x40021000
 8008aac:	40010000 	.word	0x40010000
 8008ab0:	48000400 	.word	0x48000400
 8008ab4:	48000800 	.word	0x48000800
 8008ab8:	48000c00 	.word	0x48000c00
 8008abc:	48001000 	.word	0x48001000
 8008ac0:	48001400 	.word	0x48001400
 8008ac4:	48001800 	.word	0x48001800
 8008ac8:	48001c00 	.word	0x48001c00
 8008acc:	40010400 	.word	0x40010400

08008ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	807b      	strh	r3, [r7, #2]
 8008adc:	4613      	mov	r3, r2
 8008ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008ae0:	787b      	ldrb	r3, [r7, #1]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d003      	beq.n	8008aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008ae6:	887a      	ldrh	r2, [r7, #2]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008aec:	e002      	b.n	8008af4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008aee:	887a      	ldrh	r2, [r7, #2]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008af4:	bf00      	nop
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	695b      	ldr	r3, [r3, #20]
 8008b10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008b12:	887a      	ldrh	r2, [r7, #2]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	4013      	ands	r3, r2
 8008b18:	041a      	lsls	r2, r3, #16
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	43d9      	mvns	r1, r3
 8008b1e:	887b      	ldrh	r3, [r7, #2]
 8008b20:	400b      	ands	r3, r1
 8008b22:	431a      	orrs	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	619a      	str	r2, [r3, #24]
}
 8008b28:	bf00      	nop
 8008b2a:	3714      	adds	r7, #20
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d101      	bne.n	8008b46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	e081      	b.n	8008c4a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d106      	bne.n	8008b60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f7f8 fc04 	bl	8001368 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2224      	movs	r2, #36	; 0x24
 8008b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f022 0201 	bic.w	r2, r2, #1
 8008b76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008b84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	689a      	ldr	r2, [r3, #8]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d107      	bne.n	8008bae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	689a      	ldr	r2, [r3, #8]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008baa:	609a      	str	r2, [r3, #8]
 8008bac:	e006      	b.n	8008bbc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	689a      	ldr	r2, [r3, #8]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008bba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d104      	bne.n	8008bce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bcc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	6812      	ldr	r2, [r2, #0]
 8008bd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008be0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	68da      	ldr	r2, [r3, #12]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008bf0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	691a      	ldr	r2, [r3, #16]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	695b      	ldr	r3, [r3, #20]
 8008bfa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	699b      	ldr	r3, [r3, #24]
 8008c02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	430a      	orrs	r2, r1
 8008c0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	69d9      	ldr	r1, [r3, #28]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a1a      	ldr	r2, [r3, #32]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	430a      	orrs	r2, r1
 8008c1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f042 0201 	orr.w	r2, r2, #1
 8008c2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2220      	movs	r2, #32
 8008c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
	...

08008c54 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b088      	sub	sp, #32
 8008c58:	af02      	add	r7, sp, #8
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	607a      	str	r2, [r7, #4]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	460b      	mov	r3, r1
 8008c62:	817b      	strh	r3, [r7, #10]
 8008c64:	4613      	mov	r3, r2
 8008c66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	2b20      	cmp	r3, #32
 8008c72:	f040 80da 	bne.w	8008e2a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d101      	bne.n	8008c84 <HAL_I2C_Master_Transmit+0x30>
 8008c80:	2302      	movs	r3, #2
 8008c82:	e0d3      	b.n	8008e2c <HAL_I2C_Master_Transmit+0x1d8>
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008c8c:	f7fe fade 	bl	800724c <HAL_GetTick>
 8008c90:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	2319      	movs	r3, #25
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f000 fb54 	bl	800934c <I2C_WaitOnFlagUntilTimeout>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d001      	beq.n	8008cae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e0be      	b.n	8008e2c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2221      	movs	r2, #33	; 0x21
 8008cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2210      	movs	r2, #16
 8008cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	893a      	ldrh	r2, [r7, #8]
 8008cce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	2bff      	cmp	r3, #255	; 0xff
 8008cde:	d90e      	bls.n	8008cfe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	22ff      	movs	r2, #255	; 0xff
 8008ce4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cea:	b2da      	uxtb	r2, r3
 8008cec:	8979      	ldrh	r1, [r7, #10]
 8008cee:	4b51      	ldr	r3, [pc, #324]	; (8008e34 <HAL_I2C_Master_Transmit+0x1e0>)
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f000 fd4a 	bl	8009790 <I2C_TransferConfig>
 8008cfc:	e06c      	b.n	8008dd8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d02:	b29a      	uxth	r2, r3
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d0c:	b2da      	uxtb	r2, r3
 8008d0e:	8979      	ldrh	r1, [r7, #10]
 8008d10:	4b48      	ldr	r3, [pc, #288]	; (8008e34 <HAL_I2C_Master_Transmit+0x1e0>)
 8008d12:	9300      	str	r3, [sp, #0]
 8008d14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f000 fd39 	bl	8009790 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008d1e:	e05b      	b.n	8008dd8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d20:	697a      	ldr	r2, [r7, #20]
 8008d22:	6a39      	ldr	r1, [r7, #32]
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f000 fb51 	bl	80093cc <I2C_WaitOnTXISFlagUntilTimeout>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d001      	beq.n	8008d34 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	e07b      	b.n	8008e2c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d38:	781a      	ldrb	r2, [r3, #0]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d44:	1c5a      	adds	r2, r3, #1
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	3b01      	subs	r3, #1
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d034      	beq.n	8008dd8 <HAL_I2C_Master_Transmit+0x184>
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d130      	bne.n	8008dd8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	6a3b      	ldr	r3, [r7, #32]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	2180      	movs	r1, #128	; 0x80
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	f000 fae3 	bl	800934c <I2C_WaitOnFlagUntilTimeout>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d001      	beq.n	8008d90 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e04d      	b.n	8008e2c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	2bff      	cmp	r3, #255	; 0xff
 8008d98:	d90e      	bls.n	8008db8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	22ff      	movs	r2, #255	; 0xff
 8008d9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008da4:	b2da      	uxtb	r2, r3
 8008da6:	8979      	ldrh	r1, [r7, #10]
 8008da8:	2300      	movs	r3, #0
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f000 fced 	bl	8009790 <I2C_TransferConfig>
 8008db6:	e00f      	b.n	8008dd8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	8979      	ldrh	r1, [r7, #10]
 8008dca:	2300      	movs	r3, #0
 8008dcc:	9300      	str	r3, [sp, #0]
 8008dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f000 fcdc 	bl	8009790 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d19e      	bne.n	8008d20 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008de2:	697a      	ldr	r2, [r7, #20]
 8008de4:	6a39      	ldr	r1, [r7, #32]
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f000 fb30 	bl	800944c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d001      	beq.n	8008df6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	e01a      	b.n	8008e2c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2220      	movs	r2, #32
 8008dfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	6859      	ldr	r1, [r3, #4]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	4b0b      	ldr	r3, [pc, #44]	; (8008e38 <HAL_I2C_Master_Transmit+0x1e4>)
 8008e0a:	400b      	ands	r3, r1
 8008e0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2220      	movs	r2, #32
 8008e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008e26:	2300      	movs	r3, #0
 8008e28:	e000      	b.n	8008e2c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8008e2a:	2302      	movs	r3, #2
  }
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3718      	adds	r7, #24
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	80002000 	.word	0x80002000
 8008e38:	fe00e800 	.word	0xfe00e800

08008e3c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b088      	sub	sp, #32
 8008e40:	af02      	add	r7, sp, #8
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	607a      	str	r2, [r7, #4]
 8008e46:	461a      	mov	r2, r3
 8008e48:	460b      	mov	r3, r1
 8008e4a:	817b      	strh	r3, [r7, #10]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	2b20      	cmp	r3, #32
 8008e5a:	f040 80db 	bne.w	8009014 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d101      	bne.n	8008e6c <HAL_I2C_Master_Receive+0x30>
 8008e68:	2302      	movs	r3, #2
 8008e6a:	e0d4      	b.n	8009016 <HAL_I2C_Master_Receive+0x1da>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008e74:	f7fe f9ea 	bl	800724c <HAL_GetTick>
 8008e78:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	2319      	movs	r3, #25
 8008e80:	2201      	movs	r2, #1
 8008e82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f000 fa60 	bl	800934c <I2C_WaitOnFlagUntilTimeout>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d001      	beq.n	8008e96 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e0bf      	b.n	8009016 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2222      	movs	r2, #34	; 0x22
 8008e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2210      	movs	r2, #16
 8008ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	893a      	ldrh	r2, [r7, #8]
 8008eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	2bff      	cmp	r3, #255	; 0xff
 8008ec6:	d90e      	bls.n	8008ee6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	22ff      	movs	r2, #255	; 0xff
 8008ecc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	8979      	ldrh	r1, [r7, #10]
 8008ed6:	4b52      	ldr	r3, [pc, #328]	; (8009020 <HAL_I2C_Master_Receive+0x1e4>)
 8008ed8:	9300      	str	r3, [sp, #0]
 8008eda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f000 fc56 	bl	8009790 <I2C_TransferConfig>
 8008ee4:	e06d      	b.n	8008fc2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ef4:	b2da      	uxtb	r2, r3
 8008ef6:	8979      	ldrh	r1, [r7, #10]
 8008ef8:	4b49      	ldr	r3, [pc, #292]	; (8009020 <HAL_I2C_Master_Receive+0x1e4>)
 8008efa:	9300      	str	r3, [sp, #0]
 8008efc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	f000 fc45 	bl	8009790 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008f06:	e05c      	b.n	8008fc2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f08:	697a      	ldr	r2, [r7, #20]
 8008f0a:	6a39      	ldr	r1, [r7, #32]
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f000 fad9 	bl	80094c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d001      	beq.n	8008f1c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e07c      	b.n	8009016 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f26:	b2d2      	uxtb	r2, r2
 8008f28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2e:	1c5a      	adds	r2, r3, #1
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	b29a      	uxth	r2, r3
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	3b01      	subs	r3, #1
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d034      	beq.n	8008fc2 <HAL_I2C_Master_Receive+0x186>
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d130      	bne.n	8008fc2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	6a3b      	ldr	r3, [r7, #32]
 8008f66:	2200      	movs	r2, #0
 8008f68:	2180      	movs	r1, #128	; 0x80
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f000 f9ee 	bl	800934c <I2C_WaitOnFlagUntilTimeout>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d001      	beq.n	8008f7a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e04d      	b.n	8009016 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	2bff      	cmp	r3, #255	; 0xff
 8008f82:	d90e      	bls.n	8008fa2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	22ff      	movs	r2, #255	; 0xff
 8008f88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f8e:	b2da      	uxtb	r2, r3
 8008f90:	8979      	ldrh	r1, [r7, #10]
 8008f92:	2300      	movs	r3, #0
 8008f94:	9300      	str	r3, [sp, #0]
 8008f96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f000 fbf8 	bl	8009790 <I2C_TransferConfig>
 8008fa0:	e00f      	b.n	8008fc2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fb0:	b2da      	uxtb	r2, r3
 8008fb2:	8979      	ldrh	r1, [r7, #10]
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f000 fbe7 	bl	8009790 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d19d      	bne.n	8008f08 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fcc:	697a      	ldr	r2, [r7, #20]
 8008fce:	6a39      	ldr	r1, [r7, #32]
 8008fd0:	68f8      	ldr	r0, [r7, #12]
 8008fd2:	f000 fa3b 	bl	800944c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d001      	beq.n	8008fe0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	e01a      	b.n	8009016 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2220      	movs	r2, #32
 8008fe6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	6859      	ldr	r1, [r3, #4]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	4b0c      	ldr	r3, [pc, #48]	; (8009024 <HAL_I2C_Master_Receive+0x1e8>)
 8008ff4:	400b      	ands	r3, r1
 8008ff6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2220      	movs	r2, #32
 8008ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2200      	movs	r2, #0
 8009004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009010:	2300      	movs	r3, #0
 8009012:	e000      	b.n	8009016 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009014:	2302      	movs	r3, #2
  }
}
 8009016:	4618      	mov	r0, r3
 8009018:	3718      	adds	r7, #24
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	80002400 	.word	0x80002400
 8009024:	fe00e800 	.word	0xfe00e800

08009028 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b088      	sub	sp, #32
 800902c:	af02      	add	r7, sp, #8
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	4608      	mov	r0, r1
 8009032:	4611      	mov	r1, r2
 8009034:	461a      	mov	r2, r3
 8009036:	4603      	mov	r3, r0
 8009038:	817b      	strh	r3, [r7, #10]
 800903a:	460b      	mov	r3, r1
 800903c:	813b      	strh	r3, [r7, #8]
 800903e:	4613      	mov	r3, r2
 8009040:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009048:	b2db      	uxtb	r3, r3
 800904a:	2b20      	cmp	r3, #32
 800904c:	f040 80fd 	bne.w	800924a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009050:	6a3b      	ldr	r3, [r7, #32]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d002      	beq.n	800905c <HAL_I2C_Mem_Read+0x34>
 8009056:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009058:	2b00      	cmp	r3, #0
 800905a:	d105      	bne.n	8009068 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009062:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e0f1      	b.n	800924c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800906e:	2b01      	cmp	r3, #1
 8009070:	d101      	bne.n	8009076 <HAL_I2C_Mem_Read+0x4e>
 8009072:	2302      	movs	r3, #2
 8009074:	e0ea      	b.n	800924c <HAL_I2C_Mem_Read+0x224>
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2201      	movs	r2, #1
 800907a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800907e:	f7fe f8e5 	bl	800724c <HAL_GetTick>
 8009082:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	9300      	str	r3, [sp, #0]
 8009088:	2319      	movs	r3, #25
 800908a:	2201      	movs	r2, #1
 800908c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f000 f95b 	bl	800934c <I2C_WaitOnFlagUntilTimeout>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d001      	beq.n	80090a0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e0d5      	b.n	800924c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2222      	movs	r2, #34	; 0x22
 80090a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2240      	movs	r2, #64	; 0x40
 80090ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6a3a      	ldr	r2, [r7, #32]
 80090ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80090c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2200      	movs	r2, #0
 80090c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80090c8:	88f8      	ldrh	r0, [r7, #6]
 80090ca:	893a      	ldrh	r2, [r7, #8]
 80090cc:	8979      	ldrh	r1, [r7, #10]
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	9301      	str	r3, [sp, #4]
 80090d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d4:	9300      	str	r3, [sp, #0]
 80090d6:	4603      	mov	r3, r0
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f000 f8bf 	bl	800925c <I2C_RequestMemoryRead>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d005      	beq.n	80090f0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e0ad      	b.n	800924c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	2bff      	cmp	r3, #255	; 0xff
 80090f8:	d90e      	bls.n	8009118 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	22ff      	movs	r2, #255	; 0xff
 80090fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009104:	b2da      	uxtb	r2, r3
 8009106:	8979      	ldrh	r1, [r7, #10]
 8009108:	4b52      	ldr	r3, [pc, #328]	; (8009254 <HAL_I2C_Mem_Read+0x22c>)
 800910a:	9300      	str	r3, [sp, #0]
 800910c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f000 fb3d 	bl	8009790 <I2C_TransferConfig>
 8009116:	e00f      	b.n	8009138 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800911c:	b29a      	uxth	r2, r3
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009126:	b2da      	uxtb	r2, r3
 8009128:	8979      	ldrh	r1, [r7, #10]
 800912a:	4b4a      	ldr	r3, [pc, #296]	; (8009254 <HAL_I2C_Mem_Read+0x22c>)
 800912c:	9300      	str	r3, [sp, #0]
 800912e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f000 fb2c 	bl	8009790 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913e:	2200      	movs	r2, #0
 8009140:	2104      	movs	r1, #4
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f000 f902 	bl	800934c <I2C_WaitOnFlagUntilTimeout>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d001      	beq.n	8009152 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	e07c      	b.n	800924c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915c:	b2d2      	uxtb	r2, r2
 800915e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009164:	1c5a      	adds	r2, r3, #1
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800916e:	3b01      	subs	r3, #1
 8009170:	b29a      	uxth	r2, r3
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800917a:	b29b      	uxth	r3, r3
 800917c:	3b01      	subs	r3, #1
 800917e:	b29a      	uxth	r2, r3
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009188:	b29b      	uxth	r3, r3
 800918a:	2b00      	cmp	r3, #0
 800918c:	d034      	beq.n	80091f8 <HAL_I2C_Mem_Read+0x1d0>
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009192:	2b00      	cmp	r3, #0
 8009194:	d130      	bne.n	80091f8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	9300      	str	r3, [sp, #0]
 800919a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919c:	2200      	movs	r2, #0
 800919e:	2180      	movs	r1, #128	; 0x80
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f000 f8d3 	bl	800934c <I2C_WaitOnFlagUntilTimeout>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d001      	beq.n	80091b0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e04d      	b.n	800924c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	2bff      	cmp	r3, #255	; 0xff
 80091b8:	d90e      	bls.n	80091d8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	22ff      	movs	r2, #255	; 0xff
 80091be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091c4:	b2da      	uxtb	r2, r3
 80091c6:	8979      	ldrh	r1, [r7, #10]
 80091c8:	2300      	movs	r3, #0
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f000 fadd 	bl	8009790 <I2C_TransferConfig>
 80091d6:	e00f      	b.n	80091f8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091dc:	b29a      	uxth	r2, r3
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091e6:	b2da      	uxtb	r2, r3
 80091e8:	8979      	ldrh	r1, [r7, #10]
 80091ea:	2300      	movs	r3, #0
 80091ec:	9300      	str	r3, [sp, #0]
 80091ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f000 facc 	bl	8009790 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d19a      	bne.n	8009138 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009202:	697a      	ldr	r2, [r7, #20]
 8009204:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f000 f920 	bl	800944c <I2C_WaitOnSTOPFlagUntilTimeout>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d001      	beq.n	8009216 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e01a      	b.n	800924c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2220      	movs	r2, #32
 800921c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	6859      	ldr	r1, [r3, #4]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	4b0b      	ldr	r3, [pc, #44]	; (8009258 <HAL_I2C_Mem_Read+0x230>)
 800922a:	400b      	ands	r3, r1
 800922c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2220      	movs	r2, #32
 8009232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2200      	movs	r2, #0
 8009242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009246:	2300      	movs	r3, #0
 8009248:	e000      	b.n	800924c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800924a:	2302      	movs	r3, #2
  }
}
 800924c:	4618      	mov	r0, r3
 800924e:	3718      	adds	r7, #24
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	80002400 	.word	0x80002400
 8009258:	fe00e800 	.word	0xfe00e800

0800925c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b086      	sub	sp, #24
 8009260:	af02      	add	r7, sp, #8
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	4608      	mov	r0, r1
 8009266:	4611      	mov	r1, r2
 8009268:	461a      	mov	r2, r3
 800926a:	4603      	mov	r3, r0
 800926c:	817b      	strh	r3, [r7, #10]
 800926e:	460b      	mov	r3, r1
 8009270:	813b      	strh	r3, [r7, #8]
 8009272:	4613      	mov	r3, r2
 8009274:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009276:	88fb      	ldrh	r3, [r7, #6]
 8009278:	b2da      	uxtb	r2, r3
 800927a:	8979      	ldrh	r1, [r7, #10]
 800927c:	4b20      	ldr	r3, [pc, #128]	; (8009300 <I2C_RequestMemoryRead+0xa4>)
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	2300      	movs	r3, #0
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f000 fa84 	bl	8009790 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009288:	69fa      	ldr	r2, [r7, #28]
 800928a:	69b9      	ldr	r1, [r7, #24]
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f000 f89d 	bl	80093cc <I2C_WaitOnTXISFlagUntilTimeout>
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d001      	beq.n	800929c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	e02c      	b.n	80092f6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800929c:	88fb      	ldrh	r3, [r7, #6]
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d105      	bne.n	80092ae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80092a2:	893b      	ldrh	r3, [r7, #8]
 80092a4:	b2da      	uxtb	r2, r3
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	629a      	str	r2, [r3, #40]	; 0x28
 80092ac:	e015      	b.n	80092da <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80092ae:	893b      	ldrh	r3, [r7, #8]
 80092b0:	0a1b      	lsrs	r3, r3, #8
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80092bc:	69fa      	ldr	r2, [r7, #28]
 80092be:	69b9      	ldr	r1, [r7, #24]
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f000 f883 	bl	80093cc <I2C_WaitOnTXISFlagUntilTimeout>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d001      	beq.n	80092d0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	e012      	b.n	80092f6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80092d0:	893b      	ldrh	r3, [r7, #8]
 80092d2:	b2da      	uxtb	r2, r3
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	2200      	movs	r2, #0
 80092e2:	2140      	movs	r1, #64	; 0x40
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f000 f831 	bl	800934c <I2C_WaitOnFlagUntilTimeout>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d001      	beq.n	80092f4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e000      	b.n	80092f6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	80002000 	.word	0x80002000

08009304 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	699b      	ldr	r3, [r3, #24]
 8009312:	f003 0302 	and.w	r3, r3, #2
 8009316:	2b02      	cmp	r3, #2
 8009318:	d103      	bne.n	8009322 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2200      	movs	r2, #0
 8009320:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	699b      	ldr	r3, [r3, #24]
 8009328:	f003 0301 	and.w	r3, r3, #1
 800932c:	2b01      	cmp	r3, #1
 800932e:	d007      	beq.n	8009340 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	699a      	ldr	r2, [r3, #24]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f042 0201 	orr.w	r2, r2, #1
 800933e:	619a      	str	r2, [r3, #24]
  }
}
 8009340:	bf00      	nop
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	603b      	str	r3, [r7, #0]
 8009358:	4613      	mov	r3, r2
 800935a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800935c:	e022      	b.n	80093a4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009364:	d01e      	beq.n	80093a4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009366:	f7fd ff71 	bl	800724c <HAL_GetTick>
 800936a:	4602      	mov	r2, r0
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	1ad3      	subs	r3, r2, r3
 8009370:	683a      	ldr	r2, [r7, #0]
 8009372:	429a      	cmp	r2, r3
 8009374:	d302      	bcc.n	800937c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d113      	bne.n	80093a4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009380:	f043 0220 	orr.w	r2, r3, #32
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2220      	movs	r2, #32
 800938c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	e00f      	b.n	80093c4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	699a      	ldr	r2, [r3, #24]
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	4013      	ands	r3, r2
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	bf0c      	ite	eq
 80093b4:	2301      	moveq	r3, #1
 80093b6:	2300      	movne	r3, #0
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	461a      	mov	r2, r3
 80093bc:	79fb      	ldrb	r3, [r7, #7]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d0cd      	beq.n	800935e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80093d8:	e02c      	b.n	8009434 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	68b9      	ldr	r1, [r7, #8]
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f000 f8ea 	bl	80095b8 <I2C_IsErrorOccurred>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d001      	beq.n	80093ee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e02a      	b.n	8009444 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093f4:	d01e      	beq.n	8009434 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093f6:	f7fd ff29 	bl	800724c <HAL_GetTick>
 80093fa:	4602      	mov	r2, r0
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	429a      	cmp	r2, r3
 8009404:	d302      	bcc.n	800940c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d113      	bne.n	8009434 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009410:	f043 0220 	orr.w	r2, r3, #32
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2220      	movs	r2, #32
 800941c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2200      	movs	r2, #0
 8009424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2200      	movs	r2, #0
 800942c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	e007      	b.n	8009444 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	699b      	ldr	r3, [r3, #24]
 800943a:	f003 0302 	and.w	r3, r3, #2
 800943e:	2b02      	cmp	r3, #2
 8009440:	d1cb      	bne.n	80093da <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	3710      	adds	r7, #16
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009458:	e028      	b.n	80094ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	68b9      	ldr	r1, [r7, #8]
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f000 f8aa 	bl	80095b8 <I2C_IsErrorOccurred>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d001      	beq.n	800946e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e026      	b.n	80094bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800946e:	f7fd feed 	bl	800724c <HAL_GetTick>
 8009472:	4602      	mov	r2, r0
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	68ba      	ldr	r2, [r7, #8]
 800947a:	429a      	cmp	r2, r3
 800947c:	d302      	bcc.n	8009484 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d113      	bne.n	80094ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009488:	f043 0220 	orr.w	r2, r3, #32
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2220      	movs	r2, #32
 8009494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	e007      	b.n	80094bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	699b      	ldr	r3, [r3, #24]
 80094b2:	f003 0320 	and.w	r3, r3, #32
 80094b6:	2b20      	cmp	r3, #32
 80094b8:	d1cf      	bne.n	800945a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3710      	adds	r7, #16
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80094d0:	e064      	b.n	800959c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	68b9      	ldr	r1, [r7, #8]
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f000 f86e 	bl	80095b8 <I2C_IsErrorOccurred>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d001      	beq.n	80094e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	e062      	b.n	80095ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	f003 0320 	and.w	r3, r3, #32
 80094f0:	2b20      	cmp	r3, #32
 80094f2:	d138      	bne.n	8009566 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	f003 0304 	and.w	r3, r3, #4
 80094fe:	2b04      	cmp	r3, #4
 8009500:	d105      	bne.n	800950e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	e04e      	b.n	80095ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	699b      	ldr	r3, [r3, #24]
 8009514:	f003 0310 	and.w	r3, r3, #16
 8009518:	2b10      	cmp	r3, #16
 800951a:	d107      	bne.n	800952c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2210      	movs	r2, #16
 8009522:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2204      	movs	r2, #4
 8009528:	645a      	str	r2, [r3, #68]	; 0x44
 800952a:	e002      	b.n	8009532 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2220      	movs	r2, #32
 8009538:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	6859      	ldr	r1, [r3, #4]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	4b1b      	ldr	r3, [pc, #108]	; (80095b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8009546:	400b      	ands	r3, r1
 8009548:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2220      	movs	r2, #32
 800954e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2200      	movs	r2, #0
 8009556:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	e022      	b.n	80095ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009566:	f7fd fe71 	bl	800724c <HAL_GetTick>
 800956a:	4602      	mov	r2, r0
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	1ad3      	subs	r3, r2, r3
 8009570:	68ba      	ldr	r2, [r7, #8]
 8009572:	429a      	cmp	r2, r3
 8009574:	d302      	bcc.n	800957c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10f      	bne.n	800959c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009580:	f043 0220 	orr.w	r2, r3, #32
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2220      	movs	r2, #32
 800958c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	e007      	b.n	80095ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	f003 0304 	and.w	r3, r3, #4
 80095a6:	2b04      	cmp	r3, #4
 80095a8:	d193      	bne.n	80094d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	fe00e800 	.word	0xfe00e800

080095b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b08a      	sub	sp, #40	; 0x28
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095c4:	2300      	movs	r3, #0
 80095c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	699b      	ldr	r3, [r3, #24]
 80095d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80095d2:	2300      	movs	r3, #0
 80095d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	f003 0310 	and.w	r3, r3, #16
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d075      	beq.n	80096d0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	2210      	movs	r2, #16
 80095ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80095ec:	e056      	b.n	800969c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095f4:	d052      	beq.n	800969c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80095f6:	f7fd fe29 	bl	800724c <HAL_GetTick>
 80095fa:	4602      	mov	r2, r0
 80095fc:	69fb      	ldr	r3, [r7, #28]
 80095fe:	1ad3      	subs	r3, r2, r3
 8009600:	68ba      	ldr	r2, [r7, #8]
 8009602:	429a      	cmp	r2, r3
 8009604:	d302      	bcc.n	800960c <I2C_IsErrorOccurred+0x54>
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d147      	bne.n	800969c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009616:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800961e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	699b      	ldr	r3, [r3, #24]
 8009626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800962a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800962e:	d12e      	bne.n	800968e <I2C_IsErrorOccurred+0xd6>
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009636:	d02a      	beq.n	800968e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8009638:	7cfb      	ldrb	r3, [r7, #19]
 800963a:	2b20      	cmp	r3, #32
 800963c:	d027      	beq.n	800968e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	685a      	ldr	r2, [r3, #4]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800964c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800964e:	f7fd fdfd 	bl	800724c <HAL_GetTick>
 8009652:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009654:	e01b      	b.n	800968e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009656:	f7fd fdf9 	bl	800724c <HAL_GetTick>
 800965a:	4602      	mov	r2, r0
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	2b19      	cmp	r3, #25
 8009662:	d914      	bls.n	800968e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009668:	f043 0220 	orr.w	r2, r3, #32
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2220      	movs	r2, #32
 8009674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2200      	movs	r2, #0
 800967c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2200      	movs	r2, #0
 8009684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	f003 0320 	and.w	r3, r3, #32
 8009698:	2b20      	cmp	r3, #32
 800969a:	d1dc      	bne.n	8009656 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	f003 0320 	and.w	r3, r3, #32
 80096a6:	2b20      	cmp	r3, #32
 80096a8:	d003      	beq.n	80096b2 <I2C_IsErrorOccurred+0xfa>
 80096aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d09d      	beq.n	80095ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80096b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d103      	bne.n	80096c2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2220      	movs	r2, #32
 80096c0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80096c2:	6a3b      	ldr	r3, [r7, #32]
 80096c4:	f043 0304 	orr.w	r3, r3, #4
 80096c8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	699b      	ldr	r3, [r3, #24]
 80096d6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00b      	beq.n	80096fa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80096e2:	6a3b      	ldr	r3, [r7, #32]
 80096e4:	f043 0301 	orr.w	r3, r3, #1
 80096e8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00b      	beq.n	800971c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009704:	6a3b      	ldr	r3, [r7, #32]
 8009706:	f043 0308 	orr.w	r3, r3, #8
 800970a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009714:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009722:	2b00      	cmp	r3, #0
 8009724:	d00b      	beq.n	800973e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009726:	6a3b      	ldr	r3, [r7, #32]
 8009728:	f043 0302 	orr.w	r3, r3, #2
 800972c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009736:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800973e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009742:	2b00      	cmp	r3, #0
 8009744:	d01c      	beq.n	8009780 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f7ff fddc 	bl	8009304 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	6859      	ldr	r1, [r3, #4]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	4b0d      	ldr	r3, [pc, #52]	; (800978c <I2C_IsErrorOccurred+0x1d4>)
 8009758:	400b      	ands	r3, r1
 800975a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009760:	6a3b      	ldr	r3, [r7, #32]
 8009762:	431a      	orrs	r2, r3
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2220      	movs	r2, #32
 800976c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2200      	movs	r2, #0
 800977c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009784:	4618      	mov	r0, r3
 8009786:	3728      	adds	r7, #40	; 0x28
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	fe00e800 	.word	0xfe00e800

08009790 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009790:	b480      	push	{r7}
 8009792:	b087      	sub	sp, #28
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	607b      	str	r3, [r7, #4]
 800979a:	460b      	mov	r3, r1
 800979c:	817b      	strh	r3, [r7, #10]
 800979e:	4613      	mov	r3, r2
 80097a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80097a2:	897b      	ldrh	r3, [r7, #10]
 80097a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80097a8:	7a7b      	ldrb	r3, [r7, #9]
 80097aa:	041b      	lsls	r3, r3, #16
 80097ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80097b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80097b6:	6a3b      	ldr	r3, [r7, #32]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	685a      	ldr	r2, [r3, #4]
 80097c6:	6a3b      	ldr	r3, [r7, #32]
 80097c8:	0d5b      	lsrs	r3, r3, #21
 80097ca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80097ce:	4b08      	ldr	r3, [pc, #32]	; (80097f0 <I2C_TransferConfig+0x60>)
 80097d0:	430b      	orrs	r3, r1
 80097d2:	43db      	mvns	r3, r3
 80097d4:	ea02 0103 	and.w	r1, r2, r3
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	430a      	orrs	r2, r1
 80097e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80097e2:	bf00      	nop
 80097e4:	371c      	adds	r7, #28
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	03ff63ff 	.word	0x03ff63ff

080097f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b20      	cmp	r3, #32
 8009808:	d138      	bne.n	800987c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009810:	2b01      	cmp	r3, #1
 8009812:	d101      	bne.n	8009818 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009814:	2302      	movs	r3, #2
 8009816:	e032      	b.n	800987e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2224      	movs	r2, #36	; 0x24
 8009824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f022 0201 	bic.w	r2, r2, #1
 8009836:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009846:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6819      	ldr	r1, [r3, #0]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	430a      	orrs	r2, r1
 8009856:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f042 0201 	orr.w	r2, r2, #1
 8009866:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2220      	movs	r2, #32
 800986c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009878:	2300      	movs	r3, #0
 800987a:	e000      	b.n	800987e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800987c:	2302      	movs	r3, #2
  }
}
 800987e:	4618      	mov	r0, r3
 8009880:	370c      	adds	r7, #12
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr

0800988a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800988a:	b480      	push	{r7}
 800988c:	b085      	sub	sp, #20
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
 8009892:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800989a:	b2db      	uxtb	r3, r3
 800989c:	2b20      	cmp	r3, #32
 800989e:	d139      	bne.n	8009914 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d101      	bne.n	80098ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80098aa:	2302      	movs	r3, #2
 80098ac:	e033      	b.n	8009916 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2224      	movs	r2, #36	; 0x24
 80098ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f022 0201 	bic.w	r2, r2, #1
 80098cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80098dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	021b      	lsls	r3, r3, #8
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f042 0201 	orr.w	r2, r2, #1
 80098fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2220      	movs	r2, #32
 8009904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	e000      	b.n	8009916 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009914:	2302      	movs	r3, #2
  }
}
 8009916:	4618      	mov	r0, r3
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009922:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009924:	b08f      	sub	sp, #60	; 0x3c
 8009926:	af0a      	add	r7, sp, #40	; 0x28
 8009928:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d101      	bne.n	8009934 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	e116      	b.n	8009b62 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009940:	b2db      	uxtb	r3, r3
 8009942:	2b00      	cmp	r3, #0
 8009944:	d106      	bne.n	8009954 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2200      	movs	r2, #0
 800994a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f009 fcc6 	bl	80132e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2203      	movs	r2, #3
 8009958:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009964:	2b00      	cmp	r3, #0
 8009966:	d102      	bne.n	800996e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4618      	mov	r0, r3
 8009974:	f006 fbd5 	bl	8010122 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	603b      	str	r3, [r7, #0]
 800997e:	687e      	ldr	r6, [r7, #4]
 8009980:	466d      	mov	r5, sp
 8009982:	f106 0410 	add.w	r4, r6, #16
 8009986:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009988:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800998a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800998c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800998e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009992:	e885 0003 	stmia.w	r5, {r0, r1}
 8009996:	1d33      	adds	r3, r6, #4
 8009998:	cb0e      	ldmia	r3, {r1, r2, r3}
 800999a:	6838      	ldr	r0, [r7, #0]
 800999c:	f006 fae8 	bl	800ff70 <USB_CoreInit>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d005      	beq.n	80099b2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2202      	movs	r2, #2
 80099aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e0d7      	b.n	8009b62 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2100      	movs	r1, #0
 80099b8:	4618      	mov	r0, r3
 80099ba:	f006 fbc3 	bl	8010144 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80099be:	2300      	movs	r3, #0
 80099c0:	73fb      	strb	r3, [r7, #15]
 80099c2:	e04a      	b.n	8009a5a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80099c4:	7bfa      	ldrb	r2, [r7, #15]
 80099c6:	6879      	ldr	r1, [r7, #4]
 80099c8:	4613      	mov	r3, r2
 80099ca:	00db      	lsls	r3, r3, #3
 80099cc:	4413      	add	r3, r2
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	440b      	add	r3, r1
 80099d2:	333d      	adds	r3, #61	; 0x3d
 80099d4:	2201      	movs	r2, #1
 80099d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80099d8:	7bfa      	ldrb	r2, [r7, #15]
 80099da:	6879      	ldr	r1, [r7, #4]
 80099dc:	4613      	mov	r3, r2
 80099de:	00db      	lsls	r3, r3, #3
 80099e0:	4413      	add	r3, r2
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	440b      	add	r3, r1
 80099e6:	333c      	adds	r3, #60	; 0x3c
 80099e8:	7bfa      	ldrb	r2, [r7, #15]
 80099ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80099ec:	7bfa      	ldrb	r2, [r7, #15]
 80099ee:	7bfb      	ldrb	r3, [r7, #15]
 80099f0:	b298      	uxth	r0, r3
 80099f2:	6879      	ldr	r1, [r7, #4]
 80099f4:	4613      	mov	r3, r2
 80099f6:	00db      	lsls	r3, r3, #3
 80099f8:	4413      	add	r3, r2
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	440b      	add	r3, r1
 80099fe:	3344      	adds	r3, #68	; 0x44
 8009a00:	4602      	mov	r2, r0
 8009a02:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009a04:	7bfa      	ldrb	r2, [r7, #15]
 8009a06:	6879      	ldr	r1, [r7, #4]
 8009a08:	4613      	mov	r3, r2
 8009a0a:	00db      	lsls	r3, r3, #3
 8009a0c:	4413      	add	r3, r2
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	440b      	add	r3, r1
 8009a12:	3340      	adds	r3, #64	; 0x40
 8009a14:	2200      	movs	r2, #0
 8009a16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009a18:	7bfa      	ldrb	r2, [r7, #15]
 8009a1a:	6879      	ldr	r1, [r7, #4]
 8009a1c:	4613      	mov	r3, r2
 8009a1e:	00db      	lsls	r3, r3, #3
 8009a20:	4413      	add	r3, r2
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	440b      	add	r3, r1
 8009a26:	3348      	adds	r3, #72	; 0x48
 8009a28:	2200      	movs	r2, #0
 8009a2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009a2c:	7bfa      	ldrb	r2, [r7, #15]
 8009a2e:	6879      	ldr	r1, [r7, #4]
 8009a30:	4613      	mov	r3, r2
 8009a32:	00db      	lsls	r3, r3, #3
 8009a34:	4413      	add	r3, r2
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	440b      	add	r3, r1
 8009a3a:	334c      	adds	r3, #76	; 0x4c
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009a40:	7bfa      	ldrb	r2, [r7, #15]
 8009a42:	6879      	ldr	r1, [r7, #4]
 8009a44:	4613      	mov	r3, r2
 8009a46:	00db      	lsls	r3, r3, #3
 8009a48:	4413      	add	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	440b      	add	r3, r1
 8009a4e:	3354      	adds	r3, #84	; 0x54
 8009a50:	2200      	movs	r2, #0
 8009a52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a54:	7bfb      	ldrb	r3, [r7, #15]
 8009a56:	3301      	adds	r3, #1
 8009a58:	73fb      	strb	r3, [r7, #15]
 8009a5a:	7bfa      	ldrb	r2, [r7, #15]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d3af      	bcc.n	80099c4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a64:	2300      	movs	r3, #0
 8009a66:	73fb      	strb	r3, [r7, #15]
 8009a68:	e044      	b.n	8009af4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009a6a:	7bfa      	ldrb	r2, [r7, #15]
 8009a6c:	6879      	ldr	r1, [r7, #4]
 8009a6e:	4613      	mov	r3, r2
 8009a70:	00db      	lsls	r3, r3, #3
 8009a72:	4413      	add	r3, r2
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	440b      	add	r3, r1
 8009a78:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009a80:	7bfa      	ldrb	r2, [r7, #15]
 8009a82:	6879      	ldr	r1, [r7, #4]
 8009a84:	4613      	mov	r3, r2
 8009a86:	00db      	lsls	r3, r3, #3
 8009a88:	4413      	add	r3, r2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	440b      	add	r3, r1
 8009a8e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8009a92:	7bfa      	ldrb	r2, [r7, #15]
 8009a94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009a96:	7bfa      	ldrb	r2, [r7, #15]
 8009a98:	6879      	ldr	r1, [r7, #4]
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	00db      	lsls	r3, r3, #3
 8009a9e:	4413      	add	r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	440b      	add	r3, r1
 8009aa4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009aac:	7bfa      	ldrb	r2, [r7, #15]
 8009aae:	6879      	ldr	r1, [r7, #4]
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	00db      	lsls	r3, r3, #3
 8009ab4:	4413      	add	r3, r2
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	440b      	add	r3, r1
 8009aba:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009abe:	2200      	movs	r2, #0
 8009ac0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009ac2:	7bfa      	ldrb	r2, [r7, #15]
 8009ac4:	6879      	ldr	r1, [r7, #4]
 8009ac6:	4613      	mov	r3, r2
 8009ac8:	00db      	lsls	r3, r3, #3
 8009aca:	4413      	add	r3, r2
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	440b      	add	r3, r1
 8009ad0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009ad8:	7bfa      	ldrb	r2, [r7, #15]
 8009ada:	6879      	ldr	r1, [r7, #4]
 8009adc:	4613      	mov	r3, r2
 8009ade:	00db      	lsls	r3, r3, #3
 8009ae0:	4413      	add	r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	440b      	add	r3, r1
 8009ae6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8009aea:	2200      	movs	r2, #0
 8009aec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009aee:	7bfb      	ldrb	r3, [r7, #15]
 8009af0:	3301      	adds	r3, #1
 8009af2:	73fb      	strb	r3, [r7, #15]
 8009af4:	7bfa      	ldrb	r2, [r7, #15]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d3b5      	bcc.n	8009a6a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	603b      	str	r3, [r7, #0]
 8009b04:	687e      	ldr	r6, [r7, #4]
 8009b06:	466d      	mov	r5, sp
 8009b08:	f106 0410 	add.w	r4, r6, #16
 8009b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009b14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009b18:	e885 0003 	stmia.w	r5, {r0, r1}
 8009b1c:	1d33      	adds	r3, r6, #4
 8009b1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b20:	6838      	ldr	r0, [r7, #0]
 8009b22:	f006 fb5b 	bl	80101dc <USB_DevInit>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d005      	beq.n	8009b38 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2202      	movs	r2, #2
 8009b30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	e014      	b.n	8009b62 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d102      	bne.n	8009b56 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f001 f881 	bl	800ac58 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f007 fbe3 	bl	8011326 <USB_DevDisconnect>

  return HAL_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3714      	adds	r7, #20
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b6a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b084      	sub	sp, #16
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d101      	bne.n	8009b86 <HAL_PCD_Start+0x1c>
 8009b82:	2302      	movs	r3, #2
 8009b84:	e01c      	b.n	8009bc0 <HAL_PCD_Start+0x56>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d105      	bne.n	8009ba2 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f006 faaa 	bl	8010100 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f007 fb97 	bl	80112e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009bbe:	2300      	movs	r3, #0
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009bc8:	b590      	push	{r4, r7, lr}
 8009bca:	b08d      	sub	sp, #52	; 0x34
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bd6:	6a3b      	ldr	r3, [r7, #32]
 8009bd8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4618      	mov	r0, r3
 8009be0:	f007 fc55 	bl	801148e <USB_GetMode>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	f040 847e 	bne.w	800a4e8 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f007 fbb9 	bl	8011368 <USB_ReadInterrupts>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f000 8474 	beq.w	800a4e6 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	0a1b      	lsrs	r3, r3, #8
 8009c08:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4618      	mov	r0, r3
 8009c18:	f007 fba6 	bl	8011368 <USB_ReadInterrupts>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	f003 0302 	and.w	r3, r3, #2
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d107      	bne.n	8009c36 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	695a      	ldr	r2, [r3, #20]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f002 0202 	and.w	r2, r2, #2
 8009c34:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f007 fb94 	bl	8011368 <USB_ReadInterrupts>
 8009c40:	4603      	mov	r3, r0
 8009c42:	f003 0310 	and.w	r3, r3, #16
 8009c46:	2b10      	cmp	r3, #16
 8009c48:	d161      	bne.n	8009d0e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	699a      	ldr	r2, [r3, #24]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f022 0210 	bic.w	r2, r2, #16
 8009c58:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009c5a:	6a3b      	ldr	r3, [r7, #32]
 8009c5c:	6a1b      	ldr	r3, [r3, #32]
 8009c5e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	f003 020f 	and.w	r2, r3, #15
 8009c66:	4613      	mov	r3, r2
 8009c68:	00db      	lsls	r3, r3, #3
 8009c6a:	4413      	add	r3, r2
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	4413      	add	r3, r2
 8009c76:	3304      	adds	r3, #4
 8009c78:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	0c5b      	lsrs	r3, r3, #17
 8009c7e:	f003 030f 	and.w	r3, r3, #15
 8009c82:	2b02      	cmp	r3, #2
 8009c84:	d124      	bne.n	8009cd0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009c86:	69ba      	ldr	r2, [r7, #24]
 8009c88:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009c8c:	4013      	ands	r3, r2
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d035      	beq.n	8009cfe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	091b      	lsrs	r3, r3, #4
 8009c9a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009c9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	6a38      	ldr	r0, [r7, #32]
 8009ca6:	f007 f9cb 	bl	8011040 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	691a      	ldr	r2, [r3, #16]
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	091b      	lsrs	r3, r3, #4
 8009cb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009cb6:	441a      	add	r2, r3
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	6a1a      	ldr	r2, [r3, #32]
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	091b      	lsrs	r3, r3, #4
 8009cc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009cc8:	441a      	add	r2, r3
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	621a      	str	r2, [r3, #32]
 8009cce:	e016      	b.n	8009cfe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	0c5b      	lsrs	r3, r3, #17
 8009cd4:	f003 030f 	and.w	r3, r3, #15
 8009cd8:	2b06      	cmp	r3, #6
 8009cda:	d110      	bne.n	8009cfe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009ce2:	2208      	movs	r2, #8
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	6a38      	ldr	r0, [r7, #32]
 8009ce8:	f007 f9aa 	bl	8011040 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	6a1a      	ldr	r2, [r3, #32]
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	091b      	lsrs	r3, r3, #4
 8009cf4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009cf8:	441a      	add	r2, r3
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	699a      	ldr	r2, [r3, #24]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f042 0210 	orr.w	r2, r2, #16
 8009d0c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4618      	mov	r0, r3
 8009d14:	f007 fb28 	bl	8011368 <USB_ReadInterrupts>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009d22:	f040 80a7 	bne.w	8009e74 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009d26:	2300      	movs	r3, #0
 8009d28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f007 fb2d 	bl	801138e <USB_ReadDevAllOutEpInterrupt>
 8009d34:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009d36:	e099      	b.n	8009e6c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3a:	f003 0301 	and.w	r3, r3, #1
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	f000 808e 	beq.w	8009e60 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d4a:	b2d2      	uxtb	r2, r2
 8009d4c:	4611      	mov	r1, r2
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f007 fb51 	bl	80113f6 <USB_ReadDevOutEPInterrupt>
 8009d54:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	f003 0301 	and.w	r3, r3, #1
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d00c      	beq.n	8009d7a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d62:	015a      	lsls	r2, r3, #5
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	4413      	add	r3, r2
 8009d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	2301      	movs	r3, #1
 8009d70:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009d72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 fe95 	bl	800aaa4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	f003 0308 	and.w	r3, r3, #8
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d00c      	beq.n	8009d9e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d86:	015a      	lsls	r2, r3, #5
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d90:	461a      	mov	r2, r3
 8009d92:	2308      	movs	r3, #8
 8009d94:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009d96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 fed1 	bl	800ab40 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	f003 0310 	and.w	r3, r3, #16
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d008      	beq.n	8009dba <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009daa:	015a      	lsls	r2, r3, #5
 8009dac:	69fb      	ldr	r3, [r7, #28]
 8009dae:	4413      	add	r3, r2
 8009db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009db4:	461a      	mov	r2, r3
 8009db6:	2310      	movs	r3, #16
 8009db8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	f003 0302 	and.w	r3, r3, #2
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d030      	beq.n	8009e26 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009dc4:	6a3b      	ldr	r3, [r7, #32]
 8009dc6:	695b      	ldr	r3, [r3, #20]
 8009dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dcc:	2b80      	cmp	r3, #128	; 0x80
 8009dce:	d109      	bne.n	8009de4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	69fa      	ldr	r2, [r7, #28]
 8009dda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009de2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de6:	4613      	mov	r3, r2
 8009de8:	00db      	lsls	r3, r3, #3
 8009dea:	4413      	add	r3, r2
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	4413      	add	r3, r2
 8009df6:	3304      	adds	r3, #4
 8009df8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	78db      	ldrb	r3, [r3, #3]
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d108      	bne.n	8009e14 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	2200      	movs	r2, #0
 8009e06:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f009 fb8e 	bl	8013530 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e16:	015a      	lsls	r2, r3, #5
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e20:	461a      	mov	r2, r3
 8009e22:	2302      	movs	r3, #2
 8009e24:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	f003 0320 	and.w	r3, r3, #32
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d008      	beq.n	8009e42 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	015a      	lsls	r2, r3, #5
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	4413      	add	r3, r2
 8009e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	2320      	movs	r3, #32
 8009e40:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d009      	beq.n	8009e60 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4e:	015a      	lsls	r2, r3, #5
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	4413      	add	r3, r2
 8009e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e58:	461a      	mov	r2, r3
 8009e5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e5e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e62:	3301      	adds	r3, #1
 8009e64:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e68:	085b      	lsrs	r3, r3, #1
 8009e6a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	f47f af62 	bne.w	8009d38 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f007 fa75 	bl	8011368 <USB_ReadInterrupts>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009e88:	f040 80a4 	bne.w	8009fd4 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4618      	mov	r0, r3
 8009e92:	f007 fa96 	bl	80113c2 <USB_ReadDevAllInEpInterrupt>
 8009e96:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009e9c:	e096      	b.n	8009fcc <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea0:	f003 0301 	and.w	r3, r3, #1
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	f000 808b 	beq.w	8009fc0 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eb0:	b2d2      	uxtb	r2, r2
 8009eb2:	4611      	mov	r1, r2
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f007 fabc 	bl	8011432 <USB_ReadDevInEPInterrupt>
 8009eba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	f003 0301 	and.w	r3, r3, #1
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d020      	beq.n	8009f08 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec8:	f003 030f 	and.w	r3, r3, #15
 8009ecc:	2201      	movs	r2, #1
 8009ece:	fa02 f303 	lsl.w	r3, r2, r3
 8009ed2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	43db      	mvns	r3, r3
 8009ee0:	69f9      	ldr	r1, [r7, #28]
 8009ee2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ee6:	4013      	ands	r3, r2
 8009ee8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eec:	015a      	lsls	r2, r3, #5
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	2301      	movs	r3, #1
 8009efa:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	4619      	mov	r1, r3
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f009 fa7f 	bl	8013406 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	f003 0308 	and.w	r3, r3, #8
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d008      	beq.n	8009f24 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f14:	015a      	lsls	r2, r3, #5
 8009f16:	69fb      	ldr	r3, [r7, #28]
 8009f18:	4413      	add	r3, r2
 8009f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f1e:	461a      	mov	r2, r3
 8009f20:	2308      	movs	r3, #8
 8009f22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	f003 0310 	and.w	r3, r3, #16
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d008      	beq.n	8009f40 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f30:	015a      	lsls	r2, r3, #5
 8009f32:	69fb      	ldr	r3, [r7, #28]
 8009f34:	4413      	add	r3, r2
 8009f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	2310      	movs	r3, #16
 8009f3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d008      	beq.n	8009f5c <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4c:	015a      	lsls	r2, r3, #5
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	4413      	add	r3, r2
 8009f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f56:	461a      	mov	r2, r3
 8009f58:	2340      	movs	r3, #64	; 0x40
 8009f5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	f003 0302 	and.w	r3, r3, #2
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d023      	beq.n	8009fae <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009f66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f68:	6a38      	ldr	r0, [r7, #32]
 8009f6a:	f006 fa83 	bl	8010474 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f70:	4613      	mov	r3, r2
 8009f72:	00db      	lsls	r3, r3, #3
 8009f74:	4413      	add	r3, r2
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	3338      	adds	r3, #56	; 0x38
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	3304      	adds	r3, #4
 8009f80:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	78db      	ldrb	r3, [r3, #3]
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d108      	bne.n	8009f9c <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	4619      	mov	r1, r3
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f009 fadc 	bl	8013554 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9e:	015a      	lsls	r2, r3, #5
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fa8:	461a      	mov	r2, r3
 8009faa:	2302      	movs	r3, #2
 8009fac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d003      	beq.n	8009fc0 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009fb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 fcea 	bl	800a994 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc8:	085b      	lsrs	r3, r3, #1
 8009fca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f47f af65 	bne.w	8009e9e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f007 f9c5 	bl	8011368 <USB_ReadInterrupts>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fe4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fe8:	d122      	bne.n	800a030 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	69fa      	ldr	r2, [r7, #28]
 8009ff4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ff8:	f023 0301 	bic.w	r3, r3, #1
 8009ffc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800a004:	2b01      	cmp	r3, #1
 800a006:	d108      	bne.n	800a01a <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a010:	2100      	movs	r1, #0
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f009 fd10 	bl	8013a38 <HAL_PCDEx_LPM_Callback>
 800a018:	e002      	b.n	800a020 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f009 fa60 	bl	80134e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	695a      	ldr	r2, [r3, #20]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a02e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4618      	mov	r0, r3
 800a036:	f007 f997 	bl	8011368 <USB_ReadInterrupts>
 800a03a:	4603      	mov	r3, r0
 800a03c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a044:	d112      	bne.n	800a06c <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	f003 0301 	and.w	r3, r3, #1
 800a052:	2b01      	cmp	r3, #1
 800a054:	d102      	bne.n	800a05c <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f009 fa1c 	bl	8013494 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	695a      	ldr	r2, [r3, #20]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a06a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4618      	mov	r0, r3
 800a072:	f007 f979 	bl	8011368 <USB_ReadInterrupts>
 800a076:	4603      	mov	r3, r0
 800a078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a07c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a080:	d121      	bne.n	800a0c6 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	695a      	ldr	r2, [r3, #20]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800a090:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d111      	bne.n	800a0c0 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0aa:	089b      	lsrs	r3, r3, #2
 800a0ac:	f003 020f 	and.w	r2, r3, #15
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a0b6:	2101      	movs	r1, #1
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f009 fcbd 	bl	8013a38 <HAL_PCDEx_LPM_Callback>
 800a0be:	e002      	b.n	800a0c6 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f009 f9e7 	bl	8013494 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f007 f94c 	bl	8011368 <USB_ReadInterrupts>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a0d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0da:	f040 80b5 	bne.w	800a248 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	69fa      	ldr	r2, [r7, #28]
 800a0e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0ec:	f023 0301 	bic.w	r3, r3, #1
 800a0f0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2110      	movs	r1, #16
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f006 f9bb 	bl	8010474 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a0fe:	2300      	movs	r3, #0
 800a100:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a102:	e046      	b.n	800a192 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a106:	015a      	lsls	r2, r3, #5
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	4413      	add	r3, r2
 800a10c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a110:	461a      	mov	r2, r3
 800a112:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a116:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11a:	015a      	lsls	r2, r3, #5
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	4413      	add	r3, r2
 800a120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a128:	0151      	lsls	r1, r2, #5
 800a12a:	69fa      	ldr	r2, [r7, #28]
 800a12c:	440a      	add	r2, r1
 800a12e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a132:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a136:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13a:	015a      	lsls	r2, r3, #5
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	4413      	add	r3, r2
 800a140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a144:	461a      	mov	r2, r3
 800a146:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a14a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a14e:	015a      	lsls	r2, r3, #5
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	4413      	add	r3, r2
 800a154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a15c:	0151      	lsls	r1, r2, #5
 800a15e:	69fa      	ldr	r2, [r7, #28]
 800a160:	440a      	add	r2, r1
 800a162:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a166:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a16a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16e:	015a      	lsls	r2, r3, #5
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	4413      	add	r3, r2
 800a174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a17c:	0151      	lsls	r1, r2, #5
 800a17e:	69fa      	ldr	r2, [r7, #28]
 800a180:	440a      	add	r2, r1
 800a182:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a186:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a18a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18e:	3301      	adds	r3, #1
 800a190:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a198:	429a      	cmp	r2, r3
 800a19a:	d3b3      	bcc.n	800a104 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a19c:	69fb      	ldr	r3, [r7, #28]
 800a19e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1a2:	69db      	ldr	r3, [r3, #28]
 800a1a4:	69fa      	ldr	r2, [r7, #28]
 800a1a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1aa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a1ae:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d016      	beq.n	800a1e6 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a1b8:	69fb      	ldr	r3, [r7, #28]
 800a1ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1c2:	69fa      	ldr	r2, [r7, #28]
 800a1c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1c8:	f043 030b 	orr.w	r3, r3, #11
 800a1cc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1d8:	69fa      	ldr	r2, [r7, #28]
 800a1da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1de:	f043 030b 	orr.w	r3, r3, #11
 800a1e2:	6453      	str	r3, [r2, #68]	; 0x44
 800a1e4:	e015      	b.n	800a212 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ec:	695b      	ldr	r3, [r3, #20]
 800a1ee:	69fa      	ldr	r2, [r7, #28]
 800a1f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a1f8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a1fc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a204:	691b      	ldr	r3, [r3, #16]
 800a206:	69fa      	ldr	r2, [r7, #28]
 800a208:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a20c:	f043 030b 	orr.w	r3, r3, #11
 800a210:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	69fa      	ldr	r2, [r7, #28]
 800a21c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a220:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a224:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a230:	4619      	mov	r1, r3
 800a232:	4610      	mov	r0, r2
 800a234:	f007 f95c 	bl	80114f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	695a      	ldr	r2, [r3, #20]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a246:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4618      	mov	r0, r3
 800a24e:	f007 f88b 	bl	8011368 <USB_ReadInterrupts>
 800a252:	4603      	mov	r3, r0
 800a254:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a25c:	d124      	bne.n	800a2a8 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4618      	mov	r0, r3
 800a264:	f007 f921 	bl	80114aa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4618      	mov	r0, r3
 800a26e:	f006 f97e 	bl	801056e <USB_GetDevSpeed>
 800a272:	4603      	mov	r3, r0
 800a274:	461a      	mov	r2, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681c      	ldr	r4, [r3, #0]
 800a27e:	f001 fc0b 	bl	800ba98 <HAL_RCC_GetHCLKFreq>
 800a282:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	461a      	mov	r2, r3
 800a28c:	4620      	mov	r0, r4
 800a28e:	f005 fe9b 	bl	800ffc8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f009 f8df 	bl	8013456 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	695a      	ldr	r2, [r3, #20]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a2a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f007 f85b 	bl	8011368 <USB_ReadInterrupts>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	f003 0308 	and.w	r3, r3, #8
 800a2b8:	2b08      	cmp	r3, #8
 800a2ba:	d10a      	bne.n	800a2d2 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f009 f8bc 	bl	801343a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	695a      	ldr	r2, [r3, #20]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f002 0208 	and.w	r2, r2, #8
 800a2d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f007 f846 	bl	8011368 <USB_ReadInterrupts>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2e2:	2b80      	cmp	r3, #128	; 0x80
 800a2e4:	d122      	bne.n	800a32c <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800a2e6:	6a3b      	ldr	r3, [r7, #32]
 800a2e8:	699b      	ldr	r3, [r3, #24]
 800a2ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a2ee:	6a3b      	ldr	r3, [r7, #32]
 800a2f0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	627b      	str	r3, [r7, #36]	; 0x24
 800a2f6:	e014      	b.n	800a322 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a2f8:	6879      	ldr	r1, [r7, #4]
 800a2fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	00db      	lsls	r3, r3, #3
 800a300:	4413      	add	r3, r2
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	440b      	add	r3, r1
 800a306:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d105      	bne.n	800a31c <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800a310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a312:	b2db      	uxtb	r3, r3
 800a314:	4619      	mov	r1, r3
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 fb0b 	bl	800a932 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31e:	3301      	adds	r3, #1
 800a320:	627b      	str	r3, [r7, #36]	; 0x24
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a328:	429a      	cmp	r2, r3
 800a32a:	d3e5      	bcc.n	800a2f8 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4618      	mov	r0, r3
 800a332:	f007 f819 	bl	8011368 <USB_ReadInterrupts>
 800a336:	4603      	mov	r3, r0
 800a338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a33c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a340:	d13b      	bne.n	800a3ba <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a342:	2301      	movs	r3, #1
 800a344:	627b      	str	r3, [r7, #36]	; 0x24
 800a346:	e02b      	b.n	800a3a0 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34a:	015a      	lsls	r2, r3, #5
 800a34c:	69fb      	ldr	r3, [r7, #28]
 800a34e:	4413      	add	r3, r2
 800a350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a358:	6879      	ldr	r1, [r7, #4]
 800a35a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a35c:	4613      	mov	r3, r2
 800a35e:	00db      	lsls	r3, r3, #3
 800a360:	4413      	add	r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	440b      	add	r3, r1
 800a366:	3340      	adds	r3, #64	; 0x40
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d115      	bne.n	800a39a <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800a36e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a370:	2b00      	cmp	r3, #0
 800a372:	da12      	bge.n	800a39a <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a374:	6879      	ldr	r1, [r7, #4]
 800a376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a378:	4613      	mov	r3, r2
 800a37a:	00db      	lsls	r3, r3, #3
 800a37c:	4413      	add	r3, r2
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	440b      	add	r3, r1
 800a382:	333f      	adds	r3, #63	; 0x3f
 800a384:	2201      	movs	r2, #1
 800a386:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800a388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a390:	b2db      	uxtb	r3, r3
 800a392:	4619      	mov	r1, r3
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 facc 	bl	800a932 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39c:	3301      	adds	r3, #1
 800a39e:	627b      	str	r3, [r7, #36]	; 0x24
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d3ce      	bcc.n	800a348 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	695a      	ldr	r2, [r3, #20]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a3b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f006 ffd2 	bl	8011368 <USB_ReadInterrupts>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a3ce:	d155      	bne.n	800a47c <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	627b      	str	r3, [r7, #36]	; 0x24
 800a3d4:	e045      	b.n	800a462 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800a3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d8:	015a      	lsls	r2, r3, #5
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	4413      	add	r3, r2
 800a3de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a3e6:	6879      	ldr	r1, [r7, #4]
 800a3e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ea:	4613      	mov	r3, r2
 800a3ec:	00db      	lsls	r3, r3, #3
 800a3ee:	4413      	add	r3, r2
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	440b      	add	r3, r1
 800a3f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d12e      	bne.n	800a45c <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a3fe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a400:	2b00      	cmp	r3, #0
 800a402:	da2b      	bge.n	800a45c <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800a410:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a414:	429a      	cmp	r2, r3
 800a416:	d121      	bne.n	800a45c <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800a418:	6879      	ldr	r1, [r7, #4]
 800a41a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a41c:	4613      	mov	r3, r2
 800a41e:	00db      	lsls	r3, r3, #3
 800a420:	4413      	add	r3, r2
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	440b      	add	r3, r1
 800a426:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a42a:	2201      	movs	r2, #1
 800a42c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800a42e:	6a3b      	ldr	r3, [r7, #32]
 800a430:	699b      	ldr	r3, [r3, #24]
 800a432:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a436:	6a3b      	ldr	r3, [r7, #32]
 800a438:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800a43a:	6a3b      	ldr	r3, [r7, #32]
 800a43c:	695b      	ldr	r3, [r3, #20]
 800a43e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a442:	2b00      	cmp	r3, #0
 800a444:	d10a      	bne.n	800a45c <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800a446:	69fb      	ldr	r3, [r7, #28]
 800a448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	69fa      	ldr	r2, [r7, #28]
 800a450:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a454:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a458:	6053      	str	r3, [r2, #4]
            break;
 800a45a:	e007      	b.n	800a46c <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45e:	3301      	adds	r3, #1
 800a460:	627b      	str	r3, [r7, #36]	; 0x24
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a468:	429a      	cmp	r2, r3
 800a46a:	d3b4      	bcc.n	800a3d6 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	695a      	ldr	r2, [r3, #20]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a47a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4618      	mov	r0, r3
 800a482:	f006 ff71 	bl	8011368 <USB_ReadInterrupts>
 800a486:	4603      	mov	r3, r0
 800a488:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a48c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a490:	d10a      	bne.n	800a4a8 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f009 f870 	bl	8013578 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	695a      	ldr	r2, [r3, #20]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a4a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f006 ff5b 	bl	8011368 <USB_ReadInterrupts>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	f003 0304 	and.w	r3, r3, #4
 800a4b8:	2b04      	cmp	r3, #4
 800a4ba:	d115      	bne.n	800a4e8 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	f003 0304 	and.w	r3, r3, #4
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d002      	beq.n	800a4d4 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f009 f860 	bl	8013594 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	6859      	ldr	r1, [r3, #4]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	69ba      	ldr	r2, [r7, #24]
 800a4e0:	430a      	orrs	r2, r1
 800a4e2:	605a      	str	r2, [r3, #4]
 800a4e4:	e000      	b.n	800a4e8 <HAL_PCD_IRQHandler+0x920>
      return;
 800a4e6:	bf00      	nop
    }
  }
}
 800a4e8:	3734      	adds	r7, #52	; 0x34
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd90      	pop	{r4, r7, pc}

0800a4ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b082      	sub	sp, #8
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a500:	2b01      	cmp	r3, #1
 800a502:	d101      	bne.n	800a508 <HAL_PCD_SetAddress+0x1a>
 800a504:	2302      	movs	r3, #2
 800a506:	e013      	b.n	800a530 <HAL_PCD_SetAddress+0x42>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	78fa      	ldrb	r2, [r7, #3]
 800a514:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	78fa      	ldrb	r2, [r7, #3]
 800a51e:	4611      	mov	r1, r2
 800a520:	4618      	mov	r0, r3
 800a522:	f006 feb9 	bl	8011298 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3708      	adds	r7, #8
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	4608      	mov	r0, r1
 800a542:	4611      	mov	r1, r2
 800a544:	461a      	mov	r2, r3
 800a546:	4603      	mov	r3, r0
 800a548:	70fb      	strb	r3, [r7, #3]
 800a54a:	460b      	mov	r3, r1
 800a54c:	803b      	strh	r3, [r7, #0]
 800a54e:	4613      	mov	r3, r2
 800a550:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a552:	2300      	movs	r3, #0
 800a554:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a556:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	da0f      	bge.n	800a57e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a55e:	78fb      	ldrb	r3, [r7, #3]
 800a560:	f003 020f 	and.w	r2, r3, #15
 800a564:	4613      	mov	r3, r2
 800a566:	00db      	lsls	r3, r3, #3
 800a568:	4413      	add	r3, r2
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	3338      	adds	r3, #56	; 0x38
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	4413      	add	r3, r2
 800a572:	3304      	adds	r3, #4
 800a574:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2201      	movs	r2, #1
 800a57a:	705a      	strb	r2, [r3, #1]
 800a57c:	e00f      	b.n	800a59e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a57e:	78fb      	ldrb	r3, [r7, #3]
 800a580:	f003 020f 	and.w	r2, r3, #15
 800a584:	4613      	mov	r3, r2
 800a586:	00db      	lsls	r3, r3, #3
 800a588:	4413      	add	r3, r2
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	4413      	add	r3, r2
 800a594:	3304      	adds	r3, #4
 800a596:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2200      	movs	r2, #0
 800a59c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a59e:	78fb      	ldrb	r3, [r7, #3]
 800a5a0:	f003 030f 	and.w	r3, r3, #15
 800a5a4:	b2da      	uxtb	r2, r3
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a5aa:	883a      	ldrh	r2, [r7, #0]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	78ba      	ldrb	r2, [r7, #2]
 800a5b4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	785b      	ldrb	r3, [r3, #1]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d004      	beq.n	800a5c8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a5c8:	78bb      	ldrb	r3, [r7, #2]
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	d102      	bne.n	800a5d4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d101      	bne.n	800a5e2 <HAL_PCD_EP_Open+0xaa>
 800a5de:	2302      	movs	r3, #2
 800a5e0:	e00e      	b.n	800a600 <HAL_PCD_EP_Open+0xc8>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	68f9      	ldr	r1, [r7, #12]
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f005 ffdb 	bl	80105ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800a5fe:	7afb      	ldrb	r3, [r7, #11]
}
 800a600:	4618      	mov	r0, r3
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	460b      	mov	r3, r1
 800a612:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	da0f      	bge.n	800a63c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a61c:	78fb      	ldrb	r3, [r7, #3]
 800a61e:	f003 020f 	and.w	r2, r3, #15
 800a622:	4613      	mov	r3, r2
 800a624:	00db      	lsls	r3, r3, #3
 800a626:	4413      	add	r3, r2
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	3338      	adds	r3, #56	; 0x38
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	4413      	add	r3, r2
 800a630:	3304      	adds	r3, #4
 800a632:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2201      	movs	r2, #1
 800a638:	705a      	strb	r2, [r3, #1]
 800a63a:	e00f      	b.n	800a65c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a63c:	78fb      	ldrb	r3, [r7, #3]
 800a63e:	f003 020f 	and.w	r2, r3, #15
 800a642:	4613      	mov	r3, r2
 800a644:	00db      	lsls	r3, r3, #3
 800a646:	4413      	add	r3, r2
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	4413      	add	r3, r2
 800a652:	3304      	adds	r3, #4
 800a654:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2200      	movs	r2, #0
 800a65a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a65c:	78fb      	ldrb	r3, [r7, #3]
 800a65e:	f003 030f 	and.w	r3, r3, #15
 800a662:	b2da      	uxtb	r2, r3
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d101      	bne.n	800a676 <HAL_PCD_EP_Close+0x6e>
 800a672:	2302      	movs	r3, #2
 800a674:	e00e      	b.n	800a694 <HAL_PCD_EP_Close+0x8c>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2201      	movs	r2, #1
 800a67a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	68f9      	ldr	r1, [r7, #12]
 800a684:	4618      	mov	r0, r3
 800a686:	f006 f819 	bl	80106bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	3710      	adds	r7, #16
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b086      	sub	sp, #24
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	607a      	str	r2, [r7, #4]
 800a6a6:	603b      	str	r3, [r7, #0]
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a6ac:	7afb      	ldrb	r3, [r7, #11]
 800a6ae:	f003 020f 	and.w	r2, r3, #15
 800a6b2:	4613      	mov	r3, r2
 800a6b4:	00db      	lsls	r3, r3, #3
 800a6b6:	4413      	add	r3, r2
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	3304      	adds	r3, #4
 800a6c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	683a      	ldr	r2, [r7, #0]
 800a6d0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a6de:	7afb      	ldrb	r3, [r7, #11]
 800a6e0:	f003 030f 	and.w	r3, r3, #15
 800a6e4:	b2da      	uxtb	r2, r3
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a6ea:	7afb      	ldrb	r3, [r7, #11]
 800a6ec:	f003 030f 	and.w	r3, r3, #15
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d106      	bne.n	800a702 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	6979      	ldr	r1, [r7, #20]
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f006 fa9a 	bl	8010c34 <USB_EP0StartXfer>
 800a700:	e005      	b.n	800a70e <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	6979      	ldr	r1, [r7, #20]
 800a708:	4618      	mov	r0, r3
 800a70a:	f006 f8b3 	bl	8010874 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a70e:	2300      	movs	r3, #0
}
 800a710:	4618      	mov	r0, r3
 800a712:	3718      	adds	r7, #24
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	460b      	mov	r3, r1
 800a722:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a724:	78fb      	ldrb	r3, [r7, #3]
 800a726:	f003 020f 	and.w	r2, r3, #15
 800a72a:	6879      	ldr	r1, [r7, #4]
 800a72c:	4613      	mov	r3, r2
 800a72e:	00db      	lsls	r3, r3, #3
 800a730:	4413      	add	r3, r2
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	440b      	add	r3, r1
 800a736:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800a73a:	681b      	ldr	r3, [r3, #0]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	607a      	str	r2, [r7, #4]
 800a752:	603b      	str	r3, [r7, #0]
 800a754:	460b      	mov	r3, r1
 800a756:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a758:	7afb      	ldrb	r3, [r7, #11]
 800a75a:	f003 020f 	and.w	r2, r3, #15
 800a75e:	4613      	mov	r3, r2
 800a760:	00db      	lsls	r3, r3, #3
 800a762:	4413      	add	r3, r2
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	3338      	adds	r3, #56	; 0x38
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	4413      	add	r3, r2
 800a76c:	3304      	adds	r3, #4
 800a76e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	683a      	ldr	r2, [r7, #0]
 800a77a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	2200      	movs	r2, #0
 800a780:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	2201      	movs	r2, #1
 800a786:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a788:	7afb      	ldrb	r3, [r7, #11]
 800a78a:	f003 030f 	and.w	r3, r3, #15
 800a78e:	b2da      	uxtb	r2, r3
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a794:	7afb      	ldrb	r3, [r7, #11]
 800a796:	f003 030f 	and.w	r3, r3, #15
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d106      	bne.n	800a7ac <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	6979      	ldr	r1, [r7, #20]
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f006 fa45 	bl	8010c34 <USB_EP0StartXfer>
 800a7aa:	e005      	b.n	800a7b8 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	6979      	ldr	r1, [r7, #20]
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f006 f85e 	bl	8010874 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a7b8:	2300      	movs	r3, #0
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3718      	adds	r7, #24
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b084      	sub	sp, #16
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a7ce:	78fb      	ldrb	r3, [r7, #3]
 800a7d0:	f003 020f 	and.w	r2, r3, #15
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d901      	bls.n	800a7e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	e04e      	b.n	800a87e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a7e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	da0f      	bge.n	800a808 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a7e8:	78fb      	ldrb	r3, [r7, #3]
 800a7ea:	f003 020f 	and.w	r2, r3, #15
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	00db      	lsls	r3, r3, #3
 800a7f2:	4413      	add	r3, r2
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	3338      	adds	r3, #56	; 0x38
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	3304      	adds	r3, #4
 800a7fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2201      	movs	r2, #1
 800a804:	705a      	strb	r2, [r3, #1]
 800a806:	e00d      	b.n	800a824 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a808:	78fa      	ldrb	r2, [r7, #3]
 800a80a:	4613      	mov	r3, r2
 800a80c:	00db      	lsls	r3, r3, #3
 800a80e:	4413      	add	r3, r2
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	4413      	add	r3, r2
 800a81a:	3304      	adds	r3, #4
 800a81c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2200      	movs	r2, #0
 800a822:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2201      	movs	r2, #1
 800a828:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a82a:	78fb      	ldrb	r3, [r7, #3]
 800a82c:	f003 030f 	and.w	r3, r3, #15
 800a830:	b2da      	uxtb	r2, r3
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d101      	bne.n	800a844 <HAL_PCD_EP_SetStall+0x82>
 800a840:	2302      	movs	r3, #2
 800a842:	e01c      	b.n	800a87e <HAL_PCD_EP_SetStall+0xbc>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2201      	movs	r2, #1
 800a848:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	68f9      	ldr	r1, [r7, #12]
 800a852:	4618      	mov	r0, r3
 800a854:	f006 fc4c 	bl	80110f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a858:	78fb      	ldrb	r3, [r7, #3]
 800a85a:	f003 030f 	and.w	r3, r3, #15
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d108      	bne.n	800a874 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a86c:	4619      	mov	r1, r3
 800a86e:	4610      	mov	r0, r2
 800a870:	f006 fe3e 	bl	80114f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a87c:	2300      	movs	r3, #0
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b084      	sub	sp, #16
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
 800a88e:	460b      	mov	r3, r1
 800a890:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a892:	78fb      	ldrb	r3, [r7, #3]
 800a894:	f003 020f 	and.w	r2, r3, #15
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d901      	bls.n	800a8a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	e042      	b.n	800a92a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a8a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	da0f      	bge.n	800a8cc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a8ac:	78fb      	ldrb	r3, [r7, #3]
 800a8ae:	f003 020f 	and.w	r2, r3, #15
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	00db      	lsls	r3, r3, #3
 800a8b6:	4413      	add	r3, r2
 800a8b8:	009b      	lsls	r3, r3, #2
 800a8ba:	3338      	adds	r3, #56	; 0x38
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	4413      	add	r3, r2
 800a8c0:	3304      	adds	r3, #4
 800a8c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	705a      	strb	r2, [r3, #1]
 800a8ca:	e00f      	b.n	800a8ec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a8cc:	78fb      	ldrb	r3, [r7, #3]
 800a8ce:	f003 020f 	and.w	r2, r3, #15
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	00db      	lsls	r3, r3, #3
 800a8d6:	4413      	add	r3, r2
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	3304      	adds	r3, #4
 800a8e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a8f2:	78fb      	ldrb	r3, [r7, #3]
 800a8f4:	f003 030f 	and.w	r3, r3, #15
 800a8f8:	b2da      	uxtb	r2, r3
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a904:	2b01      	cmp	r3, #1
 800a906:	d101      	bne.n	800a90c <HAL_PCD_EP_ClrStall+0x86>
 800a908:	2302      	movs	r3, #2
 800a90a:	e00e      	b.n	800a92a <HAL_PCD_EP_ClrStall+0xa4>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	68f9      	ldr	r1, [r7, #12]
 800a91a:	4618      	mov	r0, r3
 800a91c:	f006 fc56 	bl	80111cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3710      	adds	r7, #16
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b084      	sub	sp, #16
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
 800a93a:	460b      	mov	r3, r1
 800a93c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a93e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a942:	2b00      	cmp	r3, #0
 800a944:	da0c      	bge.n	800a960 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a946:	78fb      	ldrb	r3, [r7, #3]
 800a948:	f003 020f 	and.w	r2, r3, #15
 800a94c:	4613      	mov	r3, r2
 800a94e:	00db      	lsls	r3, r3, #3
 800a950:	4413      	add	r3, r2
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	3338      	adds	r3, #56	; 0x38
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	4413      	add	r3, r2
 800a95a:	3304      	adds	r3, #4
 800a95c:	60fb      	str	r3, [r7, #12]
 800a95e:	e00c      	b.n	800a97a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a960:	78fb      	ldrb	r3, [r7, #3]
 800a962:	f003 020f 	and.w	r2, r3, #15
 800a966:	4613      	mov	r3, r2
 800a968:	00db      	lsls	r3, r3, #3
 800a96a:	4413      	add	r3, r2
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	4413      	add	r3, r2
 800a976:	3304      	adds	r3, #4
 800a978:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	68f9      	ldr	r1, [r7, #12]
 800a980:	4618      	mov	r0, r3
 800a982:	f006 fa79 	bl	8010e78 <USB_EPStopXfer>
 800a986:	4603      	mov	r3, r0
 800a988:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a98a:	7afb      	ldrb	r3, [r7, #11]
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3710      	adds	r7, #16
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b088      	sub	sp, #32
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a9a8:	683a      	ldr	r2, [r7, #0]
 800a9aa:	4613      	mov	r3, r2
 800a9ac:	00db      	lsls	r3, r3, #3
 800a9ae:	4413      	add	r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	3338      	adds	r3, #56	; 0x38
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	4413      	add	r3, r2
 800a9b8:	3304      	adds	r3, #4
 800a9ba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6a1a      	ldr	r2, [r3, #32]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	699b      	ldr	r3, [r3, #24]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d901      	bls.n	800a9cc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	e067      	b.n	800aa9c <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	699a      	ldr	r2, [r3, #24]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	6a1b      	ldr	r3, [r3, #32]
 800a9d4:	1ad3      	subs	r3, r2, r3
 800a9d6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	69fa      	ldr	r2, [r7, #28]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d902      	bls.n	800a9e8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a9e8:	69fb      	ldr	r3, [r7, #28]
 800a9ea:	3303      	adds	r3, #3
 800a9ec:	089b      	lsrs	r3, r3, #2
 800a9ee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a9f0:	e026      	b.n	800aa40 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	699a      	ldr	r2, [r3, #24]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	6a1b      	ldr	r3, [r3, #32]
 800a9fa:	1ad3      	subs	r3, r2, r3
 800a9fc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	68db      	ldr	r3, [r3, #12]
 800aa02:	69fa      	ldr	r2, [r7, #28]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d902      	bls.n	800aa0e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	3303      	adds	r3, #3
 800aa12:	089b      	lsrs	r3, r3, #2
 800aa14:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	6919      	ldr	r1, [r3, #16]
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	b2da      	uxtb	r2, r3
 800aa1e:	69fb      	ldr	r3, [r7, #28]
 800aa20:	b29b      	uxth	r3, r3
 800aa22:	6978      	ldr	r0, [r7, #20]
 800aa24:	f006 fad2 	bl	8010fcc <USB_WritePacket>

    ep->xfer_buff  += len;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	691a      	ldr	r2, [r3, #16]
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	441a      	add	r2, r3
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6a1a      	ldr	r2, [r3, #32]
 800aa38:	69fb      	ldr	r3, [r7, #28]
 800aa3a:	441a      	add	r2, r3
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	015a      	lsls	r2, r3, #5
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	4413      	add	r3, r2
 800aa48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa4c:	699b      	ldr	r3, [r3, #24]
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	69ba      	ldr	r2, [r7, #24]
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d809      	bhi.n	800aa6a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	6a1a      	ldr	r2, [r3, #32]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d203      	bcs.n	800aa6a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	699b      	ldr	r3, [r3, #24]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d1c3      	bne.n	800a9f2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	699a      	ldr	r2, [r3, #24]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	6a1b      	ldr	r3, [r3, #32]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d811      	bhi.n	800aa9a <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	f003 030f 	and.w	r3, r3, #15
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa82:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	43db      	mvns	r3, r3
 800aa90:	6939      	ldr	r1, [r7, #16]
 800aa92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa96:	4013      	ands	r3, r2
 800aa98:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3720      	adds	r7, #32
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b086      	sub	sp, #24
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	333c      	adds	r3, #60	; 0x3c
 800aabc:	3304      	adds	r3, #4
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	015a      	lsls	r2, r3, #5
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	4413      	add	r3, r2
 800aaca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	4a19      	ldr	r2, [pc, #100]	; (800ab3c <PCD_EP_OutXfrComplete_int+0x98>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d124      	bne.n	800ab24 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d00a      	beq.n	800aafa <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	015a      	lsls	r2, r3, #5
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	4413      	add	r3, r2
 800aaec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aaf6:	6093      	str	r3, [r2, #8]
 800aaf8:	e01a      	b.n	800ab30 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	f003 0320 	and.w	r3, r3, #32
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d008      	beq.n	800ab16 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	015a      	lsls	r2, r3, #5
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab10:	461a      	mov	r2, r3
 800ab12:	2320      	movs	r3, #32
 800ab14:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f008 fc57 	bl	80133d0 <HAL_PCD_DataOutStageCallback>
 800ab22:	e005      	b.n	800ab30 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	4619      	mov	r1, r3
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f008 fc50 	bl	80133d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3718      	adds	r7, #24
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	4f54310a 	.word	0x4f54310a

0800ab40 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b086      	sub	sp, #24
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	333c      	adds	r3, #60	; 0x3c
 800ab58:	3304      	adds	r3, #4
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	015a      	lsls	r2, r3, #5
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	4413      	add	r3, r2
 800ab66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	4a0c      	ldr	r2, [pc, #48]	; (800aba4 <PCD_EP_OutSetupPacket_int+0x64>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d90e      	bls.n	800ab94 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d009      	beq.n	800ab94 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	015a      	lsls	r2, r3, #5
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	4413      	add	r3, r2
 800ab88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab92:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f008 fc09 	bl	80133ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800ab9a:	2300      	movs	r3, #0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3718      	adds	r7, #24
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	4f54300a 	.word	0x4f54300a

0800aba8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b085      	sub	sp, #20
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	460b      	mov	r3, r1
 800abb2:	70fb      	strb	r3, [r7, #3]
 800abb4:	4613      	mov	r3, r2
 800abb6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800abc0:	78fb      	ldrb	r3, [r7, #3]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d107      	bne.n	800abd6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800abc6:	883b      	ldrh	r3, [r7, #0]
 800abc8:	0419      	lsls	r1, r3, #16
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	68ba      	ldr	r2, [r7, #8]
 800abd0:	430a      	orrs	r2, r1
 800abd2:	629a      	str	r2, [r3, #40]	; 0x28
 800abd4:	e028      	b.n	800ac28 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abdc:	0c1b      	lsrs	r3, r3, #16
 800abde:	68ba      	ldr	r2, [r7, #8]
 800abe0:	4413      	add	r3, r2
 800abe2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800abe4:	2300      	movs	r3, #0
 800abe6:	73fb      	strb	r3, [r7, #15]
 800abe8:	e00d      	b.n	800ac06 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	7bfb      	ldrb	r3, [r7, #15]
 800abf0:	3340      	adds	r3, #64	; 0x40
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	4413      	add	r3, r2
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	0c1b      	lsrs	r3, r3, #16
 800abfa:	68ba      	ldr	r2, [r7, #8]
 800abfc:	4413      	add	r3, r2
 800abfe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800ac00:	7bfb      	ldrb	r3, [r7, #15]
 800ac02:	3301      	adds	r3, #1
 800ac04:	73fb      	strb	r3, [r7, #15]
 800ac06:	7bfa      	ldrb	r2, [r7, #15]
 800ac08:	78fb      	ldrb	r3, [r7, #3]
 800ac0a:	3b01      	subs	r3, #1
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d3ec      	bcc.n	800abea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800ac10:	883b      	ldrh	r3, [r7, #0]
 800ac12:	0418      	lsls	r0, r3, #16
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6819      	ldr	r1, [r3, #0]
 800ac18:	78fb      	ldrb	r3, [r7, #3]
 800ac1a:	3b01      	subs	r3, #1
 800ac1c:	68ba      	ldr	r2, [r7, #8]
 800ac1e:	4302      	orrs	r2, r0
 800ac20:	3340      	adds	r3, #64	; 0x40
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	440b      	add	r3, r1
 800ac26:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3714      	adds	r7, #20
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800ac36:	b480      	push	{r7}
 800ac38:	b083      	sub	sp, #12
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
 800ac3e:	460b      	mov	r3, r1
 800ac40:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	887a      	ldrh	r2, [r7, #2]
 800ac48:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800ac4a:	2300      	movs	r3, #0
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	699b      	ldr	r3, [r3, #24]
 800ac7a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac8a:	f043 0303 	orr.w	r3, r3, #3
 800ac8e:	68fa      	ldr	r2, [r7, #12]
 800ac90:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800ac92:	2300      	movs	r3, #0
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3714      	adds	r7, #20
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800aca0:	b480      	push	{r7}
 800aca2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aca4:	4b05      	ldr	r3, [pc, #20]	; (800acbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a04      	ldr	r2, [pc, #16]	; (800acbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800acaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acae:	6013      	str	r3, [r2, #0]
}
 800acb0:	bf00      	nop
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr
 800acba:	bf00      	nop
 800acbc:	40007000 	.word	0x40007000

0800acc0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800acc0:	b480      	push	{r7}
 800acc2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800acc4:	4b04      	ldr	r3, [pc, #16]	; (800acd8 <HAL_PWREx_GetVoltageRange+0x18>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800accc:	4618      	mov	r0, r3
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr
 800acd6:	bf00      	nop
 800acd8:	40007000 	.word	0x40007000

0800acdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acea:	d130      	bne.n	800ad4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800acec:	4b23      	ldr	r3, [pc, #140]	; (800ad7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800acf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acf8:	d038      	beq.n	800ad6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800acfa:	4b20      	ldr	r3, [pc, #128]	; (800ad7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ad02:	4a1e      	ldr	r2, [pc, #120]	; (800ad7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ad04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ad08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ad0a:	4b1d      	ldr	r3, [pc, #116]	; (800ad80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2232      	movs	r2, #50	; 0x32
 800ad10:	fb02 f303 	mul.w	r3, r2, r3
 800ad14:	4a1b      	ldr	r2, [pc, #108]	; (800ad84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800ad16:	fba2 2303 	umull	r2, r3, r2, r3
 800ad1a:	0c9b      	lsrs	r3, r3, #18
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ad20:	e002      	b.n	800ad28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	3b01      	subs	r3, #1
 800ad26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ad28:	4b14      	ldr	r3, [pc, #80]	; (800ad7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ad2a:	695b      	ldr	r3, [r3, #20]
 800ad2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad34:	d102      	bne.n	800ad3c <HAL_PWREx_ControlVoltageScaling+0x60>
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d1f2      	bne.n	800ad22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ad3c:	4b0f      	ldr	r3, [pc, #60]	; (800ad7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ad3e:	695b      	ldr	r3, [r3, #20]
 800ad40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad48:	d110      	bne.n	800ad6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800ad4a:	2303      	movs	r3, #3
 800ad4c:	e00f      	b.n	800ad6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800ad4e:	4b0b      	ldr	r3, [pc, #44]	; (800ad7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ad56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad5a:	d007      	beq.n	800ad6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ad5c:	4b07      	ldr	r3, [pc, #28]	; (800ad7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ad64:	4a05      	ldr	r2, [pc, #20]	; (800ad7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ad66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ad6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800ad6c:	2300      	movs	r3, #0
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3714      	adds	r7, #20
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr
 800ad7a:	bf00      	nop
 800ad7c:	40007000 	.word	0x40007000
 800ad80:	20000194 	.word	0x20000194
 800ad84:	431bde83 	.word	0x431bde83

0800ad88 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800ad8c:	4b05      	ldr	r3, [pc, #20]	; (800ada4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	4a04      	ldr	r2, [pc, #16]	; (800ada4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800ad92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ad96:	6053      	str	r3, [r2, #4]
}
 800ad98:	bf00      	nop
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop
 800ada4:	40007000 	.word	0x40007000

0800ada8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800ada8:	b480      	push	{r7}
 800adaa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800adac:	4b05      	ldr	r3, [pc, #20]	; (800adc4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	4a04      	ldr	r2, [pc, #16]	; (800adc4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800adb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800adb6:	6053      	str	r3, [r2, #4]
}
 800adb8:	bf00      	nop
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	40007000 	.word	0x40007000

0800adc8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b086      	sub	sp, #24
 800adcc:	af02      	add	r7, sp, #8
 800adce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800add0:	f7fc fa3c 	bl	800724c <HAL_GetTick>
 800add4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d101      	bne.n	800ade0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800addc:	2301      	movs	r3, #1
 800adde:	e069      	b.n	800aeb4 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d10b      	bne.n	800ae04 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f7f6 fd7f 	bl	80018f8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800adfa:	f241 3188 	movw	r1, #5000	; 0x1388
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 f85e 	bl	800aec0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	3b01      	subs	r3, #1
 800ae14:	021a      	lsls	r2, r3, #8
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	430a      	orrs	r2, r1
 800ae1c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae22:	9300      	str	r3, [sp, #0]
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2200      	movs	r2, #0
 800ae28:	2120      	movs	r1, #32
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 f856 	bl	800aedc <QSPI_WaitFlagStateUntilTimeout>
 800ae30:	4603      	mov	r3, r0
 800ae32:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800ae34:	7afb      	ldrb	r3, [r7, #11]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d137      	bne.n	800aeaa <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ae44:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	6852      	ldr	r2, [r2, #4]
 800ae4c:	0611      	lsls	r1, r2, #24
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	68d2      	ldr	r2, [r2, #12]
 800ae52:	4311      	orrs	r1, r2
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	69d2      	ldr	r2, [r2, #28]
 800ae58:	4311      	orrs	r1, r2
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	6a12      	ldr	r2, [r2, #32]
 800ae5e:	4311      	orrs	r1, r2
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	6812      	ldr	r2, [r2, #0]
 800ae64:	430b      	orrs	r3, r1
 800ae66:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	685a      	ldr	r2, [r3, #4]
 800ae6e:	4b13      	ldr	r3, [pc, #76]	; (800aebc <HAL_QSPI_Init+0xf4>)
 800ae70:	4013      	ands	r3, r2
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	6912      	ldr	r2, [r2, #16]
 800ae76:	0411      	lsls	r1, r2, #16
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	6952      	ldr	r2, [r2, #20]
 800ae7c:	4311      	orrs	r1, r2
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	6992      	ldr	r2, [r2, #24]
 800ae82:	4311      	orrs	r1, r2
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	6812      	ldr	r2, [r2, #0]
 800ae88:	430b      	orrs	r3, r1
 800ae8a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	681a      	ldr	r2, [r3, #0]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f042 0201 	orr.w	r2, r2, #1
 800ae9a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2201      	movs	r2, #1
 800aea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2200      	movs	r2, #0
 800aeae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800aeb2:	7afb      	ldrb	r3, [r7, #11]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3710      	adds	r7, #16
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	ffe0f8fe 	.word	0xffe0f8fe

0800aec0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	683a      	ldr	r2, [r7, #0]
 800aece:	649a      	str	r2, [r3, #72]	; 0x48
}
 800aed0:	bf00      	nop
 800aed2:	370c      	adds	r7, #12
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	603b      	str	r3, [r7, #0]
 800aee8:	4613      	mov	r3, r2
 800aeea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800aeec:	e01a      	b.n	800af24 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aeee:	69bb      	ldr	r3, [r7, #24]
 800aef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aef4:	d016      	beq.n	800af24 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aef6:	f7fc f9a9 	bl	800724c <HAL_GetTick>
 800aefa:	4602      	mov	r2, r0
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	1ad3      	subs	r3, r2, r3
 800af00:	69ba      	ldr	r2, [r7, #24]
 800af02:	429a      	cmp	r2, r3
 800af04:	d302      	bcc.n	800af0c <QSPI_WaitFlagStateUntilTimeout+0x30>
 800af06:	69bb      	ldr	r3, [r7, #24]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d10b      	bne.n	800af24 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2204      	movs	r2, #4
 800af10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af18:	f043 0201 	orr.w	r2, r3, #1
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	e00e      	b.n	800af42 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	689a      	ldr	r2, [r3, #8]
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	4013      	ands	r3, r2
 800af2e:	2b00      	cmp	r3, #0
 800af30:	bf14      	ite	ne
 800af32:	2301      	movne	r3, #1
 800af34:	2300      	moveq	r3, #0
 800af36:	b2db      	uxtb	r3, r3
 800af38:	461a      	mov	r2, r3
 800af3a:	79fb      	ldrb	r3, [r7, #7]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d1d6      	bne.n	800aeee <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
	...

0800af4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b088      	sub	sp, #32
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d102      	bne.n	800af60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800af5a:	2301      	movs	r3, #1
 800af5c:	f000 bc08 	b.w	800b770 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800af60:	4b96      	ldr	r3, [pc, #600]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	f003 030c 	and.w	r3, r3, #12
 800af68:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800af6a:	4b94      	ldr	r3, [pc, #592]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800af6c:	68db      	ldr	r3, [r3, #12]
 800af6e:	f003 0303 	and.w	r3, r3, #3
 800af72:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f003 0310 	and.w	r3, r3, #16
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	f000 80e4 	beq.w	800b14a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800af82:	69bb      	ldr	r3, [r7, #24]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d007      	beq.n	800af98 <HAL_RCC_OscConfig+0x4c>
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	2b0c      	cmp	r3, #12
 800af8c:	f040 808b 	bne.w	800b0a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	2b01      	cmp	r3, #1
 800af94:	f040 8087 	bne.w	800b0a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800af98:	4b88      	ldr	r3, [pc, #544]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f003 0302 	and.w	r3, r3, #2
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d005      	beq.n	800afb0 <HAL_RCC_OscConfig+0x64>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	699b      	ldr	r3, [r3, #24]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d101      	bne.n	800afb0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800afac:	2301      	movs	r3, #1
 800afae:	e3df      	b.n	800b770 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6a1a      	ldr	r2, [r3, #32]
 800afb4:	4b81      	ldr	r3, [pc, #516]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f003 0308 	and.w	r3, r3, #8
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d004      	beq.n	800afca <HAL_RCC_OscConfig+0x7e>
 800afc0:	4b7e      	ldr	r3, [pc, #504]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800afc8:	e005      	b.n	800afd6 <HAL_RCC_OscConfig+0x8a>
 800afca:	4b7c      	ldr	r3, [pc, #496]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800afcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800afd0:	091b      	lsrs	r3, r3, #4
 800afd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d223      	bcs.n	800b022 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6a1b      	ldr	r3, [r3, #32]
 800afde:	4618      	mov	r0, r3
 800afe0:	f000 fd92 	bl	800bb08 <RCC_SetFlashLatencyFromMSIRange>
 800afe4:	4603      	mov	r3, r0
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d001      	beq.n	800afee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800afea:	2301      	movs	r3, #1
 800afec:	e3c0      	b.n	800b770 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800afee:	4b73      	ldr	r3, [pc, #460]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4a72      	ldr	r2, [pc, #456]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800aff4:	f043 0308 	orr.w	r3, r3, #8
 800aff8:	6013      	str	r3, [r2, #0]
 800affa:	4b70      	ldr	r3, [pc, #448]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6a1b      	ldr	r3, [r3, #32]
 800b006:	496d      	ldr	r1, [pc, #436]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b008:	4313      	orrs	r3, r2
 800b00a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b00c:	4b6b      	ldr	r3, [pc, #428]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	69db      	ldr	r3, [r3, #28]
 800b018:	021b      	lsls	r3, r3, #8
 800b01a:	4968      	ldr	r1, [pc, #416]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b01c:	4313      	orrs	r3, r2
 800b01e:	604b      	str	r3, [r1, #4]
 800b020:	e025      	b.n	800b06e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b022:	4b66      	ldr	r3, [pc, #408]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	4a65      	ldr	r2, [pc, #404]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b028:	f043 0308 	orr.w	r3, r3, #8
 800b02c:	6013      	str	r3, [r2, #0]
 800b02e:	4b63      	ldr	r3, [pc, #396]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6a1b      	ldr	r3, [r3, #32]
 800b03a:	4960      	ldr	r1, [pc, #384]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b03c:	4313      	orrs	r3, r2
 800b03e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b040:	4b5e      	ldr	r3, [pc, #376]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	69db      	ldr	r3, [r3, #28]
 800b04c:	021b      	lsls	r3, r3, #8
 800b04e:	495b      	ldr	r1, [pc, #364]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b050:	4313      	orrs	r3, r2
 800b052:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d109      	bne.n	800b06e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6a1b      	ldr	r3, [r3, #32]
 800b05e:	4618      	mov	r0, r3
 800b060:	f000 fd52 	bl	800bb08 <RCC_SetFlashLatencyFromMSIRange>
 800b064:	4603      	mov	r3, r0
 800b066:	2b00      	cmp	r3, #0
 800b068:	d001      	beq.n	800b06e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800b06a:	2301      	movs	r3, #1
 800b06c:	e380      	b.n	800b770 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b06e:	f000 fc87 	bl	800b980 <HAL_RCC_GetSysClockFreq>
 800b072:	4602      	mov	r2, r0
 800b074:	4b51      	ldr	r3, [pc, #324]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	091b      	lsrs	r3, r3, #4
 800b07a:	f003 030f 	and.w	r3, r3, #15
 800b07e:	4950      	ldr	r1, [pc, #320]	; (800b1c0 <HAL_RCC_OscConfig+0x274>)
 800b080:	5ccb      	ldrb	r3, [r1, r3]
 800b082:	f003 031f 	and.w	r3, r3, #31
 800b086:	fa22 f303 	lsr.w	r3, r2, r3
 800b08a:	4a4e      	ldr	r2, [pc, #312]	; (800b1c4 <HAL_RCC_OscConfig+0x278>)
 800b08c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800b08e:	4b4e      	ldr	r3, [pc, #312]	; (800b1c8 <HAL_RCC_OscConfig+0x27c>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4618      	mov	r0, r3
 800b094:	f7fc f88a 	bl	80071ac <HAL_InitTick>
 800b098:	4603      	mov	r3, r0
 800b09a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800b09c:	7bfb      	ldrb	r3, [r7, #15]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d052      	beq.n	800b148 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800b0a2:	7bfb      	ldrb	r3, [r7, #15]
 800b0a4:	e364      	b.n	800b770 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	699b      	ldr	r3, [r3, #24]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d032      	beq.n	800b114 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b0ae:	4b43      	ldr	r3, [pc, #268]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4a42      	ldr	r2, [pc, #264]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b0b4:	f043 0301 	orr.w	r3, r3, #1
 800b0b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b0ba:	f7fc f8c7 	bl	800724c <HAL_GetTick>
 800b0be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b0c0:	e008      	b.n	800b0d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b0c2:	f7fc f8c3 	bl	800724c <HAL_GetTick>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	1ad3      	subs	r3, r2, r3
 800b0cc:	2b02      	cmp	r3, #2
 800b0ce:	d901      	bls.n	800b0d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800b0d0:	2303      	movs	r3, #3
 800b0d2:	e34d      	b.n	800b770 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b0d4:	4b39      	ldr	r3, [pc, #228]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f003 0302 	and.w	r3, r3, #2
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d0f0      	beq.n	800b0c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b0e0:	4b36      	ldr	r3, [pc, #216]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4a35      	ldr	r2, [pc, #212]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b0e6:	f043 0308 	orr.w	r3, r3, #8
 800b0ea:	6013      	str	r3, [r2, #0]
 800b0ec:	4b33      	ldr	r3, [pc, #204]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6a1b      	ldr	r3, [r3, #32]
 800b0f8:	4930      	ldr	r1, [pc, #192]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b0fe:	4b2f      	ldr	r3, [pc, #188]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	69db      	ldr	r3, [r3, #28]
 800b10a:	021b      	lsls	r3, r3, #8
 800b10c:	492b      	ldr	r1, [pc, #172]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b10e:	4313      	orrs	r3, r2
 800b110:	604b      	str	r3, [r1, #4]
 800b112:	e01a      	b.n	800b14a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b114:	4b29      	ldr	r3, [pc, #164]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a28      	ldr	r2, [pc, #160]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b11a:	f023 0301 	bic.w	r3, r3, #1
 800b11e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b120:	f7fc f894 	bl	800724c <HAL_GetTick>
 800b124:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b126:	e008      	b.n	800b13a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b128:	f7fc f890 	bl	800724c <HAL_GetTick>
 800b12c:	4602      	mov	r2, r0
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	1ad3      	subs	r3, r2, r3
 800b132:	2b02      	cmp	r3, #2
 800b134:	d901      	bls.n	800b13a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800b136:	2303      	movs	r3, #3
 800b138:	e31a      	b.n	800b770 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b13a:	4b20      	ldr	r3, [pc, #128]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f003 0302 	and.w	r3, r3, #2
 800b142:	2b00      	cmp	r3, #0
 800b144:	d1f0      	bne.n	800b128 <HAL_RCC_OscConfig+0x1dc>
 800b146:	e000      	b.n	800b14a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b148:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f003 0301 	and.w	r3, r3, #1
 800b152:	2b00      	cmp	r3, #0
 800b154:	d073      	beq.n	800b23e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	2b08      	cmp	r3, #8
 800b15a:	d005      	beq.n	800b168 <HAL_RCC_OscConfig+0x21c>
 800b15c:	69bb      	ldr	r3, [r7, #24]
 800b15e:	2b0c      	cmp	r3, #12
 800b160:	d10e      	bne.n	800b180 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	2b03      	cmp	r3, #3
 800b166:	d10b      	bne.n	800b180 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b168:	4b14      	ldr	r3, [pc, #80]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b170:	2b00      	cmp	r3, #0
 800b172:	d063      	beq.n	800b23c <HAL_RCC_OscConfig+0x2f0>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d15f      	bne.n	800b23c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800b17c:	2301      	movs	r3, #1
 800b17e:	e2f7      	b.n	800b770 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b188:	d106      	bne.n	800b198 <HAL_RCC_OscConfig+0x24c>
 800b18a:	4b0c      	ldr	r3, [pc, #48]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4a0b      	ldr	r2, [pc, #44]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b194:	6013      	str	r3, [r2, #0]
 800b196:	e025      	b.n	800b1e4 <HAL_RCC_OscConfig+0x298>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b1a0:	d114      	bne.n	800b1cc <HAL_RCC_OscConfig+0x280>
 800b1a2:	4b06      	ldr	r3, [pc, #24]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4a05      	ldr	r2, [pc, #20]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b1a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b1ac:	6013      	str	r3, [r2, #0]
 800b1ae:	4b03      	ldr	r3, [pc, #12]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4a02      	ldr	r2, [pc, #8]	; (800b1bc <HAL_RCC_OscConfig+0x270>)
 800b1b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1b8:	6013      	str	r3, [r2, #0]
 800b1ba:	e013      	b.n	800b1e4 <HAL_RCC_OscConfig+0x298>
 800b1bc:	40021000 	.word	0x40021000
 800b1c0:	08014cf8 	.word	0x08014cf8
 800b1c4:	20000194 	.word	0x20000194
 800b1c8:	20000454 	.word	0x20000454
 800b1cc:	4ba0      	ldr	r3, [pc, #640]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a9f      	ldr	r2, [pc, #636]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b1d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1d6:	6013      	str	r3, [r2, #0]
 800b1d8:	4b9d      	ldr	r3, [pc, #628]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	4a9c      	ldr	r2, [pc, #624]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b1de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b1e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d013      	beq.n	800b214 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1ec:	f7fc f82e 	bl	800724c <HAL_GetTick>
 800b1f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b1f2:	e008      	b.n	800b206 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b1f4:	f7fc f82a 	bl	800724c <HAL_GetTick>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	1ad3      	subs	r3, r2, r3
 800b1fe:	2b64      	cmp	r3, #100	; 0x64
 800b200:	d901      	bls.n	800b206 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800b202:	2303      	movs	r3, #3
 800b204:	e2b4      	b.n	800b770 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b206:	4b92      	ldr	r3, [pc, #584]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d0f0      	beq.n	800b1f4 <HAL_RCC_OscConfig+0x2a8>
 800b212:	e014      	b.n	800b23e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b214:	f7fc f81a 	bl	800724c <HAL_GetTick>
 800b218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b21a:	e008      	b.n	800b22e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b21c:	f7fc f816 	bl	800724c <HAL_GetTick>
 800b220:	4602      	mov	r2, r0
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	1ad3      	subs	r3, r2, r3
 800b226:	2b64      	cmp	r3, #100	; 0x64
 800b228:	d901      	bls.n	800b22e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b22a:	2303      	movs	r3, #3
 800b22c:	e2a0      	b.n	800b770 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b22e:	4b88      	ldr	r3, [pc, #544]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b236:	2b00      	cmp	r3, #0
 800b238:	d1f0      	bne.n	800b21c <HAL_RCC_OscConfig+0x2d0>
 800b23a:	e000      	b.n	800b23e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b23c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f003 0302 	and.w	r3, r3, #2
 800b246:	2b00      	cmp	r3, #0
 800b248:	d060      	beq.n	800b30c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	2b04      	cmp	r3, #4
 800b24e:	d005      	beq.n	800b25c <HAL_RCC_OscConfig+0x310>
 800b250:	69bb      	ldr	r3, [r7, #24]
 800b252:	2b0c      	cmp	r3, #12
 800b254:	d119      	bne.n	800b28a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	2b02      	cmp	r3, #2
 800b25a:	d116      	bne.n	800b28a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b25c:	4b7c      	ldr	r3, [pc, #496]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b264:	2b00      	cmp	r3, #0
 800b266:	d005      	beq.n	800b274 <HAL_RCC_OscConfig+0x328>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d101      	bne.n	800b274 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800b270:	2301      	movs	r3, #1
 800b272:	e27d      	b.n	800b770 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b274:	4b76      	ldr	r3, [pc, #472]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	691b      	ldr	r3, [r3, #16]
 800b280:	061b      	lsls	r3, r3, #24
 800b282:	4973      	ldr	r1, [pc, #460]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b284:	4313      	orrs	r3, r2
 800b286:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b288:	e040      	b.n	800b30c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	68db      	ldr	r3, [r3, #12]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d023      	beq.n	800b2da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b292:	4b6f      	ldr	r3, [pc, #444]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4a6e      	ldr	r2, [pc, #440]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b29c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b29e:	f7fb ffd5 	bl	800724c <HAL_GetTick>
 800b2a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b2a4:	e008      	b.n	800b2b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b2a6:	f7fb ffd1 	bl	800724c <HAL_GetTick>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	1ad3      	subs	r3, r2, r3
 800b2b0:	2b02      	cmp	r3, #2
 800b2b2:	d901      	bls.n	800b2b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800b2b4:	2303      	movs	r3, #3
 800b2b6:	e25b      	b.n	800b770 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b2b8:	4b65      	ldr	r3, [pc, #404]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d0f0      	beq.n	800b2a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b2c4:	4b62      	ldr	r3, [pc, #392]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	691b      	ldr	r3, [r3, #16]
 800b2d0:	061b      	lsls	r3, r3, #24
 800b2d2:	495f      	ldr	r1, [pc, #380]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	604b      	str	r3, [r1, #4]
 800b2d8:	e018      	b.n	800b30c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b2da:	4b5d      	ldr	r3, [pc, #372]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4a5c      	ldr	r2, [pc, #368]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b2e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2e6:	f7fb ffb1 	bl	800724c <HAL_GetTick>
 800b2ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b2ec:	e008      	b.n	800b300 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b2ee:	f7fb ffad 	bl	800724c <HAL_GetTick>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	1ad3      	subs	r3, r2, r3
 800b2f8:	2b02      	cmp	r3, #2
 800b2fa:	d901      	bls.n	800b300 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800b2fc:	2303      	movs	r3, #3
 800b2fe:	e237      	b.n	800b770 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b300:	4b53      	ldr	r3, [pc, #332]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d1f0      	bne.n	800b2ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f003 0308 	and.w	r3, r3, #8
 800b314:	2b00      	cmp	r3, #0
 800b316:	d03c      	beq.n	800b392 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	695b      	ldr	r3, [r3, #20]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d01c      	beq.n	800b35a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b320:	4b4b      	ldr	r3, [pc, #300]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b326:	4a4a      	ldr	r2, [pc, #296]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b328:	f043 0301 	orr.w	r3, r3, #1
 800b32c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b330:	f7fb ff8c 	bl	800724c <HAL_GetTick>
 800b334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b336:	e008      	b.n	800b34a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b338:	f7fb ff88 	bl	800724c <HAL_GetTick>
 800b33c:	4602      	mov	r2, r0
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	1ad3      	subs	r3, r2, r3
 800b342:	2b02      	cmp	r3, #2
 800b344:	d901      	bls.n	800b34a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800b346:	2303      	movs	r3, #3
 800b348:	e212      	b.n	800b770 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b34a:	4b41      	ldr	r3, [pc, #260]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b34c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b350:	f003 0302 	and.w	r3, r3, #2
 800b354:	2b00      	cmp	r3, #0
 800b356:	d0ef      	beq.n	800b338 <HAL_RCC_OscConfig+0x3ec>
 800b358:	e01b      	b.n	800b392 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b35a:	4b3d      	ldr	r3, [pc, #244]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b35c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b360:	4a3b      	ldr	r2, [pc, #236]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b362:	f023 0301 	bic.w	r3, r3, #1
 800b366:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b36a:	f7fb ff6f 	bl	800724c <HAL_GetTick>
 800b36e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b370:	e008      	b.n	800b384 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b372:	f7fb ff6b 	bl	800724c <HAL_GetTick>
 800b376:	4602      	mov	r2, r0
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	1ad3      	subs	r3, r2, r3
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	d901      	bls.n	800b384 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800b380:	2303      	movs	r3, #3
 800b382:	e1f5      	b.n	800b770 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b384:	4b32      	ldr	r3, [pc, #200]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b38a:	f003 0302 	and.w	r3, r3, #2
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d1ef      	bne.n	800b372 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f003 0304 	and.w	r3, r3, #4
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	f000 80a6 	beq.w	800b4ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800b3a4:	4b2a      	ldr	r3, [pc, #168]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b3a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d10d      	bne.n	800b3cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b3b0:	4b27      	ldr	r3, [pc, #156]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b3b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3b4:	4a26      	ldr	r2, [pc, #152]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b3b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3ba:	6593      	str	r3, [r2, #88]	; 0x58
 800b3bc:	4b24      	ldr	r3, [pc, #144]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b3be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3c4:	60bb      	str	r3, [r7, #8]
 800b3c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b3cc:	4b21      	ldr	r3, [pc, #132]	; (800b454 <HAL_RCC_OscConfig+0x508>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d118      	bne.n	800b40a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b3d8:	4b1e      	ldr	r3, [pc, #120]	; (800b454 <HAL_RCC_OscConfig+0x508>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a1d      	ldr	r2, [pc, #116]	; (800b454 <HAL_RCC_OscConfig+0x508>)
 800b3de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b3e4:	f7fb ff32 	bl	800724c <HAL_GetTick>
 800b3e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b3ea:	e008      	b.n	800b3fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b3ec:	f7fb ff2e 	bl	800724c <HAL_GetTick>
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	1ad3      	subs	r3, r2, r3
 800b3f6:	2b02      	cmp	r3, #2
 800b3f8:	d901      	bls.n	800b3fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800b3fa:	2303      	movs	r3, #3
 800b3fc:	e1b8      	b.n	800b770 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b3fe:	4b15      	ldr	r3, [pc, #84]	; (800b454 <HAL_RCC_OscConfig+0x508>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b406:	2b00      	cmp	r3, #0
 800b408:	d0f0      	beq.n	800b3ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d108      	bne.n	800b424 <HAL_RCC_OscConfig+0x4d8>
 800b412:	4b0f      	ldr	r3, [pc, #60]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b418:	4a0d      	ldr	r2, [pc, #52]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b41a:	f043 0301 	orr.w	r3, r3, #1
 800b41e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b422:	e029      	b.n	800b478 <HAL_RCC_OscConfig+0x52c>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	689b      	ldr	r3, [r3, #8]
 800b428:	2b05      	cmp	r3, #5
 800b42a:	d115      	bne.n	800b458 <HAL_RCC_OscConfig+0x50c>
 800b42c:	4b08      	ldr	r3, [pc, #32]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b42e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b432:	4a07      	ldr	r2, [pc, #28]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b434:	f043 0304 	orr.w	r3, r3, #4
 800b438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b43c:	4b04      	ldr	r3, [pc, #16]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b43e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b442:	4a03      	ldr	r2, [pc, #12]	; (800b450 <HAL_RCC_OscConfig+0x504>)
 800b444:	f043 0301 	orr.w	r3, r3, #1
 800b448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b44c:	e014      	b.n	800b478 <HAL_RCC_OscConfig+0x52c>
 800b44e:	bf00      	nop
 800b450:	40021000 	.word	0x40021000
 800b454:	40007000 	.word	0x40007000
 800b458:	4b9d      	ldr	r3, [pc, #628]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b45a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b45e:	4a9c      	ldr	r2, [pc, #624]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b460:	f023 0301 	bic.w	r3, r3, #1
 800b464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b468:	4b99      	ldr	r3, [pc, #612]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b46a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b46e:	4a98      	ldr	r2, [pc, #608]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b470:	f023 0304 	bic.w	r3, r3, #4
 800b474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d016      	beq.n	800b4ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b480:	f7fb fee4 	bl	800724c <HAL_GetTick>
 800b484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b486:	e00a      	b.n	800b49e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b488:	f7fb fee0 	bl	800724c <HAL_GetTick>
 800b48c:	4602      	mov	r2, r0
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	1ad3      	subs	r3, r2, r3
 800b492:	f241 3288 	movw	r2, #5000	; 0x1388
 800b496:	4293      	cmp	r3, r2
 800b498:	d901      	bls.n	800b49e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800b49a:	2303      	movs	r3, #3
 800b49c:	e168      	b.n	800b770 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b49e:	4b8c      	ldr	r3, [pc, #560]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b4a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4a4:	f003 0302 	and.w	r3, r3, #2
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d0ed      	beq.n	800b488 <HAL_RCC_OscConfig+0x53c>
 800b4ac:	e015      	b.n	800b4da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4ae:	f7fb fecd 	bl	800724c <HAL_GetTick>
 800b4b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b4b4:	e00a      	b.n	800b4cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b4b6:	f7fb fec9 	bl	800724c <HAL_GetTick>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	1ad3      	subs	r3, r2, r3
 800b4c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d901      	bls.n	800b4cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800b4c8:	2303      	movs	r3, #3
 800b4ca:	e151      	b.n	800b770 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b4cc:	4b80      	ldr	r3, [pc, #512]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b4ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4d2:	f003 0302 	and.w	r3, r3, #2
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d1ed      	bne.n	800b4b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b4da:	7ffb      	ldrb	r3, [r7, #31]
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d105      	bne.n	800b4ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b4e0:	4b7b      	ldr	r3, [pc, #492]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b4e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4e4:	4a7a      	ldr	r2, [pc, #488]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b4e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f003 0320 	and.w	r3, r3, #32
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d03c      	beq.n	800b572 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d01c      	beq.n	800b53a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b500:	4b73      	ldr	r3, [pc, #460]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b502:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b506:	4a72      	ldr	r2, [pc, #456]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b508:	f043 0301 	orr.w	r3, r3, #1
 800b50c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b510:	f7fb fe9c 	bl	800724c <HAL_GetTick>
 800b514:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b516:	e008      	b.n	800b52a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b518:	f7fb fe98 	bl	800724c <HAL_GetTick>
 800b51c:	4602      	mov	r2, r0
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	1ad3      	subs	r3, r2, r3
 800b522:	2b02      	cmp	r3, #2
 800b524:	d901      	bls.n	800b52a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800b526:	2303      	movs	r3, #3
 800b528:	e122      	b.n	800b770 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b52a:	4b69      	ldr	r3, [pc, #420]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b52c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b530:	f003 0302 	and.w	r3, r3, #2
 800b534:	2b00      	cmp	r3, #0
 800b536:	d0ef      	beq.n	800b518 <HAL_RCC_OscConfig+0x5cc>
 800b538:	e01b      	b.n	800b572 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b53a:	4b65      	ldr	r3, [pc, #404]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b53c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b540:	4a63      	ldr	r2, [pc, #396]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b542:	f023 0301 	bic.w	r3, r3, #1
 800b546:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b54a:	f7fb fe7f 	bl	800724c <HAL_GetTick>
 800b54e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b550:	e008      	b.n	800b564 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b552:	f7fb fe7b 	bl	800724c <HAL_GetTick>
 800b556:	4602      	mov	r2, r0
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	1ad3      	subs	r3, r2, r3
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	d901      	bls.n	800b564 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800b560:	2303      	movs	r3, #3
 800b562:	e105      	b.n	800b770 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b564:	4b5a      	ldr	r3, [pc, #360]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b566:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b56a:	f003 0302 	and.w	r3, r3, #2
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d1ef      	bne.n	800b552 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b576:	2b00      	cmp	r3, #0
 800b578:	f000 80f9 	beq.w	800b76e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b580:	2b02      	cmp	r3, #2
 800b582:	f040 80cf 	bne.w	800b724 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800b586:	4b52      	ldr	r3, [pc, #328]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b588:	68db      	ldr	r3, [r3, #12]
 800b58a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	f003 0203 	and.w	r2, r3, #3
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b596:	429a      	cmp	r2, r3
 800b598:	d12c      	bne.n	800b5f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5a4:	3b01      	subs	r3, #1
 800b5a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d123      	bne.n	800b5f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d11b      	bne.n	800b5f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d113      	bne.n	800b5f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5d6:	085b      	lsrs	r3, r3, #1
 800b5d8:	3b01      	subs	r3, #1
 800b5da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d109      	bne.n	800b5f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ea:	085b      	lsrs	r3, r3, #1
 800b5ec:	3b01      	subs	r3, #1
 800b5ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d071      	beq.n	800b6d8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b5f4:	69bb      	ldr	r3, [r7, #24]
 800b5f6:	2b0c      	cmp	r3, #12
 800b5f8:	d068      	beq.n	800b6cc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b5fa:	4b35      	ldr	r3, [pc, #212]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b602:	2b00      	cmp	r3, #0
 800b604:	d105      	bne.n	800b612 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800b606:	4b32      	ldr	r3, [pc, #200]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d001      	beq.n	800b616 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800b612:	2301      	movs	r3, #1
 800b614:	e0ac      	b.n	800b770 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b616:	4b2e      	ldr	r3, [pc, #184]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a2d      	ldr	r2, [pc, #180]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b61c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b620:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b622:	f7fb fe13 	bl	800724c <HAL_GetTick>
 800b626:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b628:	e008      	b.n	800b63c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b62a:	f7fb fe0f 	bl	800724c <HAL_GetTick>
 800b62e:	4602      	mov	r2, r0
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	1ad3      	subs	r3, r2, r3
 800b634:	2b02      	cmp	r3, #2
 800b636:	d901      	bls.n	800b63c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800b638:	2303      	movs	r3, #3
 800b63a:	e099      	b.n	800b770 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b63c:	4b24      	ldr	r3, [pc, #144]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b644:	2b00      	cmp	r3, #0
 800b646:	d1f0      	bne.n	800b62a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b648:	4b21      	ldr	r3, [pc, #132]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b64a:	68da      	ldr	r2, [r3, #12]
 800b64c:	4b21      	ldr	r3, [pc, #132]	; (800b6d4 <HAL_RCC_OscConfig+0x788>)
 800b64e:	4013      	ands	r3, r2
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b658:	3a01      	subs	r2, #1
 800b65a:	0112      	lsls	r2, r2, #4
 800b65c:	4311      	orrs	r1, r2
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b662:	0212      	lsls	r2, r2, #8
 800b664:	4311      	orrs	r1, r2
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b66a:	0852      	lsrs	r2, r2, #1
 800b66c:	3a01      	subs	r2, #1
 800b66e:	0552      	lsls	r2, r2, #21
 800b670:	4311      	orrs	r1, r2
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b676:	0852      	lsrs	r2, r2, #1
 800b678:	3a01      	subs	r2, #1
 800b67a:	0652      	lsls	r2, r2, #25
 800b67c:	4311      	orrs	r1, r2
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b682:	06d2      	lsls	r2, r2, #27
 800b684:	430a      	orrs	r2, r1
 800b686:	4912      	ldr	r1, [pc, #72]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b688:	4313      	orrs	r3, r2
 800b68a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b68c:	4b10      	ldr	r3, [pc, #64]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a0f      	ldr	r2, [pc, #60]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b696:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b698:	4b0d      	ldr	r3, [pc, #52]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	4a0c      	ldr	r2, [pc, #48]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b69e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b6a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b6a4:	f7fb fdd2 	bl	800724c <HAL_GetTick>
 800b6a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b6aa:	e008      	b.n	800b6be <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b6ac:	f7fb fdce 	bl	800724c <HAL_GetTick>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	1ad3      	subs	r3, r2, r3
 800b6b6:	2b02      	cmp	r3, #2
 800b6b8:	d901      	bls.n	800b6be <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800b6ba:	2303      	movs	r3, #3
 800b6bc:	e058      	b.n	800b770 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b6be:	4b04      	ldr	r3, [pc, #16]	; (800b6d0 <HAL_RCC_OscConfig+0x784>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d0f0      	beq.n	800b6ac <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b6ca:	e050      	b.n	800b76e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	e04f      	b.n	800b770 <HAL_RCC_OscConfig+0x824>
 800b6d0:	40021000 	.word	0x40021000
 800b6d4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b6d8:	4b27      	ldr	r3, [pc, #156]	; (800b778 <HAL_RCC_OscConfig+0x82c>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d144      	bne.n	800b76e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b6e4:	4b24      	ldr	r3, [pc, #144]	; (800b778 <HAL_RCC_OscConfig+0x82c>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a23      	ldr	r2, [pc, #140]	; (800b778 <HAL_RCC_OscConfig+0x82c>)
 800b6ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b6ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b6f0:	4b21      	ldr	r3, [pc, #132]	; (800b778 <HAL_RCC_OscConfig+0x82c>)
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	4a20      	ldr	r2, [pc, #128]	; (800b778 <HAL_RCC_OscConfig+0x82c>)
 800b6f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b6fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b6fc:	f7fb fda6 	bl	800724c <HAL_GetTick>
 800b700:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b702:	e008      	b.n	800b716 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b704:	f7fb fda2 	bl	800724c <HAL_GetTick>
 800b708:	4602      	mov	r2, r0
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	1ad3      	subs	r3, r2, r3
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d901      	bls.n	800b716 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800b712:	2303      	movs	r3, #3
 800b714:	e02c      	b.n	800b770 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b716:	4b18      	ldr	r3, [pc, #96]	; (800b778 <HAL_RCC_OscConfig+0x82c>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d0f0      	beq.n	800b704 <HAL_RCC_OscConfig+0x7b8>
 800b722:	e024      	b.n	800b76e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b724:	69bb      	ldr	r3, [r7, #24]
 800b726:	2b0c      	cmp	r3, #12
 800b728:	d01f      	beq.n	800b76a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b72a:	4b13      	ldr	r3, [pc, #76]	; (800b778 <HAL_RCC_OscConfig+0x82c>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4a12      	ldr	r2, [pc, #72]	; (800b778 <HAL_RCC_OscConfig+0x82c>)
 800b730:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b736:	f7fb fd89 	bl	800724c <HAL_GetTick>
 800b73a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b73c:	e008      	b.n	800b750 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b73e:	f7fb fd85 	bl	800724c <HAL_GetTick>
 800b742:	4602      	mov	r2, r0
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	1ad3      	subs	r3, r2, r3
 800b748:	2b02      	cmp	r3, #2
 800b74a:	d901      	bls.n	800b750 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800b74c:	2303      	movs	r3, #3
 800b74e:	e00f      	b.n	800b770 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b750:	4b09      	ldr	r3, [pc, #36]	; (800b778 <HAL_RCC_OscConfig+0x82c>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d1f0      	bne.n	800b73e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800b75c:	4b06      	ldr	r3, [pc, #24]	; (800b778 <HAL_RCC_OscConfig+0x82c>)
 800b75e:	68da      	ldr	r2, [r3, #12]
 800b760:	4905      	ldr	r1, [pc, #20]	; (800b778 <HAL_RCC_OscConfig+0x82c>)
 800b762:	4b06      	ldr	r3, [pc, #24]	; (800b77c <HAL_RCC_OscConfig+0x830>)
 800b764:	4013      	ands	r3, r2
 800b766:	60cb      	str	r3, [r1, #12]
 800b768:	e001      	b.n	800b76e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b76a:	2301      	movs	r3, #1
 800b76c:	e000      	b.n	800b770 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800b76e:	2300      	movs	r3, #0
}
 800b770:	4618      	mov	r0, r3
 800b772:	3720      	adds	r7, #32
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}
 800b778:	40021000 	.word	0x40021000
 800b77c:	feeefffc 	.word	0xfeeefffc

0800b780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d101      	bne.n	800b794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b790:	2301      	movs	r3, #1
 800b792:	e0e7      	b.n	800b964 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b794:	4b75      	ldr	r3, [pc, #468]	; (800b96c <HAL_RCC_ClockConfig+0x1ec>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f003 0307 	and.w	r3, r3, #7
 800b79c:	683a      	ldr	r2, [r7, #0]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d910      	bls.n	800b7c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b7a2:	4b72      	ldr	r3, [pc, #456]	; (800b96c <HAL_RCC_ClockConfig+0x1ec>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f023 0207 	bic.w	r2, r3, #7
 800b7aa:	4970      	ldr	r1, [pc, #448]	; (800b96c <HAL_RCC_ClockConfig+0x1ec>)
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b7b2:	4b6e      	ldr	r3, [pc, #440]	; (800b96c <HAL_RCC_ClockConfig+0x1ec>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f003 0307 	and.w	r3, r3, #7
 800b7ba:	683a      	ldr	r2, [r7, #0]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d001      	beq.n	800b7c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e0cf      	b.n	800b964 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f003 0302 	and.w	r3, r3, #2
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d010      	beq.n	800b7f2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	689a      	ldr	r2, [r3, #8]
 800b7d4:	4b66      	ldr	r3, [pc, #408]	; (800b970 <HAL_RCC_ClockConfig+0x1f0>)
 800b7d6:	689b      	ldr	r3, [r3, #8]
 800b7d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d908      	bls.n	800b7f2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b7e0:	4b63      	ldr	r3, [pc, #396]	; (800b970 <HAL_RCC_ClockConfig+0x1f0>)
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	4960      	ldr	r1, [pc, #384]	; (800b970 <HAL_RCC_ClockConfig+0x1f0>)
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f003 0301 	and.w	r3, r3, #1
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d04c      	beq.n	800b898 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	2b03      	cmp	r3, #3
 800b804:	d107      	bne.n	800b816 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b806:	4b5a      	ldr	r3, [pc, #360]	; (800b970 <HAL_RCC_ClockConfig+0x1f0>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d121      	bne.n	800b856 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800b812:	2301      	movs	r3, #1
 800b814:	e0a6      	b.n	800b964 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	2b02      	cmp	r3, #2
 800b81c:	d107      	bne.n	800b82e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b81e:	4b54      	ldr	r3, [pc, #336]	; (800b970 <HAL_RCC_ClockConfig+0x1f0>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b826:	2b00      	cmp	r3, #0
 800b828:	d115      	bne.n	800b856 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b82a:	2301      	movs	r3, #1
 800b82c:	e09a      	b.n	800b964 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d107      	bne.n	800b846 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b836:	4b4e      	ldr	r3, [pc, #312]	; (800b970 <HAL_RCC_ClockConfig+0x1f0>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f003 0302 	and.w	r3, r3, #2
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d109      	bne.n	800b856 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b842:	2301      	movs	r3, #1
 800b844:	e08e      	b.n	800b964 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b846:	4b4a      	ldr	r3, [pc, #296]	; (800b970 <HAL_RCC_ClockConfig+0x1f0>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d101      	bne.n	800b856 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b852:	2301      	movs	r3, #1
 800b854:	e086      	b.n	800b964 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b856:	4b46      	ldr	r3, [pc, #280]	; (800b970 <HAL_RCC_ClockConfig+0x1f0>)
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	f023 0203 	bic.w	r2, r3, #3
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	4943      	ldr	r1, [pc, #268]	; (800b970 <HAL_RCC_ClockConfig+0x1f0>)
 800b864:	4313      	orrs	r3, r2
 800b866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b868:	f7fb fcf0 	bl	800724c <HAL_GetTick>
 800b86c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b86e:	e00a      	b.n	800b886 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b870:	f7fb fcec 	bl	800724c <HAL_GetTick>
 800b874:	4602      	mov	r2, r0
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	1ad3      	subs	r3, r2, r3
 800b87a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b87e:	4293      	cmp	r3, r2
 800b880:	d901      	bls.n	800b886 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800b882:	2303      	movs	r3, #3
 800b884:	e06e      	b.n	800b964 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b886:	4b3a      	ldr	r3, [pc, #232]	; (800b970 <HAL_RCC_ClockConfig+0x1f0>)
 800b888:	689b      	ldr	r3, [r3, #8]
 800b88a:	f003 020c 	and.w	r2, r3, #12
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	009b      	lsls	r3, r3, #2
 800b894:	429a      	cmp	r2, r3
 800b896:	d1eb      	bne.n	800b870 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f003 0302 	and.w	r3, r3, #2
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d010      	beq.n	800b8c6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	689a      	ldr	r2, [r3, #8]
 800b8a8:	4b31      	ldr	r3, [pc, #196]	; (800b970 <HAL_RCC_ClockConfig+0x1f0>)
 800b8aa:	689b      	ldr	r3, [r3, #8]
 800b8ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d208      	bcs.n	800b8c6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b8b4:	4b2e      	ldr	r3, [pc, #184]	; (800b970 <HAL_RCC_ClockConfig+0x1f0>)
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	689b      	ldr	r3, [r3, #8]
 800b8c0:	492b      	ldr	r1, [pc, #172]	; (800b970 <HAL_RCC_ClockConfig+0x1f0>)
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b8c6:	4b29      	ldr	r3, [pc, #164]	; (800b96c <HAL_RCC_ClockConfig+0x1ec>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f003 0307 	and.w	r3, r3, #7
 800b8ce:	683a      	ldr	r2, [r7, #0]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d210      	bcs.n	800b8f6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b8d4:	4b25      	ldr	r3, [pc, #148]	; (800b96c <HAL_RCC_ClockConfig+0x1ec>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f023 0207 	bic.w	r2, r3, #7
 800b8dc:	4923      	ldr	r1, [pc, #140]	; (800b96c <HAL_RCC_ClockConfig+0x1ec>)
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b8e4:	4b21      	ldr	r3, [pc, #132]	; (800b96c <HAL_RCC_ClockConfig+0x1ec>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f003 0307 	and.w	r3, r3, #7
 800b8ec:	683a      	ldr	r2, [r7, #0]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d001      	beq.n	800b8f6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	e036      	b.n	800b964 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f003 0304 	and.w	r3, r3, #4
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d008      	beq.n	800b914 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b902:	4b1b      	ldr	r3, [pc, #108]	; (800b970 <HAL_RCC_ClockConfig+0x1f0>)
 800b904:	689b      	ldr	r3, [r3, #8]
 800b906:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	4918      	ldr	r1, [pc, #96]	; (800b970 <HAL_RCC_ClockConfig+0x1f0>)
 800b910:	4313      	orrs	r3, r2
 800b912:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f003 0308 	and.w	r3, r3, #8
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d009      	beq.n	800b934 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b920:	4b13      	ldr	r3, [pc, #76]	; (800b970 <HAL_RCC_ClockConfig+0x1f0>)
 800b922:	689b      	ldr	r3, [r3, #8]
 800b924:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	691b      	ldr	r3, [r3, #16]
 800b92c:	00db      	lsls	r3, r3, #3
 800b92e:	4910      	ldr	r1, [pc, #64]	; (800b970 <HAL_RCC_ClockConfig+0x1f0>)
 800b930:	4313      	orrs	r3, r2
 800b932:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b934:	f000 f824 	bl	800b980 <HAL_RCC_GetSysClockFreq>
 800b938:	4602      	mov	r2, r0
 800b93a:	4b0d      	ldr	r3, [pc, #52]	; (800b970 <HAL_RCC_ClockConfig+0x1f0>)
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	091b      	lsrs	r3, r3, #4
 800b940:	f003 030f 	and.w	r3, r3, #15
 800b944:	490b      	ldr	r1, [pc, #44]	; (800b974 <HAL_RCC_ClockConfig+0x1f4>)
 800b946:	5ccb      	ldrb	r3, [r1, r3]
 800b948:	f003 031f 	and.w	r3, r3, #31
 800b94c:	fa22 f303 	lsr.w	r3, r2, r3
 800b950:	4a09      	ldr	r2, [pc, #36]	; (800b978 <HAL_RCC_ClockConfig+0x1f8>)
 800b952:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b954:	4b09      	ldr	r3, [pc, #36]	; (800b97c <HAL_RCC_ClockConfig+0x1fc>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4618      	mov	r0, r3
 800b95a:	f7fb fc27 	bl	80071ac <HAL_InitTick>
 800b95e:	4603      	mov	r3, r0
 800b960:	72fb      	strb	r3, [r7, #11]

  return status;
 800b962:	7afb      	ldrb	r3, [r7, #11]
}
 800b964:	4618      	mov	r0, r3
 800b966:	3710      	adds	r7, #16
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	40022000 	.word	0x40022000
 800b970:	40021000 	.word	0x40021000
 800b974:	08014cf8 	.word	0x08014cf8
 800b978:	20000194 	.word	0x20000194
 800b97c:	20000454 	.word	0x20000454

0800b980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b980:	b480      	push	{r7}
 800b982:	b089      	sub	sp, #36	; 0x24
 800b984:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800b986:	2300      	movs	r3, #0
 800b988:	61fb      	str	r3, [r7, #28]
 800b98a:	2300      	movs	r3, #0
 800b98c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b98e:	4b3e      	ldr	r3, [pc, #248]	; (800ba88 <HAL_RCC_GetSysClockFreq+0x108>)
 800b990:	689b      	ldr	r3, [r3, #8]
 800b992:	f003 030c 	and.w	r3, r3, #12
 800b996:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b998:	4b3b      	ldr	r3, [pc, #236]	; (800ba88 <HAL_RCC_GetSysClockFreq+0x108>)
 800b99a:	68db      	ldr	r3, [r3, #12]
 800b99c:	f003 0303 	and.w	r3, r3, #3
 800b9a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d005      	beq.n	800b9b4 <HAL_RCC_GetSysClockFreq+0x34>
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	2b0c      	cmp	r3, #12
 800b9ac:	d121      	bne.n	800b9f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d11e      	bne.n	800b9f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b9b4:	4b34      	ldr	r3, [pc, #208]	; (800ba88 <HAL_RCC_GetSysClockFreq+0x108>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f003 0308 	and.w	r3, r3, #8
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d107      	bne.n	800b9d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b9c0:	4b31      	ldr	r3, [pc, #196]	; (800ba88 <HAL_RCC_GetSysClockFreq+0x108>)
 800b9c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b9c6:	0a1b      	lsrs	r3, r3, #8
 800b9c8:	f003 030f 	and.w	r3, r3, #15
 800b9cc:	61fb      	str	r3, [r7, #28]
 800b9ce:	e005      	b.n	800b9dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b9d0:	4b2d      	ldr	r3, [pc, #180]	; (800ba88 <HAL_RCC_GetSysClockFreq+0x108>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	091b      	lsrs	r3, r3, #4
 800b9d6:	f003 030f 	and.w	r3, r3, #15
 800b9da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b9dc:	4a2b      	ldr	r2, [pc, #172]	; (800ba8c <HAL_RCC_GetSysClockFreq+0x10c>)
 800b9de:	69fb      	ldr	r3, [r7, #28]
 800b9e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d10d      	bne.n	800ba08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b9f0:	e00a      	b.n	800ba08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	2b04      	cmp	r3, #4
 800b9f6:	d102      	bne.n	800b9fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b9f8:	4b25      	ldr	r3, [pc, #148]	; (800ba90 <HAL_RCC_GetSysClockFreq+0x110>)
 800b9fa:	61bb      	str	r3, [r7, #24]
 800b9fc:	e004      	b.n	800ba08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	2b08      	cmp	r3, #8
 800ba02:	d101      	bne.n	800ba08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ba04:	4b23      	ldr	r3, [pc, #140]	; (800ba94 <HAL_RCC_GetSysClockFreq+0x114>)
 800ba06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	2b0c      	cmp	r3, #12
 800ba0c:	d134      	bne.n	800ba78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ba0e:	4b1e      	ldr	r3, [pc, #120]	; (800ba88 <HAL_RCC_GetSysClockFreq+0x108>)
 800ba10:	68db      	ldr	r3, [r3, #12]
 800ba12:	f003 0303 	and.w	r3, r3, #3
 800ba16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	2b02      	cmp	r3, #2
 800ba1c:	d003      	beq.n	800ba26 <HAL_RCC_GetSysClockFreq+0xa6>
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	2b03      	cmp	r3, #3
 800ba22:	d003      	beq.n	800ba2c <HAL_RCC_GetSysClockFreq+0xac>
 800ba24:	e005      	b.n	800ba32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800ba26:	4b1a      	ldr	r3, [pc, #104]	; (800ba90 <HAL_RCC_GetSysClockFreq+0x110>)
 800ba28:	617b      	str	r3, [r7, #20]
      break;
 800ba2a:	e005      	b.n	800ba38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800ba2c:	4b19      	ldr	r3, [pc, #100]	; (800ba94 <HAL_RCC_GetSysClockFreq+0x114>)
 800ba2e:	617b      	str	r3, [r7, #20]
      break;
 800ba30:	e002      	b.n	800ba38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800ba32:	69fb      	ldr	r3, [r7, #28]
 800ba34:	617b      	str	r3, [r7, #20]
      break;
 800ba36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ba38:	4b13      	ldr	r3, [pc, #76]	; (800ba88 <HAL_RCC_GetSysClockFreq+0x108>)
 800ba3a:	68db      	ldr	r3, [r3, #12]
 800ba3c:	091b      	lsrs	r3, r3, #4
 800ba3e:	f003 0307 	and.w	r3, r3, #7
 800ba42:	3301      	adds	r3, #1
 800ba44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ba46:	4b10      	ldr	r3, [pc, #64]	; (800ba88 <HAL_RCC_GetSysClockFreq+0x108>)
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	0a1b      	lsrs	r3, r3, #8
 800ba4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba50:	697a      	ldr	r2, [r7, #20]
 800ba52:	fb03 f202 	mul.w	r2, r3, r2
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ba5e:	4b0a      	ldr	r3, [pc, #40]	; (800ba88 <HAL_RCC_GetSysClockFreq+0x108>)
 800ba60:	68db      	ldr	r3, [r3, #12]
 800ba62:	0e5b      	lsrs	r3, r3, #25
 800ba64:	f003 0303 	and.w	r3, r3, #3
 800ba68:	3301      	adds	r3, #1
 800ba6a:	005b      	lsls	r3, r3, #1
 800ba6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800ba6e:	697a      	ldr	r2, [r7, #20]
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800ba78:	69bb      	ldr	r3, [r7, #24]
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3724      	adds	r7, #36	; 0x24
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop
 800ba88:	40021000 	.word	0x40021000
 800ba8c:	08014d10 	.word	0x08014d10
 800ba90:	00f42400 	.word	0x00f42400
 800ba94:	007a1200 	.word	0x007a1200

0800ba98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ba9c:	4b03      	ldr	r3, [pc, #12]	; (800baac <HAL_RCC_GetHCLKFreq+0x14>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	46bd      	mov	sp, r7
 800baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa8:	4770      	bx	lr
 800baaa:	bf00      	nop
 800baac:	20000194 	.word	0x20000194

0800bab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800bab4:	f7ff fff0 	bl	800ba98 <HAL_RCC_GetHCLKFreq>
 800bab8:	4602      	mov	r2, r0
 800baba:	4b06      	ldr	r3, [pc, #24]	; (800bad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800babc:	689b      	ldr	r3, [r3, #8]
 800babe:	0a1b      	lsrs	r3, r3, #8
 800bac0:	f003 0307 	and.w	r3, r3, #7
 800bac4:	4904      	ldr	r1, [pc, #16]	; (800bad8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bac6:	5ccb      	ldrb	r3, [r1, r3]
 800bac8:	f003 031f 	and.w	r3, r3, #31
 800bacc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	40021000 	.word	0x40021000
 800bad8:	08014d08 	.word	0x08014d08

0800badc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800bae0:	f7ff ffda 	bl	800ba98 <HAL_RCC_GetHCLKFreq>
 800bae4:	4602      	mov	r2, r0
 800bae6:	4b06      	ldr	r3, [pc, #24]	; (800bb00 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bae8:	689b      	ldr	r3, [r3, #8]
 800baea:	0adb      	lsrs	r3, r3, #11
 800baec:	f003 0307 	and.w	r3, r3, #7
 800baf0:	4904      	ldr	r1, [pc, #16]	; (800bb04 <HAL_RCC_GetPCLK2Freq+0x28>)
 800baf2:	5ccb      	ldrb	r3, [r1, r3]
 800baf4:	f003 031f 	and.w	r3, r3, #31
 800baf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	40021000 	.word	0x40021000
 800bb04:	08014d08 	.word	0x08014d08

0800bb08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b086      	sub	sp, #24
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800bb10:	2300      	movs	r3, #0
 800bb12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800bb14:	4b2a      	ldr	r3, [pc, #168]	; (800bbc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bb16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d003      	beq.n	800bb28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800bb20:	f7ff f8ce 	bl	800acc0 <HAL_PWREx_GetVoltageRange>
 800bb24:	6178      	str	r0, [r7, #20]
 800bb26:	e014      	b.n	800bb52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800bb28:	4b25      	ldr	r3, [pc, #148]	; (800bbc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bb2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb2c:	4a24      	ldr	r2, [pc, #144]	; (800bbc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bb2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb32:	6593      	str	r3, [r2, #88]	; 0x58
 800bb34:	4b22      	ldr	r3, [pc, #136]	; (800bbc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bb36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb3c:	60fb      	str	r3, [r7, #12]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800bb40:	f7ff f8be 	bl	800acc0 <HAL_PWREx_GetVoltageRange>
 800bb44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800bb46:	4b1e      	ldr	r3, [pc, #120]	; (800bbc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bb48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb4a:	4a1d      	ldr	r2, [pc, #116]	; (800bbc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bb4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb58:	d10b      	bne.n	800bb72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2b80      	cmp	r3, #128	; 0x80
 800bb5e:	d919      	bls.n	800bb94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2ba0      	cmp	r3, #160	; 0xa0
 800bb64:	d902      	bls.n	800bb6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800bb66:	2302      	movs	r3, #2
 800bb68:	613b      	str	r3, [r7, #16]
 800bb6a:	e013      	b.n	800bb94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	613b      	str	r3, [r7, #16]
 800bb70:	e010      	b.n	800bb94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2b80      	cmp	r3, #128	; 0x80
 800bb76:	d902      	bls.n	800bb7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800bb78:	2303      	movs	r3, #3
 800bb7a:	613b      	str	r3, [r7, #16]
 800bb7c:	e00a      	b.n	800bb94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2b80      	cmp	r3, #128	; 0x80
 800bb82:	d102      	bne.n	800bb8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800bb84:	2302      	movs	r3, #2
 800bb86:	613b      	str	r3, [r7, #16]
 800bb88:	e004      	b.n	800bb94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2b70      	cmp	r3, #112	; 0x70
 800bb8e:	d101      	bne.n	800bb94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800bb90:	2301      	movs	r3, #1
 800bb92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800bb94:	4b0b      	ldr	r3, [pc, #44]	; (800bbc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f023 0207 	bic.w	r2, r3, #7
 800bb9c:	4909      	ldr	r1, [pc, #36]	; (800bbc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	4313      	orrs	r3, r2
 800bba2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800bba4:	4b07      	ldr	r3, [pc, #28]	; (800bbc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f003 0307 	and.w	r3, r3, #7
 800bbac:	693a      	ldr	r2, [r7, #16]
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d001      	beq.n	800bbb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e000      	b.n	800bbb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800bbb6:	2300      	movs	r3, #0
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3718      	adds	r7, #24
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	40021000 	.word	0x40021000
 800bbc4:	40022000 	.word	0x40022000

0800bbc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b086      	sub	sp, #24
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d041      	beq.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bbe8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bbec:	d02a      	beq.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800bbee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bbf2:	d824      	bhi.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800bbf4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bbf8:	d008      	beq.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800bbfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bbfe:	d81e      	bhi.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d00a      	beq.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800bc04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc08:	d010      	beq.n	800bc2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bc0a:	e018      	b.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800bc0c:	4b86      	ldr	r3, [pc, #536]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	4a85      	ldr	r2, [pc, #532]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bc12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc16:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800bc18:	e015      	b.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	3304      	adds	r3, #4
 800bc1e:	2100      	movs	r1, #0
 800bc20:	4618      	mov	r0, r3
 800bc22:	f001 f895 	bl	800cd50 <RCCEx_PLLSAI1_Config>
 800bc26:	4603      	mov	r3, r0
 800bc28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800bc2a:	e00c      	b.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	3320      	adds	r3, #32
 800bc30:	2100      	movs	r1, #0
 800bc32:	4618      	mov	r0, r3
 800bc34:	f001 f97e 	bl	800cf34 <RCCEx_PLLSAI2_Config>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800bc3c:	e003      	b.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	74fb      	strb	r3, [r7, #19]
      break;
 800bc42:	e000      	b.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800bc44:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc46:	7cfb      	ldrb	r3, [r7, #19]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d10b      	bne.n	800bc64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bc4c:	4b76      	ldr	r3, [pc, #472]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bc4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc5a:	4973      	ldr	r1, [pc, #460]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800bc62:	e001      	b.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc64:	7cfb      	ldrb	r3, [r7, #19]
 800bc66:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d041      	beq.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bc7c:	d02a      	beq.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800bc7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bc82:	d824      	bhi.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x106>
 800bc84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc88:	d008      	beq.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800bc8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc8e:	d81e      	bhi.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x106>
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d00a      	beq.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800bc94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bc98:	d010      	beq.n	800bcbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800bc9a:	e018      	b.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800bc9c:	4b62      	ldr	r3, [pc, #392]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	4a61      	ldr	r2, [pc, #388]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bca6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800bca8:	e015      	b.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	3304      	adds	r3, #4
 800bcae:	2100      	movs	r1, #0
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f001 f84d 	bl	800cd50 <RCCEx_PLLSAI1_Config>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800bcba:	e00c      	b.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	3320      	adds	r3, #32
 800bcc0:	2100      	movs	r1, #0
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f001 f936 	bl	800cf34 <RCCEx_PLLSAI2_Config>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800bccc:	e003      	b.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bcce:	2301      	movs	r3, #1
 800bcd0:	74fb      	strb	r3, [r7, #19]
      break;
 800bcd2:	e000      	b.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800bcd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bcd6:	7cfb      	ldrb	r3, [r7, #19]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d10b      	bne.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bcdc:	4b52      	ldr	r3, [pc, #328]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bcde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bce2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcea:	494f      	ldr	r1, [pc, #316]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bcec:	4313      	orrs	r3, r2
 800bcee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800bcf2:	e001      	b.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcf4:	7cfb      	ldrb	r3, [r7, #19]
 800bcf6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	f000 80a0 	beq.w	800be46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bd06:	2300      	movs	r3, #0
 800bd08:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800bd0a:	4b47      	ldr	r3, [pc, #284]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bd0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d101      	bne.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x152>
 800bd16:	2301      	movs	r3, #1
 800bd18:	e000      	b.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d00d      	beq.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bd20:	4b41      	ldr	r3, [pc, #260]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bd22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd24:	4a40      	ldr	r2, [pc, #256]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bd26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd2a:	6593      	str	r3, [r2, #88]	; 0x58
 800bd2c:	4b3e      	ldr	r3, [pc, #248]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bd2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd34:	60bb      	str	r3, [r7, #8]
 800bd36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bd38:	2301      	movs	r3, #1
 800bd3a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bd3c:	4b3b      	ldr	r3, [pc, #236]	; (800be2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a3a      	ldr	r2, [pc, #232]	; (800be2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800bd42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bd48:	f7fb fa80 	bl	800724c <HAL_GetTick>
 800bd4c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800bd4e:	e009      	b.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd50:	f7fb fa7c 	bl	800724c <HAL_GetTick>
 800bd54:	4602      	mov	r2, r0
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	1ad3      	subs	r3, r2, r3
 800bd5a:	2b02      	cmp	r3, #2
 800bd5c:	d902      	bls.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800bd5e:	2303      	movs	r3, #3
 800bd60:	74fb      	strb	r3, [r7, #19]
        break;
 800bd62:	e005      	b.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800bd64:	4b31      	ldr	r3, [pc, #196]	; (800be2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d0ef      	beq.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800bd70:	7cfb      	ldrb	r3, [r7, #19]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d15c      	bne.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bd76:	4b2c      	ldr	r3, [pc, #176]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bd78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd80:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d01f      	beq.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd8e:	697a      	ldr	r2, [r7, #20]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d019      	beq.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bd94:	4b24      	ldr	r3, [pc, #144]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bd96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bda0:	4b21      	ldr	r3, [pc, #132]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bda2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bda6:	4a20      	ldr	r2, [pc, #128]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bda8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bdac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bdb0:	4b1d      	ldr	r3, [pc, #116]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bdb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdb6:	4a1c      	ldr	r2, [pc, #112]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bdb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bdbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bdc0:	4a19      	ldr	r2, [pc, #100]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	f003 0301 	and.w	r3, r3, #1
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d016      	beq.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdd2:	f7fb fa3b 	bl	800724c <HAL_GetTick>
 800bdd6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bdd8:	e00b      	b.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bdda:	f7fb fa37 	bl	800724c <HAL_GetTick>
 800bdde:	4602      	mov	r2, r0
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	1ad3      	subs	r3, r2, r3
 800bde4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d902      	bls.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800bdec:	2303      	movs	r3, #3
 800bdee:	74fb      	strb	r3, [r7, #19]
            break;
 800bdf0:	e006      	b.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bdf2:	4b0d      	ldr	r3, [pc, #52]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bdf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdf8:	f003 0302 	and.w	r3, r3, #2
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d0ec      	beq.n	800bdda <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800be00:	7cfb      	ldrb	r3, [r7, #19]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d10c      	bne.n	800be20 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800be06:	4b08      	ldr	r3, [pc, #32]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800be08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be16:	4904      	ldr	r1, [pc, #16]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800be18:	4313      	orrs	r3, r2
 800be1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800be1e:	e009      	b.n	800be34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800be20:	7cfb      	ldrb	r3, [r7, #19]
 800be22:	74bb      	strb	r3, [r7, #18]
 800be24:	e006      	b.n	800be34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800be26:	bf00      	nop
 800be28:	40021000 	.word	0x40021000
 800be2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be30:	7cfb      	ldrb	r3, [r7, #19]
 800be32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800be34:	7c7b      	ldrb	r3, [r7, #17]
 800be36:	2b01      	cmp	r3, #1
 800be38:	d105      	bne.n	800be46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800be3a:	4ba6      	ldr	r3, [pc, #664]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800be3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be3e:	4aa5      	ldr	r2, [pc, #660]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800be40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800be44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f003 0301 	and.w	r3, r3, #1
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d00a      	beq.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800be52:	4ba0      	ldr	r3, [pc, #640]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800be54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be58:	f023 0203 	bic.w	r2, r3, #3
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be60:	499c      	ldr	r1, [pc, #624]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800be62:	4313      	orrs	r3, r2
 800be64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f003 0302 	and.w	r3, r3, #2
 800be70:	2b00      	cmp	r3, #0
 800be72:	d00a      	beq.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800be74:	4b97      	ldr	r3, [pc, #604]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800be76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be7a:	f023 020c 	bic.w	r2, r3, #12
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be82:	4994      	ldr	r1, [pc, #592]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800be84:	4313      	orrs	r3, r2
 800be86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f003 0304 	and.w	r3, r3, #4
 800be92:	2b00      	cmp	r3, #0
 800be94:	d00a      	beq.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800be96:	4b8f      	ldr	r3, [pc, #572]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800be98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea4:	498b      	ldr	r1, [pc, #556]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bea6:	4313      	orrs	r3, r2
 800bea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f003 0308 	and.w	r3, r3, #8
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d00a      	beq.n	800bece <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800beb8:	4b86      	ldr	r3, [pc, #536]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800beba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bebe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bec6:	4983      	ldr	r1, [pc, #524]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bec8:	4313      	orrs	r3, r2
 800beca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f003 0310 	and.w	r3, r3, #16
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d00a      	beq.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800beda:	4b7e      	ldr	r3, [pc, #504]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bedc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bee0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bee8:	497a      	ldr	r1, [pc, #488]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800beea:	4313      	orrs	r3, r2
 800beec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f003 0320 	and.w	r3, r3, #32
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d00a      	beq.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800befc:	4b75      	ldr	r3, [pc, #468]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800befe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf0a:	4972      	ldr	r1, [pc, #456]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d00a      	beq.n	800bf34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bf1e:	4b6d      	ldr	r3, [pc, #436]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bf20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf2c:	4969      	ldr	r1, [pc, #420]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d00a      	beq.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bf40:	4b64      	ldr	r3, [pc, #400]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bf42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf4e:	4961      	ldr	r1, [pc, #388]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bf50:	4313      	orrs	r3, r2
 800bf52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d00a      	beq.n	800bf78 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bf62:	4b5c      	ldr	r3, [pc, #368]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bf64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf70:	4958      	ldr	r1, [pc, #352]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bf72:	4313      	orrs	r3, r2
 800bf74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d00a      	beq.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bf84:	4b53      	ldr	r3, [pc, #332]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bf86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf92:	4950      	ldr	r1, [pc, #320]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bf94:	4313      	orrs	r3, r2
 800bf96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d00a      	beq.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bfa6:	4b4b      	ldr	r3, [pc, #300]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bfa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfb4:	4947      	ldr	r1, [pc, #284]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00a      	beq.n	800bfde <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bfc8:	4b42      	ldr	r3, [pc, #264]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bfca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bfce:	f023 0203 	bic.w	r2, r3, #3
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfd6:	493f      	ldr	r1, [pc, #252]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d028      	beq.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bfea:	4b3a      	ldr	r3, [pc, #232]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bfec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bff0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bff8:	4936      	ldr	r1, [pc, #216]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bffa:	4313      	orrs	r3, r2
 800bffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c008:	d106      	bne.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c00a:	4b32      	ldr	r3, [pc, #200]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800c00c:	68db      	ldr	r3, [r3, #12]
 800c00e:	4a31      	ldr	r2, [pc, #196]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800c010:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c014:	60d3      	str	r3, [r2, #12]
 800c016:	e011      	b.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c01c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c020:	d10c      	bne.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	3304      	adds	r3, #4
 800c026:	2101      	movs	r1, #1
 800c028:	4618      	mov	r0, r3
 800c02a:	f000 fe91 	bl	800cd50 <RCCEx_PLLSAI1_Config>
 800c02e:	4603      	mov	r3, r0
 800c030:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800c032:	7cfb      	ldrb	r3, [r7, #19]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d001      	beq.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800c038:	7cfb      	ldrb	r3, [r7, #19]
 800c03a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c044:	2b00      	cmp	r3, #0
 800c046:	d028      	beq.n	800c09a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c048:	4b22      	ldr	r3, [pc, #136]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800c04a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c04e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c056:	491f      	ldr	r1, [pc, #124]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800c058:	4313      	orrs	r3, r2
 800c05a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c062:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c066:	d106      	bne.n	800c076 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c068:	4b1a      	ldr	r3, [pc, #104]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800c06a:	68db      	ldr	r3, [r3, #12]
 800c06c:	4a19      	ldr	r2, [pc, #100]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800c06e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c072:	60d3      	str	r3, [r2, #12]
 800c074:	e011      	b.n	800c09a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c07a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c07e:	d10c      	bne.n	800c09a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	3304      	adds	r3, #4
 800c084:	2101      	movs	r1, #1
 800c086:	4618      	mov	r0, r3
 800c088:	f000 fe62 	bl	800cd50 <RCCEx_PLLSAI1_Config>
 800c08c:	4603      	mov	r3, r0
 800c08e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c090:	7cfb      	ldrb	r3, [r7, #19]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d001      	beq.n	800c09a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800c096:	7cfb      	ldrb	r3, [r7, #19]
 800c098:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d02a      	beq.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c0a6:	4b0b      	ldr	r3, [pc, #44]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800c0a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0b4:	4907      	ldr	r1, [pc, #28]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0c4:	d108      	bne.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c0c6:	4b03      	ldr	r3, [pc, #12]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800c0c8:	68db      	ldr	r3, [r3, #12]
 800c0ca:	4a02      	ldr	r2, [pc, #8]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800c0cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0d0:	60d3      	str	r3, [r2, #12]
 800c0d2:	e013      	b.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x534>
 800c0d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c0e0:	d10c      	bne.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	3304      	adds	r3, #4
 800c0e6:	2101      	movs	r1, #1
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f000 fe31 	bl	800cd50 <RCCEx_PLLSAI1_Config>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c0f2:	7cfb      	ldrb	r3, [r7, #19]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d001      	beq.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800c0f8:	7cfb      	ldrb	r3, [r7, #19]
 800c0fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c104:	2b00      	cmp	r3, #0
 800c106:	d02f      	beq.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c108:	4b2c      	ldr	r3, [pc, #176]	; (800c1bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800c10a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c10e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c116:	4929      	ldr	r1, [pc, #164]	; (800c1bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800c118:	4313      	orrs	r3, r2
 800c11a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c126:	d10d      	bne.n	800c144 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	3304      	adds	r3, #4
 800c12c:	2102      	movs	r1, #2
 800c12e:	4618      	mov	r0, r3
 800c130:	f000 fe0e 	bl	800cd50 <RCCEx_PLLSAI1_Config>
 800c134:	4603      	mov	r3, r0
 800c136:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c138:	7cfb      	ldrb	r3, [r7, #19]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d014      	beq.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800c13e:	7cfb      	ldrb	r3, [r7, #19]
 800c140:	74bb      	strb	r3, [r7, #18]
 800c142:	e011      	b.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c14c:	d10c      	bne.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	3320      	adds	r3, #32
 800c152:	2102      	movs	r1, #2
 800c154:	4618      	mov	r0, r3
 800c156:	f000 feed 	bl	800cf34 <RCCEx_PLLSAI2_Config>
 800c15a:	4603      	mov	r3, r0
 800c15c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c15e:	7cfb      	ldrb	r3, [r7, #19]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d001      	beq.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800c164:	7cfb      	ldrb	r3, [r7, #19]
 800c166:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c170:	2b00      	cmp	r3, #0
 800c172:	d00b      	beq.n	800c18c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c174:	4b11      	ldr	r3, [pc, #68]	; (800c1bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800c176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c17a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c184:	490d      	ldr	r1, [pc, #52]	; (800c1bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800c186:	4313      	orrs	r3, r2
 800c188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c194:	2b00      	cmp	r3, #0
 800c196:	d00b      	beq.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c198:	4b08      	ldr	r3, [pc, #32]	; (800c1bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800c19a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c19e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1a8:	4904      	ldr	r1, [pc, #16]	; (800c1bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800c1aa:	4313      	orrs	r3, r2
 800c1ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800c1b0:	7cbb      	ldrb	r3, [r7, #18]
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3718      	adds	r7, #24
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	40021000 	.word	0x40021000

0800c1c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b088      	sub	sp, #32
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1d2:	d13e      	bne.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800c1d4:	4bb4      	ldr	r3, [pc, #720]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c1d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c1de:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c1e6:	d028      	beq.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c1ee:	f200 858c 	bhi.w	800cd0a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1f8:	d005      	beq.n	800c206 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c200:	d00e      	beq.n	800c220 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800c202:	f000 bd82 	b.w	800cd0a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c206:	4ba8      	ldr	r3, [pc, #672]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c20c:	f003 0302 	and.w	r3, r3, #2
 800c210:	2b02      	cmp	r3, #2
 800c212:	f040 857c 	bne.w	800cd0e <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
        frequency = LSE_VALUE;
 800c216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c21a:	61fb      	str	r3, [r7, #28]
      break;
 800c21c:	f000 bd77 	b.w	800cd0e <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800c220:	4ba1      	ldr	r3, [pc, #644]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c226:	f003 0302 	and.w	r3, r3, #2
 800c22a:	2b02      	cmp	r3, #2
 800c22c:	f040 8571 	bne.w	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
          frequency = LSI_VALUE;
 800c230:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c234:	61fb      	str	r3, [r7, #28]
      break;
 800c236:	f000 bd6c 	b.w	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c23a:	4b9b      	ldr	r3, [pc, #620]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c242:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c246:	f040 8566 	bne.w	800cd16 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
        frequency = HSE_VALUE / 32U;
 800c24a:	4b98      	ldr	r3, [pc, #608]	; (800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800c24c:	61fb      	str	r3, [r7, #28]
      break;
 800c24e:	f000 bd62 	b.w	800cd16 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c252:	4b95      	ldr	r3, [pc, #596]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c254:	68db      	ldr	r3, [r3, #12]
 800c256:	f003 0303 	and.w	r3, r3, #3
 800c25a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	2b03      	cmp	r3, #3
 800c260:	d036      	beq.n	800c2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	2b03      	cmp	r3, #3
 800c266:	d840      	bhi.n	800c2ea <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d003      	beq.n	800c276 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	2b02      	cmp	r3, #2
 800c272:	d020      	beq.n	800c2b6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800c274:	e039      	b.n	800c2ea <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800c276:	4b8c      	ldr	r3, [pc, #560]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f003 0302 	and.w	r3, r3, #2
 800c27e:	2b02      	cmp	r3, #2
 800c280:	d116      	bne.n	800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800c282:	4b89      	ldr	r3, [pc, #548]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f003 0308 	and.w	r3, r3, #8
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d005      	beq.n	800c29a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800c28e:	4b86      	ldr	r3, [pc, #536]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	091b      	lsrs	r3, r3, #4
 800c294:	f003 030f 	and.w	r3, r3, #15
 800c298:	e005      	b.n	800c2a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800c29a:	4b83      	ldr	r3, [pc, #524]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c29c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2a0:	0a1b      	lsrs	r3, r3, #8
 800c2a2:	f003 030f 	and.w	r3, r3, #15
 800c2a6:	4a82      	ldr	r2, [pc, #520]	; (800c4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c2a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800c2ae:	e01f      	b.n	800c2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	61bb      	str	r3, [r7, #24]
      break;
 800c2b4:	e01c      	b.n	800c2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c2b6:	4b7c      	ldr	r3, [pc, #496]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c2be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2c2:	d102      	bne.n	800c2ca <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800c2c4:	4b7b      	ldr	r3, [pc, #492]	; (800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800c2c6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800c2c8:	e012      	b.n	800c2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	61bb      	str	r3, [r7, #24]
      break;
 800c2ce:	e00f      	b.n	800c2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c2d0:	4b75      	ldr	r3, [pc, #468]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2dc:	d102      	bne.n	800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800c2de:	4b76      	ldr	r3, [pc, #472]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800c2e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800c2e2:	e005      	b.n	800c2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	61bb      	str	r3, [r7, #24]
      break;
 800c2e8:	e002      	b.n	800c2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	61bb      	str	r3, [r7, #24]
      break;
 800c2ee:	bf00      	nop
    }

    switch(PeriphClk)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2f6:	f000 842a 	beq.w	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c300:	f200 850b 	bhi.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c30a:	f000 80df 	beq.w	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c314:	f200 8501 	bhi.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c31e:	f000 80d5 	beq.w	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c328:	f200 84f7 	bhi.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c332:	f000 8377 	beq.w	800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c33c:	f200 84ed 	bhi.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c346:	f000 84c3 	beq.w	800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c350:	f200 84e3 	bhi.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c35a:	f000 82e6 	beq.w	800c92a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c364:	f200 84d9 	bhi.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c36e:	f000 80ad 	beq.w	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c378:	f200 84cf 	bhi.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c382:	f000 809b 	beq.w	800c4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c38c:	f200 84c5 	bhi.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c396:	d07f      	beq.n	800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c39e:	f200 84bc 	bhi.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3a8:	f000 8448 	beq.w	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3b2:	f200 84b2 	bhi.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3bc:	f000 83f0 	beq.w	800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3c6:	f200 84a8 	bhi.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3d0:	f000 8391 	beq.w	800caf6 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3da:	f200 849e 	bhi.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2b80      	cmp	r3, #128	; 0x80
 800c3e2:	f000 835c 	beq.w	800ca9e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2b80      	cmp	r3, #128	; 0x80
 800c3ea:	f200 8496 	bhi.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2b20      	cmp	r3, #32
 800c3f2:	d84b      	bhi.n	800c48c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	f000 848f 	beq.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	3b01      	subs	r3, #1
 800c400:	2b1f      	cmp	r3, #31
 800c402:	f200 848a 	bhi.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c406:	a201      	add	r2, pc, #4	; (adr r2, 800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 800c408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c40c:	0800c623 	.word	0x0800c623
 800c410:	0800c693 	.word	0x0800c693
 800c414:	0800cd1b 	.word	0x0800cd1b
 800c418:	0800c727 	.word	0x0800c727
 800c41c:	0800cd1b 	.word	0x0800cd1b
 800c420:	0800cd1b 	.word	0x0800cd1b
 800c424:	0800cd1b 	.word	0x0800cd1b
 800c428:	0800c7af 	.word	0x0800c7af
 800c42c:	0800cd1b 	.word	0x0800cd1b
 800c430:	0800cd1b 	.word	0x0800cd1b
 800c434:	0800cd1b 	.word	0x0800cd1b
 800c438:	0800cd1b 	.word	0x0800cd1b
 800c43c:	0800cd1b 	.word	0x0800cd1b
 800c440:	0800cd1b 	.word	0x0800cd1b
 800c444:	0800cd1b 	.word	0x0800cd1b
 800c448:	0800c827 	.word	0x0800c827
 800c44c:	0800cd1b 	.word	0x0800cd1b
 800c450:	0800cd1b 	.word	0x0800cd1b
 800c454:	0800cd1b 	.word	0x0800cd1b
 800c458:	0800cd1b 	.word	0x0800cd1b
 800c45c:	0800cd1b 	.word	0x0800cd1b
 800c460:	0800cd1b 	.word	0x0800cd1b
 800c464:	0800cd1b 	.word	0x0800cd1b
 800c468:	0800cd1b 	.word	0x0800cd1b
 800c46c:	0800cd1b 	.word	0x0800cd1b
 800c470:	0800cd1b 	.word	0x0800cd1b
 800c474:	0800cd1b 	.word	0x0800cd1b
 800c478:	0800cd1b 	.word	0x0800cd1b
 800c47c:	0800cd1b 	.word	0x0800cd1b
 800c480:	0800cd1b 	.word	0x0800cd1b
 800c484:	0800cd1b 	.word	0x0800cd1b
 800c488:	0800c8a9 	.word	0x0800c8a9
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2b40      	cmp	r3, #64	; 0x40
 800c490:	f000 82d9 	beq.w	800ca46 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800c494:	f000 bc41 	b.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800c498:	69b9      	ldr	r1, [r7, #24]
 800c49a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c49e:	f000 fe25 	bl	800d0ec <RCCEx_GetSAIxPeriphCLKFreq>
 800c4a2:	61f8      	str	r0, [r7, #28]
      break;
 800c4a4:	f000 bc3a 	b.w	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 800c4a8:	40021000 	.word	0x40021000
 800c4ac:	0003d090 	.word	0x0003d090
 800c4b0:	08014d10 	.word	0x08014d10
 800c4b4:	00f42400 	.word	0x00f42400
 800c4b8:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800c4bc:	69b9      	ldr	r1, [r7, #24]
 800c4be:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c4c2:	f000 fe13 	bl	800d0ec <RCCEx_GetSAIxPeriphCLKFreq>
 800c4c6:	61f8      	str	r0, [r7, #28]
      break;
 800c4c8:	f000 bc28 	b.w	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800c4cc:	4ba6      	ldr	r3, [pc, #664]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c4ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4d2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800c4d6:	613b      	str	r3, [r7, #16]
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c4de:	d015      	beq.n	800c50c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c4e6:	f200 8092 	bhi.w	800c60e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4f0:	d029      	beq.n	800c546 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4f8:	f200 8089 	bhi.w	800c60e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d07b      	beq.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c508:	d04a      	beq.n	800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 800c50a:	e080      	b.n	800c60e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800c50c:	4b96      	ldr	r3, [pc, #600]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f003 0302 	and.w	r3, r3, #2
 800c514:	2b02      	cmp	r3, #2
 800c516:	d17c      	bne.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800c518:	4b93      	ldr	r3, [pc, #588]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f003 0308 	and.w	r3, r3, #8
 800c520:	2b00      	cmp	r3, #0
 800c522:	d005      	beq.n	800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800c524:	4b90      	ldr	r3, [pc, #576]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	091b      	lsrs	r3, r3, #4
 800c52a:	f003 030f 	and.w	r3, r3, #15
 800c52e:	e005      	b.n	800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800c530:	4b8d      	ldr	r3, [pc, #564]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c536:	0a1b      	lsrs	r3, r3, #8
 800c538:	f003 030f 	and.w	r3, r3, #15
 800c53c:	4a8b      	ldr	r2, [pc, #556]	; (800c76c <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800c53e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c542:	61fb      	str	r3, [r7, #28]
          break;
 800c544:	e065      	b.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800c546:	4b88      	ldr	r3, [pc, #544]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c54e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c552:	d160      	bne.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800c554:	4b84      	ldr	r3, [pc, #528]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c556:	68db      	ldr	r3, [r3, #12]
 800c558:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c55c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c560:	d159      	bne.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800c562:	4b81      	ldr	r3, [pc, #516]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c564:	68db      	ldr	r3, [r3, #12]
 800c566:	0a1b      	lsrs	r3, r3, #8
 800c568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c56c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	68fa      	ldr	r2, [r7, #12]
 800c572:	fb03 f202 	mul.w	r2, r3, r2
 800c576:	4b7c      	ldr	r3, [pc, #496]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c578:	68db      	ldr	r3, [r3, #12]
 800c57a:	091b      	lsrs	r3, r3, #4
 800c57c:	f003 0307 	and.w	r3, r3, #7
 800c580:	3301      	adds	r3, #1
 800c582:	fbb2 f3f3 	udiv	r3, r2, r3
 800c586:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800c588:	4b77      	ldr	r3, [pc, #476]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c58a:	68db      	ldr	r3, [r3, #12]
 800c58c:	0d5b      	lsrs	r3, r3, #21
 800c58e:	f003 0303 	and.w	r3, r3, #3
 800c592:	3301      	adds	r3, #1
 800c594:	005b      	lsls	r3, r3, #1
 800c596:	69ba      	ldr	r2, [r7, #24]
 800c598:	fbb2 f3f3 	udiv	r3, r2, r3
 800c59c:	61fb      	str	r3, [r7, #28]
          break;
 800c59e:	e03a      	b.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800c5a0:	4b71      	ldr	r3, [pc, #452]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5ac:	d135      	bne.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800c5ae:	4b6e      	ldr	r3, [pc, #440]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c5b0:	691b      	ldr	r3, [r3, #16]
 800c5b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c5b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5ba:	d12e      	bne.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800c5bc:	4b6a      	ldr	r3, [pc, #424]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c5be:	691b      	ldr	r3, [r3, #16]
 800c5c0:	0a1b      	lsrs	r3, r3, #8
 800c5c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5c6:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c5c8:	69bb      	ldr	r3, [r7, #24]
 800c5ca:	68fa      	ldr	r2, [r7, #12]
 800c5cc:	fb03 f202 	mul.w	r2, r3, r2
 800c5d0:	4b65      	ldr	r3, [pc, #404]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	091b      	lsrs	r3, r3, #4
 800c5d6:	f003 0307 	and.w	r3, r3, #7
 800c5da:	3301      	adds	r3, #1
 800c5dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5e0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800c5e2:	4b61      	ldr	r3, [pc, #388]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c5e4:	691b      	ldr	r3, [r3, #16]
 800c5e6:	0d5b      	lsrs	r3, r3, #21
 800c5e8:	f003 0303 	and.w	r3, r3, #3
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	005b      	lsls	r3, r3, #1
 800c5f0:	69ba      	ldr	r2, [r7, #24]
 800c5f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5f6:	61fb      	str	r3, [r7, #28]
          break;
 800c5f8:	e00f      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800c5fa:	4b5b      	ldr	r3, [pc, #364]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c5fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c600:	f003 0302 	and.w	r3, r3, #2
 800c604:	2b02      	cmp	r3, #2
 800c606:	d10a      	bne.n	800c61e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 800c608:	4b59      	ldr	r3, [pc, #356]	; (800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 800c60a:	61fb      	str	r3, [r7, #28]
          break;
 800c60c:	e007      	b.n	800c61e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 800c60e:	bf00      	nop
 800c610:	e384      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c612:	bf00      	nop
 800c614:	e382      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c616:	bf00      	nop
 800c618:	e380      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c61a:	bf00      	nop
 800c61c:	e37e      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c61e:	bf00      	nop
        break;
 800c620:	e37c      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800c622:	4b51      	ldr	r3, [pc, #324]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c628:	f003 0303 	and.w	r3, r3, #3
 800c62c:	613b      	str	r3, [r7, #16]
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	2b03      	cmp	r3, #3
 800c632:	d828      	bhi.n	800c686 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 800c634:	a201      	add	r2, pc, #4	; (adr r2, 800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 800c636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c63a:	bf00      	nop
 800c63c:	0800c64d 	.word	0x0800c64d
 800c640:	0800c655 	.word	0x0800c655
 800c644:	0800c65d 	.word	0x0800c65d
 800c648:	0800c671 	.word	0x0800c671
          frequency = HAL_RCC_GetPCLK2Freq();
 800c64c:	f7ff fa46 	bl	800badc <HAL_RCC_GetPCLK2Freq>
 800c650:	61f8      	str	r0, [r7, #28]
          break;
 800c652:	e01d      	b.n	800c690 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 800c654:	f7ff f994 	bl	800b980 <HAL_RCC_GetSysClockFreq>
 800c658:	61f8      	str	r0, [r7, #28]
          break;
 800c65a:	e019      	b.n	800c690 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c65c:	4b42      	ldr	r3, [pc, #264]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c668:	d10f      	bne.n	800c68a <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 800c66a:	4b42      	ldr	r3, [pc, #264]	; (800c774 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 800c66c:	61fb      	str	r3, [r7, #28]
          break;
 800c66e:	e00c      	b.n	800c68a <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c670:	4b3d      	ldr	r3, [pc, #244]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c676:	f003 0302 	and.w	r3, r3, #2
 800c67a:	2b02      	cmp	r3, #2
 800c67c:	d107      	bne.n	800c68e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 800c67e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c682:	61fb      	str	r3, [r7, #28]
          break;
 800c684:	e003      	b.n	800c68e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 800c686:	bf00      	nop
 800c688:	e348      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c68a:	bf00      	nop
 800c68c:	e346      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c68e:	bf00      	nop
        break;
 800c690:	e344      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800c692:	4b35      	ldr	r3, [pc, #212]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c698:	f003 030c 	and.w	r3, r3, #12
 800c69c:	613b      	str	r3, [r7, #16]
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	2b0c      	cmp	r3, #12
 800c6a2:	d83a      	bhi.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 800c6a4:	a201      	add	r2, pc, #4	; (adr r2, 800c6ac <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800c6a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6aa:	bf00      	nop
 800c6ac:	0800c6e1 	.word	0x0800c6e1
 800c6b0:	0800c71b 	.word	0x0800c71b
 800c6b4:	0800c71b 	.word	0x0800c71b
 800c6b8:	0800c71b 	.word	0x0800c71b
 800c6bc:	0800c6e9 	.word	0x0800c6e9
 800c6c0:	0800c71b 	.word	0x0800c71b
 800c6c4:	0800c71b 	.word	0x0800c71b
 800c6c8:	0800c71b 	.word	0x0800c71b
 800c6cc:	0800c6f1 	.word	0x0800c6f1
 800c6d0:	0800c71b 	.word	0x0800c71b
 800c6d4:	0800c71b 	.word	0x0800c71b
 800c6d8:	0800c71b 	.word	0x0800c71b
 800c6dc:	0800c705 	.word	0x0800c705
          frequency = HAL_RCC_GetPCLK1Freq();
 800c6e0:	f7ff f9e6 	bl	800bab0 <HAL_RCC_GetPCLK1Freq>
 800c6e4:	61f8      	str	r0, [r7, #28]
          break;
 800c6e6:	e01d      	b.n	800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 800c6e8:	f7ff f94a 	bl	800b980 <HAL_RCC_GetSysClockFreq>
 800c6ec:	61f8      	str	r0, [r7, #28]
          break;
 800c6ee:	e019      	b.n	800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c6f0:	4b1d      	ldr	r3, [pc, #116]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6fc:	d10f      	bne.n	800c71e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 800c6fe:	4b1d      	ldr	r3, [pc, #116]	; (800c774 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 800c700:	61fb      	str	r3, [r7, #28]
          break;
 800c702:	e00c      	b.n	800c71e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c704:	4b18      	ldr	r3, [pc, #96]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c70a:	f003 0302 	and.w	r3, r3, #2
 800c70e:	2b02      	cmp	r3, #2
 800c710:	d107      	bne.n	800c722 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 800c712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c716:	61fb      	str	r3, [r7, #28]
          break;
 800c718:	e003      	b.n	800c722 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 800c71a:	bf00      	nop
 800c71c:	e2fe      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c71e:	bf00      	nop
 800c720:	e2fc      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c722:	bf00      	nop
        break;
 800c724:	e2fa      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800c726:	4b10      	ldr	r3, [pc, #64]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c72c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c730:	613b      	str	r3, [r7, #16]
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	2b30      	cmp	r3, #48	; 0x30
 800c736:	d029      	beq.n	800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	2b30      	cmp	r3, #48	; 0x30
 800c73c:	d831      	bhi.n	800c7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	2b20      	cmp	r3, #32
 800c742:	d019      	beq.n	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	2b20      	cmp	r3, #32
 800c748:	d82b      	bhi.n	800c7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d003      	beq.n	800c758 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	2b10      	cmp	r3, #16
 800c754:	d004      	beq.n	800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 800c756:	e024      	b.n	800c7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c758:	f7ff f9aa 	bl	800bab0 <HAL_RCC_GetPCLK1Freq>
 800c75c:	61f8      	str	r0, [r7, #28]
          break;
 800c75e:	e025      	b.n	800c7ac <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          frequency = HAL_RCC_GetSysClockFreq();
 800c760:	f7ff f90e 	bl	800b980 <HAL_RCC_GetSysClockFreq>
 800c764:	61f8      	str	r0, [r7, #28]
          break;
 800c766:	e021      	b.n	800c7ac <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 800c768:	40021000 	.word	0x40021000
 800c76c:	08014d10 	.word	0x08014d10
 800c770:	02dc6c00 	.word	0x02dc6c00
 800c774:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c778:	4b8f      	ldr	r3, [pc, #572]	; (800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c784:	d10f      	bne.n	800c7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
            frequency = HSI_VALUE;
 800c786:	4b8d      	ldr	r3, [pc, #564]	; (800c9bc <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800c788:	61fb      	str	r3, [r7, #28]
          break;
 800c78a:	e00c      	b.n	800c7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c78c:	4b8a      	ldr	r3, [pc, #552]	; (800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c78e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c792:	f003 0302 	and.w	r3, r3, #2
 800c796:	2b02      	cmp	r3, #2
 800c798:	d107      	bne.n	800c7aa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
            frequency = LSE_VALUE;
 800c79a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c79e:	61fb      	str	r3, [r7, #28]
          break;
 800c7a0:	e003      	b.n	800c7aa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          break;
 800c7a2:	bf00      	nop
 800c7a4:	e2ba      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c7a6:	bf00      	nop
 800c7a8:	e2b8      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c7aa:	bf00      	nop
        break;
 800c7ac:	e2b6      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800c7ae:	4b82      	ldr	r3, [pc, #520]	; (800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c7b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c7b8:	613b      	str	r3, [r7, #16]
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	2bc0      	cmp	r3, #192	; 0xc0
 800c7be:	d021      	beq.n	800c804 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	2bc0      	cmp	r3, #192	; 0xc0
 800c7c4:	d829      	bhi.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	2b80      	cmp	r3, #128	; 0x80
 800c7ca:	d011      	beq.n	800c7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800c7cc:	693b      	ldr	r3, [r7, #16]
 800c7ce:	2b80      	cmp	r3, #128	; 0x80
 800c7d0:	d823      	bhi.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d003      	beq.n	800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	2b40      	cmp	r3, #64	; 0x40
 800c7dc:	d004      	beq.n	800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          break;
 800c7de:	e01c      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c7e0:	f7ff f966 	bl	800bab0 <HAL_RCC_GetPCLK1Freq>
 800c7e4:	61f8      	str	r0, [r7, #28]
          break;
 800c7e6:	e01d      	b.n	800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HAL_RCC_GetSysClockFreq();
 800c7e8:	f7ff f8ca 	bl	800b980 <HAL_RCC_GetSysClockFreq>
 800c7ec:	61f8      	str	r0, [r7, #28]
          break;
 800c7ee:	e019      	b.n	800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c7f0:	4b71      	ldr	r3, [pc, #452]	; (800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c7f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7fc:	d10f      	bne.n	800c81e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = HSI_VALUE;
 800c7fe:	4b6f      	ldr	r3, [pc, #444]	; (800c9bc <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800c800:	61fb      	str	r3, [r7, #28]
          break;
 800c802:	e00c      	b.n	800c81e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c804:	4b6c      	ldr	r3, [pc, #432]	; (800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c80a:	f003 0302 	and.w	r3, r3, #2
 800c80e:	2b02      	cmp	r3, #2
 800c810:	d107      	bne.n	800c822 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            frequency = LSE_VALUE;
 800c812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c816:	61fb      	str	r3, [r7, #28]
          break;
 800c818:	e003      	b.n	800c822 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
          break;
 800c81a:	bf00      	nop
 800c81c:	e27e      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c81e:	bf00      	nop
 800c820:	e27c      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c822:	bf00      	nop
        break;
 800c824:	e27a      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800c826:	4b64      	ldr	r3, [pc, #400]	; (800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c82c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c830:	613b      	str	r3, [r7, #16]
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c838:	d025      	beq.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c840:	d82c      	bhi.n	800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c848:	d013      	beq.n	800c872 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c850:	d824      	bhi.n	800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d004      	beq.n	800c862 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c85e:	d004      	beq.n	800c86a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          break;
 800c860:	e01c      	b.n	800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c862:	f7ff f925 	bl	800bab0 <HAL_RCC_GetPCLK1Freq>
 800c866:	61f8      	str	r0, [r7, #28]
          break;
 800c868:	e01d      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetSysClockFreq();
 800c86a:	f7ff f889 	bl	800b980 <HAL_RCC_GetSysClockFreq>
 800c86e:	61f8      	str	r0, [r7, #28]
          break;
 800c870:	e019      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c872:	4b51      	ldr	r3, [pc, #324]	; (800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c87a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c87e:	d10f      	bne.n	800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            frequency = HSI_VALUE;
 800c880:	4b4e      	ldr	r3, [pc, #312]	; (800c9bc <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800c882:	61fb      	str	r3, [r7, #28]
          break;
 800c884:	e00c      	b.n	800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c886:	4b4c      	ldr	r3, [pc, #304]	; (800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c88c:	f003 0302 	and.w	r3, r3, #2
 800c890:	2b02      	cmp	r3, #2
 800c892:	d107      	bne.n	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
            frequency = LSE_VALUE;
 800c894:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c898:	61fb      	str	r3, [r7, #28]
          break;
 800c89a:	e003      	b.n	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          break;
 800c89c:	bf00      	nop
 800c89e:	e23d      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c8a0:	bf00      	nop
 800c8a2:	e23b      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c8a4:	bf00      	nop
        break;
 800c8a6:	e239      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800c8a8:	4b43      	ldr	r3, [pc, #268]	; (800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c8aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c8b2:	613b      	str	r3, [r7, #16]
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c8ba:	d025      	beq.n	800c908 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c8c2:	d82c      	bhi.n	800c91e <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c8ca:	d013      	beq.n	800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c8d2:	d824      	bhi.n	800c91e <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d004      	beq.n	800c8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8e0:	d004      	beq.n	800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
          break;
 800c8e2:	e01c      	b.n	800c91e <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c8e4:	f7ff f8e4 	bl	800bab0 <HAL_RCC_GetPCLK1Freq>
 800c8e8:	61f8      	str	r0, [r7, #28]
          break;
 800c8ea:	e01d      	b.n	800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          frequency = HAL_RCC_GetSysClockFreq();
 800c8ec:	f7ff f848 	bl	800b980 <HAL_RCC_GetSysClockFreq>
 800c8f0:	61f8      	str	r0, [r7, #28]
          break;
 800c8f2:	e019      	b.n	800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c8f4:	4b30      	ldr	r3, [pc, #192]	; (800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c8fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c900:	d10f      	bne.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
            frequency = HSI_VALUE;
 800c902:	4b2e      	ldr	r3, [pc, #184]	; (800c9bc <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800c904:	61fb      	str	r3, [r7, #28]
          break;
 800c906:	e00c      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c908:	4b2b      	ldr	r3, [pc, #172]	; (800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c90a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c90e:	f003 0302 	and.w	r3, r3, #2
 800c912:	2b02      	cmp	r3, #2
 800c914:	d107      	bne.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            frequency = LSE_VALUE;
 800c916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c91a:	61fb      	str	r3, [r7, #28]
          break;
 800c91c:	e003      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
          break;
 800c91e:	bf00      	nop
 800c920:	e1fc      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c922:	bf00      	nop
 800c924:	e1fa      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c926:	bf00      	nop
        break;
 800c928:	e1f8      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c92a:	4b23      	ldr	r3, [pc, #140]	; (800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c92c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c930:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c934:	613b      	str	r3, [r7, #16]
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c93c:	d00c      	beq.n	800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c944:	d868      	bhi.n	800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c94c:	d008      	beq.n	800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c954:	d034      	beq.n	800c9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
          break;
 800c956:	e05f      	b.n	800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          frequency = HAL_RCC_GetSysClockFreq();
 800c958:	f7ff f812 	bl	800b980 <HAL_RCC_GetSysClockFreq>
 800c95c:	61f8      	str	r0, [r7, #28]
          break;
 800c95e:	e060      	b.n	800ca22 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800c960:	4b15      	ldr	r3, [pc, #84]	; (800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c968:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c96c:	d156      	bne.n	800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 800c96e:	4b12      	ldr	r3, [pc, #72]	; (800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c970:	691b      	ldr	r3, [r3, #16]
 800c972:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c976:	2b00      	cmp	r3, #0
 800c978:	d050      	beq.n	800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800c97a:	4b0f      	ldr	r3, [pc, #60]	; (800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c97c:	691b      	ldr	r3, [r3, #16]
 800c97e:	0a1b      	lsrs	r3, r3, #8
 800c980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c984:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c986:	69bb      	ldr	r3, [r7, #24]
 800c988:	68fa      	ldr	r2, [r7, #12]
 800c98a:	fb03 f202 	mul.w	r2, r3, r2
 800c98e:	4b0a      	ldr	r3, [pc, #40]	; (800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c990:	68db      	ldr	r3, [r3, #12]
 800c992:	091b      	lsrs	r3, r3, #4
 800c994:	f003 0307 	and.w	r3, r3, #7
 800c998:	3301      	adds	r3, #1
 800c99a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c99e:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800c9a0:	4b05      	ldr	r3, [pc, #20]	; (800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c9a2:	691b      	ldr	r3, [r3, #16]
 800c9a4:	0e5b      	lsrs	r3, r3, #25
 800c9a6:	f003 0303 	and.w	r3, r3, #3
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	005b      	lsls	r3, r3, #1
 800c9ae:	69ba      	ldr	r2, [r7, #24]
 800c9b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9b4:	61fb      	str	r3, [r7, #28]
          break;
 800c9b6:	e031      	b.n	800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 800c9b8:	40021000 	.word	0x40021000
 800c9bc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800c9c0:	4b9c      	ldr	r3, [pc, #624]	; (800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9cc:	d128      	bne.n	800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 800c9ce:	4b99      	ldr	r3, [pc, #612]	; (800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c9d0:	695b      	ldr	r3, [r3, #20]
 800c9d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d022      	beq.n	800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800c9da:	4b96      	ldr	r3, [pc, #600]	; (800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c9dc:	695b      	ldr	r3, [r3, #20]
 800c9de:	0a1b      	lsrs	r3, r3, #8
 800c9e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9e4:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c9e6:	69bb      	ldr	r3, [r7, #24]
 800c9e8:	68fa      	ldr	r2, [r7, #12]
 800c9ea:	fb03 f202 	mul.w	r2, r3, r2
 800c9ee:	4b91      	ldr	r3, [pc, #580]	; (800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c9f0:	68db      	ldr	r3, [r3, #12]
 800c9f2:	091b      	lsrs	r3, r3, #4
 800c9f4:	f003 0307 	and.w	r3, r3, #7
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9fe:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800ca00:	4b8c      	ldr	r3, [pc, #560]	; (800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800ca02:	695b      	ldr	r3, [r3, #20]
 800ca04:	0e5b      	lsrs	r3, r3, #25
 800ca06:	f003 0303 	and.w	r3, r3, #3
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	005b      	lsls	r3, r3, #1
 800ca0e:	69ba      	ldr	r2, [r7, #24]
 800ca10:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca14:	61fb      	str	r3, [r7, #28]
          break;
 800ca16:	e003      	b.n	800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 800ca18:	bf00      	nop
 800ca1a:	e17f      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800ca1c:	bf00      	nop
 800ca1e:	e17d      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800ca20:	bf00      	nop
        break;
 800ca22:	e17b      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800ca24:	4b83      	ldr	r3, [pc, #524]	; (800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800ca26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca2e:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d103      	bne.n	800ca3e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          frequency = HAL_RCC_GetPCLK2Freq();
 800ca36:	f7ff f851 	bl	800badc <HAL_RCC_GetPCLK2Freq>
 800ca3a:	61f8      	str	r0, [r7, #28]
        break;
 800ca3c:	e16e      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          frequency = HAL_RCC_GetSysClockFreq();
 800ca3e:	f7fe ff9f 	bl	800b980 <HAL_RCC_GetSysClockFreq>
 800ca42:	61f8      	str	r0, [r7, #28]
        break;
 800ca44:	e16a      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800ca46:	4b7b      	ldr	r3, [pc, #492]	; (800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800ca48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca4c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ca50:	613b      	str	r3, [r7, #16]
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca58:	d013      	beq.n	800ca82 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca60:	d819      	bhi.n	800ca96 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d004      	beq.n	800ca72 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca6e:	d004      	beq.n	800ca7a <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800ca70:	e011      	b.n	800ca96 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ca72:	f7ff f81d 	bl	800bab0 <HAL_RCC_GetPCLK1Freq>
 800ca76:	61f8      	str	r0, [r7, #28]
          break;
 800ca78:	e010      	b.n	800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          frequency = HAL_RCC_GetSysClockFreq();
 800ca7a:	f7fe ff81 	bl	800b980 <HAL_RCC_GetSysClockFreq>
 800ca7e:	61f8      	str	r0, [r7, #28]
          break;
 800ca80:	e00c      	b.n	800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ca82:	4b6c      	ldr	r3, [pc, #432]	; (800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca8e:	d104      	bne.n	800ca9a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
            frequency = HSI_VALUE;
 800ca90:	4b69      	ldr	r3, [pc, #420]	; (800cc38 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800ca92:	61fb      	str	r3, [r7, #28]
          break;
 800ca94:	e001      	b.n	800ca9a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
 800ca96:	bf00      	nop
 800ca98:	e140      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800ca9a:	bf00      	nop
        break;
 800ca9c:	e13e      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800ca9e:	4b65      	ldr	r3, [pc, #404]	; (800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800caa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800caa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800caa8:	613b      	str	r3, [r7, #16]
 800caaa:	693b      	ldr	r3, [r7, #16]
 800caac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cab0:	d013      	beq.n	800cada <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cab8:	d819      	bhi.n	800caee <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d004      	beq.n	800caca <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cac6:	d004      	beq.n	800cad2 <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 800cac8:	e011      	b.n	800caee <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800caca:	f7fe fff1 	bl	800bab0 <HAL_RCC_GetPCLK1Freq>
 800cace:	61f8      	str	r0, [r7, #28]
          break;
 800cad0:	e010      	b.n	800caf4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetSysClockFreq();
 800cad2:	f7fe ff55 	bl	800b980 <HAL_RCC_GetSysClockFreq>
 800cad6:	61f8      	str	r0, [r7, #28]
          break;
 800cad8:	e00c      	b.n	800caf4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cada:	4b56      	ldr	r3, [pc, #344]	; (800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cae6:	d104      	bne.n	800caf2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = HSI_VALUE;
 800cae8:	4b53      	ldr	r3, [pc, #332]	; (800cc38 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800caea:	61fb      	str	r3, [r7, #28]
          break;
 800caec:	e001      	b.n	800caf2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 800caee:	bf00      	nop
 800caf0:	e114      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800caf2:	bf00      	nop
        break;
 800caf4:	e112      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800caf6:	4b4f      	ldr	r3, [pc, #316]	; (800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800caf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cafc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cb00:	613b      	str	r3, [r7, #16]
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb08:	d013      	beq.n	800cb32 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb10:	d819      	bhi.n	800cb46 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d004      	beq.n	800cb22 <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb1e:	d004      	beq.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          break;
 800cb20:	e011      	b.n	800cb46 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cb22:	f7fe ffc5 	bl	800bab0 <HAL_RCC_GetPCLK1Freq>
 800cb26:	61f8      	str	r0, [r7, #28]
          break;
 800cb28:	e010      	b.n	800cb4c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = HAL_RCC_GetSysClockFreq();
 800cb2a:	f7fe ff29 	bl	800b980 <HAL_RCC_GetSysClockFreq>
 800cb2e:	61f8      	str	r0, [r7, #28]
          break;
 800cb30:	e00c      	b.n	800cb4c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cb32:	4b40      	ldr	r3, [pc, #256]	; (800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb3e:	d104      	bne.n	800cb4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
            frequency = HSI_VALUE;
 800cb40:	4b3d      	ldr	r3, [pc, #244]	; (800cc38 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800cb42:	61fb      	str	r3, [r7, #28]
          break;
 800cb44:	e001      	b.n	800cb4a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
 800cb46:	bf00      	nop
 800cb48:	e0e8      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800cb4a:	bf00      	nop
        break;
 800cb4c:	e0e6      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800cb4e:	4b39      	ldr	r3, [pc, #228]	; (800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800cb50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cb54:	f003 0303 	and.w	r3, r3, #3
 800cb58:	613b      	str	r3, [r7, #16]
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	2b02      	cmp	r3, #2
 800cb5e:	d011      	beq.n	800cb84 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	2b02      	cmp	r3, #2
 800cb64:	d818      	bhi.n	800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d003      	beq.n	800cb74 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	2b01      	cmp	r3, #1
 800cb70:	d004      	beq.n	800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          break;
 800cb72:	e011      	b.n	800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cb74:	f7fe ff9c 	bl	800bab0 <HAL_RCC_GetPCLK1Freq>
 800cb78:	61f8      	str	r0, [r7, #28]
          break;
 800cb7a:	e010      	b.n	800cb9e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          frequency = HAL_RCC_GetSysClockFreq();
 800cb7c:	f7fe ff00 	bl	800b980 <HAL_RCC_GetSysClockFreq>
 800cb80:	61f8      	str	r0, [r7, #28]
          break;
 800cb82:	e00c      	b.n	800cb9e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cb84:	4b2b      	ldr	r3, [pc, #172]	; (800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb90:	d104      	bne.n	800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = HSI_VALUE;
 800cb92:	4b29      	ldr	r3, [pc, #164]	; (800cc38 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800cb94:	61fb      	str	r3, [r7, #28]
          break;
 800cb96:	e001      	b.n	800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 800cb98:	bf00      	nop
 800cb9a:	e0bf      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800cb9c:	bf00      	nop
        break;
 800cb9e:	e0bd      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800cba0:	4b24      	ldr	r3, [pc, #144]	; (800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800cba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cba6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800cbaa:	613b      	str	r3, [r7, #16]
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800cbb2:	d02c      	beq.n	800cc0e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800cbba:	d833      	bhi.n	800cc24 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800cbc2:	d01a      	beq.n	800cbfa <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800cbca:	d82b      	bhi.n	800cc24 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d004      	beq.n	800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cbd8:	d004      	beq.n	800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 800cbda:	e023      	b.n	800cc24 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cbdc:	f7fe ff68 	bl	800bab0 <HAL_RCC_GetPCLK1Freq>
 800cbe0:	61f8      	str	r0, [r7, #28]
          break;
 800cbe2:	e026      	b.n	800cc32 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800cbe4:	4b13      	ldr	r3, [pc, #76]	; (800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800cbe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cbea:	f003 0302 	and.w	r3, r3, #2
 800cbee:	2b02      	cmp	r3, #2
 800cbf0:	d11a      	bne.n	800cc28 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 800cbf2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cbf6:	61fb      	str	r3, [r7, #28]
          break;
 800cbf8:	e016      	b.n	800cc28 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cbfa:	4b0e      	ldr	r3, [pc, #56]	; (800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc06:	d111      	bne.n	800cc2c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 800cc08:	4b0b      	ldr	r3, [pc, #44]	; (800cc38 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800cc0a:	61fb      	str	r3, [r7, #28]
          break;
 800cc0c:	e00e      	b.n	800cc2c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800cc0e:	4b09      	ldr	r3, [pc, #36]	; (800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800cc10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc14:	f003 0302 	and.w	r3, r3, #2
 800cc18:	2b02      	cmp	r3, #2
 800cc1a:	d109      	bne.n	800cc30 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 800cc1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc20:	61fb      	str	r3, [r7, #28]
          break;
 800cc22:	e005      	b.n	800cc30 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 800cc24:	bf00      	nop
 800cc26:	e079      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800cc28:	bf00      	nop
 800cc2a:	e077      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800cc2c:	bf00      	nop
 800cc2e:	e075      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800cc30:	bf00      	nop
        break;
 800cc32:	e073      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 800cc34:	40021000 	.word	0x40021000
 800cc38:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800cc3c:	4b3a      	ldr	r3, [pc, #232]	; (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800cc3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc42:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800cc46:	613b      	str	r3, [r7, #16]
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cc4e:	d02c      	beq.n	800ccaa <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cc56:	d833      	bhi.n	800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc5e:	d01a      	beq.n	800cc96 <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc66:	d82b      	bhi.n	800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d004      	beq.n	800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc74:	d004      	beq.n	800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800cc76:	e023      	b.n	800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cc78:	f7fe ff1a 	bl	800bab0 <HAL_RCC_GetPCLK1Freq>
 800cc7c:	61f8      	str	r0, [r7, #28]
          break;
 800cc7e:	e026      	b.n	800ccce <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800cc80:	4b29      	ldr	r3, [pc, #164]	; (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800cc82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc86:	f003 0302 	and.w	r3, r3, #2
 800cc8a:	2b02      	cmp	r3, #2
 800cc8c:	d11a      	bne.n	800ccc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
              frequency = LSI_VALUE;
 800cc8e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cc92:	61fb      	str	r3, [r7, #28]
          break;
 800cc94:	e016      	b.n	800ccc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cc96:	4b24      	ldr	r3, [pc, #144]	; (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cca2:	d111      	bne.n	800ccc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
            frequency = HSI_VALUE;
 800cca4:	4b21      	ldr	r3, [pc, #132]	; (800cd2c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 800cca6:	61fb      	str	r3, [r7, #28]
          break;
 800cca8:	e00e      	b.n	800ccc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ccaa:	4b1f      	ldr	r3, [pc, #124]	; (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800ccac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccb0:	f003 0302 	and.w	r3, r3, #2
 800ccb4:	2b02      	cmp	r3, #2
 800ccb6:	d109      	bne.n	800cccc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = LSE_VALUE;
 800ccb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ccbc:	61fb      	str	r3, [r7, #28]
          break;
 800ccbe:	e005      	b.n	800cccc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 800ccc0:	bf00      	nop
 800ccc2:	e02b      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800ccc4:	bf00      	nop
 800ccc6:	e029      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800ccc8:	bf00      	nop
 800ccca:	e027      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800cccc:	bf00      	nop
        break;
 800ccce:	e025      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800ccd0:	4b15      	ldr	r3, [pc, #84]	; (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800ccd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccd6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ccda:	613b      	str	r3, [r7, #16]
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d004      	beq.n	800ccec <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cce8:	d004      	beq.n	800ccf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 800ccea:	e00d      	b.n	800cd08 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ccec:	f7fe fee0 	bl	800bab0 <HAL_RCC_GetPCLK1Freq>
 800ccf0:	61f8      	str	r0, [r7, #28]
          break;
 800ccf2:	e009      	b.n	800cd08 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ccf4:	4b0c      	ldr	r3, [pc, #48]	; (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ccfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd00:	d101      	bne.n	800cd06 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
            frequency = HSI_VALUE;
 800cd02:	4b0a      	ldr	r3, [pc, #40]	; (800cd2c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 800cd04:	61fb      	str	r3, [r7, #28]
          break;
 800cd06:	bf00      	nop
        break;
 800cd08:	e008      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800cd0a:	bf00      	nop
 800cd0c:	e006      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800cd0e:	bf00      	nop
 800cd10:	e004      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800cd12:	bf00      	nop
 800cd14:	e002      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800cd16:	bf00      	nop
 800cd18:	e000      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800cd1a:	bf00      	nop
    }
  }

  return(frequency);
 800cd1c:	69fb      	ldr	r3, [r7, #28]
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3720      	adds	r7, #32
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	40021000 	.word	0x40021000
 800cd2c:	00f42400 	.word	0x00f42400

0800cd30 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800cd30:	b480      	push	{r7}
 800cd32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800cd34:	4b05      	ldr	r3, [pc, #20]	; (800cd4c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	4a04      	ldr	r2, [pc, #16]	; (800cd4c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800cd3a:	f043 0304 	orr.w	r3, r3, #4
 800cd3e:	6013      	str	r3, [r2, #0]
}
 800cd40:	bf00      	nop
 800cd42:	46bd      	mov	sp, r7
 800cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd48:	4770      	bx	lr
 800cd4a:	bf00      	nop
 800cd4c:	40021000 	.word	0x40021000

0800cd50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800cd5e:	4b74      	ldr	r3, [pc, #464]	; (800cf30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd60:	68db      	ldr	r3, [r3, #12]
 800cd62:	f003 0303 	and.w	r3, r3, #3
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d018      	beq.n	800cd9c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800cd6a:	4b71      	ldr	r3, [pc, #452]	; (800cf30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd6c:	68db      	ldr	r3, [r3, #12]
 800cd6e:	f003 0203 	and.w	r2, r3, #3
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d10d      	bne.n	800cd96 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
       ||
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d009      	beq.n	800cd96 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800cd82:	4b6b      	ldr	r3, [pc, #428]	; (800cf30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd84:	68db      	ldr	r3, [r3, #12]
 800cd86:	091b      	lsrs	r3, r3, #4
 800cd88:	f003 0307 	and.w	r3, r3, #7
 800cd8c:	1c5a      	adds	r2, r3, #1
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	685b      	ldr	r3, [r3, #4]
       ||
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d047      	beq.n	800ce26 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800cd96:	2301      	movs	r3, #1
 800cd98:	73fb      	strb	r3, [r7, #15]
 800cd9a:	e044      	b.n	800ce26 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	2b03      	cmp	r3, #3
 800cda2:	d018      	beq.n	800cdd6 <RCCEx_PLLSAI1_Config+0x86>
 800cda4:	2b03      	cmp	r3, #3
 800cda6:	d825      	bhi.n	800cdf4 <RCCEx_PLLSAI1_Config+0xa4>
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	d002      	beq.n	800cdb2 <RCCEx_PLLSAI1_Config+0x62>
 800cdac:	2b02      	cmp	r3, #2
 800cdae:	d009      	beq.n	800cdc4 <RCCEx_PLLSAI1_Config+0x74>
 800cdb0:	e020      	b.n	800cdf4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800cdb2:	4b5f      	ldr	r3, [pc, #380]	; (800cf30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f003 0302 	and.w	r3, r3, #2
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d11d      	bne.n	800cdfa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cdc2:	e01a      	b.n	800cdfa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cdc4:	4b5a      	ldr	r3, [pc, #360]	; (800cf30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d116      	bne.n	800cdfe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cdd4:	e013      	b.n	800cdfe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800cdd6:	4b56      	ldr	r3, [pc, #344]	; (800cf30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d10f      	bne.n	800ce02 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800cde2:	4b53      	ldr	r3, [pc, #332]	; (800cf30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d109      	bne.n	800ce02 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800cdee:	2301      	movs	r3, #1
 800cdf0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cdf2:	e006      	b.n	800ce02 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	73fb      	strb	r3, [r7, #15]
      break;
 800cdf8:	e004      	b.n	800ce04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cdfa:	bf00      	nop
 800cdfc:	e002      	b.n	800ce04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cdfe:	bf00      	nop
 800ce00:	e000      	b.n	800ce04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ce02:	bf00      	nop
    }

    if(status == HAL_OK)
 800ce04:	7bfb      	ldrb	r3, [r7, #15]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d10d      	bne.n	800ce26 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ce0a:	4b49      	ldr	r3, [pc, #292]	; (800cf30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce0c:	68db      	ldr	r3, [r3, #12]
 800ce0e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6819      	ldr	r1, [r3, #0]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	685b      	ldr	r3, [r3, #4]
 800ce1a:	3b01      	subs	r3, #1
 800ce1c:	011b      	lsls	r3, r3, #4
 800ce1e:	430b      	orrs	r3, r1
 800ce20:	4943      	ldr	r1, [pc, #268]	; (800cf30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce22:	4313      	orrs	r3, r2
 800ce24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800ce26:	7bfb      	ldrb	r3, [r7, #15]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d17c      	bne.n	800cf26 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800ce2c:	4b40      	ldr	r3, [pc, #256]	; (800cf30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4a3f      	ldr	r2, [pc, #252]	; (800cf30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ce36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce38:	f7fa fa08 	bl	800724c <HAL_GetTick>
 800ce3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ce3e:	e009      	b.n	800ce54 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ce40:	f7fa fa04 	bl	800724c <HAL_GetTick>
 800ce44:	4602      	mov	r2, r0
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	1ad3      	subs	r3, r2, r3
 800ce4a:	2b02      	cmp	r3, #2
 800ce4c:	d902      	bls.n	800ce54 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800ce4e:	2303      	movs	r3, #3
 800ce50:	73fb      	strb	r3, [r7, #15]
        break;
 800ce52:	e005      	b.n	800ce60 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ce54:	4b36      	ldr	r3, [pc, #216]	; (800cf30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d1ef      	bne.n	800ce40 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800ce60:	7bfb      	ldrb	r3, [r7, #15]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d15f      	bne.n	800cf26 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d110      	bne.n	800ce8e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ce6c:	4b30      	ldr	r3, [pc, #192]	; (800cf30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce6e:	691b      	ldr	r3, [r3, #16]
 800ce70:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800ce74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ce78:	687a      	ldr	r2, [r7, #4]
 800ce7a:	6892      	ldr	r2, [r2, #8]
 800ce7c:	0211      	lsls	r1, r2, #8
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	68d2      	ldr	r2, [r2, #12]
 800ce82:	06d2      	lsls	r2, r2, #27
 800ce84:	430a      	orrs	r2, r1
 800ce86:	492a      	ldr	r1, [pc, #168]	; (800cf30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce88:	4313      	orrs	r3, r2
 800ce8a:	610b      	str	r3, [r1, #16]
 800ce8c:	e027      	b.n	800cede <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d112      	bne.n	800ceba <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ce94:	4b26      	ldr	r3, [pc, #152]	; (800cf30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce96:	691b      	ldr	r3, [r3, #16]
 800ce98:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800ce9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	6892      	ldr	r2, [r2, #8]
 800cea4:	0211      	lsls	r1, r2, #8
 800cea6:	687a      	ldr	r2, [r7, #4]
 800cea8:	6912      	ldr	r2, [r2, #16]
 800ceaa:	0852      	lsrs	r2, r2, #1
 800ceac:	3a01      	subs	r2, #1
 800ceae:	0552      	lsls	r2, r2, #21
 800ceb0:	430a      	orrs	r2, r1
 800ceb2:	491f      	ldr	r1, [pc, #124]	; (800cf30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ceb4:	4313      	orrs	r3, r2
 800ceb6:	610b      	str	r3, [r1, #16]
 800ceb8:	e011      	b.n	800cede <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ceba:	4b1d      	ldr	r3, [pc, #116]	; (800cf30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cebc:	691b      	ldr	r3, [r3, #16]
 800cebe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800cec2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cec6:	687a      	ldr	r2, [r7, #4]
 800cec8:	6892      	ldr	r2, [r2, #8]
 800ceca:	0211      	lsls	r1, r2, #8
 800cecc:	687a      	ldr	r2, [r7, #4]
 800cece:	6952      	ldr	r2, [r2, #20]
 800ced0:	0852      	lsrs	r2, r2, #1
 800ced2:	3a01      	subs	r2, #1
 800ced4:	0652      	lsls	r2, r2, #25
 800ced6:	430a      	orrs	r2, r1
 800ced8:	4915      	ldr	r1, [pc, #84]	; (800cf30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ceda:	4313      	orrs	r3, r2
 800cedc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800cede:	4b14      	ldr	r3, [pc, #80]	; (800cf30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4a13      	ldr	r2, [pc, #76]	; (800cf30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cee4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cee8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ceea:	f7fa f9af 	bl	800724c <HAL_GetTick>
 800ceee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cef0:	e009      	b.n	800cf06 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cef2:	f7fa f9ab 	bl	800724c <HAL_GetTick>
 800cef6:	4602      	mov	r2, r0
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	1ad3      	subs	r3, r2, r3
 800cefc:	2b02      	cmp	r3, #2
 800cefe:	d902      	bls.n	800cf06 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800cf00:	2303      	movs	r3, #3
 800cf02:	73fb      	strb	r3, [r7, #15]
          break;
 800cf04:	e005      	b.n	800cf12 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cf06:	4b0a      	ldr	r3, [pc, #40]	; (800cf30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d0ef      	beq.n	800cef2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800cf12:	7bfb      	ldrb	r3, [r7, #15]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d106      	bne.n	800cf26 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800cf18:	4b05      	ldr	r3, [pc, #20]	; (800cf30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cf1a:	691a      	ldr	r2, [r3, #16]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	699b      	ldr	r3, [r3, #24]
 800cf20:	4903      	ldr	r1, [pc, #12]	; (800cf30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cf22:	4313      	orrs	r3, r2
 800cf24:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800cf26:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3710      	adds	r7, #16
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	40021000 	.word	0x40021000

0800cf34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b084      	sub	sp, #16
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800cf42:	4b69      	ldr	r3, [pc, #420]	; (800d0e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cf44:	68db      	ldr	r3, [r3, #12]
 800cf46:	f003 0303 	and.w	r3, r3, #3
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d018      	beq.n	800cf80 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800cf4e:	4b66      	ldr	r3, [pc, #408]	; (800d0e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cf50:	68db      	ldr	r3, [r3, #12]
 800cf52:	f003 0203 	and.w	r2, r3, #3
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d10d      	bne.n	800cf7a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
       ||
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d009      	beq.n	800cf7a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800cf66:	4b60      	ldr	r3, [pc, #384]	; (800d0e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cf68:	68db      	ldr	r3, [r3, #12]
 800cf6a:	091b      	lsrs	r3, r3, #4
 800cf6c:	f003 0307 	and.w	r3, r3, #7
 800cf70:	1c5a      	adds	r2, r3, #1
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	685b      	ldr	r3, [r3, #4]
       ||
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d047      	beq.n	800d00a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	73fb      	strb	r3, [r7, #15]
 800cf7e:	e044      	b.n	800d00a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	2b03      	cmp	r3, #3
 800cf86:	d018      	beq.n	800cfba <RCCEx_PLLSAI2_Config+0x86>
 800cf88:	2b03      	cmp	r3, #3
 800cf8a:	d825      	bhi.n	800cfd8 <RCCEx_PLLSAI2_Config+0xa4>
 800cf8c:	2b01      	cmp	r3, #1
 800cf8e:	d002      	beq.n	800cf96 <RCCEx_PLLSAI2_Config+0x62>
 800cf90:	2b02      	cmp	r3, #2
 800cf92:	d009      	beq.n	800cfa8 <RCCEx_PLLSAI2_Config+0x74>
 800cf94:	e020      	b.n	800cfd8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800cf96:	4b54      	ldr	r3, [pc, #336]	; (800d0e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f003 0302 	and.w	r3, r3, #2
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d11d      	bne.n	800cfde <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cfa6:	e01a      	b.n	800cfde <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cfa8:	4b4f      	ldr	r3, [pc, #316]	; (800d0e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d116      	bne.n	800cfe2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cfb8:	e013      	b.n	800cfe2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800cfba:	4b4b      	ldr	r3, [pc, #300]	; (800d0e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d10f      	bne.n	800cfe6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800cfc6:	4b48      	ldr	r3, [pc, #288]	; (800d0e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d109      	bne.n	800cfe6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cfd6:	e006      	b.n	800cfe6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	73fb      	strb	r3, [r7, #15]
      break;
 800cfdc:	e004      	b.n	800cfe8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800cfde:	bf00      	nop
 800cfe0:	e002      	b.n	800cfe8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800cfe2:	bf00      	nop
 800cfe4:	e000      	b.n	800cfe8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800cfe6:	bf00      	nop
    }

    if(status == HAL_OK)
 800cfe8:	7bfb      	ldrb	r3, [r7, #15]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d10d      	bne.n	800d00a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800cfee:	4b3e      	ldr	r3, [pc, #248]	; (800d0e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cff0:	68db      	ldr	r3, [r3, #12]
 800cff2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6819      	ldr	r1, [r3, #0]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	3b01      	subs	r3, #1
 800d000:	011b      	lsls	r3, r3, #4
 800d002:	430b      	orrs	r3, r1
 800d004:	4938      	ldr	r1, [pc, #224]	; (800d0e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d006:	4313      	orrs	r3, r2
 800d008:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d00a:	7bfb      	ldrb	r3, [r7, #15]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d166      	bne.n	800d0de <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800d010:	4b35      	ldr	r3, [pc, #212]	; (800d0e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4a34      	ldr	r2, [pc, #208]	; (800d0e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d01a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d01c:	f7fa f916 	bl	800724c <HAL_GetTick>
 800d020:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d022:	e009      	b.n	800d038 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d024:	f7fa f912 	bl	800724c <HAL_GetTick>
 800d028:	4602      	mov	r2, r0
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	1ad3      	subs	r3, r2, r3
 800d02e:	2b02      	cmp	r3, #2
 800d030:	d902      	bls.n	800d038 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800d032:	2303      	movs	r3, #3
 800d034:	73fb      	strb	r3, [r7, #15]
        break;
 800d036:	e005      	b.n	800d044 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d038:	4b2b      	ldr	r3, [pc, #172]	; (800d0e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d040:	2b00      	cmp	r3, #0
 800d042:	d1ef      	bne.n	800d024 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800d044:	7bfb      	ldrb	r3, [r7, #15]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d149      	bne.n	800d0de <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d110      	bne.n	800d072 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d050:	4b25      	ldr	r3, [pc, #148]	; (800d0e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d052:	695b      	ldr	r3, [r3, #20]
 800d054:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800d058:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d05c:	687a      	ldr	r2, [r7, #4]
 800d05e:	6892      	ldr	r2, [r2, #8]
 800d060:	0211      	lsls	r1, r2, #8
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	68d2      	ldr	r2, [r2, #12]
 800d066:	06d2      	lsls	r2, r2, #27
 800d068:	430a      	orrs	r2, r1
 800d06a:	491f      	ldr	r1, [pc, #124]	; (800d0e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d06c:	4313      	orrs	r3, r2
 800d06e:	614b      	str	r3, [r1, #20]
 800d070:	e011      	b.n	800d096 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d072:	4b1d      	ldr	r3, [pc, #116]	; (800d0e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d074:	695b      	ldr	r3, [r3, #20]
 800d076:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800d07a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	6892      	ldr	r2, [r2, #8]
 800d082:	0211      	lsls	r1, r2, #8
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	6912      	ldr	r2, [r2, #16]
 800d088:	0852      	lsrs	r2, r2, #1
 800d08a:	3a01      	subs	r2, #1
 800d08c:	0652      	lsls	r2, r2, #25
 800d08e:	430a      	orrs	r2, r1
 800d090:	4915      	ldr	r1, [pc, #84]	; (800d0e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d092:	4313      	orrs	r3, r2
 800d094:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800d096:	4b14      	ldr	r3, [pc, #80]	; (800d0e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4a13      	ldr	r2, [pc, #76]	; (800d0e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d09c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0a0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d0a2:	f7fa f8d3 	bl	800724c <HAL_GetTick>
 800d0a6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d0a8:	e009      	b.n	800d0be <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d0aa:	f7fa f8cf 	bl	800724c <HAL_GetTick>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	1ad3      	subs	r3, r2, r3
 800d0b4:	2b02      	cmp	r3, #2
 800d0b6:	d902      	bls.n	800d0be <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800d0b8:	2303      	movs	r3, #3
 800d0ba:	73fb      	strb	r3, [r7, #15]
          break;
 800d0bc:	e005      	b.n	800d0ca <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d0be:	4b0a      	ldr	r3, [pc, #40]	; (800d0e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d0ef      	beq.n	800d0aa <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800d0ca:	7bfb      	ldrb	r3, [r7, #15]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d106      	bne.n	800d0de <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800d0d0:	4b05      	ldr	r3, [pc, #20]	; (800d0e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d0d2:	695a      	ldr	r2, [r3, #20]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	695b      	ldr	r3, [r3, #20]
 800d0d8:	4903      	ldr	r1, [pc, #12]	; (800d0e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d0da:	4313      	orrs	r3, r2
 800d0dc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800d0de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3710      	adds	r7, #16
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}
 800d0e8:	40021000 	.word	0x40021000

0800d0ec <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b089      	sub	sp, #36	; 0x24
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800d0fe:	2300      	movs	r3, #0
 800d100:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d108:	d10c      	bne.n	800d124 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800d10a:	4b77      	ldr	r3, [pc, #476]	; (800d2e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d10c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d110:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800d114:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800d116:	69bb      	ldr	r3, [r7, #24]
 800d118:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800d11c:	d112      	bne.n	800d144 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d11e:	4b73      	ldr	r3, [pc, #460]	; (800d2ec <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800d120:	61fb      	str	r3, [r7, #28]
 800d122:	e00f      	b.n	800d144 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d12a:	d10b      	bne.n	800d144 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800d12c:	4b6e      	ldr	r3, [pc, #440]	; (800d2e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d12e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d132:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800d136:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800d138:	69bb      	ldr	r3, [r7, #24]
 800d13a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d13e:	d101      	bne.n	800d144 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800d140:	4b6a      	ldr	r3, [pc, #424]	; (800d2ec <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800d142:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800d144:	69fb      	ldr	r3, [r7, #28]
 800d146:	2b00      	cmp	r3, #0
 800d148:	f040 80c6 	bne.w	800d2d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800d150:	69bb      	ldr	r3, [r7, #24]
 800d152:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d156:	d003      	beq.n	800d160 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800d158:	69bb      	ldr	r3, [r7, #24]
 800d15a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d15e:	d13b      	bne.n	800d1d8 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800d160:	4b61      	ldr	r3, [pc, #388]	; (800d2e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d168:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d16c:	f040 80b3 	bne.w	800d2d6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 800d170:	4b5d      	ldr	r3, [pc, #372]	; (800d2e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d172:	68db      	ldr	r3, [r3, #12]
 800d174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d178:	2b00      	cmp	r3, #0
 800d17a:	f000 80ac 	beq.w	800d2d6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800d17e:	4b5a      	ldr	r3, [pc, #360]	; (800d2e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d180:	68db      	ldr	r3, [r3, #12]
 800d182:	091b      	lsrs	r3, r3, #4
 800d184:	f003 0307 	and.w	r3, r3, #7
 800d188:	3301      	adds	r3, #1
 800d18a:	693a      	ldr	r2, [r7, #16]
 800d18c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d190:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800d192:	4b55      	ldr	r3, [pc, #340]	; (800d2e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d194:	68db      	ldr	r3, [r3, #12]
 800d196:	0a1b      	lsrs	r3, r3, #8
 800d198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d19c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800d19e:	4b52      	ldr	r3, [pc, #328]	; (800d2e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d1a0:	68db      	ldr	r3, [r3, #12]
 800d1a2:	0edb      	lsrs	r3, r3, #27
 800d1a4:	f003 031f 	and.w	r3, r3, #31
 800d1a8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d10a      	bne.n	800d1c6 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800d1b0:	4b4d      	ldr	r3, [pc, #308]	; (800d2e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d1b2:	68db      	ldr	r3, [r3, #12]
 800d1b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d002      	beq.n	800d1c2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 800d1bc:	2311      	movs	r3, #17
 800d1be:	617b      	str	r3, [r7, #20]
 800d1c0:	e001      	b.n	800d1c6 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 800d1c2:	2307      	movs	r3, #7
 800d1c4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	68fa      	ldr	r2, [r7, #12]
 800d1ca:	fb03 f202 	mul.w	r2, r3, r2
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1d4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800d1d6:	e07e      	b.n	800d2d6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800d1d8:	69bb      	ldr	r3, [r7, #24]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d139      	bne.n	800d252 <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800d1de:	4b42      	ldr	r3, [pc, #264]	; (800d2e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d1ea:	d175      	bne.n	800d2d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 800d1ec:	4b3e      	ldr	r3, [pc, #248]	; (800d2e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d1ee:	691b      	ldr	r3, [r3, #16]
 800d1f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d06f      	beq.n	800d2d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800d1f8:	4b3b      	ldr	r3, [pc, #236]	; (800d2e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d1fa:	68db      	ldr	r3, [r3, #12]
 800d1fc:	091b      	lsrs	r3, r3, #4
 800d1fe:	f003 0307 	and.w	r3, r3, #7
 800d202:	3301      	adds	r3, #1
 800d204:	693a      	ldr	r2, [r7, #16]
 800d206:	fbb2 f3f3 	udiv	r3, r2, r3
 800d20a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800d20c:	4b36      	ldr	r3, [pc, #216]	; (800d2e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d20e:	691b      	ldr	r3, [r3, #16]
 800d210:	0a1b      	lsrs	r3, r3, #8
 800d212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d216:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800d218:	4b33      	ldr	r3, [pc, #204]	; (800d2e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d21a:	691b      	ldr	r3, [r3, #16]
 800d21c:	0edb      	lsrs	r3, r3, #27
 800d21e:	f003 031f 	and.w	r3, r3, #31
 800d222:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d10a      	bne.n	800d240 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800d22a:	4b2f      	ldr	r3, [pc, #188]	; (800d2e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d22c:	691b      	ldr	r3, [r3, #16]
 800d22e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d232:	2b00      	cmp	r3, #0
 800d234:	d002      	beq.n	800d23c <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 800d236:	2311      	movs	r3, #17
 800d238:	617b      	str	r3, [r7, #20]
 800d23a:	e001      	b.n	800d240 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 800d23c:	2307      	movs	r3, #7
 800d23e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	68fa      	ldr	r2, [r7, #12]
 800d244:	fb03 f202 	mul.w	r2, r3, r2
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d24e:	61fb      	str	r3, [r7, #28]
 800d250:	e042      	b.n	800d2d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800d252:	69bb      	ldr	r3, [r7, #24]
 800d254:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d258:	d003      	beq.n	800d262 <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 800d25a:	69bb      	ldr	r3, [r7, #24]
 800d25c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d260:	d13a      	bne.n	800d2d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800d262:	4b21      	ldr	r3, [pc, #132]	; (800d2e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d26a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d26e:	d133      	bne.n	800d2d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 800d270:	4b1d      	ldr	r3, [pc, #116]	; (800d2e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d272:	695b      	ldr	r3, [r3, #20]
 800d274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d02d      	beq.n	800d2d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800d27c:	4b1a      	ldr	r3, [pc, #104]	; (800d2e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d27e:	68db      	ldr	r3, [r3, #12]
 800d280:	091b      	lsrs	r3, r3, #4
 800d282:	f003 0307 	and.w	r3, r3, #7
 800d286:	3301      	adds	r3, #1
 800d288:	693a      	ldr	r2, [r7, #16]
 800d28a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d28e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800d290:	4b15      	ldr	r3, [pc, #84]	; (800d2e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d292:	695b      	ldr	r3, [r3, #20]
 800d294:	0a1b      	lsrs	r3, r3, #8
 800d296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d29a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800d29c:	4b12      	ldr	r3, [pc, #72]	; (800d2e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d29e:	695b      	ldr	r3, [r3, #20]
 800d2a0:	0edb      	lsrs	r3, r3, #27
 800d2a2:	f003 031f 	and.w	r3, r3, #31
 800d2a6:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d10a      	bne.n	800d2c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800d2ae:	4b0e      	ldr	r3, [pc, #56]	; (800d2e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d2b0:	695b      	ldr	r3, [r3, #20]
 800d2b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d002      	beq.n	800d2c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 800d2ba:	2311      	movs	r3, #17
 800d2bc:	617b      	str	r3, [r7, #20]
 800d2be:	e001      	b.n	800d2c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 800d2c0:	2307      	movs	r3, #7
 800d2c2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800d2c4:	693b      	ldr	r3, [r7, #16]
 800d2c6:	68fa      	ldr	r2, [r7, #12]
 800d2c8:	fb03 f202 	mul.w	r2, r3, r2
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2d2:	61fb      	str	r3, [r7, #28]
 800d2d4:	e000      	b.n	800d2d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800d2d6:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800d2d8:	69fb      	ldr	r3, [r7, #28]
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3724      	adds	r7, #36	; 0x24
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e4:	4770      	bx	lr
 800d2e6:	bf00      	nop
 800d2e8:	40021000 	.word	0x40021000
 800d2ec:	001fff68 	.word	0x001fff68

0800d2f0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b088      	sub	sp, #32
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d101      	bne.n	800d302 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800d2fe:	2301      	movs	r3, #1
 800d300:	e155      	b.n	800d5ae <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d106      	bne.n	800d31c <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2200      	movs	r2, #0
 800d312:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f7f4 fbf8 	bl	8001b0c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f000 f959 	bl	800d5d4 <SAI_Disable>
 800d322:	4603      	mov	r3, r0
 800d324:	2b00      	cmp	r3, #0
 800d326:	d001      	beq.n	800d32c <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 800d328:	2301      	movs	r3, #1
 800d32a:	e140      	b.n	800d5ae <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2202      	movs	r2, #2
 800d330:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	68db      	ldr	r3, [r3, #12]
 800d338:	2b02      	cmp	r3, #2
 800d33a:	d00c      	beq.n	800d356 <HAL_SAI_Init+0x66>
 800d33c:	2b02      	cmp	r3, #2
 800d33e:	d80d      	bhi.n	800d35c <HAL_SAI_Init+0x6c>
 800d340:	2b00      	cmp	r3, #0
 800d342:	d002      	beq.n	800d34a <HAL_SAI_Init+0x5a>
 800d344:	2b01      	cmp	r3, #1
 800d346:	d003      	beq.n	800d350 <HAL_SAI_Init+0x60>
 800d348:	e008      	b.n	800d35c <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800d34a:	2300      	movs	r3, #0
 800d34c:	61fb      	str	r3, [r7, #28]
      break;
 800d34e:	e008      	b.n	800d362 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800d350:	2310      	movs	r3, #16
 800d352:	61fb      	str	r3, [r7, #28]
      break;
 800d354:	e005      	b.n	800d362 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800d356:	2320      	movs	r3, #32
 800d358:	61fb      	str	r3, [r7, #28]
      break;
 800d35a:	e002      	b.n	800d362 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 800d35c:	2300      	movs	r3, #0
 800d35e:	61fb      	str	r3, [r7, #28]
      break;
 800d360:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	689b      	ldr	r3, [r3, #8]
 800d366:	2b03      	cmp	r3, #3
 800d368:	d81d      	bhi.n	800d3a6 <HAL_SAI_Init+0xb6>
 800d36a:	a201      	add	r2, pc, #4	; (adr r2, 800d370 <HAL_SAI_Init+0x80>)
 800d36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d370:	0800d381 	.word	0x0800d381
 800d374:	0800d387 	.word	0x0800d387
 800d378:	0800d38f 	.word	0x0800d38f
 800d37c:	0800d397 	.word	0x0800d397
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800d380:	2300      	movs	r3, #0
 800d382:	617b      	str	r3, [r7, #20]
      break;
 800d384:	e012      	b.n	800d3ac <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800d386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d38a:	617b      	str	r3, [r7, #20]
      break;
 800d38c:	e00e      	b.n	800d3ac <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d38e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d392:	617b      	str	r3, [r7, #20]
      break;
 800d394:	e00a      	b.n	800d3ac <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d396:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d39a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800d39c:	69fb      	ldr	r3, [r7, #28]
 800d39e:	f043 0301 	orr.w	r3, r3, #1
 800d3a2:	61fb      	str	r3, [r7, #28]
      break;
 800d3a4:	e002      	b.n	800d3ac <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	617b      	str	r3, [r7, #20]
      break;
 800d3aa:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	4a81      	ldr	r2, [pc, #516]	; (800d5b8 <HAL_SAI_Init+0x2c8>)
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	d004      	beq.n	800d3c0 <HAL_SAI_Init+0xd0>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	4a80      	ldr	r2, [pc, #512]	; (800d5bc <HAL_SAI_Init+0x2cc>)
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	d103      	bne.n	800d3c8 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 800d3c0:	4a7f      	ldr	r2, [pc, #508]	; (800d5c0 <HAL_SAI_Init+0x2d0>)
 800d3c2:	69fb      	ldr	r3, [r7, #28]
 800d3c4:	6013      	str	r3, [r2, #0]
 800d3c6:	e002      	b.n	800d3ce <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800d3c8:	4a7e      	ldr	r2, [pc, #504]	; (800d5c4 <HAL_SAI_Init+0x2d4>)
 800d3ca:	69fb      	ldr	r3, [r7, #28]
 800d3cc:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	69db      	ldr	r3, [r3, #28]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d041      	beq.n	800d45a <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4a77      	ldr	r2, [pc, #476]	; (800d5b8 <HAL_SAI_Init+0x2c8>)
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d004      	beq.n	800d3ea <HAL_SAI_Init+0xfa>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4a75      	ldr	r2, [pc, #468]	; (800d5bc <HAL_SAI_Init+0x2cc>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d105      	bne.n	800d3f6 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800d3ea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800d3ee:	f7fe fee7 	bl	800c1c0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d3f2:	6138      	str	r0, [r7, #16]
 800d3f4:	e004      	b.n	800d400 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800d3f6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800d3fa:	f7fe fee1 	bl	800c1c0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d3fe:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 800d400:	693a      	ldr	r2, [r7, #16]
 800d402:	4613      	mov	r3, r2
 800d404:	009b      	lsls	r3, r3, #2
 800d406:	4413      	add	r3, r2
 800d408:	005b      	lsls	r3, r3, #1
 800d40a:	461a      	mov	r2, r3
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	69db      	ldr	r3, [r3, #28]
 800d410:	025b      	lsls	r3, r3, #9
 800d412:	fbb2 f3f3 	udiv	r3, r2, r3
 800d416:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	4a6b      	ldr	r2, [pc, #428]	; (800d5c8 <HAL_SAI_Init+0x2d8>)
 800d41c:	fba2 2303 	umull	r2, r3, r2, r3
 800d420:	08da      	lsrs	r2, r3, #3
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800d426:	68f9      	ldr	r1, [r7, #12]
 800d428:	4b67      	ldr	r3, [pc, #412]	; (800d5c8 <HAL_SAI_Init+0x2d8>)
 800d42a:	fba3 2301 	umull	r2, r3, r3, r1
 800d42e:	08da      	lsrs	r2, r3, #3
 800d430:	4613      	mov	r3, r2
 800d432:	009b      	lsls	r3, r3, #2
 800d434:	4413      	add	r3, r2
 800d436:	005b      	lsls	r3, r3, #1
 800d438:	1aca      	subs	r2, r1, r3
 800d43a:	2a08      	cmp	r2, #8
 800d43c:	d904      	bls.n	800d448 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6a1b      	ldr	r3, [r3, #32]
 800d442:	1c5a      	adds	r2, r3, #1
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d44c:	2b04      	cmp	r3, #4
 800d44e:	d104      	bne.n	800d45a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6a1b      	ldr	r3, [r3, #32]
 800d454:	085a      	lsrs	r2, r3, #1
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	685b      	ldr	r3, [r3, #4]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d003      	beq.n	800d46a <HAL_SAI_Init+0x17a>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	685b      	ldr	r3, [r3, #4]
 800d466:	2b02      	cmp	r3, #2
 800d468:	d109      	bne.n	800d47e <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d46e:	2b01      	cmp	r3, #1
 800d470:	d101      	bne.n	800d476 <HAL_SAI_Init+0x186>
 800d472:	2300      	movs	r3, #0
 800d474:	e001      	b.n	800d47a <HAL_SAI_Init+0x18a>
 800d476:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d47a:	61bb      	str	r3, [r7, #24]
 800d47c:	e008      	b.n	800d490 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d482:	2b01      	cmp	r3, #1
 800d484:	d102      	bne.n	800d48c <HAL_SAI_Init+0x19c>
 800d486:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d48a:	e000      	b.n	800d48e <HAL_SAI_Init+0x19e>
 800d48c:	2300      	movs	r3, #0
 800d48e:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	6819      	ldr	r1, [r3, #0]
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	4b4c      	ldr	r3, [pc, #304]	; (800d5cc <HAL_SAI_Init+0x2dc>)
 800d49c:	400b      	ands	r3, r1
 800d49e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	6819      	ldr	r1, [r3, #0]
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	685a      	ldr	r2, [r3, #4]
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4ae:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d4b4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ba:	431a      	orrs	r2, r3
 800d4bc:	69bb      	ldr	r3, [r7, #24]
 800d4be:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 800d4c8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	691b      	ldr	r3, [r3, #16]
 800d4ce:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d4d4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6a1b      	ldr	r3, [r3, #32]
 800d4da:	051b      	lsls	r3, r3, #20
 800d4dc:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	430a      	orrs	r2, r1
 800d4e4:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	685b      	ldr	r3, [r3, #4]
 800d4ec:	687a      	ldr	r2, [r7, #4]
 800d4ee:	6812      	ldr	r2, [r2, #0]
 800d4f0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800d4f4:	f023 030f 	bic.w	r3, r3, #15
 800d4f8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	6859      	ldr	r1, [r3, #4]
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	699a      	ldr	r2, [r3, #24]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d508:	431a      	orrs	r2, r3
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d50e:	431a      	orrs	r2, r3
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	430a      	orrs	r2, r1
 800d516:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	6899      	ldr	r1, [r3, #8]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	4b2b      	ldr	r3, [pc, #172]	; (800d5d0 <HAL_SAI_Init+0x2e0>)
 800d524:	400b      	ands	r3, r1
 800d526:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	6899      	ldr	r1, [r3, #8]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d532:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d538:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800d53e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800d544:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d54a:	3b01      	subs	r3, #1
 800d54c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800d54e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	430a      	orrs	r2, r1
 800d556:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	68d9      	ldr	r1, [r3, #12]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681a      	ldr	r2, [r3, #0]
 800d562:	f24f 0320 	movw	r3, #61472	; 0xf020
 800d566:	400b      	ands	r3, r1
 800d568:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	68d9      	ldr	r1, [r3, #12]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d578:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d57e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d580:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d586:	3b01      	subs	r3, #1
 800d588:	021b      	lsls	r3, r3, #8
 800d58a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	430a      	orrs	r2, r1
 800d592:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2200      	movs	r2, #0
 800d598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d5ac:	2300      	movs	r3, #0
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3720      	adds	r7, #32
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}
 800d5b6:	bf00      	nop
 800d5b8:	40015404 	.word	0x40015404
 800d5bc:	40015424 	.word	0x40015424
 800d5c0:	40015400 	.word	0x40015400
 800d5c4:	40015800 	.word	0x40015800
 800d5c8:	cccccccd 	.word	0xcccccccd
 800d5cc:	ff05c010 	.word	0xff05c010
 800d5d0:	fff88000 	.word	0xfff88000

0800d5d4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b085      	sub	sp, #20
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800d5dc:	4b18      	ldr	r3, [pc, #96]	; (800d640 <SAI_Disable+0x6c>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4a18      	ldr	r2, [pc, #96]	; (800d644 <SAI_Disable+0x70>)
 800d5e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d5e6:	0b1b      	lsrs	r3, r3, #12
 800d5e8:	009b      	lsls	r3, r3, #2
 800d5ea:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	681a      	ldr	r2, [r3, #0]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d5fe:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d10a      	bne.n	800d61c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d60c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800d616:	2303      	movs	r3, #3
 800d618:	72fb      	strb	r3, [r7, #11]
      break;
 800d61a:	e009      	b.n	800d630 <SAI_Disable+0x5c>
    }
    count--;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	3b01      	subs	r3, #1
 800d620:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d1e7      	bne.n	800d600 <SAI_Disable+0x2c>

  return status;
 800d630:	7afb      	ldrb	r3, [r7, #11]
}
 800d632:	4618      	mov	r0, r3
 800d634:	3714      	adds	r7, #20
 800d636:	46bd      	mov	sp, r7
 800d638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63c:	4770      	bx	lr
 800d63e:	bf00      	nop
 800d640:	20000194 	.word	0x20000194
 800d644:	95cbec1b 	.word	0x95cbec1b

0800d648 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b082      	sub	sp, #8
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d101      	bne.n	800d65a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d656:	2301      	movs	r3, #1
 800d658:	e022      	b.n	800d6a0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d660:	b2db      	uxtb	r3, r3
 800d662:	2b00      	cmp	r3, #0
 800d664:	d105      	bne.n	800d672 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2200      	movs	r2, #0
 800d66a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f7f4 faf7 	bl	8001c60 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2203      	movs	r2, #3
 800d676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f000 f814 	bl	800d6a8 <HAL_SD_InitCard>
 800d680:	4603      	mov	r3, r0
 800d682:	2b00      	cmp	r3, #0
 800d684:	d001      	beq.n	800d68a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d686:	2301      	movs	r3, #1
 800d688:	e00a      	b.n	800d6a0 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2200      	movs	r2, #0
 800d68e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2200      	movs	r2, #0
 800d694:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2201      	movs	r2, #1
 800d69a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d69e:	2300      	movs	r3, #0
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3708      	adds	r7, #8
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d6a8:	b5b0      	push	{r4, r5, r7, lr}
 800d6aa:	b08e      	sub	sp, #56	; 0x38
 800d6ac:	af04      	add	r7, sp, #16
 800d6ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800d6c4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800d6c8:	f7fe fd7a 	bl	800c1c0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d6cc:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d109      	bne.n	800d6e8 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d6e2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	e07b      	b.n	800d7e0 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 800d6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ea:	09db      	lsrs	r3, r3, #7
 800d6ec:	4a3e      	ldr	r2, [pc, #248]	; (800d7e8 <HAL_SD_InitCard+0x140>)
 800d6ee:	fba2 2303 	umull	r2, r3, r2, r3
 800d6f2:	091b      	lsrs	r3, r3, #4
 800d6f4:	3b02      	subs	r3, #2
 800d6f6:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681d      	ldr	r5, [r3, #0]
 800d6fc:	466c      	mov	r4, sp
 800d6fe:	f107 0314 	add.w	r3, r7, #20
 800d702:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d706:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d70a:	f107 0308 	add.w	r3, r7, #8
 800d70e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d710:	4628      	mov	r0, r5
 800d712:	f001 ff93 	bl	800f63c <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	685a      	ldr	r2, [r3, #4]
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d724:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	4618      	mov	r0, r3
 800d72c:	f001 ffc0 	bl	800f6b0 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	685a      	ldr	r2, [r3, #4]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d73e:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 800d740:	69fb      	ldr	r3, [r7, #28]
 800d742:	3302      	adds	r3, #2
 800d744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d746:	fbb2 f3f3 	udiv	r3, r2, r3
 800d74a:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800d74c:	4a27      	ldr	r2, [pc, #156]	; (800d7ec <HAL_SD_InitCard+0x144>)
 800d74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d750:	fbb2 f3f3 	udiv	r3, r2, r3
 800d754:	3301      	adds	r3, #1
 800d756:	4618      	mov	r0, r3
 800d758:	f7f9 fd84 	bl	8007264 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f000 fb77 	bl	800de50 <SD_PowerON>
 800d762:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d764:	6a3b      	ldr	r3, [r7, #32]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d00b      	beq.n	800d782 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2201      	movs	r2, #1
 800d76e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d776:	6a3b      	ldr	r3, [r7, #32]
 800d778:	431a      	orrs	r2, r3
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d77e:	2301      	movs	r3, #1
 800d780:	e02e      	b.n	800d7e0 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f000 fa96 	bl	800dcb4 <SD_InitCard>
 800d788:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d78a:	6a3b      	ldr	r3, [r7, #32]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d00b      	beq.n	800d7a8 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2201      	movs	r2, #1
 800d794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d79c:	6a3b      	ldr	r3, [r7, #32]
 800d79e:	431a      	orrs	r2, r3
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	e01b      	b.n	800d7e0 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f002 f810 	bl	800f7d6 <SDMMC_CmdBlockLength>
 800d7b6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d7b8:	6a3b      	ldr	r3, [r7, #32]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d00f      	beq.n	800d7de <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	4a0b      	ldr	r2, [pc, #44]	; (800d7f0 <HAL_SD_InitCard+0x148>)
 800d7c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7ca:	6a3b      	ldr	r3, [r7, #32]
 800d7cc:	431a      	orrs	r2, r3
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2201      	movs	r2, #1
 800d7d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d7da:	2301      	movs	r3, #1
 800d7dc:	e000      	b.n	800d7e0 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 800d7de:	2300      	movs	r3, #0
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3728      	adds	r7, #40	; 0x28
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bdb0      	pop	{r4, r5, r7, pc}
 800d7e8:	014f8b59 	.word	0x014f8b59
 800d7ec:	00012110 	.word	0x00012110
 800d7f0:	004005ff 	.word	0x004005ff

0800d7f4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b083      	sub	sp, #12
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d802:	0f9b      	lsrs	r3, r3, #30
 800d804:	b2da      	uxtb	r2, r3
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d80e:	0e9b      	lsrs	r3, r3, #26
 800d810:	b2db      	uxtb	r3, r3
 800d812:	f003 030f 	and.w	r3, r3, #15
 800d816:	b2da      	uxtb	r2, r3
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d820:	0e1b      	lsrs	r3, r3, #24
 800d822:	b2db      	uxtb	r3, r3
 800d824:	f003 0303 	and.w	r3, r3, #3
 800d828:	b2da      	uxtb	r2, r3
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d832:	0c1b      	lsrs	r3, r3, #16
 800d834:	b2da      	uxtb	r2, r3
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d83e:	0a1b      	lsrs	r3, r3, #8
 800d840:	b2da      	uxtb	r2, r3
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d84a:	b2da      	uxtb	r2, r3
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d854:	0d1b      	lsrs	r3, r3, #20
 800d856:	b29a      	uxth	r2, r3
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d860:	0c1b      	lsrs	r3, r3, #16
 800d862:	b2db      	uxtb	r3, r3
 800d864:	f003 030f 	and.w	r3, r3, #15
 800d868:	b2da      	uxtb	r2, r3
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d872:	0bdb      	lsrs	r3, r3, #15
 800d874:	b2db      	uxtb	r3, r3
 800d876:	f003 0301 	and.w	r3, r3, #1
 800d87a:	b2da      	uxtb	r2, r3
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d884:	0b9b      	lsrs	r3, r3, #14
 800d886:	b2db      	uxtb	r3, r3
 800d888:	f003 0301 	and.w	r3, r3, #1
 800d88c:	b2da      	uxtb	r2, r3
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d896:	0b5b      	lsrs	r3, r3, #13
 800d898:	b2db      	uxtb	r3, r3
 800d89a:	f003 0301 	and.w	r3, r3, #1
 800d89e:	b2da      	uxtb	r2, r3
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8a8:	0b1b      	lsrs	r3, r3, #12
 800d8aa:	b2db      	uxtb	r3, r3
 800d8ac:	f003 0301 	and.w	r3, r3, #1
 800d8b0:	b2da      	uxtb	r2, r3
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d163      	bne.n	800d98c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8c8:	009a      	lsls	r2, r3, #2
 800d8ca:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d8ce:	4013      	ands	r3, r2
 800d8d0:	687a      	ldr	r2, [r7, #4]
 800d8d2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d8d4:	0f92      	lsrs	r2, r2, #30
 800d8d6:	431a      	orrs	r2, r3
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8e0:	0edb      	lsrs	r3, r3, #27
 800d8e2:	b2db      	uxtb	r3, r3
 800d8e4:	f003 0307 	and.w	r3, r3, #7
 800d8e8:	b2da      	uxtb	r2, r3
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8f2:	0e1b      	lsrs	r3, r3, #24
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	f003 0307 	and.w	r3, r3, #7
 800d8fa:	b2da      	uxtb	r2, r3
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d904:	0d5b      	lsrs	r3, r3, #21
 800d906:	b2db      	uxtb	r3, r3
 800d908:	f003 0307 	and.w	r3, r3, #7
 800d90c:	b2da      	uxtb	r2, r3
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d916:	0c9b      	lsrs	r3, r3, #18
 800d918:	b2db      	uxtb	r3, r3
 800d91a:	f003 0307 	and.w	r3, r3, #7
 800d91e:	b2da      	uxtb	r2, r3
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d928:	0bdb      	lsrs	r3, r3, #15
 800d92a:	b2db      	uxtb	r3, r3
 800d92c:	f003 0307 	and.w	r3, r3, #7
 800d930:	b2da      	uxtb	r2, r3
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	691b      	ldr	r3, [r3, #16]
 800d93a:	1c5a      	adds	r2, r3, #1
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	7e1b      	ldrb	r3, [r3, #24]
 800d944:	b2db      	uxtb	r3, r3
 800d946:	f003 0307 	and.w	r3, r3, #7
 800d94a:	3302      	adds	r3, #2
 800d94c:	2201      	movs	r2, #1
 800d94e:	fa02 f303 	lsl.w	r3, r2, r3
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d956:	fb03 f202 	mul.w	r2, r3, r2
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	7a1b      	ldrb	r3, [r3, #8]
 800d962:	b2db      	uxtb	r3, r3
 800d964:	f003 030f 	and.w	r3, r3, #15
 800d968:	2201      	movs	r2, #1
 800d96a:	409a      	lsls	r2, r3
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d974:	687a      	ldr	r2, [r7, #4]
 800d976:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d978:	0a52      	lsrs	r2, r2, #9
 800d97a:	fb03 f202 	mul.w	r2, r3, r2
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d988:	661a      	str	r2, [r3, #96]	; 0x60
 800d98a:	e031      	b.n	800d9f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d990:	2b01      	cmp	r3, #1
 800d992:	d11d      	bne.n	800d9d0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d998:	041b      	lsls	r3, r3, #16
 800d99a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9a2:	0c1b      	lsrs	r3, r3, #16
 800d9a4:	431a      	orrs	r2, r3
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	691b      	ldr	r3, [r3, #16]
 800d9ae:	3301      	adds	r3, #1
 800d9b0:	029a      	lsls	r2, r3, #10
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d9c4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	661a      	str	r2, [r3, #96]	; 0x60
 800d9ce:	e00f      	b.n	800d9f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	4a58      	ldr	r2, [pc, #352]	; (800db38 <HAL_SD_GetCardCSD+0x344>)
 800d9d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	e09d      	b.n	800db2c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9f4:	0b9b      	lsrs	r3, r3, #14
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	f003 0301 	and.w	r3, r3, #1
 800d9fc:	b2da      	uxtb	r2, r3
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da06:	09db      	lsrs	r3, r3, #7
 800da08:	b2db      	uxtb	r3, r3
 800da0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da0e:	b2da      	uxtb	r2, r3
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da18:	b2db      	uxtb	r3, r3
 800da1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da1e:	b2da      	uxtb	r2, r3
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da28:	0fdb      	lsrs	r3, r3, #31
 800da2a:	b2da      	uxtb	r2, r3
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da34:	0f5b      	lsrs	r3, r3, #29
 800da36:	b2db      	uxtb	r3, r3
 800da38:	f003 0303 	and.w	r3, r3, #3
 800da3c:	b2da      	uxtb	r2, r3
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da46:	0e9b      	lsrs	r3, r3, #26
 800da48:	b2db      	uxtb	r3, r3
 800da4a:	f003 0307 	and.w	r3, r3, #7
 800da4e:	b2da      	uxtb	r2, r3
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da58:	0d9b      	lsrs	r3, r3, #22
 800da5a:	b2db      	uxtb	r3, r3
 800da5c:	f003 030f 	and.w	r3, r3, #15
 800da60:	b2da      	uxtb	r2, r3
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da6a:	0d5b      	lsrs	r3, r3, #21
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	f003 0301 	and.w	r3, r3, #1
 800da72:	b2da      	uxtb	r2, r3
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	2200      	movs	r2, #0
 800da7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da86:	0c1b      	lsrs	r3, r3, #16
 800da88:	b2db      	uxtb	r3, r3
 800da8a:	f003 0301 	and.w	r3, r3, #1
 800da8e:	b2da      	uxtb	r2, r3
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da9a:	0bdb      	lsrs	r3, r3, #15
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	f003 0301 	and.w	r3, r3, #1
 800daa2:	b2da      	uxtb	r2, r3
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daae:	0b9b      	lsrs	r3, r3, #14
 800dab0:	b2db      	uxtb	r3, r3
 800dab2:	f003 0301 	and.w	r3, r3, #1
 800dab6:	b2da      	uxtb	r2, r3
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dac2:	0b5b      	lsrs	r3, r3, #13
 800dac4:	b2db      	uxtb	r3, r3
 800dac6:	f003 0301 	and.w	r3, r3, #1
 800daca:	b2da      	uxtb	r2, r3
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dad6:	0b1b      	lsrs	r3, r3, #12
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	f003 0301 	and.w	r3, r3, #1
 800dade:	b2da      	uxtb	r2, r3
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daea:	0a9b      	lsrs	r3, r3, #10
 800daec:	b2db      	uxtb	r3, r3
 800daee:	f003 0303 	and.w	r3, r3, #3
 800daf2:	b2da      	uxtb	r2, r3
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dafe:	0a1b      	lsrs	r3, r3, #8
 800db00:	b2db      	uxtb	r3, r3
 800db02:	f003 0303 	and.w	r3, r3, #3
 800db06:	b2da      	uxtb	r2, r3
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db12:	085b      	lsrs	r3, r3, #1
 800db14:	b2db      	uxtb	r3, r3
 800db16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db1a:	b2da      	uxtb	r2, r3
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	2201      	movs	r2, #1
 800db26:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800db2a:	2300      	movs	r3, #0
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	370c      	adds	r7, #12
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr
 800db38:	004005ff 	.word	0x004005ff

0800db3c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800db3c:	b5b0      	push	{r4, r5, r7, lr}
 800db3e:	b090      	sub	sp, #64	; 0x40
 800db40:	af04      	add	r7, sp, #16
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800db46:	2300      	movs	r3, #0
 800db48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2203      	movs	r2, #3
 800db50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db58:	2b03      	cmp	r3, #3
 800db5a:	d02e      	beq.n	800dbba <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db62:	d106      	bne.n	800db72 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	639a      	str	r2, [r3, #56]	; 0x38
 800db70:	e029      	b.n	800dbc6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db78:	d10a      	bne.n	800db90 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f000 f9f6 	bl	800df6c <SD_WideBus_Enable>
 800db80:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db88:	431a      	orrs	r2, r3
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	639a      	str	r2, [r3, #56]	; 0x38
 800db8e:	e01a      	b.n	800dbc6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d10a      	bne.n	800dbac <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f000 fa33 	bl	800e002 <SD_WideBus_Disable>
 800db9c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba4:	431a      	orrs	r2, r3
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	639a      	str	r2, [r3, #56]	; 0x38
 800dbaa:	e00c      	b.n	800dbc6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbb0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	639a      	str	r2, [r3, #56]	; 0x38
 800dbb8:	e005      	b.n	800dbc6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbbe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d007      	beq.n	800dbde <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	4a35      	ldr	r2, [pc, #212]	; (800dca8 <HAL_SD_ConfigWideBusOperation+0x16c>)
 800dbd4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800dbdc:	e042      	b.n	800dc64 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800dbde:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800dbe2:	f7fe faed 	bl	800c1c0 <HAL_RCCEx_GetPeriphCLKFreq>
 800dbe6:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800dbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d031      	beq.n	800dc52 <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	685b      	ldr	r3, [r3, #4]
 800dbf2:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	689b      	ldr	r3, [r3, #8]
 800dbf8:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	68db      	ldr	r3, [r3, #12]
 800dbfe:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	695b      	ldr	r3, [r3, #20]
 800dc08:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	699b      	ldr	r3, [r3, #24]
 800dc0e:	3302      	adds	r3, #2
 800dc10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc12:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc16:	4a25      	ldr	r2, [pc, #148]	; (800dcac <HAL_SD_ConfigWideBusOperation+0x170>)
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	d907      	bls.n	800dc2c <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 800dc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc1e:	4a24      	ldr	r2, [pc, #144]	; (800dcb0 <HAL_SD_ConfigWideBusOperation+0x174>)
 800dc20:	fba2 2303 	umull	r2, r3, r2, r3
 800dc24:	0ddb      	lsrs	r3, r3, #23
 800dc26:	3b02      	subs	r3, #2
 800dc28:	623b      	str	r3, [r7, #32]
 800dc2a:	e002      	b.n	800dc32 <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	699b      	ldr	r3, [r3, #24]
 800dc30:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681d      	ldr	r5, [r3, #0]
 800dc36:	466c      	mov	r4, sp
 800dc38:	f107 0318 	add.w	r3, r7, #24
 800dc3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dc40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dc44:	f107 030c 	add.w	r3, r7, #12
 800dc48:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	f001 fcf6 	bl	800f63c <SDMMC_Init>
 800dc50:	e008      	b.n	800dc64 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800dc5e:	2301      	movs	r3, #1
 800dc60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f001 fdb2 	bl	800f7d6 <SDMMC_CmdBlockLength>
 800dc72:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d00c      	beq.n	800dc94 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	4a0a      	ldr	r2, [pc, #40]	; (800dca8 <HAL_SD_ConfigWideBusOperation+0x16c>)
 800dc80:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc88:	431a      	orrs	r2, r3
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800dc8e:	2301      	movs	r3, #1
 800dc90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2201      	movs	r2, #1
 800dc98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800dc9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3730      	adds	r7, #48	; 0x30
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bdb0      	pop	{r4, r5, r7, pc}
 800dca8:	004005ff 	.word	0x004005ff
 800dcac:	017d7840 	.word	0x017d7840
 800dcb0:	55e63b89 	.word	0x55e63b89

0800dcb4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dcb4:	b5b0      	push	{r4, r5, r7, lr}
 800dcb6:	b094      	sub	sp, #80	; 0x50
 800dcb8:	af04      	add	r7, sp, #16
 800dcba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f001 fd02 	bl	800f6ce <SDMMC_GetPowerState>
 800dcca:	4603      	mov	r3, r0
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d102      	bne.n	800dcd6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dcd0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800dcd4:	e0b8      	b.n	800de48 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcda:	2b03      	cmp	r3, #3
 800dcdc:	d02f      	beq.n	800dd3e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	4618      	mov	r0, r3
 800dce4:	f001 fe81 	bl	800f9ea <SDMMC_CmdSendCID>
 800dce8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dcea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d001      	beq.n	800dcf4 <SD_InitCard+0x40>
    {
      return errorstate;
 800dcf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcf2:	e0a9      	b.n	800de48 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	2100      	movs	r1, #0
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f001 fd2c 	bl	800f758 <SDMMC_GetResponse>
 800dd00:	4602      	mov	r2, r0
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	2104      	movs	r1, #4
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f001 fd23 	bl	800f758 <SDMMC_GetResponse>
 800dd12:	4602      	mov	r2, r0
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	2108      	movs	r1, #8
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f001 fd1a 	bl	800f758 <SDMMC_GetResponse>
 800dd24:	4602      	mov	r2, r0
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	210c      	movs	r1, #12
 800dd30:	4618      	mov	r0, r3
 800dd32:	f001 fd11 	bl	800f758 <SDMMC_GetResponse>
 800dd36:	4602      	mov	r2, r0
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd42:	2b03      	cmp	r3, #3
 800dd44:	d00d      	beq.n	800dd62 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f107 020e 	add.w	r2, r7, #14
 800dd4e:	4611      	mov	r1, r2
 800dd50:	4618      	mov	r0, r3
 800dd52:	f001 fe87 	bl	800fa64 <SDMMC_CmdSetRelAdd>
 800dd56:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dd58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d001      	beq.n	800dd62 <SD_InitCard+0xae>
    {
      return errorstate;
 800dd5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd60:	e072      	b.n	800de48 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd66:	2b03      	cmp	r3, #3
 800dd68:	d036      	beq.n	800ddd8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800dd6a:	89fb      	ldrh	r3, [r7, #14]
 800dd6c:	461a      	mov	r2, r3
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681a      	ldr	r2, [r3, #0]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd7a:	041b      	lsls	r3, r3, #16
 800dd7c:	4619      	mov	r1, r3
 800dd7e:	4610      	mov	r0, r2
 800dd80:	f001 fe51 	bl	800fa26 <SDMMC_CmdSendCSD>
 800dd84:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dd86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d001      	beq.n	800dd90 <SD_InitCard+0xdc>
    {
      return errorstate;
 800dd8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd8e:	e05b      	b.n	800de48 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	2100      	movs	r1, #0
 800dd96:	4618      	mov	r0, r3
 800dd98:	f001 fcde 	bl	800f758 <SDMMC_GetResponse>
 800dd9c:	4602      	mov	r2, r0
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	2104      	movs	r1, #4
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f001 fcd5 	bl	800f758 <SDMMC_GetResponse>
 800ddae:	4602      	mov	r2, r0
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	2108      	movs	r1, #8
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f001 fccc 	bl	800f758 <SDMMC_GetResponse>
 800ddc0:	4602      	mov	r2, r0
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	210c      	movs	r1, #12
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f001 fcc3 	bl	800f758 <SDMMC_GetResponse>
 800ddd2:	4602      	mov	r2, r0
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	2104      	movs	r1, #4
 800ddde:	4618      	mov	r0, r3
 800dde0:	f001 fcba 	bl	800f758 <SDMMC_GetResponse>
 800dde4:	4603      	mov	r3, r0
 800dde6:	0d1a      	lsrs	r2, r3, #20
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ddec:	f107 0310 	add.w	r3, r7, #16
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f7ff fcfe 	bl	800d7f4 <HAL_SD_GetCardCSD>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d002      	beq.n	800de04 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ddfe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800de02:	e021      	b.n	800de48 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6819      	ldr	r1, [r3, #0]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de0c:	041b      	lsls	r3, r3, #16
 800de0e:	2200      	movs	r2, #0
 800de10:	461c      	mov	r4, r3
 800de12:	4615      	mov	r5, r2
 800de14:	4622      	mov	r2, r4
 800de16:	462b      	mov	r3, r5
 800de18:	4608      	mov	r0, r1
 800de1a:	f001 fcfe 	bl	800f81a <SDMMC_CmdSelDesel>
 800de1e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800de20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de22:	2b00      	cmp	r3, #0
 800de24:	d001      	beq.n	800de2a <SD_InitCard+0x176>
  {
    return errorstate;
 800de26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de28:	e00e      	b.n	800de48 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681d      	ldr	r5, [r3, #0]
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	466c      	mov	r4, sp
 800de32:	f103 0210 	add.w	r2, r3, #16
 800de36:	ca07      	ldmia	r2, {r0, r1, r2}
 800de38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800de3c:	3304      	adds	r3, #4
 800de3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800de40:	4628      	mov	r0, r5
 800de42:	f001 fbfb 	bl	800f63c <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800de46:	2300      	movs	r3, #0
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3740      	adds	r7, #64	; 0x40
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bdb0      	pop	{r4, r5, r7, pc}

0800de50 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b086      	sub	sp, #24
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800de58:	2300      	movs	r3, #0
 800de5a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800de5c:	2300      	movs	r3, #0
 800de5e:	617b      	str	r3, [r7, #20]
 800de60:	2300      	movs	r3, #0
 800de62:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	4618      	mov	r0, r3
 800de6a:	f001 fcf9 	bl	800f860 <SDMMC_CmdGoIdleState>
 800de6e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d001      	beq.n	800de7a <SD_PowerON+0x2a>
  {
    return errorstate;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	e072      	b.n	800df60 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	4618      	mov	r0, r3
 800de80:	f001 fd0c 	bl	800f89c <SDMMC_CmdOperCond>
 800de84:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d00d      	beq.n	800dea8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2200      	movs	r2, #0
 800de90:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	4618      	mov	r0, r3
 800de98:	f001 fce2 	bl	800f860 <SDMMC_CmdGoIdleState>
 800de9c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d004      	beq.n	800deae <SD_PowerON+0x5e>
    {
      return errorstate;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	e05b      	b.n	800df60 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2201      	movs	r2, #1
 800deac:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800deb2:	2b01      	cmp	r3, #1
 800deb4:	d137      	bne.n	800df26 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	2100      	movs	r1, #0
 800debc:	4618      	mov	r0, r3
 800debe:	f001 fd0c 	bl	800f8da <SDMMC_CmdAppCommand>
 800dec2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d02d      	beq.n	800df26 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800deca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dece:	e047      	b.n	800df60 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	2100      	movs	r1, #0
 800ded6:	4618      	mov	r0, r3
 800ded8:	f001 fcff 	bl	800f8da <SDMMC_CmdAppCommand>
 800dedc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d001      	beq.n	800dee8 <SD_PowerON+0x98>
    {
      return errorstate;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	e03b      	b.n	800df60 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	491e      	ldr	r1, [pc, #120]	; (800df68 <SD_PowerON+0x118>)
 800deee:	4618      	mov	r0, r3
 800def0:	f001 fd15 	bl	800f91e <SDMMC_CmdAppOperCommand>
 800def4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d002      	beq.n	800df02 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800defc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800df00:	e02e      	b.n	800df60 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	2100      	movs	r1, #0
 800df08:	4618      	mov	r0, r3
 800df0a:	f001 fc25 	bl	800f758 <SDMMC_GetResponse>
 800df0e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	0fdb      	lsrs	r3, r3, #31
 800df14:	2b01      	cmp	r3, #1
 800df16:	d101      	bne.n	800df1c <SD_PowerON+0xcc>
 800df18:	2301      	movs	r3, #1
 800df1a:	e000      	b.n	800df1e <SD_PowerON+0xce>
 800df1c:	2300      	movs	r3, #0
 800df1e:	613b      	str	r3, [r7, #16]

    count++;
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	3301      	adds	r3, #1
 800df24:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d802      	bhi.n	800df36 <SD_PowerON+0xe6>
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d0cc      	beq.n	800ded0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800df3c:	4293      	cmp	r3, r2
 800df3e:	d902      	bls.n	800df46 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800df40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800df44:	e00c      	b.n	800df60 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d003      	beq.n	800df58 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2201      	movs	r2, #1
 800df54:	645a      	str	r2, [r3, #68]	; 0x44
 800df56:	e002      	b.n	800df5e <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2200      	movs	r2, #0
 800df5c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800df5e:	2300      	movs	r3, #0
}
 800df60:	4618      	mov	r0, r3
 800df62:	3718      	adds	r7, #24
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}
 800df68:	c1100000 	.word	0xc1100000

0800df6c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b086      	sub	sp, #24
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800df74:	2300      	movs	r3, #0
 800df76:	60fb      	str	r3, [r7, #12]
 800df78:	2300      	movs	r3, #0
 800df7a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	2100      	movs	r1, #0
 800df82:	4618      	mov	r0, r3
 800df84:	f001 fbe8 	bl	800f758 <SDMMC_GetResponse>
 800df88:	4603      	mov	r3, r0
 800df8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800df92:	d102      	bne.n	800df9a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800df94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800df98:	e02f      	b.n	800dffa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800df9a:	f107 030c 	add.w	r3, r7, #12
 800df9e:	4619      	mov	r1, r3
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f000 f879 	bl	800e098 <SD_FindSCR>
 800dfa6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d001      	beq.n	800dfb2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	e023      	b.n	800dffa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d01c      	beq.n	800dff6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfc4:	041b      	lsls	r3, r3, #16
 800dfc6:	4619      	mov	r1, r3
 800dfc8:	4610      	mov	r0, r2
 800dfca:	f001 fc86 	bl	800f8da <SDMMC_CmdAppCommand>
 800dfce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d001      	beq.n	800dfda <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	e00f      	b.n	800dffa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	2102      	movs	r1, #2
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f001 fcbf 	bl	800f964 <SDMMC_CmdBusWidth>
 800dfe6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d001      	beq.n	800dff2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	e003      	b.n	800dffa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dff2:	2300      	movs	r3, #0
 800dff4:	e001      	b.n	800dffa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dff6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3718      	adds	r7, #24
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}

0800e002 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e002:	b580      	push	{r7, lr}
 800e004:	b086      	sub	sp, #24
 800e006:	af00      	add	r7, sp, #0
 800e008:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e00a:	2300      	movs	r3, #0
 800e00c:	60fb      	str	r3, [r7, #12]
 800e00e:	2300      	movs	r3, #0
 800e010:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2100      	movs	r1, #0
 800e018:	4618      	mov	r0, r3
 800e01a:	f001 fb9d 	bl	800f758 <SDMMC_GetResponse>
 800e01e:	4603      	mov	r3, r0
 800e020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e024:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e028:	d102      	bne.n	800e030 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e02a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e02e:	e02f      	b.n	800e090 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e030:	f107 030c 	add.w	r3, r7, #12
 800e034:	4619      	mov	r1, r3
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f000 f82e 	bl	800e098 <SD_FindSCR>
 800e03c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d001      	beq.n	800e048 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e044:	697b      	ldr	r3, [r7, #20]
 800e046:	e023      	b.n	800e090 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d01c      	beq.n	800e08c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681a      	ldr	r2, [r3, #0]
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e05a:	041b      	lsls	r3, r3, #16
 800e05c:	4619      	mov	r1, r3
 800e05e:	4610      	mov	r0, r2
 800e060:	f001 fc3b 	bl	800f8da <SDMMC_CmdAppCommand>
 800e064:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d001      	beq.n	800e070 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	e00f      	b.n	800e090 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	2100      	movs	r1, #0
 800e076:	4618      	mov	r0, r3
 800e078:	f001 fc74 	bl	800f964 <SDMMC_CmdBusWidth>
 800e07c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d001      	beq.n	800e088 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	e003      	b.n	800e090 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e088:	2300      	movs	r3, #0
 800e08a:	e001      	b.n	800e090 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e08c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e090:	4618      	mov	r0, r3
 800e092:	3718      	adds	r7, #24
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}

0800e098 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e098:	b590      	push	{r4, r7, lr}
 800e09a:	b08f      	sub	sp, #60	; 0x3c
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e0a2:	f7f9 f8d3 	bl	800724c <HAL_GetTick>
 800e0a6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	60bb      	str	r3, [r7, #8]
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	2108      	movs	r1, #8
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f001 fb89 	bl	800f7d6 <SDMMC_CmdBlockLength>
 800e0c4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d001      	beq.n	800e0d0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ce:	e0a9      	b.n	800e224 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681a      	ldr	r2, [r3, #0]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0d8:	041b      	lsls	r3, r3, #16
 800e0da:	4619      	mov	r1, r3
 800e0dc:	4610      	mov	r0, r2
 800e0de:	f001 fbfc 	bl	800f8da <SDMMC_CmdAppCommand>
 800e0e2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d001      	beq.n	800e0ee <SD_FindSCR+0x56>
  {
    return errorstate;
 800e0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ec:	e09a      	b.n	800e224 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e0ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e0f2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e0f4:	2308      	movs	r3, #8
 800e0f6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e0f8:	2330      	movs	r3, #48	; 0x30
 800e0fa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e0fc:	2302      	movs	r3, #2
 800e0fe:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e100:	2300      	movs	r3, #0
 800e102:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e104:	2301      	movs	r3, #1
 800e106:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f107 0210 	add.w	r2, r7, #16
 800e110:	4611      	mov	r1, r2
 800e112:	4618      	mov	r0, r3
 800e114:	f001 fb33 	bl	800f77e <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	4618      	mov	r0, r3
 800e11e:	f001 fc43 	bl	800f9a8 <SDMMC_CmdSendSCR>
 800e122:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e126:	2b00      	cmp	r3, #0
 800e128:	d022      	beq.n	800e170 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800e12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12c:	e07a      	b.n	800e224 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d00e      	beq.n	800e15a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6819      	ldr	r1, [r3, #0]
 800e140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e142:	009b      	lsls	r3, r3, #2
 800e144:	f107 0208 	add.w	r2, r7, #8
 800e148:	18d4      	adds	r4, r2, r3
 800e14a:	4608      	mov	r0, r1
 800e14c:	f001 faa3 	bl	800f696 <SDMMC_ReadFIFO>
 800e150:	4603      	mov	r3, r0
 800e152:	6023      	str	r3, [r4, #0]
      index++;
 800e154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e156:	3301      	adds	r3, #1
 800e158:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e15a:	f7f9 f877 	bl	800724c <HAL_GetTick>
 800e15e:	4602      	mov	r2, r0
 800e160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e162:	1ad3      	subs	r3, r2, r3
 800e164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e168:	d102      	bne.n	800e170 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e16a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e16e:	e059      	b.n	800e224 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e176:	f240 432a 	movw	r3, #1066	; 0x42a
 800e17a:	4013      	ands	r3, r2
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d0d6      	beq.n	800e12e <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e186:	f003 0308 	and.w	r3, r3, #8
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d005      	beq.n	800e19a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2208      	movs	r2, #8
 800e194:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e196:	2308      	movs	r3, #8
 800e198:	e044      	b.n	800e224 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1a0:	f003 0302 	and.w	r3, r3, #2
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d005      	beq.n	800e1b4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	2202      	movs	r2, #2
 800e1ae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e1b0:	2302      	movs	r3, #2
 800e1b2:	e037      	b.n	800e224 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1ba:	f003 0320 	and.w	r3, r3, #32
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d005      	beq.n	800e1ce <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	2220      	movs	r2, #32
 800e1c8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e1ca:	2320      	movs	r3, #32
 800e1cc:	e02a      	b.n	800e224 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	f240 523a 	movw	r2, #1338	; 0x53a
 800e1d6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	061a      	lsls	r2, r3, #24
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	021b      	lsls	r3, r3, #8
 800e1e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e1e4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	0a1b      	lsrs	r3, r3, #8
 800e1ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e1ee:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	0e1b      	lsrs	r3, r3, #24
 800e1f4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f8:	601a      	str	r2, [r3, #0]
    scr++;
 800e1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fc:	3304      	adds	r3, #4
 800e1fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	061a      	lsls	r2, r3, #24
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	021b      	lsls	r3, r3, #8
 800e208:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e20c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	0a1b      	lsrs	r3, r3, #8
 800e212:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e216:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e218:	68bb      	ldr	r3, [r7, #8]
 800e21a:	0e1b      	lsrs	r3, r3, #24
 800e21c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e220:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e222:	2300      	movs	r3, #0
}
 800e224:	4618      	mov	r0, r3
 800e226:	373c      	adds	r7, #60	; 0x3c
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd90      	pop	{r4, r7, pc}

0800e22c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b084      	sub	sp, #16
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d101      	bne.n	800e23e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e23a:	2301      	movs	r3, #1
 800e23c:	e095      	b.n	800e36a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e242:	2b00      	cmp	r3, #0
 800e244:	d108      	bne.n	800e258 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	685b      	ldr	r3, [r3, #4]
 800e24a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e24e:	d009      	beq.n	800e264 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2200      	movs	r2, #0
 800e254:	61da      	str	r2, [r3, #28]
 800e256:	e005      	b.n	800e264 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2200      	movs	r2, #0
 800e25c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2200      	movs	r2, #0
 800e262:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2200      	movs	r2, #0
 800e268:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e270:	b2db      	uxtb	r3, r3
 800e272:	2b00      	cmp	r3, #0
 800e274:	d106      	bne.n	800e284 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2200      	movs	r2, #0
 800e27a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f7f3 fdcc 	bl	8001e1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2202      	movs	r2, #2
 800e288:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	681a      	ldr	r2, [r3, #0]
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e29a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	68db      	ldr	r3, [r3, #12]
 800e2a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e2a4:	d902      	bls.n	800e2ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	60fb      	str	r3, [r7, #12]
 800e2aa:	e002      	b.n	800e2b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e2ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e2b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	68db      	ldr	r3, [r3, #12]
 800e2b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800e2ba:	d007      	beq.n	800e2cc <HAL_SPI_Init+0xa0>
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	68db      	ldr	r3, [r3, #12]
 800e2c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e2c4:	d002      	beq.n	800e2cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	685b      	ldr	r3, [r3, #4]
 800e2d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	689b      	ldr	r3, [r3, #8]
 800e2d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e2dc:	431a      	orrs	r2, r3
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	691b      	ldr	r3, [r3, #16]
 800e2e2:	f003 0302 	and.w	r3, r3, #2
 800e2e6:	431a      	orrs	r2, r3
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	695b      	ldr	r3, [r3, #20]
 800e2ec:	f003 0301 	and.w	r3, r3, #1
 800e2f0:	431a      	orrs	r2, r3
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	699b      	ldr	r3, [r3, #24]
 800e2f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e2fa:	431a      	orrs	r2, r3
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	69db      	ldr	r3, [r3, #28]
 800e300:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e304:	431a      	orrs	r2, r3
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6a1b      	ldr	r3, [r3, #32]
 800e30a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e30e:	ea42 0103 	orr.w	r1, r2, r3
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e316:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	430a      	orrs	r2, r1
 800e320:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	699b      	ldr	r3, [r3, #24]
 800e326:	0c1b      	lsrs	r3, r3, #16
 800e328:	f003 0204 	and.w	r2, r3, #4
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e330:	f003 0310 	and.w	r3, r3, #16
 800e334:	431a      	orrs	r2, r3
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e33a:	f003 0308 	and.w	r3, r3, #8
 800e33e:	431a      	orrs	r2, r3
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	68db      	ldr	r3, [r3, #12]
 800e344:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e348:	ea42 0103 	orr.w	r1, r2, r3
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	430a      	orrs	r2, r1
 800e358:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2200      	movs	r2, #0
 800e35e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2201      	movs	r2, #1
 800e364:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800e368:	2300      	movs	r3, #0
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3710      	adds	r7, #16
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}

0800e372 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800e372:	b580      	push	{r7, lr}
 800e374:	b084      	sub	sp, #16
 800e376:	af00      	add	r7, sp, #0
 800e378:	60f8      	str	r0, [r7, #12]
 800e37a:	60b9      	str	r1, [r7, #8]
 800e37c:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d101      	bne.n	800e388 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800e384:	2301      	movs	r3, #1
 800e386:	e038      	b.n	800e3fa <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800e38e:	b2db      	uxtb	r3, r3
 800e390:	2b00      	cmp	r3, #0
 800e392:	d106      	bne.n	800e3a2 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2200      	movs	r2, #0
 800e398:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800e39c:	68f8      	ldr	r0, [r7, #12]
 800e39e:	f7f2 fdcb 	bl	8000f38 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681a      	ldr	r2, [r3, #0]
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	3308      	adds	r3, #8
 800e3aa:	4619      	mov	r1, r3
 800e3ac:	4610      	mov	r0, r2
 800e3ae:	f001 f82d 	bl	800f40c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	6818      	ldr	r0, [r3, #0]
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	689b      	ldr	r3, [r3, #8]
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	68b9      	ldr	r1, [r7, #8]
 800e3be:	f001 f8b5 	bl	800f52c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	6858      	ldr	r0, [r3, #4]
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	689a      	ldr	r2, [r3, #8]
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ce:	6879      	ldr	r1, [r7, #4]
 800e3d0:	f001 f8fc 	bl	800f5cc <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	68fa      	ldr	r2, [r7, #12]
 800e3da:	6892      	ldr	r2, [r2, #8]
 800e3dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	68fa      	ldr	r2, [r7, #12]
 800e3e6:	6892      	ldr	r2, [r2, #8]
 800e3e8:	f041 0101 	orr.w	r1, r1, #1
 800e3ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	2201      	movs	r2, #1
 800e3f4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800e3f8:	2300      	movs	r3, #0
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3710      	adds	r7, #16
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}

0800e402 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e402:	b580      	push	{r7, lr}
 800e404:	b082      	sub	sp, #8
 800e406:	af00      	add	r7, sp, #0
 800e408:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d101      	bne.n	800e414 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e410:	2301      	movs	r3, #1
 800e412:	e049      	b.n	800e4a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e41a:	b2db      	uxtb	r3, r3
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d106      	bne.n	800e42e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2200      	movs	r2, #0
 800e424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f7f3 fef5 	bl	8002218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	2202      	movs	r2, #2
 800e432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681a      	ldr	r2, [r3, #0]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	3304      	adds	r3, #4
 800e43e:	4619      	mov	r1, r3
 800e440:	4610      	mov	r0, r2
 800e442:	f000 f9ed 	bl	800e820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2201      	movs	r2, #1
 800e44a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2201      	movs	r2, #1
 800e452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2201      	movs	r2, #1
 800e45a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2201      	movs	r2, #1
 800e462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2201      	movs	r2, #1
 800e46a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2201      	movs	r2, #1
 800e472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2201      	movs	r2, #1
 800e47a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2201      	movs	r2, #1
 800e482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2201      	movs	r2, #1
 800e48a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2201      	movs	r2, #1
 800e492:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2201      	movs	r2, #1
 800e49a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2201      	movs	r2, #1
 800e4a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e4a6:	2300      	movs	r3, #0
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3708      	adds	r7, #8
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b085      	sub	sp, #20
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e4be:	b2db      	uxtb	r3, r3
 800e4c0:	2b01      	cmp	r3, #1
 800e4c2:	d001      	beq.n	800e4c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	e04f      	b.n	800e568 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2202      	movs	r2, #2
 800e4cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	68da      	ldr	r2, [r3, #12]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	f042 0201 	orr.w	r2, r2, #1
 800e4de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	4a23      	ldr	r2, [pc, #140]	; (800e574 <HAL_TIM_Base_Start_IT+0xc4>)
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d01d      	beq.n	800e526 <HAL_TIM_Base_Start_IT+0x76>
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4f2:	d018      	beq.n	800e526 <HAL_TIM_Base_Start_IT+0x76>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	4a1f      	ldr	r2, [pc, #124]	; (800e578 <HAL_TIM_Base_Start_IT+0xc8>)
 800e4fa:	4293      	cmp	r3, r2
 800e4fc:	d013      	beq.n	800e526 <HAL_TIM_Base_Start_IT+0x76>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	4a1e      	ldr	r2, [pc, #120]	; (800e57c <HAL_TIM_Base_Start_IT+0xcc>)
 800e504:	4293      	cmp	r3, r2
 800e506:	d00e      	beq.n	800e526 <HAL_TIM_Base_Start_IT+0x76>
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	4a1c      	ldr	r2, [pc, #112]	; (800e580 <HAL_TIM_Base_Start_IT+0xd0>)
 800e50e:	4293      	cmp	r3, r2
 800e510:	d009      	beq.n	800e526 <HAL_TIM_Base_Start_IT+0x76>
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	4a1b      	ldr	r2, [pc, #108]	; (800e584 <HAL_TIM_Base_Start_IT+0xd4>)
 800e518:	4293      	cmp	r3, r2
 800e51a:	d004      	beq.n	800e526 <HAL_TIM_Base_Start_IT+0x76>
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4a19      	ldr	r2, [pc, #100]	; (800e588 <HAL_TIM_Base_Start_IT+0xd8>)
 800e522:	4293      	cmp	r3, r2
 800e524:	d115      	bne.n	800e552 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	689a      	ldr	r2, [r3, #8]
 800e52c:	4b17      	ldr	r3, [pc, #92]	; (800e58c <HAL_TIM_Base_Start_IT+0xdc>)
 800e52e:	4013      	ands	r3, r2
 800e530:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2b06      	cmp	r3, #6
 800e536:	d015      	beq.n	800e564 <HAL_TIM_Base_Start_IT+0xb4>
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e53e:	d011      	beq.n	800e564 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	681a      	ldr	r2, [r3, #0]
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f042 0201 	orr.w	r2, r2, #1
 800e54e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e550:	e008      	b.n	800e564 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	681a      	ldr	r2, [r3, #0]
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	f042 0201 	orr.w	r2, r2, #1
 800e560:	601a      	str	r2, [r3, #0]
 800e562:	e000      	b.n	800e566 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e564:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e566:	2300      	movs	r3, #0
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3714      	adds	r7, #20
 800e56c:	46bd      	mov	sp, r7
 800e56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e572:	4770      	bx	lr
 800e574:	40012c00 	.word	0x40012c00
 800e578:	40000400 	.word	0x40000400
 800e57c:	40000800 	.word	0x40000800
 800e580:	40000c00 	.word	0x40000c00
 800e584:	40013400 	.word	0x40013400
 800e588:	40014000 	.word	0x40014000
 800e58c:	00010007 	.word	0x00010007

0800e590 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	691b      	ldr	r3, [r3, #16]
 800e59e:	f003 0302 	and.w	r3, r3, #2
 800e5a2:	2b02      	cmp	r3, #2
 800e5a4:	d122      	bne.n	800e5ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	68db      	ldr	r3, [r3, #12]
 800e5ac:	f003 0302 	and.w	r3, r3, #2
 800e5b0:	2b02      	cmp	r3, #2
 800e5b2:	d11b      	bne.n	800e5ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	f06f 0202 	mvn.w	r2, #2
 800e5bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2201      	movs	r2, #1
 800e5c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	699b      	ldr	r3, [r3, #24]
 800e5ca:	f003 0303 	and.w	r3, r3, #3
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d003      	beq.n	800e5da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f000 f905 	bl	800e7e2 <HAL_TIM_IC_CaptureCallback>
 800e5d8:	e005      	b.n	800e5e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f000 f8f7 	bl	800e7ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f000 f908 	bl	800e7f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	691b      	ldr	r3, [r3, #16]
 800e5f2:	f003 0304 	and.w	r3, r3, #4
 800e5f6:	2b04      	cmp	r3, #4
 800e5f8:	d122      	bne.n	800e640 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	68db      	ldr	r3, [r3, #12]
 800e600:	f003 0304 	and.w	r3, r3, #4
 800e604:	2b04      	cmp	r3, #4
 800e606:	d11b      	bne.n	800e640 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	f06f 0204 	mvn.w	r2, #4
 800e610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2202      	movs	r2, #2
 800e616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	699b      	ldr	r3, [r3, #24]
 800e61e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e622:	2b00      	cmp	r3, #0
 800e624:	d003      	beq.n	800e62e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	f000 f8db 	bl	800e7e2 <HAL_TIM_IC_CaptureCallback>
 800e62c:	e005      	b.n	800e63a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e62e:	6878      	ldr	r0, [r7, #4]
 800e630:	f000 f8cd 	bl	800e7ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f000 f8de 	bl	800e7f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2200      	movs	r2, #0
 800e63e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	691b      	ldr	r3, [r3, #16]
 800e646:	f003 0308 	and.w	r3, r3, #8
 800e64a:	2b08      	cmp	r3, #8
 800e64c:	d122      	bne.n	800e694 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	68db      	ldr	r3, [r3, #12]
 800e654:	f003 0308 	and.w	r3, r3, #8
 800e658:	2b08      	cmp	r3, #8
 800e65a:	d11b      	bne.n	800e694 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	f06f 0208 	mvn.w	r2, #8
 800e664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2204      	movs	r2, #4
 800e66a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	69db      	ldr	r3, [r3, #28]
 800e672:	f003 0303 	and.w	r3, r3, #3
 800e676:	2b00      	cmp	r3, #0
 800e678:	d003      	beq.n	800e682 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	f000 f8b1 	bl	800e7e2 <HAL_TIM_IC_CaptureCallback>
 800e680:	e005      	b.n	800e68e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f000 f8a3 	bl	800e7ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f000 f8b4 	bl	800e7f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2200      	movs	r2, #0
 800e692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	691b      	ldr	r3, [r3, #16]
 800e69a:	f003 0310 	and.w	r3, r3, #16
 800e69e:	2b10      	cmp	r3, #16
 800e6a0:	d122      	bne.n	800e6e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	68db      	ldr	r3, [r3, #12]
 800e6a8:	f003 0310 	and.w	r3, r3, #16
 800e6ac:	2b10      	cmp	r3, #16
 800e6ae:	d11b      	bne.n	800e6e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	f06f 0210 	mvn.w	r2, #16
 800e6b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2208      	movs	r2, #8
 800e6be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	69db      	ldr	r3, [r3, #28]
 800e6c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d003      	beq.n	800e6d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	f000 f887 	bl	800e7e2 <HAL_TIM_IC_CaptureCallback>
 800e6d4:	e005      	b.n	800e6e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f000 f879 	bl	800e7ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	f000 f88a 	bl	800e7f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	691b      	ldr	r3, [r3, #16]
 800e6ee:	f003 0301 	and.w	r3, r3, #1
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d10e      	bne.n	800e714 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	68db      	ldr	r3, [r3, #12]
 800e6fc:	f003 0301 	and.w	r3, r3, #1
 800e700:	2b01      	cmp	r3, #1
 800e702:	d107      	bne.n	800e714 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	f06f 0201 	mvn.w	r2, #1
 800e70c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f7f2 fef0 	bl	80014f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	691b      	ldr	r3, [r3, #16]
 800e71a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e71e:	2b80      	cmp	r3, #128	; 0x80
 800e720:	d10e      	bne.n	800e740 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	68db      	ldr	r3, [r3, #12]
 800e728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e72c:	2b80      	cmp	r3, #128	; 0x80
 800e72e:	d107      	bne.n	800e740 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f000 f99c 	bl	800ea78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	691b      	ldr	r3, [r3, #16]
 800e746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e74a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e74e:	d10e      	bne.n	800e76e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	68db      	ldr	r3, [r3, #12]
 800e756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e75a:	2b80      	cmp	r3, #128	; 0x80
 800e75c:	d107      	bne.n	800e76e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f000 f98f 	bl	800ea8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	691b      	ldr	r3, [r3, #16]
 800e774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e778:	2b40      	cmp	r3, #64	; 0x40
 800e77a:	d10e      	bne.n	800e79a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	68db      	ldr	r3, [r3, #12]
 800e782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e786:	2b40      	cmp	r3, #64	; 0x40
 800e788:	d107      	bne.n	800e79a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f000 f838 	bl	800e80a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	691b      	ldr	r3, [r3, #16]
 800e7a0:	f003 0320 	and.w	r3, r3, #32
 800e7a4:	2b20      	cmp	r3, #32
 800e7a6:	d10e      	bne.n	800e7c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	68db      	ldr	r3, [r3, #12]
 800e7ae:	f003 0320 	and.w	r3, r3, #32
 800e7b2:	2b20      	cmp	r3, #32
 800e7b4:	d107      	bne.n	800e7c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f06f 0220 	mvn.w	r2, #32
 800e7be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f000 f94f 	bl	800ea64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e7c6:	bf00      	nop
 800e7c8:	3708      	adds	r7, #8
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}

0800e7ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e7ce:	b480      	push	{r7}
 800e7d0:	b083      	sub	sp, #12
 800e7d2:	af00      	add	r7, sp, #0
 800e7d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e7d6:	bf00      	nop
 800e7d8:	370c      	adds	r7, #12
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr

0800e7e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e7e2:	b480      	push	{r7}
 800e7e4:	b083      	sub	sp, #12
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e7ea:	bf00      	nop
 800e7ec:	370c      	adds	r7, #12
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f4:	4770      	bx	lr

0800e7f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e7f6:	b480      	push	{r7}
 800e7f8:	b083      	sub	sp, #12
 800e7fa:	af00      	add	r7, sp, #0
 800e7fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e7fe:	bf00      	nop
 800e800:	370c      	adds	r7, #12
 800e802:	46bd      	mov	sp, r7
 800e804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e808:	4770      	bx	lr

0800e80a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e80a:	b480      	push	{r7}
 800e80c:	b083      	sub	sp, #12
 800e80e:	af00      	add	r7, sp, #0
 800e810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e812:	bf00      	nop
 800e814:	370c      	adds	r7, #12
 800e816:	46bd      	mov	sp, r7
 800e818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81c:	4770      	bx	lr
	...

0800e820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e820:	b480      	push	{r7}
 800e822:	b085      	sub	sp, #20
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	4a40      	ldr	r2, [pc, #256]	; (800e934 <TIM_Base_SetConfig+0x114>)
 800e834:	4293      	cmp	r3, r2
 800e836:	d013      	beq.n	800e860 <TIM_Base_SetConfig+0x40>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e83e:	d00f      	beq.n	800e860 <TIM_Base_SetConfig+0x40>
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	4a3d      	ldr	r2, [pc, #244]	; (800e938 <TIM_Base_SetConfig+0x118>)
 800e844:	4293      	cmp	r3, r2
 800e846:	d00b      	beq.n	800e860 <TIM_Base_SetConfig+0x40>
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	4a3c      	ldr	r2, [pc, #240]	; (800e93c <TIM_Base_SetConfig+0x11c>)
 800e84c:	4293      	cmp	r3, r2
 800e84e:	d007      	beq.n	800e860 <TIM_Base_SetConfig+0x40>
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	4a3b      	ldr	r2, [pc, #236]	; (800e940 <TIM_Base_SetConfig+0x120>)
 800e854:	4293      	cmp	r3, r2
 800e856:	d003      	beq.n	800e860 <TIM_Base_SetConfig+0x40>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	4a3a      	ldr	r2, [pc, #232]	; (800e944 <TIM_Base_SetConfig+0x124>)
 800e85c:	4293      	cmp	r3, r2
 800e85e:	d108      	bne.n	800e872 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	685b      	ldr	r3, [r3, #4]
 800e86c:	68fa      	ldr	r2, [r7, #12]
 800e86e:	4313      	orrs	r3, r2
 800e870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	4a2f      	ldr	r2, [pc, #188]	; (800e934 <TIM_Base_SetConfig+0x114>)
 800e876:	4293      	cmp	r3, r2
 800e878:	d01f      	beq.n	800e8ba <TIM_Base_SetConfig+0x9a>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e880:	d01b      	beq.n	800e8ba <TIM_Base_SetConfig+0x9a>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	4a2c      	ldr	r2, [pc, #176]	; (800e938 <TIM_Base_SetConfig+0x118>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d017      	beq.n	800e8ba <TIM_Base_SetConfig+0x9a>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	4a2b      	ldr	r2, [pc, #172]	; (800e93c <TIM_Base_SetConfig+0x11c>)
 800e88e:	4293      	cmp	r3, r2
 800e890:	d013      	beq.n	800e8ba <TIM_Base_SetConfig+0x9a>
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	4a2a      	ldr	r2, [pc, #168]	; (800e940 <TIM_Base_SetConfig+0x120>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d00f      	beq.n	800e8ba <TIM_Base_SetConfig+0x9a>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	4a29      	ldr	r2, [pc, #164]	; (800e944 <TIM_Base_SetConfig+0x124>)
 800e89e:	4293      	cmp	r3, r2
 800e8a0:	d00b      	beq.n	800e8ba <TIM_Base_SetConfig+0x9a>
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	4a28      	ldr	r2, [pc, #160]	; (800e948 <TIM_Base_SetConfig+0x128>)
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d007      	beq.n	800e8ba <TIM_Base_SetConfig+0x9a>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	4a27      	ldr	r2, [pc, #156]	; (800e94c <TIM_Base_SetConfig+0x12c>)
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d003      	beq.n	800e8ba <TIM_Base_SetConfig+0x9a>
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	4a26      	ldr	r2, [pc, #152]	; (800e950 <TIM_Base_SetConfig+0x130>)
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	d108      	bne.n	800e8cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e8c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	68db      	ldr	r3, [r3, #12]
 800e8c6:	68fa      	ldr	r2, [r7, #12]
 800e8c8:	4313      	orrs	r3, r2
 800e8ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	695b      	ldr	r3, [r3, #20]
 800e8d6:	4313      	orrs	r3, r2
 800e8d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	68fa      	ldr	r2, [r7, #12]
 800e8de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	689a      	ldr	r2, [r3, #8]
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	681a      	ldr	r2, [r3, #0]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	4a10      	ldr	r2, [pc, #64]	; (800e934 <TIM_Base_SetConfig+0x114>)
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	d00f      	beq.n	800e918 <TIM_Base_SetConfig+0xf8>
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	4a12      	ldr	r2, [pc, #72]	; (800e944 <TIM_Base_SetConfig+0x124>)
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	d00b      	beq.n	800e918 <TIM_Base_SetConfig+0xf8>
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	4a11      	ldr	r2, [pc, #68]	; (800e948 <TIM_Base_SetConfig+0x128>)
 800e904:	4293      	cmp	r3, r2
 800e906:	d007      	beq.n	800e918 <TIM_Base_SetConfig+0xf8>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	4a10      	ldr	r2, [pc, #64]	; (800e94c <TIM_Base_SetConfig+0x12c>)
 800e90c:	4293      	cmp	r3, r2
 800e90e:	d003      	beq.n	800e918 <TIM_Base_SetConfig+0xf8>
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	4a0f      	ldr	r2, [pc, #60]	; (800e950 <TIM_Base_SetConfig+0x130>)
 800e914:	4293      	cmp	r3, r2
 800e916:	d103      	bne.n	800e920 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	691a      	ldr	r2, [r3, #16]
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2201      	movs	r2, #1
 800e924:	615a      	str	r2, [r3, #20]
}
 800e926:	bf00      	nop
 800e928:	3714      	adds	r7, #20
 800e92a:	46bd      	mov	sp, r7
 800e92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e930:	4770      	bx	lr
 800e932:	bf00      	nop
 800e934:	40012c00 	.word	0x40012c00
 800e938:	40000400 	.word	0x40000400
 800e93c:	40000800 	.word	0x40000800
 800e940:	40000c00 	.word	0x40000c00
 800e944:	40013400 	.word	0x40013400
 800e948:	40014000 	.word	0x40014000
 800e94c:	40014400 	.word	0x40014400
 800e950:	40014800 	.word	0x40014800

0800e954 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e954:	b480      	push	{r7}
 800e956:	b085      	sub	sp, #20
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
 800e95c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e964:	2b01      	cmp	r3, #1
 800e966:	d101      	bne.n	800e96c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e968:	2302      	movs	r3, #2
 800e96a:	e068      	b.n	800ea3e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2201      	movs	r2, #1
 800e970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2202      	movs	r2, #2
 800e978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	685b      	ldr	r3, [r3, #4]
 800e982:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	689b      	ldr	r3, [r3, #8]
 800e98a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	4a2e      	ldr	r2, [pc, #184]	; (800ea4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800e992:	4293      	cmp	r3, r2
 800e994:	d004      	beq.n	800e9a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	4a2d      	ldr	r2, [pc, #180]	; (800ea50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800e99c:	4293      	cmp	r3, r2
 800e99e:	d108      	bne.n	800e9b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e9a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	685b      	ldr	r3, [r3, #4]
 800e9ac:	68fa      	ldr	r2, [r7, #12]
 800e9ae:	4313      	orrs	r3, r2
 800e9b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e9b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	68fa      	ldr	r2, [r7, #12]
 800e9c0:	4313      	orrs	r3, r2
 800e9c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	68fa      	ldr	r2, [r7, #12]
 800e9ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	4a1e      	ldr	r2, [pc, #120]	; (800ea4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800e9d2:	4293      	cmp	r3, r2
 800e9d4:	d01d      	beq.n	800ea12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9de:	d018      	beq.n	800ea12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	4a1b      	ldr	r2, [pc, #108]	; (800ea54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e9e6:	4293      	cmp	r3, r2
 800e9e8:	d013      	beq.n	800ea12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	4a1a      	ldr	r2, [pc, #104]	; (800ea58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d00e      	beq.n	800ea12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	4a18      	ldr	r2, [pc, #96]	; (800ea5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e9fa:	4293      	cmp	r3, r2
 800e9fc:	d009      	beq.n	800ea12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	4a13      	ldr	r2, [pc, #76]	; (800ea50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ea04:	4293      	cmp	r3, r2
 800ea06:	d004      	beq.n	800ea12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	4a14      	ldr	r2, [pc, #80]	; (800ea60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ea0e:	4293      	cmp	r3, r2
 800ea10:	d10c      	bne.n	800ea2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	689b      	ldr	r3, [r3, #8]
 800ea1e:	68ba      	ldr	r2, [r7, #8]
 800ea20:	4313      	orrs	r3, r2
 800ea22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	68ba      	ldr	r2, [r7, #8]
 800ea2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2201      	movs	r2, #1
 800ea30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2200      	movs	r2, #0
 800ea38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ea3c:	2300      	movs	r3, #0
}
 800ea3e:	4618      	mov	r0, r3
 800ea40:	3714      	adds	r7, #20
 800ea42:	46bd      	mov	sp, r7
 800ea44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea48:	4770      	bx	lr
 800ea4a:	bf00      	nop
 800ea4c:	40012c00 	.word	0x40012c00
 800ea50:	40013400 	.word	0x40013400
 800ea54:	40000400 	.word	0x40000400
 800ea58:	40000800 	.word	0x40000800
 800ea5c:	40000c00 	.word	0x40000c00
 800ea60:	40014000 	.word	0x40014000

0800ea64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ea64:	b480      	push	{r7}
 800ea66:	b083      	sub	sp, #12
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ea6c:	bf00      	nop
 800ea6e:	370c      	adds	r7, #12
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr

0800ea78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ea78:	b480      	push	{r7}
 800ea7a:	b083      	sub	sp, #12
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ea80:	bf00      	nop
 800ea82:	370c      	adds	r7, #12
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr

0800ea8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	b083      	sub	sp, #12
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ea94:	bf00      	nop
 800ea96:	370c      	adds	r7, #12
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr

0800eaa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b082      	sub	sp, #8
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d101      	bne.n	800eab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eaae:	2301      	movs	r3, #1
 800eab0:	e040      	b.n	800eb34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d106      	bne.n	800eac8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2200      	movs	r2, #0
 800eabe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f7f3 fc5c 	bl	8002380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2224      	movs	r2, #36	; 0x24
 800eacc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	681a      	ldr	r2, [r3, #0]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	f022 0201 	bic.w	r2, r2, #1
 800eadc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f000 f82c 	bl	800eb3c <UART_SetConfig>
 800eae4:	4603      	mov	r3, r0
 800eae6:	2b01      	cmp	r3, #1
 800eae8:	d101      	bne.n	800eaee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800eaea:	2301      	movs	r3, #1
 800eaec:	e022      	b.n	800eb34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d002      	beq.n	800eafc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f000 fad8 	bl	800f0ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	685a      	ldr	r2, [r3, #4]
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eb0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	689a      	ldr	r2, [r3, #8]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eb1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	f042 0201 	orr.w	r2, r2, #1
 800eb2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	f000 fb5f 	bl	800f1f0 <UART_CheckIdleState>
 800eb32:	4603      	mov	r3, r0
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	3708      	adds	r7, #8
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eb3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eb40:	b08a      	sub	sp, #40	; 0x28
 800eb42:	af00      	add	r7, sp, #0
 800eb44:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800eb46:	2300      	movs	r3, #0
 800eb48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	689a      	ldr	r2, [r3, #8]
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	691b      	ldr	r3, [r3, #16]
 800eb54:	431a      	orrs	r2, r3
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	695b      	ldr	r3, [r3, #20]
 800eb5a:	431a      	orrs	r2, r3
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	69db      	ldr	r3, [r3, #28]
 800eb60:	4313      	orrs	r3, r2
 800eb62:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	681a      	ldr	r2, [r3, #0]
 800eb6a:	4ba4      	ldr	r3, [pc, #656]	; (800edfc <UART_SetConfig+0x2c0>)
 800eb6c:	4013      	ands	r3, r2
 800eb6e:	68fa      	ldr	r2, [r7, #12]
 800eb70:	6812      	ldr	r2, [r2, #0]
 800eb72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eb74:	430b      	orrs	r3, r1
 800eb76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	685b      	ldr	r3, [r3, #4]
 800eb7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	68da      	ldr	r2, [r3, #12]
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	430a      	orrs	r2, r1
 800eb8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	699b      	ldr	r3, [r3, #24]
 800eb92:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	4a99      	ldr	r2, [pc, #612]	; (800ee00 <UART_SetConfig+0x2c4>)
 800eb9a:	4293      	cmp	r3, r2
 800eb9c:	d004      	beq.n	800eba8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	6a1b      	ldr	r3, [r3, #32]
 800eba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eba4:	4313      	orrs	r3, r2
 800eba6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	689b      	ldr	r3, [r3, #8]
 800ebae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebb8:	430a      	orrs	r2, r1
 800ebba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	4a90      	ldr	r2, [pc, #576]	; (800ee04 <UART_SetConfig+0x2c8>)
 800ebc2:	4293      	cmp	r3, r2
 800ebc4:	d126      	bne.n	800ec14 <UART_SetConfig+0xd8>
 800ebc6:	4b90      	ldr	r3, [pc, #576]	; (800ee08 <UART_SetConfig+0x2cc>)
 800ebc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ebcc:	f003 0303 	and.w	r3, r3, #3
 800ebd0:	2b03      	cmp	r3, #3
 800ebd2:	d81b      	bhi.n	800ec0c <UART_SetConfig+0xd0>
 800ebd4:	a201      	add	r2, pc, #4	; (adr r2, 800ebdc <UART_SetConfig+0xa0>)
 800ebd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebda:	bf00      	nop
 800ebdc:	0800ebed 	.word	0x0800ebed
 800ebe0:	0800ebfd 	.word	0x0800ebfd
 800ebe4:	0800ebf5 	.word	0x0800ebf5
 800ebe8:	0800ec05 	.word	0x0800ec05
 800ebec:	2301      	movs	r3, #1
 800ebee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ebf2:	e116      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800ebf4:	2302      	movs	r3, #2
 800ebf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ebfa:	e112      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800ebfc:	2304      	movs	r3, #4
 800ebfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ec02:	e10e      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800ec04:	2308      	movs	r3, #8
 800ec06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ec0a:	e10a      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800ec0c:	2310      	movs	r3, #16
 800ec0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ec12:	e106      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	4a7c      	ldr	r2, [pc, #496]	; (800ee0c <UART_SetConfig+0x2d0>)
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d138      	bne.n	800ec90 <UART_SetConfig+0x154>
 800ec1e:	4b7a      	ldr	r3, [pc, #488]	; (800ee08 <UART_SetConfig+0x2cc>)
 800ec20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec24:	f003 030c 	and.w	r3, r3, #12
 800ec28:	2b0c      	cmp	r3, #12
 800ec2a:	d82d      	bhi.n	800ec88 <UART_SetConfig+0x14c>
 800ec2c:	a201      	add	r2, pc, #4	; (adr r2, 800ec34 <UART_SetConfig+0xf8>)
 800ec2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec32:	bf00      	nop
 800ec34:	0800ec69 	.word	0x0800ec69
 800ec38:	0800ec89 	.word	0x0800ec89
 800ec3c:	0800ec89 	.word	0x0800ec89
 800ec40:	0800ec89 	.word	0x0800ec89
 800ec44:	0800ec79 	.word	0x0800ec79
 800ec48:	0800ec89 	.word	0x0800ec89
 800ec4c:	0800ec89 	.word	0x0800ec89
 800ec50:	0800ec89 	.word	0x0800ec89
 800ec54:	0800ec71 	.word	0x0800ec71
 800ec58:	0800ec89 	.word	0x0800ec89
 800ec5c:	0800ec89 	.word	0x0800ec89
 800ec60:	0800ec89 	.word	0x0800ec89
 800ec64:	0800ec81 	.word	0x0800ec81
 800ec68:	2300      	movs	r3, #0
 800ec6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ec6e:	e0d8      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800ec70:	2302      	movs	r3, #2
 800ec72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ec76:	e0d4      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800ec78:	2304      	movs	r3, #4
 800ec7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ec7e:	e0d0      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800ec80:	2308      	movs	r3, #8
 800ec82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ec86:	e0cc      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800ec88:	2310      	movs	r3, #16
 800ec8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ec8e:	e0c8      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	4a5e      	ldr	r2, [pc, #376]	; (800ee10 <UART_SetConfig+0x2d4>)
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d125      	bne.n	800ece6 <UART_SetConfig+0x1aa>
 800ec9a:	4b5b      	ldr	r3, [pc, #364]	; (800ee08 <UART_SetConfig+0x2cc>)
 800ec9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eca0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800eca4:	2b30      	cmp	r3, #48	; 0x30
 800eca6:	d016      	beq.n	800ecd6 <UART_SetConfig+0x19a>
 800eca8:	2b30      	cmp	r3, #48	; 0x30
 800ecaa:	d818      	bhi.n	800ecde <UART_SetConfig+0x1a2>
 800ecac:	2b20      	cmp	r3, #32
 800ecae:	d00a      	beq.n	800ecc6 <UART_SetConfig+0x18a>
 800ecb0:	2b20      	cmp	r3, #32
 800ecb2:	d814      	bhi.n	800ecde <UART_SetConfig+0x1a2>
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d002      	beq.n	800ecbe <UART_SetConfig+0x182>
 800ecb8:	2b10      	cmp	r3, #16
 800ecba:	d008      	beq.n	800ecce <UART_SetConfig+0x192>
 800ecbc:	e00f      	b.n	800ecde <UART_SetConfig+0x1a2>
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ecc4:	e0ad      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800ecc6:	2302      	movs	r3, #2
 800ecc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800eccc:	e0a9      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800ecce:	2304      	movs	r3, #4
 800ecd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ecd4:	e0a5      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800ecd6:	2308      	movs	r3, #8
 800ecd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ecdc:	e0a1      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800ecde:	2310      	movs	r3, #16
 800ece0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ece4:	e09d      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	4a4a      	ldr	r2, [pc, #296]	; (800ee14 <UART_SetConfig+0x2d8>)
 800ecec:	4293      	cmp	r3, r2
 800ecee:	d125      	bne.n	800ed3c <UART_SetConfig+0x200>
 800ecf0:	4b45      	ldr	r3, [pc, #276]	; (800ee08 <UART_SetConfig+0x2cc>)
 800ecf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ecf6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ecfa:	2bc0      	cmp	r3, #192	; 0xc0
 800ecfc:	d016      	beq.n	800ed2c <UART_SetConfig+0x1f0>
 800ecfe:	2bc0      	cmp	r3, #192	; 0xc0
 800ed00:	d818      	bhi.n	800ed34 <UART_SetConfig+0x1f8>
 800ed02:	2b80      	cmp	r3, #128	; 0x80
 800ed04:	d00a      	beq.n	800ed1c <UART_SetConfig+0x1e0>
 800ed06:	2b80      	cmp	r3, #128	; 0x80
 800ed08:	d814      	bhi.n	800ed34 <UART_SetConfig+0x1f8>
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d002      	beq.n	800ed14 <UART_SetConfig+0x1d8>
 800ed0e:	2b40      	cmp	r3, #64	; 0x40
 800ed10:	d008      	beq.n	800ed24 <UART_SetConfig+0x1e8>
 800ed12:	e00f      	b.n	800ed34 <UART_SetConfig+0x1f8>
 800ed14:	2300      	movs	r3, #0
 800ed16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ed1a:	e082      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800ed1c:	2302      	movs	r3, #2
 800ed1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ed22:	e07e      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800ed24:	2304      	movs	r3, #4
 800ed26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ed2a:	e07a      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800ed2c:	2308      	movs	r3, #8
 800ed2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ed32:	e076      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800ed34:	2310      	movs	r3, #16
 800ed36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ed3a:	e072      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4a35      	ldr	r2, [pc, #212]	; (800ee18 <UART_SetConfig+0x2dc>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d12a      	bne.n	800ed9c <UART_SetConfig+0x260>
 800ed46:	4b30      	ldr	r3, [pc, #192]	; (800ee08 <UART_SetConfig+0x2cc>)
 800ed48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ed50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ed54:	d01a      	beq.n	800ed8c <UART_SetConfig+0x250>
 800ed56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ed5a:	d81b      	bhi.n	800ed94 <UART_SetConfig+0x258>
 800ed5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed60:	d00c      	beq.n	800ed7c <UART_SetConfig+0x240>
 800ed62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed66:	d815      	bhi.n	800ed94 <UART_SetConfig+0x258>
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d003      	beq.n	800ed74 <UART_SetConfig+0x238>
 800ed6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed70:	d008      	beq.n	800ed84 <UART_SetConfig+0x248>
 800ed72:	e00f      	b.n	800ed94 <UART_SetConfig+0x258>
 800ed74:	2300      	movs	r3, #0
 800ed76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ed7a:	e052      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800ed7c:	2302      	movs	r3, #2
 800ed7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ed82:	e04e      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800ed84:	2304      	movs	r3, #4
 800ed86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ed8a:	e04a      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800ed8c:	2308      	movs	r3, #8
 800ed8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ed92:	e046      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800ed94:	2310      	movs	r3, #16
 800ed96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ed9a:	e042      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	4a17      	ldr	r2, [pc, #92]	; (800ee00 <UART_SetConfig+0x2c4>)
 800eda2:	4293      	cmp	r3, r2
 800eda4:	d13a      	bne.n	800ee1c <UART_SetConfig+0x2e0>
 800eda6:	4b18      	ldr	r3, [pc, #96]	; (800ee08 <UART_SetConfig+0x2cc>)
 800eda8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800edac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800edb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800edb4:	d01a      	beq.n	800edec <UART_SetConfig+0x2b0>
 800edb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800edba:	d81b      	bhi.n	800edf4 <UART_SetConfig+0x2b8>
 800edbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800edc0:	d00c      	beq.n	800eddc <UART_SetConfig+0x2a0>
 800edc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800edc6:	d815      	bhi.n	800edf4 <UART_SetConfig+0x2b8>
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d003      	beq.n	800edd4 <UART_SetConfig+0x298>
 800edcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800edd0:	d008      	beq.n	800ede4 <UART_SetConfig+0x2a8>
 800edd2:	e00f      	b.n	800edf4 <UART_SetConfig+0x2b8>
 800edd4:	2300      	movs	r3, #0
 800edd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800edda:	e022      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800eddc:	2302      	movs	r3, #2
 800edde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ede2:	e01e      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800ede4:	2304      	movs	r3, #4
 800ede6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800edea:	e01a      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800edec:	2308      	movs	r3, #8
 800edee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800edf2:	e016      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800edf4:	2310      	movs	r3, #16
 800edf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800edfa:	e012      	b.n	800ee22 <UART_SetConfig+0x2e6>
 800edfc:	efff69f3 	.word	0xefff69f3
 800ee00:	40008000 	.word	0x40008000
 800ee04:	40013800 	.word	0x40013800
 800ee08:	40021000 	.word	0x40021000
 800ee0c:	40004400 	.word	0x40004400
 800ee10:	40004800 	.word	0x40004800
 800ee14:	40004c00 	.word	0x40004c00
 800ee18:	40005000 	.word	0x40005000
 800ee1c:	2310      	movs	r3, #16
 800ee1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	4a9f      	ldr	r2, [pc, #636]	; (800f0a4 <UART_SetConfig+0x568>)
 800ee28:	4293      	cmp	r3, r2
 800ee2a:	d17a      	bne.n	800ef22 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ee2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee30:	2b08      	cmp	r3, #8
 800ee32:	d824      	bhi.n	800ee7e <UART_SetConfig+0x342>
 800ee34:	a201      	add	r2, pc, #4	; (adr r2, 800ee3c <UART_SetConfig+0x300>)
 800ee36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee3a:	bf00      	nop
 800ee3c:	0800ee61 	.word	0x0800ee61
 800ee40:	0800ee7f 	.word	0x0800ee7f
 800ee44:	0800ee69 	.word	0x0800ee69
 800ee48:	0800ee7f 	.word	0x0800ee7f
 800ee4c:	0800ee6f 	.word	0x0800ee6f
 800ee50:	0800ee7f 	.word	0x0800ee7f
 800ee54:	0800ee7f 	.word	0x0800ee7f
 800ee58:	0800ee7f 	.word	0x0800ee7f
 800ee5c:	0800ee77 	.word	0x0800ee77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ee60:	f7fc fe26 	bl	800bab0 <HAL_RCC_GetPCLK1Freq>
 800ee64:	61f8      	str	r0, [r7, #28]
        break;
 800ee66:	e010      	b.n	800ee8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ee68:	4b8f      	ldr	r3, [pc, #572]	; (800f0a8 <UART_SetConfig+0x56c>)
 800ee6a:	61fb      	str	r3, [r7, #28]
        break;
 800ee6c:	e00d      	b.n	800ee8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ee6e:	f7fc fd87 	bl	800b980 <HAL_RCC_GetSysClockFreq>
 800ee72:	61f8      	str	r0, [r7, #28]
        break;
 800ee74:	e009      	b.n	800ee8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ee76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee7a:	61fb      	str	r3, [r7, #28]
        break;
 800ee7c:	e005      	b.n	800ee8a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ee82:	2301      	movs	r3, #1
 800ee84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ee88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ee8a:	69fb      	ldr	r3, [r7, #28]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	f000 80fb 	beq.w	800f088 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	685a      	ldr	r2, [r3, #4]
 800ee96:	4613      	mov	r3, r2
 800ee98:	005b      	lsls	r3, r3, #1
 800ee9a:	4413      	add	r3, r2
 800ee9c:	69fa      	ldr	r2, [r7, #28]
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	d305      	bcc.n	800eeae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	685b      	ldr	r3, [r3, #4]
 800eea6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800eea8:	69fa      	ldr	r2, [r7, #28]
 800eeaa:	429a      	cmp	r2, r3
 800eeac:	d903      	bls.n	800eeb6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800eeae:	2301      	movs	r3, #1
 800eeb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800eeb4:	e0e8      	b.n	800f088 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800eeb6:	69fb      	ldr	r3, [r7, #28]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	461c      	mov	r4, r3
 800eebc:	4615      	mov	r5, r2
 800eebe:	f04f 0200 	mov.w	r2, #0
 800eec2:	f04f 0300 	mov.w	r3, #0
 800eec6:	022b      	lsls	r3, r5, #8
 800eec8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800eecc:	0222      	lsls	r2, r4, #8
 800eece:	68f9      	ldr	r1, [r7, #12]
 800eed0:	6849      	ldr	r1, [r1, #4]
 800eed2:	0849      	lsrs	r1, r1, #1
 800eed4:	2000      	movs	r0, #0
 800eed6:	4688      	mov	r8, r1
 800eed8:	4681      	mov	r9, r0
 800eeda:	eb12 0a08 	adds.w	sl, r2, r8
 800eede:	eb43 0b09 	adc.w	fp, r3, r9
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	685b      	ldr	r3, [r3, #4]
 800eee6:	2200      	movs	r2, #0
 800eee8:	603b      	str	r3, [r7, #0]
 800eeea:	607a      	str	r2, [r7, #4]
 800eeec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eef0:	4650      	mov	r0, sl
 800eef2:	4659      	mov	r1, fp
 800eef4:	f7f1 f9cc 	bl	8000290 <__aeabi_uldivmod>
 800eef8:	4602      	mov	r2, r0
 800eefa:	460b      	mov	r3, r1
 800eefc:	4613      	mov	r3, r2
 800eefe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ef00:	69bb      	ldr	r3, [r7, #24]
 800ef02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ef06:	d308      	bcc.n	800ef1a <UART_SetConfig+0x3de>
 800ef08:	69bb      	ldr	r3, [r7, #24]
 800ef0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ef0e:	d204      	bcs.n	800ef1a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	69ba      	ldr	r2, [r7, #24]
 800ef16:	60da      	str	r2, [r3, #12]
 800ef18:	e0b6      	b.n	800f088 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ef20:	e0b2      	b.n	800f088 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	69db      	ldr	r3, [r3, #28]
 800ef26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef2a:	d15e      	bne.n	800efea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800ef2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ef30:	2b08      	cmp	r3, #8
 800ef32:	d828      	bhi.n	800ef86 <UART_SetConfig+0x44a>
 800ef34:	a201      	add	r2, pc, #4	; (adr r2, 800ef3c <UART_SetConfig+0x400>)
 800ef36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef3a:	bf00      	nop
 800ef3c:	0800ef61 	.word	0x0800ef61
 800ef40:	0800ef69 	.word	0x0800ef69
 800ef44:	0800ef71 	.word	0x0800ef71
 800ef48:	0800ef87 	.word	0x0800ef87
 800ef4c:	0800ef77 	.word	0x0800ef77
 800ef50:	0800ef87 	.word	0x0800ef87
 800ef54:	0800ef87 	.word	0x0800ef87
 800ef58:	0800ef87 	.word	0x0800ef87
 800ef5c:	0800ef7f 	.word	0x0800ef7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef60:	f7fc fda6 	bl	800bab0 <HAL_RCC_GetPCLK1Freq>
 800ef64:	61f8      	str	r0, [r7, #28]
        break;
 800ef66:	e014      	b.n	800ef92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ef68:	f7fc fdb8 	bl	800badc <HAL_RCC_GetPCLK2Freq>
 800ef6c:	61f8      	str	r0, [r7, #28]
        break;
 800ef6e:	e010      	b.n	800ef92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ef70:	4b4d      	ldr	r3, [pc, #308]	; (800f0a8 <UART_SetConfig+0x56c>)
 800ef72:	61fb      	str	r3, [r7, #28]
        break;
 800ef74:	e00d      	b.n	800ef92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ef76:	f7fc fd03 	bl	800b980 <HAL_RCC_GetSysClockFreq>
 800ef7a:	61f8      	str	r0, [r7, #28]
        break;
 800ef7c:	e009      	b.n	800ef92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef82:	61fb      	str	r3, [r7, #28]
        break;
 800ef84:	e005      	b.n	800ef92 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800ef86:	2300      	movs	r3, #0
 800ef88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ef90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ef92:	69fb      	ldr	r3, [r7, #28]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d077      	beq.n	800f088 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ef98:	69fb      	ldr	r3, [r7, #28]
 800ef9a:	005a      	lsls	r2, r3, #1
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	685b      	ldr	r3, [r3, #4]
 800efa0:	085b      	lsrs	r3, r3, #1
 800efa2:	441a      	add	r2, r3
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	685b      	ldr	r3, [r3, #4]
 800efa8:	fbb2 f3f3 	udiv	r3, r2, r3
 800efac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800efae:	69bb      	ldr	r3, [r7, #24]
 800efb0:	2b0f      	cmp	r3, #15
 800efb2:	d916      	bls.n	800efe2 <UART_SetConfig+0x4a6>
 800efb4:	69bb      	ldr	r3, [r7, #24]
 800efb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800efba:	d212      	bcs.n	800efe2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800efbc:	69bb      	ldr	r3, [r7, #24]
 800efbe:	b29b      	uxth	r3, r3
 800efc0:	f023 030f 	bic.w	r3, r3, #15
 800efc4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800efc6:	69bb      	ldr	r3, [r7, #24]
 800efc8:	085b      	lsrs	r3, r3, #1
 800efca:	b29b      	uxth	r3, r3
 800efcc:	f003 0307 	and.w	r3, r3, #7
 800efd0:	b29a      	uxth	r2, r3
 800efd2:	8afb      	ldrh	r3, [r7, #22]
 800efd4:	4313      	orrs	r3, r2
 800efd6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	8afa      	ldrh	r2, [r7, #22]
 800efde:	60da      	str	r2, [r3, #12]
 800efe0:	e052      	b.n	800f088 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800efe2:	2301      	movs	r3, #1
 800efe4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800efe8:	e04e      	b.n	800f088 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800efea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800efee:	2b08      	cmp	r3, #8
 800eff0:	d827      	bhi.n	800f042 <UART_SetConfig+0x506>
 800eff2:	a201      	add	r2, pc, #4	; (adr r2, 800eff8 <UART_SetConfig+0x4bc>)
 800eff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eff8:	0800f01d 	.word	0x0800f01d
 800effc:	0800f025 	.word	0x0800f025
 800f000:	0800f02d 	.word	0x0800f02d
 800f004:	0800f043 	.word	0x0800f043
 800f008:	0800f033 	.word	0x0800f033
 800f00c:	0800f043 	.word	0x0800f043
 800f010:	0800f043 	.word	0x0800f043
 800f014:	0800f043 	.word	0x0800f043
 800f018:	0800f03b 	.word	0x0800f03b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f01c:	f7fc fd48 	bl	800bab0 <HAL_RCC_GetPCLK1Freq>
 800f020:	61f8      	str	r0, [r7, #28]
        break;
 800f022:	e014      	b.n	800f04e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f024:	f7fc fd5a 	bl	800badc <HAL_RCC_GetPCLK2Freq>
 800f028:	61f8      	str	r0, [r7, #28]
        break;
 800f02a:	e010      	b.n	800f04e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f02c:	4b1e      	ldr	r3, [pc, #120]	; (800f0a8 <UART_SetConfig+0x56c>)
 800f02e:	61fb      	str	r3, [r7, #28]
        break;
 800f030:	e00d      	b.n	800f04e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f032:	f7fc fca5 	bl	800b980 <HAL_RCC_GetSysClockFreq>
 800f036:	61f8      	str	r0, [r7, #28]
        break;
 800f038:	e009      	b.n	800f04e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f03a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f03e:	61fb      	str	r3, [r7, #28]
        break;
 800f040:	e005      	b.n	800f04e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800f042:	2300      	movs	r3, #0
 800f044:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800f046:	2301      	movs	r3, #1
 800f048:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800f04c:	bf00      	nop
    }

    if (pclk != 0U)
 800f04e:	69fb      	ldr	r3, [r7, #28]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d019      	beq.n	800f088 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	685b      	ldr	r3, [r3, #4]
 800f058:	085a      	lsrs	r2, r3, #1
 800f05a:	69fb      	ldr	r3, [r7, #28]
 800f05c:	441a      	add	r2, r3
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	685b      	ldr	r3, [r3, #4]
 800f062:	fbb2 f3f3 	udiv	r3, r2, r3
 800f066:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f068:	69bb      	ldr	r3, [r7, #24]
 800f06a:	2b0f      	cmp	r3, #15
 800f06c:	d909      	bls.n	800f082 <UART_SetConfig+0x546>
 800f06e:	69bb      	ldr	r3, [r7, #24]
 800f070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f074:	d205      	bcs.n	800f082 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f076:	69bb      	ldr	r3, [r7, #24]
 800f078:	b29a      	uxth	r2, r3
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	60da      	str	r2, [r3, #12]
 800f080:	e002      	b.n	800f088 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800f082:	2301      	movs	r3, #1
 800f084:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	2200      	movs	r2, #0
 800f08c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	2200      	movs	r2, #0
 800f092:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800f094:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3728      	adds	r7, #40	; 0x28
 800f09c:	46bd      	mov	sp, r7
 800f09e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f0a2:	bf00      	nop
 800f0a4:	40008000 	.word	0x40008000
 800f0a8:	00f42400 	.word	0x00f42400

0800f0ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f0ac:	b480      	push	{r7}
 800f0ae:	b083      	sub	sp, #12
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0b8:	f003 0301 	and.w	r3, r3, #1
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d00a      	beq.n	800f0d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	685b      	ldr	r3, [r3, #4]
 800f0c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	430a      	orrs	r2, r1
 800f0d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0da:	f003 0302 	and.w	r3, r3, #2
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d00a      	beq.n	800f0f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	685b      	ldr	r3, [r3, #4]
 800f0e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	430a      	orrs	r2, r1
 800f0f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0fc:	f003 0304 	and.w	r3, r3, #4
 800f100:	2b00      	cmp	r3, #0
 800f102:	d00a      	beq.n	800f11a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	685b      	ldr	r3, [r3, #4]
 800f10a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	430a      	orrs	r2, r1
 800f118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f11e:	f003 0308 	and.w	r3, r3, #8
 800f122:	2b00      	cmp	r3, #0
 800f124:	d00a      	beq.n	800f13c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	685b      	ldr	r3, [r3, #4]
 800f12c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	430a      	orrs	r2, r1
 800f13a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f140:	f003 0310 	and.w	r3, r3, #16
 800f144:	2b00      	cmp	r3, #0
 800f146:	d00a      	beq.n	800f15e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	689b      	ldr	r3, [r3, #8]
 800f14e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	430a      	orrs	r2, r1
 800f15c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f162:	f003 0320 	and.w	r3, r3, #32
 800f166:	2b00      	cmp	r3, #0
 800f168:	d00a      	beq.n	800f180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	689b      	ldr	r3, [r3, #8]
 800f170:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	430a      	orrs	r2, r1
 800f17e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d01a      	beq.n	800f1c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	685b      	ldr	r3, [r3, #4]
 800f192:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	430a      	orrs	r2, r1
 800f1a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f1aa:	d10a      	bne.n	800f1c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	685b      	ldr	r3, [r3, #4]
 800f1b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	430a      	orrs	r2, r1
 800f1c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d00a      	beq.n	800f1e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	685b      	ldr	r3, [r3, #4]
 800f1d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	430a      	orrs	r2, r1
 800f1e2:	605a      	str	r2, [r3, #4]
  }
}
 800f1e4:	bf00      	nop
 800f1e6:	370c      	adds	r7, #12
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ee:	4770      	bx	lr

0800f1f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b086      	sub	sp, #24
 800f1f4:	af02      	add	r7, sp, #8
 800f1f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f200:	f7f8 f824 	bl	800724c <HAL_GetTick>
 800f204:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	f003 0308 	and.w	r3, r3, #8
 800f210:	2b08      	cmp	r3, #8
 800f212:	d10e      	bne.n	800f232 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f218:	9300      	str	r3, [sp, #0]
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	2200      	movs	r2, #0
 800f21e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f000 f82d 	bl	800f282 <UART_WaitOnFlagUntilTimeout>
 800f228:	4603      	mov	r3, r0
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d001      	beq.n	800f232 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f22e:	2303      	movs	r3, #3
 800f230:	e023      	b.n	800f27a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	f003 0304 	and.w	r3, r3, #4
 800f23c:	2b04      	cmp	r3, #4
 800f23e:	d10e      	bne.n	800f25e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f240:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f244:	9300      	str	r3, [sp, #0]
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	2200      	movs	r2, #0
 800f24a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f000 f817 	bl	800f282 <UART_WaitOnFlagUntilTimeout>
 800f254:	4603      	mov	r3, r0
 800f256:	2b00      	cmp	r3, #0
 800f258:	d001      	beq.n	800f25e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f25a:	2303      	movs	r3, #3
 800f25c:	e00d      	b.n	800f27a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2220      	movs	r2, #32
 800f262:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2220      	movs	r2, #32
 800f268:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2200      	movs	r2, #0
 800f26e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2200      	movs	r2, #0
 800f274:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800f278:	2300      	movs	r3, #0
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3710      	adds	r7, #16
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}

0800f282 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f282:	b580      	push	{r7, lr}
 800f284:	b09c      	sub	sp, #112	; 0x70
 800f286:	af00      	add	r7, sp, #0
 800f288:	60f8      	str	r0, [r7, #12]
 800f28a:	60b9      	str	r1, [r7, #8]
 800f28c:	603b      	str	r3, [r7, #0]
 800f28e:	4613      	mov	r3, r2
 800f290:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f292:	e0a5      	b.n	800f3e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f29a:	f000 80a1 	beq.w	800f3e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f29e:	f7f7 ffd5 	bl	800724c <HAL_GetTick>
 800f2a2:	4602      	mov	r2, r0
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	1ad3      	subs	r3, r2, r3
 800f2a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	d302      	bcc.n	800f2b4 <UART_WaitOnFlagUntilTimeout+0x32>
 800f2ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d13e      	bne.n	800f332 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2bc:	e853 3f00 	ldrex	r3, [r3]
 800f2c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f2c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f2c8:	667b      	str	r3, [r7, #100]	; 0x64
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	461a      	mov	r2, r3
 800f2d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f2d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f2d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f2d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f2da:	e841 2300 	strex	r3, r2, [r1]
 800f2de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f2e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d1e6      	bne.n	800f2b4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	3308      	adds	r3, #8
 800f2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2f0:	e853 3f00 	ldrex	r3, [r3]
 800f2f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f8:	f023 0301 	bic.w	r3, r3, #1
 800f2fc:	663b      	str	r3, [r7, #96]	; 0x60
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	3308      	adds	r3, #8
 800f304:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f306:	64ba      	str	r2, [r7, #72]	; 0x48
 800f308:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f30a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f30c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f30e:	e841 2300 	strex	r3, r2, [r1]
 800f312:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f316:	2b00      	cmp	r3, #0
 800f318:	d1e5      	bne.n	800f2e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	2220      	movs	r2, #32
 800f31e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	2220      	movs	r2, #32
 800f324:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	2200      	movs	r2, #0
 800f32a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800f32e:	2303      	movs	r3, #3
 800f330:	e067      	b.n	800f402 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	f003 0304 	and.w	r3, r3, #4
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d04f      	beq.n	800f3e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	69db      	ldr	r3, [r3, #28]
 800f346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f34a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f34e:	d147      	bne.n	800f3e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f358:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f362:	e853 3f00 	ldrex	r3, [r3]
 800f366:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f36a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f36e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	461a      	mov	r2, r3
 800f376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f378:	637b      	str	r3, [r7, #52]	; 0x34
 800f37a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f37c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f37e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f380:	e841 2300 	strex	r3, r2, [r1]
 800f384:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d1e6      	bne.n	800f35a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	3308      	adds	r3, #8
 800f392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	e853 3f00 	ldrex	r3, [r3]
 800f39a:	613b      	str	r3, [r7, #16]
   return(result);
 800f39c:	693b      	ldr	r3, [r7, #16]
 800f39e:	f023 0301 	bic.w	r3, r3, #1
 800f3a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	3308      	adds	r3, #8
 800f3aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f3ac:	623a      	str	r2, [r7, #32]
 800f3ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3b0:	69f9      	ldr	r1, [r7, #28]
 800f3b2:	6a3a      	ldr	r2, [r7, #32]
 800f3b4:	e841 2300 	strex	r3, r2, [r1]
 800f3b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800f3ba:	69bb      	ldr	r3, [r7, #24]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d1e5      	bne.n	800f38c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	2220      	movs	r2, #32
 800f3c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	2220      	movs	r2, #32
 800f3ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	2220      	movs	r2, #32
 800f3d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800f3dc:	2303      	movs	r3, #3
 800f3de:	e010      	b.n	800f402 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	69da      	ldr	r2, [r3, #28]
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	4013      	ands	r3, r2
 800f3ea:	68ba      	ldr	r2, [r7, #8]
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	bf0c      	ite	eq
 800f3f0:	2301      	moveq	r3, #1
 800f3f2:	2300      	movne	r3, #0
 800f3f4:	b2db      	uxtb	r3, r3
 800f3f6:	461a      	mov	r2, r3
 800f3f8:	79fb      	ldrb	r3, [r7, #7]
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	f43f af4a 	beq.w	800f294 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f400:	2300      	movs	r3, #0
}
 800f402:	4618      	mov	r0, r3
 800f404:	3770      	adds	r7, #112	; 0x70
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
	...

0800f40c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800f40c:	b480      	push	{r7}
 800f40e:	b087      	sub	sp, #28
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
 800f414:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	681a      	ldr	r2, [r3, #0]
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f420:	683a      	ldr	r2, [r7, #0]
 800f422:	6812      	ldr	r2, [r2, #0]
 800f424:	f023 0101 	bic.w	r1, r3, #1
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	689b      	ldr	r3, [r3, #8]
 800f432:	2b08      	cmp	r3, #8
 800f434:	d102      	bne.n	800f43c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800f436:	2340      	movs	r3, #64	; 0x40
 800f438:	617b      	str	r3, [r7, #20]
 800f43a:	e001      	b.n	800f440 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800f43c:	2300      	movs	r3, #0
 800f43e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800f44c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800f452:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800f458:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800f45e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800f464:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800f46a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800f470:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800f476:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800f47c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800f482:	4313      	orrs	r3, r2
 800f484:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f48a:	693a      	ldr	r2, [r7, #16]
 800f48c:	4313      	orrs	r3, r2
 800f48e:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f494:	693a      	ldr	r2, [r7, #16]
 800f496:	4313      	orrs	r3, r2
 800f498:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f49e:	693a      	ldr	r2, [r7, #16]
 800f4a0:	4313      	orrs	r3, r2
 800f4a2:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800f4a4:	4b20      	ldr	r3, [pc, #128]	; (800f528 <FMC_NORSRAM_Init+0x11c>)
 800f4a6:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f4ae:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f4b6:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800f4be:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	681a      	ldr	r2, [r3, #0]
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	43db      	mvns	r3, r3
 800f4ce:	ea02 0103 	and.w	r1, r2, r3
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	681a      	ldr	r2, [r3, #0]
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	4319      	orrs	r1, r3
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f4e8:	d10c      	bne.n	800f504 <FMC_NORSRAM_Init+0xf8>
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d008      	beq.n	800f504 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4fe:	431a      	orrs	r2, r3
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d006      	beq.n	800f51a <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681a      	ldr	r2, [r3, #0]
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f514:	431a      	orrs	r2, r3
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 800f51a:	2300      	movs	r3, #0
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	371c      	adds	r7, #28
 800f520:	46bd      	mov	sp, r7
 800f522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f526:	4770      	bx	lr
 800f528:	0008fb7f 	.word	0x0008fb7f

0800f52c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f52c:	b480      	push	{r7}
 800f52e:	b087      	sub	sp, #28
 800f530:	af00      	add	r7, sp, #0
 800f532:	60f8      	str	r0, [r7, #12]
 800f534:	60b9      	str	r1, [r7, #8]
 800f536:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	1c5a      	adds	r2, r3, #1
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f542:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800f546:	68bb      	ldr	r3, [r7, #8]
 800f548:	681a      	ldr	r2, [r3, #0]
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	685b      	ldr	r3, [r3, #4]
 800f54e:	011b      	lsls	r3, r3, #4
 800f550:	431a      	orrs	r2, r3
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	689b      	ldr	r3, [r3, #8]
 800f556:	021b      	lsls	r3, r3, #8
 800f558:	431a      	orrs	r2, r3
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	691b      	ldr	r3, [r3, #16]
 800f55e:	041b      	lsls	r3, r3, #16
 800f560:	431a      	orrs	r2, r3
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	695b      	ldr	r3, [r3, #20]
 800f566:	3b01      	subs	r3, #1
 800f568:	051b      	lsls	r3, r3, #20
 800f56a:	431a      	orrs	r2, r3
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	699b      	ldr	r3, [r3, #24]
 800f570:	3b02      	subs	r3, #2
 800f572:	061b      	lsls	r3, r3, #24
 800f574:	431a      	orrs	r2, r3
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	69db      	ldr	r3, [r3, #28]
 800f57a:	4313      	orrs	r3, r2
 800f57c:	687a      	ldr	r2, [r7, #4]
 800f57e:	3201      	adds	r2, #1
 800f580:	4319      	orrs	r1, r3
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f594:	d113      	bne.n	800f5be <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	685b      	ldr	r3, [r3, #4]
 800f59a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f59e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	695b      	ldr	r3, [r3, #20]
 800f5a4:	3b01      	subs	r3, #1
 800f5a6:	051b      	lsls	r3, r3, #20
 800f5a8:	697a      	ldr	r2, [r7, #20]
 800f5aa:	4313      	orrs	r3, r2
 800f5ac:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	685b      	ldr	r3, [r3, #4]
 800f5b2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f5b6:	697b      	ldr	r3, [r7, #20]
 800f5b8:	431a      	orrs	r2, r3
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800f5be:	2300      	movs	r3, #0
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	371c      	adds	r7, #28
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ca:	4770      	bx	lr

0800f5cc <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	b085      	sub	sp, #20
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	60f8      	str	r0, [r7, #12]
 800f5d4:	60b9      	str	r1, [r7, #8]
 800f5d6:	607a      	str	r2, [r7, #4]
 800f5d8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f5e0:	d11d      	bne.n	800f61e <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f5ea:	4b13      	ldr	r3, [pc, #76]	; (800f638 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800f5ec:	4013      	ands	r3, r2
 800f5ee:	68ba      	ldr	r2, [r7, #8]
 800f5f0:	6811      	ldr	r1, [r2, #0]
 800f5f2:	68ba      	ldr	r2, [r7, #8]
 800f5f4:	6852      	ldr	r2, [r2, #4]
 800f5f6:	0112      	lsls	r2, r2, #4
 800f5f8:	4311      	orrs	r1, r2
 800f5fa:	68ba      	ldr	r2, [r7, #8]
 800f5fc:	6892      	ldr	r2, [r2, #8]
 800f5fe:	0212      	lsls	r2, r2, #8
 800f600:	4311      	orrs	r1, r2
 800f602:	68ba      	ldr	r2, [r7, #8]
 800f604:	69d2      	ldr	r2, [r2, #28]
 800f606:	4311      	orrs	r1, r2
 800f608:	68ba      	ldr	r2, [r7, #8]
 800f60a:	6912      	ldr	r2, [r2, #16]
 800f60c:	0412      	lsls	r2, r2, #16
 800f60e:	430a      	orrs	r2, r1
 800f610:	ea43 0102 	orr.w	r1, r3, r2
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	687a      	ldr	r2, [r7, #4]
 800f618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f61c:	e005      	b.n	800f62a <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	687a      	ldr	r2, [r7, #4]
 800f622:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800f62a:	2300      	movs	r3, #0
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	3714      	adds	r7, #20
 800f630:	46bd      	mov	sp, r7
 800f632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f636:	4770      	bx	lr
 800f638:	cff00000 	.word	0xcff00000

0800f63c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800f63c:	b084      	sub	sp, #16
 800f63e:	b480      	push	{r7}
 800f640:	b085      	sub	sp, #20
 800f642:	af00      	add	r7, sp, #0
 800f644:	6078      	str	r0, [r7, #4]
 800f646:	f107 001c 	add.w	r0, r7, #28
 800f64a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f64e:	2300      	movs	r3, #0
 800f650:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800f652:	6a3b      	ldr	r3, [r7, #32]
 800f654:	68fa      	ldr	r2, [r7, #12]
 800f656:	4313      	orrs	r3, r2
 800f658:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800f65a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800f65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800f65e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f660:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800f662:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800f666:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800f66a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f66c:	68fa      	ldr	r2, [r7, #12]
 800f66e:	4313      	orrs	r3, r2
 800f670:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	685b      	ldr	r3, [r3, #4]
 800f676:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800f67a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f67e:	68fa      	ldr	r2, [r7, #12]
 800f680:	431a      	orrs	r2, r3
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f686:	2300      	movs	r3, #0
}
 800f688:	4618      	mov	r0, r3
 800f68a:	3714      	adds	r7, #20
 800f68c:	46bd      	mov	sp, r7
 800f68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f692:	b004      	add	sp, #16
 800f694:	4770      	bx	lr

0800f696 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800f696:	b480      	push	{r7}
 800f698:	b083      	sub	sp, #12
 800f69a:	af00      	add	r7, sp, #0
 800f69c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	370c      	adds	r7, #12
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ae:	4770      	bx	lr

0800f6b0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b082      	sub	sp, #8
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2203      	movs	r2, #3
 800f6bc:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800f6be:	2002      	movs	r0, #2
 800f6c0:	f7f7 fdd0 	bl	8007264 <HAL_Delay>

  return HAL_OK;
 800f6c4:	2300      	movs	r3, #0
}
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	3708      	adds	r7, #8
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}

0800f6ce <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800f6ce:	b480      	push	{r7}
 800f6d0:	b083      	sub	sp, #12
 800f6d2:	af00      	add	r7, sp, #0
 800f6d4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	f003 0303 	and.w	r3, r3, #3
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	370c      	adds	r7, #12
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e8:	4770      	bx	lr

0800f6ea <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800f6ea:	b480      	push	{r7}
 800f6ec:	b085      	sub	sp, #20
 800f6ee:	af00      	add	r7, sp, #0
 800f6f0:	6078      	str	r0, [r7, #4]
 800f6f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	681a      	ldr	r2, [r3, #0]
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f708:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f70e:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f714:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f716:	68fa      	ldr	r2, [r7, #12]
 800f718:	4313      	orrs	r3, r2
 800f71a:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	68db      	ldr	r3, [r3, #12]
 800f720:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f724:	f023 030f 	bic.w	r3, r3, #15
 800f728:	68fa      	ldr	r2, [r7, #12]
 800f72a:	431a      	orrs	r2, r3
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f730:	2300      	movs	r3, #0
}
 800f732:	4618      	mov	r0, r3
 800f734:	3714      	adds	r7, #20
 800f736:	46bd      	mov	sp, r7
 800f738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73c:	4770      	bx	lr

0800f73e <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800f73e:	b480      	push	{r7}
 800f740:	b083      	sub	sp, #12
 800f742:	af00      	add	r7, sp, #0
 800f744:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	691b      	ldr	r3, [r3, #16]
 800f74a:	b2db      	uxtb	r3, r3
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	370c      	adds	r7, #12
 800f750:	46bd      	mov	sp, r7
 800f752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f756:	4770      	bx	lr

0800f758 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800f758:	b480      	push	{r7}
 800f75a:	b085      	sub	sp, #20
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	3314      	adds	r3, #20
 800f766:	461a      	mov	r2, r3
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	4413      	add	r3, r2
 800f76c:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	681b      	ldr	r3, [r3, #0]
}
 800f772:	4618      	mov	r0, r3
 800f774:	3714      	adds	r7, #20
 800f776:	46bd      	mov	sp, r7
 800f778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77c:	4770      	bx	lr

0800f77e <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800f77e:	b480      	push	{r7}
 800f780:	b085      	sub	sp, #20
 800f782:	af00      	add	r7, sp, #0
 800f784:	6078      	str	r0, [r7, #4]
 800f786:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f788:	2300      	movs	r3, #0
 800f78a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	681a      	ldr	r2, [r3, #0]
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	685a      	ldr	r2, [r3, #4]
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f7a4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f7aa:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f7b0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f7b2:	68fa      	ldr	r2, [r7, #12]
 800f7b4:	4313      	orrs	r3, r2
 800f7b6:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7bc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	431a      	orrs	r2, r3
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f7c8:	2300      	movs	r3, #0

}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3714      	adds	r7, #20
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d4:	4770      	bx	lr

0800f7d6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800f7d6:	b580      	push	{r7, lr}
 800f7d8:	b088      	sub	sp, #32
 800f7da:	af00      	add	r7, sp, #0
 800f7dc:	6078      	str	r0, [r7, #4]
 800f7de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f7e4:	2310      	movs	r3, #16
 800f7e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f7e8:	2340      	movs	r3, #64	; 0x40
 800f7ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f7f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f7f6:	f107 0308 	add.w	r3, r7, #8
 800f7fa:	4619      	mov	r1, r3
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f7ff ff74 	bl	800f6ea <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800f802:	f241 3288 	movw	r2, #5000	; 0x1388
 800f806:	2110      	movs	r1, #16
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f000 f94d 	bl	800faa8 <SDMMC_GetCmdResp1>
 800f80e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f810:	69fb      	ldr	r3, [r7, #28]
}
 800f812:	4618      	mov	r0, r3
 800f814:	3720      	adds	r7, #32
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}

0800f81a <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800f81a:	b580      	push	{r7, lr}
 800f81c:	b08a      	sub	sp, #40	; 0x28
 800f81e:	af00      	add	r7, sp, #0
 800f820:	60f8      	str	r0, [r7, #12]
 800f822:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f82a:	2307      	movs	r3, #7
 800f82c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f82e:	2340      	movs	r3, #64	; 0x40
 800f830:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f832:	2300      	movs	r3, #0
 800f834:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f83a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f83c:	f107 0310 	add.w	r3, r7, #16
 800f840:	4619      	mov	r1, r3
 800f842:	68f8      	ldr	r0, [r7, #12]
 800f844:	f7ff ff51 	bl	800f6ea <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800f848:	f241 3288 	movw	r2, #5000	; 0x1388
 800f84c:	2107      	movs	r1, #7
 800f84e:	68f8      	ldr	r0, [r7, #12]
 800f850:	f000 f92a 	bl	800faa8 <SDMMC_GetCmdResp1>
 800f854:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800f856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f858:	4618      	mov	r0, r3
 800f85a:	3728      	adds	r7, #40	; 0x28
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}

0800f860 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b088      	sub	sp, #32
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800f868:	2300      	movs	r3, #0
 800f86a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f86c:	2300      	movs	r3, #0
 800f86e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800f870:	2300      	movs	r3, #0
 800f872:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f874:	2300      	movs	r3, #0
 800f876:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f87c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f87e:	f107 0308 	add.w	r3, r7, #8
 800f882:	4619      	mov	r1, r3
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f7ff ff30 	bl	800f6ea <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f000 fb44 	bl	800ff18 <SDMMC_GetCmdError>
 800f890:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f892:	69fb      	ldr	r3, [r7, #28]
}
 800f894:	4618      	mov	r0, r3
 800f896:	3720      	adds	r7, #32
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}

0800f89c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b088      	sub	sp, #32
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f8a4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800f8a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f8aa:	2308      	movs	r3, #8
 800f8ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f8ae:	2340      	movs	r3, #64	; 0x40
 800f8b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f8b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f8bc:	f107 0308 	add.w	r3, r7, #8
 800f8c0:	4619      	mov	r1, r3
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f7ff ff11 	bl	800f6ea <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	f000 fad7 	bl	800fe7c <SDMMC_GetCmdResp7>
 800f8ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f8d0:	69fb      	ldr	r3, [r7, #28]
}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	3720      	adds	r7, #32
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}

0800f8da <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f8da:	b580      	push	{r7, lr}
 800f8dc:	b088      	sub	sp, #32
 800f8de:	af00      	add	r7, sp, #0
 800f8e0:	6078      	str	r0, [r7, #4]
 800f8e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f8e8:	2337      	movs	r3, #55	; 0x37
 800f8ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f8ec:	2340      	movs	r3, #64	; 0x40
 800f8ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f8f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f8fa:	f107 0308 	add.w	r3, r7, #8
 800f8fe:	4619      	mov	r1, r3
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f7ff fef2 	bl	800f6ea <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800f906:	f241 3288 	movw	r2, #5000	; 0x1388
 800f90a:	2137      	movs	r1, #55	; 0x37
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f000 f8cb 	bl	800faa8 <SDMMC_GetCmdResp1>
 800f912:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f914:	69fb      	ldr	r3, [r7, #28]
}
 800f916:	4618      	mov	r0, r3
 800f918:	3720      	adds	r7, #32
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}

0800f91e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f91e:	b580      	push	{r7, lr}
 800f920:	b088      	sub	sp, #32
 800f922:	af00      	add	r7, sp, #0
 800f924:	6078      	str	r0, [r7, #4]
 800f926:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f92e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f932:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f934:	2329      	movs	r3, #41	; 0x29
 800f936:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f938:	2340      	movs	r3, #64	; 0x40
 800f93a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f93c:	2300      	movs	r3, #0
 800f93e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f944:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f946:	f107 0308 	add.w	r3, r7, #8
 800f94a:	4619      	mov	r1, r3
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f7ff fecc 	bl	800f6ea <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f000 f9de 	bl	800fd14 <SDMMC_GetCmdResp3>
 800f958:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f95a:	69fb      	ldr	r3, [r7, #28]
}
 800f95c:	4618      	mov	r0, r3
 800f95e:	3720      	adds	r7, #32
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}

0800f964 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b088      	sub	sp, #32
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
 800f96c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f972:	2306      	movs	r3, #6
 800f974:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f976:	2340      	movs	r3, #64	; 0x40
 800f978:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f97a:	2300      	movs	r3, #0
 800f97c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f97e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f982:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f984:	f107 0308 	add.w	r3, r7, #8
 800f988:	4619      	mov	r1, r3
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f7ff fead 	bl	800f6ea <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800f990:	f241 3288 	movw	r2, #5000	; 0x1388
 800f994:	2106      	movs	r1, #6
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f000 f886 	bl	800faa8 <SDMMC_GetCmdResp1>
 800f99c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f99e:	69fb      	ldr	r3, [r7, #28]
}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	3720      	adds	r7, #32
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}

0800f9a8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b088      	sub	sp, #32
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f9b4:	2333      	movs	r3, #51	; 0x33
 800f9b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f9b8:	2340      	movs	r3, #64	; 0x40
 800f9ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f9bc:	2300      	movs	r3, #0
 800f9be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f9c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f9c6:	f107 0308 	add.w	r3, r7, #8
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	f7ff fe8c 	bl	800f6ea <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800f9d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800f9d6:	2133      	movs	r1, #51	; 0x33
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f000 f865 	bl	800faa8 <SDMMC_GetCmdResp1>
 800f9de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f9e0:	69fb      	ldr	r3, [r7, #28]
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	3720      	adds	r7, #32
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}

0800f9ea <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800f9ea:	b580      	push	{r7, lr}
 800f9ec:	b088      	sub	sp, #32
 800f9ee:	af00      	add	r7, sp, #0
 800f9f0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f9f6:	2302      	movs	r3, #2
 800f9f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f9fa:	23c0      	movs	r3, #192	; 0xc0
 800f9fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f9fe:	2300      	movs	r3, #0
 800fa00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa08:	f107 0308 	add.w	r3, r7, #8
 800fa0c:	4619      	mov	r1, r3
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f7ff fe6b 	bl	800f6ea <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fa14:	6878      	ldr	r0, [r7, #4]
 800fa16:	f000 f935 	bl	800fc84 <SDMMC_GetCmdResp2>
 800fa1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa1c:	69fb      	ldr	r3, [r7, #28]
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3720      	adds	r7, #32
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}

0800fa26 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fa26:	b580      	push	{r7, lr}
 800fa28:	b088      	sub	sp, #32
 800fa2a:	af00      	add	r7, sp, #0
 800fa2c:	6078      	str	r0, [r7, #4]
 800fa2e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800fa34:	2309      	movs	r3, #9
 800fa36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800fa38:	23c0      	movs	r3, #192	; 0xc0
 800fa3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa46:	f107 0308 	add.w	r3, r7, #8
 800fa4a:	4619      	mov	r1, r3
 800fa4c:	6878      	ldr	r0, [r7, #4]
 800fa4e:	f7ff fe4c 	bl	800f6ea <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f000 f916 	bl	800fc84 <SDMMC_GetCmdResp2>
 800fa58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa5a:	69fb      	ldr	r3, [r7, #28]
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3720      	adds	r7, #32
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}

0800fa64 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b088      	sub	sp, #32
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800fa72:	2303      	movs	r3, #3
 800fa74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fa76:	2340      	movs	r3, #64	; 0x40
 800fa78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa84:	f107 0308 	add.w	r3, r7, #8
 800fa88:	4619      	mov	r1, r3
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	f7ff fe2d 	bl	800f6ea <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800fa90:	683a      	ldr	r2, [r7, #0]
 800fa92:	2103      	movs	r1, #3
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f000 f97b 	bl	800fd90 <SDMMC_GetCmdResp6>
 800fa9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa9c:	69fb      	ldr	r3, [r7, #28]
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3720      	adds	r7, #32
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}
	...

0800faa8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b088      	sub	sp, #32
 800faac:	af00      	add	r7, sp, #0
 800faae:	60f8      	str	r0, [r7, #12]
 800fab0:	460b      	mov	r3, r1
 800fab2:	607a      	str	r2, [r7, #4]
 800fab4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800fab6:	4b70      	ldr	r3, [pc, #448]	; (800fc78 <SDMMC_GetCmdResp1+0x1d0>)
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	4a70      	ldr	r2, [pc, #448]	; (800fc7c <SDMMC_GetCmdResp1+0x1d4>)
 800fabc:	fba2 2303 	umull	r2, r3, r2, r3
 800fac0:	0a5a      	lsrs	r2, r3, #9
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	fb02 f303 	mul.w	r3, r2, r3
 800fac8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800faca:	69fb      	ldr	r3, [r7, #28]
 800facc:	1e5a      	subs	r2, r3, #1
 800face:	61fa      	str	r2, [r7, #28]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d102      	bne.n	800fada <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fad4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fad8:	e0c9      	b.n	800fc6e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fade:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fae0:	69bb      	ldr	r3, [r7, #24]
 800fae2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d0ef      	beq.n	800faca <SDMMC_GetCmdResp1+0x22>
 800faea:	69bb      	ldr	r3, [r7, #24]
 800faec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d1ea      	bne.n	800faca <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800faf8:	f003 0304 	and.w	r3, r3, #4
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d004      	beq.n	800fb0a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	2204      	movs	r2, #4
 800fb04:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fb06:	2304      	movs	r3, #4
 800fb08:	e0b1      	b.n	800fc6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb0e:	f003 0301 	and.w	r3, r3, #1
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d004      	beq.n	800fb20 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	2201      	movs	r2, #1
 800fb1a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	e0a6      	b.n	800fc6e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	22c5      	movs	r2, #197	; 0xc5
 800fb24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fb26:	68f8      	ldr	r0, [r7, #12]
 800fb28:	f7ff fe09 	bl	800f73e <SDMMC_GetCommandResponse>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	461a      	mov	r2, r3
 800fb30:	7afb      	ldrb	r3, [r7, #11]
 800fb32:	4293      	cmp	r3, r2
 800fb34:	d001      	beq.n	800fb3a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fb36:	2301      	movs	r3, #1
 800fb38:	e099      	b.n	800fc6e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800fb3a:	2100      	movs	r1, #0
 800fb3c:	68f8      	ldr	r0, [r7, #12]
 800fb3e:	f7ff fe0b 	bl	800f758 <SDMMC_GetResponse>
 800fb42:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800fb44:	697a      	ldr	r2, [r7, #20]
 800fb46:	4b4e      	ldr	r3, [pc, #312]	; (800fc80 <SDMMC_GetCmdResp1+0x1d8>)
 800fb48:	4013      	ands	r3, r2
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d101      	bne.n	800fb52 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	e08d      	b.n	800fc6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	da02      	bge.n	800fb5e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800fb58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fb5c:	e087      	b.n	800fc6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800fb5e:	697b      	ldr	r3, [r7, #20]
 800fb60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d001      	beq.n	800fb6c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800fb68:	2340      	movs	r3, #64	; 0x40
 800fb6a:	e080      	b.n	800fc6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d001      	beq.n	800fb7a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800fb76:	2380      	movs	r3, #128	; 0x80
 800fb78:	e079      	b.n	800fc6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800fb7a:	697b      	ldr	r3, [r7, #20]
 800fb7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d002      	beq.n	800fb8a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800fb84:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fb88:	e071      	b.n	800fc6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d002      	beq.n	800fb9a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800fb94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fb98:	e069      	b.n	800fc6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d002      	beq.n	800fbaa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800fba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fba8:	e061      	b.n	800fc6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800fbaa:	697b      	ldr	r3, [r7, #20]
 800fbac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d002      	beq.n	800fbba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800fbb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fbb8:	e059      	b.n	800fc6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800fbba:	697b      	ldr	r3, [r7, #20]
 800fbbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d002      	beq.n	800fbca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fbc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fbc8:	e051      	b.n	800fc6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d002      	beq.n	800fbda <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fbd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fbd8:	e049      	b.n	800fc6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d002      	beq.n	800fbea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800fbe4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fbe8:	e041      	b.n	800fc6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d002      	beq.n	800fbfa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800fbf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fbf8:	e039      	b.n	800fc6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d002      	beq.n	800fc0a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800fc04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fc08:	e031      	b.n	800fc6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d002      	beq.n	800fc1a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800fc14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fc18:	e029      	b.n	800fc6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d002      	beq.n	800fc2a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fc24:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fc28:	e021      	b.n	800fc6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d002      	beq.n	800fc3a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fc34:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800fc38:	e019      	b.n	800fc6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d002      	beq.n	800fc4a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800fc44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fc48:	e011      	b.n	800fc6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d002      	beq.n	800fc5a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800fc54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800fc58:	e009      	b.n	800fc6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	f003 0308 	and.w	r3, r3, #8
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d002      	beq.n	800fc6a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800fc64:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fc68:	e001      	b.n	800fc6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fc6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3720      	adds	r7, #32
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}
 800fc76:	bf00      	nop
 800fc78:	20000194 	.word	0x20000194
 800fc7c:	10624dd3 	.word	0x10624dd3
 800fc80:	fdffe008 	.word	0xfdffe008

0800fc84 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800fc84:	b480      	push	{r7}
 800fc86:	b085      	sub	sp, #20
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fc8c:	4b1f      	ldr	r3, [pc, #124]	; (800fd0c <SDMMC_GetCmdResp2+0x88>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	4a1f      	ldr	r2, [pc, #124]	; (800fd10 <SDMMC_GetCmdResp2+0x8c>)
 800fc92:	fba2 2303 	umull	r2, r3, r2, r3
 800fc96:	0a5b      	lsrs	r3, r3, #9
 800fc98:	f241 3288 	movw	r2, #5000	; 0x1388
 800fc9c:	fb02 f303 	mul.w	r3, r2, r3
 800fca0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	1e5a      	subs	r2, r3, #1
 800fca6:	60fa      	str	r2, [r7, #12]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d102      	bne.n	800fcb2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fcac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fcb0:	e026      	b.n	800fd00 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcb6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d0ef      	beq.n	800fca2 <SDMMC_GetCmdResp2+0x1e>
 800fcc2:	68bb      	ldr	r3, [r7, #8]
 800fcc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d1ea      	bne.n	800fca2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcd0:	f003 0304 	and.w	r3, r3, #4
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d004      	beq.n	800fce2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2204      	movs	r2, #4
 800fcdc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fcde:	2304      	movs	r3, #4
 800fce0:	e00e      	b.n	800fd00 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fce6:	f003 0301 	and.w	r3, r3, #1
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d004      	beq.n	800fcf8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	2201      	movs	r2, #1
 800fcf2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fcf4:	2301      	movs	r3, #1
 800fcf6:	e003      	b.n	800fd00 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	22c5      	movs	r2, #197	; 0xc5
 800fcfc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800fcfe:	2300      	movs	r3, #0
}
 800fd00:	4618      	mov	r0, r3
 800fd02:	3714      	adds	r7, #20
 800fd04:	46bd      	mov	sp, r7
 800fd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0a:	4770      	bx	lr
 800fd0c:	20000194 	.word	0x20000194
 800fd10:	10624dd3 	.word	0x10624dd3

0800fd14 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800fd14:	b480      	push	{r7}
 800fd16:	b085      	sub	sp, #20
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fd1c:	4b1a      	ldr	r3, [pc, #104]	; (800fd88 <SDMMC_GetCmdResp3+0x74>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	4a1a      	ldr	r2, [pc, #104]	; (800fd8c <SDMMC_GetCmdResp3+0x78>)
 800fd22:	fba2 2303 	umull	r2, r3, r2, r3
 800fd26:	0a5b      	lsrs	r3, r3, #9
 800fd28:	f241 3288 	movw	r2, #5000	; 0x1388
 800fd2c:	fb02 f303 	mul.w	r3, r2, r3
 800fd30:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	1e5a      	subs	r2, r3, #1
 800fd36:	60fa      	str	r2, [r7, #12]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d102      	bne.n	800fd42 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fd3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fd40:	e01b      	b.n	800fd7a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd46:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d0ef      	beq.n	800fd32 <SDMMC_GetCmdResp3+0x1e>
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d1ea      	bne.n	800fd32 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd60:	f003 0304 	and.w	r3, r3, #4
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d004      	beq.n	800fd72 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2204      	movs	r2, #4
 800fd6c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fd6e:	2304      	movs	r3, #4
 800fd70:	e003      	b.n	800fd7a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	22c5      	movs	r2, #197	; 0xc5
 800fd76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800fd78:	2300      	movs	r3, #0
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3714      	adds	r7, #20
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd84:	4770      	bx	lr
 800fd86:	bf00      	nop
 800fd88:	20000194 	.word	0x20000194
 800fd8c:	10624dd3 	.word	0x10624dd3

0800fd90 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b088      	sub	sp, #32
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	60f8      	str	r0, [r7, #12]
 800fd98:	460b      	mov	r3, r1
 800fd9a:	607a      	str	r2, [r7, #4]
 800fd9c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fd9e:	4b35      	ldr	r3, [pc, #212]	; (800fe74 <SDMMC_GetCmdResp6+0xe4>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	4a35      	ldr	r2, [pc, #212]	; (800fe78 <SDMMC_GetCmdResp6+0xe8>)
 800fda4:	fba2 2303 	umull	r2, r3, r2, r3
 800fda8:	0a5b      	lsrs	r3, r3, #9
 800fdaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800fdae:	fb02 f303 	mul.w	r3, r2, r3
 800fdb2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800fdb4:	69fb      	ldr	r3, [r7, #28]
 800fdb6:	1e5a      	subs	r2, r3, #1
 800fdb8:	61fa      	str	r2, [r7, #28]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d102      	bne.n	800fdc4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fdbe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fdc2:	e052      	b.n	800fe6a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdc8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fdca:	69bb      	ldr	r3, [r7, #24]
 800fdcc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d0ef      	beq.n	800fdb4 <SDMMC_GetCmdResp6+0x24>
 800fdd4:	69bb      	ldr	r3, [r7, #24]
 800fdd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d1ea      	bne.n	800fdb4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fde2:	f003 0304 	and.w	r3, r3, #4
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d004      	beq.n	800fdf4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	2204      	movs	r2, #4
 800fdee:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fdf0:	2304      	movs	r3, #4
 800fdf2:	e03a      	b.n	800fe6a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdf8:	f003 0301 	and.w	r3, r3, #1
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d004      	beq.n	800fe0a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	2201      	movs	r2, #1
 800fe04:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fe06:	2301      	movs	r3, #1
 800fe08:	e02f      	b.n	800fe6a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fe0a:	68f8      	ldr	r0, [r7, #12]
 800fe0c:	f7ff fc97 	bl	800f73e <SDMMC_GetCommandResponse>
 800fe10:	4603      	mov	r3, r0
 800fe12:	461a      	mov	r2, r3
 800fe14:	7afb      	ldrb	r3, [r7, #11]
 800fe16:	4293      	cmp	r3, r2
 800fe18:	d001      	beq.n	800fe1e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	e025      	b.n	800fe6a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	22c5      	movs	r2, #197	; 0xc5
 800fe22:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800fe24:	2100      	movs	r1, #0
 800fe26:	68f8      	ldr	r0, [r7, #12]
 800fe28:	f7ff fc96 	bl	800f758 <SDMMC_GetResponse>
 800fe2c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800fe2e:	697b      	ldr	r3, [r7, #20]
 800fe30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d106      	bne.n	800fe46 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800fe38:	697b      	ldr	r3, [r7, #20]
 800fe3a:	0c1b      	lsrs	r3, r3, #16
 800fe3c:	b29a      	uxth	r2, r3
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800fe42:	2300      	movs	r3, #0
 800fe44:	e011      	b.n	800fe6a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800fe46:	697b      	ldr	r3, [r7, #20]
 800fe48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d002      	beq.n	800fe56 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fe50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fe54:	e009      	b.n	800fe6a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d002      	beq.n	800fe66 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fe60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fe64:	e001      	b.n	800fe6a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fe66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	3720      	adds	r7, #32
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}
 800fe72:	bf00      	nop
 800fe74:	20000194 	.word	0x20000194
 800fe78:	10624dd3 	.word	0x10624dd3

0800fe7c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	b085      	sub	sp, #20
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fe84:	4b22      	ldr	r3, [pc, #136]	; (800ff10 <SDMMC_GetCmdResp7+0x94>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	4a22      	ldr	r2, [pc, #136]	; (800ff14 <SDMMC_GetCmdResp7+0x98>)
 800fe8a:	fba2 2303 	umull	r2, r3, r2, r3
 800fe8e:	0a5b      	lsrs	r3, r3, #9
 800fe90:	f241 3288 	movw	r2, #5000	; 0x1388
 800fe94:	fb02 f303 	mul.w	r3, r2, r3
 800fe98:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	1e5a      	subs	r2, r3, #1
 800fe9e:	60fa      	str	r2, [r7, #12]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d102      	bne.n	800feaa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fea4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fea8:	e02c      	b.n	800ff04 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800feae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d0ef      	beq.n	800fe9a <SDMMC_GetCmdResp7+0x1e>
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d1ea      	bne.n	800fe9a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fec8:	f003 0304 	and.w	r3, r3, #4
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d004      	beq.n	800feda <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2204      	movs	r2, #4
 800fed4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fed6:	2304      	movs	r3, #4
 800fed8:	e014      	b.n	800ff04 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fede:	f003 0301 	and.w	r3, r3, #1
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d004      	beq.n	800fef0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	2201      	movs	r2, #1
 800feea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800feec:	2301      	movs	r3, #1
 800feee:	e009      	b.n	800ff04 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d002      	beq.n	800ff02 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2240      	movs	r2, #64	; 0x40
 800ff00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ff02:	2300      	movs	r3, #0

}
 800ff04:	4618      	mov	r0, r3
 800ff06:	3714      	adds	r7, #20
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0e:	4770      	bx	lr
 800ff10:	20000194 	.word	0x20000194
 800ff14:	10624dd3 	.word	0x10624dd3

0800ff18 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b085      	sub	sp, #20
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ff20:	4b11      	ldr	r3, [pc, #68]	; (800ff68 <SDMMC_GetCmdError+0x50>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	4a11      	ldr	r2, [pc, #68]	; (800ff6c <SDMMC_GetCmdError+0x54>)
 800ff26:	fba2 2303 	umull	r2, r3, r2, r3
 800ff2a:	0a5b      	lsrs	r3, r3, #9
 800ff2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ff30:	fb02 f303 	mul.w	r3, r2, r3
 800ff34:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	1e5a      	subs	r2, r3, #1
 800ff3a:	60fa      	str	r2, [r7, #12]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d102      	bne.n	800ff46 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ff40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ff44:	e009      	b.n	800ff5a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d0f1      	beq.n	800ff36 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	22c5      	movs	r2, #197	; 0xc5
 800ff56:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800ff58:	2300      	movs	r3, #0
}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	3714      	adds	r7, #20
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff64:	4770      	bx	lr
 800ff66:	bf00      	nop
 800ff68:	20000194 	.word	0x20000194
 800ff6c:	10624dd3 	.word	0x10624dd3

0800ff70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ff70:	b084      	sub	sp, #16
 800ff72:	b580      	push	{r7, lr}
 800ff74:	b084      	sub	sp, #16
 800ff76:	af00      	add	r7, sp, #0
 800ff78:	6078      	str	r0, [r7, #4]
 800ff7a:	f107 001c 	add.w	r0, r7, #28
 800ff7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	68db      	ldr	r3, [r3, #12]
 800ff86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f001 faf6 	bl	8011580 <USB_CoreReset>
 800ff94:	4603      	mov	r3, r0
 800ff96:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800ff98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d106      	bne.n	800ffac <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffa2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	639a      	str	r2, [r3, #56]	; 0x38
 800ffaa:	e005      	b.n	800ffb8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800ffb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffba:	4618      	mov	r0, r3
 800ffbc:	3710      	adds	r7, #16
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ffc4:	b004      	add	sp, #16
 800ffc6:	4770      	bx	lr

0800ffc8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ffc8:	b480      	push	{r7}
 800ffca:	b087      	sub	sp, #28
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	60f8      	str	r0, [r7, #12]
 800ffd0:	60b9      	str	r1, [r7, #8]
 800ffd2:	4613      	mov	r3, r2
 800ffd4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ffd6:	79fb      	ldrb	r3, [r7, #7]
 800ffd8:	2b02      	cmp	r3, #2
 800ffda:	d165      	bne.n	80100a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	4a3e      	ldr	r2, [pc, #248]	; (80100d8 <USB_SetTurnaroundTime+0x110>)
 800ffe0:	4293      	cmp	r3, r2
 800ffe2:	d906      	bls.n	800fff2 <USB_SetTurnaroundTime+0x2a>
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	4a3d      	ldr	r2, [pc, #244]	; (80100dc <USB_SetTurnaroundTime+0x114>)
 800ffe8:	4293      	cmp	r3, r2
 800ffea:	d202      	bcs.n	800fff2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ffec:	230f      	movs	r3, #15
 800ffee:	617b      	str	r3, [r7, #20]
 800fff0:	e05c      	b.n	80100ac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	4a39      	ldr	r2, [pc, #228]	; (80100dc <USB_SetTurnaroundTime+0x114>)
 800fff6:	4293      	cmp	r3, r2
 800fff8:	d306      	bcc.n	8010008 <USB_SetTurnaroundTime+0x40>
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	4a38      	ldr	r2, [pc, #224]	; (80100e0 <USB_SetTurnaroundTime+0x118>)
 800fffe:	4293      	cmp	r3, r2
 8010000:	d202      	bcs.n	8010008 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8010002:	230e      	movs	r3, #14
 8010004:	617b      	str	r3, [r7, #20]
 8010006:	e051      	b.n	80100ac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	4a35      	ldr	r2, [pc, #212]	; (80100e0 <USB_SetTurnaroundTime+0x118>)
 801000c:	4293      	cmp	r3, r2
 801000e:	d306      	bcc.n	801001e <USB_SetTurnaroundTime+0x56>
 8010010:	68bb      	ldr	r3, [r7, #8]
 8010012:	4a34      	ldr	r2, [pc, #208]	; (80100e4 <USB_SetTurnaroundTime+0x11c>)
 8010014:	4293      	cmp	r3, r2
 8010016:	d202      	bcs.n	801001e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010018:	230d      	movs	r3, #13
 801001a:	617b      	str	r3, [r7, #20]
 801001c:	e046      	b.n	80100ac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801001e:	68bb      	ldr	r3, [r7, #8]
 8010020:	4a30      	ldr	r2, [pc, #192]	; (80100e4 <USB_SetTurnaroundTime+0x11c>)
 8010022:	4293      	cmp	r3, r2
 8010024:	d306      	bcc.n	8010034 <USB_SetTurnaroundTime+0x6c>
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	4a2f      	ldr	r2, [pc, #188]	; (80100e8 <USB_SetTurnaroundTime+0x120>)
 801002a:	4293      	cmp	r3, r2
 801002c:	d802      	bhi.n	8010034 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801002e:	230c      	movs	r3, #12
 8010030:	617b      	str	r3, [r7, #20]
 8010032:	e03b      	b.n	80100ac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	4a2c      	ldr	r2, [pc, #176]	; (80100e8 <USB_SetTurnaroundTime+0x120>)
 8010038:	4293      	cmp	r3, r2
 801003a:	d906      	bls.n	801004a <USB_SetTurnaroundTime+0x82>
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	4a2b      	ldr	r2, [pc, #172]	; (80100ec <USB_SetTurnaroundTime+0x124>)
 8010040:	4293      	cmp	r3, r2
 8010042:	d802      	bhi.n	801004a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010044:	230b      	movs	r3, #11
 8010046:	617b      	str	r3, [r7, #20]
 8010048:	e030      	b.n	80100ac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801004a:	68bb      	ldr	r3, [r7, #8]
 801004c:	4a27      	ldr	r2, [pc, #156]	; (80100ec <USB_SetTurnaroundTime+0x124>)
 801004e:	4293      	cmp	r3, r2
 8010050:	d906      	bls.n	8010060 <USB_SetTurnaroundTime+0x98>
 8010052:	68bb      	ldr	r3, [r7, #8]
 8010054:	4a26      	ldr	r2, [pc, #152]	; (80100f0 <USB_SetTurnaroundTime+0x128>)
 8010056:	4293      	cmp	r3, r2
 8010058:	d802      	bhi.n	8010060 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801005a:	230a      	movs	r3, #10
 801005c:	617b      	str	r3, [r7, #20]
 801005e:	e025      	b.n	80100ac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	4a23      	ldr	r2, [pc, #140]	; (80100f0 <USB_SetTurnaroundTime+0x128>)
 8010064:	4293      	cmp	r3, r2
 8010066:	d906      	bls.n	8010076 <USB_SetTurnaroundTime+0xae>
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	4a22      	ldr	r2, [pc, #136]	; (80100f4 <USB_SetTurnaroundTime+0x12c>)
 801006c:	4293      	cmp	r3, r2
 801006e:	d202      	bcs.n	8010076 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010070:	2309      	movs	r3, #9
 8010072:	617b      	str	r3, [r7, #20]
 8010074:	e01a      	b.n	80100ac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010076:	68bb      	ldr	r3, [r7, #8]
 8010078:	4a1e      	ldr	r2, [pc, #120]	; (80100f4 <USB_SetTurnaroundTime+0x12c>)
 801007a:	4293      	cmp	r3, r2
 801007c:	d306      	bcc.n	801008c <USB_SetTurnaroundTime+0xc4>
 801007e:	68bb      	ldr	r3, [r7, #8]
 8010080:	4a1d      	ldr	r2, [pc, #116]	; (80100f8 <USB_SetTurnaroundTime+0x130>)
 8010082:	4293      	cmp	r3, r2
 8010084:	d802      	bhi.n	801008c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010086:	2308      	movs	r3, #8
 8010088:	617b      	str	r3, [r7, #20]
 801008a:	e00f      	b.n	80100ac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	4a1a      	ldr	r2, [pc, #104]	; (80100f8 <USB_SetTurnaroundTime+0x130>)
 8010090:	4293      	cmp	r3, r2
 8010092:	d906      	bls.n	80100a2 <USB_SetTurnaroundTime+0xda>
 8010094:	68bb      	ldr	r3, [r7, #8]
 8010096:	4a19      	ldr	r2, [pc, #100]	; (80100fc <USB_SetTurnaroundTime+0x134>)
 8010098:	4293      	cmp	r3, r2
 801009a:	d202      	bcs.n	80100a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801009c:	2307      	movs	r3, #7
 801009e:	617b      	str	r3, [r7, #20]
 80100a0:	e004      	b.n	80100ac <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80100a2:	2306      	movs	r3, #6
 80100a4:	617b      	str	r3, [r7, #20]
 80100a6:	e001      	b.n	80100ac <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80100a8:	2309      	movs	r3, #9
 80100aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	68db      	ldr	r3, [r3, #12]
 80100b0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	68da      	ldr	r2, [r3, #12]
 80100bc:	697b      	ldr	r3, [r7, #20]
 80100be:	029b      	lsls	r3, r3, #10
 80100c0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80100c4:	431a      	orrs	r2, r3
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80100ca:	2300      	movs	r3, #0
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	371c      	adds	r7, #28
 80100d0:	46bd      	mov	sp, r7
 80100d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d6:	4770      	bx	lr
 80100d8:	00d8acbf 	.word	0x00d8acbf
 80100dc:	00e4e1c0 	.word	0x00e4e1c0
 80100e0:	00f42400 	.word	0x00f42400
 80100e4:	01067380 	.word	0x01067380
 80100e8:	011a499f 	.word	0x011a499f
 80100ec:	01312cff 	.word	0x01312cff
 80100f0:	014ca43f 	.word	0x014ca43f
 80100f4:	016e3600 	.word	0x016e3600
 80100f8:	01a6ab1f 	.word	0x01a6ab1f
 80100fc:	01e84800 	.word	0x01e84800

08010100 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010100:	b480      	push	{r7}
 8010102:	b083      	sub	sp, #12
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	689b      	ldr	r3, [r3, #8]
 801010c:	f043 0201 	orr.w	r2, r3, #1
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010114:	2300      	movs	r3, #0
}
 8010116:	4618      	mov	r0, r3
 8010118:	370c      	adds	r7, #12
 801011a:	46bd      	mov	sp, r7
 801011c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010120:	4770      	bx	lr

08010122 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010122:	b480      	push	{r7}
 8010124:	b083      	sub	sp, #12
 8010126:	af00      	add	r7, sp, #0
 8010128:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	689b      	ldr	r3, [r3, #8]
 801012e:	f023 0201 	bic.w	r2, r3, #1
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010136:	2300      	movs	r3, #0
}
 8010138:	4618      	mov	r0, r3
 801013a:	370c      	adds	r7, #12
 801013c:	46bd      	mov	sp, r7
 801013e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010142:	4770      	bx	lr

08010144 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b084      	sub	sp, #16
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
 801014c:	460b      	mov	r3, r1
 801014e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010150:	2300      	movs	r3, #0
 8010152:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	68db      	ldr	r3, [r3, #12]
 8010158:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010160:	78fb      	ldrb	r3, [r7, #3]
 8010162:	2b01      	cmp	r3, #1
 8010164:	d115      	bne.n	8010192 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	68db      	ldr	r3, [r3, #12]
 801016a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010172:	2001      	movs	r0, #1
 8010174:	f7f7 f876 	bl	8007264 <HAL_Delay>
      ms++;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	3301      	adds	r3, #1
 801017c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f001 f985 	bl	801148e <USB_GetMode>
 8010184:	4603      	mov	r3, r0
 8010186:	2b01      	cmp	r3, #1
 8010188:	d01e      	beq.n	80101c8 <USB_SetCurrentMode+0x84>
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	2b31      	cmp	r3, #49	; 0x31
 801018e:	d9f0      	bls.n	8010172 <USB_SetCurrentMode+0x2e>
 8010190:	e01a      	b.n	80101c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010192:	78fb      	ldrb	r3, [r7, #3]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d115      	bne.n	80101c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	68db      	ldr	r3, [r3, #12]
 801019c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80101a4:	2001      	movs	r0, #1
 80101a6:	f7f7 f85d 	bl	8007264 <HAL_Delay>
      ms++;
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	3301      	adds	r3, #1
 80101ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f001 f96c 	bl	801148e <USB_GetMode>
 80101b6:	4603      	mov	r3, r0
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d005      	beq.n	80101c8 <USB_SetCurrentMode+0x84>
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	2b31      	cmp	r3, #49	; 0x31
 80101c0:	d9f0      	bls.n	80101a4 <USB_SetCurrentMode+0x60>
 80101c2:	e001      	b.n	80101c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80101c4:	2301      	movs	r3, #1
 80101c6:	e005      	b.n	80101d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	2b32      	cmp	r3, #50	; 0x32
 80101cc:	d101      	bne.n	80101d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80101ce:	2301      	movs	r3, #1
 80101d0:	e000      	b.n	80101d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80101d2:	2300      	movs	r3, #0
}
 80101d4:	4618      	mov	r0, r3
 80101d6:	3710      	adds	r7, #16
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}

080101dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80101dc:	b084      	sub	sp, #16
 80101de:	b580      	push	{r7, lr}
 80101e0:	b086      	sub	sp, #24
 80101e2:	af00      	add	r7, sp, #0
 80101e4:	6078      	str	r0, [r7, #4]
 80101e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80101ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80101ee:	2300      	movs	r3, #0
 80101f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80101f6:	2300      	movs	r3, #0
 80101f8:	613b      	str	r3, [r7, #16]
 80101fa:	e009      	b.n	8010210 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80101fc:	687a      	ldr	r2, [r7, #4]
 80101fe:	693b      	ldr	r3, [r7, #16]
 8010200:	3340      	adds	r3, #64	; 0x40
 8010202:	009b      	lsls	r3, r3, #2
 8010204:	4413      	add	r3, r2
 8010206:	2200      	movs	r2, #0
 8010208:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801020a:	693b      	ldr	r3, [r7, #16]
 801020c:	3301      	adds	r3, #1
 801020e:	613b      	str	r3, [r7, #16]
 8010210:	693b      	ldr	r3, [r7, #16]
 8010212:	2b0e      	cmp	r3, #14
 8010214:	d9f2      	bls.n	80101fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010218:	2b00      	cmp	r3, #0
 801021a:	d11c      	bne.n	8010256 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010222:	685b      	ldr	r3, [r3, #4]
 8010224:	68fa      	ldr	r2, [r7, #12]
 8010226:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801022a:	f043 0302 	orr.w	r3, r3, #2
 801022e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010234:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	601a      	str	r2, [r3, #0]
 8010254:	e005      	b.n	8010262 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801025a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010268:	461a      	mov	r2, r3
 801026a:	2300      	movs	r3, #0
 801026c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010274:	4619      	mov	r1, r3
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801027c:	461a      	mov	r2, r3
 801027e:	680b      	ldr	r3, [r1, #0]
 8010280:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010282:	2103      	movs	r1, #3
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f000 f959 	bl	801053c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801028a:	2110      	movs	r1, #16
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	f000 f8f1 	bl	8010474 <USB_FlushTxFifo>
 8010292:	4603      	mov	r3, r0
 8010294:	2b00      	cmp	r3, #0
 8010296:	d001      	beq.n	801029c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8010298:	2301      	movs	r3, #1
 801029a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801029c:	6878      	ldr	r0, [r7, #4]
 801029e:	f000 f91d 	bl	80104dc <USB_FlushRxFifo>
 80102a2:	4603      	mov	r3, r0
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d001      	beq.n	80102ac <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80102a8:	2301      	movs	r3, #1
 80102aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102b2:	461a      	mov	r2, r3
 80102b4:	2300      	movs	r3, #0
 80102b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102be:	461a      	mov	r2, r3
 80102c0:	2300      	movs	r3, #0
 80102c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102ca:	461a      	mov	r2, r3
 80102cc:	2300      	movs	r3, #0
 80102ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80102d0:	2300      	movs	r3, #0
 80102d2:	613b      	str	r3, [r7, #16]
 80102d4:	e043      	b.n	801035e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80102d6:	693b      	ldr	r3, [r7, #16]
 80102d8:	015a      	lsls	r2, r3, #5
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	4413      	add	r3, r2
 80102de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80102e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80102ec:	d118      	bne.n	8010320 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80102ee:	693b      	ldr	r3, [r7, #16]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d10a      	bne.n	801030a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80102f4:	693b      	ldr	r3, [r7, #16]
 80102f6:	015a      	lsls	r2, r3, #5
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	4413      	add	r3, r2
 80102fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010300:	461a      	mov	r2, r3
 8010302:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010306:	6013      	str	r3, [r2, #0]
 8010308:	e013      	b.n	8010332 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801030a:	693b      	ldr	r3, [r7, #16]
 801030c:	015a      	lsls	r2, r3, #5
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	4413      	add	r3, r2
 8010312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010316:	461a      	mov	r2, r3
 8010318:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801031c:	6013      	str	r3, [r2, #0]
 801031e:	e008      	b.n	8010332 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010320:	693b      	ldr	r3, [r7, #16]
 8010322:	015a      	lsls	r2, r3, #5
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	4413      	add	r3, r2
 8010328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801032c:	461a      	mov	r2, r3
 801032e:	2300      	movs	r3, #0
 8010330:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010332:	693b      	ldr	r3, [r7, #16]
 8010334:	015a      	lsls	r2, r3, #5
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	4413      	add	r3, r2
 801033a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801033e:	461a      	mov	r2, r3
 8010340:	2300      	movs	r3, #0
 8010342:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	015a      	lsls	r2, r3, #5
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	4413      	add	r3, r2
 801034c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010350:	461a      	mov	r2, r3
 8010352:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010356:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	3301      	adds	r3, #1
 801035c:	613b      	str	r3, [r7, #16]
 801035e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010360:	693a      	ldr	r2, [r7, #16]
 8010362:	429a      	cmp	r2, r3
 8010364:	d3b7      	bcc.n	80102d6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010366:	2300      	movs	r3, #0
 8010368:	613b      	str	r3, [r7, #16]
 801036a:	e043      	b.n	80103f4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801036c:	693b      	ldr	r3, [r7, #16]
 801036e:	015a      	lsls	r2, r3, #5
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	4413      	add	r3, r2
 8010374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801037e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010382:	d118      	bne.n	80103b6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d10a      	bne.n	80103a0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801038a:	693b      	ldr	r3, [r7, #16]
 801038c:	015a      	lsls	r2, r3, #5
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	4413      	add	r3, r2
 8010392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010396:	461a      	mov	r2, r3
 8010398:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801039c:	6013      	str	r3, [r2, #0]
 801039e:	e013      	b.n	80103c8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80103a0:	693b      	ldr	r3, [r7, #16]
 80103a2:	015a      	lsls	r2, r3, #5
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	4413      	add	r3, r2
 80103a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103ac:	461a      	mov	r2, r3
 80103ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80103b2:	6013      	str	r3, [r2, #0]
 80103b4:	e008      	b.n	80103c8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	015a      	lsls	r2, r3, #5
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	4413      	add	r3, r2
 80103be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103c2:	461a      	mov	r2, r3
 80103c4:	2300      	movs	r3, #0
 80103c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80103c8:	693b      	ldr	r3, [r7, #16]
 80103ca:	015a      	lsls	r2, r3, #5
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	4413      	add	r3, r2
 80103d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103d4:	461a      	mov	r2, r3
 80103d6:	2300      	movs	r3, #0
 80103d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	015a      	lsls	r2, r3, #5
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	4413      	add	r3, r2
 80103e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103e6:	461a      	mov	r2, r3
 80103e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80103ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80103ee:	693b      	ldr	r3, [r7, #16]
 80103f0:	3301      	adds	r3, #1
 80103f2:	613b      	str	r3, [r7, #16]
 80103f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103f6:	693a      	ldr	r2, [r7, #16]
 80103f8:	429a      	cmp	r2, r3
 80103fa:	d3b7      	bcc.n	801036c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010402:	691b      	ldr	r3, [r3, #16]
 8010404:	68fa      	ldr	r2, [r7, #12]
 8010406:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801040a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801040e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	2200      	movs	r2, #0
 8010414:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801041c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	699b      	ldr	r3, [r3, #24]
 8010422:	f043 0210 	orr.w	r2, r3, #16
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	699a      	ldr	r2, [r3, #24]
 801042e:	4b10      	ldr	r3, [pc, #64]	; (8010470 <USB_DevInit+0x294>)
 8010430:	4313      	orrs	r3, r2
 8010432:	687a      	ldr	r2, [r7, #4]
 8010434:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010438:	2b00      	cmp	r3, #0
 801043a:	d005      	beq.n	8010448 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	699b      	ldr	r3, [r3, #24]
 8010440:	f043 0208 	orr.w	r2, r3, #8
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801044a:	2b01      	cmp	r3, #1
 801044c:	d107      	bne.n	801045e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	699b      	ldr	r3, [r3, #24]
 8010452:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010456:	f043 0304 	orr.w	r3, r3, #4
 801045a:	687a      	ldr	r2, [r7, #4]
 801045c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801045e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010460:	4618      	mov	r0, r3
 8010462:	3718      	adds	r7, #24
 8010464:	46bd      	mov	sp, r7
 8010466:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801046a:	b004      	add	sp, #16
 801046c:	4770      	bx	lr
 801046e:	bf00      	nop
 8010470:	803c3800 	.word	0x803c3800

08010474 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010474:	b480      	push	{r7}
 8010476:	b085      	sub	sp, #20
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
 801047c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801047e:	2300      	movs	r3, #0
 8010480:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	3301      	adds	r3, #1
 8010486:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	4a13      	ldr	r2, [pc, #76]	; (80104d8 <USB_FlushTxFifo+0x64>)
 801048c:	4293      	cmp	r3, r2
 801048e:	d901      	bls.n	8010494 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010490:	2303      	movs	r3, #3
 8010492:	e01b      	b.n	80104cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	691b      	ldr	r3, [r3, #16]
 8010498:	2b00      	cmp	r3, #0
 801049a:	daf2      	bge.n	8010482 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801049c:	2300      	movs	r3, #0
 801049e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	019b      	lsls	r3, r3, #6
 80104a4:	f043 0220 	orr.w	r2, r3, #32
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	3301      	adds	r3, #1
 80104b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	4a08      	ldr	r2, [pc, #32]	; (80104d8 <USB_FlushTxFifo+0x64>)
 80104b6:	4293      	cmp	r3, r2
 80104b8:	d901      	bls.n	80104be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80104ba:	2303      	movs	r3, #3
 80104bc:	e006      	b.n	80104cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	691b      	ldr	r3, [r3, #16]
 80104c2:	f003 0320 	and.w	r3, r3, #32
 80104c6:	2b20      	cmp	r3, #32
 80104c8:	d0f0      	beq.n	80104ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80104ca:	2300      	movs	r3, #0
}
 80104cc:	4618      	mov	r0, r3
 80104ce:	3714      	adds	r7, #20
 80104d0:	46bd      	mov	sp, r7
 80104d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d6:	4770      	bx	lr
 80104d8:	00030d40 	.word	0x00030d40

080104dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80104dc:	b480      	push	{r7}
 80104de:	b085      	sub	sp, #20
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80104e4:	2300      	movs	r3, #0
 80104e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	3301      	adds	r3, #1
 80104ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	4a11      	ldr	r2, [pc, #68]	; (8010538 <USB_FlushRxFifo+0x5c>)
 80104f2:	4293      	cmp	r3, r2
 80104f4:	d901      	bls.n	80104fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80104f6:	2303      	movs	r3, #3
 80104f8:	e018      	b.n	801052c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	691b      	ldr	r3, [r3, #16]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	daf2      	bge.n	80104e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010502:	2300      	movs	r3, #0
 8010504:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2210      	movs	r2, #16
 801050a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	3301      	adds	r3, #1
 8010510:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	4a08      	ldr	r2, [pc, #32]	; (8010538 <USB_FlushRxFifo+0x5c>)
 8010516:	4293      	cmp	r3, r2
 8010518:	d901      	bls.n	801051e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801051a:	2303      	movs	r3, #3
 801051c:	e006      	b.n	801052c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	691b      	ldr	r3, [r3, #16]
 8010522:	f003 0310 	and.w	r3, r3, #16
 8010526:	2b10      	cmp	r3, #16
 8010528:	d0f0      	beq.n	801050c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801052a:	2300      	movs	r3, #0
}
 801052c:	4618      	mov	r0, r3
 801052e:	3714      	adds	r7, #20
 8010530:	46bd      	mov	sp, r7
 8010532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010536:	4770      	bx	lr
 8010538:	00030d40 	.word	0x00030d40

0801053c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801053c:	b480      	push	{r7}
 801053e:	b085      	sub	sp, #20
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
 8010544:	460b      	mov	r3, r1
 8010546:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010552:	681a      	ldr	r2, [r3, #0]
 8010554:	78fb      	ldrb	r3, [r7, #3]
 8010556:	68f9      	ldr	r1, [r7, #12]
 8010558:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801055c:	4313      	orrs	r3, r2
 801055e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010560:	2300      	movs	r3, #0
}
 8010562:	4618      	mov	r0, r3
 8010564:	3714      	adds	r7, #20
 8010566:	46bd      	mov	sp, r7
 8010568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056c:	4770      	bx	lr

0801056e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801056e:	b480      	push	{r7}
 8010570:	b087      	sub	sp, #28
 8010572:	af00      	add	r7, sp, #0
 8010574:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801057a:	693b      	ldr	r3, [r7, #16]
 801057c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010580:	689b      	ldr	r3, [r3, #8]
 8010582:	f003 0306 	and.w	r3, r3, #6
 8010586:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	2b02      	cmp	r3, #2
 801058c:	d002      	beq.n	8010594 <USB_GetDevSpeed+0x26>
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	2b06      	cmp	r3, #6
 8010592:	d102      	bne.n	801059a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8010594:	2302      	movs	r3, #2
 8010596:	75fb      	strb	r3, [r7, #23]
 8010598:	e001      	b.n	801059e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 801059a:	230f      	movs	r3, #15
 801059c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801059e:	7dfb      	ldrb	r3, [r7, #23]
}
 80105a0:	4618      	mov	r0, r3
 80105a2:	371c      	adds	r7, #28
 80105a4:	46bd      	mov	sp, r7
 80105a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105aa:	4770      	bx	lr

080105ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80105ac:	b480      	push	{r7}
 80105ae:	b085      	sub	sp, #20
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
 80105b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	781b      	ldrb	r3, [r3, #0]
 80105be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	785b      	ldrb	r3, [r3, #1]
 80105c4:	2b01      	cmp	r3, #1
 80105c6:	d13a      	bne.n	801063e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105ce:	69da      	ldr	r2, [r3, #28]
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	781b      	ldrb	r3, [r3, #0]
 80105d4:	f003 030f 	and.w	r3, r3, #15
 80105d8:	2101      	movs	r1, #1
 80105da:	fa01 f303 	lsl.w	r3, r1, r3
 80105de:	b29b      	uxth	r3, r3
 80105e0:	68f9      	ldr	r1, [r7, #12]
 80105e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80105e6:	4313      	orrs	r3, r2
 80105e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	015a      	lsls	r2, r3, #5
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	4413      	add	r3, r2
 80105f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d155      	bne.n	80106ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010600:	68bb      	ldr	r3, [r7, #8]
 8010602:	015a      	lsls	r2, r3, #5
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	4413      	add	r3, r2
 8010608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801060c:	681a      	ldr	r2, [r3, #0]
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	68db      	ldr	r3, [r3, #12]
 8010612:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010616:	683b      	ldr	r3, [r7, #0]
 8010618:	791b      	ldrb	r3, [r3, #4]
 801061a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801061c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801061e:	68bb      	ldr	r3, [r7, #8]
 8010620:	059b      	lsls	r3, r3, #22
 8010622:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010624:	4313      	orrs	r3, r2
 8010626:	68ba      	ldr	r2, [r7, #8]
 8010628:	0151      	lsls	r1, r2, #5
 801062a:	68fa      	ldr	r2, [r7, #12]
 801062c:	440a      	add	r2, r1
 801062e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801063a:	6013      	str	r3, [r2, #0]
 801063c:	e036      	b.n	80106ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010644:	69da      	ldr	r2, [r3, #28]
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	781b      	ldrb	r3, [r3, #0]
 801064a:	f003 030f 	and.w	r3, r3, #15
 801064e:	2101      	movs	r1, #1
 8010650:	fa01 f303 	lsl.w	r3, r1, r3
 8010654:	041b      	lsls	r3, r3, #16
 8010656:	68f9      	ldr	r1, [r7, #12]
 8010658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801065c:	4313      	orrs	r3, r2
 801065e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	015a      	lsls	r2, r3, #5
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	4413      	add	r3, r2
 8010668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010672:	2b00      	cmp	r3, #0
 8010674:	d11a      	bne.n	80106ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010676:	68bb      	ldr	r3, [r7, #8]
 8010678:	015a      	lsls	r2, r3, #5
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	4413      	add	r3, r2
 801067e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010682:	681a      	ldr	r2, [r3, #0]
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	68db      	ldr	r3, [r3, #12]
 8010688:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	791b      	ldrb	r3, [r3, #4]
 8010690:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010692:	430b      	orrs	r3, r1
 8010694:	4313      	orrs	r3, r2
 8010696:	68ba      	ldr	r2, [r7, #8]
 8010698:	0151      	lsls	r1, r2, #5
 801069a:	68fa      	ldr	r2, [r7, #12]
 801069c:	440a      	add	r2, r1
 801069e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80106a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80106aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80106ac:	2300      	movs	r3, #0
}
 80106ae:	4618      	mov	r0, r3
 80106b0:	3714      	adds	r7, #20
 80106b2:	46bd      	mov	sp, r7
 80106b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b8:	4770      	bx	lr
	...

080106bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80106bc:	b480      	push	{r7}
 80106be:	b085      	sub	sp, #20
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
 80106c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	781b      	ldrb	r3, [r3, #0]
 80106ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	785b      	ldrb	r3, [r3, #1]
 80106d4:	2b01      	cmp	r3, #1
 80106d6:	d161      	bne.n	801079c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	015a      	lsls	r2, r3, #5
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	4413      	add	r3, r2
 80106e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80106ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80106ee:	d11f      	bne.n	8010730 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	015a      	lsls	r2, r3, #5
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	4413      	add	r3, r2
 80106f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	68ba      	ldr	r2, [r7, #8]
 8010700:	0151      	lsls	r1, r2, #5
 8010702:	68fa      	ldr	r2, [r7, #12]
 8010704:	440a      	add	r2, r1
 8010706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801070a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801070e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	015a      	lsls	r2, r3, #5
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	4413      	add	r3, r2
 8010718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	68ba      	ldr	r2, [r7, #8]
 8010720:	0151      	lsls	r1, r2, #5
 8010722:	68fa      	ldr	r2, [r7, #12]
 8010724:	440a      	add	r2, r1
 8010726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801072a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801072e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	781b      	ldrb	r3, [r3, #0]
 801073c:	f003 030f 	and.w	r3, r3, #15
 8010740:	2101      	movs	r1, #1
 8010742:	fa01 f303 	lsl.w	r3, r1, r3
 8010746:	b29b      	uxth	r3, r3
 8010748:	43db      	mvns	r3, r3
 801074a:	68f9      	ldr	r1, [r7, #12]
 801074c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010750:	4013      	ands	r3, r2
 8010752:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801075a:	69da      	ldr	r2, [r3, #28]
 801075c:	683b      	ldr	r3, [r7, #0]
 801075e:	781b      	ldrb	r3, [r3, #0]
 8010760:	f003 030f 	and.w	r3, r3, #15
 8010764:	2101      	movs	r1, #1
 8010766:	fa01 f303 	lsl.w	r3, r1, r3
 801076a:	b29b      	uxth	r3, r3
 801076c:	43db      	mvns	r3, r3
 801076e:	68f9      	ldr	r1, [r7, #12]
 8010770:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010774:	4013      	ands	r3, r2
 8010776:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010778:	68bb      	ldr	r3, [r7, #8]
 801077a:	015a      	lsls	r2, r3, #5
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	4413      	add	r3, r2
 8010780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010784:	681a      	ldr	r2, [r3, #0]
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	0159      	lsls	r1, r3, #5
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	440b      	add	r3, r1
 801078e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010792:	4619      	mov	r1, r3
 8010794:	4b35      	ldr	r3, [pc, #212]	; (801086c <USB_DeactivateEndpoint+0x1b0>)
 8010796:	4013      	ands	r3, r2
 8010798:	600b      	str	r3, [r1, #0]
 801079a:	e060      	b.n	801085e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	015a      	lsls	r2, r3, #5
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	4413      	add	r3, r2
 80107a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80107ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80107b2:	d11f      	bne.n	80107f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80107b4:	68bb      	ldr	r3, [r7, #8]
 80107b6:	015a      	lsls	r2, r3, #5
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	4413      	add	r3, r2
 80107bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	68ba      	ldr	r2, [r7, #8]
 80107c4:	0151      	lsls	r1, r2, #5
 80107c6:	68fa      	ldr	r2, [r7, #12]
 80107c8:	440a      	add	r2, r1
 80107ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80107ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80107d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	015a      	lsls	r2, r3, #5
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	4413      	add	r3, r2
 80107dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	68ba      	ldr	r2, [r7, #8]
 80107e4:	0151      	lsls	r1, r2, #5
 80107e6:	68fa      	ldr	r2, [r7, #12]
 80107e8:	440a      	add	r2, r1
 80107ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80107ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80107f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	781b      	ldrb	r3, [r3, #0]
 8010800:	f003 030f 	and.w	r3, r3, #15
 8010804:	2101      	movs	r1, #1
 8010806:	fa01 f303 	lsl.w	r3, r1, r3
 801080a:	041b      	lsls	r3, r3, #16
 801080c:	43db      	mvns	r3, r3
 801080e:	68f9      	ldr	r1, [r7, #12]
 8010810:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010814:	4013      	ands	r3, r2
 8010816:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801081e:	69da      	ldr	r2, [r3, #28]
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	781b      	ldrb	r3, [r3, #0]
 8010824:	f003 030f 	and.w	r3, r3, #15
 8010828:	2101      	movs	r1, #1
 801082a:	fa01 f303 	lsl.w	r3, r1, r3
 801082e:	041b      	lsls	r3, r3, #16
 8010830:	43db      	mvns	r3, r3
 8010832:	68f9      	ldr	r1, [r7, #12]
 8010834:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010838:	4013      	ands	r3, r2
 801083a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	015a      	lsls	r2, r3, #5
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	4413      	add	r3, r2
 8010844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010848:	681a      	ldr	r2, [r3, #0]
 801084a:	68bb      	ldr	r3, [r7, #8]
 801084c:	0159      	lsls	r1, r3, #5
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	440b      	add	r3, r1
 8010852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010856:	4619      	mov	r1, r3
 8010858:	4b05      	ldr	r3, [pc, #20]	; (8010870 <USB_DeactivateEndpoint+0x1b4>)
 801085a:	4013      	ands	r3, r2
 801085c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801085e:	2300      	movs	r3, #0
}
 8010860:	4618      	mov	r0, r3
 8010862:	3714      	adds	r7, #20
 8010864:	46bd      	mov	sp, r7
 8010866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086a:	4770      	bx	lr
 801086c:	ec337800 	.word	0xec337800
 8010870:	eff37800 	.word	0xeff37800

08010874 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b086      	sub	sp, #24
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
 801087c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	781b      	ldrb	r3, [r3, #0]
 8010886:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	785b      	ldrb	r3, [r3, #1]
 801088c:	2b01      	cmp	r3, #1
 801088e:	f040 810a 	bne.w	8010aa6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010892:	683b      	ldr	r3, [r7, #0]
 8010894:	699b      	ldr	r3, [r3, #24]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d132      	bne.n	8010900 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801089a:	693b      	ldr	r3, [r7, #16]
 801089c:	015a      	lsls	r2, r3, #5
 801089e:	697b      	ldr	r3, [r7, #20]
 80108a0:	4413      	add	r3, r2
 80108a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108a6:	691b      	ldr	r3, [r3, #16]
 80108a8:	693a      	ldr	r2, [r7, #16]
 80108aa:	0151      	lsls	r1, r2, #5
 80108ac:	697a      	ldr	r2, [r7, #20]
 80108ae:	440a      	add	r2, r1
 80108b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80108b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80108bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80108be:	693b      	ldr	r3, [r7, #16]
 80108c0:	015a      	lsls	r2, r3, #5
 80108c2:	697b      	ldr	r3, [r7, #20]
 80108c4:	4413      	add	r3, r2
 80108c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108ca:	691b      	ldr	r3, [r3, #16]
 80108cc:	693a      	ldr	r2, [r7, #16]
 80108ce:	0151      	lsls	r1, r2, #5
 80108d0:	697a      	ldr	r2, [r7, #20]
 80108d2:	440a      	add	r2, r1
 80108d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80108dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80108de:	693b      	ldr	r3, [r7, #16]
 80108e0:	015a      	lsls	r2, r3, #5
 80108e2:	697b      	ldr	r3, [r7, #20]
 80108e4:	4413      	add	r3, r2
 80108e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108ea:	691b      	ldr	r3, [r3, #16]
 80108ec:	693a      	ldr	r2, [r7, #16]
 80108ee:	0151      	lsls	r1, r2, #5
 80108f0:	697a      	ldr	r2, [r7, #20]
 80108f2:	440a      	add	r2, r1
 80108f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108f8:	0cdb      	lsrs	r3, r3, #19
 80108fa:	04db      	lsls	r3, r3, #19
 80108fc:	6113      	str	r3, [r2, #16]
 80108fe:	e074      	b.n	80109ea <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010900:	693b      	ldr	r3, [r7, #16]
 8010902:	015a      	lsls	r2, r3, #5
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	4413      	add	r3, r2
 8010908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801090c:	691b      	ldr	r3, [r3, #16]
 801090e:	693a      	ldr	r2, [r7, #16]
 8010910:	0151      	lsls	r1, r2, #5
 8010912:	697a      	ldr	r2, [r7, #20]
 8010914:	440a      	add	r2, r1
 8010916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801091a:	0cdb      	lsrs	r3, r3, #19
 801091c:	04db      	lsls	r3, r3, #19
 801091e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010920:	693b      	ldr	r3, [r7, #16]
 8010922:	015a      	lsls	r2, r3, #5
 8010924:	697b      	ldr	r3, [r7, #20]
 8010926:	4413      	add	r3, r2
 8010928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801092c:	691b      	ldr	r3, [r3, #16]
 801092e:	693a      	ldr	r2, [r7, #16]
 8010930:	0151      	lsls	r1, r2, #5
 8010932:	697a      	ldr	r2, [r7, #20]
 8010934:	440a      	add	r2, r1
 8010936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801093a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801093e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010942:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010944:	693b      	ldr	r3, [r7, #16]
 8010946:	015a      	lsls	r2, r3, #5
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	4413      	add	r3, r2
 801094c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010950:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	6999      	ldr	r1, [r3, #24]
 8010956:	683b      	ldr	r3, [r7, #0]
 8010958:	68db      	ldr	r3, [r3, #12]
 801095a:	440b      	add	r3, r1
 801095c:	1e59      	subs	r1, r3, #1
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	68db      	ldr	r3, [r3, #12]
 8010962:	fbb1 f3f3 	udiv	r3, r1, r3
 8010966:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010968:	4b9e      	ldr	r3, [pc, #632]	; (8010be4 <USB_EPStartXfer+0x370>)
 801096a:	400b      	ands	r3, r1
 801096c:	6939      	ldr	r1, [r7, #16]
 801096e:	0148      	lsls	r0, r1, #5
 8010970:	6979      	ldr	r1, [r7, #20]
 8010972:	4401      	add	r1, r0
 8010974:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010978:	4313      	orrs	r3, r2
 801097a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801097c:	693b      	ldr	r3, [r7, #16]
 801097e:	015a      	lsls	r2, r3, #5
 8010980:	697b      	ldr	r3, [r7, #20]
 8010982:	4413      	add	r3, r2
 8010984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010988:	691a      	ldr	r2, [r3, #16]
 801098a:	683b      	ldr	r3, [r7, #0]
 801098c:	699b      	ldr	r3, [r3, #24]
 801098e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010992:	6939      	ldr	r1, [r7, #16]
 8010994:	0148      	lsls	r0, r1, #5
 8010996:	6979      	ldr	r1, [r7, #20]
 8010998:	4401      	add	r1, r0
 801099a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801099e:	4313      	orrs	r3, r2
 80109a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80109a2:	683b      	ldr	r3, [r7, #0]
 80109a4:	791b      	ldrb	r3, [r3, #4]
 80109a6:	2b01      	cmp	r3, #1
 80109a8:	d11f      	bne.n	80109ea <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80109aa:	693b      	ldr	r3, [r7, #16]
 80109ac:	015a      	lsls	r2, r3, #5
 80109ae:	697b      	ldr	r3, [r7, #20]
 80109b0:	4413      	add	r3, r2
 80109b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109b6:	691b      	ldr	r3, [r3, #16]
 80109b8:	693a      	ldr	r2, [r7, #16]
 80109ba:	0151      	lsls	r1, r2, #5
 80109bc:	697a      	ldr	r2, [r7, #20]
 80109be:	440a      	add	r2, r1
 80109c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80109c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80109ca:	693b      	ldr	r3, [r7, #16]
 80109cc:	015a      	lsls	r2, r3, #5
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	4413      	add	r3, r2
 80109d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109d6:	691b      	ldr	r3, [r3, #16]
 80109d8:	693a      	ldr	r2, [r7, #16]
 80109da:	0151      	lsls	r1, r2, #5
 80109dc:	697a      	ldr	r2, [r7, #20]
 80109de:	440a      	add	r2, r1
 80109e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80109e8:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80109ea:	693b      	ldr	r3, [r7, #16]
 80109ec:	015a      	lsls	r2, r3, #5
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	4413      	add	r3, r2
 80109f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	693a      	ldr	r2, [r7, #16]
 80109fa:	0151      	lsls	r1, r2, #5
 80109fc:	697a      	ldr	r2, [r7, #20]
 80109fe:	440a      	add	r2, r1
 8010a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010a08:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	791b      	ldrb	r3, [r3, #4]
 8010a0e:	2b01      	cmp	r3, #1
 8010a10:	d015      	beq.n	8010a3e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	699b      	ldr	r3, [r3, #24]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	f000 8106 	beq.w	8010c28 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010a1c:	697b      	ldr	r3, [r7, #20]
 8010a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	781b      	ldrb	r3, [r3, #0]
 8010a28:	f003 030f 	and.w	r3, r3, #15
 8010a2c:	2101      	movs	r1, #1
 8010a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8010a32:	6979      	ldr	r1, [r7, #20]
 8010a34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010a38:	4313      	orrs	r3, r2
 8010a3a:	634b      	str	r3, [r1, #52]	; 0x34
 8010a3c:	e0f4      	b.n	8010c28 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010a3e:	697b      	ldr	r3, [r7, #20]
 8010a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a44:	689b      	ldr	r3, [r3, #8]
 8010a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d110      	bne.n	8010a70 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010a4e:	693b      	ldr	r3, [r7, #16]
 8010a50:	015a      	lsls	r2, r3, #5
 8010a52:	697b      	ldr	r3, [r7, #20]
 8010a54:	4413      	add	r3, r2
 8010a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	693a      	ldr	r2, [r7, #16]
 8010a5e:	0151      	lsls	r1, r2, #5
 8010a60:	697a      	ldr	r2, [r7, #20]
 8010a62:	440a      	add	r2, r1
 8010a64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010a6c:	6013      	str	r3, [r2, #0]
 8010a6e:	e00f      	b.n	8010a90 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010a70:	693b      	ldr	r3, [r7, #16]
 8010a72:	015a      	lsls	r2, r3, #5
 8010a74:	697b      	ldr	r3, [r7, #20]
 8010a76:	4413      	add	r3, r2
 8010a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	693a      	ldr	r2, [r7, #16]
 8010a80:	0151      	lsls	r1, r2, #5
 8010a82:	697a      	ldr	r2, [r7, #20]
 8010a84:	440a      	add	r2, r1
 8010a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010a8e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	6919      	ldr	r1, [r3, #16]
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	781a      	ldrb	r2, [r3, #0]
 8010a98:	683b      	ldr	r3, [r7, #0]
 8010a9a:	699b      	ldr	r3, [r3, #24]
 8010a9c:	b29b      	uxth	r3, r3
 8010a9e:	6878      	ldr	r0, [r7, #4]
 8010aa0:	f000 fa94 	bl	8010fcc <USB_WritePacket>
 8010aa4:	e0c0      	b.n	8010c28 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010aa6:	693b      	ldr	r3, [r7, #16]
 8010aa8:	015a      	lsls	r2, r3, #5
 8010aaa:	697b      	ldr	r3, [r7, #20]
 8010aac:	4413      	add	r3, r2
 8010aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ab2:	691b      	ldr	r3, [r3, #16]
 8010ab4:	693a      	ldr	r2, [r7, #16]
 8010ab6:	0151      	lsls	r1, r2, #5
 8010ab8:	697a      	ldr	r2, [r7, #20]
 8010aba:	440a      	add	r2, r1
 8010abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ac0:	0cdb      	lsrs	r3, r3, #19
 8010ac2:	04db      	lsls	r3, r3, #19
 8010ac4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010ac6:	693b      	ldr	r3, [r7, #16]
 8010ac8:	015a      	lsls	r2, r3, #5
 8010aca:	697b      	ldr	r3, [r7, #20]
 8010acc:	4413      	add	r3, r2
 8010ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ad2:	691b      	ldr	r3, [r3, #16]
 8010ad4:	693a      	ldr	r2, [r7, #16]
 8010ad6:	0151      	lsls	r1, r2, #5
 8010ad8:	697a      	ldr	r2, [r7, #20]
 8010ada:	440a      	add	r2, r1
 8010adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ae0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010ae4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010ae8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	699b      	ldr	r3, [r3, #24]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d123      	bne.n	8010b3a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010af2:	693b      	ldr	r3, [r7, #16]
 8010af4:	015a      	lsls	r2, r3, #5
 8010af6:	697b      	ldr	r3, [r7, #20]
 8010af8:	4413      	add	r3, r2
 8010afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010afe:	691a      	ldr	r2, [r3, #16]
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	68db      	ldr	r3, [r3, #12]
 8010b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010b08:	6939      	ldr	r1, [r7, #16]
 8010b0a:	0148      	lsls	r0, r1, #5
 8010b0c:	6979      	ldr	r1, [r7, #20]
 8010b0e:	4401      	add	r1, r0
 8010b10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010b14:	4313      	orrs	r3, r2
 8010b16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010b18:	693b      	ldr	r3, [r7, #16]
 8010b1a:	015a      	lsls	r2, r3, #5
 8010b1c:	697b      	ldr	r3, [r7, #20]
 8010b1e:	4413      	add	r3, r2
 8010b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b24:	691b      	ldr	r3, [r3, #16]
 8010b26:	693a      	ldr	r2, [r7, #16]
 8010b28:	0151      	lsls	r1, r2, #5
 8010b2a:	697a      	ldr	r2, [r7, #20]
 8010b2c:	440a      	add	r2, r1
 8010b2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010b36:	6113      	str	r3, [r2, #16]
 8010b38:	e037      	b.n	8010baa <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	699a      	ldr	r2, [r3, #24]
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	68db      	ldr	r3, [r3, #12]
 8010b42:	4413      	add	r3, r2
 8010b44:	1e5a      	subs	r2, r3, #1
 8010b46:	683b      	ldr	r3, [r7, #0]
 8010b48:	68db      	ldr	r3, [r3, #12]
 8010b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b4e:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	68db      	ldr	r3, [r3, #12]
 8010b54:	89fa      	ldrh	r2, [r7, #14]
 8010b56:	fb03 f202 	mul.w	r2, r3, r2
 8010b5a:	683b      	ldr	r3, [r7, #0]
 8010b5c:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010b5e:	693b      	ldr	r3, [r7, #16]
 8010b60:	015a      	lsls	r2, r3, #5
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	4413      	add	r3, r2
 8010b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b6a:	691a      	ldr	r2, [r3, #16]
 8010b6c:	89fb      	ldrh	r3, [r7, #14]
 8010b6e:	04d9      	lsls	r1, r3, #19
 8010b70:	4b1c      	ldr	r3, [pc, #112]	; (8010be4 <USB_EPStartXfer+0x370>)
 8010b72:	400b      	ands	r3, r1
 8010b74:	6939      	ldr	r1, [r7, #16]
 8010b76:	0148      	lsls	r0, r1, #5
 8010b78:	6979      	ldr	r1, [r7, #20]
 8010b7a:	4401      	add	r1, r0
 8010b7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010b80:	4313      	orrs	r3, r2
 8010b82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8010b84:	693b      	ldr	r3, [r7, #16]
 8010b86:	015a      	lsls	r2, r3, #5
 8010b88:	697b      	ldr	r3, [r7, #20]
 8010b8a:	4413      	add	r3, r2
 8010b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b90:	691a      	ldr	r2, [r3, #16]
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	69db      	ldr	r3, [r3, #28]
 8010b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010b9a:	6939      	ldr	r1, [r7, #16]
 8010b9c:	0148      	lsls	r0, r1, #5
 8010b9e:	6979      	ldr	r1, [r7, #20]
 8010ba0:	4401      	add	r1, r0
 8010ba2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010ba6:	4313      	orrs	r3, r2
 8010ba8:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8010baa:	683b      	ldr	r3, [r7, #0]
 8010bac:	791b      	ldrb	r3, [r3, #4]
 8010bae:	2b01      	cmp	r3, #1
 8010bb0:	d12a      	bne.n	8010c08 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010bb8:	689b      	ldr	r3, [r3, #8]
 8010bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d112      	bne.n	8010be8 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010bc2:	693b      	ldr	r3, [r7, #16]
 8010bc4:	015a      	lsls	r2, r3, #5
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	4413      	add	r3, r2
 8010bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	693a      	ldr	r2, [r7, #16]
 8010bd2:	0151      	lsls	r1, r2, #5
 8010bd4:	697a      	ldr	r2, [r7, #20]
 8010bd6:	440a      	add	r2, r1
 8010bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010be0:	6013      	str	r3, [r2, #0]
 8010be2:	e011      	b.n	8010c08 <USB_EPStartXfer+0x394>
 8010be4:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010be8:	693b      	ldr	r3, [r7, #16]
 8010bea:	015a      	lsls	r2, r3, #5
 8010bec:	697b      	ldr	r3, [r7, #20]
 8010bee:	4413      	add	r3, r2
 8010bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	693a      	ldr	r2, [r7, #16]
 8010bf8:	0151      	lsls	r1, r2, #5
 8010bfa:	697a      	ldr	r2, [r7, #20]
 8010bfc:	440a      	add	r2, r1
 8010bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010c06:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010c08:	693b      	ldr	r3, [r7, #16]
 8010c0a:	015a      	lsls	r2, r3, #5
 8010c0c:	697b      	ldr	r3, [r7, #20]
 8010c0e:	4413      	add	r3, r2
 8010c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	693a      	ldr	r2, [r7, #16]
 8010c18:	0151      	lsls	r1, r2, #5
 8010c1a:	697a      	ldr	r2, [r7, #20]
 8010c1c:	440a      	add	r2, r1
 8010c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010c26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010c28:	2300      	movs	r3, #0
}
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	3718      	adds	r7, #24
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}
 8010c32:	bf00      	nop

08010c34 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010c34:	b480      	push	{r7}
 8010c36:	b085      	sub	sp, #20
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
 8010c3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	781b      	ldrb	r3, [r3, #0]
 8010c46:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	785b      	ldrb	r3, [r3, #1]
 8010c4c:	2b01      	cmp	r3, #1
 8010c4e:	f040 80ab 	bne.w	8010da8 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	699b      	ldr	r3, [r3, #24]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d132      	bne.n	8010cc0 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010c5a:	68bb      	ldr	r3, [r7, #8]
 8010c5c:	015a      	lsls	r2, r3, #5
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	4413      	add	r3, r2
 8010c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c66:	691b      	ldr	r3, [r3, #16]
 8010c68:	68ba      	ldr	r2, [r7, #8]
 8010c6a:	0151      	lsls	r1, r2, #5
 8010c6c:	68fa      	ldr	r2, [r7, #12]
 8010c6e:	440a      	add	r2, r1
 8010c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010c78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010c7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	015a      	lsls	r2, r3, #5
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	4413      	add	r3, r2
 8010c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c8a:	691b      	ldr	r3, [r3, #16]
 8010c8c:	68ba      	ldr	r2, [r7, #8]
 8010c8e:	0151      	lsls	r1, r2, #5
 8010c90:	68fa      	ldr	r2, [r7, #12]
 8010c92:	440a      	add	r2, r1
 8010c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010c9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	015a      	lsls	r2, r3, #5
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	4413      	add	r3, r2
 8010ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010caa:	691b      	ldr	r3, [r3, #16]
 8010cac:	68ba      	ldr	r2, [r7, #8]
 8010cae:	0151      	lsls	r1, r2, #5
 8010cb0:	68fa      	ldr	r2, [r7, #12]
 8010cb2:	440a      	add	r2, r1
 8010cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010cb8:	0cdb      	lsrs	r3, r3, #19
 8010cba:	04db      	lsls	r3, r3, #19
 8010cbc:	6113      	str	r3, [r2, #16]
 8010cbe:	e04e      	b.n	8010d5e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	015a      	lsls	r2, r3, #5
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	4413      	add	r3, r2
 8010cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ccc:	691b      	ldr	r3, [r3, #16]
 8010cce:	68ba      	ldr	r2, [r7, #8]
 8010cd0:	0151      	lsls	r1, r2, #5
 8010cd2:	68fa      	ldr	r2, [r7, #12]
 8010cd4:	440a      	add	r2, r1
 8010cd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010cda:	0cdb      	lsrs	r3, r3, #19
 8010cdc:	04db      	lsls	r3, r3, #19
 8010cde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010ce0:	68bb      	ldr	r3, [r7, #8]
 8010ce2:	015a      	lsls	r2, r3, #5
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	4413      	add	r3, r2
 8010ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cec:	691b      	ldr	r3, [r3, #16]
 8010cee:	68ba      	ldr	r2, [r7, #8]
 8010cf0:	0151      	lsls	r1, r2, #5
 8010cf2:	68fa      	ldr	r2, [r7, #12]
 8010cf4:	440a      	add	r2, r1
 8010cf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010cfa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010cfe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010d02:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010d04:	683b      	ldr	r3, [r7, #0]
 8010d06:	699a      	ldr	r2, [r3, #24]
 8010d08:	683b      	ldr	r3, [r7, #0]
 8010d0a:	68db      	ldr	r3, [r3, #12]
 8010d0c:	429a      	cmp	r2, r3
 8010d0e:	d903      	bls.n	8010d18 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	68da      	ldr	r2, [r3, #12]
 8010d14:	683b      	ldr	r3, [r7, #0]
 8010d16:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010d18:	68bb      	ldr	r3, [r7, #8]
 8010d1a:	015a      	lsls	r2, r3, #5
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	4413      	add	r3, r2
 8010d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d24:	691b      	ldr	r3, [r3, #16]
 8010d26:	68ba      	ldr	r2, [r7, #8]
 8010d28:	0151      	lsls	r1, r2, #5
 8010d2a:	68fa      	ldr	r2, [r7, #12]
 8010d2c:	440a      	add	r2, r1
 8010d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010d36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010d38:	68bb      	ldr	r3, [r7, #8]
 8010d3a:	015a      	lsls	r2, r3, #5
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	4413      	add	r3, r2
 8010d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d44:	691a      	ldr	r2, [r3, #16]
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	699b      	ldr	r3, [r3, #24]
 8010d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010d4e:	68b9      	ldr	r1, [r7, #8]
 8010d50:	0148      	lsls	r0, r1, #5
 8010d52:	68f9      	ldr	r1, [r7, #12]
 8010d54:	4401      	add	r1, r0
 8010d56:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010d5a:	4313      	orrs	r3, r2
 8010d5c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	015a      	lsls	r2, r3, #5
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	4413      	add	r3, r2
 8010d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	68ba      	ldr	r2, [r7, #8]
 8010d6e:	0151      	lsls	r1, r2, #5
 8010d70:	68fa      	ldr	r2, [r7, #12]
 8010d72:	440a      	add	r2, r1
 8010d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010d7c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8010d7e:	683b      	ldr	r3, [r7, #0]
 8010d80:	699b      	ldr	r3, [r3, #24]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d071      	beq.n	8010e6a <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	781b      	ldrb	r3, [r3, #0]
 8010d92:	f003 030f 	and.w	r3, r3, #15
 8010d96:	2101      	movs	r1, #1
 8010d98:	fa01 f303 	lsl.w	r3, r1, r3
 8010d9c:	68f9      	ldr	r1, [r7, #12]
 8010d9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010da2:	4313      	orrs	r3, r2
 8010da4:	634b      	str	r3, [r1, #52]	; 0x34
 8010da6:	e060      	b.n	8010e6a <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	015a      	lsls	r2, r3, #5
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	4413      	add	r3, r2
 8010db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010db4:	691b      	ldr	r3, [r3, #16]
 8010db6:	68ba      	ldr	r2, [r7, #8]
 8010db8:	0151      	lsls	r1, r2, #5
 8010dba:	68fa      	ldr	r2, [r7, #12]
 8010dbc:	440a      	add	r2, r1
 8010dbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010dc2:	0cdb      	lsrs	r3, r3, #19
 8010dc4:	04db      	lsls	r3, r3, #19
 8010dc6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010dc8:	68bb      	ldr	r3, [r7, #8]
 8010dca:	015a      	lsls	r2, r3, #5
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	4413      	add	r3, r2
 8010dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010dd4:	691b      	ldr	r3, [r3, #16]
 8010dd6:	68ba      	ldr	r2, [r7, #8]
 8010dd8:	0151      	lsls	r1, r2, #5
 8010dda:	68fa      	ldr	r2, [r7, #12]
 8010ddc:	440a      	add	r2, r1
 8010dde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010de2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010de6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010dea:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010dec:	683b      	ldr	r3, [r7, #0]
 8010dee:	699b      	ldr	r3, [r3, #24]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d003      	beq.n	8010dfc <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	68da      	ldr	r2, [r3, #12]
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	68da      	ldr	r2, [r3, #12]
 8010e00:	683b      	ldr	r3, [r7, #0]
 8010e02:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010e04:	68bb      	ldr	r3, [r7, #8]
 8010e06:	015a      	lsls	r2, r3, #5
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	4413      	add	r3, r2
 8010e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e10:	691b      	ldr	r3, [r3, #16]
 8010e12:	68ba      	ldr	r2, [r7, #8]
 8010e14:	0151      	lsls	r1, r2, #5
 8010e16:	68fa      	ldr	r2, [r7, #12]
 8010e18:	440a      	add	r2, r1
 8010e1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010e22:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8010e24:	68bb      	ldr	r3, [r7, #8]
 8010e26:	015a      	lsls	r2, r3, #5
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	4413      	add	r3, r2
 8010e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e30:	691a      	ldr	r2, [r3, #16]
 8010e32:	683b      	ldr	r3, [r7, #0]
 8010e34:	69db      	ldr	r3, [r3, #28]
 8010e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010e3a:	68b9      	ldr	r1, [r7, #8]
 8010e3c:	0148      	lsls	r0, r1, #5
 8010e3e:	68f9      	ldr	r1, [r7, #12]
 8010e40:	4401      	add	r1, r0
 8010e42:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010e46:	4313      	orrs	r3, r2
 8010e48:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	015a      	lsls	r2, r3, #5
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	4413      	add	r3, r2
 8010e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	68ba      	ldr	r2, [r7, #8]
 8010e5a:	0151      	lsls	r1, r2, #5
 8010e5c:	68fa      	ldr	r2, [r7, #12]
 8010e5e:	440a      	add	r2, r1
 8010e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010e68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010e6a:	2300      	movs	r3, #0
}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	3714      	adds	r7, #20
 8010e70:	46bd      	mov	sp, r7
 8010e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e76:	4770      	bx	lr

08010e78 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010e78:	b480      	push	{r7}
 8010e7a:	b087      	sub	sp, #28
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
 8010e80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010e82:	2300      	movs	r3, #0
 8010e84:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8010e86:	2300      	movs	r3, #0
 8010e88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	785b      	ldrb	r3, [r3, #1]
 8010e92:	2b01      	cmp	r3, #1
 8010e94:	d14a      	bne.n	8010f2c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	781b      	ldrb	r3, [r3, #0]
 8010e9a:	015a      	lsls	r2, r3, #5
 8010e9c:	693b      	ldr	r3, [r7, #16]
 8010e9e:	4413      	add	r3, r2
 8010ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010eae:	f040 8086 	bne.w	8010fbe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	781b      	ldrb	r3, [r3, #0]
 8010eb6:	015a      	lsls	r2, r3, #5
 8010eb8:	693b      	ldr	r3, [r7, #16]
 8010eba:	4413      	add	r3, r2
 8010ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	683a      	ldr	r2, [r7, #0]
 8010ec4:	7812      	ldrb	r2, [r2, #0]
 8010ec6:	0151      	lsls	r1, r2, #5
 8010ec8:	693a      	ldr	r2, [r7, #16]
 8010eca:	440a      	add	r2, r1
 8010ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010ed0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010ed4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8010ed6:	683b      	ldr	r3, [r7, #0]
 8010ed8:	781b      	ldrb	r3, [r3, #0]
 8010eda:	015a      	lsls	r2, r3, #5
 8010edc:	693b      	ldr	r3, [r7, #16]
 8010ede:	4413      	add	r3, r2
 8010ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	683a      	ldr	r2, [r7, #0]
 8010ee8:	7812      	ldrb	r2, [r2, #0]
 8010eea:	0151      	lsls	r1, r2, #5
 8010eec:	693a      	ldr	r2, [r7, #16]
 8010eee:	440a      	add	r2, r1
 8010ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010ef4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010ef8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	3301      	adds	r3, #1
 8010efe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	f242 7210 	movw	r2, #10000	; 0x2710
 8010f06:	4293      	cmp	r3, r2
 8010f08:	d902      	bls.n	8010f10 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	75fb      	strb	r3, [r7, #23]
          break;
 8010f0e:	e056      	b.n	8010fbe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	781b      	ldrb	r3, [r3, #0]
 8010f14:	015a      	lsls	r2, r3, #5
 8010f16:	693b      	ldr	r3, [r7, #16]
 8010f18:	4413      	add	r3, r2
 8010f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010f24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f28:	d0e7      	beq.n	8010efa <USB_EPStopXfer+0x82>
 8010f2a:	e048      	b.n	8010fbe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	781b      	ldrb	r3, [r3, #0]
 8010f30:	015a      	lsls	r2, r3, #5
 8010f32:	693b      	ldr	r3, [r7, #16]
 8010f34:	4413      	add	r3, r2
 8010f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010f40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f44:	d13b      	bne.n	8010fbe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	781b      	ldrb	r3, [r3, #0]
 8010f4a:	015a      	lsls	r2, r3, #5
 8010f4c:	693b      	ldr	r3, [r7, #16]
 8010f4e:	4413      	add	r3, r2
 8010f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	683a      	ldr	r2, [r7, #0]
 8010f58:	7812      	ldrb	r2, [r2, #0]
 8010f5a:	0151      	lsls	r1, r2, #5
 8010f5c:	693a      	ldr	r2, [r7, #16]
 8010f5e:	440a      	add	r2, r1
 8010f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010f64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010f68:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	781b      	ldrb	r3, [r3, #0]
 8010f6e:	015a      	lsls	r2, r3, #5
 8010f70:	693b      	ldr	r3, [r7, #16]
 8010f72:	4413      	add	r3, r2
 8010f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	683a      	ldr	r2, [r7, #0]
 8010f7c:	7812      	ldrb	r2, [r2, #0]
 8010f7e:	0151      	lsls	r1, r2, #5
 8010f80:	693a      	ldr	r2, [r7, #16]
 8010f82:	440a      	add	r2, r1
 8010f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010f88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010f8c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	3301      	adds	r3, #1
 8010f92:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	f242 7210 	movw	r2, #10000	; 0x2710
 8010f9a:	4293      	cmp	r3, r2
 8010f9c:	d902      	bls.n	8010fa4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8010f9e:	2301      	movs	r3, #1
 8010fa0:	75fb      	strb	r3, [r7, #23]
          break;
 8010fa2:	e00c      	b.n	8010fbe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8010fa4:	683b      	ldr	r3, [r7, #0]
 8010fa6:	781b      	ldrb	r3, [r3, #0]
 8010fa8:	015a      	lsls	r2, r3, #5
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	4413      	add	r3, r2
 8010fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010fbc:	d0e7      	beq.n	8010f8e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8010fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	371c      	adds	r7, #28
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fca:	4770      	bx	lr

08010fcc <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8010fcc:	b480      	push	{r7}
 8010fce:	b089      	sub	sp, #36	; 0x24
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	60f8      	str	r0, [r7, #12]
 8010fd4:	60b9      	str	r1, [r7, #8]
 8010fd6:	4611      	mov	r1, r2
 8010fd8:	461a      	mov	r2, r3
 8010fda:	460b      	mov	r3, r1
 8010fdc:	71fb      	strb	r3, [r7, #7]
 8010fde:	4613      	mov	r3, r2
 8010fe0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8010fe6:	68bb      	ldr	r3, [r7, #8]
 8010fe8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8010fea:	88bb      	ldrh	r3, [r7, #4]
 8010fec:	3303      	adds	r3, #3
 8010fee:	089b      	lsrs	r3, r3, #2
 8010ff0:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	61bb      	str	r3, [r7, #24]
 8010ff6:	e018      	b.n	801102a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010ff8:	79fb      	ldrb	r3, [r7, #7]
 8010ffa:	031a      	lsls	r2, r3, #12
 8010ffc:	697b      	ldr	r3, [r7, #20]
 8010ffe:	4413      	add	r3, r2
 8011000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011004:	461a      	mov	r2, r3
 8011006:	69fb      	ldr	r3, [r7, #28]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	6013      	str	r3, [r2, #0]
    pSrc++;
 801100c:	69fb      	ldr	r3, [r7, #28]
 801100e:	3301      	adds	r3, #1
 8011010:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8011012:	69fb      	ldr	r3, [r7, #28]
 8011014:	3301      	adds	r3, #1
 8011016:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8011018:	69fb      	ldr	r3, [r7, #28]
 801101a:	3301      	adds	r3, #1
 801101c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 801101e:	69fb      	ldr	r3, [r7, #28]
 8011020:	3301      	adds	r3, #1
 8011022:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8011024:	69bb      	ldr	r3, [r7, #24]
 8011026:	3301      	adds	r3, #1
 8011028:	61bb      	str	r3, [r7, #24]
 801102a:	69ba      	ldr	r2, [r7, #24]
 801102c:	693b      	ldr	r3, [r7, #16]
 801102e:	429a      	cmp	r2, r3
 8011030:	d3e2      	bcc.n	8010ff8 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8011032:	2300      	movs	r3, #0
}
 8011034:	4618      	mov	r0, r3
 8011036:	3724      	adds	r7, #36	; 0x24
 8011038:	46bd      	mov	sp, r7
 801103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103e:	4770      	bx	lr

08011040 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011040:	b480      	push	{r7}
 8011042:	b08b      	sub	sp, #44	; 0x2c
 8011044:	af00      	add	r7, sp, #0
 8011046:	60f8      	str	r0, [r7, #12]
 8011048:	60b9      	str	r1, [r7, #8]
 801104a:	4613      	mov	r3, r2
 801104c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8011056:	88fb      	ldrh	r3, [r7, #6]
 8011058:	089b      	lsrs	r3, r3, #2
 801105a:	b29b      	uxth	r3, r3
 801105c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801105e:	88fb      	ldrh	r3, [r7, #6]
 8011060:	f003 0303 	and.w	r3, r3, #3
 8011064:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8011066:	2300      	movs	r3, #0
 8011068:	623b      	str	r3, [r7, #32]
 801106a:	e014      	b.n	8011096 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801106c:	69bb      	ldr	r3, [r7, #24]
 801106e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011072:	681a      	ldr	r2, [r3, #0]
 8011074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011076:	601a      	str	r2, [r3, #0]
    pDest++;
 8011078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801107a:	3301      	adds	r3, #1
 801107c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011080:	3301      	adds	r3, #1
 8011082:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8011084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011086:	3301      	adds	r3, #1
 8011088:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801108c:	3301      	adds	r3, #1
 801108e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8011090:	6a3b      	ldr	r3, [r7, #32]
 8011092:	3301      	adds	r3, #1
 8011094:	623b      	str	r3, [r7, #32]
 8011096:	6a3a      	ldr	r2, [r7, #32]
 8011098:	697b      	ldr	r3, [r7, #20]
 801109a:	429a      	cmp	r2, r3
 801109c:	d3e6      	bcc.n	801106c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801109e:	8bfb      	ldrh	r3, [r7, #30]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d01e      	beq.n	80110e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80110a4:	2300      	movs	r3, #0
 80110a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80110a8:	69bb      	ldr	r3, [r7, #24]
 80110aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80110ae:	461a      	mov	r2, r3
 80110b0:	f107 0310 	add.w	r3, r7, #16
 80110b4:	6812      	ldr	r2, [r2, #0]
 80110b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80110b8:	693a      	ldr	r2, [r7, #16]
 80110ba:	6a3b      	ldr	r3, [r7, #32]
 80110bc:	b2db      	uxtb	r3, r3
 80110be:	00db      	lsls	r3, r3, #3
 80110c0:	fa22 f303 	lsr.w	r3, r2, r3
 80110c4:	b2da      	uxtb	r2, r3
 80110c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110c8:	701a      	strb	r2, [r3, #0]
      i++;
 80110ca:	6a3b      	ldr	r3, [r7, #32]
 80110cc:	3301      	adds	r3, #1
 80110ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80110d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d2:	3301      	adds	r3, #1
 80110d4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80110d6:	8bfb      	ldrh	r3, [r7, #30]
 80110d8:	3b01      	subs	r3, #1
 80110da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80110dc:	8bfb      	ldrh	r3, [r7, #30]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d1ea      	bne.n	80110b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80110e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	372c      	adds	r7, #44	; 0x2c
 80110e8:	46bd      	mov	sp, r7
 80110ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ee:	4770      	bx	lr

080110f0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80110f0:	b480      	push	{r7}
 80110f2:	b085      	sub	sp, #20
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
 80110f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	781b      	ldrb	r3, [r3, #0]
 8011102:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	785b      	ldrb	r3, [r3, #1]
 8011108:	2b01      	cmp	r3, #1
 801110a:	d12c      	bne.n	8011166 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	015a      	lsls	r2, r3, #5
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	4413      	add	r3, r2
 8011114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	2b00      	cmp	r3, #0
 801111c:	db12      	blt.n	8011144 <USB_EPSetStall+0x54>
 801111e:	68bb      	ldr	r3, [r7, #8]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d00f      	beq.n	8011144 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011124:	68bb      	ldr	r3, [r7, #8]
 8011126:	015a      	lsls	r2, r3, #5
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	4413      	add	r3, r2
 801112c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	68ba      	ldr	r2, [r7, #8]
 8011134:	0151      	lsls	r1, r2, #5
 8011136:	68fa      	ldr	r2, [r7, #12]
 8011138:	440a      	add	r2, r1
 801113a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801113e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011142:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	015a      	lsls	r2, r3, #5
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	4413      	add	r3, r2
 801114c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	68ba      	ldr	r2, [r7, #8]
 8011154:	0151      	lsls	r1, r2, #5
 8011156:	68fa      	ldr	r2, [r7, #12]
 8011158:	440a      	add	r2, r1
 801115a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801115e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011162:	6013      	str	r3, [r2, #0]
 8011164:	e02b      	b.n	80111be <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011166:	68bb      	ldr	r3, [r7, #8]
 8011168:	015a      	lsls	r2, r3, #5
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	4413      	add	r3, r2
 801116e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	2b00      	cmp	r3, #0
 8011176:	db12      	blt.n	801119e <USB_EPSetStall+0xae>
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d00f      	beq.n	801119e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801117e:	68bb      	ldr	r3, [r7, #8]
 8011180:	015a      	lsls	r2, r3, #5
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	4413      	add	r3, r2
 8011186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	68ba      	ldr	r2, [r7, #8]
 801118e:	0151      	lsls	r1, r2, #5
 8011190:	68fa      	ldr	r2, [r7, #12]
 8011192:	440a      	add	r2, r1
 8011194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011198:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801119c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801119e:	68bb      	ldr	r3, [r7, #8]
 80111a0:	015a      	lsls	r2, r3, #5
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	4413      	add	r3, r2
 80111a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	68ba      	ldr	r2, [r7, #8]
 80111ae:	0151      	lsls	r1, r2, #5
 80111b0:	68fa      	ldr	r2, [r7, #12]
 80111b2:	440a      	add	r2, r1
 80111b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80111b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80111bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80111be:	2300      	movs	r3, #0
}
 80111c0:	4618      	mov	r0, r3
 80111c2:	3714      	adds	r7, #20
 80111c4:	46bd      	mov	sp, r7
 80111c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ca:	4770      	bx	lr

080111cc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80111cc:	b480      	push	{r7}
 80111ce:	b085      	sub	sp, #20
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
 80111d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80111da:	683b      	ldr	r3, [r7, #0]
 80111dc:	781b      	ldrb	r3, [r3, #0]
 80111de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	785b      	ldrb	r3, [r3, #1]
 80111e4:	2b01      	cmp	r3, #1
 80111e6:	d128      	bne.n	801123a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80111e8:	68bb      	ldr	r3, [r7, #8]
 80111ea:	015a      	lsls	r2, r3, #5
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	4413      	add	r3, r2
 80111f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	68ba      	ldr	r2, [r7, #8]
 80111f8:	0151      	lsls	r1, r2, #5
 80111fa:	68fa      	ldr	r2, [r7, #12]
 80111fc:	440a      	add	r2, r1
 80111fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011202:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011206:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	791b      	ldrb	r3, [r3, #4]
 801120c:	2b03      	cmp	r3, #3
 801120e:	d003      	beq.n	8011218 <USB_EPClearStall+0x4c>
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	791b      	ldrb	r3, [r3, #4]
 8011214:	2b02      	cmp	r3, #2
 8011216:	d138      	bne.n	801128a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	015a      	lsls	r2, r3, #5
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	4413      	add	r3, r2
 8011220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	68ba      	ldr	r2, [r7, #8]
 8011228:	0151      	lsls	r1, r2, #5
 801122a:	68fa      	ldr	r2, [r7, #12]
 801122c:	440a      	add	r2, r1
 801122e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011236:	6013      	str	r3, [r2, #0]
 8011238:	e027      	b.n	801128a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	015a      	lsls	r2, r3, #5
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	4413      	add	r3, r2
 8011242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	68ba      	ldr	r2, [r7, #8]
 801124a:	0151      	lsls	r1, r2, #5
 801124c:	68fa      	ldr	r2, [r7, #12]
 801124e:	440a      	add	r2, r1
 8011250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011254:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011258:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801125a:	683b      	ldr	r3, [r7, #0]
 801125c:	791b      	ldrb	r3, [r3, #4]
 801125e:	2b03      	cmp	r3, #3
 8011260:	d003      	beq.n	801126a <USB_EPClearStall+0x9e>
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	791b      	ldrb	r3, [r3, #4]
 8011266:	2b02      	cmp	r3, #2
 8011268:	d10f      	bne.n	801128a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801126a:	68bb      	ldr	r3, [r7, #8]
 801126c:	015a      	lsls	r2, r3, #5
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	4413      	add	r3, r2
 8011272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	68ba      	ldr	r2, [r7, #8]
 801127a:	0151      	lsls	r1, r2, #5
 801127c:	68fa      	ldr	r2, [r7, #12]
 801127e:	440a      	add	r2, r1
 8011280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011288:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801128a:	2300      	movs	r3, #0
}
 801128c:	4618      	mov	r0, r3
 801128e:	3714      	adds	r7, #20
 8011290:	46bd      	mov	sp, r7
 8011292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011296:	4770      	bx	lr

08011298 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011298:	b480      	push	{r7}
 801129a:	b085      	sub	sp, #20
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
 80112a0:	460b      	mov	r3, r1
 80112a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	68fa      	ldr	r2, [r7, #12]
 80112b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80112b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80112ba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80112c2:	681a      	ldr	r2, [r3, #0]
 80112c4:	78fb      	ldrb	r3, [r7, #3]
 80112c6:	011b      	lsls	r3, r3, #4
 80112c8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80112cc:	68f9      	ldr	r1, [r7, #12]
 80112ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80112d2:	4313      	orrs	r3, r2
 80112d4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80112d6:	2300      	movs	r3, #0
}
 80112d8:	4618      	mov	r0, r3
 80112da:	3714      	adds	r7, #20
 80112dc:	46bd      	mov	sp, r7
 80112de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e2:	4770      	bx	lr

080112e4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80112e4:	b480      	push	{r7}
 80112e6:	b085      	sub	sp, #20
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	68fa      	ldr	r2, [r7, #12]
 80112fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80112fe:	f023 0303 	bic.w	r3, r3, #3
 8011302:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801130a:	685b      	ldr	r3, [r3, #4]
 801130c:	68fa      	ldr	r2, [r7, #12]
 801130e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011312:	f023 0302 	bic.w	r3, r3, #2
 8011316:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011318:	2300      	movs	r3, #0
}
 801131a:	4618      	mov	r0, r3
 801131c:	3714      	adds	r7, #20
 801131e:	46bd      	mov	sp, r7
 8011320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011324:	4770      	bx	lr

08011326 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011326:	b480      	push	{r7}
 8011328:	b085      	sub	sp, #20
 801132a:	af00      	add	r7, sp, #0
 801132c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	68fa      	ldr	r2, [r7, #12]
 801133c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011340:	f023 0303 	bic.w	r3, r3, #3
 8011344:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801134c:	685b      	ldr	r3, [r3, #4]
 801134e:	68fa      	ldr	r2, [r7, #12]
 8011350:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011354:	f043 0302 	orr.w	r3, r3, #2
 8011358:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801135a:	2300      	movs	r3, #0
}
 801135c:	4618      	mov	r0, r3
 801135e:	3714      	adds	r7, #20
 8011360:	46bd      	mov	sp, r7
 8011362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011366:	4770      	bx	lr

08011368 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011368:	b480      	push	{r7}
 801136a:	b085      	sub	sp, #20
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	695b      	ldr	r3, [r3, #20]
 8011374:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	699b      	ldr	r3, [r3, #24]
 801137a:	68fa      	ldr	r2, [r7, #12]
 801137c:	4013      	ands	r3, r2
 801137e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011380:	68fb      	ldr	r3, [r7, #12]
}
 8011382:	4618      	mov	r0, r3
 8011384:	3714      	adds	r7, #20
 8011386:	46bd      	mov	sp, r7
 8011388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138c:	4770      	bx	lr

0801138e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801138e:	b480      	push	{r7}
 8011390:	b085      	sub	sp, #20
 8011392:	af00      	add	r7, sp, #0
 8011394:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113a0:	699b      	ldr	r3, [r3, #24]
 80113a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113aa:	69db      	ldr	r3, [r3, #28]
 80113ac:	68ba      	ldr	r2, [r7, #8]
 80113ae:	4013      	ands	r3, r2
 80113b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80113b2:	68bb      	ldr	r3, [r7, #8]
 80113b4:	0c1b      	lsrs	r3, r3, #16
}
 80113b6:	4618      	mov	r0, r3
 80113b8:	3714      	adds	r7, #20
 80113ba:	46bd      	mov	sp, r7
 80113bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c0:	4770      	bx	lr

080113c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80113c2:	b480      	push	{r7}
 80113c4:	b085      	sub	sp, #20
 80113c6:	af00      	add	r7, sp, #0
 80113c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113d4:	699b      	ldr	r3, [r3, #24]
 80113d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113de:	69db      	ldr	r3, [r3, #28]
 80113e0:	68ba      	ldr	r2, [r7, #8]
 80113e2:	4013      	ands	r3, r2
 80113e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80113e6:	68bb      	ldr	r3, [r7, #8]
 80113e8:	b29b      	uxth	r3, r3
}
 80113ea:	4618      	mov	r0, r3
 80113ec:	3714      	adds	r7, #20
 80113ee:	46bd      	mov	sp, r7
 80113f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f4:	4770      	bx	lr

080113f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80113f6:	b480      	push	{r7}
 80113f8:	b085      	sub	sp, #20
 80113fa:	af00      	add	r7, sp, #0
 80113fc:	6078      	str	r0, [r7, #4]
 80113fe:	460b      	mov	r3, r1
 8011400:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011406:	78fb      	ldrb	r3, [r7, #3]
 8011408:	015a      	lsls	r2, r3, #5
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	4413      	add	r3, r2
 801140e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011412:	689b      	ldr	r3, [r3, #8]
 8011414:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801141c:	695b      	ldr	r3, [r3, #20]
 801141e:	68ba      	ldr	r2, [r7, #8]
 8011420:	4013      	ands	r3, r2
 8011422:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011424:	68bb      	ldr	r3, [r7, #8]
}
 8011426:	4618      	mov	r0, r3
 8011428:	3714      	adds	r7, #20
 801142a:	46bd      	mov	sp, r7
 801142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011430:	4770      	bx	lr

08011432 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011432:	b480      	push	{r7}
 8011434:	b087      	sub	sp, #28
 8011436:	af00      	add	r7, sp, #0
 8011438:	6078      	str	r0, [r7, #4]
 801143a:	460b      	mov	r3, r1
 801143c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011442:	697b      	ldr	r3, [r7, #20]
 8011444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011448:	691b      	ldr	r3, [r3, #16]
 801144a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801144c:	697b      	ldr	r3, [r7, #20]
 801144e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011454:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011456:	78fb      	ldrb	r3, [r7, #3]
 8011458:	f003 030f 	and.w	r3, r3, #15
 801145c:	68fa      	ldr	r2, [r7, #12]
 801145e:	fa22 f303 	lsr.w	r3, r2, r3
 8011462:	01db      	lsls	r3, r3, #7
 8011464:	b2db      	uxtb	r3, r3
 8011466:	693a      	ldr	r2, [r7, #16]
 8011468:	4313      	orrs	r3, r2
 801146a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801146c:	78fb      	ldrb	r3, [r7, #3]
 801146e:	015a      	lsls	r2, r3, #5
 8011470:	697b      	ldr	r3, [r7, #20]
 8011472:	4413      	add	r3, r2
 8011474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011478:	689b      	ldr	r3, [r3, #8]
 801147a:	693a      	ldr	r2, [r7, #16]
 801147c:	4013      	ands	r3, r2
 801147e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011480:	68bb      	ldr	r3, [r7, #8]
}
 8011482:	4618      	mov	r0, r3
 8011484:	371c      	adds	r7, #28
 8011486:	46bd      	mov	sp, r7
 8011488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148c:	4770      	bx	lr

0801148e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801148e:	b480      	push	{r7}
 8011490:	b083      	sub	sp, #12
 8011492:	af00      	add	r7, sp, #0
 8011494:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	695b      	ldr	r3, [r3, #20]
 801149a:	f003 0301 	and.w	r3, r3, #1
}
 801149e:	4618      	mov	r0, r3
 80114a0:	370c      	adds	r7, #12
 80114a2:	46bd      	mov	sp, r7
 80114a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a8:	4770      	bx	lr

080114aa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80114aa:	b480      	push	{r7}
 80114ac:	b085      	sub	sp, #20
 80114ae:	af00      	add	r7, sp, #0
 80114b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	68fa      	ldr	r2, [r7, #12]
 80114c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80114c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80114c8:	f023 0307 	bic.w	r3, r3, #7
 80114cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80114d4:	685b      	ldr	r3, [r3, #4]
 80114d6:	68fa      	ldr	r2, [r7, #12]
 80114d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80114dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80114e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80114e2:	2300      	movs	r3, #0
}
 80114e4:	4618      	mov	r0, r3
 80114e6:	3714      	adds	r7, #20
 80114e8:	46bd      	mov	sp, r7
 80114ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ee:	4770      	bx	lr

080114f0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80114f0:	b480      	push	{r7}
 80114f2:	b085      	sub	sp, #20
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
 80114f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	333c      	adds	r3, #60	; 0x3c
 8011502:	3304      	adds	r3, #4
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	4a1c      	ldr	r2, [pc, #112]	; (801157c <USB_EP0_OutStart+0x8c>)
 801150c:	4293      	cmp	r3, r2
 801150e:	d90a      	bls.n	8011526 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801151c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011520:	d101      	bne.n	8011526 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8011522:	2300      	movs	r3, #0
 8011524:	e024      	b.n	8011570 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801152c:	461a      	mov	r2, r3
 801152e:	2300      	movs	r3, #0
 8011530:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011538:	691b      	ldr	r3, [r3, #16]
 801153a:	68fa      	ldr	r2, [r7, #12]
 801153c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011540:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011544:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801154c:	691b      	ldr	r3, [r3, #16]
 801154e:	68fa      	ldr	r2, [r7, #12]
 8011550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011554:	f043 0318 	orr.w	r3, r3, #24
 8011558:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011560:	691b      	ldr	r3, [r3, #16]
 8011562:	68fa      	ldr	r2, [r7, #12]
 8011564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011568:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801156c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 801156e:	2300      	movs	r3, #0
}
 8011570:	4618      	mov	r0, r3
 8011572:	3714      	adds	r7, #20
 8011574:	46bd      	mov	sp, r7
 8011576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157a:	4770      	bx	lr
 801157c:	4f54300a 	.word	0x4f54300a

08011580 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011580:	b480      	push	{r7}
 8011582:	b085      	sub	sp, #20
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011588:	2300      	movs	r3, #0
 801158a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	3301      	adds	r3, #1
 8011590:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	4a13      	ldr	r2, [pc, #76]	; (80115e4 <USB_CoreReset+0x64>)
 8011596:	4293      	cmp	r3, r2
 8011598:	d901      	bls.n	801159e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801159a:	2303      	movs	r3, #3
 801159c:	e01b      	b.n	80115d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	691b      	ldr	r3, [r3, #16]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	daf2      	bge.n	801158c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80115a6:	2300      	movs	r3, #0
 80115a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	691b      	ldr	r3, [r3, #16]
 80115ae:	f043 0201 	orr.w	r2, r3, #1
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	3301      	adds	r3, #1
 80115ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	4a09      	ldr	r2, [pc, #36]	; (80115e4 <USB_CoreReset+0x64>)
 80115c0:	4293      	cmp	r3, r2
 80115c2:	d901      	bls.n	80115c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80115c4:	2303      	movs	r3, #3
 80115c6:	e006      	b.n	80115d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	691b      	ldr	r3, [r3, #16]
 80115cc:	f003 0301 	and.w	r3, r3, #1
 80115d0:	2b01      	cmp	r3, #1
 80115d2:	d0f0      	beq.n	80115b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80115d4:	2300      	movs	r3, #0
}
 80115d6:	4618      	mov	r0, r3
 80115d8:	3714      	adds	r7, #20
 80115da:	46bd      	mov	sp, r7
 80115dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e0:	4770      	bx	lr
 80115e2:	bf00      	nop
 80115e4:	00030d40 	.word	0x00030d40

080115e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b084      	sub	sp, #16
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
 80115f0:	460b      	mov	r3, r1
 80115f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80115f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80115f8:	f002 fa6c 	bl	8013ad4 <USBD_static_malloc>
 80115fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d105      	bne.n	8011610 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2200      	movs	r2, #0
 8011608:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801160c:	2302      	movs	r3, #2
 801160e:	e066      	b.n	80116de <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	68fa      	ldr	r2, [r7, #12]
 8011614:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	7c1b      	ldrb	r3, [r3, #16]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d119      	bne.n	8011654 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011624:	2202      	movs	r2, #2
 8011626:	2181      	movs	r1, #129	; 0x81
 8011628:	6878      	ldr	r0, [r7, #4]
 801162a:	f002 f83f 	bl	80136ac <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	2201      	movs	r2, #1
 8011632:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011638:	2202      	movs	r2, #2
 801163a:	2101      	movs	r1, #1
 801163c:	6878      	ldr	r0, [r7, #4]
 801163e:	f002 f835 	bl	80136ac <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	2201      	movs	r2, #1
 8011646:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2210      	movs	r2, #16
 801164e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8011652:	e016      	b.n	8011682 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011654:	2340      	movs	r3, #64	; 0x40
 8011656:	2202      	movs	r2, #2
 8011658:	2181      	movs	r1, #129	; 0x81
 801165a:	6878      	ldr	r0, [r7, #4]
 801165c:	f002 f826 	bl	80136ac <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2201      	movs	r2, #1
 8011664:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011666:	2340      	movs	r3, #64	; 0x40
 8011668:	2202      	movs	r2, #2
 801166a:	2101      	movs	r1, #1
 801166c:	6878      	ldr	r0, [r7, #4]
 801166e:	f002 f81d 	bl	80136ac <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	2201      	movs	r2, #1
 8011676:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	2210      	movs	r2, #16
 801167e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011682:	2308      	movs	r3, #8
 8011684:	2203      	movs	r2, #3
 8011686:	2182      	movs	r1, #130	; 0x82
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	f002 f80f 	bl	80136ac <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2201      	movs	r2, #1
 8011692:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	2200      	movs	r2, #0
 80116a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	2200      	movs	r2, #0
 80116ac:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	7c1b      	ldrb	r3, [r3, #16]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d109      	bne.n	80116cc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80116be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80116c2:	2101      	movs	r1, #1
 80116c4:	6878      	ldr	r0, [r7, #4]
 80116c6:	f002 f96b 	bl	80139a0 <USBD_LL_PrepareReceive>
 80116ca:	e007      	b.n	80116dc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80116d2:	2340      	movs	r3, #64	; 0x40
 80116d4:	2101      	movs	r1, #1
 80116d6:	6878      	ldr	r0, [r7, #4]
 80116d8:	f002 f962 	bl	80139a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80116dc:	2300      	movs	r3, #0
}
 80116de:	4618      	mov	r0, r3
 80116e0:	3710      	adds	r7, #16
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}

080116e6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80116e6:	b580      	push	{r7, lr}
 80116e8:	b082      	sub	sp, #8
 80116ea:	af00      	add	r7, sp, #0
 80116ec:	6078      	str	r0, [r7, #4]
 80116ee:	460b      	mov	r3, r1
 80116f0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80116f2:	2181      	movs	r1, #129	; 0x81
 80116f4:	6878      	ldr	r0, [r7, #4]
 80116f6:	f002 f817 	bl	8013728 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	2200      	movs	r2, #0
 80116fe:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8011700:	2101      	movs	r1, #1
 8011702:	6878      	ldr	r0, [r7, #4]
 8011704:	f002 f810 	bl	8013728 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	2200      	movs	r2, #0
 801170c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8011710:	2182      	movs	r1, #130	; 0x82
 8011712:	6878      	ldr	r0, [r7, #4]
 8011714:	f002 f808 	bl	8013728 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	2200      	movs	r2, #0
 801171c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	2200      	movs	r2, #0
 8011724:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801172e:	2b00      	cmp	r3, #0
 8011730:	d00e      	beq.n	8011750 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011738:	685b      	ldr	r3, [r3, #4]
 801173a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011742:	4618      	mov	r0, r3
 8011744:	f002 f9d4 	bl	8013af0 <USBD_static_free>
    pdev->pClassData = NULL;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	2200      	movs	r2, #0
 801174c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011750:	2300      	movs	r3, #0
}
 8011752:	4618      	mov	r0, r3
 8011754:	3708      	adds	r7, #8
 8011756:	46bd      	mov	sp, r7
 8011758:	bd80      	pop	{r7, pc}
	...

0801175c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b086      	sub	sp, #24
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
 8011764:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801176c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801176e:	2300      	movs	r3, #0
 8011770:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8011772:	2300      	movs	r3, #0
 8011774:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8011776:	2300      	movs	r3, #0
 8011778:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801177a:	693b      	ldr	r3, [r7, #16]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d101      	bne.n	8011784 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8011780:	2303      	movs	r3, #3
 8011782:	e0af      	b.n	80118e4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	781b      	ldrb	r3, [r3, #0]
 8011788:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801178c:	2b00      	cmp	r3, #0
 801178e:	d03f      	beq.n	8011810 <USBD_CDC_Setup+0xb4>
 8011790:	2b20      	cmp	r3, #32
 8011792:	f040 809f 	bne.w	80118d4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	88db      	ldrh	r3, [r3, #6]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d02e      	beq.n	80117fc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801179e:	683b      	ldr	r3, [r7, #0]
 80117a0:	781b      	ldrb	r3, [r3, #0]
 80117a2:	b25b      	sxtb	r3, r3
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	da16      	bge.n	80117d6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80117ae:	689b      	ldr	r3, [r3, #8]
 80117b0:	683a      	ldr	r2, [r7, #0]
 80117b2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80117b4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80117b6:	683a      	ldr	r2, [r7, #0]
 80117b8:	88d2      	ldrh	r2, [r2, #6]
 80117ba:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	88db      	ldrh	r3, [r3, #6]
 80117c0:	2b07      	cmp	r3, #7
 80117c2:	bf28      	it	cs
 80117c4:	2307      	movcs	r3, #7
 80117c6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80117c8:	693b      	ldr	r3, [r7, #16]
 80117ca:	89fa      	ldrh	r2, [r7, #14]
 80117cc:	4619      	mov	r1, r3
 80117ce:	6878      	ldr	r0, [r7, #4]
 80117d0:	f001 fb13 	bl	8012dfa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80117d4:	e085      	b.n	80118e2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	785a      	ldrb	r2, [r3, #1]
 80117da:	693b      	ldr	r3, [r7, #16]
 80117dc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80117e0:	683b      	ldr	r3, [r7, #0]
 80117e2:	88db      	ldrh	r3, [r3, #6]
 80117e4:	b2da      	uxtb	r2, r3
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80117ec:	6939      	ldr	r1, [r7, #16]
 80117ee:	683b      	ldr	r3, [r7, #0]
 80117f0:	88db      	ldrh	r3, [r3, #6]
 80117f2:	461a      	mov	r2, r3
 80117f4:	6878      	ldr	r0, [r7, #4]
 80117f6:	f001 fb2c 	bl	8012e52 <USBD_CtlPrepareRx>
      break;
 80117fa:	e072      	b.n	80118e2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011802:	689b      	ldr	r3, [r3, #8]
 8011804:	683a      	ldr	r2, [r7, #0]
 8011806:	7850      	ldrb	r0, [r2, #1]
 8011808:	2200      	movs	r2, #0
 801180a:	6839      	ldr	r1, [r7, #0]
 801180c:	4798      	blx	r3
      break;
 801180e:	e068      	b.n	80118e2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	785b      	ldrb	r3, [r3, #1]
 8011814:	2b0b      	cmp	r3, #11
 8011816:	d852      	bhi.n	80118be <USBD_CDC_Setup+0x162>
 8011818:	a201      	add	r2, pc, #4	; (adr r2, 8011820 <USBD_CDC_Setup+0xc4>)
 801181a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801181e:	bf00      	nop
 8011820:	08011851 	.word	0x08011851
 8011824:	080118cd 	.word	0x080118cd
 8011828:	080118bf 	.word	0x080118bf
 801182c:	080118bf 	.word	0x080118bf
 8011830:	080118bf 	.word	0x080118bf
 8011834:	080118bf 	.word	0x080118bf
 8011838:	080118bf 	.word	0x080118bf
 801183c:	080118bf 	.word	0x080118bf
 8011840:	080118bf 	.word	0x080118bf
 8011844:	080118bf 	.word	0x080118bf
 8011848:	0801187b 	.word	0x0801187b
 801184c:	080118a5 	.word	0x080118a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011856:	b2db      	uxtb	r3, r3
 8011858:	2b03      	cmp	r3, #3
 801185a:	d107      	bne.n	801186c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801185c:	f107 030a 	add.w	r3, r7, #10
 8011860:	2202      	movs	r2, #2
 8011862:	4619      	mov	r1, r3
 8011864:	6878      	ldr	r0, [r7, #4]
 8011866:	f001 fac8 	bl	8012dfa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801186a:	e032      	b.n	80118d2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801186c:	6839      	ldr	r1, [r7, #0]
 801186e:	6878      	ldr	r0, [r7, #4]
 8011870:	f001 fa52 	bl	8012d18 <USBD_CtlError>
            ret = USBD_FAIL;
 8011874:	2303      	movs	r3, #3
 8011876:	75fb      	strb	r3, [r7, #23]
          break;
 8011878:	e02b      	b.n	80118d2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011880:	b2db      	uxtb	r3, r3
 8011882:	2b03      	cmp	r3, #3
 8011884:	d107      	bne.n	8011896 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011886:	f107 030d 	add.w	r3, r7, #13
 801188a:	2201      	movs	r2, #1
 801188c:	4619      	mov	r1, r3
 801188e:	6878      	ldr	r0, [r7, #4]
 8011890:	f001 fab3 	bl	8012dfa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011894:	e01d      	b.n	80118d2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011896:	6839      	ldr	r1, [r7, #0]
 8011898:	6878      	ldr	r0, [r7, #4]
 801189a:	f001 fa3d 	bl	8012d18 <USBD_CtlError>
            ret = USBD_FAIL;
 801189e:	2303      	movs	r3, #3
 80118a0:	75fb      	strb	r3, [r7, #23]
          break;
 80118a2:	e016      	b.n	80118d2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118aa:	b2db      	uxtb	r3, r3
 80118ac:	2b03      	cmp	r3, #3
 80118ae:	d00f      	beq.n	80118d0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80118b0:	6839      	ldr	r1, [r7, #0]
 80118b2:	6878      	ldr	r0, [r7, #4]
 80118b4:	f001 fa30 	bl	8012d18 <USBD_CtlError>
            ret = USBD_FAIL;
 80118b8:	2303      	movs	r3, #3
 80118ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80118bc:	e008      	b.n	80118d0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80118be:	6839      	ldr	r1, [r7, #0]
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	f001 fa29 	bl	8012d18 <USBD_CtlError>
          ret = USBD_FAIL;
 80118c6:	2303      	movs	r3, #3
 80118c8:	75fb      	strb	r3, [r7, #23]
          break;
 80118ca:	e002      	b.n	80118d2 <USBD_CDC_Setup+0x176>
          break;
 80118cc:	bf00      	nop
 80118ce:	e008      	b.n	80118e2 <USBD_CDC_Setup+0x186>
          break;
 80118d0:	bf00      	nop
      }
      break;
 80118d2:	e006      	b.n	80118e2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80118d4:	6839      	ldr	r1, [r7, #0]
 80118d6:	6878      	ldr	r0, [r7, #4]
 80118d8:	f001 fa1e 	bl	8012d18 <USBD_CtlError>
      ret = USBD_FAIL;
 80118dc:	2303      	movs	r3, #3
 80118de:	75fb      	strb	r3, [r7, #23]
      break;
 80118e0:	bf00      	nop
  }

  return (uint8_t)ret;
 80118e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80118e4:	4618      	mov	r0, r3
 80118e6:	3718      	adds	r7, #24
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}

080118ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b084      	sub	sp, #16
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
 80118f4:	460b      	mov	r3, r1
 80118f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80118fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011906:	2b00      	cmp	r3, #0
 8011908:	d101      	bne.n	801190e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801190a:	2303      	movs	r3, #3
 801190c:	e04f      	b.n	80119ae <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011914:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011916:	78fa      	ldrb	r2, [r7, #3]
 8011918:	6879      	ldr	r1, [r7, #4]
 801191a:	4613      	mov	r3, r2
 801191c:	009b      	lsls	r3, r3, #2
 801191e:	4413      	add	r3, r2
 8011920:	009b      	lsls	r3, r3, #2
 8011922:	440b      	add	r3, r1
 8011924:	3318      	adds	r3, #24
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d029      	beq.n	8011980 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801192c:	78fa      	ldrb	r2, [r7, #3]
 801192e:	6879      	ldr	r1, [r7, #4]
 8011930:	4613      	mov	r3, r2
 8011932:	009b      	lsls	r3, r3, #2
 8011934:	4413      	add	r3, r2
 8011936:	009b      	lsls	r3, r3, #2
 8011938:	440b      	add	r3, r1
 801193a:	3318      	adds	r3, #24
 801193c:	681a      	ldr	r2, [r3, #0]
 801193e:	78f9      	ldrb	r1, [r7, #3]
 8011940:	68f8      	ldr	r0, [r7, #12]
 8011942:	460b      	mov	r3, r1
 8011944:	00db      	lsls	r3, r3, #3
 8011946:	440b      	add	r3, r1
 8011948:	009b      	lsls	r3, r3, #2
 801194a:	4403      	add	r3, r0
 801194c:	3348      	adds	r3, #72	; 0x48
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	fbb2 f1f3 	udiv	r1, r2, r3
 8011954:	fb01 f303 	mul.w	r3, r1, r3
 8011958:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801195a:	2b00      	cmp	r3, #0
 801195c:	d110      	bne.n	8011980 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801195e:	78fa      	ldrb	r2, [r7, #3]
 8011960:	6879      	ldr	r1, [r7, #4]
 8011962:	4613      	mov	r3, r2
 8011964:	009b      	lsls	r3, r3, #2
 8011966:	4413      	add	r3, r2
 8011968:	009b      	lsls	r3, r3, #2
 801196a:	440b      	add	r3, r1
 801196c:	3318      	adds	r3, #24
 801196e:	2200      	movs	r2, #0
 8011970:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011972:	78f9      	ldrb	r1, [r7, #3]
 8011974:	2300      	movs	r3, #0
 8011976:	2200      	movs	r2, #0
 8011978:	6878      	ldr	r0, [r7, #4]
 801197a:	f001 ffd9 	bl	8013930 <USBD_LL_Transmit>
 801197e:	e015      	b.n	80119ac <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8011980:	68bb      	ldr	r3, [r7, #8]
 8011982:	2200      	movs	r2, #0
 8011984:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801198e:	691b      	ldr	r3, [r3, #16]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d00b      	beq.n	80119ac <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801199a:	691b      	ldr	r3, [r3, #16]
 801199c:	68ba      	ldr	r2, [r7, #8]
 801199e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80119a2:	68ba      	ldr	r2, [r7, #8]
 80119a4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80119a8:	78fa      	ldrb	r2, [r7, #3]
 80119aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80119ac:	2300      	movs	r3, #0
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	3710      	adds	r7, #16
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}

080119b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80119b6:	b580      	push	{r7, lr}
 80119b8:	b084      	sub	sp, #16
 80119ba:	af00      	add	r7, sp, #0
 80119bc:	6078      	str	r0, [r7, #4]
 80119be:	460b      	mov	r3, r1
 80119c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80119c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d101      	bne.n	80119d8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80119d4:	2303      	movs	r3, #3
 80119d6:	e015      	b.n	8011a04 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80119d8:	78fb      	ldrb	r3, [r7, #3]
 80119da:	4619      	mov	r1, r3
 80119dc:	6878      	ldr	r0, [r7, #4]
 80119de:	f002 f817 	bl	8013a10 <USBD_LL_GetRxDataSize>
 80119e2:	4602      	mov	r2, r0
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80119f0:	68db      	ldr	r3, [r3, #12]
 80119f2:	68fa      	ldr	r2, [r7, #12]
 80119f4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80119f8:	68fa      	ldr	r2, [r7, #12]
 80119fa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80119fe:	4611      	mov	r1, r2
 8011a00:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011a02:	2300      	movs	r3, #0
}
 8011a04:	4618      	mov	r0, r3
 8011a06:	3710      	adds	r7, #16
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	bd80      	pop	{r7, pc}

08011a0c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b084      	sub	sp, #16
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a1a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d101      	bne.n	8011a26 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8011a22:	2303      	movs	r3, #3
 8011a24:	e01b      	b.n	8011a5e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d015      	beq.n	8011a5c <USBD_CDC_EP0_RxReady+0x50>
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011a36:	2bff      	cmp	r3, #255	; 0xff
 8011a38:	d010      	beq.n	8011a5c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011a40:	689b      	ldr	r3, [r3, #8]
 8011a42:	68fa      	ldr	r2, [r7, #12]
 8011a44:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8011a48:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011a4a:	68fa      	ldr	r2, [r7, #12]
 8011a4c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011a50:	b292      	uxth	r2, r2
 8011a52:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	22ff      	movs	r2, #255	; 0xff
 8011a58:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8011a5c:	2300      	movs	r3, #0
}
 8011a5e:	4618      	mov	r0, r3
 8011a60:	3710      	adds	r7, #16
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}
	...

08011a68 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011a68:	b480      	push	{r7}
 8011a6a:	b083      	sub	sp, #12
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	2243      	movs	r2, #67	; 0x43
 8011a74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8011a76:	4b03      	ldr	r3, [pc, #12]	; (8011a84 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011a78:	4618      	mov	r0, r3
 8011a7a:	370c      	adds	r7, #12
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a82:	4770      	bx	lr
 8011a84:	200004e4 	.word	0x200004e4

08011a88 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011a88:	b480      	push	{r7}
 8011a8a:	b083      	sub	sp, #12
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2243      	movs	r2, #67	; 0x43
 8011a94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8011a96:	4b03      	ldr	r3, [pc, #12]	; (8011aa4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011a98:	4618      	mov	r0, r3
 8011a9a:	370c      	adds	r7, #12
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa2:	4770      	bx	lr
 8011aa4:	200004a0 	.word	0x200004a0

08011aa8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	b083      	sub	sp, #12
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	2243      	movs	r2, #67	; 0x43
 8011ab4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8011ab6:	4b03      	ldr	r3, [pc, #12]	; (8011ac4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011ab8:	4618      	mov	r0, r3
 8011aba:	370c      	adds	r7, #12
 8011abc:	46bd      	mov	sp, r7
 8011abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac2:	4770      	bx	lr
 8011ac4:	20000528 	.word	0x20000528

08011ac8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011ac8:	b480      	push	{r7}
 8011aca:	b083      	sub	sp, #12
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	220a      	movs	r2, #10
 8011ad4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011ad6:	4b03      	ldr	r3, [pc, #12]	; (8011ae4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011ad8:	4618      	mov	r0, r3
 8011ada:	370c      	adds	r7, #12
 8011adc:	46bd      	mov	sp, r7
 8011ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae2:	4770      	bx	lr
 8011ae4:	2000045c 	.word	0x2000045c

08011ae8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011ae8:	b480      	push	{r7}
 8011aea:	b083      	sub	sp, #12
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
 8011af0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011af2:	683b      	ldr	r3, [r7, #0]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d101      	bne.n	8011afc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011af8:	2303      	movs	r3, #3
 8011afa:	e004      	b.n	8011b06 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	683a      	ldr	r2, [r7, #0]
 8011b00:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011b04:	2300      	movs	r3, #0
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	370c      	adds	r7, #12
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b10:	4770      	bx	lr

08011b12 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011b12:	b480      	push	{r7}
 8011b14:	b087      	sub	sp, #28
 8011b16:	af00      	add	r7, sp, #0
 8011b18:	60f8      	str	r0, [r7, #12]
 8011b1a:	60b9      	str	r1, [r7, #8]
 8011b1c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b24:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8011b26:	697b      	ldr	r3, [r7, #20]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d101      	bne.n	8011b30 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011b2c:	2303      	movs	r3, #3
 8011b2e:	e008      	b.n	8011b42 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8011b30:	697b      	ldr	r3, [r7, #20]
 8011b32:	68ba      	ldr	r2, [r7, #8]
 8011b34:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011b38:	697b      	ldr	r3, [r7, #20]
 8011b3a:	687a      	ldr	r2, [r7, #4]
 8011b3c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8011b40:	2300      	movs	r3, #0
}
 8011b42:	4618      	mov	r0, r3
 8011b44:	371c      	adds	r7, #28
 8011b46:	46bd      	mov	sp, r7
 8011b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4c:	4770      	bx	lr

08011b4e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011b4e:	b480      	push	{r7}
 8011b50:	b085      	sub	sp, #20
 8011b52:	af00      	add	r7, sp, #0
 8011b54:	6078      	str	r0, [r7, #4]
 8011b56:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b5e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d101      	bne.n	8011b6a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8011b66:	2303      	movs	r3, #3
 8011b68:	e004      	b.n	8011b74 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	683a      	ldr	r2, [r7, #0]
 8011b6e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011b72:	2300      	movs	r3, #0
}
 8011b74:	4618      	mov	r0, r3
 8011b76:	3714      	adds	r7, #20
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7e:	4770      	bx	lr

08011b80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b084      	sub	sp, #16
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d101      	bne.n	8011b9e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011b9a:	2303      	movs	r3, #3
 8011b9c:	e016      	b.n	8011bcc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	7c1b      	ldrb	r3, [r3, #16]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d109      	bne.n	8011bba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011bac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011bb0:	2101      	movs	r1, #1
 8011bb2:	6878      	ldr	r0, [r7, #4]
 8011bb4:	f001 fef4 	bl	80139a0 <USBD_LL_PrepareReceive>
 8011bb8:	e007      	b.n	8011bca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011bc0:	2340      	movs	r3, #64	; 0x40
 8011bc2:	2101      	movs	r1, #1
 8011bc4:	6878      	ldr	r0, [r7, #4]
 8011bc6:	f001 feeb 	bl	80139a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011bca:	2300      	movs	r3, #0
}
 8011bcc:	4618      	mov	r0, r3
 8011bce:	3710      	adds	r7, #16
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd80      	pop	{r7, pc}

08011bd4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b086      	sub	sp, #24
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	60f8      	str	r0, [r7, #12]
 8011bdc:	60b9      	str	r1, [r7, #8]
 8011bde:	4613      	mov	r3, r2
 8011be0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d101      	bne.n	8011bec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011be8:	2303      	movs	r3, #3
 8011bea:	e01f      	b.n	8011c2c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	2200      	movs	r2, #0
 8011bf0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	2200      	movs	r2, #0
 8011c00:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011c04:	68bb      	ldr	r3, [r7, #8]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d003      	beq.n	8011c12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	68ba      	ldr	r2, [r7, #8]
 8011c0e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	2201      	movs	r2, #1
 8011c16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	79fa      	ldrb	r2, [r7, #7]
 8011c1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011c20:	68f8      	ldr	r0, [r7, #12]
 8011c22:	f001 fcc5 	bl	80135b0 <USBD_LL_Init>
 8011c26:	4603      	mov	r3, r0
 8011c28:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	3718      	adds	r7, #24
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bd80      	pop	{r7, pc}

08011c34 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b084      	sub	sp, #16
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
 8011c3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011c42:	683b      	ldr	r3, [r7, #0]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d101      	bne.n	8011c4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011c48:	2303      	movs	r3, #3
 8011c4a:	e016      	b.n	8011c7a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	683a      	ldr	r2, [r7, #0]
 8011c50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d00b      	beq.n	8011c78 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c68:	f107 020e 	add.w	r2, r7, #14
 8011c6c:	4610      	mov	r0, r2
 8011c6e:	4798      	blx	r3
 8011c70:	4602      	mov	r2, r0
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8011c78:	2300      	movs	r3, #0
}
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	3710      	adds	r7, #16
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bd80      	pop	{r7, pc}

08011c82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011c82:	b580      	push	{r7, lr}
 8011c84:	b082      	sub	sp, #8
 8011c86:	af00      	add	r7, sp, #0
 8011c88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011c8a:	6878      	ldr	r0, [r7, #4]
 8011c8c:	f001 fcdc 	bl	8013648 <USBD_LL_Start>
 8011c90:	4603      	mov	r3, r0
}
 8011c92:	4618      	mov	r0, r3
 8011c94:	3708      	adds	r7, #8
 8011c96:	46bd      	mov	sp, r7
 8011c98:	bd80      	pop	{r7, pc}

08011c9a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011c9a:	b480      	push	{r7}
 8011c9c:	b083      	sub	sp, #12
 8011c9e:	af00      	add	r7, sp, #0
 8011ca0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011ca2:	2300      	movs	r3, #0
}
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	370c      	adds	r7, #12
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cae:	4770      	bx	lr

08011cb0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b084      	sub	sp, #16
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
 8011cb8:	460b      	mov	r3, r1
 8011cba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011cbc:	2303      	movs	r3, #3
 8011cbe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d009      	beq.n	8011cde <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	78fa      	ldrb	r2, [r7, #3]
 8011cd4:	4611      	mov	r1, r2
 8011cd6:	6878      	ldr	r0, [r7, #4]
 8011cd8:	4798      	blx	r3
 8011cda:	4603      	mov	r3, r0
 8011cdc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	3710      	adds	r7, #16
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bd80      	pop	{r7, pc}

08011ce8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b082      	sub	sp, #8
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
 8011cf0:	460b      	mov	r3, r1
 8011cf2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d007      	beq.n	8011d0e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d04:	685b      	ldr	r3, [r3, #4]
 8011d06:	78fa      	ldrb	r2, [r7, #3]
 8011d08:	4611      	mov	r1, r2
 8011d0a:	6878      	ldr	r0, [r7, #4]
 8011d0c:	4798      	blx	r3
  }

  return USBD_OK;
 8011d0e:	2300      	movs	r3, #0
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3708      	adds	r7, #8
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}

08011d18 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b084      	sub	sp, #16
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
 8011d20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011d28:	6839      	ldr	r1, [r7, #0]
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f000 ffba 	bl	8012ca4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	2201      	movs	r2, #1
 8011d34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011d3e:	461a      	mov	r2, r3
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011d4c:	f003 031f 	and.w	r3, r3, #31
 8011d50:	2b02      	cmp	r3, #2
 8011d52:	d01a      	beq.n	8011d8a <USBD_LL_SetupStage+0x72>
 8011d54:	2b02      	cmp	r3, #2
 8011d56:	d822      	bhi.n	8011d9e <USBD_LL_SetupStage+0x86>
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d002      	beq.n	8011d62 <USBD_LL_SetupStage+0x4a>
 8011d5c:	2b01      	cmp	r3, #1
 8011d5e:	d00a      	beq.n	8011d76 <USBD_LL_SetupStage+0x5e>
 8011d60:	e01d      	b.n	8011d9e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011d68:	4619      	mov	r1, r3
 8011d6a:	6878      	ldr	r0, [r7, #4]
 8011d6c:	f000 fa62 	bl	8012234 <USBD_StdDevReq>
 8011d70:	4603      	mov	r3, r0
 8011d72:	73fb      	strb	r3, [r7, #15]
      break;
 8011d74:	e020      	b.n	8011db8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011d7c:	4619      	mov	r1, r3
 8011d7e:	6878      	ldr	r0, [r7, #4]
 8011d80:	f000 fac6 	bl	8012310 <USBD_StdItfReq>
 8011d84:	4603      	mov	r3, r0
 8011d86:	73fb      	strb	r3, [r7, #15]
      break;
 8011d88:	e016      	b.n	8011db8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011d90:	4619      	mov	r1, r3
 8011d92:	6878      	ldr	r0, [r7, #4]
 8011d94:	f000 fb05 	bl	80123a2 <USBD_StdEPReq>
 8011d98:	4603      	mov	r3, r0
 8011d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8011d9c:	e00c      	b.n	8011db8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011da4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011da8:	b2db      	uxtb	r3, r3
 8011daa:	4619      	mov	r1, r3
 8011dac:	6878      	ldr	r0, [r7, #4]
 8011dae:	f001 fcf1 	bl	8013794 <USBD_LL_StallEP>
 8011db2:	4603      	mov	r3, r0
 8011db4:	73fb      	strb	r3, [r7, #15]
      break;
 8011db6:	bf00      	nop
  }

  return ret;
 8011db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dba:	4618      	mov	r0, r3
 8011dbc:	3710      	adds	r7, #16
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	bd80      	pop	{r7, pc}

08011dc2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011dc2:	b580      	push	{r7, lr}
 8011dc4:	b086      	sub	sp, #24
 8011dc6:	af00      	add	r7, sp, #0
 8011dc8:	60f8      	str	r0, [r7, #12]
 8011dca:	460b      	mov	r3, r1
 8011dcc:	607a      	str	r2, [r7, #4]
 8011dce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011dd0:	7afb      	ldrb	r3, [r7, #11]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d138      	bne.n	8011e48 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011ddc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011de4:	2b03      	cmp	r3, #3
 8011de6:	d14a      	bne.n	8011e7e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011de8:	693b      	ldr	r3, [r7, #16]
 8011dea:	689a      	ldr	r2, [r3, #8]
 8011dec:	693b      	ldr	r3, [r7, #16]
 8011dee:	68db      	ldr	r3, [r3, #12]
 8011df0:	429a      	cmp	r2, r3
 8011df2:	d913      	bls.n	8011e1c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011df4:	693b      	ldr	r3, [r7, #16]
 8011df6:	689a      	ldr	r2, [r3, #8]
 8011df8:	693b      	ldr	r3, [r7, #16]
 8011dfa:	68db      	ldr	r3, [r3, #12]
 8011dfc:	1ad2      	subs	r2, r2, r3
 8011dfe:	693b      	ldr	r3, [r7, #16]
 8011e00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011e02:	693b      	ldr	r3, [r7, #16]
 8011e04:	68da      	ldr	r2, [r3, #12]
 8011e06:	693b      	ldr	r3, [r7, #16]
 8011e08:	689b      	ldr	r3, [r3, #8]
 8011e0a:	4293      	cmp	r3, r2
 8011e0c:	bf28      	it	cs
 8011e0e:	4613      	movcs	r3, r2
 8011e10:	461a      	mov	r2, r3
 8011e12:	6879      	ldr	r1, [r7, #4]
 8011e14:	68f8      	ldr	r0, [r7, #12]
 8011e16:	f001 f839 	bl	8012e8c <USBD_CtlContinueRx>
 8011e1a:	e030      	b.n	8011e7e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e22:	b2db      	uxtb	r3, r3
 8011e24:	2b03      	cmp	r3, #3
 8011e26:	d10b      	bne.n	8011e40 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e2e:	691b      	ldr	r3, [r3, #16]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d005      	beq.n	8011e40 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e3a:	691b      	ldr	r3, [r3, #16]
 8011e3c:	68f8      	ldr	r0, [r7, #12]
 8011e3e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011e40:	68f8      	ldr	r0, [r7, #12]
 8011e42:	f001 f834 	bl	8012eae <USBD_CtlSendStatus>
 8011e46:	e01a      	b.n	8011e7e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e4e:	b2db      	uxtb	r3, r3
 8011e50:	2b03      	cmp	r3, #3
 8011e52:	d114      	bne.n	8011e7e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e5a:	699b      	ldr	r3, [r3, #24]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d00e      	beq.n	8011e7e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e66:	699b      	ldr	r3, [r3, #24]
 8011e68:	7afa      	ldrb	r2, [r7, #11]
 8011e6a:	4611      	mov	r1, r2
 8011e6c:	68f8      	ldr	r0, [r7, #12]
 8011e6e:	4798      	blx	r3
 8011e70:	4603      	mov	r3, r0
 8011e72:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011e74:	7dfb      	ldrb	r3, [r7, #23]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d001      	beq.n	8011e7e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8011e7a:	7dfb      	ldrb	r3, [r7, #23]
 8011e7c:	e000      	b.n	8011e80 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8011e7e:	2300      	movs	r3, #0
}
 8011e80:	4618      	mov	r0, r3
 8011e82:	3718      	adds	r7, #24
 8011e84:	46bd      	mov	sp, r7
 8011e86:	bd80      	pop	{r7, pc}

08011e88 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b086      	sub	sp, #24
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	60f8      	str	r0, [r7, #12]
 8011e90:	460b      	mov	r3, r1
 8011e92:	607a      	str	r2, [r7, #4]
 8011e94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011e96:	7afb      	ldrb	r3, [r7, #11]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d16b      	bne.n	8011f74 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	3314      	adds	r3, #20
 8011ea0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011ea8:	2b02      	cmp	r3, #2
 8011eaa:	d156      	bne.n	8011f5a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8011eac:	693b      	ldr	r3, [r7, #16]
 8011eae:	689a      	ldr	r2, [r3, #8]
 8011eb0:	693b      	ldr	r3, [r7, #16]
 8011eb2:	68db      	ldr	r3, [r3, #12]
 8011eb4:	429a      	cmp	r2, r3
 8011eb6:	d914      	bls.n	8011ee2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011eb8:	693b      	ldr	r3, [r7, #16]
 8011eba:	689a      	ldr	r2, [r3, #8]
 8011ebc:	693b      	ldr	r3, [r7, #16]
 8011ebe:	68db      	ldr	r3, [r3, #12]
 8011ec0:	1ad2      	subs	r2, r2, r3
 8011ec2:	693b      	ldr	r3, [r7, #16]
 8011ec4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011ec6:	693b      	ldr	r3, [r7, #16]
 8011ec8:	689b      	ldr	r3, [r3, #8]
 8011eca:	461a      	mov	r2, r3
 8011ecc:	6879      	ldr	r1, [r7, #4]
 8011ece:	68f8      	ldr	r0, [r7, #12]
 8011ed0:	f000 ffae 	bl	8012e30 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	2100      	movs	r1, #0
 8011eda:	68f8      	ldr	r0, [r7, #12]
 8011edc:	f001 fd60 	bl	80139a0 <USBD_LL_PrepareReceive>
 8011ee0:	e03b      	b.n	8011f5a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011ee2:	693b      	ldr	r3, [r7, #16]
 8011ee4:	68da      	ldr	r2, [r3, #12]
 8011ee6:	693b      	ldr	r3, [r7, #16]
 8011ee8:	689b      	ldr	r3, [r3, #8]
 8011eea:	429a      	cmp	r2, r3
 8011eec:	d11c      	bne.n	8011f28 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011eee:	693b      	ldr	r3, [r7, #16]
 8011ef0:	685a      	ldr	r2, [r3, #4]
 8011ef2:	693b      	ldr	r3, [r7, #16]
 8011ef4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011ef6:	429a      	cmp	r2, r3
 8011ef8:	d316      	bcc.n	8011f28 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011efa:	693b      	ldr	r3, [r7, #16]
 8011efc:	685a      	ldr	r2, [r3, #4]
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011f04:	429a      	cmp	r2, r3
 8011f06:	d20f      	bcs.n	8011f28 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011f08:	2200      	movs	r2, #0
 8011f0a:	2100      	movs	r1, #0
 8011f0c:	68f8      	ldr	r0, [r7, #12]
 8011f0e:	f000 ff8f 	bl	8012e30 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	2200      	movs	r2, #0
 8011f16:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	2100      	movs	r1, #0
 8011f20:	68f8      	ldr	r0, [r7, #12]
 8011f22:	f001 fd3d 	bl	80139a0 <USBD_LL_PrepareReceive>
 8011f26:	e018      	b.n	8011f5a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f2e:	b2db      	uxtb	r3, r3
 8011f30:	2b03      	cmp	r3, #3
 8011f32:	d10b      	bne.n	8011f4c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f3a:	68db      	ldr	r3, [r3, #12]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d005      	beq.n	8011f4c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f46:	68db      	ldr	r3, [r3, #12]
 8011f48:	68f8      	ldr	r0, [r7, #12]
 8011f4a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011f4c:	2180      	movs	r1, #128	; 0x80
 8011f4e:	68f8      	ldr	r0, [r7, #12]
 8011f50:	f001 fc20 	bl	8013794 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011f54:	68f8      	ldr	r0, [r7, #12]
 8011f56:	f000 ffbd 	bl	8012ed4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011f60:	2b01      	cmp	r3, #1
 8011f62:	d122      	bne.n	8011faa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011f64:	68f8      	ldr	r0, [r7, #12]
 8011f66:	f7ff fe98 	bl	8011c9a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011f72:	e01a      	b.n	8011faa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f7a:	b2db      	uxtb	r3, r3
 8011f7c:	2b03      	cmp	r3, #3
 8011f7e:	d114      	bne.n	8011faa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f86:	695b      	ldr	r3, [r3, #20]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d00e      	beq.n	8011faa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f92:	695b      	ldr	r3, [r3, #20]
 8011f94:	7afa      	ldrb	r2, [r7, #11]
 8011f96:	4611      	mov	r1, r2
 8011f98:	68f8      	ldr	r0, [r7, #12]
 8011f9a:	4798      	blx	r3
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011fa0:	7dfb      	ldrb	r3, [r7, #23]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d001      	beq.n	8011faa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8011fa6:	7dfb      	ldrb	r3, [r7, #23]
 8011fa8:	e000      	b.n	8011fac <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8011faa:	2300      	movs	r3, #0
}
 8011fac:	4618      	mov	r0, r3
 8011fae:	3718      	adds	r7, #24
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}

08011fb4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b082      	sub	sp, #8
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	2201      	movs	r2, #1
 8011fc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2200      	movs	r2, #0
 8011fd0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d101      	bne.n	8011fe8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8011fe4:	2303      	movs	r3, #3
 8011fe6:	e02f      	b.n	8012048 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d00f      	beq.n	8012012 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ff8:	685b      	ldr	r3, [r3, #4]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d009      	beq.n	8012012 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012004:	685b      	ldr	r3, [r3, #4]
 8012006:	687a      	ldr	r2, [r7, #4]
 8012008:	6852      	ldr	r2, [r2, #4]
 801200a:	b2d2      	uxtb	r2, r2
 801200c:	4611      	mov	r1, r2
 801200e:	6878      	ldr	r0, [r7, #4]
 8012010:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012012:	2340      	movs	r3, #64	; 0x40
 8012014:	2200      	movs	r2, #0
 8012016:	2100      	movs	r1, #0
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	f001 fb47 	bl	80136ac <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	2201      	movs	r2, #1
 8012022:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	2240      	movs	r2, #64	; 0x40
 801202a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801202e:	2340      	movs	r3, #64	; 0x40
 8012030:	2200      	movs	r2, #0
 8012032:	2180      	movs	r1, #128	; 0x80
 8012034:	6878      	ldr	r0, [r7, #4]
 8012036:	f001 fb39 	bl	80136ac <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	2201      	movs	r2, #1
 801203e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	2240      	movs	r2, #64	; 0x40
 8012044:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8012046:	2300      	movs	r3, #0
}
 8012048:	4618      	mov	r0, r3
 801204a:	3708      	adds	r7, #8
 801204c:	46bd      	mov	sp, r7
 801204e:	bd80      	pop	{r7, pc}

08012050 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012050:	b480      	push	{r7}
 8012052:	b083      	sub	sp, #12
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
 8012058:	460b      	mov	r3, r1
 801205a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	78fa      	ldrb	r2, [r7, #3]
 8012060:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012062:	2300      	movs	r3, #0
}
 8012064:	4618      	mov	r0, r3
 8012066:	370c      	adds	r7, #12
 8012068:	46bd      	mov	sp, r7
 801206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206e:	4770      	bx	lr

08012070 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012070:	b480      	push	{r7}
 8012072:	b083      	sub	sp, #12
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801207e:	b2da      	uxtb	r2, r3
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	2204      	movs	r2, #4
 801208a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801208e:	2300      	movs	r3, #0
}
 8012090:	4618      	mov	r0, r3
 8012092:	370c      	adds	r7, #12
 8012094:	46bd      	mov	sp, r7
 8012096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209a:	4770      	bx	lr

0801209c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801209c:	b480      	push	{r7}
 801209e:	b083      	sub	sp, #12
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80120aa:	b2db      	uxtb	r3, r3
 80120ac:	2b04      	cmp	r3, #4
 80120ae:	d106      	bne.n	80120be <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80120b6:	b2da      	uxtb	r2, r3
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80120be:	2300      	movs	r3, #0
}
 80120c0:	4618      	mov	r0, r3
 80120c2:	370c      	adds	r7, #12
 80120c4:	46bd      	mov	sp, r7
 80120c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ca:	4770      	bx	lr

080120cc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b082      	sub	sp, #8
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d101      	bne.n	80120e2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80120de:	2303      	movs	r3, #3
 80120e0:	e012      	b.n	8012108 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80120e8:	b2db      	uxtb	r3, r3
 80120ea:	2b03      	cmp	r3, #3
 80120ec:	d10b      	bne.n	8012106 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120f4:	69db      	ldr	r3, [r3, #28]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d005      	beq.n	8012106 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012100:	69db      	ldr	r3, [r3, #28]
 8012102:	6878      	ldr	r0, [r7, #4]
 8012104:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012106:	2300      	movs	r3, #0
}
 8012108:	4618      	mov	r0, r3
 801210a:	3708      	adds	r7, #8
 801210c:	46bd      	mov	sp, r7
 801210e:	bd80      	pop	{r7, pc}

08012110 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b082      	sub	sp, #8
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
 8012118:	460b      	mov	r3, r1
 801211a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012122:	2b00      	cmp	r3, #0
 8012124:	d101      	bne.n	801212a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8012126:	2303      	movs	r3, #3
 8012128:	e014      	b.n	8012154 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012130:	b2db      	uxtb	r3, r3
 8012132:	2b03      	cmp	r3, #3
 8012134:	d10d      	bne.n	8012152 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801213c:	6a1b      	ldr	r3, [r3, #32]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d007      	beq.n	8012152 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012148:	6a1b      	ldr	r3, [r3, #32]
 801214a:	78fa      	ldrb	r2, [r7, #3]
 801214c:	4611      	mov	r1, r2
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012152:	2300      	movs	r3, #0
}
 8012154:	4618      	mov	r0, r3
 8012156:	3708      	adds	r7, #8
 8012158:	46bd      	mov	sp, r7
 801215a:	bd80      	pop	{r7, pc}

0801215c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801215c:	b580      	push	{r7, lr}
 801215e:	b082      	sub	sp, #8
 8012160:	af00      	add	r7, sp, #0
 8012162:	6078      	str	r0, [r7, #4]
 8012164:	460b      	mov	r3, r1
 8012166:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801216e:	2b00      	cmp	r3, #0
 8012170:	d101      	bne.n	8012176 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8012172:	2303      	movs	r3, #3
 8012174:	e014      	b.n	80121a0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801217c:	b2db      	uxtb	r3, r3
 801217e:	2b03      	cmp	r3, #3
 8012180:	d10d      	bne.n	801219e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801218a:	2b00      	cmp	r3, #0
 801218c:	d007      	beq.n	801219e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012196:	78fa      	ldrb	r2, [r7, #3]
 8012198:	4611      	mov	r1, r2
 801219a:	6878      	ldr	r0, [r7, #4]
 801219c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801219e:	2300      	movs	r3, #0
}
 80121a0:	4618      	mov	r0, r3
 80121a2:	3708      	adds	r7, #8
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd80      	pop	{r7, pc}

080121a8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80121a8:	b480      	push	{r7}
 80121aa:	b083      	sub	sp, #12
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80121b0:	2300      	movs	r3, #0
}
 80121b2:	4618      	mov	r0, r3
 80121b4:	370c      	adds	r7, #12
 80121b6:	46bd      	mov	sp, r7
 80121b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121bc:	4770      	bx	lr

080121be <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80121be:	b580      	push	{r7, lr}
 80121c0:	b082      	sub	sp, #8
 80121c2:	af00      	add	r7, sp, #0
 80121c4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	2201      	movs	r2, #1
 80121ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d009      	beq.n	80121ec <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121de:	685b      	ldr	r3, [r3, #4]
 80121e0:	687a      	ldr	r2, [r7, #4]
 80121e2:	6852      	ldr	r2, [r2, #4]
 80121e4:	b2d2      	uxtb	r2, r2
 80121e6:	4611      	mov	r1, r2
 80121e8:	6878      	ldr	r0, [r7, #4]
 80121ea:	4798      	blx	r3
  }

  return USBD_OK;
 80121ec:	2300      	movs	r3, #0
}
 80121ee:	4618      	mov	r0, r3
 80121f0:	3708      	adds	r7, #8
 80121f2:	46bd      	mov	sp, r7
 80121f4:	bd80      	pop	{r7, pc}

080121f6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80121f6:	b480      	push	{r7}
 80121f8:	b087      	sub	sp, #28
 80121fa:	af00      	add	r7, sp, #0
 80121fc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012202:	697b      	ldr	r3, [r7, #20]
 8012204:	781b      	ldrb	r3, [r3, #0]
 8012206:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012208:	697b      	ldr	r3, [r7, #20]
 801220a:	3301      	adds	r3, #1
 801220c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801220e:	697b      	ldr	r3, [r7, #20]
 8012210:	781b      	ldrb	r3, [r3, #0]
 8012212:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012214:	8a3b      	ldrh	r3, [r7, #16]
 8012216:	021b      	lsls	r3, r3, #8
 8012218:	b21a      	sxth	r2, r3
 801221a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801221e:	4313      	orrs	r3, r2
 8012220:	b21b      	sxth	r3, r3
 8012222:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012224:	89fb      	ldrh	r3, [r7, #14]
}
 8012226:	4618      	mov	r0, r3
 8012228:	371c      	adds	r7, #28
 801222a:	46bd      	mov	sp, r7
 801222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012230:	4770      	bx	lr
	...

08012234 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b084      	sub	sp, #16
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
 801223c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801223e:	2300      	movs	r3, #0
 8012240:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	781b      	ldrb	r3, [r3, #0]
 8012246:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801224a:	2b40      	cmp	r3, #64	; 0x40
 801224c:	d005      	beq.n	801225a <USBD_StdDevReq+0x26>
 801224e:	2b40      	cmp	r3, #64	; 0x40
 8012250:	d853      	bhi.n	80122fa <USBD_StdDevReq+0xc6>
 8012252:	2b00      	cmp	r3, #0
 8012254:	d00b      	beq.n	801226e <USBD_StdDevReq+0x3a>
 8012256:	2b20      	cmp	r3, #32
 8012258:	d14f      	bne.n	80122fa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012260:	689b      	ldr	r3, [r3, #8]
 8012262:	6839      	ldr	r1, [r7, #0]
 8012264:	6878      	ldr	r0, [r7, #4]
 8012266:	4798      	blx	r3
 8012268:	4603      	mov	r3, r0
 801226a:	73fb      	strb	r3, [r7, #15]
      break;
 801226c:	e04a      	b.n	8012304 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801226e:	683b      	ldr	r3, [r7, #0]
 8012270:	785b      	ldrb	r3, [r3, #1]
 8012272:	2b09      	cmp	r3, #9
 8012274:	d83b      	bhi.n	80122ee <USBD_StdDevReq+0xba>
 8012276:	a201      	add	r2, pc, #4	; (adr r2, 801227c <USBD_StdDevReq+0x48>)
 8012278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801227c:	080122d1 	.word	0x080122d1
 8012280:	080122e5 	.word	0x080122e5
 8012284:	080122ef 	.word	0x080122ef
 8012288:	080122db 	.word	0x080122db
 801228c:	080122ef 	.word	0x080122ef
 8012290:	080122af 	.word	0x080122af
 8012294:	080122a5 	.word	0x080122a5
 8012298:	080122ef 	.word	0x080122ef
 801229c:	080122c7 	.word	0x080122c7
 80122a0:	080122b9 	.word	0x080122b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80122a4:	6839      	ldr	r1, [r7, #0]
 80122a6:	6878      	ldr	r0, [r7, #4]
 80122a8:	f000 f9de 	bl	8012668 <USBD_GetDescriptor>
          break;
 80122ac:	e024      	b.n	80122f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80122ae:	6839      	ldr	r1, [r7, #0]
 80122b0:	6878      	ldr	r0, [r7, #4]
 80122b2:	f000 fb6d 	bl	8012990 <USBD_SetAddress>
          break;
 80122b6:	e01f      	b.n	80122f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80122b8:	6839      	ldr	r1, [r7, #0]
 80122ba:	6878      	ldr	r0, [r7, #4]
 80122bc:	f000 fbac 	bl	8012a18 <USBD_SetConfig>
 80122c0:	4603      	mov	r3, r0
 80122c2:	73fb      	strb	r3, [r7, #15]
          break;
 80122c4:	e018      	b.n	80122f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80122c6:	6839      	ldr	r1, [r7, #0]
 80122c8:	6878      	ldr	r0, [r7, #4]
 80122ca:	f000 fc4b 	bl	8012b64 <USBD_GetConfig>
          break;
 80122ce:	e013      	b.n	80122f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80122d0:	6839      	ldr	r1, [r7, #0]
 80122d2:	6878      	ldr	r0, [r7, #4]
 80122d4:	f000 fc7c 	bl	8012bd0 <USBD_GetStatus>
          break;
 80122d8:	e00e      	b.n	80122f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80122da:	6839      	ldr	r1, [r7, #0]
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f000 fcab 	bl	8012c38 <USBD_SetFeature>
          break;
 80122e2:	e009      	b.n	80122f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80122e4:	6839      	ldr	r1, [r7, #0]
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f000 fcba 	bl	8012c60 <USBD_ClrFeature>
          break;
 80122ec:	e004      	b.n	80122f8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80122ee:	6839      	ldr	r1, [r7, #0]
 80122f0:	6878      	ldr	r0, [r7, #4]
 80122f2:	f000 fd11 	bl	8012d18 <USBD_CtlError>
          break;
 80122f6:	bf00      	nop
      }
      break;
 80122f8:	e004      	b.n	8012304 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80122fa:	6839      	ldr	r1, [r7, #0]
 80122fc:	6878      	ldr	r0, [r7, #4]
 80122fe:	f000 fd0b 	bl	8012d18 <USBD_CtlError>
      break;
 8012302:	bf00      	nop
  }

  return ret;
 8012304:	7bfb      	ldrb	r3, [r7, #15]
}
 8012306:	4618      	mov	r0, r3
 8012308:	3710      	adds	r7, #16
 801230a:	46bd      	mov	sp, r7
 801230c:	bd80      	pop	{r7, pc}
 801230e:	bf00      	nop

08012310 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b084      	sub	sp, #16
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
 8012318:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801231a:	2300      	movs	r3, #0
 801231c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801231e:	683b      	ldr	r3, [r7, #0]
 8012320:	781b      	ldrb	r3, [r3, #0]
 8012322:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012326:	2b40      	cmp	r3, #64	; 0x40
 8012328:	d005      	beq.n	8012336 <USBD_StdItfReq+0x26>
 801232a:	2b40      	cmp	r3, #64	; 0x40
 801232c:	d82f      	bhi.n	801238e <USBD_StdItfReq+0x7e>
 801232e:	2b00      	cmp	r3, #0
 8012330:	d001      	beq.n	8012336 <USBD_StdItfReq+0x26>
 8012332:	2b20      	cmp	r3, #32
 8012334:	d12b      	bne.n	801238e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801233c:	b2db      	uxtb	r3, r3
 801233e:	3b01      	subs	r3, #1
 8012340:	2b02      	cmp	r3, #2
 8012342:	d81d      	bhi.n	8012380 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012344:	683b      	ldr	r3, [r7, #0]
 8012346:	889b      	ldrh	r3, [r3, #4]
 8012348:	b2db      	uxtb	r3, r3
 801234a:	2b01      	cmp	r3, #1
 801234c:	d813      	bhi.n	8012376 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012354:	689b      	ldr	r3, [r3, #8]
 8012356:	6839      	ldr	r1, [r7, #0]
 8012358:	6878      	ldr	r0, [r7, #4]
 801235a:	4798      	blx	r3
 801235c:	4603      	mov	r3, r0
 801235e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	88db      	ldrh	r3, [r3, #6]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d110      	bne.n	801238a <USBD_StdItfReq+0x7a>
 8012368:	7bfb      	ldrb	r3, [r7, #15]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d10d      	bne.n	801238a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801236e:	6878      	ldr	r0, [r7, #4]
 8012370:	f000 fd9d 	bl	8012eae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012374:	e009      	b.n	801238a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8012376:	6839      	ldr	r1, [r7, #0]
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f000 fccd 	bl	8012d18 <USBD_CtlError>
          break;
 801237e:	e004      	b.n	801238a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8012380:	6839      	ldr	r1, [r7, #0]
 8012382:	6878      	ldr	r0, [r7, #4]
 8012384:	f000 fcc8 	bl	8012d18 <USBD_CtlError>
          break;
 8012388:	e000      	b.n	801238c <USBD_StdItfReq+0x7c>
          break;
 801238a:	bf00      	nop
      }
      break;
 801238c:	e004      	b.n	8012398 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801238e:	6839      	ldr	r1, [r7, #0]
 8012390:	6878      	ldr	r0, [r7, #4]
 8012392:	f000 fcc1 	bl	8012d18 <USBD_CtlError>
      break;
 8012396:	bf00      	nop
  }

  return ret;
 8012398:	7bfb      	ldrb	r3, [r7, #15]
}
 801239a:	4618      	mov	r0, r3
 801239c:	3710      	adds	r7, #16
 801239e:	46bd      	mov	sp, r7
 80123a0:	bd80      	pop	{r7, pc}

080123a2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123a2:	b580      	push	{r7, lr}
 80123a4:	b084      	sub	sp, #16
 80123a6:	af00      	add	r7, sp, #0
 80123a8:	6078      	str	r0, [r7, #4]
 80123aa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80123ac:	2300      	movs	r3, #0
 80123ae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	889b      	ldrh	r3, [r3, #4]
 80123b4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80123b6:	683b      	ldr	r3, [r7, #0]
 80123b8:	781b      	ldrb	r3, [r3, #0]
 80123ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80123be:	2b40      	cmp	r3, #64	; 0x40
 80123c0:	d007      	beq.n	80123d2 <USBD_StdEPReq+0x30>
 80123c2:	2b40      	cmp	r3, #64	; 0x40
 80123c4:	f200 8145 	bhi.w	8012652 <USBD_StdEPReq+0x2b0>
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d00c      	beq.n	80123e6 <USBD_StdEPReq+0x44>
 80123cc:	2b20      	cmp	r3, #32
 80123ce:	f040 8140 	bne.w	8012652 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123d8:	689b      	ldr	r3, [r3, #8]
 80123da:	6839      	ldr	r1, [r7, #0]
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	4798      	blx	r3
 80123e0:	4603      	mov	r3, r0
 80123e2:	73fb      	strb	r3, [r7, #15]
      break;
 80123e4:	e13a      	b.n	801265c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	785b      	ldrb	r3, [r3, #1]
 80123ea:	2b03      	cmp	r3, #3
 80123ec:	d007      	beq.n	80123fe <USBD_StdEPReq+0x5c>
 80123ee:	2b03      	cmp	r3, #3
 80123f0:	f300 8129 	bgt.w	8012646 <USBD_StdEPReq+0x2a4>
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d07f      	beq.n	80124f8 <USBD_StdEPReq+0x156>
 80123f8:	2b01      	cmp	r3, #1
 80123fa:	d03c      	beq.n	8012476 <USBD_StdEPReq+0xd4>
 80123fc:	e123      	b.n	8012646 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012404:	b2db      	uxtb	r3, r3
 8012406:	2b02      	cmp	r3, #2
 8012408:	d002      	beq.n	8012410 <USBD_StdEPReq+0x6e>
 801240a:	2b03      	cmp	r3, #3
 801240c:	d016      	beq.n	801243c <USBD_StdEPReq+0x9a>
 801240e:	e02c      	b.n	801246a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012410:	7bbb      	ldrb	r3, [r7, #14]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d00d      	beq.n	8012432 <USBD_StdEPReq+0x90>
 8012416:	7bbb      	ldrb	r3, [r7, #14]
 8012418:	2b80      	cmp	r3, #128	; 0x80
 801241a:	d00a      	beq.n	8012432 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801241c:	7bbb      	ldrb	r3, [r7, #14]
 801241e:	4619      	mov	r1, r3
 8012420:	6878      	ldr	r0, [r7, #4]
 8012422:	f001 f9b7 	bl	8013794 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012426:	2180      	movs	r1, #128	; 0x80
 8012428:	6878      	ldr	r0, [r7, #4]
 801242a:	f001 f9b3 	bl	8013794 <USBD_LL_StallEP>
 801242e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012430:	e020      	b.n	8012474 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8012432:	6839      	ldr	r1, [r7, #0]
 8012434:	6878      	ldr	r0, [r7, #4]
 8012436:	f000 fc6f 	bl	8012d18 <USBD_CtlError>
              break;
 801243a:	e01b      	b.n	8012474 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801243c:	683b      	ldr	r3, [r7, #0]
 801243e:	885b      	ldrh	r3, [r3, #2]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d10e      	bne.n	8012462 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012444:	7bbb      	ldrb	r3, [r7, #14]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d00b      	beq.n	8012462 <USBD_StdEPReq+0xc0>
 801244a:	7bbb      	ldrb	r3, [r7, #14]
 801244c:	2b80      	cmp	r3, #128	; 0x80
 801244e:	d008      	beq.n	8012462 <USBD_StdEPReq+0xc0>
 8012450:	683b      	ldr	r3, [r7, #0]
 8012452:	88db      	ldrh	r3, [r3, #6]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d104      	bne.n	8012462 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012458:	7bbb      	ldrb	r3, [r7, #14]
 801245a:	4619      	mov	r1, r3
 801245c:	6878      	ldr	r0, [r7, #4]
 801245e:	f001 f999 	bl	8013794 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8012462:	6878      	ldr	r0, [r7, #4]
 8012464:	f000 fd23 	bl	8012eae <USBD_CtlSendStatus>

              break;
 8012468:	e004      	b.n	8012474 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801246a:	6839      	ldr	r1, [r7, #0]
 801246c:	6878      	ldr	r0, [r7, #4]
 801246e:	f000 fc53 	bl	8012d18 <USBD_CtlError>
              break;
 8012472:	bf00      	nop
          }
          break;
 8012474:	e0ec      	b.n	8012650 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801247c:	b2db      	uxtb	r3, r3
 801247e:	2b02      	cmp	r3, #2
 8012480:	d002      	beq.n	8012488 <USBD_StdEPReq+0xe6>
 8012482:	2b03      	cmp	r3, #3
 8012484:	d016      	beq.n	80124b4 <USBD_StdEPReq+0x112>
 8012486:	e030      	b.n	80124ea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012488:	7bbb      	ldrb	r3, [r7, #14]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d00d      	beq.n	80124aa <USBD_StdEPReq+0x108>
 801248e:	7bbb      	ldrb	r3, [r7, #14]
 8012490:	2b80      	cmp	r3, #128	; 0x80
 8012492:	d00a      	beq.n	80124aa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012494:	7bbb      	ldrb	r3, [r7, #14]
 8012496:	4619      	mov	r1, r3
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f001 f97b 	bl	8013794 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801249e:	2180      	movs	r1, #128	; 0x80
 80124a0:	6878      	ldr	r0, [r7, #4]
 80124a2:	f001 f977 	bl	8013794 <USBD_LL_StallEP>
 80124a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80124a8:	e025      	b.n	80124f6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80124aa:	6839      	ldr	r1, [r7, #0]
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f000 fc33 	bl	8012d18 <USBD_CtlError>
              break;
 80124b2:	e020      	b.n	80124f6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80124b4:	683b      	ldr	r3, [r7, #0]
 80124b6:	885b      	ldrh	r3, [r3, #2]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d11b      	bne.n	80124f4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80124bc:	7bbb      	ldrb	r3, [r7, #14]
 80124be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d004      	beq.n	80124d0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80124c6:	7bbb      	ldrb	r3, [r7, #14]
 80124c8:	4619      	mov	r1, r3
 80124ca:	6878      	ldr	r0, [r7, #4]
 80124cc:	f001 f998 	bl	8013800 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f000 fcec 	bl	8012eae <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124dc:	689b      	ldr	r3, [r3, #8]
 80124de:	6839      	ldr	r1, [r7, #0]
 80124e0:	6878      	ldr	r0, [r7, #4]
 80124e2:	4798      	blx	r3
 80124e4:	4603      	mov	r3, r0
 80124e6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80124e8:	e004      	b.n	80124f4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80124ea:	6839      	ldr	r1, [r7, #0]
 80124ec:	6878      	ldr	r0, [r7, #4]
 80124ee:	f000 fc13 	bl	8012d18 <USBD_CtlError>
              break;
 80124f2:	e000      	b.n	80124f6 <USBD_StdEPReq+0x154>
              break;
 80124f4:	bf00      	nop
          }
          break;
 80124f6:	e0ab      	b.n	8012650 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80124fe:	b2db      	uxtb	r3, r3
 8012500:	2b02      	cmp	r3, #2
 8012502:	d002      	beq.n	801250a <USBD_StdEPReq+0x168>
 8012504:	2b03      	cmp	r3, #3
 8012506:	d032      	beq.n	801256e <USBD_StdEPReq+0x1cc>
 8012508:	e097      	b.n	801263a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801250a:	7bbb      	ldrb	r3, [r7, #14]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d007      	beq.n	8012520 <USBD_StdEPReq+0x17e>
 8012510:	7bbb      	ldrb	r3, [r7, #14]
 8012512:	2b80      	cmp	r3, #128	; 0x80
 8012514:	d004      	beq.n	8012520 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8012516:	6839      	ldr	r1, [r7, #0]
 8012518:	6878      	ldr	r0, [r7, #4]
 801251a:	f000 fbfd 	bl	8012d18 <USBD_CtlError>
                break;
 801251e:	e091      	b.n	8012644 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012520:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012524:	2b00      	cmp	r3, #0
 8012526:	da0b      	bge.n	8012540 <USBD_StdEPReq+0x19e>
 8012528:	7bbb      	ldrb	r3, [r7, #14]
 801252a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801252e:	4613      	mov	r3, r2
 8012530:	009b      	lsls	r3, r3, #2
 8012532:	4413      	add	r3, r2
 8012534:	009b      	lsls	r3, r3, #2
 8012536:	3310      	adds	r3, #16
 8012538:	687a      	ldr	r2, [r7, #4]
 801253a:	4413      	add	r3, r2
 801253c:	3304      	adds	r3, #4
 801253e:	e00b      	b.n	8012558 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012540:	7bbb      	ldrb	r3, [r7, #14]
 8012542:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012546:	4613      	mov	r3, r2
 8012548:	009b      	lsls	r3, r3, #2
 801254a:	4413      	add	r3, r2
 801254c:	009b      	lsls	r3, r3, #2
 801254e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012552:	687a      	ldr	r2, [r7, #4]
 8012554:	4413      	add	r3, r2
 8012556:	3304      	adds	r3, #4
 8012558:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801255a:	68bb      	ldr	r3, [r7, #8]
 801255c:	2200      	movs	r2, #0
 801255e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012560:	68bb      	ldr	r3, [r7, #8]
 8012562:	2202      	movs	r2, #2
 8012564:	4619      	mov	r1, r3
 8012566:	6878      	ldr	r0, [r7, #4]
 8012568:	f000 fc47 	bl	8012dfa <USBD_CtlSendData>
              break;
 801256c:	e06a      	b.n	8012644 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801256e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012572:	2b00      	cmp	r3, #0
 8012574:	da11      	bge.n	801259a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012576:	7bbb      	ldrb	r3, [r7, #14]
 8012578:	f003 020f 	and.w	r2, r3, #15
 801257c:	6879      	ldr	r1, [r7, #4]
 801257e:	4613      	mov	r3, r2
 8012580:	009b      	lsls	r3, r3, #2
 8012582:	4413      	add	r3, r2
 8012584:	009b      	lsls	r3, r3, #2
 8012586:	440b      	add	r3, r1
 8012588:	3324      	adds	r3, #36	; 0x24
 801258a:	881b      	ldrh	r3, [r3, #0]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d117      	bne.n	80125c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012590:	6839      	ldr	r1, [r7, #0]
 8012592:	6878      	ldr	r0, [r7, #4]
 8012594:	f000 fbc0 	bl	8012d18 <USBD_CtlError>
                  break;
 8012598:	e054      	b.n	8012644 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801259a:	7bbb      	ldrb	r3, [r7, #14]
 801259c:	f003 020f 	and.w	r2, r3, #15
 80125a0:	6879      	ldr	r1, [r7, #4]
 80125a2:	4613      	mov	r3, r2
 80125a4:	009b      	lsls	r3, r3, #2
 80125a6:	4413      	add	r3, r2
 80125a8:	009b      	lsls	r3, r3, #2
 80125aa:	440b      	add	r3, r1
 80125ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80125b0:	881b      	ldrh	r3, [r3, #0]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d104      	bne.n	80125c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80125b6:	6839      	ldr	r1, [r7, #0]
 80125b8:	6878      	ldr	r0, [r7, #4]
 80125ba:	f000 fbad 	bl	8012d18 <USBD_CtlError>
                  break;
 80125be:	e041      	b.n	8012644 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80125c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	da0b      	bge.n	80125e0 <USBD_StdEPReq+0x23e>
 80125c8:	7bbb      	ldrb	r3, [r7, #14]
 80125ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80125ce:	4613      	mov	r3, r2
 80125d0:	009b      	lsls	r3, r3, #2
 80125d2:	4413      	add	r3, r2
 80125d4:	009b      	lsls	r3, r3, #2
 80125d6:	3310      	adds	r3, #16
 80125d8:	687a      	ldr	r2, [r7, #4]
 80125da:	4413      	add	r3, r2
 80125dc:	3304      	adds	r3, #4
 80125de:	e00b      	b.n	80125f8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80125e0:	7bbb      	ldrb	r3, [r7, #14]
 80125e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80125e6:	4613      	mov	r3, r2
 80125e8:	009b      	lsls	r3, r3, #2
 80125ea:	4413      	add	r3, r2
 80125ec:	009b      	lsls	r3, r3, #2
 80125ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80125f2:	687a      	ldr	r2, [r7, #4]
 80125f4:	4413      	add	r3, r2
 80125f6:	3304      	adds	r3, #4
 80125f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80125fa:	7bbb      	ldrb	r3, [r7, #14]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d002      	beq.n	8012606 <USBD_StdEPReq+0x264>
 8012600:	7bbb      	ldrb	r3, [r7, #14]
 8012602:	2b80      	cmp	r3, #128	; 0x80
 8012604:	d103      	bne.n	801260e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8012606:	68bb      	ldr	r3, [r7, #8]
 8012608:	2200      	movs	r2, #0
 801260a:	601a      	str	r2, [r3, #0]
 801260c:	e00e      	b.n	801262c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801260e:	7bbb      	ldrb	r3, [r7, #14]
 8012610:	4619      	mov	r1, r3
 8012612:	6878      	ldr	r0, [r7, #4]
 8012614:	f001 f92a 	bl	801386c <USBD_LL_IsStallEP>
 8012618:	4603      	mov	r3, r0
 801261a:	2b00      	cmp	r3, #0
 801261c:	d003      	beq.n	8012626 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801261e:	68bb      	ldr	r3, [r7, #8]
 8012620:	2201      	movs	r2, #1
 8012622:	601a      	str	r2, [r3, #0]
 8012624:	e002      	b.n	801262c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8012626:	68bb      	ldr	r3, [r7, #8]
 8012628:	2200      	movs	r2, #0
 801262a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801262c:	68bb      	ldr	r3, [r7, #8]
 801262e:	2202      	movs	r2, #2
 8012630:	4619      	mov	r1, r3
 8012632:	6878      	ldr	r0, [r7, #4]
 8012634:	f000 fbe1 	bl	8012dfa <USBD_CtlSendData>
              break;
 8012638:	e004      	b.n	8012644 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801263a:	6839      	ldr	r1, [r7, #0]
 801263c:	6878      	ldr	r0, [r7, #4]
 801263e:	f000 fb6b 	bl	8012d18 <USBD_CtlError>
              break;
 8012642:	bf00      	nop
          }
          break;
 8012644:	e004      	b.n	8012650 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8012646:	6839      	ldr	r1, [r7, #0]
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	f000 fb65 	bl	8012d18 <USBD_CtlError>
          break;
 801264e:	bf00      	nop
      }
      break;
 8012650:	e004      	b.n	801265c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8012652:	6839      	ldr	r1, [r7, #0]
 8012654:	6878      	ldr	r0, [r7, #4]
 8012656:	f000 fb5f 	bl	8012d18 <USBD_CtlError>
      break;
 801265a:	bf00      	nop
  }

  return ret;
 801265c:	7bfb      	ldrb	r3, [r7, #15]
}
 801265e:	4618      	mov	r0, r3
 8012660:	3710      	adds	r7, #16
 8012662:	46bd      	mov	sp, r7
 8012664:	bd80      	pop	{r7, pc}
	...

08012668 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b084      	sub	sp, #16
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
 8012670:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012672:	2300      	movs	r3, #0
 8012674:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012676:	2300      	movs	r3, #0
 8012678:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801267a:	2300      	movs	r3, #0
 801267c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801267e:	683b      	ldr	r3, [r7, #0]
 8012680:	885b      	ldrh	r3, [r3, #2]
 8012682:	0a1b      	lsrs	r3, r3, #8
 8012684:	b29b      	uxth	r3, r3
 8012686:	3b01      	subs	r3, #1
 8012688:	2b0e      	cmp	r3, #14
 801268a:	f200 8152 	bhi.w	8012932 <USBD_GetDescriptor+0x2ca>
 801268e:	a201      	add	r2, pc, #4	; (adr r2, 8012694 <USBD_GetDescriptor+0x2c>)
 8012690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012694:	08012705 	.word	0x08012705
 8012698:	0801271d 	.word	0x0801271d
 801269c:	0801275d 	.word	0x0801275d
 80126a0:	08012933 	.word	0x08012933
 80126a4:	08012933 	.word	0x08012933
 80126a8:	080128d3 	.word	0x080128d3
 80126ac:	080128ff 	.word	0x080128ff
 80126b0:	08012933 	.word	0x08012933
 80126b4:	08012933 	.word	0x08012933
 80126b8:	08012933 	.word	0x08012933
 80126bc:	08012933 	.word	0x08012933
 80126c0:	08012933 	.word	0x08012933
 80126c4:	08012933 	.word	0x08012933
 80126c8:	08012933 	.word	0x08012933
 80126cc:	080126d1 	.word	0x080126d1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126d6:	69db      	ldr	r3, [r3, #28]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d00b      	beq.n	80126f4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126e2:	69db      	ldr	r3, [r3, #28]
 80126e4:	687a      	ldr	r2, [r7, #4]
 80126e6:	7c12      	ldrb	r2, [r2, #16]
 80126e8:	f107 0108 	add.w	r1, r7, #8
 80126ec:	4610      	mov	r0, r2
 80126ee:	4798      	blx	r3
 80126f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80126f2:	e126      	b.n	8012942 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80126f4:	6839      	ldr	r1, [r7, #0]
 80126f6:	6878      	ldr	r0, [r7, #4]
 80126f8:	f000 fb0e 	bl	8012d18 <USBD_CtlError>
        err++;
 80126fc:	7afb      	ldrb	r3, [r7, #11]
 80126fe:	3301      	adds	r3, #1
 8012700:	72fb      	strb	r3, [r7, #11]
      break;
 8012702:	e11e      	b.n	8012942 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	687a      	ldr	r2, [r7, #4]
 801270e:	7c12      	ldrb	r2, [r2, #16]
 8012710:	f107 0108 	add.w	r1, r7, #8
 8012714:	4610      	mov	r0, r2
 8012716:	4798      	blx	r3
 8012718:	60f8      	str	r0, [r7, #12]
      break;
 801271a:	e112      	b.n	8012942 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	7c1b      	ldrb	r3, [r3, #16]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d10d      	bne.n	8012740 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801272c:	f107 0208 	add.w	r2, r7, #8
 8012730:	4610      	mov	r0, r2
 8012732:	4798      	blx	r3
 8012734:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	3301      	adds	r3, #1
 801273a:	2202      	movs	r2, #2
 801273c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801273e:	e100      	b.n	8012942 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012748:	f107 0208 	add.w	r2, r7, #8
 801274c:	4610      	mov	r0, r2
 801274e:	4798      	blx	r3
 8012750:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	3301      	adds	r3, #1
 8012756:	2202      	movs	r2, #2
 8012758:	701a      	strb	r2, [r3, #0]
      break;
 801275a:	e0f2      	b.n	8012942 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	885b      	ldrh	r3, [r3, #2]
 8012760:	b2db      	uxtb	r3, r3
 8012762:	2b05      	cmp	r3, #5
 8012764:	f200 80ac 	bhi.w	80128c0 <USBD_GetDescriptor+0x258>
 8012768:	a201      	add	r2, pc, #4	; (adr r2, 8012770 <USBD_GetDescriptor+0x108>)
 801276a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801276e:	bf00      	nop
 8012770:	08012789 	.word	0x08012789
 8012774:	080127bd 	.word	0x080127bd
 8012778:	080127f1 	.word	0x080127f1
 801277c:	08012825 	.word	0x08012825
 8012780:	08012859 	.word	0x08012859
 8012784:	0801288d 	.word	0x0801288d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801278e:	685b      	ldr	r3, [r3, #4]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d00b      	beq.n	80127ac <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801279a:	685b      	ldr	r3, [r3, #4]
 801279c:	687a      	ldr	r2, [r7, #4]
 801279e:	7c12      	ldrb	r2, [r2, #16]
 80127a0:	f107 0108 	add.w	r1, r7, #8
 80127a4:	4610      	mov	r0, r2
 80127a6:	4798      	blx	r3
 80127a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80127aa:	e091      	b.n	80128d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80127ac:	6839      	ldr	r1, [r7, #0]
 80127ae:	6878      	ldr	r0, [r7, #4]
 80127b0:	f000 fab2 	bl	8012d18 <USBD_CtlError>
            err++;
 80127b4:	7afb      	ldrb	r3, [r7, #11]
 80127b6:	3301      	adds	r3, #1
 80127b8:	72fb      	strb	r3, [r7, #11]
          break;
 80127ba:	e089      	b.n	80128d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127c2:	689b      	ldr	r3, [r3, #8]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d00b      	beq.n	80127e0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127ce:	689b      	ldr	r3, [r3, #8]
 80127d0:	687a      	ldr	r2, [r7, #4]
 80127d2:	7c12      	ldrb	r2, [r2, #16]
 80127d4:	f107 0108 	add.w	r1, r7, #8
 80127d8:	4610      	mov	r0, r2
 80127da:	4798      	blx	r3
 80127dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80127de:	e077      	b.n	80128d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80127e0:	6839      	ldr	r1, [r7, #0]
 80127e2:	6878      	ldr	r0, [r7, #4]
 80127e4:	f000 fa98 	bl	8012d18 <USBD_CtlError>
            err++;
 80127e8:	7afb      	ldrb	r3, [r7, #11]
 80127ea:	3301      	adds	r3, #1
 80127ec:	72fb      	strb	r3, [r7, #11]
          break;
 80127ee:	e06f      	b.n	80128d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127f6:	68db      	ldr	r3, [r3, #12]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d00b      	beq.n	8012814 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012802:	68db      	ldr	r3, [r3, #12]
 8012804:	687a      	ldr	r2, [r7, #4]
 8012806:	7c12      	ldrb	r2, [r2, #16]
 8012808:	f107 0108 	add.w	r1, r7, #8
 801280c:	4610      	mov	r0, r2
 801280e:	4798      	blx	r3
 8012810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012812:	e05d      	b.n	80128d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012814:	6839      	ldr	r1, [r7, #0]
 8012816:	6878      	ldr	r0, [r7, #4]
 8012818:	f000 fa7e 	bl	8012d18 <USBD_CtlError>
            err++;
 801281c:	7afb      	ldrb	r3, [r7, #11]
 801281e:	3301      	adds	r3, #1
 8012820:	72fb      	strb	r3, [r7, #11]
          break;
 8012822:	e055      	b.n	80128d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801282a:	691b      	ldr	r3, [r3, #16]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d00b      	beq.n	8012848 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012836:	691b      	ldr	r3, [r3, #16]
 8012838:	687a      	ldr	r2, [r7, #4]
 801283a:	7c12      	ldrb	r2, [r2, #16]
 801283c:	f107 0108 	add.w	r1, r7, #8
 8012840:	4610      	mov	r0, r2
 8012842:	4798      	blx	r3
 8012844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012846:	e043      	b.n	80128d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012848:	6839      	ldr	r1, [r7, #0]
 801284a:	6878      	ldr	r0, [r7, #4]
 801284c:	f000 fa64 	bl	8012d18 <USBD_CtlError>
            err++;
 8012850:	7afb      	ldrb	r3, [r7, #11]
 8012852:	3301      	adds	r3, #1
 8012854:	72fb      	strb	r3, [r7, #11]
          break;
 8012856:	e03b      	b.n	80128d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801285e:	695b      	ldr	r3, [r3, #20]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d00b      	beq.n	801287c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801286a:	695b      	ldr	r3, [r3, #20]
 801286c:	687a      	ldr	r2, [r7, #4]
 801286e:	7c12      	ldrb	r2, [r2, #16]
 8012870:	f107 0108 	add.w	r1, r7, #8
 8012874:	4610      	mov	r0, r2
 8012876:	4798      	blx	r3
 8012878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801287a:	e029      	b.n	80128d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801287c:	6839      	ldr	r1, [r7, #0]
 801287e:	6878      	ldr	r0, [r7, #4]
 8012880:	f000 fa4a 	bl	8012d18 <USBD_CtlError>
            err++;
 8012884:	7afb      	ldrb	r3, [r7, #11]
 8012886:	3301      	adds	r3, #1
 8012888:	72fb      	strb	r3, [r7, #11]
          break;
 801288a:	e021      	b.n	80128d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012892:	699b      	ldr	r3, [r3, #24]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d00b      	beq.n	80128b0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801289e:	699b      	ldr	r3, [r3, #24]
 80128a0:	687a      	ldr	r2, [r7, #4]
 80128a2:	7c12      	ldrb	r2, [r2, #16]
 80128a4:	f107 0108 	add.w	r1, r7, #8
 80128a8:	4610      	mov	r0, r2
 80128aa:	4798      	blx	r3
 80128ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80128ae:	e00f      	b.n	80128d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80128b0:	6839      	ldr	r1, [r7, #0]
 80128b2:	6878      	ldr	r0, [r7, #4]
 80128b4:	f000 fa30 	bl	8012d18 <USBD_CtlError>
            err++;
 80128b8:	7afb      	ldrb	r3, [r7, #11]
 80128ba:	3301      	adds	r3, #1
 80128bc:	72fb      	strb	r3, [r7, #11]
          break;
 80128be:	e007      	b.n	80128d0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80128c0:	6839      	ldr	r1, [r7, #0]
 80128c2:	6878      	ldr	r0, [r7, #4]
 80128c4:	f000 fa28 	bl	8012d18 <USBD_CtlError>
          err++;
 80128c8:	7afb      	ldrb	r3, [r7, #11]
 80128ca:	3301      	adds	r3, #1
 80128cc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80128ce:	bf00      	nop
      }
      break;
 80128d0:	e037      	b.n	8012942 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	7c1b      	ldrb	r3, [r3, #16]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d109      	bne.n	80128ee <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80128e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128e2:	f107 0208 	add.w	r2, r7, #8
 80128e6:	4610      	mov	r0, r2
 80128e8:	4798      	blx	r3
 80128ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80128ec:	e029      	b.n	8012942 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80128ee:	6839      	ldr	r1, [r7, #0]
 80128f0:	6878      	ldr	r0, [r7, #4]
 80128f2:	f000 fa11 	bl	8012d18 <USBD_CtlError>
        err++;
 80128f6:	7afb      	ldrb	r3, [r7, #11]
 80128f8:	3301      	adds	r3, #1
 80128fa:	72fb      	strb	r3, [r7, #11]
      break;
 80128fc:	e021      	b.n	8012942 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	7c1b      	ldrb	r3, [r3, #16]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d10d      	bne.n	8012922 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801290e:	f107 0208 	add.w	r2, r7, #8
 8012912:	4610      	mov	r0, r2
 8012914:	4798      	blx	r3
 8012916:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	3301      	adds	r3, #1
 801291c:	2207      	movs	r2, #7
 801291e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012920:	e00f      	b.n	8012942 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012922:	6839      	ldr	r1, [r7, #0]
 8012924:	6878      	ldr	r0, [r7, #4]
 8012926:	f000 f9f7 	bl	8012d18 <USBD_CtlError>
        err++;
 801292a:	7afb      	ldrb	r3, [r7, #11]
 801292c:	3301      	adds	r3, #1
 801292e:	72fb      	strb	r3, [r7, #11]
      break;
 8012930:	e007      	b.n	8012942 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8012932:	6839      	ldr	r1, [r7, #0]
 8012934:	6878      	ldr	r0, [r7, #4]
 8012936:	f000 f9ef 	bl	8012d18 <USBD_CtlError>
      err++;
 801293a:	7afb      	ldrb	r3, [r7, #11]
 801293c:	3301      	adds	r3, #1
 801293e:	72fb      	strb	r3, [r7, #11]
      break;
 8012940:	bf00      	nop
  }

  if (err != 0U)
 8012942:	7afb      	ldrb	r3, [r7, #11]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d11e      	bne.n	8012986 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8012948:	683b      	ldr	r3, [r7, #0]
 801294a:	88db      	ldrh	r3, [r3, #6]
 801294c:	2b00      	cmp	r3, #0
 801294e:	d016      	beq.n	801297e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8012950:	893b      	ldrh	r3, [r7, #8]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d00e      	beq.n	8012974 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8012956:	683b      	ldr	r3, [r7, #0]
 8012958:	88da      	ldrh	r2, [r3, #6]
 801295a:	893b      	ldrh	r3, [r7, #8]
 801295c:	4293      	cmp	r3, r2
 801295e:	bf28      	it	cs
 8012960:	4613      	movcs	r3, r2
 8012962:	b29b      	uxth	r3, r3
 8012964:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012966:	893b      	ldrh	r3, [r7, #8]
 8012968:	461a      	mov	r2, r3
 801296a:	68f9      	ldr	r1, [r7, #12]
 801296c:	6878      	ldr	r0, [r7, #4]
 801296e:	f000 fa44 	bl	8012dfa <USBD_CtlSendData>
 8012972:	e009      	b.n	8012988 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012974:	6839      	ldr	r1, [r7, #0]
 8012976:	6878      	ldr	r0, [r7, #4]
 8012978:	f000 f9ce 	bl	8012d18 <USBD_CtlError>
 801297c:	e004      	b.n	8012988 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801297e:	6878      	ldr	r0, [r7, #4]
 8012980:	f000 fa95 	bl	8012eae <USBD_CtlSendStatus>
 8012984:	e000      	b.n	8012988 <USBD_GetDescriptor+0x320>
    return;
 8012986:	bf00      	nop
  }
}
 8012988:	3710      	adds	r7, #16
 801298a:	46bd      	mov	sp, r7
 801298c:	bd80      	pop	{r7, pc}
 801298e:	bf00      	nop

08012990 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b084      	sub	sp, #16
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
 8012998:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801299a:	683b      	ldr	r3, [r7, #0]
 801299c:	889b      	ldrh	r3, [r3, #4]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d131      	bne.n	8012a06 <USBD_SetAddress+0x76>
 80129a2:	683b      	ldr	r3, [r7, #0]
 80129a4:	88db      	ldrh	r3, [r3, #6]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d12d      	bne.n	8012a06 <USBD_SetAddress+0x76>
 80129aa:	683b      	ldr	r3, [r7, #0]
 80129ac:	885b      	ldrh	r3, [r3, #2]
 80129ae:	2b7f      	cmp	r3, #127	; 0x7f
 80129b0:	d829      	bhi.n	8012a06 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80129b2:	683b      	ldr	r3, [r7, #0]
 80129b4:	885b      	ldrh	r3, [r3, #2]
 80129b6:	b2db      	uxtb	r3, r3
 80129b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80129bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80129c4:	b2db      	uxtb	r3, r3
 80129c6:	2b03      	cmp	r3, #3
 80129c8:	d104      	bne.n	80129d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80129ca:	6839      	ldr	r1, [r7, #0]
 80129cc:	6878      	ldr	r0, [r7, #4]
 80129ce:	f000 f9a3 	bl	8012d18 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129d2:	e01d      	b.n	8012a10 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	7bfa      	ldrb	r2, [r7, #15]
 80129d8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80129dc:	7bfb      	ldrb	r3, [r7, #15]
 80129de:	4619      	mov	r1, r3
 80129e0:	6878      	ldr	r0, [r7, #4]
 80129e2:	f000 ff6f 	bl	80138c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80129e6:	6878      	ldr	r0, [r7, #4]
 80129e8:	f000 fa61 	bl	8012eae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80129ec:	7bfb      	ldrb	r3, [r7, #15]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d004      	beq.n	80129fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	2202      	movs	r2, #2
 80129f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129fa:	e009      	b.n	8012a10 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	2201      	movs	r2, #1
 8012a00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a04:	e004      	b.n	8012a10 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012a06:	6839      	ldr	r1, [r7, #0]
 8012a08:	6878      	ldr	r0, [r7, #4]
 8012a0a:	f000 f985 	bl	8012d18 <USBD_CtlError>
  }
}
 8012a0e:	bf00      	nop
 8012a10:	bf00      	nop
 8012a12:	3710      	adds	r7, #16
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bd80      	pop	{r7, pc}

08012a18 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b084      	sub	sp, #16
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	6078      	str	r0, [r7, #4]
 8012a20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012a22:	2300      	movs	r3, #0
 8012a24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012a26:	683b      	ldr	r3, [r7, #0]
 8012a28:	885b      	ldrh	r3, [r3, #2]
 8012a2a:	b2da      	uxtb	r2, r3
 8012a2c:	4b4c      	ldr	r3, [pc, #304]	; (8012b60 <USBD_SetConfig+0x148>)
 8012a2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012a30:	4b4b      	ldr	r3, [pc, #300]	; (8012b60 <USBD_SetConfig+0x148>)
 8012a32:	781b      	ldrb	r3, [r3, #0]
 8012a34:	2b01      	cmp	r3, #1
 8012a36:	d905      	bls.n	8012a44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012a38:	6839      	ldr	r1, [r7, #0]
 8012a3a:	6878      	ldr	r0, [r7, #4]
 8012a3c:	f000 f96c 	bl	8012d18 <USBD_CtlError>
    return USBD_FAIL;
 8012a40:	2303      	movs	r3, #3
 8012a42:	e088      	b.n	8012b56 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a4a:	b2db      	uxtb	r3, r3
 8012a4c:	2b02      	cmp	r3, #2
 8012a4e:	d002      	beq.n	8012a56 <USBD_SetConfig+0x3e>
 8012a50:	2b03      	cmp	r3, #3
 8012a52:	d025      	beq.n	8012aa0 <USBD_SetConfig+0x88>
 8012a54:	e071      	b.n	8012b3a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012a56:	4b42      	ldr	r3, [pc, #264]	; (8012b60 <USBD_SetConfig+0x148>)
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d01c      	beq.n	8012a98 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8012a5e:	4b40      	ldr	r3, [pc, #256]	; (8012b60 <USBD_SetConfig+0x148>)
 8012a60:	781b      	ldrb	r3, [r3, #0]
 8012a62:	461a      	mov	r2, r3
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012a68:	4b3d      	ldr	r3, [pc, #244]	; (8012b60 <USBD_SetConfig+0x148>)
 8012a6a:	781b      	ldrb	r3, [r3, #0]
 8012a6c:	4619      	mov	r1, r3
 8012a6e:	6878      	ldr	r0, [r7, #4]
 8012a70:	f7ff f91e 	bl	8011cb0 <USBD_SetClassConfig>
 8012a74:	4603      	mov	r3, r0
 8012a76:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012a78:	7bfb      	ldrb	r3, [r7, #15]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d004      	beq.n	8012a88 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8012a7e:	6839      	ldr	r1, [r7, #0]
 8012a80:	6878      	ldr	r0, [r7, #4]
 8012a82:	f000 f949 	bl	8012d18 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012a86:	e065      	b.n	8012b54 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012a88:	6878      	ldr	r0, [r7, #4]
 8012a8a:	f000 fa10 	bl	8012eae <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	2203      	movs	r2, #3
 8012a92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012a96:	e05d      	b.n	8012b54 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012a98:	6878      	ldr	r0, [r7, #4]
 8012a9a:	f000 fa08 	bl	8012eae <USBD_CtlSendStatus>
      break;
 8012a9e:	e059      	b.n	8012b54 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012aa0:	4b2f      	ldr	r3, [pc, #188]	; (8012b60 <USBD_SetConfig+0x148>)
 8012aa2:	781b      	ldrb	r3, [r3, #0]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d112      	bne.n	8012ace <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	2202      	movs	r2, #2
 8012aac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012ab0:	4b2b      	ldr	r3, [pc, #172]	; (8012b60 <USBD_SetConfig+0x148>)
 8012ab2:	781b      	ldrb	r3, [r3, #0]
 8012ab4:	461a      	mov	r2, r3
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012aba:	4b29      	ldr	r3, [pc, #164]	; (8012b60 <USBD_SetConfig+0x148>)
 8012abc:	781b      	ldrb	r3, [r3, #0]
 8012abe:	4619      	mov	r1, r3
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	f7ff f911 	bl	8011ce8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012ac6:	6878      	ldr	r0, [r7, #4]
 8012ac8:	f000 f9f1 	bl	8012eae <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012acc:	e042      	b.n	8012b54 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8012ace:	4b24      	ldr	r3, [pc, #144]	; (8012b60 <USBD_SetConfig+0x148>)
 8012ad0:	781b      	ldrb	r3, [r3, #0]
 8012ad2:	461a      	mov	r2, r3
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	685b      	ldr	r3, [r3, #4]
 8012ad8:	429a      	cmp	r2, r3
 8012ada:	d02a      	beq.n	8012b32 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	685b      	ldr	r3, [r3, #4]
 8012ae0:	b2db      	uxtb	r3, r3
 8012ae2:	4619      	mov	r1, r3
 8012ae4:	6878      	ldr	r0, [r7, #4]
 8012ae6:	f7ff f8ff 	bl	8011ce8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012aea:	4b1d      	ldr	r3, [pc, #116]	; (8012b60 <USBD_SetConfig+0x148>)
 8012aec:	781b      	ldrb	r3, [r3, #0]
 8012aee:	461a      	mov	r2, r3
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012af4:	4b1a      	ldr	r3, [pc, #104]	; (8012b60 <USBD_SetConfig+0x148>)
 8012af6:	781b      	ldrb	r3, [r3, #0]
 8012af8:	4619      	mov	r1, r3
 8012afa:	6878      	ldr	r0, [r7, #4]
 8012afc:	f7ff f8d8 	bl	8011cb0 <USBD_SetClassConfig>
 8012b00:	4603      	mov	r3, r0
 8012b02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012b04:	7bfb      	ldrb	r3, [r7, #15]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d00f      	beq.n	8012b2a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8012b0a:	6839      	ldr	r1, [r7, #0]
 8012b0c:	6878      	ldr	r0, [r7, #4]
 8012b0e:	f000 f903 	bl	8012d18 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	685b      	ldr	r3, [r3, #4]
 8012b16:	b2db      	uxtb	r3, r3
 8012b18:	4619      	mov	r1, r3
 8012b1a:	6878      	ldr	r0, [r7, #4]
 8012b1c:	f7ff f8e4 	bl	8011ce8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	2202      	movs	r2, #2
 8012b24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012b28:	e014      	b.n	8012b54 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012b2a:	6878      	ldr	r0, [r7, #4]
 8012b2c:	f000 f9bf 	bl	8012eae <USBD_CtlSendStatus>
      break;
 8012b30:	e010      	b.n	8012b54 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012b32:	6878      	ldr	r0, [r7, #4]
 8012b34:	f000 f9bb 	bl	8012eae <USBD_CtlSendStatus>
      break;
 8012b38:	e00c      	b.n	8012b54 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8012b3a:	6839      	ldr	r1, [r7, #0]
 8012b3c:	6878      	ldr	r0, [r7, #4]
 8012b3e:	f000 f8eb 	bl	8012d18 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012b42:	4b07      	ldr	r3, [pc, #28]	; (8012b60 <USBD_SetConfig+0x148>)
 8012b44:	781b      	ldrb	r3, [r3, #0]
 8012b46:	4619      	mov	r1, r3
 8012b48:	6878      	ldr	r0, [r7, #4]
 8012b4a:	f7ff f8cd 	bl	8011ce8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012b4e:	2303      	movs	r3, #3
 8012b50:	73fb      	strb	r3, [r7, #15]
      break;
 8012b52:	bf00      	nop
  }

  return ret;
 8012b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b56:	4618      	mov	r0, r3
 8012b58:	3710      	adds	r7, #16
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}
 8012b5e:	bf00      	nop
 8012b60:	200010a0 	.word	0x200010a0

08012b64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b082      	sub	sp, #8
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
 8012b6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012b6e:	683b      	ldr	r3, [r7, #0]
 8012b70:	88db      	ldrh	r3, [r3, #6]
 8012b72:	2b01      	cmp	r3, #1
 8012b74:	d004      	beq.n	8012b80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012b76:	6839      	ldr	r1, [r7, #0]
 8012b78:	6878      	ldr	r0, [r7, #4]
 8012b7a:	f000 f8cd 	bl	8012d18 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012b7e:	e023      	b.n	8012bc8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b86:	b2db      	uxtb	r3, r3
 8012b88:	2b02      	cmp	r3, #2
 8012b8a:	dc02      	bgt.n	8012b92 <USBD_GetConfig+0x2e>
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	dc03      	bgt.n	8012b98 <USBD_GetConfig+0x34>
 8012b90:	e015      	b.n	8012bbe <USBD_GetConfig+0x5a>
 8012b92:	2b03      	cmp	r3, #3
 8012b94:	d00b      	beq.n	8012bae <USBD_GetConfig+0x4a>
 8012b96:	e012      	b.n	8012bbe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	3308      	adds	r3, #8
 8012ba2:	2201      	movs	r2, #1
 8012ba4:	4619      	mov	r1, r3
 8012ba6:	6878      	ldr	r0, [r7, #4]
 8012ba8:	f000 f927 	bl	8012dfa <USBD_CtlSendData>
        break;
 8012bac:	e00c      	b.n	8012bc8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	3304      	adds	r3, #4
 8012bb2:	2201      	movs	r2, #1
 8012bb4:	4619      	mov	r1, r3
 8012bb6:	6878      	ldr	r0, [r7, #4]
 8012bb8:	f000 f91f 	bl	8012dfa <USBD_CtlSendData>
        break;
 8012bbc:	e004      	b.n	8012bc8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012bbe:	6839      	ldr	r1, [r7, #0]
 8012bc0:	6878      	ldr	r0, [r7, #4]
 8012bc2:	f000 f8a9 	bl	8012d18 <USBD_CtlError>
        break;
 8012bc6:	bf00      	nop
}
 8012bc8:	bf00      	nop
 8012bca:	3708      	adds	r7, #8
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	bd80      	pop	{r7, pc}

08012bd0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b082      	sub	sp, #8
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
 8012bd8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012be0:	b2db      	uxtb	r3, r3
 8012be2:	3b01      	subs	r3, #1
 8012be4:	2b02      	cmp	r3, #2
 8012be6:	d81e      	bhi.n	8012c26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012be8:	683b      	ldr	r3, [r7, #0]
 8012bea:	88db      	ldrh	r3, [r3, #6]
 8012bec:	2b02      	cmp	r3, #2
 8012bee:	d004      	beq.n	8012bfa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012bf0:	6839      	ldr	r1, [r7, #0]
 8012bf2:	6878      	ldr	r0, [r7, #4]
 8012bf4:	f000 f890 	bl	8012d18 <USBD_CtlError>
        break;
 8012bf8:	e01a      	b.n	8012c30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	2201      	movs	r2, #1
 8012bfe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d005      	beq.n	8012c16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	68db      	ldr	r3, [r3, #12]
 8012c0e:	f043 0202 	orr.w	r2, r3, #2
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	330c      	adds	r3, #12
 8012c1a:	2202      	movs	r2, #2
 8012c1c:	4619      	mov	r1, r3
 8012c1e:	6878      	ldr	r0, [r7, #4]
 8012c20:	f000 f8eb 	bl	8012dfa <USBD_CtlSendData>
      break;
 8012c24:	e004      	b.n	8012c30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012c26:	6839      	ldr	r1, [r7, #0]
 8012c28:	6878      	ldr	r0, [r7, #4]
 8012c2a:	f000 f875 	bl	8012d18 <USBD_CtlError>
      break;
 8012c2e:	bf00      	nop
  }
}
 8012c30:	bf00      	nop
 8012c32:	3708      	adds	r7, #8
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}

08012c38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b082      	sub	sp, #8
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
 8012c40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012c42:	683b      	ldr	r3, [r7, #0]
 8012c44:	885b      	ldrh	r3, [r3, #2]
 8012c46:	2b01      	cmp	r3, #1
 8012c48:	d106      	bne.n	8012c58 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	2201      	movs	r2, #1
 8012c4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012c52:	6878      	ldr	r0, [r7, #4]
 8012c54:	f000 f92b 	bl	8012eae <USBD_CtlSendStatus>
  }
}
 8012c58:	bf00      	nop
 8012c5a:	3708      	adds	r7, #8
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	bd80      	pop	{r7, pc}

08012c60 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b082      	sub	sp, #8
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	6078      	str	r0, [r7, #4]
 8012c68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012c70:	b2db      	uxtb	r3, r3
 8012c72:	3b01      	subs	r3, #1
 8012c74:	2b02      	cmp	r3, #2
 8012c76:	d80b      	bhi.n	8012c90 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012c78:	683b      	ldr	r3, [r7, #0]
 8012c7a:	885b      	ldrh	r3, [r3, #2]
 8012c7c:	2b01      	cmp	r3, #1
 8012c7e:	d10c      	bne.n	8012c9a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	2200      	movs	r2, #0
 8012c84:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012c88:	6878      	ldr	r0, [r7, #4]
 8012c8a:	f000 f910 	bl	8012eae <USBD_CtlSendStatus>
      }
      break;
 8012c8e:	e004      	b.n	8012c9a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012c90:	6839      	ldr	r1, [r7, #0]
 8012c92:	6878      	ldr	r0, [r7, #4]
 8012c94:	f000 f840 	bl	8012d18 <USBD_CtlError>
      break;
 8012c98:	e000      	b.n	8012c9c <USBD_ClrFeature+0x3c>
      break;
 8012c9a:	bf00      	nop
  }
}
 8012c9c:	bf00      	nop
 8012c9e:	3708      	adds	r7, #8
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	bd80      	pop	{r7, pc}

08012ca4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b084      	sub	sp, #16
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
 8012cac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012cae:	683b      	ldr	r3, [r7, #0]
 8012cb0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	781a      	ldrb	r2, [r3, #0]
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	3301      	adds	r3, #1
 8012cbe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	781a      	ldrb	r2, [r3, #0]
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	3301      	adds	r3, #1
 8012ccc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012cce:	68f8      	ldr	r0, [r7, #12]
 8012cd0:	f7ff fa91 	bl	80121f6 <SWAPBYTE>
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	461a      	mov	r2, r3
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	3301      	adds	r3, #1
 8012ce0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	3301      	adds	r3, #1
 8012ce6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012ce8:	68f8      	ldr	r0, [r7, #12]
 8012cea:	f7ff fa84 	bl	80121f6 <SWAPBYTE>
 8012cee:	4603      	mov	r3, r0
 8012cf0:	461a      	mov	r2, r3
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	3301      	adds	r3, #1
 8012cfa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	3301      	adds	r3, #1
 8012d00:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012d02:	68f8      	ldr	r0, [r7, #12]
 8012d04:	f7ff fa77 	bl	80121f6 <SWAPBYTE>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	461a      	mov	r2, r3
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	80da      	strh	r2, [r3, #6]
}
 8012d10:	bf00      	nop
 8012d12:	3710      	adds	r7, #16
 8012d14:	46bd      	mov	sp, r7
 8012d16:	bd80      	pop	{r7, pc}

08012d18 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b082      	sub	sp, #8
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
 8012d20:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012d22:	2180      	movs	r1, #128	; 0x80
 8012d24:	6878      	ldr	r0, [r7, #4]
 8012d26:	f000 fd35 	bl	8013794 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012d2a:	2100      	movs	r1, #0
 8012d2c:	6878      	ldr	r0, [r7, #4]
 8012d2e:	f000 fd31 	bl	8013794 <USBD_LL_StallEP>
}
 8012d32:	bf00      	nop
 8012d34:	3708      	adds	r7, #8
 8012d36:	46bd      	mov	sp, r7
 8012d38:	bd80      	pop	{r7, pc}

08012d3a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012d3a:	b580      	push	{r7, lr}
 8012d3c:	b086      	sub	sp, #24
 8012d3e:	af00      	add	r7, sp, #0
 8012d40:	60f8      	str	r0, [r7, #12]
 8012d42:	60b9      	str	r1, [r7, #8]
 8012d44:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012d46:	2300      	movs	r3, #0
 8012d48:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d036      	beq.n	8012dbe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012d54:	6938      	ldr	r0, [r7, #16]
 8012d56:	f000 f836 	bl	8012dc6 <USBD_GetLen>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	3301      	adds	r3, #1
 8012d5e:	b29b      	uxth	r3, r3
 8012d60:	005b      	lsls	r3, r3, #1
 8012d62:	b29a      	uxth	r2, r3
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012d68:	7dfb      	ldrb	r3, [r7, #23]
 8012d6a:	68ba      	ldr	r2, [r7, #8]
 8012d6c:	4413      	add	r3, r2
 8012d6e:	687a      	ldr	r2, [r7, #4]
 8012d70:	7812      	ldrb	r2, [r2, #0]
 8012d72:	701a      	strb	r2, [r3, #0]
  idx++;
 8012d74:	7dfb      	ldrb	r3, [r7, #23]
 8012d76:	3301      	adds	r3, #1
 8012d78:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012d7a:	7dfb      	ldrb	r3, [r7, #23]
 8012d7c:	68ba      	ldr	r2, [r7, #8]
 8012d7e:	4413      	add	r3, r2
 8012d80:	2203      	movs	r2, #3
 8012d82:	701a      	strb	r2, [r3, #0]
  idx++;
 8012d84:	7dfb      	ldrb	r3, [r7, #23]
 8012d86:	3301      	adds	r3, #1
 8012d88:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012d8a:	e013      	b.n	8012db4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012d8c:	7dfb      	ldrb	r3, [r7, #23]
 8012d8e:	68ba      	ldr	r2, [r7, #8]
 8012d90:	4413      	add	r3, r2
 8012d92:	693a      	ldr	r2, [r7, #16]
 8012d94:	7812      	ldrb	r2, [r2, #0]
 8012d96:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012d98:	693b      	ldr	r3, [r7, #16]
 8012d9a:	3301      	adds	r3, #1
 8012d9c:	613b      	str	r3, [r7, #16]
    idx++;
 8012d9e:	7dfb      	ldrb	r3, [r7, #23]
 8012da0:	3301      	adds	r3, #1
 8012da2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012da4:	7dfb      	ldrb	r3, [r7, #23]
 8012da6:	68ba      	ldr	r2, [r7, #8]
 8012da8:	4413      	add	r3, r2
 8012daa:	2200      	movs	r2, #0
 8012dac:	701a      	strb	r2, [r3, #0]
    idx++;
 8012dae:	7dfb      	ldrb	r3, [r7, #23]
 8012db0:	3301      	adds	r3, #1
 8012db2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012db4:	693b      	ldr	r3, [r7, #16]
 8012db6:	781b      	ldrb	r3, [r3, #0]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d1e7      	bne.n	8012d8c <USBD_GetString+0x52>
 8012dbc:	e000      	b.n	8012dc0 <USBD_GetString+0x86>
    return;
 8012dbe:	bf00      	nop
  }
}
 8012dc0:	3718      	adds	r7, #24
 8012dc2:	46bd      	mov	sp, r7
 8012dc4:	bd80      	pop	{r7, pc}

08012dc6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012dc6:	b480      	push	{r7}
 8012dc8:	b085      	sub	sp, #20
 8012dca:	af00      	add	r7, sp, #0
 8012dcc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012dce:	2300      	movs	r3, #0
 8012dd0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012dd6:	e005      	b.n	8012de4 <USBD_GetLen+0x1e>
  {
    len++;
 8012dd8:	7bfb      	ldrb	r3, [r7, #15]
 8012dda:	3301      	adds	r3, #1
 8012ddc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012dde:	68bb      	ldr	r3, [r7, #8]
 8012de0:	3301      	adds	r3, #1
 8012de2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012de4:	68bb      	ldr	r3, [r7, #8]
 8012de6:	781b      	ldrb	r3, [r3, #0]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d1f5      	bne.n	8012dd8 <USBD_GetLen+0x12>
  }

  return len;
 8012dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dee:	4618      	mov	r0, r3
 8012df0:	3714      	adds	r7, #20
 8012df2:	46bd      	mov	sp, r7
 8012df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df8:	4770      	bx	lr

08012dfa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012dfa:	b580      	push	{r7, lr}
 8012dfc:	b084      	sub	sp, #16
 8012dfe:	af00      	add	r7, sp, #0
 8012e00:	60f8      	str	r0, [r7, #12]
 8012e02:	60b9      	str	r1, [r7, #8]
 8012e04:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	2202      	movs	r2, #2
 8012e0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	687a      	ldr	r2, [r7, #4]
 8012e12:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	687a      	ldr	r2, [r7, #4]
 8012e18:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	68ba      	ldr	r2, [r7, #8]
 8012e1e:	2100      	movs	r1, #0
 8012e20:	68f8      	ldr	r0, [r7, #12]
 8012e22:	f000 fd85 	bl	8013930 <USBD_LL_Transmit>

  return USBD_OK;
 8012e26:	2300      	movs	r3, #0
}
 8012e28:	4618      	mov	r0, r3
 8012e2a:	3710      	adds	r7, #16
 8012e2c:	46bd      	mov	sp, r7
 8012e2e:	bd80      	pop	{r7, pc}

08012e30 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012e30:	b580      	push	{r7, lr}
 8012e32:	b084      	sub	sp, #16
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	60f8      	str	r0, [r7, #12]
 8012e38:	60b9      	str	r1, [r7, #8]
 8012e3a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	68ba      	ldr	r2, [r7, #8]
 8012e40:	2100      	movs	r1, #0
 8012e42:	68f8      	ldr	r0, [r7, #12]
 8012e44:	f000 fd74 	bl	8013930 <USBD_LL_Transmit>

  return USBD_OK;
 8012e48:	2300      	movs	r3, #0
}
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	3710      	adds	r7, #16
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	bd80      	pop	{r7, pc}

08012e52 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012e52:	b580      	push	{r7, lr}
 8012e54:	b084      	sub	sp, #16
 8012e56:	af00      	add	r7, sp, #0
 8012e58:	60f8      	str	r0, [r7, #12]
 8012e5a:	60b9      	str	r1, [r7, #8]
 8012e5c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	2203      	movs	r2, #3
 8012e62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	687a      	ldr	r2, [r7, #4]
 8012e6a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	687a      	ldr	r2, [r7, #4]
 8012e72:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	68ba      	ldr	r2, [r7, #8]
 8012e7a:	2100      	movs	r1, #0
 8012e7c:	68f8      	ldr	r0, [r7, #12]
 8012e7e:	f000 fd8f 	bl	80139a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012e82:	2300      	movs	r3, #0
}
 8012e84:	4618      	mov	r0, r3
 8012e86:	3710      	adds	r7, #16
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	bd80      	pop	{r7, pc}

08012e8c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b084      	sub	sp, #16
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	60f8      	str	r0, [r7, #12]
 8012e94:	60b9      	str	r1, [r7, #8]
 8012e96:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	68ba      	ldr	r2, [r7, #8]
 8012e9c:	2100      	movs	r1, #0
 8012e9e:	68f8      	ldr	r0, [r7, #12]
 8012ea0:	f000 fd7e 	bl	80139a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012ea4:	2300      	movs	r3, #0
}
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	3710      	adds	r7, #16
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	bd80      	pop	{r7, pc}

08012eae <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012eae:	b580      	push	{r7, lr}
 8012eb0:	b082      	sub	sp, #8
 8012eb2:	af00      	add	r7, sp, #0
 8012eb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	2204      	movs	r2, #4
 8012eba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	2100      	movs	r1, #0
 8012ec4:	6878      	ldr	r0, [r7, #4]
 8012ec6:	f000 fd33 	bl	8013930 <USBD_LL_Transmit>

  return USBD_OK;
 8012eca:	2300      	movs	r3, #0
}
 8012ecc:	4618      	mov	r0, r3
 8012ece:	3708      	adds	r7, #8
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bd80      	pop	{r7, pc}

08012ed4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b082      	sub	sp, #8
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	2205      	movs	r2, #5
 8012ee0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	2200      	movs	r2, #0
 8012ee8:	2100      	movs	r1, #0
 8012eea:	6878      	ldr	r0, [r7, #4]
 8012eec:	f000 fd58 	bl	80139a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012ef0:	2300      	movs	r3, #0
}
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	3708      	adds	r7, #8
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	bd80      	pop	{r7, pc}
	...

08012efc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012f00:	2200      	movs	r2, #0
 8012f02:	4912      	ldr	r1, [pc, #72]	; (8012f4c <MX_USB_DEVICE_Init+0x50>)
 8012f04:	4812      	ldr	r0, [pc, #72]	; (8012f50 <MX_USB_DEVICE_Init+0x54>)
 8012f06:	f7fe fe65 	bl	8011bd4 <USBD_Init>
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d001      	beq.n	8012f14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012f10:	f7ee fcc0 	bl	8001894 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012f14:	490f      	ldr	r1, [pc, #60]	; (8012f54 <MX_USB_DEVICE_Init+0x58>)
 8012f16:	480e      	ldr	r0, [pc, #56]	; (8012f50 <MX_USB_DEVICE_Init+0x54>)
 8012f18:	f7fe fe8c 	bl	8011c34 <USBD_RegisterClass>
 8012f1c:	4603      	mov	r3, r0
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d001      	beq.n	8012f26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012f22:	f7ee fcb7 	bl	8001894 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012f26:	490c      	ldr	r1, [pc, #48]	; (8012f58 <MX_USB_DEVICE_Init+0x5c>)
 8012f28:	4809      	ldr	r0, [pc, #36]	; (8012f50 <MX_USB_DEVICE_Init+0x54>)
 8012f2a:	f7fe fddd 	bl	8011ae8 <USBD_CDC_RegisterInterface>
 8012f2e:	4603      	mov	r3, r0
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d001      	beq.n	8012f38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012f34:	f7ee fcae 	bl	8001894 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012f38:	4805      	ldr	r0, [pc, #20]	; (8012f50 <MX_USB_DEVICE_Init+0x54>)
 8012f3a:	f7fe fea2 	bl	8011c82 <USBD_Start>
 8012f3e:	4603      	mov	r3, r0
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d001      	beq.n	8012f48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012f44:	f7ee fca6 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012f48:	bf00      	nop
 8012f4a:	bd80      	pop	{r7, pc}
 8012f4c:	20000580 	.word	0x20000580
 8012f50:	200010a4 	.word	0x200010a4
 8012f54:	20000468 	.word	0x20000468
 8012f58:	2000056c 	.word	0x2000056c

08012f5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012f60:	2200      	movs	r2, #0
 8012f62:	4905      	ldr	r1, [pc, #20]	; (8012f78 <CDC_Init_FS+0x1c>)
 8012f64:	4805      	ldr	r0, [pc, #20]	; (8012f7c <CDC_Init_FS+0x20>)
 8012f66:	f7fe fdd4 	bl	8011b12 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012f6a:	4905      	ldr	r1, [pc, #20]	; (8012f80 <CDC_Init_FS+0x24>)
 8012f6c:	4803      	ldr	r0, [pc, #12]	; (8012f7c <CDC_Init_FS+0x20>)
 8012f6e:	f7fe fdee 	bl	8011b4e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012f72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012f74:	4618      	mov	r0, r3
 8012f76:	bd80      	pop	{r7, pc}
 8012f78:	20001b74 	.word	0x20001b74
 8012f7c:	200010a4 	.word	0x200010a4
 8012f80:	20001374 	.word	0x20001374

08012f84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012f84:	b480      	push	{r7}
 8012f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012f88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f92:	4770      	bx	lr

08012f94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012f94:	b480      	push	{r7}
 8012f96:	b083      	sub	sp, #12
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	6039      	str	r1, [r7, #0]
 8012f9e:	71fb      	strb	r3, [r7, #7]
 8012fa0:	4613      	mov	r3, r2
 8012fa2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012fa4:	79fb      	ldrb	r3, [r7, #7]
 8012fa6:	2b23      	cmp	r3, #35	; 0x23
 8012fa8:	d84a      	bhi.n	8013040 <CDC_Control_FS+0xac>
 8012faa:	a201      	add	r2, pc, #4	; (adr r2, 8012fb0 <CDC_Control_FS+0x1c>)
 8012fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fb0:	08013041 	.word	0x08013041
 8012fb4:	08013041 	.word	0x08013041
 8012fb8:	08013041 	.word	0x08013041
 8012fbc:	08013041 	.word	0x08013041
 8012fc0:	08013041 	.word	0x08013041
 8012fc4:	08013041 	.word	0x08013041
 8012fc8:	08013041 	.word	0x08013041
 8012fcc:	08013041 	.word	0x08013041
 8012fd0:	08013041 	.word	0x08013041
 8012fd4:	08013041 	.word	0x08013041
 8012fd8:	08013041 	.word	0x08013041
 8012fdc:	08013041 	.word	0x08013041
 8012fe0:	08013041 	.word	0x08013041
 8012fe4:	08013041 	.word	0x08013041
 8012fe8:	08013041 	.word	0x08013041
 8012fec:	08013041 	.word	0x08013041
 8012ff0:	08013041 	.word	0x08013041
 8012ff4:	08013041 	.word	0x08013041
 8012ff8:	08013041 	.word	0x08013041
 8012ffc:	08013041 	.word	0x08013041
 8013000:	08013041 	.word	0x08013041
 8013004:	08013041 	.word	0x08013041
 8013008:	08013041 	.word	0x08013041
 801300c:	08013041 	.word	0x08013041
 8013010:	08013041 	.word	0x08013041
 8013014:	08013041 	.word	0x08013041
 8013018:	08013041 	.word	0x08013041
 801301c:	08013041 	.word	0x08013041
 8013020:	08013041 	.word	0x08013041
 8013024:	08013041 	.word	0x08013041
 8013028:	08013041 	.word	0x08013041
 801302c:	08013041 	.word	0x08013041
 8013030:	08013041 	.word	0x08013041
 8013034:	08013041 	.word	0x08013041
 8013038:	08013041 	.word	0x08013041
 801303c:	08013041 	.word	0x08013041
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013040:	bf00      	nop
  }

  return (USBD_OK);
 8013042:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013044:	4618      	mov	r0, r3
 8013046:	370c      	adds	r7, #12
 8013048:	46bd      	mov	sp, r7
 801304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304e:	4770      	bx	lr

08013050 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b082      	sub	sp, #8
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
 8013058:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801305a:	6879      	ldr	r1, [r7, #4]
 801305c:	4805      	ldr	r0, [pc, #20]	; (8013074 <CDC_Receive_FS+0x24>)
 801305e:	f7fe fd76 	bl	8011b4e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8013062:	4804      	ldr	r0, [pc, #16]	; (8013074 <CDC_Receive_FS+0x24>)
 8013064:	f7fe fd8c 	bl	8011b80 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013068:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801306a:	4618      	mov	r0, r3
 801306c:	3708      	adds	r7, #8
 801306e:	46bd      	mov	sp, r7
 8013070:	bd80      	pop	{r7, pc}
 8013072:	bf00      	nop
 8013074:	200010a4 	.word	0x200010a4

08013078 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013078:	b480      	push	{r7}
 801307a:	b087      	sub	sp, #28
 801307c:	af00      	add	r7, sp, #0
 801307e:	60f8      	str	r0, [r7, #12]
 8013080:	60b9      	str	r1, [r7, #8]
 8013082:	4613      	mov	r3, r2
 8013084:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8013086:	2300      	movs	r3, #0
 8013088:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801308a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801308e:	4618      	mov	r0, r3
 8013090:	371c      	adds	r7, #28
 8013092:	46bd      	mov	sp, r7
 8013094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013098:	4770      	bx	lr
	...

0801309c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801309c:	b480      	push	{r7}
 801309e:	b083      	sub	sp, #12
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	4603      	mov	r3, r0
 80130a4:	6039      	str	r1, [r7, #0]
 80130a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80130a8:	683b      	ldr	r3, [r7, #0]
 80130aa:	2212      	movs	r2, #18
 80130ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80130ae:	4b03      	ldr	r3, [pc, #12]	; (80130bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80130b0:	4618      	mov	r0, r3
 80130b2:	370c      	adds	r7, #12
 80130b4:	46bd      	mov	sp, r7
 80130b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ba:	4770      	bx	lr
 80130bc:	200005a0 	.word	0x200005a0

080130c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80130c0:	b480      	push	{r7}
 80130c2:	b083      	sub	sp, #12
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	4603      	mov	r3, r0
 80130c8:	6039      	str	r1, [r7, #0]
 80130ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80130cc:	683b      	ldr	r3, [r7, #0]
 80130ce:	2204      	movs	r2, #4
 80130d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80130d2:	4b03      	ldr	r3, [pc, #12]	; (80130e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80130d4:	4618      	mov	r0, r3
 80130d6:	370c      	adds	r7, #12
 80130d8:	46bd      	mov	sp, r7
 80130da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130de:	4770      	bx	lr
 80130e0:	200005c0 	.word	0x200005c0

080130e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b082      	sub	sp, #8
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	4603      	mov	r3, r0
 80130ec:	6039      	str	r1, [r7, #0]
 80130ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80130f0:	79fb      	ldrb	r3, [r7, #7]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d105      	bne.n	8013102 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80130f6:	683a      	ldr	r2, [r7, #0]
 80130f8:	4907      	ldr	r1, [pc, #28]	; (8013118 <USBD_FS_ProductStrDescriptor+0x34>)
 80130fa:	4808      	ldr	r0, [pc, #32]	; (801311c <USBD_FS_ProductStrDescriptor+0x38>)
 80130fc:	f7ff fe1d 	bl	8012d3a <USBD_GetString>
 8013100:	e004      	b.n	801310c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013102:	683a      	ldr	r2, [r7, #0]
 8013104:	4904      	ldr	r1, [pc, #16]	; (8013118 <USBD_FS_ProductStrDescriptor+0x34>)
 8013106:	4805      	ldr	r0, [pc, #20]	; (801311c <USBD_FS_ProductStrDescriptor+0x38>)
 8013108:	f7ff fe17 	bl	8012d3a <USBD_GetString>
  }
  return USBD_StrDesc;
 801310c:	4b02      	ldr	r3, [pc, #8]	; (8013118 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801310e:	4618      	mov	r0, r3
 8013110:	3708      	adds	r7, #8
 8013112:	46bd      	mov	sp, r7
 8013114:	bd80      	pop	{r7, pc}
 8013116:	bf00      	nop
 8013118:	20002374 	.word	0x20002374
 801311c:	08014cb0 	.word	0x08014cb0

08013120 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013120:	b580      	push	{r7, lr}
 8013122:	b082      	sub	sp, #8
 8013124:	af00      	add	r7, sp, #0
 8013126:	4603      	mov	r3, r0
 8013128:	6039      	str	r1, [r7, #0]
 801312a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801312c:	683a      	ldr	r2, [r7, #0]
 801312e:	4904      	ldr	r1, [pc, #16]	; (8013140 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013130:	4804      	ldr	r0, [pc, #16]	; (8013144 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8013132:	f7ff fe02 	bl	8012d3a <USBD_GetString>
  return USBD_StrDesc;
 8013136:	4b02      	ldr	r3, [pc, #8]	; (8013140 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013138:	4618      	mov	r0, r3
 801313a:	3708      	adds	r7, #8
 801313c:	46bd      	mov	sp, r7
 801313e:	bd80      	pop	{r7, pc}
 8013140:	20002374 	.word	0x20002374
 8013144:	08014cc8 	.word	0x08014cc8

08013148 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013148:	b580      	push	{r7, lr}
 801314a:	b082      	sub	sp, #8
 801314c:	af00      	add	r7, sp, #0
 801314e:	4603      	mov	r3, r0
 8013150:	6039      	str	r1, [r7, #0]
 8013152:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013154:	683b      	ldr	r3, [r7, #0]
 8013156:	221a      	movs	r2, #26
 8013158:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801315a:	f000 f855 	bl	8013208 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801315e:	4b02      	ldr	r3, [pc, #8]	; (8013168 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8013160:	4618      	mov	r0, r3
 8013162:	3708      	adds	r7, #8
 8013164:	46bd      	mov	sp, r7
 8013166:	bd80      	pop	{r7, pc}
 8013168:	200005c4 	.word	0x200005c4

0801316c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b082      	sub	sp, #8
 8013170:	af00      	add	r7, sp, #0
 8013172:	4603      	mov	r3, r0
 8013174:	6039      	str	r1, [r7, #0]
 8013176:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013178:	79fb      	ldrb	r3, [r7, #7]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d105      	bne.n	801318a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801317e:	683a      	ldr	r2, [r7, #0]
 8013180:	4907      	ldr	r1, [pc, #28]	; (80131a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013182:	4808      	ldr	r0, [pc, #32]	; (80131a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013184:	f7ff fdd9 	bl	8012d3a <USBD_GetString>
 8013188:	e004      	b.n	8013194 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801318a:	683a      	ldr	r2, [r7, #0]
 801318c:	4904      	ldr	r1, [pc, #16]	; (80131a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801318e:	4805      	ldr	r0, [pc, #20]	; (80131a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013190:	f7ff fdd3 	bl	8012d3a <USBD_GetString>
  }
  return USBD_StrDesc;
 8013194:	4b02      	ldr	r3, [pc, #8]	; (80131a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8013196:	4618      	mov	r0, r3
 8013198:	3708      	adds	r7, #8
 801319a:	46bd      	mov	sp, r7
 801319c:	bd80      	pop	{r7, pc}
 801319e:	bf00      	nop
 80131a0:	20002374 	.word	0x20002374
 80131a4:	08014cdc 	.word	0x08014cdc

080131a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b082      	sub	sp, #8
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	4603      	mov	r3, r0
 80131b0:	6039      	str	r1, [r7, #0]
 80131b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80131b4:	79fb      	ldrb	r3, [r7, #7]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d105      	bne.n	80131c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80131ba:	683a      	ldr	r2, [r7, #0]
 80131bc:	4907      	ldr	r1, [pc, #28]	; (80131dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80131be:	4808      	ldr	r0, [pc, #32]	; (80131e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80131c0:	f7ff fdbb 	bl	8012d3a <USBD_GetString>
 80131c4:	e004      	b.n	80131d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80131c6:	683a      	ldr	r2, [r7, #0]
 80131c8:	4904      	ldr	r1, [pc, #16]	; (80131dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80131ca:	4805      	ldr	r0, [pc, #20]	; (80131e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80131cc:	f7ff fdb5 	bl	8012d3a <USBD_GetString>
  }
  return USBD_StrDesc;
 80131d0:	4b02      	ldr	r3, [pc, #8]	; (80131dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80131d2:	4618      	mov	r0, r3
 80131d4:	3708      	adds	r7, #8
 80131d6:	46bd      	mov	sp, r7
 80131d8:	bd80      	pop	{r7, pc}
 80131da:	bf00      	nop
 80131dc:	20002374 	.word	0x20002374
 80131e0:	08014ce8 	.word	0x08014ce8

080131e4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80131e4:	b480      	push	{r7}
 80131e6:	b083      	sub	sp, #12
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	4603      	mov	r3, r0
 80131ec:	6039      	str	r1, [r7, #0]
 80131ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80131f0:	683b      	ldr	r3, [r7, #0]
 80131f2:	220c      	movs	r2, #12
 80131f4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80131f6:	4b03      	ldr	r3, [pc, #12]	; (8013204 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80131f8:	4618      	mov	r0, r3
 80131fa:	370c      	adds	r7, #12
 80131fc:	46bd      	mov	sp, r7
 80131fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013202:	4770      	bx	lr
 8013204:	200005b4 	.word	0x200005b4

08013208 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013208:	b580      	push	{r7, lr}
 801320a:	b084      	sub	sp, #16
 801320c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801320e:	4b0f      	ldr	r3, [pc, #60]	; (801324c <Get_SerialNum+0x44>)
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013214:	4b0e      	ldr	r3, [pc, #56]	; (8013250 <Get_SerialNum+0x48>)
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801321a:	4b0e      	ldr	r3, [pc, #56]	; (8013254 <Get_SerialNum+0x4c>)
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013220:	68fa      	ldr	r2, [r7, #12]
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	4413      	add	r3, r2
 8013226:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d009      	beq.n	8013242 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801322e:	2208      	movs	r2, #8
 8013230:	4909      	ldr	r1, [pc, #36]	; (8013258 <Get_SerialNum+0x50>)
 8013232:	68f8      	ldr	r0, [r7, #12]
 8013234:	f000 f814 	bl	8013260 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013238:	2204      	movs	r2, #4
 801323a:	4908      	ldr	r1, [pc, #32]	; (801325c <Get_SerialNum+0x54>)
 801323c:	68b8      	ldr	r0, [r7, #8]
 801323e:	f000 f80f 	bl	8013260 <IntToUnicode>
  }
}
 8013242:	bf00      	nop
 8013244:	3710      	adds	r7, #16
 8013246:	46bd      	mov	sp, r7
 8013248:	bd80      	pop	{r7, pc}
 801324a:	bf00      	nop
 801324c:	1fff7590 	.word	0x1fff7590
 8013250:	1fff7594 	.word	0x1fff7594
 8013254:	1fff7598 	.word	0x1fff7598
 8013258:	200005c6 	.word	0x200005c6
 801325c:	200005d6 	.word	0x200005d6

08013260 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013260:	b480      	push	{r7}
 8013262:	b087      	sub	sp, #28
 8013264:	af00      	add	r7, sp, #0
 8013266:	60f8      	str	r0, [r7, #12]
 8013268:	60b9      	str	r1, [r7, #8]
 801326a:	4613      	mov	r3, r2
 801326c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801326e:	2300      	movs	r3, #0
 8013270:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8013272:	2300      	movs	r3, #0
 8013274:	75fb      	strb	r3, [r7, #23]
 8013276:	e027      	b.n	80132c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	0f1b      	lsrs	r3, r3, #28
 801327c:	2b09      	cmp	r3, #9
 801327e:	d80b      	bhi.n	8013298 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	0f1b      	lsrs	r3, r3, #28
 8013284:	b2da      	uxtb	r2, r3
 8013286:	7dfb      	ldrb	r3, [r7, #23]
 8013288:	005b      	lsls	r3, r3, #1
 801328a:	4619      	mov	r1, r3
 801328c:	68bb      	ldr	r3, [r7, #8]
 801328e:	440b      	add	r3, r1
 8013290:	3230      	adds	r2, #48	; 0x30
 8013292:	b2d2      	uxtb	r2, r2
 8013294:	701a      	strb	r2, [r3, #0]
 8013296:	e00a      	b.n	80132ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	0f1b      	lsrs	r3, r3, #28
 801329c:	b2da      	uxtb	r2, r3
 801329e:	7dfb      	ldrb	r3, [r7, #23]
 80132a0:	005b      	lsls	r3, r3, #1
 80132a2:	4619      	mov	r1, r3
 80132a4:	68bb      	ldr	r3, [r7, #8]
 80132a6:	440b      	add	r3, r1
 80132a8:	3237      	adds	r2, #55	; 0x37
 80132aa:	b2d2      	uxtb	r2, r2
 80132ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	011b      	lsls	r3, r3, #4
 80132b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80132b4:	7dfb      	ldrb	r3, [r7, #23]
 80132b6:	005b      	lsls	r3, r3, #1
 80132b8:	3301      	adds	r3, #1
 80132ba:	68ba      	ldr	r2, [r7, #8]
 80132bc:	4413      	add	r3, r2
 80132be:	2200      	movs	r2, #0
 80132c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80132c2:	7dfb      	ldrb	r3, [r7, #23]
 80132c4:	3301      	adds	r3, #1
 80132c6:	75fb      	strb	r3, [r7, #23]
 80132c8:	7dfa      	ldrb	r2, [r7, #23]
 80132ca:	79fb      	ldrb	r3, [r7, #7]
 80132cc:	429a      	cmp	r2, r3
 80132ce:	d3d3      	bcc.n	8013278 <IntToUnicode+0x18>
  }
}
 80132d0:	bf00      	nop
 80132d2:	bf00      	nop
 80132d4:	371c      	adds	r7, #28
 80132d6:	46bd      	mov	sp, r7
 80132d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132dc:	4770      	bx	lr
	...

080132e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b08a      	sub	sp, #40	; 0x28
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80132e8:	f107 0314 	add.w	r3, r7, #20
 80132ec:	2200      	movs	r2, #0
 80132ee:	601a      	str	r2, [r3, #0]
 80132f0:	605a      	str	r2, [r3, #4]
 80132f2:	609a      	str	r2, [r3, #8]
 80132f4:	60da      	str	r2, [r3, #12]
 80132f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013300:	d14e      	bne.n	80133a0 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013302:	4b29      	ldr	r3, [pc, #164]	; (80133a8 <HAL_PCD_MspInit+0xc8>)
 8013304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013306:	4a28      	ldr	r2, [pc, #160]	; (80133a8 <HAL_PCD_MspInit+0xc8>)
 8013308:	f043 0301 	orr.w	r3, r3, #1
 801330c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801330e:	4b26      	ldr	r3, [pc, #152]	; (80133a8 <HAL_PCD_MspInit+0xc8>)
 8013310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013312:	f003 0301 	and.w	r3, r3, #1
 8013316:	613b      	str	r3, [r7, #16]
 8013318:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 801331a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801331e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013320:	2302      	movs	r3, #2
 8013322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013324:	2300      	movs	r3, #0
 8013326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013328:	2303      	movs	r3, #3
 801332a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801332c:	230a      	movs	r3, #10
 801332e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013330:	f107 0314 	add.w	r3, r7, #20
 8013334:	4619      	mov	r1, r3
 8013336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801333a:	f7f5 fa37 	bl	80087ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801333e:	4b1a      	ldr	r3, [pc, #104]	; (80133a8 <HAL_PCD_MspInit+0xc8>)
 8013340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013342:	4a19      	ldr	r2, [pc, #100]	; (80133a8 <HAL_PCD_MspInit+0xc8>)
 8013344:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013348:	64d3      	str	r3, [r2, #76]	; 0x4c
 801334a:	4b17      	ldr	r3, [pc, #92]	; (80133a8 <HAL_PCD_MspInit+0xc8>)
 801334c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801334e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013352:	60fb      	str	r3, [r7, #12]
 8013354:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013356:	4b14      	ldr	r3, [pc, #80]	; (80133a8 <HAL_PCD_MspInit+0xc8>)
 8013358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801335a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801335e:	2b00      	cmp	r3, #0
 8013360:	d114      	bne.n	801338c <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013362:	4b11      	ldr	r3, [pc, #68]	; (80133a8 <HAL_PCD_MspInit+0xc8>)
 8013364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013366:	4a10      	ldr	r2, [pc, #64]	; (80133a8 <HAL_PCD_MspInit+0xc8>)
 8013368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801336c:	6593      	str	r3, [r2, #88]	; 0x58
 801336e:	4b0e      	ldr	r3, [pc, #56]	; (80133a8 <HAL_PCD_MspInit+0xc8>)
 8013370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013376:	60bb      	str	r3, [r7, #8]
 8013378:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 801337a:	f7f7 fd05 	bl	800ad88 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 801337e:	4b0a      	ldr	r3, [pc, #40]	; (80133a8 <HAL_PCD_MspInit+0xc8>)
 8013380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013382:	4a09      	ldr	r2, [pc, #36]	; (80133a8 <HAL_PCD_MspInit+0xc8>)
 8013384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013388:	6593      	str	r3, [r2, #88]	; 0x58
 801338a:	e001      	b.n	8013390 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 801338c:	f7f7 fcfc 	bl	800ad88 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8013390:	2200      	movs	r2, #0
 8013392:	2100      	movs	r1, #0
 8013394:	2043      	movs	r0, #67	; 0x43
 8013396:	f7f5 f840 	bl	800841a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801339a:	2043      	movs	r0, #67	; 0x43
 801339c:	f7f5 f859 	bl	8008452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80133a0:	bf00      	nop
 80133a2:	3728      	adds	r7, #40	; 0x28
 80133a4:	46bd      	mov	sp, r7
 80133a6:	bd80      	pop	{r7, pc}
 80133a8:	40021000 	.word	0x40021000

080133ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b082      	sub	sp, #8
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80133c0:	4619      	mov	r1, r3
 80133c2:	4610      	mov	r0, r2
 80133c4:	f7fe fca8 	bl	8011d18 <USBD_LL_SetupStage>
}
 80133c8:	bf00      	nop
 80133ca:	3708      	adds	r7, #8
 80133cc:	46bd      	mov	sp, r7
 80133ce:	bd80      	pop	{r7, pc}

080133d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80133d0:	b580      	push	{r7, lr}
 80133d2:	b082      	sub	sp, #8
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	6078      	str	r0, [r7, #4]
 80133d8:	460b      	mov	r3, r1
 80133da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80133e2:	78fa      	ldrb	r2, [r7, #3]
 80133e4:	6879      	ldr	r1, [r7, #4]
 80133e6:	4613      	mov	r3, r2
 80133e8:	00db      	lsls	r3, r3, #3
 80133ea:	4413      	add	r3, r2
 80133ec:	009b      	lsls	r3, r3, #2
 80133ee:	440b      	add	r3, r1
 80133f0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80133f4:	681a      	ldr	r2, [r3, #0]
 80133f6:	78fb      	ldrb	r3, [r7, #3]
 80133f8:	4619      	mov	r1, r3
 80133fa:	f7fe fce2 	bl	8011dc2 <USBD_LL_DataOutStage>
}
 80133fe:	bf00      	nop
 8013400:	3708      	adds	r7, #8
 8013402:	46bd      	mov	sp, r7
 8013404:	bd80      	pop	{r7, pc}

08013406 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013406:	b580      	push	{r7, lr}
 8013408:	b082      	sub	sp, #8
 801340a:	af00      	add	r7, sp, #0
 801340c:	6078      	str	r0, [r7, #4]
 801340e:	460b      	mov	r3, r1
 8013410:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8013418:	78fa      	ldrb	r2, [r7, #3]
 801341a:	6879      	ldr	r1, [r7, #4]
 801341c:	4613      	mov	r3, r2
 801341e:	00db      	lsls	r3, r3, #3
 8013420:	4413      	add	r3, r2
 8013422:	009b      	lsls	r3, r3, #2
 8013424:	440b      	add	r3, r1
 8013426:	334c      	adds	r3, #76	; 0x4c
 8013428:	681a      	ldr	r2, [r3, #0]
 801342a:	78fb      	ldrb	r3, [r7, #3]
 801342c:	4619      	mov	r1, r3
 801342e:	f7fe fd2b 	bl	8011e88 <USBD_LL_DataInStage>
}
 8013432:	bf00      	nop
 8013434:	3708      	adds	r7, #8
 8013436:	46bd      	mov	sp, r7
 8013438:	bd80      	pop	{r7, pc}

0801343a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801343a:	b580      	push	{r7, lr}
 801343c:	b082      	sub	sp, #8
 801343e:	af00      	add	r7, sp, #0
 8013440:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013448:	4618      	mov	r0, r3
 801344a:	f7fe fe3f 	bl	80120cc <USBD_LL_SOF>
}
 801344e:	bf00      	nop
 8013450:	3708      	adds	r7, #8
 8013452:	46bd      	mov	sp, r7
 8013454:	bd80      	pop	{r7, pc}

08013456 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013456:	b580      	push	{r7, lr}
 8013458:	b084      	sub	sp, #16
 801345a:	af00      	add	r7, sp, #0
 801345c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801345e:	2301      	movs	r3, #1
 8013460:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	68db      	ldr	r3, [r3, #12]
 8013466:	2b02      	cmp	r3, #2
 8013468:	d001      	beq.n	801346e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801346a:	f7ee fa13 	bl	8001894 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013474:	7bfa      	ldrb	r2, [r7, #15]
 8013476:	4611      	mov	r1, r2
 8013478:	4618      	mov	r0, r3
 801347a:	f7fe fde9 	bl	8012050 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013484:	4618      	mov	r0, r3
 8013486:	f7fe fd95 	bl	8011fb4 <USBD_LL_Reset>
}
 801348a:	bf00      	nop
 801348c:	3710      	adds	r7, #16
 801348e:	46bd      	mov	sp, r7
 8013490:	bd80      	pop	{r7, pc}
	...

08013494 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013494:	b580      	push	{r7, lr}
 8013496:	b082      	sub	sp, #8
 8013498:	af00      	add	r7, sp, #0
 801349a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	687a      	ldr	r2, [r7, #4]
 80134a8:	6812      	ldr	r2, [r2, #0]
 80134aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80134ae:	f043 0301 	orr.w	r3, r3, #1
 80134b2:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80134ba:	4618      	mov	r0, r3
 80134bc:	f7fe fdd8 	bl	8012070 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	6a1b      	ldr	r3, [r3, #32]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d005      	beq.n	80134d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80134c8:	4b04      	ldr	r3, [pc, #16]	; (80134dc <HAL_PCD_SuspendCallback+0x48>)
 80134ca:	691b      	ldr	r3, [r3, #16]
 80134cc:	4a03      	ldr	r2, [pc, #12]	; (80134dc <HAL_PCD_SuspendCallback+0x48>)
 80134ce:	f043 0306 	orr.w	r3, r3, #6
 80134d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80134d4:	bf00      	nop
 80134d6:	3708      	adds	r7, #8
 80134d8:	46bd      	mov	sp, r7
 80134da:	bd80      	pop	{r7, pc}
 80134dc:	e000ed00 	.word	0xe000ed00

080134e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b082      	sub	sp, #8
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	687a      	ldr	r2, [r7, #4]
 80134f4:	6812      	ldr	r2, [r2, #0]
 80134f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80134fa:	f023 0301 	bic.w	r3, r3, #1
 80134fe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	6a1b      	ldr	r3, [r3, #32]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d007      	beq.n	8013518 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013508:	4b08      	ldr	r3, [pc, #32]	; (801352c <HAL_PCD_ResumeCallback+0x4c>)
 801350a:	691b      	ldr	r3, [r3, #16]
 801350c:	4a07      	ldr	r2, [pc, #28]	; (801352c <HAL_PCD_ResumeCallback+0x4c>)
 801350e:	f023 0306 	bic.w	r3, r3, #6
 8013512:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8013514:	f000 faf6 	bl	8013b04 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801351e:	4618      	mov	r0, r3
 8013520:	f7fe fdbc 	bl	801209c <USBD_LL_Resume>
}
 8013524:	bf00      	nop
 8013526:	3708      	adds	r7, #8
 8013528:	46bd      	mov	sp, r7
 801352a:	bd80      	pop	{r7, pc}
 801352c:	e000ed00 	.word	0xe000ed00

08013530 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b082      	sub	sp, #8
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
 8013538:	460b      	mov	r3, r1
 801353a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013542:	78fa      	ldrb	r2, [r7, #3]
 8013544:	4611      	mov	r1, r2
 8013546:	4618      	mov	r0, r3
 8013548:	f7fe fe08 	bl	801215c <USBD_LL_IsoOUTIncomplete>
}
 801354c:	bf00      	nop
 801354e:	3708      	adds	r7, #8
 8013550:	46bd      	mov	sp, r7
 8013552:	bd80      	pop	{r7, pc}

08013554 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013554:	b580      	push	{r7, lr}
 8013556:	b082      	sub	sp, #8
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
 801355c:	460b      	mov	r3, r1
 801355e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013566:	78fa      	ldrb	r2, [r7, #3]
 8013568:	4611      	mov	r1, r2
 801356a:	4618      	mov	r0, r3
 801356c:	f7fe fdd0 	bl	8012110 <USBD_LL_IsoINIncomplete>
}
 8013570:	bf00      	nop
 8013572:	3708      	adds	r7, #8
 8013574:	46bd      	mov	sp, r7
 8013576:	bd80      	pop	{r7, pc}

08013578 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013578:	b580      	push	{r7, lr}
 801357a:	b082      	sub	sp, #8
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013586:	4618      	mov	r0, r3
 8013588:	f7fe fe0e 	bl	80121a8 <USBD_LL_DevConnected>
}
 801358c:	bf00      	nop
 801358e:	3708      	adds	r7, #8
 8013590:	46bd      	mov	sp, r7
 8013592:	bd80      	pop	{r7, pc}

08013594 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b082      	sub	sp, #8
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80135a2:	4618      	mov	r0, r3
 80135a4:	f7fe fe0b 	bl	80121be <USBD_LL_DevDisconnected>
}
 80135a8:	bf00      	nop
 80135aa:	3708      	adds	r7, #8
 80135ac:	46bd      	mov	sp, r7
 80135ae:	bd80      	pop	{r7, pc}

080135b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b082      	sub	sp, #8
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	781b      	ldrb	r3, [r3, #0]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d13c      	bne.n	801363a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80135c0:	4a20      	ldr	r2, [pc, #128]	; (8013644 <USBD_LL_Init+0x94>)
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	4a1e      	ldr	r2, [pc, #120]	; (8013644 <USBD_LL_Init+0x94>)
 80135cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80135d0:	4b1c      	ldr	r3, [pc, #112]	; (8013644 <USBD_LL_Init+0x94>)
 80135d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80135d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80135d8:	4b1a      	ldr	r3, [pc, #104]	; (8013644 <USBD_LL_Init+0x94>)
 80135da:	2206      	movs	r2, #6
 80135dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80135de:	4b19      	ldr	r3, [pc, #100]	; (8013644 <USBD_LL_Init+0x94>)
 80135e0:	2202      	movs	r2, #2
 80135e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80135e4:	4b17      	ldr	r3, [pc, #92]	; (8013644 <USBD_LL_Init+0x94>)
 80135e6:	2202      	movs	r2, #2
 80135e8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80135ea:	4b16      	ldr	r3, [pc, #88]	; (8013644 <USBD_LL_Init+0x94>)
 80135ec:	2200      	movs	r2, #0
 80135ee:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80135f0:	4b14      	ldr	r3, [pc, #80]	; (8013644 <USBD_LL_Init+0x94>)
 80135f2:	2200      	movs	r2, #0
 80135f4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80135f6:	4b13      	ldr	r3, [pc, #76]	; (8013644 <USBD_LL_Init+0x94>)
 80135f8:	2200      	movs	r2, #0
 80135fa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80135fc:	4b11      	ldr	r3, [pc, #68]	; (8013644 <USBD_LL_Init+0x94>)
 80135fe:	2200      	movs	r2, #0
 8013600:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8013602:	4b10      	ldr	r3, [pc, #64]	; (8013644 <USBD_LL_Init+0x94>)
 8013604:	2200      	movs	r2, #0
 8013606:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8013608:	4b0e      	ldr	r3, [pc, #56]	; (8013644 <USBD_LL_Init+0x94>)
 801360a:	2200      	movs	r2, #0
 801360c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801360e:	480d      	ldr	r0, [pc, #52]	; (8013644 <USBD_LL_Init+0x94>)
 8013610:	f7f6 f987 	bl	8009922 <HAL_PCD_Init>
 8013614:	4603      	mov	r3, r0
 8013616:	2b00      	cmp	r3, #0
 8013618:	d001      	beq.n	801361e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801361a:	f7ee f93b 	bl	8001894 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801361e:	2180      	movs	r1, #128	; 0x80
 8013620:	4808      	ldr	r0, [pc, #32]	; (8013644 <USBD_LL_Init+0x94>)
 8013622:	f7f7 fb08 	bl	800ac36 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8013626:	2240      	movs	r2, #64	; 0x40
 8013628:	2100      	movs	r1, #0
 801362a:	4806      	ldr	r0, [pc, #24]	; (8013644 <USBD_LL_Init+0x94>)
 801362c:	f7f7 fabc 	bl	800aba8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013630:	2280      	movs	r2, #128	; 0x80
 8013632:	2101      	movs	r1, #1
 8013634:	4803      	ldr	r0, [pc, #12]	; (8013644 <USBD_LL_Init+0x94>)
 8013636:	f7f7 fab7 	bl	800aba8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801363a:	2300      	movs	r3, #0
}
 801363c:	4618      	mov	r0, r3
 801363e:	3708      	adds	r7, #8
 8013640:	46bd      	mov	sp, r7
 8013642:	bd80      	pop	{r7, pc}
 8013644:	20002574 	.word	0x20002574

08013648 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013648:	b580      	push	{r7, lr}
 801364a:	b084      	sub	sp, #16
 801364c:	af00      	add	r7, sp, #0
 801364e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013650:	2300      	movs	r3, #0
 8013652:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013654:	2300      	movs	r3, #0
 8013656:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801365e:	4618      	mov	r0, r3
 8013660:	f7f6 fa83 	bl	8009b6a <HAL_PCD_Start>
 8013664:	4603      	mov	r3, r0
 8013666:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013668:	7bbb      	ldrb	r3, [r7, #14]
 801366a:	2b03      	cmp	r3, #3
 801366c:	d816      	bhi.n	801369c <USBD_LL_Start+0x54>
 801366e:	a201      	add	r2, pc, #4	; (adr r2, 8013674 <USBD_LL_Start+0x2c>)
 8013670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013674:	08013685 	.word	0x08013685
 8013678:	0801368b 	.word	0x0801368b
 801367c:	08013691 	.word	0x08013691
 8013680:	08013697 	.word	0x08013697
    case HAL_OK :
      usb_status = USBD_OK;
 8013684:	2300      	movs	r3, #0
 8013686:	73fb      	strb	r3, [r7, #15]
    break;
 8013688:	e00b      	b.n	80136a2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801368a:	2303      	movs	r3, #3
 801368c:	73fb      	strb	r3, [r7, #15]
    break;
 801368e:	e008      	b.n	80136a2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013690:	2301      	movs	r3, #1
 8013692:	73fb      	strb	r3, [r7, #15]
    break;
 8013694:	e005      	b.n	80136a2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013696:	2303      	movs	r3, #3
 8013698:	73fb      	strb	r3, [r7, #15]
    break;
 801369a:	e002      	b.n	80136a2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 801369c:	2303      	movs	r3, #3
 801369e:	73fb      	strb	r3, [r7, #15]
    break;
 80136a0:	bf00      	nop
  }
  return usb_status;
 80136a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80136a4:	4618      	mov	r0, r3
 80136a6:	3710      	adds	r7, #16
 80136a8:	46bd      	mov	sp, r7
 80136aa:	bd80      	pop	{r7, pc}

080136ac <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b084      	sub	sp, #16
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
 80136b4:	4608      	mov	r0, r1
 80136b6:	4611      	mov	r1, r2
 80136b8:	461a      	mov	r2, r3
 80136ba:	4603      	mov	r3, r0
 80136bc:	70fb      	strb	r3, [r7, #3]
 80136be:	460b      	mov	r3, r1
 80136c0:	70bb      	strb	r3, [r7, #2]
 80136c2:	4613      	mov	r3, r2
 80136c4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80136c6:	2300      	movs	r3, #0
 80136c8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80136ca:	2300      	movs	r3, #0
 80136cc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80136d4:	78bb      	ldrb	r3, [r7, #2]
 80136d6:	883a      	ldrh	r2, [r7, #0]
 80136d8:	78f9      	ldrb	r1, [r7, #3]
 80136da:	f7f6 ff2d 	bl	800a538 <HAL_PCD_EP_Open>
 80136de:	4603      	mov	r3, r0
 80136e0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80136e2:	7bbb      	ldrb	r3, [r7, #14]
 80136e4:	2b03      	cmp	r3, #3
 80136e6:	d817      	bhi.n	8013718 <USBD_LL_OpenEP+0x6c>
 80136e8:	a201      	add	r2, pc, #4	; (adr r2, 80136f0 <USBD_LL_OpenEP+0x44>)
 80136ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136ee:	bf00      	nop
 80136f0:	08013701 	.word	0x08013701
 80136f4:	08013707 	.word	0x08013707
 80136f8:	0801370d 	.word	0x0801370d
 80136fc:	08013713 	.word	0x08013713
    case HAL_OK :
      usb_status = USBD_OK;
 8013700:	2300      	movs	r3, #0
 8013702:	73fb      	strb	r3, [r7, #15]
    break;
 8013704:	e00b      	b.n	801371e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013706:	2303      	movs	r3, #3
 8013708:	73fb      	strb	r3, [r7, #15]
    break;
 801370a:	e008      	b.n	801371e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801370c:	2301      	movs	r3, #1
 801370e:	73fb      	strb	r3, [r7, #15]
    break;
 8013710:	e005      	b.n	801371e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013712:	2303      	movs	r3, #3
 8013714:	73fb      	strb	r3, [r7, #15]
    break;
 8013716:	e002      	b.n	801371e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8013718:	2303      	movs	r3, #3
 801371a:	73fb      	strb	r3, [r7, #15]
    break;
 801371c:	bf00      	nop
  }
  return usb_status;
 801371e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013720:	4618      	mov	r0, r3
 8013722:	3710      	adds	r7, #16
 8013724:	46bd      	mov	sp, r7
 8013726:	bd80      	pop	{r7, pc}

08013728 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b084      	sub	sp, #16
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
 8013730:	460b      	mov	r3, r1
 8013732:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013734:	2300      	movs	r3, #0
 8013736:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013738:	2300      	movs	r3, #0
 801373a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013742:	78fa      	ldrb	r2, [r7, #3]
 8013744:	4611      	mov	r1, r2
 8013746:	4618      	mov	r0, r3
 8013748:	f7f6 ff5e 	bl	800a608 <HAL_PCD_EP_Close>
 801374c:	4603      	mov	r3, r0
 801374e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013750:	7bbb      	ldrb	r3, [r7, #14]
 8013752:	2b03      	cmp	r3, #3
 8013754:	d816      	bhi.n	8013784 <USBD_LL_CloseEP+0x5c>
 8013756:	a201      	add	r2, pc, #4	; (adr r2, 801375c <USBD_LL_CloseEP+0x34>)
 8013758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801375c:	0801376d 	.word	0x0801376d
 8013760:	08013773 	.word	0x08013773
 8013764:	08013779 	.word	0x08013779
 8013768:	0801377f 	.word	0x0801377f
    case HAL_OK :
      usb_status = USBD_OK;
 801376c:	2300      	movs	r3, #0
 801376e:	73fb      	strb	r3, [r7, #15]
    break;
 8013770:	e00b      	b.n	801378a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013772:	2303      	movs	r3, #3
 8013774:	73fb      	strb	r3, [r7, #15]
    break;
 8013776:	e008      	b.n	801378a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013778:	2301      	movs	r3, #1
 801377a:	73fb      	strb	r3, [r7, #15]
    break;
 801377c:	e005      	b.n	801378a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801377e:	2303      	movs	r3, #3
 8013780:	73fb      	strb	r3, [r7, #15]
    break;
 8013782:	e002      	b.n	801378a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8013784:	2303      	movs	r3, #3
 8013786:	73fb      	strb	r3, [r7, #15]
    break;
 8013788:	bf00      	nop
  }
  return usb_status;
 801378a:	7bfb      	ldrb	r3, [r7, #15]
}
 801378c:	4618      	mov	r0, r3
 801378e:	3710      	adds	r7, #16
 8013790:	46bd      	mov	sp, r7
 8013792:	bd80      	pop	{r7, pc}

08013794 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013794:	b580      	push	{r7, lr}
 8013796:	b084      	sub	sp, #16
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]
 801379c:	460b      	mov	r3, r1
 801379e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80137a0:	2300      	movs	r3, #0
 80137a2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80137a4:	2300      	movs	r3, #0
 80137a6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80137ae:	78fa      	ldrb	r2, [r7, #3]
 80137b0:	4611      	mov	r1, r2
 80137b2:	4618      	mov	r0, r3
 80137b4:	f7f7 f805 	bl	800a7c2 <HAL_PCD_EP_SetStall>
 80137b8:	4603      	mov	r3, r0
 80137ba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80137bc:	7bbb      	ldrb	r3, [r7, #14]
 80137be:	2b03      	cmp	r3, #3
 80137c0:	d816      	bhi.n	80137f0 <USBD_LL_StallEP+0x5c>
 80137c2:	a201      	add	r2, pc, #4	; (adr r2, 80137c8 <USBD_LL_StallEP+0x34>)
 80137c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137c8:	080137d9 	.word	0x080137d9
 80137cc:	080137df 	.word	0x080137df
 80137d0:	080137e5 	.word	0x080137e5
 80137d4:	080137eb 	.word	0x080137eb
    case HAL_OK :
      usb_status = USBD_OK;
 80137d8:	2300      	movs	r3, #0
 80137da:	73fb      	strb	r3, [r7, #15]
    break;
 80137dc:	e00b      	b.n	80137f6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80137de:	2303      	movs	r3, #3
 80137e0:	73fb      	strb	r3, [r7, #15]
    break;
 80137e2:	e008      	b.n	80137f6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80137e4:	2301      	movs	r3, #1
 80137e6:	73fb      	strb	r3, [r7, #15]
    break;
 80137e8:	e005      	b.n	80137f6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80137ea:	2303      	movs	r3, #3
 80137ec:	73fb      	strb	r3, [r7, #15]
    break;
 80137ee:	e002      	b.n	80137f6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80137f0:	2303      	movs	r3, #3
 80137f2:	73fb      	strb	r3, [r7, #15]
    break;
 80137f4:	bf00      	nop
  }
  return usb_status;
 80137f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80137f8:	4618      	mov	r0, r3
 80137fa:	3710      	adds	r7, #16
 80137fc:	46bd      	mov	sp, r7
 80137fe:	bd80      	pop	{r7, pc}

08013800 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013800:	b580      	push	{r7, lr}
 8013802:	b084      	sub	sp, #16
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
 8013808:	460b      	mov	r3, r1
 801380a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801380c:	2300      	movs	r3, #0
 801380e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013810:	2300      	movs	r3, #0
 8013812:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801381a:	78fa      	ldrb	r2, [r7, #3]
 801381c:	4611      	mov	r1, r2
 801381e:	4618      	mov	r0, r3
 8013820:	f7f7 f831 	bl	800a886 <HAL_PCD_EP_ClrStall>
 8013824:	4603      	mov	r3, r0
 8013826:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013828:	7bbb      	ldrb	r3, [r7, #14]
 801382a:	2b03      	cmp	r3, #3
 801382c:	d816      	bhi.n	801385c <USBD_LL_ClearStallEP+0x5c>
 801382e:	a201      	add	r2, pc, #4	; (adr r2, 8013834 <USBD_LL_ClearStallEP+0x34>)
 8013830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013834:	08013845 	.word	0x08013845
 8013838:	0801384b 	.word	0x0801384b
 801383c:	08013851 	.word	0x08013851
 8013840:	08013857 	.word	0x08013857
    case HAL_OK :
      usb_status = USBD_OK;
 8013844:	2300      	movs	r3, #0
 8013846:	73fb      	strb	r3, [r7, #15]
    break;
 8013848:	e00b      	b.n	8013862 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801384a:	2303      	movs	r3, #3
 801384c:	73fb      	strb	r3, [r7, #15]
    break;
 801384e:	e008      	b.n	8013862 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013850:	2301      	movs	r3, #1
 8013852:	73fb      	strb	r3, [r7, #15]
    break;
 8013854:	e005      	b.n	8013862 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013856:	2303      	movs	r3, #3
 8013858:	73fb      	strb	r3, [r7, #15]
    break;
 801385a:	e002      	b.n	8013862 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801385c:	2303      	movs	r3, #3
 801385e:	73fb      	strb	r3, [r7, #15]
    break;
 8013860:	bf00      	nop
  }
  return usb_status;
 8013862:	7bfb      	ldrb	r3, [r7, #15]
}
 8013864:	4618      	mov	r0, r3
 8013866:	3710      	adds	r7, #16
 8013868:	46bd      	mov	sp, r7
 801386a:	bd80      	pop	{r7, pc}

0801386c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801386c:	b480      	push	{r7}
 801386e:	b085      	sub	sp, #20
 8013870:	af00      	add	r7, sp, #0
 8013872:	6078      	str	r0, [r7, #4]
 8013874:	460b      	mov	r3, r1
 8013876:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801387e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013880:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013884:	2b00      	cmp	r3, #0
 8013886:	da0b      	bge.n	80138a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013888:	78fb      	ldrb	r3, [r7, #3]
 801388a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801388e:	68f9      	ldr	r1, [r7, #12]
 8013890:	4613      	mov	r3, r2
 8013892:	00db      	lsls	r3, r3, #3
 8013894:	4413      	add	r3, r2
 8013896:	009b      	lsls	r3, r3, #2
 8013898:	440b      	add	r3, r1
 801389a:	333e      	adds	r3, #62	; 0x3e
 801389c:	781b      	ldrb	r3, [r3, #0]
 801389e:	e00b      	b.n	80138b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80138a0:	78fb      	ldrb	r3, [r7, #3]
 80138a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80138a6:	68f9      	ldr	r1, [r7, #12]
 80138a8:	4613      	mov	r3, r2
 80138aa:	00db      	lsls	r3, r3, #3
 80138ac:	4413      	add	r3, r2
 80138ae:	009b      	lsls	r3, r3, #2
 80138b0:	440b      	add	r3, r1
 80138b2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80138b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80138b8:	4618      	mov	r0, r3
 80138ba:	3714      	adds	r7, #20
 80138bc:	46bd      	mov	sp, r7
 80138be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c2:	4770      	bx	lr

080138c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b084      	sub	sp, #16
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
 80138cc:	460b      	mov	r3, r1
 80138ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80138d0:	2300      	movs	r3, #0
 80138d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80138d4:	2300      	movs	r3, #0
 80138d6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80138de:	78fa      	ldrb	r2, [r7, #3]
 80138e0:	4611      	mov	r1, r2
 80138e2:	4618      	mov	r0, r3
 80138e4:	f7f6 fe03 	bl	800a4ee <HAL_PCD_SetAddress>
 80138e8:	4603      	mov	r3, r0
 80138ea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80138ec:	7bbb      	ldrb	r3, [r7, #14]
 80138ee:	2b03      	cmp	r3, #3
 80138f0:	d816      	bhi.n	8013920 <USBD_LL_SetUSBAddress+0x5c>
 80138f2:	a201      	add	r2, pc, #4	; (adr r2, 80138f8 <USBD_LL_SetUSBAddress+0x34>)
 80138f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138f8:	08013909 	.word	0x08013909
 80138fc:	0801390f 	.word	0x0801390f
 8013900:	08013915 	.word	0x08013915
 8013904:	0801391b 	.word	0x0801391b
    case HAL_OK :
      usb_status = USBD_OK;
 8013908:	2300      	movs	r3, #0
 801390a:	73fb      	strb	r3, [r7, #15]
    break;
 801390c:	e00b      	b.n	8013926 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801390e:	2303      	movs	r3, #3
 8013910:	73fb      	strb	r3, [r7, #15]
    break;
 8013912:	e008      	b.n	8013926 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013914:	2301      	movs	r3, #1
 8013916:	73fb      	strb	r3, [r7, #15]
    break;
 8013918:	e005      	b.n	8013926 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801391a:	2303      	movs	r3, #3
 801391c:	73fb      	strb	r3, [r7, #15]
    break;
 801391e:	e002      	b.n	8013926 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8013920:	2303      	movs	r3, #3
 8013922:	73fb      	strb	r3, [r7, #15]
    break;
 8013924:	bf00      	nop
  }
  return usb_status;
 8013926:	7bfb      	ldrb	r3, [r7, #15]
}
 8013928:	4618      	mov	r0, r3
 801392a:	3710      	adds	r7, #16
 801392c:	46bd      	mov	sp, r7
 801392e:	bd80      	pop	{r7, pc}

08013930 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b086      	sub	sp, #24
 8013934:	af00      	add	r7, sp, #0
 8013936:	60f8      	str	r0, [r7, #12]
 8013938:	607a      	str	r2, [r7, #4]
 801393a:	603b      	str	r3, [r7, #0]
 801393c:	460b      	mov	r3, r1
 801393e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013940:	2300      	movs	r3, #0
 8013942:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013944:	2300      	movs	r3, #0
 8013946:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801394e:	7af9      	ldrb	r1, [r7, #11]
 8013950:	683b      	ldr	r3, [r7, #0]
 8013952:	687a      	ldr	r2, [r7, #4]
 8013954:	f7f6 fef8 	bl	800a748 <HAL_PCD_EP_Transmit>
 8013958:	4603      	mov	r3, r0
 801395a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 801395c:	7dbb      	ldrb	r3, [r7, #22]
 801395e:	2b03      	cmp	r3, #3
 8013960:	d816      	bhi.n	8013990 <USBD_LL_Transmit+0x60>
 8013962:	a201      	add	r2, pc, #4	; (adr r2, 8013968 <USBD_LL_Transmit+0x38>)
 8013964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013968:	08013979 	.word	0x08013979
 801396c:	0801397f 	.word	0x0801397f
 8013970:	08013985 	.word	0x08013985
 8013974:	0801398b 	.word	0x0801398b
    case HAL_OK :
      usb_status = USBD_OK;
 8013978:	2300      	movs	r3, #0
 801397a:	75fb      	strb	r3, [r7, #23]
    break;
 801397c:	e00b      	b.n	8013996 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801397e:	2303      	movs	r3, #3
 8013980:	75fb      	strb	r3, [r7, #23]
    break;
 8013982:	e008      	b.n	8013996 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013984:	2301      	movs	r3, #1
 8013986:	75fb      	strb	r3, [r7, #23]
    break;
 8013988:	e005      	b.n	8013996 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801398a:	2303      	movs	r3, #3
 801398c:	75fb      	strb	r3, [r7, #23]
    break;
 801398e:	e002      	b.n	8013996 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8013990:	2303      	movs	r3, #3
 8013992:	75fb      	strb	r3, [r7, #23]
    break;
 8013994:	bf00      	nop
  }
  return usb_status;
 8013996:	7dfb      	ldrb	r3, [r7, #23]
}
 8013998:	4618      	mov	r0, r3
 801399a:	3718      	adds	r7, #24
 801399c:	46bd      	mov	sp, r7
 801399e:	bd80      	pop	{r7, pc}

080139a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b086      	sub	sp, #24
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	60f8      	str	r0, [r7, #12]
 80139a8:	607a      	str	r2, [r7, #4]
 80139aa:	603b      	str	r3, [r7, #0]
 80139ac:	460b      	mov	r3, r1
 80139ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80139b0:	2300      	movs	r3, #0
 80139b2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80139b4:	2300      	movs	r3, #0
 80139b6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80139be:	7af9      	ldrb	r1, [r7, #11]
 80139c0:	683b      	ldr	r3, [r7, #0]
 80139c2:	687a      	ldr	r2, [r7, #4]
 80139c4:	f7f6 fe6a 	bl	800a69c <HAL_PCD_EP_Receive>
 80139c8:	4603      	mov	r3, r0
 80139ca:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80139cc:	7dbb      	ldrb	r3, [r7, #22]
 80139ce:	2b03      	cmp	r3, #3
 80139d0:	d816      	bhi.n	8013a00 <USBD_LL_PrepareReceive+0x60>
 80139d2:	a201      	add	r2, pc, #4	; (adr r2, 80139d8 <USBD_LL_PrepareReceive+0x38>)
 80139d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139d8:	080139e9 	.word	0x080139e9
 80139dc:	080139ef 	.word	0x080139ef
 80139e0:	080139f5 	.word	0x080139f5
 80139e4:	080139fb 	.word	0x080139fb
    case HAL_OK :
      usb_status = USBD_OK;
 80139e8:	2300      	movs	r3, #0
 80139ea:	75fb      	strb	r3, [r7, #23]
    break;
 80139ec:	e00b      	b.n	8013a06 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80139ee:	2303      	movs	r3, #3
 80139f0:	75fb      	strb	r3, [r7, #23]
    break;
 80139f2:	e008      	b.n	8013a06 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80139f4:	2301      	movs	r3, #1
 80139f6:	75fb      	strb	r3, [r7, #23]
    break;
 80139f8:	e005      	b.n	8013a06 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80139fa:	2303      	movs	r3, #3
 80139fc:	75fb      	strb	r3, [r7, #23]
    break;
 80139fe:	e002      	b.n	8013a06 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8013a00:	2303      	movs	r3, #3
 8013a02:	75fb      	strb	r3, [r7, #23]
    break;
 8013a04:	bf00      	nop
  }
  return usb_status;
 8013a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a08:	4618      	mov	r0, r3
 8013a0a:	3718      	adds	r7, #24
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	bd80      	pop	{r7, pc}

08013a10 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b082      	sub	sp, #8
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	6078      	str	r0, [r7, #4]
 8013a18:	460b      	mov	r3, r1
 8013a1a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013a22:	78fa      	ldrb	r2, [r7, #3]
 8013a24:	4611      	mov	r1, r2
 8013a26:	4618      	mov	r0, r3
 8013a28:	f7f6 fe76 	bl	800a718 <HAL_PCD_EP_GetRxCount>
 8013a2c:	4603      	mov	r3, r0
}
 8013a2e:	4618      	mov	r0, r3
 8013a30:	3708      	adds	r7, #8
 8013a32:	46bd      	mov	sp, r7
 8013a34:	bd80      	pop	{r7, pc}
	...

08013a38 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8013a38:	b580      	push	{r7, lr}
 8013a3a:	b082      	sub	sp, #8
 8013a3c:	af00      	add	r7, sp, #0
 8013a3e:	6078      	str	r0, [r7, #4]
 8013a40:	460b      	mov	r3, r1
 8013a42:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8013a44:	78fb      	ldrb	r3, [r7, #3]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d002      	beq.n	8013a50 <HAL_PCDEx_LPM_Callback+0x18>
 8013a4a:	2b01      	cmp	r3, #1
 8013a4c:	d01f      	beq.n	8013a8e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8013a4e:	e03b      	b.n	8013ac8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	6a1b      	ldr	r3, [r3, #32]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d007      	beq.n	8013a68 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8013a58:	f000 f854 	bl	8013b04 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013a5c:	4b1c      	ldr	r3, [pc, #112]	; (8013ad0 <HAL_PCDEx_LPM_Callback+0x98>)
 8013a5e:	691b      	ldr	r3, [r3, #16]
 8013a60:	4a1b      	ldr	r2, [pc, #108]	; (8013ad0 <HAL_PCDEx_LPM_Callback+0x98>)
 8013a62:	f023 0306 	bic.w	r3, r3, #6
 8013a66:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	687a      	ldr	r2, [r7, #4]
 8013a74:	6812      	ldr	r2, [r2, #0]
 8013a76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013a7a:	f023 0301 	bic.w	r3, r3, #1
 8013a7e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013a86:	4618      	mov	r0, r3
 8013a88:	f7fe fb08 	bl	801209c <USBD_LL_Resume>
    break;
 8013a8c:	e01c      	b.n	8013ac8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	687a      	ldr	r2, [r7, #4]
 8013a9a:	6812      	ldr	r2, [r2, #0]
 8013a9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013aa0:	f043 0301 	orr.w	r3, r3, #1
 8013aa4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013aac:	4618      	mov	r0, r3
 8013aae:	f7fe fadf 	bl	8012070 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	6a1b      	ldr	r3, [r3, #32]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d005      	beq.n	8013ac6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013aba:	4b05      	ldr	r3, [pc, #20]	; (8013ad0 <HAL_PCDEx_LPM_Callback+0x98>)
 8013abc:	691b      	ldr	r3, [r3, #16]
 8013abe:	4a04      	ldr	r2, [pc, #16]	; (8013ad0 <HAL_PCDEx_LPM_Callback+0x98>)
 8013ac0:	f043 0306 	orr.w	r3, r3, #6
 8013ac4:	6113      	str	r3, [r2, #16]
    break;
 8013ac6:	bf00      	nop
}
 8013ac8:	bf00      	nop
 8013aca:	3708      	adds	r7, #8
 8013acc:	46bd      	mov	sp, r7
 8013ace:	bd80      	pop	{r7, pc}
 8013ad0:	e000ed00 	.word	0xe000ed00

08013ad4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013ad4:	b480      	push	{r7}
 8013ad6:	b083      	sub	sp, #12
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013adc:	4b03      	ldr	r3, [pc, #12]	; (8013aec <USBD_static_malloc+0x18>)
}
 8013ade:	4618      	mov	r0, r3
 8013ae0:	370c      	adds	r7, #12
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae8:	4770      	bx	lr
 8013aea:	bf00      	nop
 8013aec:	20002a80 	.word	0x20002a80

08013af0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013af0:	b480      	push	{r7}
 8013af2:	b083      	sub	sp, #12
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]

}
 8013af8:	bf00      	nop
 8013afa:	370c      	adds	r7, #12
 8013afc:	46bd      	mov	sp, r7
 8013afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b02:	4770      	bx	lr

08013b04 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8013b04:	b580      	push	{r7, lr}
 8013b06:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8013b08:	f7ed fe2c 	bl	8001764 <SystemClock_Config>
}
 8013b0c:	bf00      	nop
 8013b0e:	bd80      	pop	{r7, pc}

08013b10 <__errno>:
 8013b10:	4b01      	ldr	r3, [pc, #4]	; (8013b18 <__errno+0x8>)
 8013b12:	6818      	ldr	r0, [r3, #0]
 8013b14:	4770      	bx	lr
 8013b16:	bf00      	nop
 8013b18:	200005e0 	.word	0x200005e0

08013b1c <__libc_init_array>:
 8013b1c:	b570      	push	{r4, r5, r6, lr}
 8013b1e:	4d0d      	ldr	r5, [pc, #52]	; (8013b54 <__libc_init_array+0x38>)
 8013b20:	4c0d      	ldr	r4, [pc, #52]	; (8013b58 <__libc_init_array+0x3c>)
 8013b22:	1b64      	subs	r4, r4, r5
 8013b24:	10a4      	asrs	r4, r4, #2
 8013b26:	2600      	movs	r6, #0
 8013b28:	42a6      	cmp	r6, r4
 8013b2a:	d109      	bne.n	8013b40 <__libc_init_array+0x24>
 8013b2c:	4d0b      	ldr	r5, [pc, #44]	; (8013b5c <__libc_init_array+0x40>)
 8013b2e:	4c0c      	ldr	r4, [pc, #48]	; (8013b60 <__libc_init_array+0x44>)
 8013b30:	f001 f83a 	bl	8014ba8 <_init>
 8013b34:	1b64      	subs	r4, r4, r5
 8013b36:	10a4      	asrs	r4, r4, #2
 8013b38:	2600      	movs	r6, #0
 8013b3a:	42a6      	cmp	r6, r4
 8013b3c:	d105      	bne.n	8013b4a <__libc_init_array+0x2e>
 8013b3e:	bd70      	pop	{r4, r5, r6, pc}
 8013b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8013b44:	4798      	blx	r3
 8013b46:	3601      	adds	r6, #1
 8013b48:	e7ee      	b.n	8013b28 <__libc_init_array+0xc>
 8013b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8013b4e:	4798      	blx	r3
 8013b50:	3601      	adds	r6, #1
 8013b52:	e7f2      	b.n	8013b3a <__libc_init_array+0x1e>
 8013b54:	08014de0 	.word	0x08014de0
 8013b58:	08014de0 	.word	0x08014de0
 8013b5c:	08014de0 	.word	0x08014de0
 8013b60:	08014de4 	.word	0x08014de4

08013b64 <memcpy>:
 8013b64:	440a      	add	r2, r1
 8013b66:	4291      	cmp	r1, r2
 8013b68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013b6c:	d100      	bne.n	8013b70 <memcpy+0xc>
 8013b6e:	4770      	bx	lr
 8013b70:	b510      	push	{r4, lr}
 8013b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013b76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013b7a:	4291      	cmp	r1, r2
 8013b7c:	d1f9      	bne.n	8013b72 <memcpy+0xe>
 8013b7e:	bd10      	pop	{r4, pc}

08013b80 <memset>:
 8013b80:	4402      	add	r2, r0
 8013b82:	4603      	mov	r3, r0
 8013b84:	4293      	cmp	r3, r2
 8013b86:	d100      	bne.n	8013b8a <memset+0xa>
 8013b88:	4770      	bx	lr
 8013b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8013b8e:	e7f9      	b.n	8013b84 <memset+0x4>

08013b90 <_free_r>:
 8013b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013b92:	2900      	cmp	r1, #0
 8013b94:	d044      	beq.n	8013c20 <_free_r+0x90>
 8013b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b9a:	9001      	str	r0, [sp, #4]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	f1a1 0404 	sub.w	r4, r1, #4
 8013ba2:	bfb8      	it	lt
 8013ba4:	18e4      	addlt	r4, r4, r3
 8013ba6:	f000 fc59 	bl	801445c <__malloc_lock>
 8013baa:	4a1e      	ldr	r2, [pc, #120]	; (8013c24 <_free_r+0x94>)
 8013bac:	9801      	ldr	r0, [sp, #4]
 8013bae:	6813      	ldr	r3, [r2, #0]
 8013bb0:	b933      	cbnz	r3, 8013bc0 <_free_r+0x30>
 8013bb2:	6063      	str	r3, [r4, #4]
 8013bb4:	6014      	str	r4, [r2, #0]
 8013bb6:	b003      	add	sp, #12
 8013bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013bbc:	f000 bc54 	b.w	8014468 <__malloc_unlock>
 8013bc0:	42a3      	cmp	r3, r4
 8013bc2:	d908      	bls.n	8013bd6 <_free_r+0x46>
 8013bc4:	6825      	ldr	r5, [r4, #0]
 8013bc6:	1961      	adds	r1, r4, r5
 8013bc8:	428b      	cmp	r3, r1
 8013bca:	bf01      	itttt	eq
 8013bcc:	6819      	ldreq	r1, [r3, #0]
 8013bce:	685b      	ldreq	r3, [r3, #4]
 8013bd0:	1949      	addeq	r1, r1, r5
 8013bd2:	6021      	streq	r1, [r4, #0]
 8013bd4:	e7ed      	b.n	8013bb2 <_free_r+0x22>
 8013bd6:	461a      	mov	r2, r3
 8013bd8:	685b      	ldr	r3, [r3, #4]
 8013bda:	b10b      	cbz	r3, 8013be0 <_free_r+0x50>
 8013bdc:	42a3      	cmp	r3, r4
 8013bde:	d9fa      	bls.n	8013bd6 <_free_r+0x46>
 8013be0:	6811      	ldr	r1, [r2, #0]
 8013be2:	1855      	adds	r5, r2, r1
 8013be4:	42a5      	cmp	r5, r4
 8013be6:	d10b      	bne.n	8013c00 <_free_r+0x70>
 8013be8:	6824      	ldr	r4, [r4, #0]
 8013bea:	4421      	add	r1, r4
 8013bec:	1854      	adds	r4, r2, r1
 8013bee:	42a3      	cmp	r3, r4
 8013bf0:	6011      	str	r1, [r2, #0]
 8013bf2:	d1e0      	bne.n	8013bb6 <_free_r+0x26>
 8013bf4:	681c      	ldr	r4, [r3, #0]
 8013bf6:	685b      	ldr	r3, [r3, #4]
 8013bf8:	6053      	str	r3, [r2, #4]
 8013bfa:	4421      	add	r1, r4
 8013bfc:	6011      	str	r1, [r2, #0]
 8013bfe:	e7da      	b.n	8013bb6 <_free_r+0x26>
 8013c00:	d902      	bls.n	8013c08 <_free_r+0x78>
 8013c02:	230c      	movs	r3, #12
 8013c04:	6003      	str	r3, [r0, #0]
 8013c06:	e7d6      	b.n	8013bb6 <_free_r+0x26>
 8013c08:	6825      	ldr	r5, [r4, #0]
 8013c0a:	1961      	adds	r1, r4, r5
 8013c0c:	428b      	cmp	r3, r1
 8013c0e:	bf04      	itt	eq
 8013c10:	6819      	ldreq	r1, [r3, #0]
 8013c12:	685b      	ldreq	r3, [r3, #4]
 8013c14:	6063      	str	r3, [r4, #4]
 8013c16:	bf04      	itt	eq
 8013c18:	1949      	addeq	r1, r1, r5
 8013c1a:	6021      	streq	r1, [r4, #0]
 8013c1c:	6054      	str	r4, [r2, #4]
 8013c1e:	e7ca      	b.n	8013bb6 <_free_r+0x26>
 8013c20:	b003      	add	sp, #12
 8013c22:	bd30      	pop	{r4, r5, pc}
 8013c24:	20002ca0 	.word	0x20002ca0

08013c28 <sbrk_aligned>:
 8013c28:	b570      	push	{r4, r5, r6, lr}
 8013c2a:	4e0e      	ldr	r6, [pc, #56]	; (8013c64 <sbrk_aligned+0x3c>)
 8013c2c:	460c      	mov	r4, r1
 8013c2e:	6831      	ldr	r1, [r6, #0]
 8013c30:	4605      	mov	r5, r0
 8013c32:	b911      	cbnz	r1, 8013c3a <sbrk_aligned+0x12>
 8013c34:	f000 f91a 	bl	8013e6c <_sbrk_r>
 8013c38:	6030      	str	r0, [r6, #0]
 8013c3a:	4621      	mov	r1, r4
 8013c3c:	4628      	mov	r0, r5
 8013c3e:	f000 f915 	bl	8013e6c <_sbrk_r>
 8013c42:	1c43      	adds	r3, r0, #1
 8013c44:	d00a      	beq.n	8013c5c <sbrk_aligned+0x34>
 8013c46:	1cc4      	adds	r4, r0, #3
 8013c48:	f024 0403 	bic.w	r4, r4, #3
 8013c4c:	42a0      	cmp	r0, r4
 8013c4e:	d007      	beq.n	8013c60 <sbrk_aligned+0x38>
 8013c50:	1a21      	subs	r1, r4, r0
 8013c52:	4628      	mov	r0, r5
 8013c54:	f000 f90a 	bl	8013e6c <_sbrk_r>
 8013c58:	3001      	adds	r0, #1
 8013c5a:	d101      	bne.n	8013c60 <sbrk_aligned+0x38>
 8013c5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013c60:	4620      	mov	r0, r4
 8013c62:	bd70      	pop	{r4, r5, r6, pc}
 8013c64:	20002ca4 	.word	0x20002ca4

08013c68 <_malloc_r>:
 8013c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c6c:	1ccd      	adds	r5, r1, #3
 8013c6e:	f025 0503 	bic.w	r5, r5, #3
 8013c72:	3508      	adds	r5, #8
 8013c74:	2d0c      	cmp	r5, #12
 8013c76:	bf38      	it	cc
 8013c78:	250c      	movcc	r5, #12
 8013c7a:	2d00      	cmp	r5, #0
 8013c7c:	4607      	mov	r7, r0
 8013c7e:	db01      	blt.n	8013c84 <_malloc_r+0x1c>
 8013c80:	42a9      	cmp	r1, r5
 8013c82:	d905      	bls.n	8013c90 <_malloc_r+0x28>
 8013c84:	230c      	movs	r3, #12
 8013c86:	603b      	str	r3, [r7, #0]
 8013c88:	2600      	movs	r6, #0
 8013c8a:	4630      	mov	r0, r6
 8013c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c90:	4e2e      	ldr	r6, [pc, #184]	; (8013d4c <_malloc_r+0xe4>)
 8013c92:	f000 fbe3 	bl	801445c <__malloc_lock>
 8013c96:	6833      	ldr	r3, [r6, #0]
 8013c98:	461c      	mov	r4, r3
 8013c9a:	bb34      	cbnz	r4, 8013cea <_malloc_r+0x82>
 8013c9c:	4629      	mov	r1, r5
 8013c9e:	4638      	mov	r0, r7
 8013ca0:	f7ff ffc2 	bl	8013c28 <sbrk_aligned>
 8013ca4:	1c43      	adds	r3, r0, #1
 8013ca6:	4604      	mov	r4, r0
 8013ca8:	d14d      	bne.n	8013d46 <_malloc_r+0xde>
 8013caa:	6834      	ldr	r4, [r6, #0]
 8013cac:	4626      	mov	r6, r4
 8013cae:	2e00      	cmp	r6, #0
 8013cb0:	d140      	bne.n	8013d34 <_malloc_r+0xcc>
 8013cb2:	6823      	ldr	r3, [r4, #0]
 8013cb4:	4631      	mov	r1, r6
 8013cb6:	4638      	mov	r0, r7
 8013cb8:	eb04 0803 	add.w	r8, r4, r3
 8013cbc:	f000 f8d6 	bl	8013e6c <_sbrk_r>
 8013cc0:	4580      	cmp	r8, r0
 8013cc2:	d13a      	bne.n	8013d3a <_malloc_r+0xd2>
 8013cc4:	6821      	ldr	r1, [r4, #0]
 8013cc6:	3503      	adds	r5, #3
 8013cc8:	1a6d      	subs	r5, r5, r1
 8013cca:	f025 0503 	bic.w	r5, r5, #3
 8013cce:	3508      	adds	r5, #8
 8013cd0:	2d0c      	cmp	r5, #12
 8013cd2:	bf38      	it	cc
 8013cd4:	250c      	movcc	r5, #12
 8013cd6:	4629      	mov	r1, r5
 8013cd8:	4638      	mov	r0, r7
 8013cda:	f7ff ffa5 	bl	8013c28 <sbrk_aligned>
 8013cde:	3001      	adds	r0, #1
 8013ce0:	d02b      	beq.n	8013d3a <_malloc_r+0xd2>
 8013ce2:	6823      	ldr	r3, [r4, #0]
 8013ce4:	442b      	add	r3, r5
 8013ce6:	6023      	str	r3, [r4, #0]
 8013ce8:	e00e      	b.n	8013d08 <_malloc_r+0xa0>
 8013cea:	6822      	ldr	r2, [r4, #0]
 8013cec:	1b52      	subs	r2, r2, r5
 8013cee:	d41e      	bmi.n	8013d2e <_malloc_r+0xc6>
 8013cf0:	2a0b      	cmp	r2, #11
 8013cf2:	d916      	bls.n	8013d22 <_malloc_r+0xba>
 8013cf4:	1961      	adds	r1, r4, r5
 8013cf6:	42a3      	cmp	r3, r4
 8013cf8:	6025      	str	r5, [r4, #0]
 8013cfa:	bf18      	it	ne
 8013cfc:	6059      	strne	r1, [r3, #4]
 8013cfe:	6863      	ldr	r3, [r4, #4]
 8013d00:	bf08      	it	eq
 8013d02:	6031      	streq	r1, [r6, #0]
 8013d04:	5162      	str	r2, [r4, r5]
 8013d06:	604b      	str	r3, [r1, #4]
 8013d08:	4638      	mov	r0, r7
 8013d0a:	f104 060b 	add.w	r6, r4, #11
 8013d0e:	f000 fbab 	bl	8014468 <__malloc_unlock>
 8013d12:	f026 0607 	bic.w	r6, r6, #7
 8013d16:	1d23      	adds	r3, r4, #4
 8013d18:	1af2      	subs	r2, r6, r3
 8013d1a:	d0b6      	beq.n	8013c8a <_malloc_r+0x22>
 8013d1c:	1b9b      	subs	r3, r3, r6
 8013d1e:	50a3      	str	r3, [r4, r2]
 8013d20:	e7b3      	b.n	8013c8a <_malloc_r+0x22>
 8013d22:	6862      	ldr	r2, [r4, #4]
 8013d24:	42a3      	cmp	r3, r4
 8013d26:	bf0c      	ite	eq
 8013d28:	6032      	streq	r2, [r6, #0]
 8013d2a:	605a      	strne	r2, [r3, #4]
 8013d2c:	e7ec      	b.n	8013d08 <_malloc_r+0xa0>
 8013d2e:	4623      	mov	r3, r4
 8013d30:	6864      	ldr	r4, [r4, #4]
 8013d32:	e7b2      	b.n	8013c9a <_malloc_r+0x32>
 8013d34:	4634      	mov	r4, r6
 8013d36:	6876      	ldr	r6, [r6, #4]
 8013d38:	e7b9      	b.n	8013cae <_malloc_r+0x46>
 8013d3a:	230c      	movs	r3, #12
 8013d3c:	603b      	str	r3, [r7, #0]
 8013d3e:	4638      	mov	r0, r7
 8013d40:	f000 fb92 	bl	8014468 <__malloc_unlock>
 8013d44:	e7a1      	b.n	8013c8a <_malloc_r+0x22>
 8013d46:	6025      	str	r5, [r4, #0]
 8013d48:	e7de      	b.n	8013d08 <_malloc_r+0xa0>
 8013d4a:	bf00      	nop
 8013d4c:	20002ca0 	.word	0x20002ca0

08013d50 <iprintf>:
 8013d50:	b40f      	push	{r0, r1, r2, r3}
 8013d52:	4b0a      	ldr	r3, [pc, #40]	; (8013d7c <iprintf+0x2c>)
 8013d54:	b513      	push	{r0, r1, r4, lr}
 8013d56:	681c      	ldr	r4, [r3, #0]
 8013d58:	b124      	cbz	r4, 8013d64 <iprintf+0x14>
 8013d5a:	69a3      	ldr	r3, [r4, #24]
 8013d5c:	b913      	cbnz	r3, 8013d64 <iprintf+0x14>
 8013d5e:	4620      	mov	r0, r4
 8013d60:	f000 fa76 	bl	8014250 <__sinit>
 8013d64:	ab05      	add	r3, sp, #20
 8013d66:	9a04      	ldr	r2, [sp, #16]
 8013d68:	68a1      	ldr	r1, [r4, #8]
 8013d6a:	9301      	str	r3, [sp, #4]
 8013d6c:	4620      	mov	r0, r4
 8013d6e:	f000 fbab 	bl	80144c8 <_vfiprintf_r>
 8013d72:	b002      	add	sp, #8
 8013d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d78:	b004      	add	sp, #16
 8013d7a:	4770      	bx	lr
 8013d7c:	200005e0 	.word	0x200005e0

08013d80 <_puts_r>:
 8013d80:	b570      	push	{r4, r5, r6, lr}
 8013d82:	460e      	mov	r6, r1
 8013d84:	4605      	mov	r5, r0
 8013d86:	b118      	cbz	r0, 8013d90 <_puts_r+0x10>
 8013d88:	6983      	ldr	r3, [r0, #24]
 8013d8a:	b90b      	cbnz	r3, 8013d90 <_puts_r+0x10>
 8013d8c:	f000 fa60 	bl	8014250 <__sinit>
 8013d90:	69ab      	ldr	r3, [r5, #24]
 8013d92:	68ac      	ldr	r4, [r5, #8]
 8013d94:	b913      	cbnz	r3, 8013d9c <_puts_r+0x1c>
 8013d96:	4628      	mov	r0, r5
 8013d98:	f000 fa5a 	bl	8014250 <__sinit>
 8013d9c:	4b2c      	ldr	r3, [pc, #176]	; (8013e50 <_puts_r+0xd0>)
 8013d9e:	429c      	cmp	r4, r3
 8013da0:	d120      	bne.n	8013de4 <_puts_r+0x64>
 8013da2:	686c      	ldr	r4, [r5, #4]
 8013da4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013da6:	07db      	lsls	r3, r3, #31
 8013da8:	d405      	bmi.n	8013db6 <_puts_r+0x36>
 8013daa:	89a3      	ldrh	r3, [r4, #12]
 8013dac:	0598      	lsls	r0, r3, #22
 8013dae:	d402      	bmi.n	8013db6 <_puts_r+0x36>
 8013db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013db2:	f000 faeb 	bl	801438c <__retarget_lock_acquire_recursive>
 8013db6:	89a3      	ldrh	r3, [r4, #12]
 8013db8:	0719      	lsls	r1, r3, #28
 8013dba:	d51d      	bpl.n	8013df8 <_puts_r+0x78>
 8013dbc:	6923      	ldr	r3, [r4, #16]
 8013dbe:	b1db      	cbz	r3, 8013df8 <_puts_r+0x78>
 8013dc0:	3e01      	subs	r6, #1
 8013dc2:	68a3      	ldr	r3, [r4, #8]
 8013dc4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013dc8:	3b01      	subs	r3, #1
 8013dca:	60a3      	str	r3, [r4, #8]
 8013dcc:	bb39      	cbnz	r1, 8013e1e <_puts_r+0x9e>
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	da38      	bge.n	8013e44 <_puts_r+0xc4>
 8013dd2:	4622      	mov	r2, r4
 8013dd4:	210a      	movs	r1, #10
 8013dd6:	4628      	mov	r0, r5
 8013dd8:	f000 f860 	bl	8013e9c <__swbuf_r>
 8013ddc:	3001      	adds	r0, #1
 8013dde:	d011      	beq.n	8013e04 <_puts_r+0x84>
 8013de0:	250a      	movs	r5, #10
 8013de2:	e011      	b.n	8013e08 <_puts_r+0x88>
 8013de4:	4b1b      	ldr	r3, [pc, #108]	; (8013e54 <_puts_r+0xd4>)
 8013de6:	429c      	cmp	r4, r3
 8013de8:	d101      	bne.n	8013dee <_puts_r+0x6e>
 8013dea:	68ac      	ldr	r4, [r5, #8]
 8013dec:	e7da      	b.n	8013da4 <_puts_r+0x24>
 8013dee:	4b1a      	ldr	r3, [pc, #104]	; (8013e58 <_puts_r+0xd8>)
 8013df0:	429c      	cmp	r4, r3
 8013df2:	bf08      	it	eq
 8013df4:	68ec      	ldreq	r4, [r5, #12]
 8013df6:	e7d5      	b.n	8013da4 <_puts_r+0x24>
 8013df8:	4621      	mov	r1, r4
 8013dfa:	4628      	mov	r0, r5
 8013dfc:	f000 f8a0 	bl	8013f40 <__swsetup_r>
 8013e00:	2800      	cmp	r0, #0
 8013e02:	d0dd      	beq.n	8013dc0 <_puts_r+0x40>
 8013e04:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8013e08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e0a:	07da      	lsls	r2, r3, #31
 8013e0c:	d405      	bmi.n	8013e1a <_puts_r+0x9a>
 8013e0e:	89a3      	ldrh	r3, [r4, #12]
 8013e10:	059b      	lsls	r3, r3, #22
 8013e12:	d402      	bmi.n	8013e1a <_puts_r+0x9a>
 8013e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e16:	f000 faba 	bl	801438e <__retarget_lock_release_recursive>
 8013e1a:	4628      	mov	r0, r5
 8013e1c:	bd70      	pop	{r4, r5, r6, pc}
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	da04      	bge.n	8013e2c <_puts_r+0xac>
 8013e22:	69a2      	ldr	r2, [r4, #24]
 8013e24:	429a      	cmp	r2, r3
 8013e26:	dc06      	bgt.n	8013e36 <_puts_r+0xb6>
 8013e28:	290a      	cmp	r1, #10
 8013e2a:	d004      	beq.n	8013e36 <_puts_r+0xb6>
 8013e2c:	6823      	ldr	r3, [r4, #0]
 8013e2e:	1c5a      	adds	r2, r3, #1
 8013e30:	6022      	str	r2, [r4, #0]
 8013e32:	7019      	strb	r1, [r3, #0]
 8013e34:	e7c5      	b.n	8013dc2 <_puts_r+0x42>
 8013e36:	4622      	mov	r2, r4
 8013e38:	4628      	mov	r0, r5
 8013e3a:	f000 f82f 	bl	8013e9c <__swbuf_r>
 8013e3e:	3001      	adds	r0, #1
 8013e40:	d1bf      	bne.n	8013dc2 <_puts_r+0x42>
 8013e42:	e7df      	b.n	8013e04 <_puts_r+0x84>
 8013e44:	6823      	ldr	r3, [r4, #0]
 8013e46:	250a      	movs	r5, #10
 8013e48:	1c5a      	adds	r2, r3, #1
 8013e4a:	6022      	str	r2, [r4, #0]
 8013e4c:	701d      	strb	r5, [r3, #0]
 8013e4e:	e7db      	b.n	8013e08 <_puts_r+0x88>
 8013e50:	08014d64 	.word	0x08014d64
 8013e54:	08014d84 	.word	0x08014d84
 8013e58:	08014d44 	.word	0x08014d44

08013e5c <puts>:
 8013e5c:	4b02      	ldr	r3, [pc, #8]	; (8013e68 <puts+0xc>)
 8013e5e:	4601      	mov	r1, r0
 8013e60:	6818      	ldr	r0, [r3, #0]
 8013e62:	f7ff bf8d 	b.w	8013d80 <_puts_r>
 8013e66:	bf00      	nop
 8013e68:	200005e0 	.word	0x200005e0

08013e6c <_sbrk_r>:
 8013e6c:	b538      	push	{r3, r4, r5, lr}
 8013e6e:	4d06      	ldr	r5, [pc, #24]	; (8013e88 <_sbrk_r+0x1c>)
 8013e70:	2300      	movs	r3, #0
 8013e72:	4604      	mov	r4, r0
 8013e74:	4608      	mov	r0, r1
 8013e76:	602b      	str	r3, [r5, #0]
 8013e78:	f7ee f950 	bl	800211c <_sbrk>
 8013e7c:	1c43      	adds	r3, r0, #1
 8013e7e:	d102      	bne.n	8013e86 <_sbrk_r+0x1a>
 8013e80:	682b      	ldr	r3, [r5, #0]
 8013e82:	b103      	cbz	r3, 8013e86 <_sbrk_r+0x1a>
 8013e84:	6023      	str	r3, [r4, #0]
 8013e86:	bd38      	pop	{r3, r4, r5, pc}
 8013e88:	20002cac 	.word	0x20002cac

08013e8c <strcpy>:
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013e92:	f803 2b01 	strb.w	r2, [r3], #1
 8013e96:	2a00      	cmp	r2, #0
 8013e98:	d1f9      	bne.n	8013e8e <strcpy+0x2>
 8013e9a:	4770      	bx	lr

08013e9c <__swbuf_r>:
 8013e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e9e:	460e      	mov	r6, r1
 8013ea0:	4614      	mov	r4, r2
 8013ea2:	4605      	mov	r5, r0
 8013ea4:	b118      	cbz	r0, 8013eae <__swbuf_r+0x12>
 8013ea6:	6983      	ldr	r3, [r0, #24]
 8013ea8:	b90b      	cbnz	r3, 8013eae <__swbuf_r+0x12>
 8013eaa:	f000 f9d1 	bl	8014250 <__sinit>
 8013eae:	4b21      	ldr	r3, [pc, #132]	; (8013f34 <__swbuf_r+0x98>)
 8013eb0:	429c      	cmp	r4, r3
 8013eb2:	d12b      	bne.n	8013f0c <__swbuf_r+0x70>
 8013eb4:	686c      	ldr	r4, [r5, #4]
 8013eb6:	69a3      	ldr	r3, [r4, #24]
 8013eb8:	60a3      	str	r3, [r4, #8]
 8013eba:	89a3      	ldrh	r3, [r4, #12]
 8013ebc:	071a      	lsls	r2, r3, #28
 8013ebe:	d52f      	bpl.n	8013f20 <__swbuf_r+0x84>
 8013ec0:	6923      	ldr	r3, [r4, #16]
 8013ec2:	b36b      	cbz	r3, 8013f20 <__swbuf_r+0x84>
 8013ec4:	6923      	ldr	r3, [r4, #16]
 8013ec6:	6820      	ldr	r0, [r4, #0]
 8013ec8:	1ac0      	subs	r0, r0, r3
 8013eca:	6963      	ldr	r3, [r4, #20]
 8013ecc:	b2f6      	uxtb	r6, r6
 8013ece:	4283      	cmp	r3, r0
 8013ed0:	4637      	mov	r7, r6
 8013ed2:	dc04      	bgt.n	8013ede <__swbuf_r+0x42>
 8013ed4:	4621      	mov	r1, r4
 8013ed6:	4628      	mov	r0, r5
 8013ed8:	f000 f926 	bl	8014128 <_fflush_r>
 8013edc:	bb30      	cbnz	r0, 8013f2c <__swbuf_r+0x90>
 8013ede:	68a3      	ldr	r3, [r4, #8]
 8013ee0:	3b01      	subs	r3, #1
 8013ee2:	60a3      	str	r3, [r4, #8]
 8013ee4:	6823      	ldr	r3, [r4, #0]
 8013ee6:	1c5a      	adds	r2, r3, #1
 8013ee8:	6022      	str	r2, [r4, #0]
 8013eea:	701e      	strb	r6, [r3, #0]
 8013eec:	6963      	ldr	r3, [r4, #20]
 8013eee:	3001      	adds	r0, #1
 8013ef0:	4283      	cmp	r3, r0
 8013ef2:	d004      	beq.n	8013efe <__swbuf_r+0x62>
 8013ef4:	89a3      	ldrh	r3, [r4, #12]
 8013ef6:	07db      	lsls	r3, r3, #31
 8013ef8:	d506      	bpl.n	8013f08 <__swbuf_r+0x6c>
 8013efa:	2e0a      	cmp	r6, #10
 8013efc:	d104      	bne.n	8013f08 <__swbuf_r+0x6c>
 8013efe:	4621      	mov	r1, r4
 8013f00:	4628      	mov	r0, r5
 8013f02:	f000 f911 	bl	8014128 <_fflush_r>
 8013f06:	b988      	cbnz	r0, 8013f2c <__swbuf_r+0x90>
 8013f08:	4638      	mov	r0, r7
 8013f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f0c:	4b0a      	ldr	r3, [pc, #40]	; (8013f38 <__swbuf_r+0x9c>)
 8013f0e:	429c      	cmp	r4, r3
 8013f10:	d101      	bne.n	8013f16 <__swbuf_r+0x7a>
 8013f12:	68ac      	ldr	r4, [r5, #8]
 8013f14:	e7cf      	b.n	8013eb6 <__swbuf_r+0x1a>
 8013f16:	4b09      	ldr	r3, [pc, #36]	; (8013f3c <__swbuf_r+0xa0>)
 8013f18:	429c      	cmp	r4, r3
 8013f1a:	bf08      	it	eq
 8013f1c:	68ec      	ldreq	r4, [r5, #12]
 8013f1e:	e7ca      	b.n	8013eb6 <__swbuf_r+0x1a>
 8013f20:	4621      	mov	r1, r4
 8013f22:	4628      	mov	r0, r5
 8013f24:	f000 f80c 	bl	8013f40 <__swsetup_r>
 8013f28:	2800      	cmp	r0, #0
 8013f2a:	d0cb      	beq.n	8013ec4 <__swbuf_r+0x28>
 8013f2c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013f30:	e7ea      	b.n	8013f08 <__swbuf_r+0x6c>
 8013f32:	bf00      	nop
 8013f34:	08014d64 	.word	0x08014d64
 8013f38:	08014d84 	.word	0x08014d84
 8013f3c:	08014d44 	.word	0x08014d44

08013f40 <__swsetup_r>:
 8013f40:	4b32      	ldr	r3, [pc, #200]	; (801400c <__swsetup_r+0xcc>)
 8013f42:	b570      	push	{r4, r5, r6, lr}
 8013f44:	681d      	ldr	r5, [r3, #0]
 8013f46:	4606      	mov	r6, r0
 8013f48:	460c      	mov	r4, r1
 8013f4a:	b125      	cbz	r5, 8013f56 <__swsetup_r+0x16>
 8013f4c:	69ab      	ldr	r3, [r5, #24]
 8013f4e:	b913      	cbnz	r3, 8013f56 <__swsetup_r+0x16>
 8013f50:	4628      	mov	r0, r5
 8013f52:	f000 f97d 	bl	8014250 <__sinit>
 8013f56:	4b2e      	ldr	r3, [pc, #184]	; (8014010 <__swsetup_r+0xd0>)
 8013f58:	429c      	cmp	r4, r3
 8013f5a:	d10f      	bne.n	8013f7c <__swsetup_r+0x3c>
 8013f5c:	686c      	ldr	r4, [r5, #4]
 8013f5e:	89a3      	ldrh	r3, [r4, #12]
 8013f60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013f64:	0719      	lsls	r1, r3, #28
 8013f66:	d42c      	bmi.n	8013fc2 <__swsetup_r+0x82>
 8013f68:	06dd      	lsls	r5, r3, #27
 8013f6a:	d411      	bmi.n	8013f90 <__swsetup_r+0x50>
 8013f6c:	2309      	movs	r3, #9
 8013f6e:	6033      	str	r3, [r6, #0]
 8013f70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013f74:	81a3      	strh	r3, [r4, #12]
 8013f76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f7a:	e03e      	b.n	8013ffa <__swsetup_r+0xba>
 8013f7c:	4b25      	ldr	r3, [pc, #148]	; (8014014 <__swsetup_r+0xd4>)
 8013f7e:	429c      	cmp	r4, r3
 8013f80:	d101      	bne.n	8013f86 <__swsetup_r+0x46>
 8013f82:	68ac      	ldr	r4, [r5, #8]
 8013f84:	e7eb      	b.n	8013f5e <__swsetup_r+0x1e>
 8013f86:	4b24      	ldr	r3, [pc, #144]	; (8014018 <__swsetup_r+0xd8>)
 8013f88:	429c      	cmp	r4, r3
 8013f8a:	bf08      	it	eq
 8013f8c:	68ec      	ldreq	r4, [r5, #12]
 8013f8e:	e7e6      	b.n	8013f5e <__swsetup_r+0x1e>
 8013f90:	0758      	lsls	r0, r3, #29
 8013f92:	d512      	bpl.n	8013fba <__swsetup_r+0x7a>
 8013f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013f96:	b141      	cbz	r1, 8013faa <__swsetup_r+0x6a>
 8013f98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f9c:	4299      	cmp	r1, r3
 8013f9e:	d002      	beq.n	8013fa6 <__swsetup_r+0x66>
 8013fa0:	4630      	mov	r0, r6
 8013fa2:	f7ff fdf5 	bl	8013b90 <_free_r>
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	6363      	str	r3, [r4, #52]	; 0x34
 8013faa:	89a3      	ldrh	r3, [r4, #12]
 8013fac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013fb0:	81a3      	strh	r3, [r4, #12]
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	6063      	str	r3, [r4, #4]
 8013fb6:	6923      	ldr	r3, [r4, #16]
 8013fb8:	6023      	str	r3, [r4, #0]
 8013fba:	89a3      	ldrh	r3, [r4, #12]
 8013fbc:	f043 0308 	orr.w	r3, r3, #8
 8013fc0:	81a3      	strh	r3, [r4, #12]
 8013fc2:	6923      	ldr	r3, [r4, #16]
 8013fc4:	b94b      	cbnz	r3, 8013fda <__swsetup_r+0x9a>
 8013fc6:	89a3      	ldrh	r3, [r4, #12]
 8013fc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013fd0:	d003      	beq.n	8013fda <__swsetup_r+0x9a>
 8013fd2:	4621      	mov	r1, r4
 8013fd4:	4630      	mov	r0, r6
 8013fd6:	f000 fa01 	bl	80143dc <__smakebuf_r>
 8013fda:	89a0      	ldrh	r0, [r4, #12]
 8013fdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013fe0:	f010 0301 	ands.w	r3, r0, #1
 8013fe4:	d00a      	beq.n	8013ffc <__swsetup_r+0xbc>
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	60a3      	str	r3, [r4, #8]
 8013fea:	6963      	ldr	r3, [r4, #20]
 8013fec:	425b      	negs	r3, r3
 8013fee:	61a3      	str	r3, [r4, #24]
 8013ff0:	6923      	ldr	r3, [r4, #16]
 8013ff2:	b943      	cbnz	r3, 8014006 <__swsetup_r+0xc6>
 8013ff4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013ff8:	d1ba      	bne.n	8013f70 <__swsetup_r+0x30>
 8013ffa:	bd70      	pop	{r4, r5, r6, pc}
 8013ffc:	0781      	lsls	r1, r0, #30
 8013ffe:	bf58      	it	pl
 8014000:	6963      	ldrpl	r3, [r4, #20]
 8014002:	60a3      	str	r3, [r4, #8]
 8014004:	e7f4      	b.n	8013ff0 <__swsetup_r+0xb0>
 8014006:	2000      	movs	r0, #0
 8014008:	e7f7      	b.n	8013ffa <__swsetup_r+0xba>
 801400a:	bf00      	nop
 801400c:	200005e0 	.word	0x200005e0
 8014010:	08014d64 	.word	0x08014d64
 8014014:	08014d84 	.word	0x08014d84
 8014018:	08014d44 	.word	0x08014d44

0801401c <__sflush_r>:
 801401c:	898a      	ldrh	r2, [r1, #12]
 801401e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014022:	4605      	mov	r5, r0
 8014024:	0710      	lsls	r0, r2, #28
 8014026:	460c      	mov	r4, r1
 8014028:	d458      	bmi.n	80140dc <__sflush_r+0xc0>
 801402a:	684b      	ldr	r3, [r1, #4]
 801402c:	2b00      	cmp	r3, #0
 801402e:	dc05      	bgt.n	801403c <__sflush_r+0x20>
 8014030:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014032:	2b00      	cmp	r3, #0
 8014034:	dc02      	bgt.n	801403c <__sflush_r+0x20>
 8014036:	2000      	movs	r0, #0
 8014038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801403c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801403e:	2e00      	cmp	r6, #0
 8014040:	d0f9      	beq.n	8014036 <__sflush_r+0x1a>
 8014042:	2300      	movs	r3, #0
 8014044:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014048:	682f      	ldr	r7, [r5, #0]
 801404a:	602b      	str	r3, [r5, #0]
 801404c:	d032      	beq.n	80140b4 <__sflush_r+0x98>
 801404e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014050:	89a3      	ldrh	r3, [r4, #12]
 8014052:	075a      	lsls	r2, r3, #29
 8014054:	d505      	bpl.n	8014062 <__sflush_r+0x46>
 8014056:	6863      	ldr	r3, [r4, #4]
 8014058:	1ac0      	subs	r0, r0, r3
 801405a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801405c:	b10b      	cbz	r3, 8014062 <__sflush_r+0x46>
 801405e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014060:	1ac0      	subs	r0, r0, r3
 8014062:	2300      	movs	r3, #0
 8014064:	4602      	mov	r2, r0
 8014066:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014068:	6a21      	ldr	r1, [r4, #32]
 801406a:	4628      	mov	r0, r5
 801406c:	47b0      	blx	r6
 801406e:	1c43      	adds	r3, r0, #1
 8014070:	89a3      	ldrh	r3, [r4, #12]
 8014072:	d106      	bne.n	8014082 <__sflush_r+0x66>
 8014074:	6829      	ldr	r1, [r5, #0]
 8014076:	291d      	cmp	r1, #29
 8014078:	d82c      	bhi.n	80140d4 <__sflush_r+0xb8>
 801407a:	4a2a      	ldr	r2, [pc, #168]	; (8014124 <__sflush_r+0x108>)
 801407c:	40ca      	lsrs	r2, r1
 801407e:	07d6      	lsls	r6, r2, #31
 8014080:	d528      	bpl.n	80140d4 <__sflush_r+0xb8>
 8014082:	2200      	movs	r2, #0
 8014084:	6062      	str	r2, [r4, #4]
 8014086:	04d9      	lsls	r1, r3, #19
 8014088:	6922      	ldr	r2, [r4, #16]
 801408a:	6022      	str	r2, [r4, #0]
 801408c:	d504      	bpl.n	8014098 <__sflush_r+0x7c>
 801408e:	1c42      	adds	r2, r0, #1
 8014090:	d101      	bne.n	8014096 <__sflush_r+0x7a>
 8014092:	682b      	ldr	r3, [r5, #0]
 8014094:	b903      	cbnz	r3, 8014098 <__sflush_r+0x7c>
 8014096:	6560      	str	r0, [r4, #84]	; 0x54
 8014098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801409a:	602f      	str	r7, [r5, #0]
 801409c:	2900      	cmp	r1, #0
 801409e:	d0ca      	beq.n	8014036 <__sflush_r+0x1a>
 80140a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80140a4:	4299      	cmp	r1, r3
 80140a6:	d002      	beq.n	80140ae <__sflush_r+0x92>
 80140a8:	4628      	mov	r0, r5
 80140aa:	f7ff fd71 	bl	8013b90 <_free_r>
 80140ae:	2000      	movs	r0, #0
 80140b0:	6360      	str	r0, [r4, #52]	; 0x34
 80140b2:	e7c1      	b.n	8014038 <__sflush_r+0x1c>
 80140b4:	6a21      	ldr	r1, [r4, #32]
 80140b6:	2301      	movs	r3, #1
 80140b8:	4628      	mov	r0, r5
 80140ba:	47b0      	blx	r6
 80140bc:	1c41      	adds	r1, r0, #1
 80140be:	d1c7      	bne.n	8014050 <__sflush_r+0x34>
 80140c0:	682b      	ldr	r3, [r5, #0]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d0c4      	beq.n	8014050 <__sflush_r+0x34>
 80140c6:	2b1d      	cmp	r3, #29
 80140c8:	d001      	beq.n	80140ce <__sflush_r+0xb2>
 80140ca:	2b16      	cmp	r3, #22
 80140cc:	d101      	bne.n	80140d2 <__sflush_r+0xb6>
 80140ce:	602f      	str	r7, [r5, #0]
 80140d0:	e7b1      	b.n	8014036 <__sflush_r+0x1a>
 80140d2:	89a3      	ldrh	r3, [r4, #12]
 80140d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80140d8:	81a3      	strh	r3, [r4, #12]
 80140da:	e7ad      	b.n	8014038 <__sflush_r+0x1c>
 80140dc:	690f      	ldr	r7, [r1, #16]
 80140de:	2f00      	cmp	r7, #0
 80140e0:	d0a9      	beq.n	8014036 <__sflush_r+0x1a>
 80140e2:	0793      	lsls	r3, r2, #30
 80140e4:	680e      	ldr	r6, [r1, #0]
 80140e6:	bf08      	it	eq
 80140e8:	694b      	ldreq	r3, [r1, #20]
 80140ea:	600f      	str	r7, [r1, #0]
 80140ec:	bf18      	it	ne
 80140ee:	2300      	movne	r3, #0
 80140f0:	eba6 0807 	sub.w	r8, r6, r7
 80140f4:	608b      	str	r3, [r1, #8]
 80140f6:	f1b8 0f00 	cmp.w	r8, #0
 80140fa:	dd9c      	ble.n	8014036 <__sflush_r+0x1a>
 80140fc:	6a21      	ldr	r1, [r4, #32]
 80140fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014100:	4643      	mov	r3, r8
 8014102:	463a      	mov	r2, r7
 8014104:	4628      	mov	r0, r5
 8014106:	47b0      	blx	r6
 8014108:	2800      	cmp	r0, #0
 801410a:	dc06      	bgt.n	801411a <__sflush_r+0xfe>
 801410c:	89a3      	ldrh	r3, [r4, #12]
 801410e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014112:	81a3      	strh	r3, [r4, #12]
 8014114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014118:	e78e      	b.n	8014038 <__sflush_r+0x1c>
 801411a:	4407      	add	r7, r0
 801411c:	eba8 0800 	sub.w	r8, r8, r0
 8014120:	e7e9      	b.n	80140f6 <__sflush_r+0xda>
 8014122:	bf00      	nop
 8014124:	20400001 	.word	0x20400001

08014128 <_fflush_r>:
 8014128:	b538      	push	{r3, r4, r5, lr}
 801412a:	690b      	ldr	r3, [r1, #16]
 801412c:	4605      	mov	r5, r0
 801412e:	460c      	mov	r4, r1
 8014130:	b913      	cbnz	r3, 8014138 <_fflush_r+0x10>
 8014132:	2500      	movs	r5, #0
 8014134:	4628      	mov	r0, r5
 8014136:	bd38      	pop	{r3, r4, r5, pc}
 8014138:	b118      	cbz	r0, 8014142 <_fflush_r+0x1a>
 801413a:	6983      	ldr	r3, [r0, #24]
 801413c:	b90b      	cbnz	r3, 8014142 <_fflush_r+0x1a>
 801413e:	f000 f887 	bl	8014250 <__sinit>
 8014142:	4b14      	ldr	r3, [pc, #80]	; (8014194 <_fflush_r+0x6c>)
 8014144:	429c      	cmp	r4, r3
 8014146:	d11b      	bne.n	8014180 <_fflush_r+0x58>
 8014148:	686c      	ldr	r4, [r5, #4]
 801414a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d0ef      	beq.n	8014132 <_fflush_r+0xa>
 8014152:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014154:	07d0      	lsls	r0, r2, #31
 8014156:	d404      	bmi.n	8014162 <_fflush_r+0x3a>
 8014158:	0599      	lsls	r1, r3, #22
 801415a:	d402      	bmi.n	8014162 <_fflush_r+0x3a>
 801415c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801415e:	f000 f915 	bl	801438c <__retarget_lock_acquire_recursive>
 8014162:	4628      	mov	r0, r5
 8014164:	4621      	mov	r1, r4
 8014166:	f7ff ff59 	bl	801401c <__sflush_r>
 801416a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801416c:	07da      	lsls	r2, r3, #31
 801416e:	4605      	mov	r5, r0
 8014170:	d4e0      	bmi.n	8014134 <_fflush_r+0xc>
 8014172:	89a3      	ldrh	r3, [r4, #12]
 8014174:	059b      	lsls	r3, r3, #22
 8014176:	d4dd      	bmi.n	8014134 <_fflush_r+0xc>
 8014178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801417a:	f000 f908 	bl	801438e <__retarget_lock_release_recursive>
 801417e:	e7d9      	b.n	8014134 <_fflush_r+0xc>
 8014180:	4b05      	ldr	r3, [pc, #20]	; (8014198 <_fflush_r+0x70>)
 8014182:	429c      	cmp	r4, r3
 8014184:	d101      	bne.n	801418a <_fflush_r+0x62>
 8014186:	68ac      	ldr	r4, [r5, #8]
 8014188:	e7df      	b.n	801414a <_fflush_r+0x22>
 801418a:	4b04      	ldr	r3, [pc, #16]	; (801419c <_fflush_r+0x74>)
 801418c:	429c      	cmp	r4, r3
 801418e:	bf08      	it	eq
 8014190:	68ec      	ldreq	r4, [r5, #12]
 8014192:	e7da      	b.n	801414a <_fflush_r+0x22>
 8014194:	08014d64 	.word	0x08014d64
 8014198:	08014d84 	.word	0x08014d84
 801419c:	08014d44 	.word	0x08014d44

080141a0 <std>:
 80141a0:	2300      	movs	r3, #0
 80141a2:	b510      	push	{r4, lr}
 80141a4:	4604      	mov	r4, r0
 80141a6:	e9c0 3300 	strd	r3, r3, [r0]
 80141aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80141ae:	6083      	str	r3, [r0, #8]
 80141b0:	8181      	strh	r1, [r0, #12]
 80141b2:	6643      	str	r3, [r0, #100]	; 0x64
 80141b4:	81c2      	strh	r2, [r0, #14]
 80141b6:	6183      	str	r3, [r0, #24]
 80141b8:	4619      	mov	r1, r3
 80141ba:	2208      	movs	r2, #8
 80141bc:	305c      	adds	r0, #92	; 0x5c
 80141be:	f7ff fcdf 	bl	8013b80 <memset>
 80141c2:	4b05      	ldr	r3, [pc, #20]	; (80141d8 <std+0x38>)
 80141c4:	6263      	str	r3, [r4, #36]	; 0x24
 80141c6:	4b05      	ldr	r3, [pc, #20]	; (80141dc <std+0x3c>)
 80141c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80141ca:	4b05      	ldr	r3, [pc, #20]	; (80141e0 <std+0x40>)
 80141cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80141ce:	4b05      	ldr	r3, [pc, #20]	; (80141e4 <std+0x44>)
 80141d0:	6224      	str	r4, [r4, #32]
 80141d2:	6323      	str	r3, [r4, #48]	; 0x30
 80141d4:	bd10      	pop	{r4, pc}
 80141d6:	bf00      	nop
 80141d8:	08014a51 	.word	0x08014a51
 80141dc:	08014a73 	.word	0x08014a73
 80141e0:	08014aab 	.word	0x08014aab
 80141e4:	08014acf 	.word	0x08014acf

080141e8 <_cleanup_r>:
 80141e8:	4901      	ldr	r1, [pc, #4]	; (80141f0 <_cleanup_r+0x8>)
 80141ea:	f000 b8af 	b.w	801434c <_fwalk_reent>
 80141ee:	bf00      	nop
 80141f0:	08014129 	.word	0x08014129

080141f4 <__sfmoreglue>:
 80141f4:	b570      	push	{r4, r5, r6, lr}
 80141f6:	2268      	movs	r2, #104	; 0x68
 80141f8:	1e4d      	subs	r5, r1, #1
 80141fa:	4355      	muls	r5, r2
 80141fc:	460e      	mov	r6, r1
 80141fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014202:	f7ff fd31 	bl	8013c68 <_malloc_r>
 8014206:	4604      	mov	r4, r0
 8014208:	b140      	cbz	r0, 801421c <__sfmoreglue+0x28>
 801420a:	2100      	movs	r1, #0
 801420c:	e9c0 1600 	strd	r1, r6, [r0]
 8014210:	300c      	adds	r0, #12
 8014212:	60a0      	str	r0, [r4, #8]
 8014214:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014218:	f7ff fcb2 	bl	8013b80 <memset>
 801421c:	4620      	mov	r0, r4
 801421e:	bd70      	pop	{r4, r5, r6, pc}

08014220 <__sfp_lock_acquire>:
 8014220:	4801      	ldr	r0, [pc, #4]	; (8014228 <__sfp_lock_acquire+0x8>)
 8014222:	f000 b8b3 	b.w	801438c <__retarget_lock_acquire_recursive>
 8014226:	bf00      	nop
 8014228:	20002ca9 	.word	0x20002ca9

0801422c <__sfp_lock_release>:
 801422c:	4801      	ldr	r0, [pc, #4]	; (8014234 <__sfp_lock_release+0x8>)
 801422e:	f000 b8ae 	b.w	801438e <__retarget_lock_release_recursive>
 8014232:	bf00      	nop
 8014234:	20002ca9 	.word	0x20002ca9

08014238 <__sinit_lock_acquire>:
 8014238:	4801      	ldr	r0, [pc, #4]	; (8014240 <__sinit_lock_acquire+0x8>)
 801423a:	f000 b8a7 	b.w	801438c <__retarget_lock_acquire_recursive>
 801423e:	bf00      	nop
 8014240:	20002caa 	.word	0x20002caa

08014244 <__sinit_lock_release>:
 8014244:	4801      	ldr	r0, [pc, #4]	; (801424c <__sinit_lock_release+0x8>)
 8014246:	f000 b8a2 	b.w	801438e <__retarget_lock_release_recursive>
 801424a:	bf00      	nop
 801424c:	20002caa 	.word	0x20002caa

08014250 <__sinit>:
 8014250:	b510      	push	{r4, lr}
 8014252:	4604      	mov	r4, r0
 8014254:	f7ff fff0 	bl	8014238 <__sinit_lock_acquire>
 8014258:	69a3      	ldr	r3, [r4, #24]
 801425a:	b11b      	cbz	r3, 8014264 <__sinit+0x14>
 801425c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014260:	f7ff bff0 	b.w	8014244 <__sinit_lock_release>
 8014264:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014268:	6523      	str	r3, [r4, #80]	; 0x50
 801426a:	4b13      	ldr	r3, [pc, #76]	; (80142b8 <__sinit+0x68>)
 801426c:	4a13      	ldr	r2, [pc, #76]	; (80142bc <__sinit+0x6c>)
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	62a2      	str	r2, [r4, #40]	; 0x28
 8014272:	42a3      	cmp	r3, r4
 8014274:	bf04      	itt	eq
 8014276:	2301      	moveq	r3, #1
 8014278:	61a3      	streq	r3, [r4, #24]
 801427a:	4620      	mov	r0, r4
 801427c:	f000 f820 	bl	80142c0 <__sfp>
 8014280:	6060      	str	r0, [r4, #4]
 8014282:	4620      	mov	r0, r4
 8014284:	f000 f81c 	bl	80142c0 <__sfp>
 8014288:	60a0      	str	r0, [r4, #8]
 801428a:	4620      	mov	r0, r4
 801428c:	f000 f818 	bl	80142c0 <__sfp>
 8014290:	2200      	movs	r2, #0
 8014292:	60e0      	str	r0, [r4, #12]
 8014294:	2104      	movs	r1, #4
 8014296:	6860      	ldr	r0, [r4, #4]
 8014298:	f7ff ff82 	bl	80141a0 <std>
 801429c:	68a0      	ldr	r0, [r4, #8]
 801429e:	2201      	movs	r2, #1
 80142a0:	2109      	movs	r1, #9
 80142a2:	f7ff ff7d 	bl	80141a0 <std>
 80142a6:	68e0      	ldr	r0, [r4, #12]
 80142a8:	2202      	movs	r2, #2
 80142aa:	2112      	movs	r1, #18
 80142ac:	f7ff ff78 	bl	80141a0 <std>
 80142b0:	2301      	movs	r3, #1
 80142b2:	61a3      	str	r3, [r4, #24]
 80142b4:	e7d2      	b.n	801425c <__sinit+0xc>
 80142b6:	bf00      	nop
 80142b8:	08014d40 	.word	0x08014d40
 80142bc:	080141e9 	.word	0x080141e9

080142c0 <__sfp>:
 80142c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142c2:	4607      	mov	r7, r0
 80142c4:	f7ff ffac 	bl	8014220 <__sfp_lock_acquire>
 80142c8:	4b1e      	ldr	r3, [pc, #120]	; (8014344 <__sfp+0x84>)
 80142ca:	681e      	ldr	r6, [r3, #0]
 80142cc:	69b3      	ldr	r3, [r6, #24]
 80142ce:	b913      	cbnz	r3, 80142d6 <__sfp+0x16>
 80142d0:	4630      	mov	r0, r6
 80142d2:	f7ff ffbd 	bl	8014250 <__sinit>
 80142d6:	3648      	adds	r6, #72	; 0x48
 80142d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80142dc:	3b01      	subs	r3, #1
 80142de:	d503      	bpl.n	80142e8 <__sfp+0x28>
 80142e0:	6833      	ldr	r3, [r6, #0]
 80142e2:	b30b      	cbz	r3, 8014328 <__sfp+0x68>
 80142e4:	6836      	ldr	r6, [r6, #0]
 80142e6:	e7f7      	b.n	80142d8 <__sfp+0x18>
 80142e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80142ec:	b9d5      	cbnz	r5, 8014324 <__sfp+0x64>
 80142ee:	4b16      	ldr	r3, [pc, #88]	; (8014348 <__sfp+0x88>)
 80142f0:	60e3      	str	r3, [r4, #12]
 80142f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80142f6:	6665      	str	r5, [r4, #100]	; 0x64
 80142f8:	f000 f847 	bl	801438a <__retarget_lock_init_recursive>
 80142fc:	f7ff ff96 	bl	801422c <__sfp_lock_release>
 8014300:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014304:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014308:	6025      	str	r5, [r4, #0]
 801430a:	61a5      	str	r5, [r4, #24]
 801430c:	2208      	movs	r2, #8
 801430e:	4629      	mov	r1, r5
 8014310:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014314:	f7ff fc34 	bl	8013b80 <memset>
 8014318:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801431c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014320:	4620      	mov	r0, r4
 8014322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014324:	3468      	adds	r4, #104	; 0x68
 8014326:	e7d9      	b.n	80142dc <__sfp+0x1c>
 8014328:	2104      	movs	r1, #4
 801432a:	4638      	mov	r0, r7
 801432c:	f7ff ff62 	bl	80141f4 <__sfmoreglue>
 8014330:	4604      	mov	r4, r0
 8014332:	6030      	str	r0, [r6, #0]
 8014334:	2800      	cmp	r0, #0
 8014336:	d1d5      	bne.n	80142e4 <__sfp+0x24>
 8014338:	f7ff ff78 	bl	801422c <__sfp_lock_release>
 801433c:	230c      	movs	r3, #12
 801433e:	603b      	str	r3, [r7, #0]
 8014340:	e7ee      	b.n	8014320 <__sfp+0x60>
 8014342:	bf00      	nop
 8014344:	08014d40 	.word	0x08014d40
 8014348:	ffff0001 	.word	0xffff0001

0801434c <_fwalk_reent>:
 801434c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014350:	4606      	mov	r6, r0
 8014352:	4688      	mov	r8, r1
 8014354:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014358:	2700      	movs	r7, #0
 801435a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801435e:	f1b9 0901 	subs.w	r9, r9, #1
 8014362:	d505      	bpl.n	8014370 <_fwalk_reent+0x24>
 8014364:	6824      	ldr	r4, [r4, #0]
 8014366:	2c00      	cmp	r4, #0
 8014368:	d1f7      	bne.n	801435a <_fwalk_reent+0xe>
 801436a:	4638      	mov	r0, r7
 801436c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014370:	89ab      	ldrh	r3, [r5, #12]
 8014372:	2b01      	cmp	r3, #1
 8014374:	d907      	bls.n	8014386 <_fwalk_reent+0x3a>
 8014376:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801437a:	3301      	adds	r3, #1
 801437c:	d003      	beq.n	8014386 <_fwalk_reent+0x3a>
 801437e:	4629      	mov	r1, r5
 8014380:	4630      	mov	r0, r6
 8014382:	47c0      	blx	r8
 8014384:	4307      	orrs	r7, r0
 8014386:	3568      	adds	r5, #104	; 0x68
 8014388:	e7e9      	b.n	801435e <_fwalk_reent+0x12>

0801438a <__retarget_lock_init_recursive>:
 801438a:	4770      	bx	lr

0801438c <__retarget_lock_acquire_recursive>:
 801438c:	4770      	bx	lr

0801438e <__retarget_lock_release_recursive>:
 801438e:	4770      	bx	lr

08014390 <__swhatbuf_r>:
 8014390:	b570      	push	{r4, r5, r6, lr}
 8014392:	460e      	mov	r6, r1
 8014394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014398:	2900      	cmp	r1, #0
 801439a:	b096      	sub	sp, #88	; 0x58
 801439c:	4614      	mov	r4, r2
 801439e:	461d      	mov	r5, r3
 80143a0:	da08      	bge.n	80143b4 <__swhatbuf_r+0x24>
 80143a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80143a6:	2200      	movs	r2, #0
 80143a8:	602a      	str	r2, [r5, #0]
 80143aa:	061a      	lsls	r2, r3, #24
 80143ac:	d410      	bmi.n	80143d0 <__swhatbuf_r+0x40>
 80143ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80143b2:	e00e      	b.n	80143d2 <__swhatbuf_r+0x42>
 80143b4:	466a      	mov	r2, sp
 80143b6:	f000 fbb1 	bl	8014b1c <_fstat_r>
 80143ba:	2800      	cmp	r0, #0
 80143bc:	dbf1      	blt.n	80143a2 <__swhatbuf_r+0x12>
 80143be:	9a01      	ldr	r2, [sp, #4]
 80143c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80143c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80143c8:	425a      	negs	r2, r3
 80143ca:	415a      	adcs	r2, r3
 80143cc:	602a      	str	r2, [r5, #0]
 80143ce:	e7ee      	b.n	80143ae <__swhatbuf_r+0x1e>
 80143d0:	2340      	movs	r3, #64	; 0x40
 80143d2:	2000      	movs	r0, #0
 80143d4:	6023      	str	r3, [r4, #0]
 80143d6:	b016      	add	sp, #88	; 0x58
 80143d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080143dc <__smakebuf_r>:
 80143dc:	898b      	ldrh	r3, [r1, #12]
 80143de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80143e0:	079d      	lsls	r5, r3, #30
 80143e2:	4606      	mov	r6, r0
 80143e4:	460c      	mov	r4, r1
 80143e6:	d507      	bpl.n	80143f8 <__smakebuf_r+0x1c>
 80143e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80143ec:	6023      	str	r3, [r4, #0]
 80143ee:	6123      	str	r3, [r4, #16]
 80143f0:	2301      	movs	r3, #1
 80143f2:	6163      	str	r3, [r4, #20]
 80143f4:	b002      	add	sp, #8
 80143f6:	bd70      	pop	{r4, r5, r6, pc}
 80143f8:	ab01      	add	r3, sp, #4
 80143fa:	466a      	mov	r2, sp
 80143fc:	f7ff ffc8 	bl	8014390 <__swhatbuf_r>
 8014400:	9900      	ldr	r1, [sp, #0]
 8014402:	4605      	mov	r5, r0
 8014404:	4630      	mov	r0, r6
 8014406:	f7ff fc2f 	bl	8013c68 <_malloc_r>
 801440a:	b948      	cbnz	r0, 8014420 <__smakebuf_r+0x44>
 801440c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014410:	059a      	lsls	r2, r3, #22
 8014412:	d4ef      	bmi.n	80143f4 <__smakebuf_r+0x18>
 8014414:	f023 0303 	bic.w	r3, r3, #3
 8014418:	f043 0302 	orr.w	r3, r3, #2
 801441c:	81a3      	strh	r3, [r4, #12]
 801441e:	e7e3      	b.n	80143e8 <__smakebuf_r+0xc>
 8014420:	4b0d      	ldr	r3, [pc, #52]	; (8014458 <__smakebuf_r+0x7c>)
 8014422:	62b3      	str	r3, [r6, #40]	; 0x28
 8014424:	89a3      	ldrh	r3, [r4, #12]
 8014426:	6020      	str	r0, [r4, #0]
 8014428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801442c:	81a3      	strh	r3, [r4, #12]
 801442e:	9b00      	ldr	r3, [sp, #0]
 8014430:	6163      	str	r3, [r4, #20]
 8014432:	9b01      	ldr	r3, [sp, #4]
 8014434:	6120      	str	r0, [r4, #16]
 8014436:	b15b      	cbz	r3, 8014450 <__smakebuf_r+0x74>
 8014438:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801443c:	4630      	mov	r0, r6
 801443e:	f000 fb7f 	bl	8014b40 <_isatty_r>
 8014442:	b128      	cbz	r0, 8014450 <__smakebuf_r+0x74>
 8014444:	89a3      	ldrh	r3, [r4, #12]
 8014446:	f023 0303 	bic.w	r3, r3, #3
 801444a:	f043 0301 	orr.w	r3, r3, #1
 801444e:	81a3      	strh	r3, [r4, #12]
 8014450:	89a0      	ldrh	r0, [r4, #12]
 8014452:	4305      	orrs	r5, r0
 8014454:	81a5      	strh	r5, [r4, #12]
 8014456:	e7cd      	b.n	80143f4 <__smakebuf_r+0x18>
 8014458:	080141e9 	.word	0x080141e9

0801445c <__malloc_lock>:
 801445c:	4801      	ldr	r0, [pc, #4]	; (8014464 <__malloc_lock+0x8>)
 801445e:	f7ff bf95 	b.w	801438c <__retarget_lock_acquire_recursive>
 8014462:	bf00      	nop
 8014464:	20002ca8 	.word	0x20002ca8

08014468 <__malloc_unlock>:
 8014468:	4801      	ldr	r0, [pc, #4]	; (8014470 <__malloc_unlock+0x8>)
 801446a:	f7ff bf90 	b.w	801438e <__retarget_lock_release_recursive>
 801446e:	bf00      	nop
 8014470:	20002ca8 	.word	0x20002ca8

08014474 <__sfputc_r>:
 8014474:	6893      	ldr	r3, [r2, #8]
 8014476:	3b01      	subs	r3, #1
 8014478:	2b00      	cmp	r3, #0
 801447a:	b410      	push	{r4}
 801447c:	6093      	str	r3, [r2, #8]
 801447e:	da08      	bge.n	8014492 <__sfputc_r+0x1e>
 8014480:	6994      	ldr	r4, [r2, #24]
 8014482:	42a3      	cmp	r3, r4
 8014484:	db01      	blt.n	801448a <__sfputc_r+0x16>
 8014486:	290a      	cmp	r1, #10
 8014488:	d103      	bne.n	8014492 <__sfputc_r+0x1e>
 801448a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801448e:	f7ff bd05 	b.w	8013e9c <__swbuf_r>
 8014492:	6813      	ldr	r3, [r2, #0]
 8014494:	1c58      	adds	r0, r3, #1
 8014496:	6010      	str	r0, [r2, #0]
 8014498:	7019      	strb	r1, [r3, #0]
 801449a:	4608      	mov	r0, r1
 801449c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80144a0:	4770      	bx	lr

080144a2 <__sfputs_r>:
 80144a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144a4:	4606      	mov	r6, r0
 80144a6:	460f      	mov	r7, r1
 80144a8:	4614      	mov	r4, r2
 80144aa:	18d5      	adds	r5, r2, r3
 80144ac:	42ac      	cmp	r4, r5
 80144ae:	d101      	bne.n	80144b4 <__sfputs_r+0x12>
 80144b0:	2000      	movs	r0, #0
 80144b2:	e007      	b.n	80144c4 <__sfputs_r+0x22>
 80144b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144b8:	463a      	mov	r2, r7
 80144ba:	4630      	mov	r0, r6
 80144bc:	f7ff ffda 	bl	8014474 <__sfputc_r>
 80144c0:	1c43      	adds	r3, r0, #1
 80144c2:	d1f3      	bne.n	80144ac <__sfputs_r+0xa>
 80144c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080144c8 <_vfiprintf_r>:
 80144c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144cc:	460d      	mov	r5, r1
 80144ce:	b09d      	sub	sp, #116	; 0x74
 80144d0:	4614      	mov	r4, r2
 80144d2:	4698      	mov	r8, r3
 80144d4:	4606      	mov	r6, r0
 80144d6:	b118      	cbz	r0, 80144e0 <_vfiprintf_r+0x18>
 80144d8:	6983      	ldr	r3, [r0, #24]
 80144da:	b90b      	cbnz	r3, 80144e0 <_vfiprintf_r+0x18>
 80144dc:	f7ff feb8 	bl	8014250 <__sinit>
 80144e0:	4b89      	ldr	r3, [pc, #548]	; (8014708 <_vfiprintf_r+0x240>)
 80144e2:	429d      	cmp	r5, r3
 80144e4:	d11b      	bne.n	801451e <_vfiprintf_r+0x56>
 80144e6:	6875      	ldr	r5, [r6, #4]
 80144e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80144ea:	07d9      	lsls	r1, r3, #31
 80144ec:	d405      	bmi.n	80144fa <_vfiprintf_r+0x32>
 80144ee:	89ab      	ldrh	r3, [r5, #12]
 80144f0:	059a      	lsls	r2, r3, #22
 80144f2:	d402      	bmi.n	80144fa <_vfiprintf_r+0x32>
 80144f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80144f6:	f7ff ff49 	bl	801438c <__retarget_lock_acquire_recursive>
 80144fa:	89ab      	ldrh	r3, [r5, #12]
 80144fc:	071b      	lsls	r3, r3, #28
 80144fe:	d501      	bpl.n	8014504 <_vfiprintf_r+0x3c>
 8014500:	692b      	ldr	r3, [r5, #16]
 8014502:	b9eb      	cbnz	r3, 8014540 <_vfiprintf_r+0x78>
 8014504:	4629      	mov	r1, r5
 8014506:	4630      	mov	r0, r6
 8014508:	f7ff fd1a 	bl	8013f40 <__swsetup_r>
 801450c:	b1c0      	cbz	r0, 8014540 <_vfiprintf_r+0x78>
 801450e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014510:	07dc      	lsls	r4, r3, #31
 8014512:	d50e      	bpl.n	8014532 <_vfiprintf_r+0x6a>
 8014514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014518:	b01d      	add	sp, #116	; 0x74
 801451a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801451e:	4b7b      	ldr	r3, [pc, #492]	; (801470c <_vfiprintf_r+0x244>)
 8014520:	429d      	cmp	r5, r3
 8014522:	d101      	bne.n	8014528 <_vfiprintf_r+0x60>
 8014524:	68b5      	ldr	r5, [r6, #8]
 8014526:	e7df      	b.n	80144e8 <_vfiprintf_r+0x20>
 8014528:	4b79      	ldr	r3, [pc, #484]	; (8014710 <_vfiprintf_r+0x248>)
 801452a:	429d      	cmp	r5, r3
 801452c:	bf08      	it	eq
 801452e:	68f5      	ldreq	r5, [r6, #12]
 8014530:	e7da      	b.n	80144e8 <_vfiprintf_r+0x20>
 8014532:	89ab      	ldrh	r3, [r5, #12]
 8014534:	0598      	lsls	r0, r3, #22
 8014536:	d4ed      	bmi.n	8014514 <_vfiprintf_r+0x4c>
 8014538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801453a:	f7ff ff28 	bl	801438e <__retarget_lock_release_recursive>
 801453e:	e7e9      	b.n	8014514 <_vfiprintf_r+0x4c>
 8014540:	2300      	movs	r3, #0
 8014542:	9309      	str	r3, [sp, #36]	; 0x24
 8014544:	2320      	movs	r3, #32
 8014546:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801454a:	f8cd 800c 	str.w	r8, [sp, #12]
 801454e:	2330      	movs	r3, #48	; 0x30
 8014550:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014714 <_vfiprintf_r+0x24c>
 8014554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014558:	f04f 0901 	mov.w	r9, #1
 801455c:	4623      	mov	r3, r4
 801455e:	469a      	mov	sl, r3
 8014560:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014564:	b10a      	cbz	r2, 801456a <_vfiprintf_r+0xa2>
 8014566:	2a25      	cmp	r2, #37	; 0x25
 8014568:	d1f9      	bne.n	801455e <_vfiprintf_r+0x96>
 801456a:	ebba 0b04 	subs.w	fp, sl, r4
 801456e:	d00b      	beq.n	8014588 <_vfiprintf_r+0xc0>
 8014570:	465b      	mov	r3, fp
 8014572:	4622      	mov	r2, r4
 8014574:	4629      	mov	r1, r5
 8014576:	4630      	mov	r0, r6
 8014578:	f7ff ff93 	bl	80144a2 <__sfputs_r>
 801457c:	3001      	adds	r0, #1
 801457e:	f000 80aa 	beq.w	80146d6 <_vfiprintf_r+0x20e>
 8014582:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014584:	445a      	add	r2, fp
 8014586:	9209      	str	r2, [sp, #36]	; 0x24
 8014588:	f89a 3000 	ldrb.w	r3, [sl]
 801458c:	2b00      	cmp	r3, #0
 801458e:	f000 80a2 	beq.w	80146d6 <_vfiprintf_r+0x20e>
 8014592:	2300      	movs	r3, #0
 8014594:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801459c:	f10a 0a01 	add.w	sl, sl, #1
 80145a0:	9304      	str	r3, [sp, #16]
 80145a2:	9307      	str	r3, [sp, #28]
 80145a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80145a8:	931a      	str	r3, [sp, #104]	; 0x68
 80145aa:	4654      	mov	r4, sl
 80145ac:	2205      	movs	r2, #5
 80145ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145b2:	4858      	ldr	r0, [pc, #352]	; (8014714 <_vfiprintf_r+0x24c>)
 80145b4:	f7eb fe1c 	bl	80001f0 <memchr>
 80145b8:	9a04      	ldr	r2, [sp, #16]
 80145ba:	b9d8      	cbnz	r0, 80145f4 <_vfiprintf_r+0x12c>
 80145bc:	06d1      	lsls	r1, r2, #27
 80145be:	bf44      	itt	mi
 80145c0:	2320      	movmi	r3, #32
 80145c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80145c6:	0713      	lsls	r3, r2, #28
 80145c8:	bf44      	itt	mi
 80145ca:	232b      	movmi	r3, #43	; 0x2b
 80145cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80145d0:	f89a 3000 	ldrb.w	r3, [sl]
 80145d4:	2b2a      	cmp	r3, #42	; 0x2a
 80145d6:	d015      	beq.n	8014604 <_vfiprintf_r+0x13c>
 80145d8:	9a07      	ldr	r2, [sp, #28]
 80145da:	4654      	mov	r4, sl
 80145dc:	2000      	movs	r0, #0
 80145de:	f04f 0c0a 	mov.w	ip, #10
 80145e2:	4621      	mov	r1, r4
 80145e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80145e8:	3b30      	subs	r3, #48	; 0x30
 80145ea:	2b09      	cmp	r3, #9
 80145ec:	d94e      	bls.n	801468c <_vfiprintf_r+0x1c4>
 80145ee:	b1b0      	cbz	r0, 801461e <_vfiprintf_r+0x156>
 80145f0:	9207      	str	r2, [sp, #28]
 80145f2:	e014      	b.n	801461e <_vfiprintf_r+0x156>
 80145f4:	eba0 0308 	sub.w	r3, r0, r8
 80145f8:	fa09 f303 	lsl.w	r3, r9, r3
 80145fc:	4313      	orrs	r3, r2
 80145fe:	9304      	str	r3, [sp, #16]
 8014600:	46a2      	mov	sl, r4
 8014602:	e7d2      	b.n	80145aa <_vfiprintf_r+0xe2>
 8014604:	9b03      	ldr	r3, [sp, #12]
 8014606:	1d19      	adds	r1, r3, #4
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	9103      	str	r1, [sp, #12]
 801460c:	2b00      	cmp	r3, #0
 801460e:	bfbb      	ittet	lt
 8014610:	425b      	neglt	r3, r3
 8014612:	f042 0202 	orrlt.w	r2, r2, #2
 8014616:	9307      	strge	r3, [sp, #28]
 8014618:	9307      	strlt	r3, [sp, #28]
 801461a:	bfb8      	it	lt
 801461c:	9204      	strlt	r2, [sp, #16]
 801461e:	7823      	ldrb	r3, [r4, #0]
 8014620:	2b2e      	cmp	r3, #46	; 0x2e
 8014622:	d10c      	bne.n	801463e <_vfiprintf_r+0x176>
 8014624:	7863      	ldrb	r3, [r4, #1]
 8014626:	2b2a      	cmp	r3, #42	; 0x2a
 8014628:	d135      	bne.n	8014696 <_vfiprintf_r+0x1ce>
 801462a:	9b03      	ldr	r3, [sp, #12]
 801462c:	1d1a      	adds	r2, r3, #4
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	9203      	str	r2, [sp, #12]
 8014632:	2b00      	cmp	r3, #0
 8014634:	bfb8      	it	lt
 8014636:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801463a:	3402      	adds	r4, #2
 801463c:	9305      	str	r3, [sp, #20]
 801463e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014724 <_vfiprintf_r+0x25c>
 8014642:	7821      	ldrb	r1, [r4, #0]
 8014644:	2203      	movs	r2, #3
 8014646:	4650      	mov	r0, sl
 8014648:	f7eb fdd2 	bl	80001f0 <memchr>
 801464c:	b140      	cbz	r0, 8014660 <_vfiprintf_r+0x198>
 801464e:	2340      	movs	r3, #64	; 0x40
 8014650:	eba0 000a 	sub.w	r0, r0, sl
 8014654:	fa03 f000 	lsl.w	r0, r3, r0
 8014658:	9b04      	ldr	r3, [sp, #16]
 801465a:	4303      	orrs	r3, r0
 801465c:	3401      	adds	r4, #1
 801465e:	9304      	str	r3, [sp, #16]
 8014660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014664:	482c      	ldr	r0, [pc, #176]	; (8014718 <_vfiprintf_r+0x250>)
 8014666:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801466a:	2206      	movs	r2, #6
 801466c:	f7eb fdc0 	bl	80001f0 <memchr>
 8014670:	2800      	cmp	r0, #0
 8014672:	d03f      	beq.n	80146f4 <_vfiprintf_r+0x22c>
 8014674:	4b29      	ldr	r3, [pc, #164]	; (801471c <_vfiprintf_r+0x254>)
 8014676:	bb1b      	cbnz	r3, 80146c0 <_vfiprintf_r+0x1f8>
 8014678:	9b03      	ldr	r3, [sp, #12]
 801467a:	3307      	adds	r3, #7
 801467c:	f023 0307 	bic.w	r3, r3, #7
 8014680:	3308      	adds	r3, #8
 8014682:	9303      	str	r3, [sp, #12]
 8014684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014686:	443b      	add	r3, r7
 8014688:	9309      	str	r3, [sp, #36]	; 0x24
 801468a:	e767      	b.n	801455c <_vfiprintf_r+0x94>
 801468c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014690:	460c      	mov	r4, r1
 8014692:	2001      	movs	r0, #1
 8014694:	e7a5      	b.n	80145e2 <_vfiprintf_r+0x11a>
 8014696:	2300      	movs	r3, #0
 8014698:	3401      	adds	r4, #1
 801469a:	9305      	str	r3, [sp, #20]
 801469c:	4619      	mov	r1, r3
 801469e:	f04f 0c0a 	mov.w	ip, #10
 80146a2:	4620      	mov	r0, r4
 80146a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80146a8:	3a30      	subs	r2, #48	; 0x30
 80146aa:	2a09      	cmp	r2, #9
 80146ac:	d903      	bls.n	80146b6 <_vfiprintf_r+0x1ee>
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d0c5      	beq.n	801463e <_vfiprintf_r+0x176>
 80146b2:	9105      	str	r1, [sp, #20]
 80146b4:	e7c3      	b.n	801463e <_vfiprintf_r+0x176>
 80146b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80146ba:	4604      	mov	r4, r0
 80146bc:	2301      	movs	r3, #1
 80146be:	e7f0      	b.n	80146a2 <_vfiprintf_r+0x1da>
 80146c0:	ab03      	add	r3, sp, #12
 80146c2:	9300      	str	r3, [sp, #0]
 80146c4:	462a      	mov	r2, r5
 80146c6:	4b16      	ldr	r3, [pc, #88]	; (8014720 <_vfiprintf_r+0x258>)
 80146c8:	a904      	add	r1, sp, #16
 80146ca:	4630      	mov	r0, r6
 80146cc:	f3af 8000 	nop.w
 80146d0:	4607      	mov	r7, r0
 80146d2:	1c78      	adds	r0, r7, #1
 80146d4:	d1d6      	bne.n	8014684 <_vfiprintf_r+0x1bc>
 80146d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80146d8:	07d9      	lsls	r1, r3, #31
 80146da:	d405      	bmi.n	80146e8 <_vfiprintf_r+0x220>
 80146dc:	89ab      	ldrh	r3, [r5, #12]
 80146de:	059a      	lsls	r2, r3, #22
 80146e0:	d402      	bmi.n	80146e8 <_vfiprintf_r+0x220>
 80146e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80146e4:	f7ff fe53 	bl	801438e <__retarget_lock_release_recursive>
 80146e8:	89ab      	ldrh	r3, [r5, #12]
 80146ea:	065b      	lsls	r3, r3, #25
 80146ec:	f53f af12 	bmi.w	8014514 <_vfiprintf_r+0x4c>
 80146f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80146f2:	e711      	b.n	8014518 <_vfiprintf_r+0x50>
 80146f4:	ab03      	add	r3, sp, #12
 80146f6:	9300      	str	r3, [sp, #0]
 80146f8:	462a      	mov	r2, r5
 80146fa:	4b09      	ldr	r3, [pc, #36]	; (8014720 <_vfiprintf_r+0x258>)
 80146fc:	a904      	add	r1, sp, #16
 80146fe:	4630      	mov	r0, r6
 8014700:	f000 f880 	bl	8014804 <_printf_i>
 8014704:	e7e4      	b.n	80146d0 <_vfiprintf_r+0x208>
 8014706:	bf00      	nop
 8014708:	08014d64 	.word	0x08014d64
 801470c:	08014d84 	.word	0x08014d84
 8014710:	08014d44 	.word	0x08014d44
 8014714:	08014da4 	.word	0x08014da4
 8014718:	08014dae 	.word	0x08014dae
 801471c:	00000000 	.word	0x00000000
 8014720:	080144a3 	.word	0x080144a3
 8014724:	08014daa 	.word	0x08014daa

08014728 <_printf_common>:
 8014728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801472c:	4616      	mov	r6, r2
 801472e:	4699      	mov	r9, r3
 8014730:	688a      	ldr	r2, [r1, #8]
 8014732:	690b      	ldr	r3, [r1, #16]
 8014734:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014738:	4293      	cmp	r3, r2
 801473a:	bfb8      	it	lt
 801473c:	4613      	movlt	r3, r2
 801473e:	6033      	str	r3, [r6, #0]
 8014740:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014744:	4607      	mov	r7, r0
 8014746:	460c      	mov	r4, r1
 8014748:	b10a      	cbz	r2, 801474e <_printf_common+0x26>
 801474a:	3301      	adds	r3, #1
 801474c:	6033      	str	r3, [r6, #0]
 801474e:	6823      	ldr	r3, [r4, #0]
 8014750:	0699      	lsls	r1, r3, #26
 8014752:	bf42      	ittt	mi
 8014754:	6833      	ldrmi	r3, [r6, #0]
 8014756:	3302      	addmi	r3, #2
 8014758:	6033      	strmi	r3, [r6, #0]
 801475a:	6825      	ldr	r5, [r4, #0]
 801475c:	f015 0506 	ands.w	r5, r5, #6
 8014760:	d106      	bne.n	8014770 <_printf_common+0x48>
 8014762:	f104 0a19 	add.w	sl, r4, #25
 8014766:	68e3      	ldr	r3, [r4, #12]
 8014768:	6832      	ldr	r2, [r6, #0]
 801476a:	1a9b      	subs	r3, r3, r2
 801476c:	42ab      	cmp	r3, r5
 801476e:	dc26      	bgt.n	80147be <_printf_common+0x96>
 8014770:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014774:	1e13      	subs	r3, r2, #0
 8014776:	6822      	ldr	r2, [r4, #0]
 8014778:	bf18      	it	ne
 801477a:	2301      	movne	r3, #1
 801477c:	0692      	lsls	r2, r2, #26
 801477e:	d42b      	bmi.n	80147d8 <_printf_common+0xb0>
 8014780:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014784:	4649      	mov	r1, r9
 8014786:	4638      	mov	r0, r7
 8014788:	47c0      	blx	r8
 801478a:	3001      	adds	r0, #1
 801478c:	d01e      	beq.n	80147cc <_printf_common+0xa4>
 801478e:	6823      	ldr	r3, [r4, #0]
 8014790:	68e5      	ldr	r5, [r4, #12]
 8014792:	6832      	ldr	r2, [r6, #0]
 8014794:	f003 0306 	and.w	r3, r3, #6
 8014798:	2b04      	cmp	r3, #4
 801479a:	bf08      	it	eq
 801479c:	1aad      	subeq	r5, r5, r2
 801479e:	68a3      	ldr	r3, [r4, #8]
 80147a0:	6922      	ldr	r2, [r4, #16]
 80147a2:	bf0c      	ite	eq
 80147a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80147a8:	2500      	movne	r5, #0
 80147aa:	4293      	cmp	r3, r2
 80147ac:	bfc4      	itt	gt
 80147ae:	1a9b      	subgt	r3, r3, r2
 80147b0:	18ed      	addgt	r5, r5, r3
 80147b2:	2600      	movs	r6, #0
 80147b4:	341a      	adds	r4, #26
 80147b6:	42b5      	cmp	r5, r6
 80147b8:	d11a      	bne.n	80147f0 <_printf_common+0xc8>
 80147ba:	2000      	movs	r0, #0
 80147bc:	e008      	b.n	80147d0 <_printf_common+0xa8>
 80147be:	2301      	movs	r3, #1
 80147c0:	4652      	mov	r2, sl
 80147c2:	4649      	mov	r1, r9
 80147c4:	4638      	mov	r0, r7
 80147c6:	47c0      	blx	r8
 80147c8:	3001      	adds	r0, #1
 80147ca:	d103      	bne.n	80147d4 <_printf_common+0xac>
 80147cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80147d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147d4:	3501      	adds	r5, #1
 80147d6:	e7c6      	b.n	8014766 <_printf_common+0x3e>
 80147d8:	18e1      	adds	r1, r4, r3
 80147da:	1c5a      	adds	r2, r3, #1
 80147dc:	2030      	movs	r0, #48	; 0x30
 80147de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80147e2:	4422      	add	r2, r4
 80147e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80147e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80147ec:	3302      	adds	r3, #2
 80147ee:	e7c7      	b.n	8014780 <_printf_common+0x58>
 80147f0:	2301      	movs	r3, #1
 80147f2:	4622      	mov	r2, r4
 80147f4:	4649      	mov	r1, r9
 80147f6:	4638      	mov	r0, r7
 80147f8:	47c0      	blx	r8
 80147fa:	3001      	adds	r0, #1
 80147fc:	d0e6      	beq.n	80147cc <_printf_common+0xa4>
 80147fe:	3601      	adds	r6, #1
 8014800:	e7d9      	b.n	80147b6 <_printf_common+0x8e>
	...

08014804 <_printf_i>:
 8014804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014808:	7e0f      	ldrb	r7, [r1, #24]
 801480a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801480c:	2f78      	cmp	r7, #120	; 0x78
 801480e:	4691      	mov	r9, r2
 8014810:	4680      	mov	r8, r0
 8014812:	460c      	mov	r4, r1
 8014814:	469a      	mov	sl, r3
 8014816:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801481a:	d807      	bhi.n	801482c <_printf_i+0x28>
 801481c:	2f62      	cmp	r7, #98	; 0x62
 801481e:	d80a      	bhi.n	8014836 <_printf_i+0x32>
 8014820:	2f00      	cmp	r7, #0
 8014822:	f000 80d8 	beq.w	80149d6 <_printf_i+0x1d2>
 8014826:	2f58      	cmp	r7, #88	; 0x58
 8014828:	f000 80a3 	beq.w	8014972 <_printf_i+0x16e>
 801482c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014830:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014834:	e03a      	b.n	80148ac <_printf_i+0xa8>
 8014836:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801483a:	2b15      	cmp	r3, #21
 801483c:	d8f6      	bhi.n	801482c <_printf_i+0x28>
 801483e:	a101      	add	r1, pc, #4	; (adr r1, 8014844 <_printf_i+0x40>)
 8014840:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014844:	0801489d 	.word	0x0801489d
 8014848:	080148b1 	.word	0x080148b1
 801484c:	0801482d 	.word	0x0801482d
 8014850:	0801482d 	.word	0x0801482d
 8014854:	0801482d 	.word	0x0801482d
 8014858:	0801482d 	.word	0x0801482d
 801485c:	080148b1 	.word	0x080148b1
 8014860:	0801482d 	.word	0x0801482d
 8014864:	0801482d 	.word	0x0801482d
 8014868:	0801482d 	.word	0x0801482d
 801486c:	0801482d 	.word	0x0801482d
 8014870:	080149bd 	.word	0x080149bd
 8014874:	080148e1 	.word	0x080148e1
 8014878:	0801499f 	.word	0x0801499f
 801487c:	0801482d 	.word	0x0801482d
 8014880:	0801482d 	.word	0x0801482d
 8014884:	080149df 	.word	0x080149df
 8014888:	0801482d 	.word	0x0801482d
 801488c:	080148e1 	.word	0x080148e1
 8014890:	0801482d 	.word	0x0801482d
 8014894:	0801482d 	.word	0x0801482d
 8014898:	080149a7 	.word	0x080149a7
 801489c:	682b      	ldr	r3, [r5, #0]
 801489e:	1d1a      	adds	r2, r3, #4
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	602a      	str	r2, [r5, #0]
 80148a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80148a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80148ac:	2301      	movs	r3, #1
 80148ae:	e0a3      	b.n	80149f8 <_printf_i+0x1f4>
 80148b0:	6820      	ldr	r0, [r4, #0]
 80148b2:	6829      	ldr	r1, [r5, #0]
 80148b4:	0606      	lsls	r6, r0, #24
 80148b6:	f101 0304 	add.w	r3, r1, #4
 80148ba:	d50a      	bpl.n	80148d2 <_printf_i+0xce>
 80148bc:	680e      	ldr	r6, [r1, #0]
 80148be:	602b      	str	r3, [r5, #0]
 80148c0:	2e00      	cmp	r6, #0
 80148c2:	da03      	bge.n	80148cc <_printf_i+0xc8>
 80148c4:	232d      	movs	r3, #45	; 0x2d
 80148c6:	4276      	negs	r6, r6
 80148c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80148cc:	485e      	ldr	r0, [pc, #376]	; (8014a48 <_printf_i+0x244>)
 80148ce:	230a      	movs	r3, #10
 80148d0:	e019      	b.n	8014906 <_printf_i+0x102>
 80148d2:	680e      	ldr	r6, [r1, #0]
 80148d4:	602b      	str	r3, [r5, #0]
 80148d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80148da:	bf18      	it	ne
 80148dc:	b236      	sxthne	r6, r6
 80148de:	e7ef      	b.n	80148c0 <_printf_i+0xbc>
 80148e0:	682b      	ldr	r3, [r5, #0]
 80148e2:	6820      	ldr	r0, [r4, #0]
 80148e4:	1d19      	adds	r1, r3, #4
 80148e6:	6029      	str	r1, [r5, #0]
 80148e8:	0601      	lsls	r1, r0, #24
 80148ea:	d501      	bpl.n	80148f0 <_printf_i+0xec>
 80148ec:	681e      	ldr	r6, [r3, #0]
 80148ee:	e002      	b.n	80148f6 <_printf_i+0xf2>
 80148f0:	0646      	lsls	r6, r0, #25
 80148f2:	d5fb      	bpl.n	80148ec <_printf_i+0xe8>
 80148f4:	881e      	ldrh	r6, [r3, #0]
 80148f6:	4854      	ldr	r0, [pc, #336]	; (8014a48 <_printf_i+0x244>)
 80148f8:	2f6f      	cmp	r7, #111	; 0x6f
 80148fa:	bf0c      	ite	eq
 80148fc:	2308      	moveq	r3, #8
 80148fe:	230a      	movne	r3, #10
 8014900:	2100      	movs	r1, #0
 8014902:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014906:	6865      	ldr	r5, [r4, #4]
 8014908:	60a5      	str	r5, [r4, #8]
 801490a:	2d00      	cmp	r5, #0
 801490c:	bfa2      	ittt	ge
 801490e:	6821      	ldrge	r1, [r4, #0]
 8014910:	f021 0104 	bicge.w	r1, r1, #4
 8014914:	6021      	strge	r1, [r4, #0]
 8014916:	b90e      	cbnz	r6, 801491c <_printf_i+0x118>
 8014918:	2d00      	cmp	r5, #0
 801491a:	d04d      	beq.n	80149b8 <_printf_i+0x1b4>
 801491c:	4615      	mov	r5, r2
 801491e:	fbb6 f1f3 	udiv	r1, r6, r3
 8014922:	fb03 6711 	mls	r7, r3, r1, r6
 8014926:	5dc7      	ldrb	r7, [r0, r7]
 8014928:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801492c:	4637      	mov	r7, r6
 801492e:	42bb      	cmp	r3, r7
 8014930:	460e      	mov	r6, r1
 8014932:	d9f4      	bls.n	801491e <_printf_i+0x11a>
 8014934:	2b08      	cmp	r3, #8
 8014936:	d10b      	bne.n	8014950 <_printf_i+0x14c>
 8014938:	6823      	ldr	r3, [r4, #0]
 801493a:	07de      	lsls	r6, r3, #31
 801493c:	d508      	bpl.n	8014950 <_printf_i+0x14c>
 801493e:	6923      	ldr	r3, [r4, #16]
 8014940:	6861      	ldr	r1, [r4, #4]
 8014942:	4299      	cmp	r1, r3
 8014944:	bfde      	ittt	le
 8014946:	2330      	movle	r3, #48	; 0x30
 8014948:	f805 3c01 	strble.w	r3, [r5, #-1]
 801494c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8014950:	1b52      	subs	r2, r2, r5
 8014952:	6122      	str	r2, [r4, #16]
 8014954:	f8cd a000 	str.w	sl, [sp]
 8014958:	464b      	mov	r3, r9
 801495a:	aa03      	add	r2, sp, #12
 801495c:	4621      	mov	r1, r4
 801495e:	4640      	mov	r0, r8
 8014960:	f7ff fee2 	bl	8014728 <_printf_common>
 8014964:	3001      	adds	r0, #1
 8014966:	d14c      	bne.n	8014a02 <_printf_i+0x1fe>
 8014968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801496c:	b004      	add	sp, #16
 801496e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014972:	4835      	ldr	r0, [pc, #212]	; (8014a48 <_printf_i+0x244>)
 8014974:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014978:	6829      	ldr	r1, [r5, #0]
 801497a:	6823      	ldr	r3, [r4, #0]
 801497c:	f851 6b04 	ldr.w	r6, [r1], #4
 8014980:	6029      	str	r1, [r5, #0]
 8014982:	061d      	lsls	r5, r3, #24
 8014984:	d514      	bpl.n	80149b0 <_printf_i+0x1ac>
 8014986:	07df      	lsls	r7, r3, #31
 8014988:	bf44      	itt	mi
 801498a:	f043 0320 	orrmi.w	r3, r3, #32
 801498e:	6023      	strmi	r3, [r4, #0]
 8014990:	b91e      	cbnz	r6, 801499a <_printf_i+0x196>
 8014992:	6823      	ldr	r3, [r4, #0]
 8014994:	f023 0320 	bic.w	r3, r3, #32
 8014998:	6023      	str	r3, [r4, #0]
 801499a:	2310      	movs	r3, #16
 801499c:	e7b0      	b.n	8014900 <_printf_i+0xfc>
 801499e:	6823      	ldr	r3, [r4, #0]
 80149a0:	f043 0320 	orr.w	r3, r3, #32
 80149a4:	6023      	str	r3, [r4, #0]
 80149a6:	2378      	movs	r3, #120	; 0x78
 80149a8:	4828      	ldr	r0, [pc, #160]	; (8014a4c <_printf_i+0x248>)
 80149aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80149ae:	e7e3      	b.n	8014978 <_printf_i+0x174>
 80149b0:	0659      	lsls	r1, r3, #25
 80149b2:	bf48      	it	mi
 80149b4:	b2b6      	uxthmi	r6, r6
 80149b6:	e7e6      	b.n	8014986 <_printf_i+0x182>
 80149b8:	4615      	mov	r5, r2
 80149ba:	e7bb      	b.n	8014934 <_printf_i+0x130>
 80149bc:	682b      	ldr	r3, [r5, #0]
 80149be:	6826      	ldr	r6, [r4, #0]
 80149c0:	6961      	ldr	r1, [r4, #20]
 80149c2:	1d18      	adds	r0, r3, #4
 80149c4:	6028      	str	r0, [r5, #0]
 80149c6:	0635      	lsls	r5, r6, #24
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	d501      	bpl.n	80149d0 <_printf_i+0x1cc>
 80149cc:	6019      	str	r1, [r3, #0]
 80149ce:	e002      	b.n	80149d6 <_printf_i+0x1d2>
 80149d0:	0670      	lsls	r0, r6, #25
 80149d2:	d5fb      	bpl.n	80149cc <_printf_i+0x1c8>
 80149d4:	8019      	strh	r1, [r3, #0]
 80149d6:	2300      	movs	r3, #0
 80149d8:	6123      	str	r3, [r4, #16]
 80149da:	4615      	mov	r5, r2
 80149dc:	e7ba      	b.n	8014954 <_printf_i+0x150>
 80149de:	682b      	ldr	r3, [r5, #0]
 80149e0:	1d1a      	adds	r2, r3, #4
 80149e2:	602a      	str	r2, [r5, #0]
 80149e4:	681d      	ldr	r5, [r3, #0]
 80149e6:	6862      	ldr	r2, [r4, #4]
 80149e8:	2100      	movs	r1, #0
 80149ea:	4628      	mov	r0, r5
 80149ec:	f7eb fc00 	bl	80001f0 <memchr>
 80149f0:	b108      	cbz	r0, 80149f6 <_printf_i+0x1f2>
 80149f2:	1b40      	subs	r0, r0, r5
 80149f4:	6060      	str	r0, [r4, #4]
 80149f6:	6863      	ldr	r3, [r4, #4]
 80149f8:	6123      	str	r3, [r4, #16]
 80149fa:	2300      	movs	r3, #0
 80149fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014a00:	e7a8      	b.n	8014954 <_printf_i+0x150>
 8014a02:	6923      	ldr	r3, [r4, #16]
 8014a04:	462a      	mov	r2, r5
 8014a06:	4649      	mov	r1, r9
 8014a08:	4640      	mov	r0, r8
 8014a0a:	47d0      	blx	sl
 8014a0c:	3001      	adds	r0, #1
 8014a0e:	d0ab      	beq.n	8014968 <_printf_i+0x164>
 8014a10:	6823      	ldr	r3, [r4, #0]
 8014a12:	079b      	lsls	r3, r3, #30
 8014a14:	d413      	bmi.n	8014a3e <_printf_i+0x23a>
 8014a16:	68e0      	ldr	r0, [r4, #12]
 8014a18:	9b03      	ldr	r3, [sp, #12]
 8014a1a:	4298      	cmp	r0, r3
 8014a1c:	bfb8      	it	lt
 8014a1e:	4618      	movlt	r0, r3
 8014a20:	e7a4      	b.n	801496c <_printf_i+0x168>
 8014a22:	2301      	movs	r3, #1
 8014a24:	4632      	mov	r2, r6
 8014a26:	4649      	mov	r1, r9
 8014a28:	4640      	mov	r0, r8
 8014a2a:	47d0      	blx	sl
 8014a2c:	3001      	adds	r0, #1
 8014a2e:	d09b      	beq.n	8014968 <_printf_i+0x164>
 8014a30:	3501      	adds	r5, #1
 8014a32:	68e3      	ldr	r3, [r4, #12]
 8014a34:	9903      	ldr	r1, [sp, #12]
 8014a36:	1a5b      	subs	r3, r3, r1
 8014a38:	42ab      	cmp	r3, r5
 8014a3a:	dcf2      	bgt.n	8014a22 <_printf_i+0x21e>
 8014a3c:	e7eb      	b.n	8014a16 <_printf_i+0x212>
 8014a3e:	2500      	movs	r5, #0
 8014a40:	f104 0619 	add.w	r6, r4, #25
 8014a44:	e7f5      	b.n	8014a32 <_printf_i+0x22e>
 8014a46:	bf00      	nop
 8014a48:	08014db5 	.word	0x08014db5
 8014a4c:	08014dc6 	.word	0x08014dc6

08014a50 <__sread>:
 8014a50:	b510      	push	{r4, lr}
 8014a52:	460c      	mov	r4, r1
 8014a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a58:	f000 f894 	bl	8014b84 <_read_r>
 8014a5c:	2800      	cmp	r0, #0
 8014a5e:	bfab      	itete	ge
 8014a60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014a62:	89a3      	ldrhlt	r3, [r4, #12]
 8014a64:	181b      	addge	r3, r3, r0
 8014a66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014a6a:	bfac      	ite	ge
 8014a6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8014a6e:	81a3      	strhlt	r3, [r4, #12]
 8014a70:	bd10      	pop	{r4, pc}

08014a72 <__swrite>:
 8014a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a76:	461f      	mov	r7, r3
 8014a78:	898b      	ldrh	r3, [r1, #12]
 8014a7a:	05db      	lsls	r3, r3, #23
 8014a7c:	4605      	mov	r5, r0
 8014a7e:	460c      	mov	r4, r1
 8014a80:	4616      	mov	r6, r2
 8014a82:	d505      	bpl.n	8014a90 <__swrite+0x1e>
 8014a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a88:	2302      	movs	r3, #2
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	f000 f868 	bl	8014b60 <_lseek_r>
 8014a90:	89a3      	ldrh	r3, [r4, #12]
 8014a92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014a9a:	81a3      	strh	r3, [r4, #12]
 8014a9c:	4632      	mov	r2, r6
 8014a9e:	463b      	mov	r3, r7
 8014aa0:	4628      	mov	r0, r5
 8014aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014aa6:	f000 b817 	b.w	8014ad8 <_write_r>

08014aaa <__sseek>:
 8014aaa:	b510      	push	{r4, lr}
 8014aac:	460c      	mov	r4, r1
 8014aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ab2:	f000 f855 	bl	8014b60 <_lseek_r>
 8014ab6:	1c43      	adds	r3, r0, #1
 8014ab8:	89a3      	ldrh	r3, [r4, #12]
 8014aba:	bf15      	itete	ne
 8014abc:	6560      	strne	r0, [r4, #84]	; 0x54
 8014abe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014ac2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014ac6:	81a3      	strheq	r3, [r4, #12]
 8014ac8:	bf18      	it	ne
 8014aca:	81a3      	strhne	r3, [r4, #12]
 8014acc:	bd10      	pop	{r4, pc}

08014ace <__sclose>:
 8014ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ad2:	f000 b813 	b.w	8014afc <_close_r>
	...

08014ad8 <_write_r>:
 8014ad8:	b538      	push	{r3, r4, r5, lr}
 8014ada:	4d07      	ldr	r5, [pc, #28]	; (8014af8 <_write_r+0x20>)
 8014adc:	4604      	mov	r4, r0
 8014ade:	4608      	mov	r0, r1
 8014ae0:	4611      	mov	r1, r2
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	602a      	str	r2, [r5, #0]
 8014ae6:	461a      	mov	r2, r3
 8014ae8:	f7ed fac7 	bl	800207a <_write>
 8014aec:	1c43      	adds	r3, r0, #1
 8014aee:	d102      	bne.n	8014af6 <_write_r+0x1e>
 8014af0:	682b      	ldr	r3, [r5, #0]
 8014af2:	b103      	cbz	r3, 8014af6 <_write_r+0x1e>
 8014af4:	6023      	str	r3, [r4, #0]
 8014af6:	bd38      	pop	{r3, r4, r5, pc}
 8014af8:	20002cac 	.word	0x20002cac

08014afc <_close_r>:
 8014afc:	b538      	push	{r3, r4, r5, lr}
 8014afe:	4d06      	ldr	r5, [pc, #24]	; (8014b18 <_close_r+0x1c>)
 8014b00:	2300      	movs	r3, #0
 8014b02:	4604      	mov	r4, r0
 8014b04:	4608      	mov	r0, r1
 8014b06:	602b      	str	r3, [r5, #0]
 8014b08:	f7ed fad3 	bl	80020b2 <_close>
 8014b0c:	1c43      	adds	r3, r0, #1
 8014b0e:	d102      	bne.n	8014b16 <_close_r+0x1a>
 8014b10:	682b      	ldr	r3, [r5, #0]
 8014b12:	b103      	cbz	r3, 8014b16 <_close_r+0x1a>
 8014b14:	6023      	str	r3, [r4, #0]
 8014b16:	bd38      	pop	{r3, r4, r5, pc}
 8014b18:	20002cac 	.word	0x20002cac

08014b1c <_fstat_r>:
 8014b1c:	b538      	push	{r3, r4, r5, lr}
 8014b1e:	4d07      	ldr	r5, [pc, #28]	; (8014b3c <_fstat_r+0x20>)
 8014b20:	2300      	movs	r3, #0
 8014b22:	4604      	mov	r4, r0
 8014b24:	4608      	mov	r0, r1
 8014b26:	4611      	mov	r1, r2
 8014b28:	602b      	str	r3, [r5, #0]
 8014b2a:	f7ed face 	bl	80020ca <_fstat>
 8014b2e:	1c43      	adds	r3, r0, #1
 8014b30:	d102      	bne.n	8014b38 <_fstat_r+0x1c>
 8014b32:	682b      	ldr	r3, [r5, #0]
 8014b34:	b103      	cbz	r3, 8014b38 <_fstat_r+0x1c>
 8014b36:	6023      	str	r3, [r4, #0]
 8014b38:	bd38      	pop	{r3, r4, r5, pc}
 8014b3a:	bf00      	nop
 8014b3c:	20002cac 	.word	0x20002cac

08014b40 <_isatty_r>:
 8014b40:	b538      	push	{r3, r4, r5, lr}
 8014b42:	4d06      	ldr	r5, [pc, #24]	; (8014b5c <_isatty_r+0x1c>)
 8014b44:	2300      	movs	r3, #0
 8014b46:	4604      	mov	r4, r0
 8014b48:	4608      	mov	r0, r1
 8014b4a:	602b      	str	r3, [r5, #0]
 8014b4c:	f7ed facd 	bl	80020ea <_isatty>
 8014b50:	1c43      	adds	r3, r0, #1
 8014b52:	d102      	bne.n	8014b5a <_isatty_r+0x1a>
 8014b54:	682b      	ldr	r3, [r5, #0]
 8014b56:	b103      	cbz	r3, 8014b5a <_isatty_r+0x1a>
 8014b58:	6023      	str	r3, [r4, #0]
 8014b5a:	bd38      	pop	{r3, r4, r5, pc}
 8014b5c:	20002cac 	.word	0x20002cac

08014b60 <_lseek_r>:
 8014b60:	b538      	push	{r3, r4, r5, lr}
 8014b62:	4d07      	ldr	r5, [pc, #28]	; (8014b80 <_lseek_r+0x20>)
 8014b64:	4604      	mov	r4, r0
 8014b66:	4608      	mov	r0, r1
 8014b68:	4611      	mov	r1, r2
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	602a      	str	r2, [r5, #0]
 8014b6e:	461a      	mov	r2, r3
 8014b70:	f7ed fac6 	bl	8002100 <_lseek>
 8014b74:	1c43      	adds	r3, r0, #1
 8014b76:	d102      	bne.n	8014b7e <_lseek_r+0x1e>
 8014b78:	682b      	ldr	r3, [r5, #0]
 8014b7a:	b103      	cbz	r3, 8014b7e <_lseek_r+0x1e>
 8014b7c:	6023      	str	r3, [r4, #0]
 8014b7e:	bd38      	pop	{r3, r4, r5, pc}
 8014b80:	20002cac 	.word	0x20002cac

08014b84 <_read_r>:
 8014b84:	b538      	push	{r3, r4, r5, lr}
 8014b86:	4d07      	ldr	r5, [pc, #28]	; (8014ba4 <_read_r+0x20>)
 8014b88:	4604      	mov	r4, r0
 8014b8a:	4608      	mov	r0, r1
 8014b8c:	4611      	mov	r1, r2
 8014b8e:	2200      	movs	r2, #0
 8014b90:	602a      	str	r2, [r5, #0]
 8014b92:	461a      	mov	r2, r3
 8014b94:	f7ed fa54 	bl	8002040 <_read>
 8014b98:	1c43      	adds	r3, r0, #1
 8014b9a:	d102      	bne.n	8014ba2 <_read_r+0x1e>
 8014b9c:	682b      	ldr	r3, [r5, #0]
 8014b9e:	b103      	cbz	r3, 8014ba2 <_read_r+0x1e>
 8014ba0:	6023      	str	r3, [r4, #0]
 8014ba2:	bd38      	pop	{r3, r4, r5, pc}
 8014ba4:	20002cac 	.word	0x20002cac

08014ba8 <_init>:
 8014ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014baa:	bf00      	nop
 8014bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014bae:	bc08      	pop	{r3}
 8014bb0:	469e      	mov	lr, r3
 8014bb2:	4770      	bx	lr

08014bb4 <_fini>:
 8014bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bb6:	bf00      	nop
 8014bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014bba:	bc08      	pop	{r3}
 8014bbc:	469e      	mov	lr, r3
 8014bbe:	4770      	bx	lr
