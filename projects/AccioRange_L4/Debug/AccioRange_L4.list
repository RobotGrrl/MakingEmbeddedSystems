
AccioRange_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b754  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020c0  0801b904  0801b904  0002b904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d9c4  0801d9c4  0003074c  2**0
                  CONTENTS
  4 .ARM          00000008  0801d9c4  0801d9c4  0002d9c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d9cc  0801d9cc  0003074c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d9cc  0801d9cc  0002d9cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d9d0  0801d9d0  0002d9d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000074c  20000000  0801d9d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000030e4  2000074c  0801e120  0003074c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003830  0801e120  00033830  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003074c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004731c  00000000  00000000  0003077c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008be3  00000000  00000000  00077a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000038f0  00000000  00000000  00080680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003558  00000000  00000000  00083f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003af57  00000000  00000000  000874c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046ff2  00000000  00000000  000c241f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013fe4c  00000000  00000000  00109411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0024925d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000fc84  00000000  00000000  002492b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000074c 	.word	0x2000074c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801b8ec 	.word	0x0801b8ec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000750 	.word	0x20000750
 80001ec:	0801b8ec 	.word	0x0801b8ec

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000af0:	f000 b974 	b.w	8000ddc <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9d08      	ldr	r5, [sp, #32]
 8000b12:	4604      	mov	r4, r0
 8000b14:	468e      	mov	lr, r1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d14d      	bne.n	8000bb6 <__udivmoddi4+0xaa>
 8000b1a:	428a      	cmp	r2, r1
 8000b1c:	4694      	mov	ip, r2
 8000b1e:	d969      	bls.n	8000bf4 <__udivmoddi4+0xe8>
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	b152      	cbz	r2, 8000b3c <__udivmoddi4+0x30>
 8000b26:	fa01 f302 	lsl.w	r3, r1, r2
 8000b2a:	f1c2 0120 	rsb	r1, r2, #32
 8000b2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b32:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b36:	ea41 0e03 	orr.w	lr, r1, r3
 8000b3a:	4094      	lsls	r4, r2
 8000b3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b40:	0c21      	lsrs	r1, r4, #16
 8000b42:	fbbe f6f8 	udiv	r6, lr, r8
 8000b46:	fa1f f78c 	uxth.w	r7, ip
 8000b4a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b52:	fb06 f107 	mul.w	r1, r6, r7
 8000b56:	4299      	cmp	r1, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x64>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b62:	f080 811f 	bcs.w	8000da4 <__udivmoddi4+0x298>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 811c 	bls.w	8000da4 <__udivmoddi4+0x298>
 8000b6c:	3e02      	subs	r6, #2
 8000b6e:	4463      	add	r3, ip
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b78:	fb08 3310 	mls	r3, r8, r0, r3
 8000b7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b80:	fb00 f707 	mul.w	r7, r0, r7
 8000b84:	42a7      	cmp	r7, r4
 8000b86:	d90a      	bls.n	8000b9e <__udivmoddi4+0x92>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b90:	f080 810a 	bcs.w	8000da8 <__udivmoddi4+0x29c>
 8000b94:	42a7      	cmp	r7, r4
 8000b96:	f240 8107 	bls.w	8000da8 <__udivmoddi4+0x29c>
 8000b9a:	4464      	add	r4, ip
 8000b9c:	3802      	subs	r0, #2
 8000b9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba2:	1be4      	subs	r4, r4, r7
 8000ba4:	2600      	movs	r6, #0
 8000ba6:	b11d      	cbz	r5, 8000bb0 <__udivmoddi4+0xa4>
 8000ba8:	40d4      	lsrs	r4, r2
 8000baa:	2300      	movs	r3, #0
 8000bac:	e9c5 4300 	strd	r4, r3, [r5]
 8000bb0:	4631      	mov	r1, r6
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d909      	bls.n	8000bce <__udivmoddi4+0xc2>
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	f000 80ef 	beq.w	8000d9e <__udivmoddi4+0x292>
 8000bc0:	2600      	movs	r6, #0
 8000bc2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc6:	4630      	mov	r0, r6
 8000bc8:	4631      	mov	r1, r6
 8000bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bce:	fab3 f683 	clz	r6, r3
 8000bd2:	2e00      	cmp	r6, #0
 8000bd4:	d14a      	bne.n	8000c6c <__udivmoddi4+0x160>
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d302      	bcc.n	8000be0 <__udivmoddi4+0xd4>
 8000bda:	4282      	cmp	r2, r0
 8000bdc:	f200 80f9 	bhi.w	8000dd2 <__udivmoddi4+0x2c6>
 8000be0:	1a84      	subs	r4, r0, r2
 8000be2:	eb61 0303 	sbc.w	r3, r1, r3
 8000be6:	2001      	movs	r0, #1
 8000be8:	469e      	mov	lr, r3
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	d0e0      	beq.n	8000bb0 <__udivmoddi4+0xa4>
 8000bee:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bf2:	e7dd      	b.n	8000bb0 <__udivmoddi4+0xa4>
 8000bf4:	b902      	cbnz	r2, 8000bf8 <__udivmoddi4+0xec>
 8000bf6:	deff      	udf	#255	; 0xff
 8000bf8:	fab2 f282 	clz	r2, r2
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	f040 8092 	bne.w	8000d26 <__udivmoddi4+0x21a>
 8000c02:	eba1 010c 	sub.w	r1, r1, ip
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f fe8c 	uxth.w	lr, ip
 8000c0e:	2601      	movs	r6, #1
 8000c10:	0c20      	lsrs	r0, r4, #16
 8000c12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c16:	fb07 1113 	mls	r1, r7, r3, r1
 8000c1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c1e:	fb0e f003 	mul.w	r0, lr, r3
 8000c22:	4288      	cmp	r0, r1
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x12c>
 8000c26:	eb1c 0101 	adds.w	r1, ip, r1
 8000c2a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x12a>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f200 80cb 	bhi.w	8000dcc <__udivmoddi4+0x2c0>
 8000c36:	4643      	mov	r3, r8
 8000c38:	1a09      	subs	r1, r1, r0
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c40:	fb07 1110 	mls	r1, r7, r0, r1
 8000c44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c48:	fb0e fe00 	mul.w	lr, lr, r0
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d908      	bls.n	8000c62 <__udivmoddi4+0x156>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c58:	d202      	bcs.n	8000c60 <__udivmoddi4+0x154>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f200 80bb 	bhi.w	8000dd6 <__udivmoddi4+0x2ca>
 8000c60:	4608      	mov	r0, r1
 8000c62:	eba4 040e 	sub.w	r4, r4, lr
 8000c66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c6a:	e79c      	b.n	8000ba6 <__udivmoddi4+0x9a>
 8000c6c:	f1c6 0720 	rsb	r7, r6, #32
 8000c70:	40b3      	lsls	r3, r6
 8000c72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c82:	431c      	orrs	r4, r3
 8000c84:	40f9      	lsrs	r1, r7
 8000c86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c92:	0c20      	lsrs	r0, r4, #16
 8000c94:	fa1f fe8c 	uxth.w	lr, ip
 8000c98:	fb09 1118 	mls	r1, r9, r8, r1
 8000c9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ca0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	fa02 f206 	lsl.w	r2, r2, r6
 8000caa:	d90b      	bls.n	8000cc4 <__udivmoddi4+0x1b8>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000cb4:	f080 8088 	bcs.w	8000dc8 <__udivmoddi4+0x2bc>
 8000cb8:	4288      	cmp	r0, r1
 8000cba:	f240 8085 	bls.w	8000dc8 <__udivmoddi4+0x2bc>
 8000cbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000cc2:	4461      	add	r1, ip
 8000cc4:	1a09      	subs	r1, r1, r0
 8000cc6:	b2a4      	uxth	r4, r4
 8000cc8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ccc:	fb09 1110 	mls	r1, r9, r0, r1
 8000cd0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cd8:	458e      	cmp	lr, r1
 8000cda:	d908      	bls.n	8000cee <__udivmoddi4+0x1e2>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ce4:	d26c      	bcs.n	8000dc0 <__udivmoddi4+0x2b4>
 8000ce6:	458e      	cmp	lr, r1
 8000ce8:	d96a      	bls.n	8000dc0 <__udivmoddi4+0x2b4>
 8000cea:	3802      	subs	r0, #2
 8000cec:	4461      	add	r1, ip
 8000cee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cf2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cf6:	eba1 010e 	sub.w	r1, r1, lr
 8000cfa:	42a1      	cmp	r1, r4
 8000cfc:	46c8      	mov	r8, r9
 8000cfe:	46a6      	mov	lr, r4
 8000d00:	d356      	bcc.n	8000db0 <__udivmoddi4+0x2a4>
 8000d02:	d053      	beq.n	8000dac <__udivmoddi4+0x2a0>
 8000d04:	b15d      	cbz	r5, 8000d1e <__udivmoddi4+0x212>
 8000d06:	ebb3 0208 	subs.w	r2, r3, r8
 8000d0a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d0e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d12:	fa22 f306 	lsr.w	r3, r2, r6
 8000d16:	40f1      	lsrs	r1, r6
 8000d18:	431f      	orrs	r7, r3
 8000d1a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d1e:	2600      	movs	r6, #0
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	f1c2 0320 	rsb	r3, r2, #32
 8000d2a:	40d8      	lsrs	r0, r3
 8000d2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d30:	fa21 f303 	lsr.w	r3, r1, r3
 8000d34:	4091      	lsls	r1, r2
 8000d36:	4301      	orrs	r1, r0
 8000d38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3c:	fa1f fe8c 	uxth.w	lr, ip
 8000d40:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d44:	fb07 3610 	mls	r6, r7, r0, r3
 8000d48:	0c0b      	lsrs	r3, r1, #16
 8000d4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d4e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d52:	429e      	cmp	r6, r3
 8000d54:	fa04 f402 	lsl.w	r4, r4, r2
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x260>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d62:	d22f      	bcs.n	8000dc4 <__udivmoddi4+0x2b8>
 8000d64:	429e      	cmp	r6, r3
 8000d66:	d92d      	bls.n	8000dc4 <__udivmoddi4+0x2b8>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	b289      	uxth	r1, r1
 8000d70:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d74:	fb07 3316 	mls	r3, r7, r6, r3
 8000d78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d80:	428b      	cmp	r3, r1
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x28a>
 8000d84:	eb1c 0101 	adds.w	r1, ip, r1
 8000d88:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d8c:	d216      	bcs.n	8000dbc <__udivmoddi4+0x2b0>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d914      	bls.n	8000dbc <__udivmoddi4+0x2b0>
 8000d92:	3e02      	subs	r6, #2
 8000d94:	4461      	add	r1, ip
 8000d96:	1ac9      	subs	r1, r1, r3
 8000d98:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d9c:	e738      	b.n	8000c10 <__udivmoddi4+0x104>
 8000d9e:	462e      	mov	r6, r5
 8000da0:	4628      	mov	r0, r5
 8000da2:	e705      	b.n	8000bb0 <__udivmoddi4+0xa4>
 8000da4:	4606      	mov	r6, r0
 8000da6:	e6e3      	b.n	8000b70 <__udivmoddi4+0x64>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6f8      	b.n	8000b9e <__udivmoddi4+0x92>
 8000dac:	454b      	cmp	r3, r9
 8000dae:	d2a9      	bcs.n	8000d04 <__udivmoddi4+0x1f8>
 8000db0:	ebb9 0802 	subs.w	r8, r9, r2
 8000db4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000db8:	3801      	subs	r0, #1
 8000dba:	e7a3      	b.n	8000d04 <__udivmoddi4+0x1f8>
 8000dbc:	4646      	mov	r6, r8
 8000dbe:	e7ea      	b.n	8000d96 <__udivmoddi4+0x28a>
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	e794      	b.n	8000cee <__udivmoddi4+0x1e2>
 8000dc4:	4640      	mov	r0, r8
 8000dc6:	e7d1      	b.n	8000d6c <__udivmoddi4+0x260>
 8000dc8:	46d0      	mov	r8, sl
 8000dca:	e77b      	b.n	8000cc4 <__udivmoddi4+0x1b8>
 8000dcc:	3b02      	subs	r3, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	e732      	b.n	8000c38 <__udivmoddi4+0x12c>
 8000dd2:	4630      	mov	r0, r6
 8000dd4:	e709      	b.n	8000bea <__udivmoddi4+0xde>
 8000dd6:	4464      	add	r4, ip
 8000dd8:	3802      	subs	r0, #2
 8000dda:	e742      	b.n	8000c62 <__udivmoddi4+0x156>

08000ddc <__aeabi_idiv0>:
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
 8000e00:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e02:	4b2f      	ldr	r3, [pc, #188]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e04:	4a2f      	ldr	r2, [pc, #188]	; (8000ec4 <MX_ADC1_Init+0xe4>)
 8000e06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e08:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000e0e:	4b2c      	ldr	r3, [pc, #176]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e10:	2208      	movs	r2, #8
 8000e12:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e14:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e1a:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e20:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e22:	2204      	movs	r2, #4
 8000e24:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e26:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e2c:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e32:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e38:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e40:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e46:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e54:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e62:	4817      	ldr	r0, [pc, #92]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e64:	f00b fb88 	bl	800c578 <HAL_ADC_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000e6e:	f001 ffd9 	bl	8002e24 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4810      	ldr	r0, [pc, #64]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e7e:	f00c fb2d 	bl	800d4dc <HAL_ADCEx_MultiModeConfigChannel>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e88:	f001 ffcc 	bl	8002e24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_ADC1_Init+0xe8>)
 8000e8e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e90:	2306      	movs	r3, #6
 8000e92:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e98:	237f      	movs	r3, #127	; 0x7f
 8000e9a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000eaa:	f00b fe5f 	bl	800cb6c <HAL_ADC_ConfigChannel>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000eb4:	f001 ffb6 	bl	8002e24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	3728      	adds	r7, #40	; 0x28
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000768 	.word	0x20000768
 8000ec4:	50040000 	.word	0x50040000
 8000ec8:	36902000 	.word	0x36902000

08000ecc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
 8000ee0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ee2:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000ee4:	4a29      	ldr	r2, [pc, #164]	; (8000f8c <MX_ADC2_Init+0xc0>)
 8000ee6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ee8:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000eee:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ef4:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000efa:	4b23      	ldr	r3, [pc, #140]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f00:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000f02:	2204      	movs	r2, #4
 8000f04:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f06:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000f12:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f2c:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f42:	4811      	ldr	r0, [pc, #68]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000f44:	f00b fb18 	bl	800c578 <HAL_ADC_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000f4e:	f001 ff69 	bl	8002e24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_ADC2_Init+0xc4>)
 8000f54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f56:	2306      	movs	r3, #6
 8000f58:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f5e:	237f      	movs	r3, #127	; 0x7f
 8000f60:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f62:	2304      	movs	r3, #4
 8000f64:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000f70:	f00b fdfc 	bl	800cb6c <HAL_ADC_ConfigChannel>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000f7a:	f001 ff53 	bl	8002e24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200007d0 	.word	0x200007d0
 8000f8c:	50040100 	.word	0x50040100
 8000f90:	25b00200 	.word	0x25b00200

08000f94 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
 8000fa8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000faa:	4b29      	ldr	r3, [pc, #164]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000fac:	4a29      	ldr	r2, [pc, #164]	; (8001054 <MX_ADC3_Init+0xc0>)
 8000fae:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fb0:	4b27      	ldr	r3, [pc, #156]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000fb6:	4b26      	ldr	r3, [pc, #152]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fbc:	4b24      	ldr	r3, [pc, #144]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fc2:	4b23      	ldr	r3, [pc, #140]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc8:	4b21      	ldr	r3, [pc, #132]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000fca:	2204      	movs	r2, #4
 8000fcc:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000fce:	4b20      	ldr	r3, [pc, #128]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fe8:	4b19      	ldr	r3, [pc, #100]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ff4:	4b16      	ldr	r3, [pc, #88]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <MX_ADC3_Init+0xbc>)
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800100a:	4811      	ldr	r0, [pc, #68]	; (8001050 <MX_ADC3_Init+0xbc>)
 800100c:	f00b fab4 	bl	800c578 <HAL_ADC_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8001016:	f001 ff05 	bl	8002e24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_ADC3_Init+0xc4>)
 800101c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800101e:	2306      	movs	r3, #6
 8001020:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001026:	237f      	movs	r3, #127	; 0x7f
 8001028:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800102a:	2304      	movs	r3, #4
 800102c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001032:	463b      	mov	r3, r7
 8001034:	4619      	mov	r1, r3
 8001036:	4806      	ldr	r0, [pc, #24]	; (8001050 <MX_ADC3_Init+0xbc>)
 8001038:	f00b fd98 	bl	800cb6c <HAL_ADC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001042:	f001 feef 	bl	8002e24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000838 	.word	0x20000838
 8001054:	50040200 	.word	0x50040200
 8001058:	36902000 	.word	0x36902000

0800105c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08e      	sub	sp, #56	; 0x38
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a59      	ldr	r2, [pc, #356]	; (80011e0 <HAL_ADC_MspInit+0x184>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d12d      	bne.n	80010da <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800107e:	4b59      	ldr	r3, [pc, #356]	; (80011e4 <HAL_ADC_MspInit+0x188>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	4a57      	ldr	r2, [pc, #348]	; (80011e4 <HAL_ADC_MspInit+0x188>)
 8001086:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001088:	4b56      	ldr	r3, [pc, #344]	; (80011e4 <HAL_ADC_MspInit+0x188>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d10b      	bne.n	80010a8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001090:	4b55      	ldr	r3, [pc, #340]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 8001092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001094:	4a54      	ldr	r2, [pc, #336]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 8001096:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800109a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109c:	4b52      	ldr	r3, [pc, #328]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 800109e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010a4:	623b      	str	r3, [r7, #32]
 80010a6:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a8:	4b4f      	ldr	r3, [pc, #316]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 80010aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ac:	4a4e      	ldr	r2, [pc, #312]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b4:	4b4c      	ldr	r3, [pc, #304]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 80010b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	61fb      	str	r3, [r7, #28]
 80010be:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 80010c0:	2318      	movs	r3, #24
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010c4:	230b      	movs	r3, #11
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d0:	4619      	mov	r1, r3
 80010d2:	4846      	ldr	r0, [pc, #280]	; (80011ec <HAL_ADC_MspInit+0x190>)
 80010d4:	f00c fd8e 	bl	800dbf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80010d8:	e07e      	b.n	80011d8 <HAL_ADC_MspInit+0x17c>
  else if(adcHandle->Instance==ADC2)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a44      	ldr	r2, [pc, #272]	; (80011f0 <HAL_ADC_MspInit+0x194>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d146      	bne.n	8001172 <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC_CLK_ENABLED++;
 80010e4:	4b3f      	ldr	r3, [pc, #252]	; (80011e4 <HAL_ADC_MspInit+0x188>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	4a3e      	ldr	r2, [pc, #248]	; (80011e4 <HAL_ADC_MspInit+0x188>)
 80010ec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80010ee:	4b3d      	ldr	r3, [pc, #244]	; (80011e4 <HAL_ADC_MspInit+0x188>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d10b      	bne.n	800110e <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80010f6:	4b3c      	ldr	r3, [pc, #240]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	4a3b      	ldr	r2, [pc, #236]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 80010fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001102:	4b39      	ldr	r3, [pc, #228]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800110a:	61bb      	str	r3, [r7, #24]
 800110c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	4a35      	ldr	r2, [pc, #212]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111a:	4b33      	ldr	r3, [pc, #204]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	4a2f      	ldr	r2, [pc, #188]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001132:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 800113e:	2303      	movs	r3, #3
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001142:	230b      	movs	r3, #11
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114e:	4619      	mov	r1, r3
 8001150:	4826      	ldr	r0, [pc, #152]	; (80011ec <HAL_ADC_MspInit+0x190>)
 8001152:	f00c fd4f 	bl	800dbf4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 8001156:	2312      	movs	r3, #18
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800115a:	230b      	movs	r3, #11
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001166:	4619      	mov	r1, r3
 8001168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116c:	f00c fd42 	bl	800dbf4 <HAL_GPIO_Init>
}
 8001170:	e032      	b.n	80011d8 <HAL_ADC_MspInit+0x17c>
  else if(adcHandle->Instance==ADC3)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a1f      	ldr	r2, [pc, #124]	; (80011f4 <HAL_ADC_MspInit+0x198>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d12d      	bne.n	80011d8 <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC_CLK_ENABLED++;
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_ADC_MspInit+0x188>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <HAL_ADC_MspInit+0x188>)
 8001184:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <HAL_ADC_MspInit+0x188>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d10b      	bne.n	80011a6 <HAL_ADC_MspInit+0x14a>
      __HAL_RCC_ADC_CLK_ENABLE();
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	4a15      	ldr	r2, [pc, #84]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 8001194:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	4a0f      	ldr	r2, [pc, #60]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 80011ac:	f043 0320 	orr.w	r3, r3, #32
 80011b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	f003 0320 	and.w	r3, r3, #32
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 80011be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011c4:	230b      	movs	r3, #11
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d0:	4619      	mov	r1, r3
 80011d2:	4809      	ldr	r0, [pc, #36]	; (80011f8 <HAL_ADC_MspInit+0x19c>)
 80011d4:	f00c fd0e 	bl	800dbf4 <HAL_GPIO_Init>
}
 80011d8:	bf00      	nop
 80011da:	3738      	adds	r7, #56	; 0x38
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	50040000 	.word	0x50040000
 80011e4:	200008a0 	.word	0x200008a0
 80011e8:	40021000 	.word	0x40021000
 80011ec:	48000800 	.word	0x48000800
 80011f0:	50040100 	.word	0x50040100
 80011f4:	50040200 	.word	0x50040200
 80011f8:	48001400 	.word	0x48001400

080011fc <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <MX_DCMI_Init+0x60>)
 8001202:	4a17      	ldr	r2, [pc, #92]	; (8001260 <MX_DCMI_Init+0x64>)
 8001204:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <MX_DCMI_Init+0x60>)
 8001208:	2200      	movs	r2, #0
 800120a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <MX_DCMI_Init+0x60>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <MX_DCMI_Init+0x60>)
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001218:	4b10      	ldr	r3, [pc, #64]	; (800125c <MX_DCMI_Init+0x60>)
 800121a:	2200      	movs	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <MX_DCMI_Init+0x60>)
 8001220:	2200      	movs	r2, #0
 8001222:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001224:	4b0d      	ldr	r3, [pc, #52]	; (800125c <MX_DCMI_Init+0x60>)
 8001226:	2200      	movs	r2, #0
 8001228:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_DCMI_Init+0x60>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <MX_DCMI_Init+0x60>)
 8001232:	2200      	movs	r2, #0
 8001234:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_DCMI_Init+0x60>)
 8001238:	2200      	movs	r2, #0
 800123a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <MX_DCMI_Init+0x60>)
 800123e:	2200      	movs	r2, #0
 8001240:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_DCMI_Init+0x60>)
 8001244:	2200      	movs	r2, #0
 8001246:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001248:	4804      	ldr	r0, [pc, #16]	; (800125c <MX_DCMI_Init+0x60>)
 800124a:	f00c fb41 	bl	800d8d0 <HAL_DCMI_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001254:	f001 fde6 	bl	8002e24 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200008a4 	.word	0x200008a4
 8001260:	50050000 	.word	0x50050000

08001264 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08c      	sub	sp, #48	; 0x30
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a33      	ldr	r2, [pc, #204]	; (8001350 <HAL_DCMI_MspInit+0xec>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d160      	bne.n	8001348 <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001286:	4b33      	ldr	r3, [pc, #204]	; (8001354 <HAL_DCMI_MspInit+0xf0>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	4a32      	ldr	r2, [pc, #200]	; (8001354 <HAL_DCMI_MspInit+0xf0>)
 800128c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001292:	4b30      	ldr	r3, [pc, #192]	; (8001354 <HAL_DCMI_MspInit+0xf0>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800129e:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <HAL_DCMI_MspInit+0xf0>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	4a2c      	ldr	r2, [pc, #176]	; (8001354 <HAL_DCMI_MspInit+0xf0>)
 80012a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012aa:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <HAL_DCMI_MspInit+0xf0>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80012b6:	4b27      	ldr	r3, [pc, #156]	; (8001354 <HAL_DCMI_MspInit+0xf0>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	4a26      	ldr	r2, [pc, #152]	; (8001354 <HAL_DCMI_MspInit+0xf0>)
 80012bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c2:	4b24      	ldr	r3, [pc, #144]	; (8001354 <HAL_DCMI_MspInit+0xf0>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ce:	4b21      	ldr	r3, [pc, #132]	; (8001354 <HAL_DCMI_MspInit+0xf0>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	4a20      	ldr	r2, [pc, #128]	; (8001354 <HAL_DCMI_MspInit+0xf0>)
 80012d4:	f043 0310 	orr.w	r3, r3, #16
 80012d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <HAL_DCMI_MspInit+0xf0>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012de:	f003 0310 	and.w	r3, r3, #16
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 80012e6:	f645 7320 	movw	r3, #24352	; 0x5f20
 80012ea:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80012f8:	230a      	movs	r3, #10
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	4619      	mov	r1, r3
 8001302:	4815      	ldr	r0, [pc, #84]	; (8001358 <HAL_DCMI_MspInit+0xf4>)
 8001304:	f00c fc76 	bl	800dbf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8001308:	23b0      	movs	r3, #176	; 0xb0
 800130a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001318:	230a      	movs	r3, #10
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	480e      	ldr	r0, [pc, #56]	; (800135c <HAL_DCMI_MspInit+0xf8>)
 8001324:	f00c fc66 	bl	800dbf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8001328:	2320      	movs	r3, #32
 800132a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001338:	230a      	movs	r3, #10
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	4807      	ldr	r0, [pc, #28]	; (8001360 <HAL_DCMI_MspInit+0xfc>)
 8001344:	f00c fc56 	bl	800dbf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8001348:	bf00      	nop
 800134a:	3730      	adds	r7, #48	; 0x30
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	50050000 	.word	0x50050000
 8001354:	40021000 	.word	0x40021000
 8001358:	48001c00 	.word	0x48001c00
 800135c:	48002000 	.word	0x48002000
 8001360:	48001000 	.word	0x48001000

08001364 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;
DFSDM_Channel_HandleTypeDef hdfsdm1_channel2;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001368:	4b30      	ldr	r3, [pc, #192]	; (800142c <MX_DFSDM1_Init+0xc8>)
 800136a:	4a31      	ldr	r2, [pc, #196]	; (8001430 <MX_DFSDM1_Init+0xcc>)
 800136c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800136e:	4b2f      	ldr	r3, [pc, #188]	; (800142c <MX_DFSDM1_Init+0xc8>)
 8001370:	2201      	movs	r2, #1
 8001372:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001374:	4b2d      	ldr	r3, [pc, #180]	; (800142c <MX_DFSDM1_Init+0xc8>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800137a:	4b2c      	ldr	r3, [pc, #176]	; (800142c <MX_DFSDM1_Init+0xc8>)
 800137c:	2202      	movs	r2, #2
 800137e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001380:	4b2a      	ldr	r3, [pc, #168]	; (800142c <MX_DFSDM1_Init+0xc8>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001386:	4b29      	ldr	r3, [pc, #164]	; (800142c <MX_DFSDM1_Init+0xc8>)
 8001388:	2200      	movs	r2, #0
 800138a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800138c:	4b27      	ldr	r3, [pc, #156]	; (800142c <MX_DFSDM1_Init+0xc8>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001392:	4b26      	ldr	r3, [pc, #152]	; (800142c <MX_DFSDM1_Init+0xc8>)
 8001394:	2200      	movs	r2, #0
 8001396:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001398:	4b24      	ldr	r3, [pc, #144]	; (800142c <MX_DFSDM1_Init+0xc8>)
 800139a:	2204      	movs	r2, #4
 800139c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800139e:	4b23      	ldr	r3, [pc, #140]	; (800142c <MX_DFSDM1_Init+0xc8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80013a4:	4b21      	ldr	r3, [pc, #132]	; (800142c <MX_DFSDM1_Init+0xc8>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80013aa:	4b20      	ldr	r3, [pc, #128]	; (800142c <MX_DFSDM1_Init+0xc8>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80013b0:	4b1e      	ldr	r3, [pc, #120]	; (800142c <MX_DFSDM1_Init+0xc8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80013b6:	481d      	ldr	r0, [pc, #116]	; (800142c <MX_DFSDM1_Init+0xc8>)
 80013b8:	f00c fb10 	bl	800d9dc <HAL_DFSDM_ChannelInit>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80013c2:	f001 fd2f 	bl	8002e24 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80013c6:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 80013c8:	4a1b      	ldr	r2, [pc, #108]	; (8001438 <MX_DFSDM1_Init+0xd4>)
 80013ca:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80013d2:	4b18      	ldr	r3, [pc, #96]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 80013da:	2202      	movs	r2, #2
 80013dc:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80013ea:	4b12      	ldr	r3, [pc, #72]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 80013ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013f0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80013f8:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 80013fa:	2204      	movs	r2, #4
 80013fc:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 8001400:	2200      	movs	r2, #0
 8001402:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 8001406:	2201      	movs	r2, #1
 8001408:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 800140c:	2200      	movs	r2, #0
 800140e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 8001412:	2200      	movs	r2, #0
 8001414:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8001416:	4807      	ldr	r0, [pc, #28]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 8001418:	f00c fae0 	bl	800d9dc <HAL_DFSDM_ChannelInit>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 8001422:	f001 fcff 	bl	8002e24 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000908 	.word	0x20000908
 8001430:	40016020 	.word	0x40016020
 8001434:	20000940 	.word	0x20000940
 8001438:	40016040 	.word	0x40016040

0800143c <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b0ae      	sub	sp, #184	; 0xb8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001454:	f107 0318 	add.w	r3, r7, #24
 8001458:	228c      	movs	r2, #140	; 0x8c
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f019 f863 	bl	801a528 <memset>
  if(DFSDM1_Init == 0)
 8001462:	4b36      	ldr	r3, [pc, #216]	; (800153c <HAL_DFSDM_ChannelMspInit+0x100>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d163      	bne.n	8001532 <HAL_DFSDM_ChannelMspInit+0xf6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800146a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800146e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001476:	f107 0318 	add.w	r3, r7, #24
 800147a:	4618      	mov	r0, r3
 800147c:	f010 f9e0 	bl	8011840 <HAL_RCCEx_PeriphCLKConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001486:	f001 fccd 	bl	8002e24 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800148a:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <HAL_DFSDM_ChannelMspInit+0x104>)
 800148c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148e:	4a2c      	ldr	r2, [pc, #176]	; (8001540 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001490:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001494:	6613      	str	r3, [r2, #96]	; 0x60
 8001496:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	4b27      	ldr	r3, [pc, #156]	; (8001540 <HAL_DFSDM_ChannelMspInit+0x104>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	4a26      	ldr	r2, [pc, #152]	; (8001540 <HAL_DFSDM_ChannelMspInit+0x104>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ae:	4b24      	ldr	r3, [pc, #144]	; (8001540 <HAL_DFSDM_ChannelMspInit+0x104>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	4b21      	ldr	r3, [pc, #132]	; (8001540 <HAL_DFSDM_ChannelMspInit+0x104>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	4a20      	ldr	r2, [pc, #128]	; (8001540 <HAL_DFSDM_ChannelMspInit+0x104>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c6:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <HAL_DFSDM_ChannelMspInit+0x104>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 80014d2:	2384      	movs	r3, #132	; 0x84
 80014d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80014ea:	2306      	movs	r3, #6
 80014ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014f4:	4619      	mov	r1, r3
 80014f6:	4813      	ldr	r0, [pc, #76]	; (8001544 <HAL_DFSDM_ChannelMspInit+0x108>)
 80014f8:	f00c fb7c 	bl	800dbf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 80014fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001500:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001516:	2306      	movs	r3, #6
 8001518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 800151c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001520:	4619      	mov	r1, r3
 8001522:	4809      	ldr	r0, [pc, #36]	; (8001548 <HAL_DFSDM_ChannelMspInit+0x10c>)
 8001524:	f00c fb66 	bl	800dbf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <HAL_DFSDM_ChannelMspInit+0x100>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	4a03      	ldr	r2, [pc, #12]	; (800153c <HAL_DFSDM_ChannelMspInit+0x100>)
 8001530:	6013      	str	r3, [r2, #0]
  }
}
 8001532:	bf00      	nop
 8001534:	37b8      	adds	r7, #184	; 0xb8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000978 	.word	0x20000978
 8001540:	40021000 	.word	0x40021000
 8001544:	48000800 	.word	0x48000800
 8001548:	48000400 	.word	0x48000400

0800154c <MX_FMC_Init>:
SRAM_HandleTypeDef hsram1;
SRAM_HandleTypeDef hsram2;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001552:	463b      	mov	r3, r7
 8001554:	2220      	movs	r2, #32
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f018 ffe5 	bl	801a528 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800155e:	4b4f      	ldr	r3, [pc, #316]	; (800169c <MX_FMC_Init+0x150>)
 8001560:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001564:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001566:	4b4d      	ldr	r3, [pc, #308]	; (800169c <MX_FMC_Init+0x150>)
 8001568:	4a4d      	ldr	r2, [pc, #308]	; (80016a0 <MX_FMC_Init+0x154>)
 800156a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 800156c:	4b4b      	ldr	r3, [pc, #300]	; (800169c <MX_FMC_Init+0x150>)
 800156e:	2202      	movs	r2, #2
 8001570:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001572:	4b4a      	ldr	r3, [pc, #296]	; (800169c <MX_FMC_Init+0x150>)
 8001574:	2200      	movs	r2, #0
 8001576:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001578:	4b48      	ldr	r3, [pc, #288]	; (800169c <MX_FMC_Init+0x150>)
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800157e:	4b47      	ldr	r3, [pc, #284]	; (800169c <MX_FMC_Init+0x150>)
 8001580:	2210      	movs	r2, #16
 8001582:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001584:	4b45      	ldr	r3, [pc, #276]	; (800169c <MX_FMC_Init+0x150>)
 8001586:	2200      	movs	r2, #0
 8001588:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800158a:	4b44      	ldr	r3, [pc, #272]	; (800169c <MX_FMC_Init+0x150>)
 800158c:	2200      	movs	r2, #0
 800158e:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001590:	4b42      	ldr	r3, [pc, #264]	; (800169c <MX_FMC_Init+0x150>)
 8001592:	2200      	movs	r2, #0
 8001594:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8001596:	4b41      	ldr	r3, [pc, #260]	; (800169c <MX_FMC_Init+0x150>)
 8001598:	2200      	movs	r2, #0
 800159a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800159c:	4b3f      	ldr	r3, [pc, #252]	; (800169c <MX_FMC_Init+0x150>)
 800159e:	2200      	movs	r2, #0
 80015a0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80015a2:	4b3e      	ldr	r3, [pc, #248]	; (800169c <MX_FMC_Init+0x150>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80015a8:	4b3c      	ldr	r3, [pc, #240]	; (800169c <MX_FMC_Init+0x150>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80015ae:	4b3b      	ldr	r3, [pc, #236]	; (800169c <MX_FMC_Init+0x150>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80015b4:	4b39      	ldr	r3, [pc, #228]	; (800169c <MX_FMC_Init+0x150>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80015ba:	4b38      	ldr	r3, [pc, #224]	; (800169c <MX_FMC_Init+0x150>)
 80015bc:	2200      	movs	r2, #0
 80015be:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80015c0:	4b36      	ldr	r3, [pc, #216]	; (800169c <MX_FMC_Init+0x150>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80015c6:	230f      	movs	r3, #15
 80015c8:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80015ca:	230f      	movs	r3, #15
 80015cc:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 80015ce:	23ff      	movs	r3, #255	; 0xff
 80015d0:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 80015d2:	230f      	movs	r3, #15
 80015d4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80015d6:	2310      	movs	r3, #16
 80015d8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80015da:	2311      	movs	r3, #17
 80015dc:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80015e2:	463b      	mov	r3, r7
 80015e4:	2200      	movs	r2, #0
 80015e6:	4619      	mov	r1, r3
 80015e8:	482c      	ldr	r0, [pc, #176]	; (800169c <MX_FMC_Init+0x150>)
 80015ea:	f012 fcfe 	bl	8013fea <HAL_SRAM_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 80015f4:	f001 fc16 	bl	8002e24 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 80015f8:	4b2a      	ldr	r3, [pc, #168]	; (80016a4 <MX_FMC_Init+0x158>)
 80015fa:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80015fe:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001600:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <MX_FMC_Init+0x158>)
 8001602:	4a27      	ldr	r2, [pc, #156]	; (80016a0 <MX_FMC_Init+0x154>)
 8001604:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 8001606:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <MX_FMC_Init+0x158>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800160c:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <MX_FMC_Init+0x158>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001612:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <MX_FMC_Init+0x158>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001618:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <MX_FMC_Init+0x158>)
 800161a:	2210      	movs	r2, #16
 800161c:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800161e:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <MX_FMC_Init+0x158>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <MX_FMC_Init+0x158>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800162a:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <MX_FMC_Init+0x158>)
 800162c:	2200      	movs	r2, #0
 800162e:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <MX_FMC_Init+0x158>)
 8001632:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001636:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <MX_FMC_Init+0x158>)
 800163a:	2200      	movs	r2, #0
 800163c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <MX_FMC_Init+0x158>)
 8001640:	2200      	movs	r2, #0
 8001642:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001644:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <MX_FMC_Init+0x158>)
 8001646:	2200      	movs	r2, #0
 8001648:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800164a:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <MX_FMC_Init+0x158>)
 800164c:	2200      	movs	r2, #0
 800164e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <MX_FMC_Init+0x158>)
 8001652:	2200      	movs	r2, #0
 8001654:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <MX_FMC_Init+0x158>)
 8001658:	2200      	movs	r2, #0
 800165a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_FMC_Init+0x158>)
 800165e:	2200      	movs	r2, #0
 8001660:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001662:	230f      	movs	r3, #15
 8001664:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8001666:	230f      	movs	r3, #15
 8001668:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 800166a:	23ff      	movs	r3, #255	; 0xff
 800166c:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 800166e:	230f      	movs	r3, #15
 8001670:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001672:	2310      	movs	r3, #16
 8001674:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001676:	2311      	movs	r3, #17
 8001678:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 800167e:	463b      	mov	r3, r7
 8001680:	2200      	movs	r2, #0
 8001682:	4619      	mov	r1, r3
 8001684:	4807      	ldr	r0, [pc, #28]	; (80016a4 <MX_FMC_Init+0x158>)
 8001686:	f012 fcb0 	bl	8013fea <HAL_SRAM_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 8001690:	f001 fbc8 	bl	8002e24 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001694:	bf00      	nop
 8001696:	3720      	adds	r7, #32
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	2000097c 	.word	0x2000097c
 80016a0:	a0000104 	.word	0xa0000104
 80016a4:	200009cc 	.word	0x200009cc

080016a8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80016bc:	4b2b      	ldr	r3, [pc, #172]	; (800176c <HAL_FMC_MspInit+0xc4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d14f      	bne.n	8001764 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 80016c4:	4b29      	ldr	r3, [pc, #164]	; (800176c <HAL_FMC_MspInit+0xc4>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80016ca:	4b29      	ldr	r3, [pc, #164]	; (8001770 <HAL_FMC_MspInit+0xc8>)
 80016cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ce:	4a28      	ldr	r2, [pc, #160]	; (8001770 <HAL_FMC_MspInit+0xc8>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6513      	str	r3, [r2, #80]	; 0x50
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <HAL_FMC_MspInit+0xc8>)
 80016d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 80016e2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80016e6:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016f4:	230c      	movs	r3, #12
 80016f6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	4619      	mov	r1, r3
 80016fc:	481d      	ldr	r0, [pc, #116]	; (8001774 <HAL_FMC_MspInit+0xcc>)
 80016fe:	f00c fa79 	bl	800dbf4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 8001702:	f240 233f 	movw	r3, #575	; 0x23f
 8001706:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001714:	230c      	movs	r3, #12
 8001716:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	4619      	mov	r1, r3
 800171c:	4816      	ldr	r0, [pc, #88]	; (8001778 <HAL_FMC_MspInit+0xd0>)
 800171e:	f00c fa69 	bl	800dbf4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 8001722:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8001726:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001734:	230c      	movs	r3, #12
 8001736:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	4619      	mov	r1, r3
 800173c:	480f      	ldr	r0, [pc, #60]	; (800177c <HAL_FMC_MspInit+0xd4>)
 800173e:	f00c fa59 	bl	800dbf4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8001742:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001746:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	2303      	movs	r3, #3
 8001752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001754:	230c      	movs	r3, #12
 8001756:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	4619      	mov	r1, r3
 800175c:	4808      	ldr	r0, [pc, #32]	; (8001780 <HAL_FMC_MspInit+0xd8>)
 800175e:	f00c fa49 	bl	800dbf4 <HAL_GPIO_Init>
 8001762:	e000      	b.n	8001766 <HAL_FMC_MspInit+0xbe>
    return;
 8001764:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000a1c 	.word	0x20000a1c
 8001770:	40021000 	.word	0x40021000
 8001774:	48001000 	.word	0x48001000
 8001778:	48001800 	.word	0x48001800
 800177c:	48000c00 	.word	0x48000c00
 8001780:	48001400 	.word	0x48001400

08001784 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800178c:	f7ff ff8c 	bl	80016a8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <MX_GPIO_Init>:
     PH13   ------> TIM8_CH1N
     PB9   ------> S_TIM4_CH4
     PA8   ------> LPTIM2_OUT
*/
void MX_GPIO_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08e      	sub	sp, #56	; 0x38
 800179c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80017ae:	4bb4      	ldr	r3, [pc, #720]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	4ab3      	ldr	r2, [pc, #716]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 80017b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ba:	4bb1      	ldr	r3, [pc, #708]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c2:	623b      	str	r3, [r7, #32]
 80017c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017c6:	4bae      	ldr	r3, [pc, #696]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	4aad      	ldr	r2, [pc, #692]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 80017cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d2:	4bab      	ldr	r3, [pc, #684]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017da:	61fb      	str	r3, [r7, #28]
 80017dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017de:	4ba8      	ldr	r3, [pc, #672]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	4aa7      	ldr	r2, [pc, #668]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 80017e4:	f043 0310 	orr.w	r3, r3, #16
 80017e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ea:	4ba5      	ldr	r3, [pc, #660]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	61bb      	str	r3, [r7, #24]
 80017f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f6:	4ba2      	ldr	r3, [pc, #648]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	4aa1      	ldr	r2, [pc, #644]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 80017fc:	f043 0302 	orr.w	r3, r3, #2
 8001800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001802:	4b9f      	ldr	r3, [pc, #636]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	4b9c      	ldr	r3, [pc, #624]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	4a9b      	ldr	r2, [pc, #620]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181a:	4b99      	ldr	r3, [pc, #612]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001826:	4b96      	ldr	r3, [pc, #600]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	4a95      	ldr	r2, [pc, #596]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 800182c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001832:	4b93      	ldr	r3, [pc, #588]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 800183e:	f00f f8a7 	bl	8010990 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001842:	4b8f      	ldr	r3, [pc, #572]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	4a8e      	ldr	r2, [pc, #568]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 8001848:	f043 0308 	orr.w	r3, r3, #8
 800184c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184e:	4b8c      	ldr	r3, [pc, #560]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800185a:	4b89      	ldr	r3, [pc, #548]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	4a88      	ldr	r2, [pc, #544]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001866:	4b86      	ldr	r3, [pc, #536]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001872:	4b83      	ldr	r3, [pc, #524]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	4a82      	ldr	r2, [pc, #520]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 8001878:	f043 0320 	orr.w	r3, r3, #32
 800187c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187e:	4b80      	ldr	r3, [pc, #512]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	f003 0320 	and.w	r3, r3, #32
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LCD_BL_Pin|ARD_D4_Pin, GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	f640 0101 	movw	r1, #2049	; 0x801
 8001890:	487c      	ldr	r0, [pc, #496]	; (8001a84 <MX_GPIO_Init+0x2ec>)
 8001892:	f00c fc33 	bl	800e0fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 8001896:	2200      	movs	r2, #0
 8001898:	2143      	movs	r1, #67	; 0x43
 800189a:	487b      	ldr	r0, [pc, #492]	; (8001a88 <MX_GPIO_Init+0x2f0>)
 800189c:	f00c fc2e 	bl	800e0fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2140      	movs	r1, #64	; 0x40
 80018a4:	4879      	ldr	r0, [pc, #484]	; (8001a8c <MX_GPIO_Init+0x2f4>)
 80018a6:	f00c fc29 	bl	800e0fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARD_D2_Pin|ARD_D7_Pin, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 80018b0:	4877      	ldr	r0, [pc, #476]	; (8001a90 <MX_GPIO_Init+0x2f8>)
 80018b2:	f00c fc23 	bl	800e0fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018bc:	4875      	ldr	r0, [pc, #468]	; (8001a94 <MX_GPIO_Init+0x2fc>)
 80018be:	f00c fc1d 	bl	800e0fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin;
 80018c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018ce:	2302      	movs	r3, #2
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_DOWN_GPIO_Port, &GPIO_InitStruct);
 80018d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d6:	4619      	mov	r1, r3
 80018d8:	486a      	ldr	r0, [pc, #424]	; (8001a84 <MX_GPIO_Init+0x2ec>)
 80018da:	f00c f98b 	bl	800dbf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 80018de:	2304      	movs	r3, #4
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 80018ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f0:	4619      	mov	r1, r3
 80018f2:	4865      	ldr	r0, [pc, #404]	; (8001a88 <MX_GPIO_Init+0x2f0>)
 80018f4:	f00c f97e 	bl	800dbf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|ARD_D4_Pin;
 80018f8:	f640 0301 	movw	r3, #2049	; 0x801
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fe:	2301      	movs	r3, #1
 8001900:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800190a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190e:	4619      	mov	r1, r3
 8001910:	485c      	ldr	r0, [pc, #368]	; (8001a84 <MX_GPIO_Init+0x2ec>)
 8001912:	f00c f96f 	bl	800dbf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_LEFT_Pin;
 8001916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800191c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001922:	2302      	movs	r3, #2
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_LEFT_GPIO_Port, &GPIO_InitStruct);
 8001926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192a:	4619      	mov	r1, r3
 800192c:	4855      	ldr	r0, [pc, #340]	; (8001a84 <MX_GPIO_Init+0x2ec>)
 800192e:	f00c f961 	bl	800dbf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001932:	2340      	movs	r3, #64	; 0x40
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001942:	2303      	movs	r3, #3
 8001944:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800194a:	4619      	mov	r1, r3
 800194c:	484d      	ldr	r0, [pc, #308]	; (8001a84 <MX_GPIO_Init+0x2ec>)
 800194e:	f00c f951 	bl	800dbf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 8001952:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001960:	2300      	movs	r3, #0
 8001962:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001964:	2303      	movs	r3, #3
 8001966:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196c:	4619      	mov	r1, r3
 800196e:	4846      	ldr	r0, [pc, #280]	; (8001a88 <MX_GPIO_Init+0x2f0>)
 8001970:	f00c f940 	bl	800dbf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_UP_Pin;
 8001974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800197a:	2300      	movs	r3, #0
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800197e:	2302      	movs	r3, #2
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_UP_GPIO_Port, &GPIO_InitStruct);
 8001982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001986:	4619      	mov	r1, r3
 8001988:	483e      	ldr	r0, [pc, #248]	; (8001a84 <MX_GPIO_Init+0x2ec>)
 800198a:	f00c f933 	bl	800dbf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 800198e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019a0:	2302      	movs	r3, #2
 80019a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 80019a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a8:	4619      	mov	r1, r3
 80019aa:	483a      	ldr	r0, [pc, #232]	; (8001a94 <MX_GPIO_Init+0x2fc>)
 80019ac:	f00c f922 	bl	800dbf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 80019bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c0:	4619      	mov	r1, r3
 80019c2:	4831      	ldr	r0, [pc, #196]	; (8001a88 <MX_GPIO_Init+0x2f0>)
 80019c4:	f00c f916 	bl	800dbf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 80019c8:	2343      	movs	r3, #67	; 0x43
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019cc:	2301      	movs	r3, #1
 80019ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d4:	2300      	movs	r3, #0
 80019d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019dc:	4619      	mov	r1, r3
 80019de:	482a      	ldr	r0, [pc, #168]	; (8001a88 <MX_GPIO_Init+0x2f0>)
 80019e0:	f00c f908 	bl	800dbf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 80019e4:	2340      	movs	r3, #64	; 0x40
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e8:	2301      	movs	r3, #1
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 80019f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f8:	4619      	mov	r1, r3
 80019fa:	4824      	ldr	r0, [pc, #144]	; (8001a8c <MX_GPIO_Init+0x2f4>)
 80019fc:	f00c f8fa 	bl	800dbf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001a00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8001a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a14:	4619      	mov	r1, r3
 8001a16:	481e      	ldr	r0, [pc, #120]	; (8001a90 <MX_GPIO_Init+0x2f8>)
 8001a18:	f00c f8ec 	bl	800dbf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = ARD_D2_Pin|ARD_D7_Pin;
 8001a1c:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a22:	2301      	movs	r3, #1
 8001a24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a32:	4619      	mov	r1, r3
 8001a34:	4816      	ldr	r0, [pc, #88]	; (8001a90 <MX_GPIO_Init+0x2f8>)
 8001a36:	f00c f8dd 	bl	800dbf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 8001a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 8001a4c:	230e      	movs	r3, #14
 8001a4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a54:	4619      	mov	r1, r3
 8001a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a5a:	f00c f8cb 	bl	800dbf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8001a5e:	2320      	movs	r3, #32
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a70:	4619      	mov	r1, r3
 8001a72:	4806      	ldr	r0, [pc, #24]	; (8001a8c <MX_GPIO_Init+0x2f4>)
 8001a74:	f00c f8be 	bl	800dbf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 8001a78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a7c:	e00c      	b.n	8001a98 <MX_GPIO_Init+0x300>
 8001a7e:	bf00      	nop
 8001a80:	40021000 	.word	0x40021000
 8001a84:	48002000 	.word	0x48002000
 8001a88:	48001c00 	.word	0x48001c00
 8001a8c:	48000800 	.word	0x48000800
 8001a90:	48001800 	.word	0x48001800
 8001a94:	48000400 	.word	0x48000400
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4819      	ldr	r0, [pc, #100]	; (8001b10 <MX_GPIO_Init+0x378>)
 8001aac:	f00c f8a2 	bl	800dbf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4814      	ldr	r0, [pc, #80]	; (8001b14 <MX_GPIO_Init+0x37c>)
 8001ac4:	f00c f896 	bl	800dbf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001ac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ace:	2311      	movs	r3, #17
 8001ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ade:	4619      	mov	r1, r3
 8001ae0:	480c      	ldr	r0, [pc, #48]	; (8001b14 <MX_GPIO_Init+0x37c>)
 8001ae2:	f00c f887 	bl	800dbf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2017      	movs	r0, #23
 8001aec:	f00b fea5 	bl	800d83a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001af0:	2017      	movs	r0, #23
 8001af2:	f00b febe 	bl	800d872 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	2028      	movs	r0, #40	; 0x28
 8001afc:	f00b fe9d 	bl	800d83a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b00:	2028      	movs	r0, #40	; 0x28
 8001b02:	f00b feb6 	bl	800d872 <HAL_NVIC_EnableIRQ>

}
 8001b06:	bf00      	nop
 8001b08:	3738      	adds	r7, #56	; 0x38
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	48001400 	.word	0x48001400
 8001b14:	48000400 	.word	0x48000400

08001b18 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b1e:	4a1c      	ldr	r2, [pc, #112]	; (8001b90 <MX_I2C1_Init+0x78>)
 8001b20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001b22:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b24:	4a1b      	ldr	r2, [pc, #108]	; (8001b94 <MX_I2C1_Init+0x7c>)
 8001b26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b34:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b52:	480e      	ldr	r0, [pc, #56]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b54:	f00c fb02 	bl	800e15c <HAL_I2C_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b5e:	f001 f961 	bl	8002e24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b62:	2100      	movs	r1, #0
 8001b64:	4809      	ldr	r0, [pc, #36]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b66:	f00d fc05 	bl	800f374 <HAL_I2CEx_ConfigAnalogFilter>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b70:	f001 f958 	bl	8002e24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b74:	2100      	movs	r1, #0
 8001b76:	4805      	ldr	r0, [pc, #20]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b78:	f00d fc47 	bl	800f40a <HAL_I2CEx_ConfigDigitalFilter>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b82:	f001 f94f 	bl	8002e24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000a20 	.word	0x20000a20
 8001b90:	40005400 	.word	0x40005400
 8001b94:	20303e5d 	.word	0x20303e5d

08001b98 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <MX_I2C2_Init+0x74>)
 8001b9e:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <MX_I2C2_Init+0x78>)
 8001ba0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001ba2:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <MX_I2C2_Init+0x74>)
 8001ba4:	4a1b      	ldr	r2, [pc, #108]	; (8001c14 <MX_I2C2_Init+0x7c>)
 8001ba6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001ba8:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <MX_I2C2_Init+0x74>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bae:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <MX_I2C2_Init+0x74>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bb4:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <MX_I2C2_Init+0x74>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001bba:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <MX_I2C2_Init+0x74>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <MX_I2C2_Init+0x74>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <MX_I2C2_Init+0x74>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <MX_I2C2_Init+0x74>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001bd2:	480e      	ldr	r0, [pc, #56]	; (8001c0c <MX_I2C2_Init+0x74>)
 8001bd4:	f00c fac2 	bl	800e15c <HAL_I2C_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001bde:	f001 f921 	bl	8002e24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001be2:	2100      	movs	r1, #0
 8001be4:	4809      	ldr	r0, [pc, #36]	; (8001c0c <MX_I2C2_Init+0x74>)
 8001be6:	f00d fbc5 	bl	800f374 <HAL_I2CEx_ConfigAnalogFilter>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001bf0:	f001 f918 	bl	8002e24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4805      	ldr	r0, [pc, #20]	; (8001c0c <MX_I2C2_Init+0x74>)
 8001bf8:	f00d fc07 	bl	800f40a <HAL_I2CEx_ConfigDigitalFilter>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001c02:	f001 f90f 	bl	8002e24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000a74 	.word	0x20000a74
 8001c10:	40005800 	.word	0x40005800
 8001c14:	20303e5d 	.word	0x20303e5d

08001c18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b0b0      	sub	sp, #192	; 0xc0
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c30:	f107 0320 	add.w	r3, r7, #32
 8001c34:	228c      	movs	r2, #140	; 0x8c
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f018 fc75 	bl	801a528 <memset>
  if(i2cHandle->Instance==I2C1)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a53      	ldr	r2, [pc, #332]	; (8001d90 <HAL_I2C_MspInit+0x178>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d13c      	bne.n	8001cc2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c48:	2340      	movs	r3, #64	; 0x40
 8001c4a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c50:	f107 0320 	add.w	r3, r7, #32
 8001c54:	4618      	mov	r0, r3
 8001c56:	f00f fdf3 	bl	8011840 <HAL_RCCEx_PeriphCLKConfig>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c60:	f001 f8e0 	bl	8002e24 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c64:	4b4b      	ldr	r3, [pc, #300]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c68:	4a4a      	ldr	r2, [pc, #296]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001c6a:	f043 0302 	orr.w	r3, r3, #2
 8001c6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c70:	4b48      	ldr	r3, [pc, #288]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001c7c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c84:	2312      	movs	r3, #18
 8001c86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c90:	2303      	movs	r3, #3
 8001c92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c96:	2304      	movs	r3, #4
 8001c98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	483d      	ldr	r0, [pc, #244]	; (8001d98 <HAL_I2C_MspInit+0x180>)
 8001ca4:	f00b ffa6 	bl	800dbf4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ca8:	4b3a      	ldr	r3, [pc, #232]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cac:	4a39      	ldr	r2, [pc, #228]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001cae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cb2:	6593      	str	r3, [r2, #88]	; 0x58
 8001cb4:	4b37      	ldr	r3, [pc, #220]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001cc0:	e061      	b.n	8001d86 <HAL_I2C_MspInit+0x16e>
  else if(i2cHandle->Instance==I2C2)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a35      	ldr	r2, [pc, #212]	; (8001d9c <HAL_I2C_MspInit+0x184>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d15c      	bne.n	8001d86 <HAL_I2C_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd4:	f107 0320 	add.w	r3, r7, #32
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f00f fdb1 	bl	8011840 <HAL_RCCEx_PeriphCLKConfig>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001ce4:	f001 f89e 	bl	8002e24 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ce8:	4b2a      	ldr	r3, [pc, #168]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cec:	4a29      	ldr	r2, [pc, #164]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf4:	4b27      	ldr	r3, [pc, #156]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d00:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d04:	4a23      	ldr	r2, [pc, #140]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001d06:	f043 0302 	orr.w	r3, r3, #2
 8001d0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0c:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8001d18:	2310      	movs	r3, #16
 8001d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d1e:	2312      	movs	r3, #18
 8001d20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d24:	2301      	movs	r3, #1
 8001d26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d30:	2304      	movs	r3, #4
 8001d32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8001d36:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4818      	ldr	r0, [pc, #96]	; (8001da0 <HAL_I2C_MspInit+0x188>)
 8001d3e:	f00b ff59 	bl	800dbf4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8001d42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d4a:	2312      	movs	r3, #18
 8001d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d50:	2301      	movs	r3, #1
 8001d52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d56:	2303      	movs	r3, #3
 8001d58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d5c:	2304      	movs	r3, #4
 8001d5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8001d62:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d66:	4619      	mov	r1, r3
 8001d68:	480b      	ldr	r0, [pc, #44]	; (8001d98 <HAL_I2C_MspInit+0x180>)
 8001d6a:	f00b ff43 	bl	800dbf4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d72:	4a08      	ldr	r2, [pc, #32]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001d74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d78:	6593      	str	r3, [r2, #88]	; 0x58
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
}
 8001d86:	bf00      	nop
 8001d88:	37c0      	adds	r7, #192	; 0xc0
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40005400 	.word	0x40005400
 8001d94:	40021000 	.word	0x40021000
 8001d98:	48000400 	.word	0x48000400
 8001d9c:	40005800 	.word	0x40005800
 8001da0:	48001c00 	.word	0x48001c00

08001da4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a15      	ldr	r2, [pc, #84]	; (8001e08 <HAL_I2C_MspDeInit+0x64>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d10f      	bne.n	8001dd6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <HAL_I2C_MspDeInit+0x68>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dba:	4a14      	ldr	r2, [pc, #80]	; (8001e0c <HAL_I2C_MspDeInit+0x68>)
 8001dbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001dc0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8001dc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dc6:	4812      	ldr	r0, [pc, #72]	; (8001e10 <HAL_I2C_MspDeInit+0x6c>)
 8001dc8:	f00c f8a6 	bl	800df18 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8001dcc:	2180      	movs	r1, #128	; 0x80
 8001dce:	4810      	ldr	r0, [pc, #64]	; (8001e10 <HAL_I2C_MspDeInit+0x6c>)
 8001dd0:	f00c f8a2 	bl	800df18 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8001dd4:	e013      	b.n	8001dfe <HAL_I2C_MspDeInit+0x5a>
  else if(i2cHandle->Instance==I2C2)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a0e      	ldr	r2, [pc, #56]	; (8001e14 <HAL_I2C_MspDeInit+0x70>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d10e      	bne.n	8001dfe <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001de0:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <HAL_I2C_MspDeInit+0x68>)
 8001de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de4:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <HAL_I2C_MspDeInit+0x68>)
 8001de6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001dea:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(I2C2_SCL_GPIO_Port, I2C2_SCL_Pin);
 8001dec:	2110      	movs	r1, #16
 8001dee:	480a      	ldr	r0, [pc, #40]	; (8001e18 <HAL_I2C_MspDeInit+0x74>)
 8001df0:	f00c f892 	bl	800df18 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(I2C2_SDA_GPIO_Port, I2C2_SDA_Pin);
 8001df4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001df8:	4805      	ldr	r0, [pc, #20]	; (8001e10 <HAL_I2C_MspDeInit+0x6c>)
 8001dfa:	f00c f88d 	bl	800df18 <HAL_GPIO_DeInit>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40005400 	.word	0x40005400
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	48000400 	.word	0x48000400
 8001e14:	40005800 	.word	0x40005800
 8001e18:	48001c00 	.word	0x48001c00

08001e1c <HAL_TIM_PeriodElapsedCallback>:
    char msg[16];
    sprintf(msg,"Er%d", err);
    while(1){};
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

	if(htim == &htim6) {
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a06      	ldr	r2, [pc, #24]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d102      	bne.n	8001e32 <HAL_TIM_PeriodElapsedCallback+0x16>
		if(PROFILING_TIM) HAL_GPIO_TogglePin(ARD_D7_GPIO_Port, ARD_D7_Pin); // test point for profiling
		SAMPLE_SENSOR = true;
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	701a      	strb	r2, [r3, #0]
	}

}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	200017d8 	.word	0x200017d8
 8001e44:	20000aec 	.word	0x20000aec

08001e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e48:	b590      	push	{r4, r7, lr}
 8001e4a:	b091      	sub	sp, #68	; 0x44
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e4e:	f00a f8e5 	bl	800c01c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e52:	f000 fd15 	bl	8002880 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001e56:	f000 fd75 	bl	8002944 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e5a:	f7ff fc9d 	bl	8001798 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001e5e:	f7fe ffbf 	bl	8000de0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001e62:	f7ff f833 	bl	8000ecc <MX_ADC2_Init>
  MX_ADC3_Init();
 8001e66:	f7ff f895 	bl	8000f94 <MX_ADC3_Init>
  MX_DCMI_Init();
 8001e6a:	f7ff f9c7 	bl	80011fc <MX_DCMI_Init>
  MX_DFSDM1_Init();
 8001e6e:	f7ff fa79 	bl	8001364 <MX_DFSDM1_Init>
  MX_FMC_Init();
 8001e72:	f7ff fb6b 	bl	800154c <MX_FMC_Init>
  MX_I2C1_Init();
 8001e76:	f7ff fe4f 	bl	8001b18 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001e7a:	f7ff fe8d 	bl	8001b98 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8001e7e:	f001 fcd3 	bl	8003828 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8001e82:	f001 fcff 	bl	8003884 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001e86:	f001 fd2d 	bl	80038e4 <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 8001e8a:	f000 ffd1 	bl	8002e30 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8001e8e:	f001 f85d 	bl	8002f4c <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8001e92:	f001 f97d 	bl	8003190 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8001e96:	f001 fa0d 	bl	80032b4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001e9a:	f001 fa49 	bl	8003330 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8001e9e:	f017 fd01 	bl	80198a4 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 8001ea2:	f001 fc65 	bl	8003770 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  // above: MX_SDMMC1_SD_Init(); has to be commented out to not be called

  // lcd init
	if (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE) == LCD_ERROR) {
 8001ea6:	2001      	movs	r0, #1
 8001ea8:	f009 f8a8 	bl	800affc <BSP_LCD_InitEx>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d101      	bne.n	8001eb6 <main+0x6e>
		Error_Handler();
 8001eb2:	f000 ffb7 	bl	8002e24 <Error_Handler>
	}

	// touchscreen init
	if(BSP_TS_InitEx(BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), LCD_ORIENTATION_LANDSCAPE) != TS_OK) {
 8001eb6:	f009 f947 	bl	800b148 <BSP_LCD_GetXSize>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	b29c      	uxth	r4, r3
 8001ebe:	f009 f94f 	bl	800b160 <BSP_LCD_GetYSize>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4620      	mov	r0, r4
 8001ecc:	f009 fe88 	bl	800bbe0 <BSP_TS_InitEx>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <main+0x92>
		Error_Handler();
 8001ed6:	f000 ffa5 	bl	8002e24 <Error_Handler>
	}

	// LED GPIO
	BSP_LED_Init(LED2_PIN); // LD1
 8001eda:	2000      	movs	r0, #0
 8001edc:	f008 fa38 	bl	800a350 <BSP_LED_Init>
	BSP_LED_On(LED2_PIN); // LD1 orange turns on
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f008 fa83 	bl	800a3ec <BSP_LED_On>
	HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET); // LD2 green turns on
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eec:	48aa      	ldr	r0, [pc, #680]	; (8002198 <main+0x350>)
 8001eee:	f00c f905 	bl	800e0fc <HAL_GPIO_WritePin>
	// LD3 is attached to ARD_D13, which is not an output, it's attached to SPI
	HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, GPIO_PIN_RESET); // laser
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ef8:	48a8      	ldr	r0, [pc, #672]	; (800219c <main+0x354>)
 8001efa:	f00c f8ff 	bl	800e0fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D7_GPIO_Port, ARD_D7_Pin, GPIO_PIN_RESET); // test point: timer frequency
 8001efe:	2200      	movs	r2, #0
 8001f00:	2140      	movs	r1, #64	; 0x40
 8001f02:	48a7      	ldr	r0, [pc, #668]	; (80021a0 <main+0x358>)
 8001f04:	f00c f8fa 	bl	800e0fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D2_GPIO_Port, ARD_D2_Pin, GPIO_PIN_SET); // turn on BT pwr transistor
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f0e:	48a4      	ldr	r0, [pc, #656]	; (80021a0 <main+0x358>)
 8001f10:	f00c f8f4 	bl	800e0fc <HAL_GPIO_WritePin>


	// tof related
	VL53L0X_Dev_t *pDev;
	pDev = &VL53L0XDev;
 8001f14:	4ba3      	ldr	r3, [pc, #652]	; (80021a4 <main+0x35c>)
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c
	tofTestRegisterRead();
 8001f18:	f000 fd4a 	bl	80029b0 <tofTestRegisterRead>

	pDev->I2cDevAddr = 0x52;
 8001f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1e:	2252      	movs	r2, #82	; 0x52
 8001f20:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	pDev->Present = 0;
 8001f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f26:	2200      	movs	r2, #0
 8001f28:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

	int status = VL53L0X_DataInit(pDev);
 8001f2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f2e:	f003 fe7b 	bl	8005c28 <VL53L0X_DataInit>
 8001f32:	4603      	mov	r3, r0
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
	if(status == 0) {
 8001f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d12d      	bne.n	8001f98 <main+0x150>
			pDev->Present = 1;
 8001f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	} else {
			printf("VL53L0X_DataInit fail\n");
			return;
	}
	printf("VL53L0X %d Present and initiated to final 0x%x\n", pDev->Id, pDev->I2cDevAddr);
 8001f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f46:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
 8001f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4c:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8001f50:	461a      	mov	r2, r3
 8001f52:	4895      	ldr	r0, [pc, #596]	; (80021a8 <main+0x360>)
 8001f54:	f018 fbd0 	bl	801a6f8 <iprintf>
	pDev->Present = 1;
 8001f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

	// Initialize the device in continuous ranging mode
	VL53L0X_StaticInit(pDev);
 8001f60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f62:	f003 ffc5 	bl	8005ef0 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(pDev, &VhvSettings, &PhaseCal);
 8001f66:	4a91      	ldr	r2, [pc, #580]	; (80021ac <main+0x364>)
 8001f68:	4991      	ldr	r1, [pc, #580]	; (80021b0 <main+0x368>)
 8001f6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f6c:	f004 fe70 	bl	8006c50 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(pDev, &refSpadCount, &isApertureSpads);
 8001f70:	4a90      	ldr	r2, [pc, #576]	; (80021b4 <main+0x36c>)
 8001f72:	4991      	ldr	r1, [pc, #580]	; (80021b8 <main+0x370>)
 8001f74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f76:	f005 faf9 	bl	800756c <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetInterMeasurementPeriodMilliSeconds(pDev, TIMED_RANGING_PERIOD);
 8001f7a:	2132      	movs	r1, #50	; 0x32
 8001f7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f7e:	f004 fbb1 	bl	80066e4 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>
	VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING);
 8001f82:	2103      	movs	r1, #3
 8001f84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f86:	f004 f9c5 	bl	8006314 <VL53L0X_SetDeviceMode>
	VL53L0X_StartMeasurement(pDev);
 8001f8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f8c:	f004 fedc 	bl	8006d48 <VL53L0X_StartMeasurement>


	// sampling related
	for(uint8_t i=0; i<num_rangers; i++) {
 8001f90:	2300      	movs	r3, #0
 8001f92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001f96:	e054      	b.n	8002042 <main+0x1fa>
			printf("VL53L0X_DataInit fail\n");
 8001f98:	4888      	ldr	r0, [pc, #544]	; (80021bc <main+0x374>)
 8001f9a:	f018 fc33 	bl	801a804 <puts>
			return;
 8001f9e:	f000 bc5d 	b.w	800285c <main+0xa14>
		struct Ranger *r = &rangers[i];
 8001fa2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001fa6:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 8001faa:	fb02 f303 	mul.w	r3, r2, r3
 8001fae:	4a84      	ldr	r2, [pc, #528]	; (80021c0 <main+0x378>)
 8001fb0:	4413      	add	r3, r2
 8001fb2:	60bb      	str	r3, [r7, #8]
		r->max = 0;
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	801a      	strh	r2, [r3, #0]
		r->min = 0;
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	805a      	strh	r2, [r3, #2]
		r->raw = 0;
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	809a      	strh	r2, [r3, #4]
		r->raw_mm = 0.0;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
		r->raw_sum = 0.0;
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	60da      	str	r2, [r3, #12]
		r->sum_count = 0;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	821a      	strh	r2, [r3, #16]
		r->sum_skip = 0;
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	825a      	strh	r2, [r3, #18]
		r->mm_avg = 0.0;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	615a      	str	r2, [r3, #20]
		r->record_index = 0;
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2200      	movs	r2, #0
 8001fee:	831a      	strh	r2, [r3, #24]
		for(uint16_t j=0; j<MAX_RECORDS; j++) {
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001ff4:	e00b      	b.n	800200e <main+0x1c6>
			r->records[j] = 0.0;
 8001ff6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	3306      	adds	r3, #6
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	3304      	adds	r3, #4
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
		for(uint16_t j=0; j<MAX_RECORDS; j++) {
 8002008:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800200a:	3301      	adds	r3, #1
 800200c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800200e:	4b6d      	ldr	r3, [pc, #436]	; (80021c4 <main+0x37c>)
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8002014:	429a      	cmp	r2, r3
 8002016:	d3ee      	bcc.n	8001ff6 <main+0x1ae>
		}
		r->process_records = false;
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
		r->record_sum = 0.0;
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
		r->val = 0.0;
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f203 43d4 	addw	r3, r3, #1236	; 0x4d4
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<num_rangers; i++) {
 8002038:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800203c:	3301      	adds	r3, #1
 800203e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002042:	4b61      	ldr	r3, [pc, #388]	; (80021c8 <main+0x380>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800204a:	429a      	cmp	r2, r3
 800204c:	d3a9      	bcc.n	8001fa2 <main+0x15a>
	}
	rangers[0].max = 3000; // mm sonar
 800204e:	4b5c      	ldr	r3, [pc, #368]	; (80021c0 <main+0x378>)
 8002050:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002054:	801a      	strh	r2, [r3, #0]
	rangers[0].min = 150;
 8002056:	4b5a      	ldr	r3, [pc, #360]	; (80021c0 <main+0x378>)
 8002058:	2296      	movs	r2, #150	; 0x96
 800205a:	805a      	strh	r2, [r3, #2]
	rangers[1].max = 500; // mm tof
 800205c:	4b58      	ldr	r3, [pc, #352]	; (80021c0 <main+0x378>)
 800205e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002062:	f8a3 24d8 	strh.w	r2, [r3, #1240]	; 0x4d8
	rangers[1].min = 10;
 8002066:	4b56      	ldr	r3, [pc, #344]	; (80021c0 <main+0x378>)
 8002068:	220a      	movs	r2, #10
 800206a:	f8a3 24da 	strh.w	r2, [r3, #1242]	; 0x4da


	// ui related
	uiSetup();
 800206e:	f000 fd2b 	bl	8002ac8 <uiSetup>


	// start timer
  HAL_TIM_Base_Start_IT(&htim6);
 8002072:	4856      	ldr	r0, [pc, #344]	; (80021cc <main+0x384>)
 8002074:	f012 f858 	bl	8014128 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  	// wake from event, the first state seen after exiting sleep mode
  	if(SLEEP_MODE_ACTIVE) {
 8002078:	4b55      	ldr	r3, [pc, #340]	; (80021d0 <main+0x388>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d021      	beq.n	80020c4 <main+0x27c>
			reconfigureFromSleep();
 8002080:	f000 fdbe 	bl	8002c00 <reconfigureFromSleep>
			awakeFromSleep();
 8002084:	f000 fdca 	bl	8002c1c <awakeFromSleep>
			// refresh ui
			for(uint8_t i=0; i<num_bubbles; i++) {
 8002088:	2300      	movs	r3, #0
 800208a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800208e:	e010      	b.n	80020b2 <main+0x26a>
				struct Bubble *b = &ui_bubbles[i];
 8002090:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4a4d      	ldr	r2, [pc, #308]	; (80021d4 <main+0x38c>)
 800209e:	4413      	add	r3, r2
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
				b->redraw = true;
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	2201      	movs	r2, #1
 80020a6:	739a      	strb	r2, [r3, #14]
			for(uint8_t i=0; i<num_bubbles; i++) {
 80020a8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80020ac:	3301      	adds	r3, #1
 80020ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80020b2:	4b49      	ldr	r3, [pc, #292]	; (80021d8 <main+0x390>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d3e8      	bcc.n	8002090 <main+0x248>
			}
			bubble_label_redraw = true;
 80020be:	4b47      	ldr	r3, [pc, #284]	; (80021dc <main+0x394>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
		}


  	// flag set from button interrupt to enter in to sleep mode
  	if(ENTER_SLEEP_MODE) {
 80020c4:	4b46      	ldr	r3, [pc, #280]	; (80021e0 <main+0x398>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d007      	beq.n	80020dc <main+0x294>
  		enterSleep();
 80020cc:	f000 fdf6 	bl	8002cbc <enterSleep>
  		HAL_SuspendTick();
 80020d0:	f00a f83c 	bl	800c14c <HAL_SuspendTick>
			HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE); // left button configured as event
 80020d4:	2102      	movs	r1, #2
 80020d6:	2000      	movs	r0, #0
 80020d8:	f00e fbb2 	bl	8010840 <HAL_PWR_EnterSLEEPMode>


  	// processing the sensor data
  	// sampling every 50 ms
  	// flag set from timer
  	if(SAMPLE_SENSOR) {
 80020dc:	4b41      	ldr	r3, [pc, #260]	; (80021e4 <main+0x39c>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 8141 	beq.w	8002368 <main+0x520>

  		if(PROFILING_SAMPLES) HAL_GPIO_WritePin(ARD_D7_GPIO_Port, ARD_D7_Pin, GPIO_PIN_SET); // test point for profiling
 80020e6:	2201      	movs	r2, #1
 80020e8:	2140      	movs	r1, #64	; 0x40
 80020ea:	482d      	ldr	r0, [pc, #180]	; (80021a0 <main+0x358>)
 80020ec:	f00c f806 	bl	800e0fc <HAL_GPIO_WritePin>

  		// get sonar adc value
			// "10-bit ADC, divide the ADC output by 2 for the range in inches."
			HAL_ADC_Start(&hadc1);
 80020f0:	483d      	ldr	r0, [pc, #244]	; (80021e8 <main+0x3a0>)
 80020f2:	f00a fb9b 	bl	800c82c <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80020f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020fa:	483b      	ldr	r0, [pc, #236]	; (80021e8 <main+0x3a0>)
 80020fc:	f00a fc50 	bl	800c9a0 <HAL_ADC_PollForConversion>
			rangers[0].raw = HAL_ADC_GetValue(&hadc1);
 8002100:	4839      	ldr	r0, [pc, #228]	; (80021e8 <main+0x3a0>)
 8002102:	f00a fd25 	bl	800cb50 <HAL_ADC_GetValue>
 8002106:	4603      	mov	r3, r0
 8002108:	b29a      	uxth	r2, r3
 800210a:	4b2d      	ldr	r3, [pc, #180]	; (80021c0 <main+0x378>)
 800210c:	809a      	strh	r2, [r3, #4]
			rangers[0].raw_mm = (float)(rangers[0].raw/2.0)*2.54*10;
 800210e:	4b2c      	ldr	r3, [pc, #176]	; (80021c0 <main+0x378>)
 8002110:	889b      	ldrh	r3, [r3, #4]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fa16 	bl	8000544 <__aeabi_i2d>
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002120:	f7fe fba4 	bl	800086c <__aeabi_ddiv>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4610      	mov	r0, r2
 800212a:	4619      	mov	r1, r3
 800212c:	f7fe fc86 	bl	8000a3c <__aeabi_d2f>
 8002130:	4603      	mov	r3, r0
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fa18 	bl	8000568 <__aeabi_f2d>
 8002138:	a315      	add	r3, pc, #84	; (adr r3, 8002190 <main+0x348>)
 800213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213e:	f7fe fa6b 	bl	8000618 <__aeabi_dmul>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	4b27      	ldr	r3, [pc, #156]	; (80021ec <main+0x3a4>)
 8002150:	f7fe fa62 	bl	8000618 <__aeabi_dmul>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4610      	mov	r0, r2
 800215a:	4619      	mov	r1, r3
 800215c:	f7fe fc6e 	bl	8000a3c <__aeabi_d2f>
 8002160:	4603      	mov	r3, r0
 8002162:	4a17      	ldr	r2, [pc, #92]	; (80021c0 <main+0x378>)
 8002164:	6093      	str	r3, [r2, #8]

			// get time of flight i2c value
			VL53L0X_GetRangingMeasurementData(pDev, &RangingMeasurementData);
 8002166:	4922      	ldr	r1, [pc, #136]	; (80021f0 <main+0x3a8>)
 8002168:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800216a:	f004 feef 	bl	8006f4c <VL53L0X_GetRangingMeasurementData>
			rangers[1].raw_mm = RangingMeasurementData.RangeMilliMeter; // mm
 800216e:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <main+0x3a8>)
 8002170:	891b      	ldrh	r3, [r3, #8]
 8002172:	ee07 3a90 	vmov	s15, r3
 8002176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <main+0x378>)
 800217c:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 8002180:	edc3 7a00 	vstr	s15, [r3]

			// go through each of the rangers
			for(uint8_t i=0; i<num_rangers; i++) {
 8002184:	2300      	movs	r3, #0
 8002186:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800218a:	e0e3      	b.n	8002354 <main+0x50c>
 800218c:	f3af 8000 	nop.w
 8002190:	851eb852 	.word	0x851eb852
 8002194:	400451eb 	.word	0x400451eb
 8002198:	48000400 	.word	0x48000400
 800219c:	48002000 	.word	0x48002000
 80021a0:	48001800 	.word	0x48001800
 80021a4:	20000004 	.word	0x20000004
 80021a8:	0801b924 	.word	0x0801b924
 80021ac:	20000b65 	.word	0x20000b65
 80021b0:	20000b64 	.word	0x20000b64
 80021b4:	20000b6c 	.word	0x20000b6c
 80021b8:	20000b68 	.word	0x20000b68
 80021bc:	0801b90c 	.word	0x0801b90c
 80021c0:	20000b70 	.word	0x20000b70
 80021c4:	20000198 	.word	0x20000198
 80021c8:	20000194 	.word	0x20000194
 80021cc:	200017d8 	.word	0x200017d8
 80021d0:	20000aee 	.word	0x20000aee
 80021d4:	20000af8 	.word	0x20000af8
 80021d8:	20000002 	.word	0x20000002
 80021dc:	20000003 	.word	0x20000003
 80021e0:	20000aef 	.word	0x20000aef
 80021e4:	20000aec 	.word	0x20000aec
 80021e8:	20000768 	.word	0x20000768
 80021ec:	40240000 	.word	0x40240000
 80021f0:	20000b48 	.word	0x20000b48
				struct Ranger *r = &rangers[i];
 80021f4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80021f8:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 80021fc:	fb02 f303 	mul.w	r3, r2, r3
 8002200:	4a7c      	ldr	r2, [pc, #496]	; (80023f4 <main+0x5ac>)
 8002202:	4413      	add	r3, r2
 8002204:	623b      	str	r3, [r7, #32]

				// clamp the values between a min and max
				// if it doesn't fit, skip it
				if(r->raw_mm < r->max && r->raw_mm > r->min) {
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	ed93 7a02 	vldr	s14, [r3, #8]
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	ee07 3a90 	vmov	s15, r3
 8002214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002218:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800221c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002220:	d525      	bpl.n	800226e <main+0x426>
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	ed93 7a02 	vldr	s14, [r3, #8]
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	885b      	ldrh	r3, [r3, #2]
 800222c:	ee07 3a90 	vmov	s15, r3
 8002230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002234:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223c:	dd17      	ble.n	800226e <main+0x426>
					r->raw_sum += r->raw_mm;
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	ed93 7a03 	vldr	s14, [r3, #12]
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	edd3 7a02 	vldr	s15, [r3, #8]
 800224a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	edc3 7a03 	vstr	s15, [r3, #12]
					r->sum_count++;
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	8a1b      	ldrh	r3, [r3, #16]
 8002258:	3301      	adds	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	821a      	strh	r2, [r3, #16]
					HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, GPIO_PIN_SET); // laser on
 8002260:	2201      	movs	r2, #1
 8002262:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002266:	4864      	ldr	r0, [pc, #400]	; (80023f8 <main+0x5b0>)
 8002268:	f00b ff48 	bl	800e0fc <HAL_GPIO_WritePin>
 800226c:	e00b      	b.n	8002286 <main+0x43e>
				} else {
					r->sum_skip++;
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	8a5b      	ldrh	r3, [r3, #18]
 8002272:	3301      	adds	r3, #1
 8002274:	b29a      	uxth	r2, r3
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	825a      	strh	r2, [r3, #18]
					HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, GPIO_PIN_RESET); // laser off
 800227a:	2200      	movs	r2, #0
 800227c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002280:	485d      	ldr	r0, [pc, #372]	; (80023f8 <main+0x5b0>)
 8002282:	f00b ff3b 	bl	800e0fc <HAL_GPIO_WritePin>
				}

				uint16_t total_sum = r->sum_count + r->sum_skip;
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	8a1a      	ldrh	r2, [r3, #16]
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	8a5b      	ldrh	r3, [r3, #18]
 800228e:	4413      	add	r3, r2
 8002290:	83fb      	strh	r3, [r7, #30]

				// check for when the count matches the sample rate
				if(total_sum >= RANGER_SAMPLE_RATE) {
 8002292:	8bfb      	ldrh	r3, [r7, #30]
 8002294:	2b13      	cmp	r3, #19
 8002296:	d942      	bls.n	800231e <main+0x4d6>

					if(r->sum_count > 0) {
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	8a1b      	ldrh	r3, [r3, #16]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00e      	beq.n	80022be <main+0x476>
						r->mm_avg = r->raw_sum / (float)r->sum_count; // get the average
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	edd3 6a03 	vldr	s13, [r3, #12]
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	8a1b      	ldrh	r3, [r3, #16]
 80022aa:	ee07 3a90 	vmov	s15, r3
 80022ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	edc3 7a05 	vstr	s15, [r3, #20]
 80022bc:	e003      	b.n	80022c6 <main+0x47e>
					} else {
						r->mm_avg = 0.0; // clamp to 0 if there was nothing added
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	615a      	str	r2, [r3, #20]
					}

					// reset the counters
					r->raw_sum = 0;
 80022c6:	6a3b      	ldr	r3, [r7, #32]
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	60da      	str	r2, [r3, #12]
					r->sum_count = 0;
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	2200      	movs	r2, #0
 80022d2:	821a      	strh	r2, [r3, #16]
					r->sum_skip = 0;
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	2200      	movs	r2, #0
 80022d8:	825a      	strh	r2, [r3, #18]

					// see if there's enough records ready to make the readout
					if(r->record_index < NUM_RECORDS && r->record_index < MAX_RECORDS) {
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	8b1a      	ldrh	r2, [r3, #24]
 80022de:	4b47      	ldr	r3, [pc, #284]	; (80023fc <main+0x5b4>)
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d217      	bcs.n	8002316 <main+0x4ce>
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	8b1a      	ldrh	r2, [r3, #24]
 80022ea:	4b45      	ldr	r3, [pc, #276]	; (8002400 <main+0x5b8>)
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d211      	bcs.n	8002316 <main+0x4ce>
						r->records[r->record_index] = r->mm_avg;
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	8b1b      	ldrh	r3, [r3, #24]
 80022f6:	4618      	mov	r0, r3
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	6a39      	ldr	r1, [r7, #32]
 80022fe:	1d83      	adds	r3, r0, #6
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	3304      	adds	r3, #4
 8002306:	601a      	str	r2, [r3, #0]
						r->record_index++;
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	8b1b      	ldrh	r3, [r3, #24]
 800230c:	3301      	adds	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	831a      	strh	r2, [r3, #24]
 8002314:	e003      	b.n	800231e <main+0x4d6>
					} else {
						r->process_records = true;
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
					}

				}

				// update our live variables
				if(i==0) {
 800231e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002322:	2b00      	cmp	r3, #0
 8002324:	d104      	bne.n	8002330 <main+0x4e8>
					sonar_mm_avg = r->mm_avg;
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	4a36      	ldr	r2, [pc, #216]	; (8002404 <main+0x5bc>)
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e007      	b.n	8002340 <main+0x4f8>
				} else if(i==1) {
 8002330:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002334:	2b01      	cmp	r3, #1
 8002336:	d103      	bne.n	8002340 <main+0x4f8>
					tof_mm_avg = r->mm_avg;
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	4a32      	ldr	r2, [pc, #200]	; (8002408 <main+0x5c0>)
 800233e:	6013      	str	r3, [r2, #0]
				}

				if(PROFILING_SAMPLES) HAL_GPIO_WritePin(ARD_D7_GPIO_Port, ARD_D7_Pin, GPIO_PIN_RESET); // test point for profiling
 8002340:	2200      	movs	r2, #0
 8002342:	2140      	movs	r1, #64	; 0x40
 8002344:	4831      	ldr	r0, [pc, #196]	; (800240c <main+0x5c4>)
 8002346:	f00b fed9 	bl	800e0fc <HAL_GPIO_WritePin>
			for(uint8_t i=0; i<num_rangers; i++) {
 800234a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800234e:	3301      	adds	r3, #1
 8002350:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8002354:	4b2e      	ldr	r3, [pc, #184]	; (8002410 <main+0x5c8>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800235c:	429a      	cmp	r2, r3
 800235e:	f4ff af49 	bcc.w	80021f4 <main+0x3ac>

			} // end of rangers loop

			// hope all of this takes < 50 ms

  		SAMPLE_SENSOR = false; // set to true by timer
 8002362:	4b2c      	ldr	r3, [pc, #176]	; (8002414 <main+0x5cc>)
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
  	}


  	// next, process the records from the data
  	bool ready_to_process = false;
 8002368:	2300      	movs	r3, #0
 800236a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  	uint8_t ready_count = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  	for(uint8_t i=0; i<num_rangers; i++) {
 8002374:	2300      	movs	r3, #0
 8002376:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800237a:	e017      	b.n	80023ac <main+0x564>
  		struct Ranger *r = &rangers[i];
 800237c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002380:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 8002384:	fb02 f303 	mul.w	r3, r2, r3
 8002388:	4a1a      	ldr	r2, [pc, #104]	; (80023f4 <main+0x5ac>)
 800238a:	4413      	add	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
  		if(r->process_records == true) {
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002394:	2b00      	cmp	r3, #0
 8002396:	d004      	beq.n	80023a2 <main+0x55a>
  			ready_count++;
 8002398:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800239c:	3301      	adds	r3, #1
 800239e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  	for(uint8_t i=0; i<num_rangers; i++) {
 80023a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023a6:	3301      	adds	r3, #1
 80023a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023ac:	4b18      	ldr	r3, [pc, #96]	; (8002410 <main+0x5c8>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d3e1      	bcc.n	800237c <main+0x534>
  		}
  	}
  	if(ready_count == num_rangers) {
 80023b8:	4b15      	ldr	r3, [pc, #84]	; (8002410 <main+0x5c8>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d102      	bne.n	80023ca <main+0x582>
  		ready_to_process = true;
 80023c4:	2301      	movs	r3, #1
 80023c6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  	}
  	if(ready_to_process) {
 80023ca:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 8088 	beq.w	80024e4 <main+0x69c>

  		for(uint8_t i=0; i<num_rangers; i++) {
 80023d4:	2300      	movs	r3, #0
 80023d6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80023da:	e05d      	b.n	8002498 <main+0x650>
				struct Ranger *r = &rangers[i];
 80023dc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80023e0:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 80023e4:	fb02 f303 	mul.w	r3, r2, r3
 80023e8:	4a02      	ldr	r2, [pc, #8]	; (80023f4 <main+0x5ac>)
 80023ea:	4413      	add	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]

				for(uint16_t j=0; j<r->record_index; j++) {
 80023ee:	2300      	movs	r3, #0
 80023f0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80023f2:	e028      	b.n	8002446 <main+0x5fe>
 80023f4:	20000b70 	.word	0x20000b70
 80023f8:	48002000 	.word	0x48002000
 80023fc:	20000196 	.word	0x20000196
 8002400:	20000198 	.word	0x20000198
 8002404:	20001520 	.word	0x20001520
 8002408:	20001524 	.word	0x20001524
 800240c:	48001800 	.word	0x48001800
 8002410:	20000194 	.word	0x20000194
 8002414:	20000aec 	.word	0x20000aec
					r->record_sum += r->records[j];
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 800241e:	ed93 7a00 	vldr	s14, [r3]
 8002422:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	3306      	adds	r3, #6
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	3304      	adds	r3, #4
 800242e:	edd3 7a00 	vldr	s15, [r3]
 8002432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 800243c:	edc3 7a00 	vstr	s15, [r3]
				for(uint16_t j=0; j<r->record_index; j++) {
 8002440:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002442:	3301      	adds	r3, #1
 8002444:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	8b1b      	ldrh	r3, [r3, #24]
 800244a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800244c:	429a      	cmp	r2, r3
 800244e:	d3e3      	bcc.n	8002418 <main+0x5d0>
				}

				// record average
				r->val = r->record_sum/r->record_index;
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8002456:	edd3 6a00 	vldr	s13, [r3]
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	8b1b      	ldrh	r3, [r3, #24]
 800245e:	ee07 3a90 	vmov	s15, r3
 8002462:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	f203 43d4 	addw	r3, r3, #1236	; 0x4d4
 8002470:	edc3 7a00 	vstr	s15, [r3]

				// reset counters
				r->record_index = 0;
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	2200      	movs	r2, #0
 8002478:	831a      	strh	r2, [r3, #24]
				r->record_sum = 0.0;
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	601a      	str	r2, [r3, #0]

				// reset this flag
				r->process_records = false;
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  		for(uint8_t i=0; i<num_rangers; i++) {
 800248e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002492:	3301      	adds	r3, #1
 8002494:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002498:	4b9f      	ldr	r3, [pc, #636]	; (8002718 <main+0x8d0>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d39b      	bcc.n	80023dc <main+0x594>
			}

  		// hooray! we have the value!
  		result_distance = (alpha*rangers[1].val) + ( (1-alpha)*rangers[0].val);
 80024a4:	4b9d      	ldr	r3, [pc, #628]	; (800271c <main+0x8d4>)
 80024a6:	f603 13ac 	addw	r3, r3, #2476	; 0x9ac
 80024aa:	ed93 7a00 	vldr	s14, [r3]
 80024ae:	4b9c      	ldr	r3, [pc, #624]	; (8002720 <main+0x8d8>)
 80024b0:	edd3 7a00 	vldr	s15, [r3]
 80024b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024b8:	4b99      	ldr	r3, [pc, #612]	; (8002720 <main+0x8d8>)
 80024ba:	edd3 7a00 	vldr	s15, [r3]
 80024be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024c2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80024c6:	4b95      	ldr	r3, [pc, #596]	; (800271c <main+0x8d4>)
 80024c8:	f203 43d4 	addw	r3, r3, #1236	; 0x4d4
 80024cc:	edd3 7a00 	vldr	s15, [r3]
 80024d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d8:	4b92      	ldr	r3, [pc, #584]	; (8002724 <main+0x8dc>)
 80024da:	edc3 7a00 	vstr	s15, [r3]
  		UPDATE_RESULT = true;
 80024de:	4b92      	ldr	r3, [pc, #584]	; (8002728 <main+0x8e0>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]


  	// send the resulting distance over bt to our app
  	// UPDATE_RESULT refers to the data processing
  	// SEND_ENABLED refers to the big button on the screen
  	if(UPDATE_RESULT == true && SEND_ENABLED == true) {
 80024e4:	4b90      	ldr	r3, [pc, #576]	; (8002728 <main+0x8e0>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d03f      	beq.n	800256c <main+0x724>
 80024ec:	4b8f      	ldr	r3, [pc, #572]	; (800272c <main+0x8e4>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d03b      	beq.n	800256c <main+0x724>

  		HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET); // LD2 green turns on
 80024f4:	2200      	movs	r2, #0
 80024f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024fa:	488d      	ldr	r0, [pc, #564]	; (8002730 <main+0x8e8>)
 80024fc:	f00b fdfe 	bl	800e0fc <HAL_GPIO_WritePin>

			// this should already be on, but let's do it again just in case...
			// turn on BT pwr transistor
  		HAL_GPIO_WritePin(ARD_D2_GPIO_Port, ARD_D2_Pin, GPIO_PIN_SET);
 8002500:	2201      	movs	r2, #1
 8002502:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002506:	488b      	ldr	r0, [pc, #556]	; (8002734 <main+0x8ec>)
 8002508:	f00b fdf8 	bl	800e0fc <HAL_GPIO_WritePin>

  		// send to uart
  		if(result_distance > 0) {
 800250c:	4b85      	ldr	r3, [pc, #532]	; (8002724 <main+0x8dc>)
 800250e:	edd3 7a00 	vldr	s15, [r3]
 8002512:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251a:	dd0d      	ble.n	8002538 <main+0x6f0>
				sprintf((char*)buf, "%d;", (uint16_t)result_distance);
 800251c:	4b81      	ldr	r3, [pc, #516]	; (8002724 <main+0x8dc>)
 800251e:	edd3 7a00 	vldr	s15, [r3]
 8002522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002526:	ee17 3a90 	vmov	r3, s15
 800252a:	b29b      	uxth	r3, r3
 800252c:	461a      	mov	r2, r3
 800252e:	4982      	ldr	r1, [pc, #520]	; (8002738 <main+0x8f0>)
 8002530:	4882      	ldr	r0, [pc, #520]	; (800273c <main+0x8f4>)
 8002532:	f018 f97f 	bl	801a834 <siprintf>
 8002536:	e005      	b.n	8002544 <main+0x6fc>
			} else {
				sprintf((char*)buf, "%d;", -1);
 8002538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800253c:	497e      	ldr	r1, [pc, #504]	; (8002738 <main+0x8f0>)
 800253e:	487f      	ldr	r0, [pc, #508]	; (800273c <main+0x8f4>)
 8002540:	f018 f978 	bl	801a834 <siprintf>
			}
			HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8002544:	487d      	ldr	r0, [pc, #500]	; (800273c <main+0x8f4>)
 8002546:	f7fd fe53 	bl	80001f0 <strlen>
 800254a:	4603      	mov	r3, r0
 800254c:	b29a      	uxth	r2, r3
 800254e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002552:	497a      	ldr	r1, [pc, #488]	; (800273c <main+0x8f4>)
 8002554:	487a      	ldr	r0, [pc, #488]	; (8002740 <main+0x8f8>)
 8002556:	f012 ff31 	bl	80153bc <HAL_UART_Transmit>

			HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_SET); // LD2 green turns off
 800255a:	2201      	movs	r2, #1
 800255c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002560:	4873      	ldr	r0, [pc, #460]	; (8002730 <main+0x8e8>)
 8002562:	f00b fdcb 	bl	800e0fc <HAL_GPIO_WritePin>

  		UPDATE_RESULT = false;
 8002566:	4b70      	ldr	r3, [pc, #448]	; (8002728 <main+0x8e0>)
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
  	}


		// update ui
		for(uint8_t i=0; i<num_bubbles; i++) {
 800256c:	2300      	movs	r3, #0
 800256e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002572:	e00f      	b.n	8002594 <main+0x74c>
			drawBubble(&ui_bubbles[i]);
 8002574:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4a70      	ldr	r2, [pc, #448]	; (8002744 <main+0x8fc>)
 8002582:	4413      	add	r3, r2
 8002584:	4618      	mov	r0, r3
 8002586:	f000 fa33 	bl	80029f0 <drawBubble>
		for(uint8_t i=0; i<num_bubbles; i++) {
 800258a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800258e:	3301      	adds	r3, #1
 8002590:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002594:	4b6c      	ldr	r3, [pc, #432]	; (8002748 <main+0x900>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800259c:	429a      	cmp	r2, r3
 800259e:	d3e9      	bcc.n	8002574 <main+0x72c>
		}
		if(bubble_label_redraw) {
 80025a0:	4b6a      	ldr	r3, [pc, #424]	; (800274c <main+0x904>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00f      	beq.n	80025c8 <main+0x780>
			BSP_LCD_SetTextColor( LCD_COLOR_DARKGREEN );
 80025a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80025ac:	f008 fde4 	bl	800b178 <BSP_LCD_SetTextColor>
			BSP_LCD_SetFont(&Font24);
 80025b0:	4867      	ldr	r0, [pc, #412]	; (8002750 <main+0x908>)
 80025b2:	f008 fdf1 	bl	800b198 <BSP_LCD_SetFont>
			//BSP_LCD_DisplayStringAt(0, 90, (uint8_t *)" 10   30   90", LEFT_MODE);
			BSP_LCD_DisplayStringAt(0, 90, (uint8_t *)" 2   5   10", LEFT_MODE);
 80025b6:	2303      	movs	r3, #3
 80025b8:	4a66      	ldr	r2, [pc, #408]	; (8002754 <main+0x90c>)
 80025ba:	215a      	movs	r1, #90	; 0x5a
 80025bc:	2000      	movs	r0, #0
 80025be:	f008 fe5b 	bl	800b278 <BSP_LCD_DisplayStringAt>
			bubble_label_redraw = false;
 80025c2:	4b62      	ldr	r3, [pc, #392]	; (800274c <main+0x904>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	701a      	strb	r2, [r3, #0]
		}

		// update ts
		BSP_TS_GetState(&ts_result);
 80025c8:	4863      	ldr	r0, [pc, #396]	; (8002758 <main+0x910>)
 80025ca:	f009 fb91 	bl	800bcf0 <BSP_TS_GetState>
		uint8_t num_touches = ts_result.touchDetected;
 80025ce:	4b62      	ldr	r3, [pc, #392]	; (8002758 <main+0x910>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	75fb      	strb	r3, [r7, #23]

		// wake up the screen on touch
		if(num_touches > 0 && DIMMED_SCREEN == true) {
 80025d4:	7dfb      	ldrb	r3, [r7, #23]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00d      	beq.n	80025f6 <main+0x7ae>
 80025da:	4b60      	ldr	r3, [pc, #384]	; (800275c <main+0x914>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <main+0x7ae>
			BSP_LCD_ScreenDimmingOff();
 80025e2:	f009 f9b9 	bl	800b958 <BSP_LCD_ScreenDimmingOff>
			DIMMED_SCREEN = false;
 80025e6:	4b5d      	ldr	r3, [pc, #372]	; (800275c <main+0x914>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
			last_ts = HAL_GetTick();
 80025ec:	f009 fd7e 	bl	800c0ec <HAL_GetTick>
 80025f0:	4603      	mov	r3, r0
 80025f2:	4a5b      	ldr	r2, [pc, #364]	; (8002760 <main+0x918>)
 80025f4:	6013      	str	r3, [r2, #0]
		}

		// hit testing selected bubbles
		for(uint8_t i=0; i<num_touches; i++) {
 80025f6:	2300      	movs	r3, #0
 80025f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80025fc:	e0ec      	b.n	80027d8 <main+0x990>
			Point touch;
			touch.X = ts_result.touchX[i];
 80025fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002602:	4a55      	ldr	r2, [pc, #340]	; (8002758 <main+0x910>)
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4413      	add	r3, r2
 8002608:	885b      	ldrh	r3, [r3, #2]
 800260a:	b21b      	sxth	r3, r3
 800260c:	80bb      	strh	r3, [r7, #4]
			touch.Y = ts_result.touchY[i];
 800260e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002612:	4a51      	ldr	r2, [pc, #324]	; (8002758 <main+0x910>)
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	88db      	ldrh	r3, [r3, #6]
 800261a:	b21b      	sxth	r3, r3
 800261c:	80fb      	strh	r3, [r7, #6]

			for(uint8_t j=0; j<num_bubbles; j++) {
 800261e:	2300      	movs	r3, #0
 8002620:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8002624:	e0cc      	b.n	80027c0 <main+0x978>
				struct Bubble *b = &ui_bubbles[j];
 8002626:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4a44      	ldr	r2, [pc, #272]	; (8002744 <main+0x8fc>)
 8002634:	4413      	add	r3, r2
 8002636:	613b      	str	r3, [r7, #16]

				// hit testing
				if(touch.X < b->x + b->hit_diameter && touch.X > b->x - b->hit_diameter) {
 8002638:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800263c:	461a      	mov	r2, r3
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	4619      	mov	r1, r3
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	88db      	ldrh	r3, [r3, #6]
 8002648:	440b      	add	r3, r1
 800264a:	429a      	cmp	r2, r3
 800264c:	f280 80b3 	bge.w	80027b6 <main+0x96e>
 8002650:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002654:	461a      	mov	r2, r3
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	4619      	mov	r1, r3
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	88db      	ldrh	r3, [r3, #6]
 8002660:	1acb      	subs	r3, r1, r3
 8002662:	429a      	cmp	r2, r3
 8002664:	f340 80a7 	ble.w	80027b6 <main+0x96e>
					if(touch.Y < b->y + b->hit_diameter && touch.Y > b->y - b->hit_diameter) {
 8002668:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800266c:	461a      	mov	r2, r3
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	885b      	ldrh	r3, [r3, #2]
 8002672:	4619      	mov	r1, r3
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	88db      	ldrh	r3, [r3, #6]
 8002678:	440b      	add	r3, r1
 800267a:	429a      	cmp	r2, r3
 800267c:	f280 809b 	bge.w	80027b6 <main+0x96e>
 8002680:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002684:	461a      	mov	r2, r3
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	885b      	ldrh	r3, [r3, #2]
 800268a:	4619      	mov	r1, r3
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	88db      	ldrh	r3, [r3, #6]
 8002690:	1acb      	subs	r3, r1, r3
 8002692:	429a      	cmp	r2, r3
 8002694:	f340 808f 	ble.w	80027b6 <main+0x96e>

						if(b->type == 1) { // ui bubbles
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	7bdb      	ldrb	r3, [r3, #15]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d163      	bne.n	8002768 <main+0x920>

							if(!b->selected) { // not selected prior
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	7a1b      	ldrb	r3, [r3, #8]
 80026a4:	f083 0301 	eor.w	r3, r3, #1
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 8083 	beq.w	80027b6 <main+0x96e>
								b->selected = !b->selected;
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	7a1b      	ldrb	r3, [r3, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	bf14      	ite	ne
 80026b8:	2301      	movne	r3, #1
 80026ba:	2300      	moveq	r3, #0
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	f083 0301 	eor.w	r3, r3, #1
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	721a      	strb	r2, [r3, #8]
								deselectBubbles(j); // "single touch"
 80026ce:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 f9c4 	bl	8002a60 <deselectBubbles>
								b->redraw = true;
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	2201      	movs	r2, #1
 80026dc:	739a      	strb	r2, [r3, #14]
								b->last_selected = HAL_GetTick();
 80026de:	f009 fd05 	bl	800c0ec <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	611a      	str	r2, [r3, #16]

								// update the number of records
								if(j==0) {
 80026e8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d103      	bne.n	80026f8 <main+0x8b0>
									NUM_RECORDS = 2;
 80026f0:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <main+0x91c>)
 80026f2:	2202      	movs	r2, #2
 80026f4:	801a      	strh	r2, [r3, #0]
 80026f6:	e05e      	b.n	80027b6 <main+0x96e>
								} else if(j==1) {
 80026f8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d103      	bne.n	8002708 <main+0x8c0>
									NUM_RECORDS = 5;
 8002700:	4b18      	ldr	r3, [pc, #96]	; (8002764 <main+0x91c>)
 8002702:	2205      	movs	r2, #5
 8002704:	801a      	strh	r2, [r3, #0]
 8002706:	e056      	b.n	80027b6 <main+0x96e>
								} else if(j==2) {
 8002708:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800270c:	2b02      	cmp	r3, #2
 800270e:	d152      	bne.n	80027b6 <main+0x96e>
									NUM_RECORDS = 10;
 8002710:	4b14      	ldr	r3, [pc, #80]	; (8002764 <main+0x91c>)
 8002712:	220a      	movs	r2, #10
 8002714:	801a      	strh	r2, [r3, #0]
 8002716:	e04e      	b.n	80027b6 <main+0x96e>
 8002718:	20000194 	.word	0x20000194
 800271c:	20000b70 	.word	0x20000b70
 8002720:	2000019c 	.word	0x2000019c
 8002724:	20001528 	.word	0x20001528
 8002728:	2000152c 	.word	0x2000152c
 800272c:	20000001 	.word	0x20000001
 8002730:	48000400 	.word	0x48000400
 8002734:	48001800 	.word	0x48001800
 8002738:	0801b954 	.word	0x0801b954
 800273c:	20000ad8 	.word	0x20000ad8
 8002740:	200018a8 	.word	0x200018a8
 8002744:	20000af8 	.word	0x20000af8
 8002748:	20000002 	.word	0x20000002
 800274c:	20000003 	.word	0x20000003
 8002750:	20000540 	.word	0x20000540
 8002754:	0801b958 	.word	0x0801b958
 8002758:	20000ac8 	.word	0x20000ac8
 800275c:	20000aed 	.word	0x20000aed
 8002760:	20000ad4 	.word	0x20000ad4
 8002764:	20000196 	.word	0x20000196
								}

							}

						} else if(b->type == 2) { // go bubble
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	7bdb      	ldrb	r3, [r3, #15]
 800276c:	2b02      	cmp	r3, #2
 800276e:	d122      	bne.n	80027b6 <main+0x96e>

							if(HAL_GetTick()-b->last_selected > 80) { // 80 ms debounce
 8002770:	f009 fcbc 	bl	800c0ec <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b50      	cmp	r3, #80	; 0x50
 800277e:	d91a      	bls.n	80027b6 <main+0x96e>
								b->selected = !b->selected;
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	7a1b      	ldrb	r3, [r3, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	bf14      	ite	ne
 8002788:	2301      	movne	r3, #1
 800278a:	2300      	moveq	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	f083 0301 	eor.w	r3, r3, #1
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	b2da      	uxtb	r2, r3
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	721a      	strb	r2, [r3, #8]
								b->redraw = true;
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	2201      	movs	r2, #1
 80027a2:	739a      	strb	r2, [r3, #14]
								b->last_selected = HAL_GetTick();
 80027a4:	f009 fca2 	bl	800c0ec <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	611a      	str	r2, [r3, #16]

								SEND_ENABLED = b->selected;
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	7a1a      	ldrb	r2, [r3, #8]
 80027b2:	4b2d      	ldr	r3, [pc, #180]	; (8002868 <main+0xa20>)
 80027b4:	701a      	strb	r2, [r3, #0]
			for(uint8_t j=0; j<num_bubbles; j++) {
 80027b6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80027ba:	3301      	adds	r3, #1
 80027bc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80027c0:	4b2a      	ldr	r3, [pc, #168]	; (800286c <main+0xa24>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 80027c8:	429a      	cmp	r2, r3
 80027ca:	f4ff af2c 	bcc.w	8002626 <main+0x7de>
		for(uint8_t i=0; i<num_touches; i++) {
 80027ce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80027d2:	3301      	adds	r3, #1
 80027d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80027d8:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
 80027de:	429a      	cmp	r2, r3
 80027e0:	f4ff af0d 	bcc.w	80025fe <main+0x7b6>
		// imagine the case where gettick has overflowed, but last_ts has not
		// eg 100-30000
		// abs could be used to prevent this from being a negative number, however
		// in this case, it is not needed, because two unsigned integers being
		// subtracted results in an unsigned integer
		if( HAL_GetTick()-last_ts >= 5000 && DIMMED_SCREEN == false) {
 80027e4:	f009 fc82 	bl	800c0ec <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	4b21      	ldr	r3, [pc, #132]	; (8002870 <main+0xa28>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	f241 3287 	movw	r2, #4999	; 0x1387
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d911      	bls.n	800281c <main+0x9d4>
 80027f8:	4b1e      	ldr	r3, [pc, #120]	; (8002874 <main+0xa2c>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	f083 0301 	eor.w	r3, r3, #1
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <main+0x9d4>
			//BSP_LCD_ScreenDimmingConfig(100, 5, 5, 20); // 100-5=95/5=19*20=380ms
			BSP_LCD_ScreenDimmingConfig(100, 5, 5, 1); // 100-5=95/5=19*20=380ms
 8002806:	2301      	movs	r3, #1
 8002808:	2205      	movs	r2, #5
 800280a:	2105      	movs	r1, #5
 800280c:	2064      	movs	r0, #100	; 0x64
 800280e:	f008 ff77 	bl	800b700 <BSP_LCD_ScreenDimmingConfig>
			BSP_LCD_ScreenDimmingOn();
 8002812:	f008 ffa7 	bl	800b764 <BSP_LCD_ScreenDimmingOn>
			DIMMED_SCREEN = true;
 8002816:	4b17      	ldr	r3, [pc, #92]	; (8002874 <main+0xa2c>)
 8002818:	2201      	movs	r2, #1
 800281a:	701a      	strb	r2, [r3, #0]
		}


		// led heartbeat
		if(TimingDelay == 0) {
 800281c:	4b16      	ldr	r3, [pc, #88]	; (8002878 <main+0xa30>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	f47f ac29 	bne.w	8002078 <main+0x230>
			if(led_on) {
 8002826:	4b15      	ldr	r3, [pc, #84]	; (800287c <main+0xa34>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <main+0x9ee>
				BSP_LED_On(LED2_PIN); // LD1 orange
 800282e:	2000      	movs	r0, #0
 8002830:	f007 fddc 	bl	800a3ec <BSP_LED_On>
 8002834:	e002      	b.n	800283c <main+0x9f4>
			} else {
				BSP_LED_Off(LED2_PIN); // LD1 orange
 8002836:	2000      	movs	r0, #0
 8002838:	f007 fdfa 	bl	800a430 <BSP_LED_Off>
			}
			led_on = !led_on;
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <main+0xa34>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	bf14      	ite	ne
 8002844:	2301      	movne	r3, #1
 8002846:	2300      	moveq	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	f083 0301 	eor.w	r3, r3, #1
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	b2da      	uxtb	r2, r3
 8002856:	4b09      	ldr	r3, [pc, #36]	; (800287c <main+0xa34>)
 8002858:	701a      	strb	r2, [r3, #0]
  {
 800285a:	e40d      	b.n	8002078 <main+0x230>
			return;
 800285c:	bf00      	nop
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800285e:	4618      	mov	r0, r3
 8002860:	3744      	adds	r7, #68	; 0x44
 8002862:	46bd      	mov	sp, r7
 8002864:	bd90      	pop	{r4, r7, pc}
 8002866:	bf00      	nop
 8002868:	20000001 	.word	0x20000001
 800286c:	20000002 	.word	0x20000002
 8002870:	20000ad4 	.word	0x20000ad4
 8002874:	20000aed 	.word	0x20000aed
 8002878:	20000af4 	.word	0x20000af4
 800287c:	20000af0 	.word	0x20000af0

08002880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b096      	sub	sp, #88	; 0x58
 8002884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002886:	f107 0314 	add.w	r3, r7, #20
 800288a:	2244      	movs	r2, #68	; 0x44
 800288c:	2100      	movs	r1, #0
 800288e:	4618      	mov	r0, r3
 8002890:	f017 fe4a 	bl	801a528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002894:	463b      	mov	r3, r7
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	609a      	str	r2, [r3, #8]
 800289e:	60da      	str	r2, [r3, #12]
 80028a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80028a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80028a6:	f00e f80d 	bl	80108c4 <HAL_PWREx_ControlVoltageScaling>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80028b0:	f000 fab8 	bl	8002e24 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80028b4:	f00d ffb4 	bl	8010820 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80028b8:	4b21      	ldr	r3, [pc, #132]	; (8002940 <SystemClock_Config+0xc0>)
 80028ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028be:	4a20      	ldr	r2, [pc, #128]	; (8002940 <SystemClock_Config+0xc0>)
 80028c0:	f023 0318 	bic.w	r3, r3, #24
 80028c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80028c8:	2314      	movs	r3, #20
 80028ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80028cc:	2301      	movs	r3, #1
 80028ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80028d0:	2301      	movs	r3, #1
 80028d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80028d4:	2300      	movs	r3, #0
 80028d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80028d8:	2360      	movs	r3, #96	; 0x60
 80028da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028dc:	2302      	movs	r3, #2
 80028de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80028e0:	2301      	movs	r3, #1
 80028e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80028e4:	2301      	movs	r3, #1
 80028e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 80028e8:	2318      	movs	r3, #24
 80028ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028ec:	2302      	movs	r3, #2
 80028ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80028f0:	2302      	movs	r3, #2
 80028f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80028f4:	2302      	movs	r3, #2
 80028f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028f8:	f107 0314 	add.w	r3, r7, #20
 80028fc:	4618      	mov	r0, r3
 80028fe:	f00e f961 	bl	8010bc4 <HAL_RCC_OscConfig>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002908:	f000 fa8c 	bl	8002e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800290c:	230f      	movs	r3, #15
 800290e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002910:	2303      	movs	r3, #3
 8002912:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002914:	2300      	movs	r3, #0
 8002916:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800291c:	2300      	movs	r3, #0
 800291e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002920:	463b      	mov	r3, r7
 8002922:	2102      	movs	r1, #2
 8002924:	4618      	mov	r0, r3
 8002926:	f00e fd67 	bl	80113f8 <HAL_RCC_ClockConfig>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002930:	f000 fa78 	bl	8002e24 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002934:	f010 f838 	bl	80129a8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002938:	bf00      	nop
 800293a:	3758      	adds	r7, #88	; 0x58
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40021000 	.word	0x40021000

08002944 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b0a4      	sub	sp, #144	; 0x90
 8002948:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	228c      	movs	r2, #140	; 0x8c
 800294e:	2100      	movs	r1, #0
 8002950:	4618      	mov	r0, r3
 8002952:	f017 fde9 	bl	801a528 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB
 8002956:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <PeriphCommonClock_Config+0x64>)
 8002958:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800295a:	2300      	movs	r3, #0
 800295c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800295e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002962:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002966:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800296a:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 800296c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002970:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002972:	2301      	movs	r3, #1
 8002974:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002976:	2301      	movs	r3, #1
 8002978:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800297a:	2318      	movs	r3, #24
 800297c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800297e:	2302      	movs	r3, #2
 8002980:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002982:	2302      	movs	r3, #2
 8002984:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002986:	2302      	movs	r3, #2
 8002988:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 800298a:	4b08      	ldr	r3, [pc, #32]	; (80029ac <PeriphCommonClock_Config+0x68>)
 800298c:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800298e:	1d3b      	adds	r3, r7, #4
 8002990:	4618      	mov	r0, r3
 8002992:	f00e ff55 	bl	8011840 <HAL_RCCEx_PeriphCLKConfig>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 800299c:	f000 fa42 	bl	8002e24 <Error_Handler>
  }
}
 80029a0:	bf00      	nop
 80029a2:	3790      	adds	r7, #144	; 0x90
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	00086800 	.word	0x00086800
 80029ac:	01110000 	.word	0x01110000

080029b0 <tofTestRegisterRead>:

/* USER CODE BEGIN 4 */

void tofTestRegisterRead(void) {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status;
	uint8_t pData;
	status = HAL_I2C_Mem_Read(&hi2c1, 0x52, 0xC0, 1, &pData, 1, HAL_TIMEOUT);
 80029b6:	2303      	movs	r3, #3
 80029b8:	9302      	str	r3, [sp, #8]
 80029ba:	2301      	movs	r3, #1
 80029bc:	9301      	str	r3, [sp, #4]
 80029be:	1dbb      	adds	r3, r7, #6
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	2301      	movs	r3, #1
 80029c4:	22c0      	movs	r2, #192	; 0xc0
 80029c6:	2152      	movs	r1, #82	; 0x52
 80029c8:	4807      	ldr	r0, [pc, #28]	; (80029e8 <tofTestRegisterRead+0x38>)
 80029ca:	f00b ff83 	bl	800e8d4 <HAL_I2C_Mem_Read>
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
	// pData should be 0xEE
	if(status == HAL_OK) {
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d102      	bne.n	80029de <tofTestRegisterRead+0x2e>
		printf("good");
 80029d8:	4804      	ldr	r0, [pc, #16]	; (80029ec <tofTestRegisterRead+0x3c>)
 80029da:	f017 fe8d 	bl	801a6f8 <iprintf>
	}
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000a20 	.word	0x20000a20
 80029ec:	0801b964 	.word	0x0801b964

080029f0 <drawBubble>:



void drawBubble(struct Bubble *bubble) {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

	if(!bubble->redraw) return;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	7b9b      	ldrb	r3, [r3, #14]
 80029fc:	f083 0301 	eor.w	r3, r3, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d127      	bne.n	8002a56 <drawBubble+0x66>

	if(!bubble->selected) {
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	7a1b      	ldrb	r3, [r3, #8]
 8002a0a:	f083 0301 	eor.w	r3, r3, #1
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00e      	beq.n	8002a32 <drawBubble+0x42>
		BSP_LCD_SetTextColor( bubble->colour_inactive );
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	899b      	ldrh	r3, [r3, #12]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f008 fbad 	bl	800b178 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(bubble->x, bubble->y, bubble->radius);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	8818      	ldrh	r0, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	8859      	ldrh	r1, [r3, #2]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	889b      	ldrh	r3, [r3, #4]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	f008 fdc2 	bl	800b5b4 <BSP_LCD_FillCircle>
 8002a30:	e00d      	b.n	8002a4e <drawBubble+0x5e>
	} else {
		BSP_LCD_SetTextColor( bubble->colour_active );
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	895b      	ldrh	r3, [r3, #10]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f008 fb9e 	bl	800b178 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(bubble->x, bubble->y, bubble->radius);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	8818      	ldrh	r0, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	8859      	ldrh	r1, [r3, #2]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	889b      	ldrh	r3, [r3, #4]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	f008 fdb3 	bl	800b5b4 <BSP_LCD_FillCircle>
	}

	bubble->redraw = false;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	739a      	strb	r2, [r3, #14]
 8002a54:	e000      	b.n	8002a58 <drawBubble+0x68>
	if(!bubble->redraw) return;
 8002a56:	bf00      	nop

}
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <deselectBubbles>:

void deselectBubbles(uint8_t skip) {
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	71fb      	strb	r3, [r7, #7]

	for(uint8_t i=0; i<num_bubbles; i++) {
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	73fb      	strb	r3, [r7, #15]
 8002a6e:	e01a      	b.n	8002aa6 <deselectBubbles+0x46>
		struct Bubble *b = &ui_bubbles[i];
 8002a70:	7bfa      	ldrb	r2, [r7, #15]
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4a11      	ldr	r2, [pc, #68]	; (8002ac0 <deselectBubbles+0x60>)
 8002a7c:	4413      	add	r3, r2
 8002a7e:	60bb      	str	r3, [r7, #8]
		if(b->type == 1) { // ui bubbles
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	7bdb      	ldrb	r3, [r3, #15]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d10b      	bne.n	8002aa0 <deselectBubbles+0x40>
			if(i == skip) continue;
 8002a88:	7bfa      	ldrb	r2, [r7, #15]
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d006      	beq.n	8002a9e <deselectBubbles+0x3e>
			b->selected = false;
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2200      	movs	r2, #0
 8002a94:	721a      	strb	r2, [r3, #8]
			b->redraw = true;
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	739a      	strb	r2, [r3, #14]
 8002a9c:	e000      	b.n	8002aa0 <deselectBubbles+0x40>
			if(i == skip) continue;
 8002a9e:	bf00      	nop
	for(uint8_t i=0; i<num_bubbles; i++) {
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	73fb      	strb	r3, [r7, #15]
 8002aa6:	4b07      	ldr	r3, [pc, #28]	; (8002ac4 <deselectBubbles+0x64>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	7bfa      	ldrb	r2, [r7, #15]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d3df      	bcc.n	8002a70 <deselectBubbles+0x10>
		}
	}

}
 8002ab0:	bf00      	nop
 8002ab2:	bf00      	nop
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	20000af8 	.word	0x20000af8
 8002ac4:	20000002 	.word	0x20000002

08002ac8 <uiSetup>:

void uiSetup(void) {
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0

	uint16_t radius = 30;
 8002ace:	231e      	movs	r3, #30
 8002ad0:	80fb      	strh	r3, [r7, #6]
	uint16_t hit_diameter = 35;
 8002ad2:	2323      	movs	r3, #35	; 0x23
 8002ad4:	80bb      	strh	r3, [r7, #4]
	uint16_t y = 50;
 8002ad6:	2332      	movs	r3, #50	; 0x32
 8002ad8:	807b      	strh	r3, [r7, #2]

	// left bubble
	ui_bubbles[0].x = 40;
 8002ada:	4b48      	ldr	r3, [pc, #288]	; (8002bfc <uiSetup+0x134>)
 8002adc:	2228      	movs	r2, #40	; 0x28
 8002ade:	801a      	strh	r2, [r3, #0]
	ui_bubbles[0].y = y;
 8002ae0:	4a46      	ldr	r2, [pc, #280]	; (8002bfc <uiSetup+0x134>)
 8002ae2:	887b      	ldrh	r3, [r7, #2]
 8002ae4:	8053      	strh	r3, [r2, #2]
	ui_bubbles[0].radius = radius;
 8002ae6:	4a45      	ldr	r2, [pc, #276]	; (8002bfc <uiSetup+0x134>)
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	8093      	strh	r3, [r2, #4]
	ui_bubbles[0].hit_diameter = hit_diameter;
 8002aec:	4a43      	ldr	r2, [pc, #268]	; (8002bfc <uiSetup+0x134>)
 8002aee:	88bb      	ldrh	r3, [r7, #4]
 8002af0:	80d3      	strh	r3, [r2, #6]
	ui_bubbles[0].selected = false;
 8002af2:	4b42      	ldr	r3, [pc, #264]	; (8002bfc <uiSetup+0x134>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	721a      	strb	r2, [r3, #8]
	ui_bubbles[0].colour_active = LCD_COLOR_GREEN;
 8002af8:	4b40      	ldr	r3, [pc, #256]	; (8002bfc <uiSetup+0x134>)
 8002afa:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002afe:	815a      	strh	r2, [r3, #10]
	ui_bubbles[0].colour_inactive = LCD_COLOR_CYAN;
 8002b00:	4b3e      	ldr	r3, [pc, #248]	; (8002bfc <uiSetup+0x134>)
 8002b02:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002b06:	819a      	strh	r2, [r3, #12]
	ui_bubbles[0].redraw = true;
 8002b08:	4b3c      	ldr	r3, [pc, #240]	; (8002bfc <uiSetup+0x134>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	739a      	strb	r2, [r3, #14]
	ui_bubbles[0].type = 1;
 8002b0e:	4b3b      	ldr	r3, [pc, #236]	; (8002bfc <uiSetup+0x134>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	73da      	strb	r2, [r3, #15]
	ui_bubbles[0].last_selected = 0;
 8002b14:	4b39      	ldr	r3, [pc, #228]	; (8002bfc <uiSetup+0x134>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	611a      	str	r2, [r3, #16]

	// middle bubble
	ui_bubbles[1].x = 120;
 8002b1a:	4b38      	ldr	r3, [pc, #224]	; (8002bfc <uiSetup+0x134>)
 8002b1c:	2278      	movs	r2, #120	; 0x78
 8002b1e:	829a      	strh	r2, [r3, #20]
	ui_bubbles[1].y = y;
 8002b20:	4a36      	ldr	r2, [pc, #216]	; (8002bfc <uiSetup+0x134>)
 8002b22:	887b      	ldrh	r3, [r7, #2]
 8002b24:	82d3      	strh	r3, [r2, #22]
	ui_bubbles[1].radius = radius;
 8002b26:	4a35      	ldr	r2, [pc, #212]	; (8002bfc <uiSetup+0x134>)
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	8313      	strh	r3, [r2, #24]
	ui_bubbles[1].hit_diameter = hit_diameter;
 8002b2c:	4a33      	ldr	r2, [pc, #204]	; (8002bfc <uiSetup+0x134>)
 8002b2e:	88bb      	ldrh	r3, [r7, #4]
 8002b30:	8353      	strh	r3, [r2, #26]
	ui_bubbles[1].selected = true;
 8002b32:	4b32      	ldr	r3, [pc, #200]	; (8002bfc <uiSetup+0x134>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	771a      	strb	r2, [r3, #28]
	ui_bubbles[1].colour_active = LCD_COLOR_GREEN;
 8002b38:	4b30      	ldr	r3, [pc, #192]	; (8002bfc <uiSetup+0x134>)
 8002b3a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002b3e:	83da      	strh	r2, [r3, #30]
	ui_bubbles[1].colour_inactive = LCD_COLOR_LIGHTBLUE;
 8002b40:	4b2e      	ldr	r3, [pc, #184]	; (8002bfc <uiSetup+0x134>)
 8002b42:	f248 421f 	movw	r2, #33823	; 0x841f
 8002b46:	841a      	strh	r2, [r3, #32]
	ui_bubbles[1].redraw = true;
 8002b48:	4b2c      	ldr	r3, [pc, #176]	; (8002bfc <uiSetup+0x134>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	ui_bubbles[1].type = 1;
 8002b50:	4b2a      	ldr	r3, [pc, #168]	; (8002bfc <uiSetup+0x134>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	ui_bubbles[1].last_selected = 0;
 8002b58:	4b28      	ldr	r3, [pc, #160]	; (8002bfc <uiSetup+0x134>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	625a      	str	r2, [r3, #36]	; 0x24

	// right bubble
	ui_bubbles[2].x = 200;
 8002b5e:	4b27      	ldr	r3, [pc, #156]	; (8002bfc <uiSetup+0x134>)
 8002b60:	22c8      	movs	r2, #200	; 0xc8
 8002b62:	851a      	strh	r2, [r3, #40]	; 0x28
	ui_bubbles[2].y = y;
 8002b64:	4a25      	ldr	r2, [pc, #148]	; (8002bfc <uiSetup+0x134>)
 8002b66:	887b      	ldrh	r3, [r7, #2]
 8002b68:	8553      	strh	r3, [r2, #42]	; 0x2a
	ui_bubbles[2].radius = radius;
 8002b6a:	4a24      	ldr	r2, [pc, #144]	; (8002bfc <uiSetup+0x134>)
 8002b6c:	88fb      	ldrh	r3, [r7, #6]
 8002b6e:	8593      	strh	r3, [r2, #44]	; 0x2c
	ui_bubbles[2].hit_diameter = hit_diameter;
 8002b70:	4a22      	ldr	r2, [pc, #136]	; (8002bfc <uiSetup+0x134>)
 8002b72:	88bb      	ldrh	r3, [r7, #4]
 8002b74:	85d3      	strh	r3, [r2, #46]	; 0x2e
	ui_bubbles[2].selected = false;
 8002b76:	4b21      	ldr	r3, [pc, #132]	; (8002bfc <uiSetup+0x134>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	ui_bubbles[2].colour_active = LCD_COLOR_GREEN;
 8002b7e:	4b1f      	ldr	r3, [pc, #124]	; (8002bfc <uiSetup+0x134>)
 8002b80:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002b84:	865a      	strh	r2, [r3, #50]	; 0x32
	ui_bubbles[2].colour_inactive = LCD_COLOR_LIGHTMAGENTA;
 8002b86:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <uiSetup+0x134>)
 8002b88:	f64f 421f 	movw	r2, #64543	; 0xfc1f
 8002b8c:	869a      	strh	r2, [r3, #52]	; 0x34
	ui_bubbles[2].redraw = true;
 8002b8e:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <uiSetup+0x134>)
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	ui_bubbles[2].type = 1;
 8002b96:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <uiSetup+0x134>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	ui_bubbles[2].last_selected = 0;
 8002b9e:	4b17      	ldr	r3, [pc, #92]	; (8002bfc <uiSetup+0x134>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	639a      	str	r2, [r3, #56]	; 0x38

	// go bubble
	ui_bubbles[3].x = 120;
 8002ba4:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <uiSetup+0x134>)
 8002ba6:	2278      	movs	r2, #120	; 0x78
 8002ba8:	879a      	strh	r2, [r3, #60]	; 0x3c
	ui_bubbles[3].y = 170;
 8002baa:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <uiSetup+0x134>)
 8002bac:	22aa      	movs	r2, #170	; 0xaa
 8002bae:	87da      	strh	r2, [r3, #62]	; 0x3e
	ui_bubbles[3].radius = 45;
 8002bb0:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <uiSetup+0x134>)
 8002bb2:	222d      	movs	r2, #45	; 0x2d
 8002bb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	ui_bubbles[3].hit_diameter = 50;
 8002bb8:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <uiSetup+0x134>)
 8002bba:	2232      	movs	r2, #50	; 0x32
 8002bbc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	ui_bubbles[3].selected = true;
 8002bc0:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <uiSetup+0x134>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	ui_bubbles[3].colour_active = LCD_COLOR_GREEN;
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <uiSetup+0x134>)
 8002bca:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002bce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	ui_bubbles[3].colour_inactive = LCD_COLOR_BLUE;
 8002bd2:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <uiSetup+0x134>)
 8002bd4:	221f      	movs	r2, #31
 8002bd6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	ui_bubbles[3].redraw = true;
 8002bda:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <uiSetup+0x134>)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	ui_bubbles[3].type = 2;
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <uiSetup+0x134>)
 8002be4:	2202      	movs	r2, #2
 8002be6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	ui_bubbles[3].last_selected = 0;
 8002bea:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <uiSetup+0x134>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	64da      	str	r2, [r3, #76]	; 0x4c

}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	20000af8 	.word	0x20000af8

08002c00 <reconfigureFromSleep>:





void reconfigureFromSleep(void) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
	/* System is Low Power Run mode when exiting Low Power Sleep mode,
		 disable low power run mode and reset the clock to initialization configuration */
	HAL_PWREx_DisableLowPowerRunMode();
 8002c04:	f00d fee4 	bl	80109d0 <HAL_PWREx_DisableLowPowerRunMode>

	/* Configure the system clock for the RUN mode */
	SystemClock_Config();
 8002c08:	f7ff fe3a 	bl	8002880 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8002c0c:	f7ff fe9a 	bl	8002944 <PeriphCommonClock_Config>

	/* Re-init GPIOs */
	MX_GPIO_Init();
 8002c10:	f7fe fdc2 	bl	8001798 <MX_GPIO_Init>

	/* Resume Tick interrupt if disabled prior to Low Power Sleep mode entry */
	HAL_ResumeTick();
 8002c14:	f009 faaa 	bl	800c16c <HAL_ResumeTick>
}
 8002c18:	bf00      	nop
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <awakeFromSleep>:


void awakeFromSleep(void) {
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0

	// turn on LD1, LD2
	BSP_LED_On(LED2_PIN); // LD1 orange turns on
 8002c20:	2000      	movs	r0, #0
 8002c22:	f007 fbe3 	bl	800a3ec <BSP_LED_On>
	HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET); // LD2 green turns on
 8002c26:	2200      	movs	r2, #0
 8002c28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c2c:	481c      	ldr	r0, [pc, #112]	; (8002ca0 <awakeFromSleep+0x84>)
 8002c2e:	f00b fa65 	bl	800e0fc <HAL_GPIO_WritePin>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8002c32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c36:	f009 fa65 	bl	800c104 <HAL_Delay>

	// turn on lcd
	BSP_LCD_DisplayOn();
 8002c3a:	f008 fd4d 	bl	800b6d8 <BSP_LCD_DisplayOn>
	DIMMED_SCREEN = false;
 8002c3e:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <awakeFromSleep+0x88>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8002c44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c48:	f009 fa5c 	bl	800c104 <HAL_Delay>

	// turn on laser and test point
	HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, GPIO_PIN_SET); // laser
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c52:	4815      	ldr	r0, [pc, #84]	; (8002ca8 <awakeFromSleep+0x8c>)
 8002c54:	f00b fa52 	bl	800e0fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D7_GPIO_Port, ARD_D7_Pin, GPIO_PIN_SET); // test point: timer frequency
 8002c58:	2201      	movs	r2, #1
 8002c5a:	2140      	movs	r1, #64	; 0x40
 8002c5c:	4813      	ldr	r0, [pc, #76]	; (8002cac <awakeFromSleep+0x90>)
 8002c5e:	f00b fa4d 	bl	800e0fc <HAL_GPIO_WritePin>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8002c62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c66:	f009 fa4d 	bl	800c104 <HAL_Delay>

	// turn on ts
	BSP_TS_ITConfig();
 8002c6a:	f009 f811 	bl	800bc90 <BSP_TS_ITConfig>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8002c6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c72:	f009 fa47 	bl	800c104 <HAL_Delay>

	// turn on BT pwr transistor
	HAL_GPIO_WritePin(ARD_D2_GPIO_Port, ARD_D2_Pin, GPIO_PIN_SET);
 8002c76:	2201      	movs	r2, #1
 8002c78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c7c:	480b      	ldr	r0, [pc, #44]	; (8002cac <awakeFromSleep+0x90>)
 8002c7e:	f00b fa3d 	bl	800e0fc <HAL_GPIO_WritePin>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8002c82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c86:	f009 fa3d 	bl	800c104 <HAL_Delay>

	// set flags
	BT_ENABLED = true;
 8002c8a:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <awakeFromSleep+0x94>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	701a      	strb	r2, [r3, #0]
	ENTER_SLEEP_MODE = false;
 8002c90:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <awakeFromSleep+0x98>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	701a      	strb	r2, [r3, #0]
	SLEEP_MODE_ACTIVE = false;
 8002c96:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <awakeFromSleep+0x9c>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]

}
 8002c9c:	bf00      	nop
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	48000400 	.word	0x48000400
 8002ca4:	20000aed 	.word	0x20000aed
 8002ca8:	48002000 	.word	0x48002000
 8002cac:	48001800 	.word	0x48001800
 8002cb0:	20000000 	.word	0x20000000
 8002cb4:	20000aef 	.word	0x20000aef
 8002cb8:	20000aee 	.word	0x20000aee

08002cbc <enterSleep>:


void enterSleep(void) {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0

	// turn off ts
	BSP_TS_ITDeConfig();
 8002cc0:	f008 fffe 	bl	800bcc0 <BSP_TS_ITDeConfig>

	// turn off lcd
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8002cc4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002cc8:	f008 fa76 	bl	800b1b8 <BSP_LCD_Clear>
	if(DIMMED_SCREEN == true) {
 8002ccc:	4b26      	ldr	r3, [pc, #152]	; (8002d68 <enterSleep+0xac>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <enterSleep+0x1c>
		BSP_LCD_ScreenDimmingOff();
 8002cd4:	f008 fe40 	bl	800b958 <BSP_LCD_ScreenDimmingOff>
	}
	BSP_LCD_ScreenDimmingConfig(100, 0, 5, 20);
 8002cd8:	2314      	movs	r3, #20
 8002cda:	2205      	movs	r2, #5
 8002cdc:	2100      	movs	r1, #0
 8002cde:	2064      	movs	r0, #100	; 0x64
 8002ce0:	f008 fd0e 	bl	800b700 <BSP_LCD_ScreenDimmingConfig>
	BSP_LCD_ScreenDimmingOn();
 8002ce4:	f008 fd3e 	bl	800b764 <BSP_LCD_ScreenDimmingOn>
	BSP_LCD_DisplayOff();
 8002ce8:	f008 fd00 	bl	800b6ec <BSP_LCD_DisplayOff>
	DIMMED_SCREEN = true;
 8002cec:	4b1e      	ldr	r3, [pc, #120]	; (8002d68 <enterSleep+0xac>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000); // wait for fade to finish
 8002cf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cf6:	f009 fa05 	bl	800c104 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_RESET); // force the backlight off
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	481b      	ldr	r0, [pc, #108]	; (8002d6c <enterSleep+0xb0>)
 8002d00:	f00b f9fc 	bl	800e0fc <HAL_GPIO_WritePin>

	// turn off BT pwr transistor
	HAL_GPIO_WritePin(ARD_D2_GPIO_Port, ARD_D2_Pin, GPIO_PIN_RESET);
 8002d04:	2200      	movs	r2, #0
 8002d06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d0a:	4819      	ldr	r0, [pc, #100]	; (8002d70 <enterSleep+0xb4>)
 8002d0c:	f00b f9f6 	bl	800e0fc <HAL_GPIO_WritePin>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8002d10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d14:	f009 f9f6 	bl	800c104 <HAL_Delay>

	// turn off LD1, LD2
	BSP_LED_Off(LED2_PIN); // LD1 orange turns off
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f007 fb89 	bl	800a430 <BSP_LED_Off>
	HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_SET); // LD2 green turns off
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d24:	4813      	ldr	r0, [pc, #76]	; (8002d74 <enterSleep+0xb8>)
 8002d26:	f00b f9e9 	bl	800e0fc <HAL_GPIO_WritePin>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8002d2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d2e:	f009 f9e9 	bl	800c104 <HAL_Delay>

	// turn off laser and test point
	HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, GPIO_PIN_RESET); // laser
 8002d32:	2200      	movs	r2, #0
 8002d34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d38:	480c      	ldr	r0, [pc, #48]	; (8002d6c <enterSleep+0xb0>)
 8002d3a:	f00b f9df 	bl	800e0fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D7_GPIO_Port, ARD_D7_Pin, GPIO_PIN_RESET); // test point: timer frequency
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2140      	movs	r1, #64	; 0x40
 8002d42:	480b      	ldr	r0, [pc, #44]	; (8002d70 <enterSleep+0xb4>)
 8002d44:	f00b f9da 	bl	800e0fc <HAL_GPIO_WritePin>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8002d48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d4c:	f009 f9da 	bl	800c104 <HAL_Delay>

	// set flags
	BT_ENABLED = false;
 8002d50:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <enterSleep+0xbc>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	701a      	strb	r2, [r3, #0]
	ENTER_SLEEP_MODE = false;
 8002d56:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <enterSleep+0xc0>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	701a      	strb	r2, [r3, #0]
	SLEEP_MODE_ACTIVE = true;
 8002d5c:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <enterSleep+0xc4>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	701a      	strb	r2, [r3, #0]

}
 8002d62:	bf00      	nop
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000aed 	.word	0x20000aed
 8002d6c:	48002000 	.word	0x48002000
 8002d70:	48001800 	.word	0x48001800
 8002d74:	48000400 	.word	0x48000400
 8002d78:	20000000 	.word	0x20000000
 8002d7c:	20000aef 	.word	0x20000aef
 8002d80:	20000aee 	.word	0x20000aee

08002d84 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	80fb      	strh	r3, [r7, #6]

	// DOWN: enter sleep mode
	// LEFT: wake up (event)
	// RIGHT: toggle bt enabled

	if(GPIO_Pin == JOY_DOWN_Pin) {
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d94:	d102      	bne.n	8002d9c <HAL_GPIO_EXTI_Callback+0x18>
		// set flag to enter sleep mode
		ENTER_SLEEP_MODE = true;
 8002d96:	4b15      	ldr	r3, [pc, #84]	; (8002dec <HAL_GPIO_EXTI_Callback+0x68>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == JOY_RIGHT_Pin) {
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002da2:	d11f      	bne.n	8002de4 <HAL_GPIO_EXTI_Callback+0x60>

		if(BT_ENABLED) {
 8002da4:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d006      	beq.n	8002dba <HAL_GPIO_EXTI_Callback+0x36>
			HAL_GPIO_WritePin(ARD_D2_GPIO_Port, ARD_D2_Pin, GPIO_PIN_RESET); // turn off BT pwr transistor
 8002dac:	2200      	movs	r2, #0
 8002dae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002db2:	4810      	ldr	r0, [pc, #64]	; (8002df4 <HAL_GPIO_EXTI_Callback+0x70>)
 8002db4:	f00b f9a2 	bl	800e0fc <HAL_GPIO_WritePin>
 8002db8:	e005      	b.n	8002dc6 <HAL_GPIO_EXTI_Callback+0x42>
		} else {
			HAL_GPIO_WritePin(ARD_D2_GPIO_Port, ARD_D2_Pin, GPIO_PIN_SET); // turn on BT pwr transistor
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dc0:	480c      	ldr	r0, [pc, #48]	; (8002df4 <HAL_GPIO_EXTI_Callback+0x70>)
 8002dc2:	f00b f99b 	bl	800e0fc <HAL_GPIO_WritePin>
		}

		BT_ENABLED = !BT_ENABLED;
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	bf14      	ite	ne
 8002dce:	2301      	movne	r3, #1
 8002dd0:	2300      	moveq	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	f083 0301 	eor.w	r3, r3, #1
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	4b03      	ldr	r3, [pc, #12]	; (8002df0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002de2:	701a      	strb	r2, [r3, #0]

	}

}
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	20000aef 	.word	0x20000aef
 8002df0:	20000000 	.word	0x20000000
 8002df4:	48001800 	.word	0x48001800

08002df8 <HAL_SYSTICK_Callback>:
  * @brief SYSTICK callback
  * @param None
  * @retval None
  */
void HAL_SYSTICK_Callback(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  //HAL_IncTick(); // it's already incremented in _it.c
  if (TimingDelay != 0) {
 8002dfc:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <HAL_SYSTICK_Callback+0x28>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_SYSTICK_Callback+0x18>
    TimingDelay--;
 8002e04:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <HAL_SYSTICK_Callback+0x28>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	4a05      	ldr	r2, [pc, #20]	; (8002e20 <HAL_SYSTICK_Callback+0x28>)
 8002e0c:	6013      	str	r3, [r2, #0]
  } else {
    TimingDelay = LED_TOGGLE_DELAY;
  }
}
 8002e0e:	e002      	b.n	8002e16 <HAL_SYSTICK_Callback+0x1e>
    TimingDelay = LED_TOGGLE_DELAY;
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <HAL_SYSTICK_Callback+0x28>)
 8002e12:	2264      	movs	r2, #100	; 0x64
 8002e14:	601a      	str	r2, [r3, #0]
}
 8002e16:	bf00      	nop
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	20000af4 	.word	0x20000af4

08002e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e28:	b672      	cpsid	i
}
 8002e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e2c:	e7fe      	b.n	8002e2c <Error_Handler+0x8>
	...

08002e30 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8002e34:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <MX_QUADSPI_Init+0x50>)
 8002e36:	4a13      	ldr	r2, [pc, #76]	; (8002e84 <MX_QUADSPI_Init+0x54>)
 8002e38:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8002e3a:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <MX_QUADSPI_Init+0x50>)
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8002e40:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <MX_QUADSPI_Init+0x50>)
 8002e42:	2204      	movs	r2, #4
 8002e44:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002e46:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <MX_QUADSPI_Init+0x50>)
 8002e48:	2210      	movs	r2, #16
 8002e4a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <MX_QUADSPI_Init+0x50>)
 8002e4e:	2217      	movs	r2, #23
 8002e50:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002e52:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <MX_QUADSPI_Init+0x50>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002e58:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <MX_QUADSPI_Init+0x50>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002e5e:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <MX_QUADSPI_Init+0x50>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <MX_QUADSPI_Init+0x50>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002e6a:	4805      	ldr	r0, [pc, #20]	; (8002e80 <MX_QUADSPI_Init+0x50>)
 8002e6c:	f00d fde8 	bl	8010a40 <HAL_QSPI_Init>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8002e76:	f7ff ffd5 	bl	8002e24 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20001530 	.word	0x20001530
 8002e84:	a0001000 	.word	0xa0001000

08002e88 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	; 0x28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	f107 0314 	add.w	r3, r7, #20
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a26      	ldr	r2, [pc, #152]	; (8002f40 <HAL_QSPI_MspInit+0xb8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d145      	bne.n	8002f36 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002eaa:	4b26      	ldr	r3, [pc, #152]	; (8002f44 <HAL_QSPI_MspInit+0xbc>)
 8002eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eae:	4a25      	ldr	r2, [pc, #148]	; (8002f44 <HAL_QSPI_MspInit+0xbc>)
 8002eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb4:	6513      	str	r3, [r2, #80]	; 0x50
 8002eb6:	4b23      	ldr	r3, [pc, #140]	; (8002f44 <HAL_QSPI_MspInit+0xbc>)
 8002eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec2:	4b20      	ldr	r3, [pc, #128]	; (8002f44 <HAL_QSPI_MspInit+0xbc>)
 8002ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec6:	4a1f      	ldr	r2, [pc, #124]	; (8002f44 <HAL_QSPI_MspInit+0xbc>)
 8002ec8:	f043 0302 	orr.w	r3, r3, #2
 8002ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ece:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <HAL_QSPI_MspInit+0xbc>)
 8002ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <HAL_QSPI_MspInit+0xbc>)
 8002edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ede:	4a19      	ldr	r2, [pc, #100]	; (8002f44 <HAL_QSPI_MspInit+0xbc>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ee6:	4b17      	ldr	r3, [pc, #92]	; (8002f44 <HAL_QSPI_MspInit+0xbc>)
 8002ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8002ef2:	f640 0303 	movw	r3, #2051	; 0x803
 8002ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f00:	2303      	movs	r3, #3
 8002f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002f04:	230a      	movs	r3, #10
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f08:	f107 0314 	add.w	r3, r7, #20
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	480e      	ldr	r0, [pc, #56]	; (8002f48 <HAL_QSPI_MspInit+0xc0>)
 8002f10:	f00a fe70 	bl	800dbf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8002f14:	23c8      	movs	r3, #200	; 0xc8
 8002f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f20:	2303      	movs	r3, #3
 8002f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002f24:	230a      	movs	r3, #10
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f28:	f107 0314 	add.w	r3, r7, #20
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f32:	f00a fe5f 	bl	800dbf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002f36:	bf00      	nop
 8002f38:	3728      	adds	r7, #40	; 0x28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	a0001000 	.word	0xa0001000
 8002f44:	40021000 	.word	0x40021000
 8002f48:	48000400 	.word	0x48000400

08002f4c <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8002f50:	4b4d      	ldr	r3, [pc, #308]	; (8003088 <MX_SAI1_Init+0x13c>)
 8002f52:	4a4e      	ldr	r2, [pc, #312]	; (800308c <MX_SAI1_Init+0x140>)
 8002f54:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8002f56:	4b4c      	ldr	r3, [pc, #304]	; (8003088 <MX_SAI1_Init+0x13c>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002f5c:	4b4a      	ldr	r3, [pc, #296]	; (8003088 <MX_SAI1_Init+0x13c>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8002f62:	4b49      	ldr	r3, [pc, #292]	; (8003088 <MX_SAI1_Init+0x13c>)
 8002f64:	2240      	movs	r2, #64	; 0x40
 8002f66:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002f68:	4b47      	ldr	r3, [pc, #284]	; (8003088 <MX_SAI1_Init+0x13c>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002f6e:	4b46      	ldr	r3, [pc, #280]	; (8003088 <MX_SAI1_Init+0x13c>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002f74:	4b44      	ldr	r3, [pc, #272]	; (8003088 <MX_SAI1_Init+0x13c>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002f7a:	4b43      	ldr	r3, [pc, #268]	; (8003088 <MX_SAI1_Init+0x13c>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002f80:	4b41      	ldr	r3, [pc, #260]	; (8003088 <MX_SAI1_Init+0x13c>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002f86:	4b40      	ldr	r3, [pc, #256]	; (8003088 <MX_SAI1_Init+0x13c>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002f8c:	4b3e      	ldr	r3, [pc, #248]	; (8003088 <MX_SAI1_Init+0x13c>)
 8002f8e:	4a40      	ldr	r2, [pc, #256]	; (8003090 <MX_SAI1_Init+0x144>)
 8002f90:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002f92:	4b3d      	ldr	r3, [pc, #244]	; (8003088 <MX_SAI1_Init+0x13c>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002f98:	4b3b      	ldr	r3, [pc, #236]	; (8003088 <MX_SAI1_Init+0x13c>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002f9e:	4b3a      	ldr	r3, [pc, #232]	; (8003088 <MX_SAI1_Init+0x13c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002fa4:	4b38      	ldr	r3, [pc, #224]	; (8003088 <MX_SAI1_Init+0x13c>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8002faa:	4b37      	ldr	r3, [pc, #220]	; (8003088 <MX_SAI1_Init+0x13c>)
 8002fac:	2208      	movs	r2, #8
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8002fb0:	4b35      	ldr	r3, [pc, #212]	; (8003088 <MX_SAI1_Init+0x13c>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002fb6:	4b34      	ldr	r3, [pc, #208]	; (8003088 <MX_SAI1_Init+0x13c>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002fbc:	4b32      	ldr	r3, [pc, #200]	; (8003088 <MX_SAI1_Init+0x13c>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002fc2:	4b31      	ldr	r3, [pc, #196]	; (8003088 <MX_SAI1_Init+0x13c>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8002fc8:	4b2f      	ldr	r3, [pc, #188]	; (8003088 <MX_SAI1_Init+0x13c>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002fce:	4b2e      	ldr	r3, [pc, #184]	; (8003088 <MX_SAI1_Init+0x13c>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8002fd4:	4b2c      	ldr	r3, [pc, #176]	; (8003088 <MX_SAI1_Init+0x13c>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8002fda:	4b2b      	ldr	r3, [pc, #172]	; (8003088 <MX_SAI1_Init+0x13c>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8002fe0:	4829      	ldr	r0, [pc, #164]	; (8003088 <MX_SAI1_Init+0x13c>)
 8002fe2:	f00f ffc1 	bl	8012f68 <HAL_SAI_Init>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8002fec:	f7ff ff1a 	bl	8002e24 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8002ff0:	4b28      	ldr	r3, [pc, #160]	; (8003094 <MX_SAI1_Init+0x148>)
 8002ff2:	4a29      	ldr	r2, [pc, #164]	; (8003098 <MX_SAI1_Init+0x14c>)
 8002ff4:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8002ff6:	4b27      	ldr	r3, [pc, #156]	; (8003094 <MX_SAI1_Init+0x148>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8002ffc:	4b25      	ldr	r3, [pc, #148]	; (8003094 <MX_SAI1_Init+0x148>)
 8002ffe:	2203      	movs	r2, #3
 8003000:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8003002:	4b24      	ldr	r3, [pc, #144]	; (8003094 <MX_SAI1_Init+0x148>)
 8003004:	2240      	movs	r2, #64	; 0x40
 8003006:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003008:	4b22      	ldr	r3, [pc, #136]	; (8003094 <MX_SAI1_Init+0x148>)
 800300a:	2200      	movs	r2, #0
 800300c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800300e:	4b21      	ldr	r3, [pc, #132]	; (8003094 <MX_SAI1_Init+0x148>)
 8003010:	2200      	movs	r2, #0
 8003012:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8003014:	4b1f      	ldr	r3, [pc, #124]	; (8003094 <MX_SAI1_Init+0x148>)
 8003016:	2201      	movs	r2, #1
 8003018:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800301a:	4b1e      	ldr	r3, [pc, #120]	; (8003094 <MX_SAI1_Init+0x148>)
 800301c:	2200      	movs	r2, #0
 800301e:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8003020:	4b1c      	ldr	r3, [pc, #112]	; (8003094 <MX_SAI1_Init+0x148>)
 8003022:	2200      	movs	r2, #0
 8003024:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003026:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <MX_SAI1_Init+0x148>)
 8003028:	2200      	movs	r2, #0
 800302a:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800302c:	4b19      	ldr	r3, [pc, #100]	; (8003094 <MX_SAI1_Init+0x148>)
 800302e:	2200      	movs	r2, #0
 8003030:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8003032:	4b18      	ldr	r3, [pc, #96]	; (8003094 <MX_SAI1_Init+0x148>)
 8003034:	2200      	movs	r2, #0
 8003036:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003038:	4b16      	ldr	r3, [pc, #88]	; (8003094 <MX_SAI1_Init+0x148>)
 800303a:	2200      	movs	r2, #0
 800303c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 800303e:	4b15      	ldr	r3, [pc, #84]	; (8003094 <MX_SAI1_Init+0x148>)
 8003040:	2208      	movs	r2, #8
 8003042:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8003044:	4b13      	ldr	r3, [pc, #76]	; (8003094 <MX_SAI1_Init+0x148>)
 8003046:	2201      	movs	r2, #1
 8003048:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800304a:	4b12      	ldr	r3, [pc, #72]	; (8003094 <MX_SAI1_Init+0x148>)
 800304c:	2200      	movs	r2, #0
 800304e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003050:	4b10      	ldr	r3, [pc, #64]	; (8003094 <MX_SAI1_Init+0x148>)
 8003052:	2200      	movs	r2, #0
 8003054:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8003056:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <MX_SAI1_Init+0x148>)
 8003058:	2200      	movs	r2, #0
 800305a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 800305c:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <MX_SAI1_Init+0x148>)
 800305e:	2200      	movs	r2, #0
 8003060:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8003062:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <MX_SAI1_Init+0x148>)
 8003064:	2200      	movs	r2, #0
 8003066:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8003068:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <MX_SAI1_Init+0x148>)
 800306a:	2201      	movs	r2, #1
 800306c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 800306e:	4b09      	ldr	r3, [pc, #36]	; (8003094 <MX_SAI1_Init+0x148>)
 8003070:	2200      	movs	r2, #0
 8003072:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8003074:	4807      	ldr	r0, [pc, #28]	; (8003094 <MX_SAI1_Init+0x148>)
 8003076:	f00f ff77 	bl	8012f68 <HAL_SAI_Init>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8003080:	f7ff fed0 	bl	8002e24 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8003084:	bf00      	nop
 8003086:	bd80      	pop	{r7, pc}
 8003088:	2000157c 	.word	0x2000157c
 800308c:	40015404 	.word	0x40015404
 8003090:	0002ee00 	.word	0x0002ee00
 8003094:	20001600 	.word	0x20001600
 8003098:	40015424 	.word	0x40015424

0800309c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08a      	sub	sp, #40	; 0x28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a33      	ldr	r2, [pc, #204]	; (8003178 <HAL_SAI_MspInit+0xdc>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d135      	bne.n	800311a <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 80030ae:	4b33      	ldr	r3, [pc, #204]	; (800317c <HAL_SAI_MspInit+0xe0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10b      	bne.n	80030ce <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80030b6:	4b32      	ldr	r3, [pc, #200]	; (8003180 <HAL_SAI_MspInit+0xe4>)
 80030b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ba:	4a31      	ldr	r2, [pc, #196]	; (8003180 <HAL_SAI_MspInit+0xe4>)
 80030bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030c0:	6613      	str	r3, [r2, #96]	; 0x60
 80030c2:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <HAL_SAI_MspInit+0xe4>)
 80030c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80030ce:	4b2b      	ldr	r3, [pc, #172]	; (800317c <HAL_SAI_MspInit+0xe0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3301      	adds	r3, #1
 80030d4:	4a29      	ldr	r2, [pc, #164]	; (800317c <HAL_SAI_MspInit+0xe0>)
 80030d6:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 80030d8:	2354      	movs	r3, #84	; 0x54
 80030da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030dc:	2302      	movs	r3, #2
 80030de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e4:	2300      	movs	r3, #0
 80030e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80030e8:	230d      	movs	r3, #13
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030ec:	f107 0314 	add.w	r3, r7, #20
 80030f0:	4619      	mov	r1, r3
 80030f2:	4824      	ldr	r0, [pc, #144]	; (8003184 <HAL_SAI_MspInit+0xe8>)
 80030f4:	f00a fd7e 	bl	800dbf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80030f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fe:	2302      	movs	r3, #2
 8003100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003106:	2300      	movs	r3, #0
 8003108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800310a:	230d      	movs	r3, #13
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800310e:	f107 0314 	add.w	r3, r7, #20
 8003112:	4619      	mov	r1, r3
 8003114:	481c      	ldr	r0, [pc, #112]	; (8003188 <HAL_SAI_MspInit+0xec>)
 8003116:	f00a fd6d 	bl	800dbf4 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI1_Block_B)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a1b      	ldr	r2, [pc, #108]	; (800318c <HAL_SAI_MspInit+0xf0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d124      	bne.n	800316e <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8003124:	4b15      	ldr	r3, [pc, #84]	; (800317c <HAL_SAI_MspInit+0xe0>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10b      	bne.n	8003144 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800312c:	4b14      	ldr	r3, [pc, #80]	; (8003180 <HAL_SAI_MspInit+0xe4>)
 800312e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003130:	4a13      	ldr	r2, [pc, #76]	; (8003180 <HAL_SAI_MspInit+0xe4>)
 8003132:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003136:	6613      	str	r3, [r2, #96]	; 0x60
 8003138:	4b11      	ldr	r3, [pc, #68]	; (8003180 <HAL_SAI_MspInit+0xe4>)
 800313a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800313c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8003144:	4b0d      	ldr	r3, [pc, #52]	; (800317c <HAL_SAI_MspInit+0xe0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	3301      	adds	r3, #1
 800314a:	4a0c      	ldr	r2, [pc, #48]	; (800317c <HAL_SAI_MspInit+0xe0>)
 800314c:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 800314e:	2308      	movs	r3, #8
 8003150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003152:	2302      	movs	r3, #2
 8003154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315a:	2300      	movs	r3, #0
 800315c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800315e:	230d      	movs	r3, #13
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 8003162:	f107 0314 	add.w	r3, r7, #20
 8003166:	4619      	mov	r1, r3
 8003168:	4806      	ldr	r0, [pc, #24]	; (8003184 <HAL_SAI_MspInit+0xe8>)
 800316a:	f00a fd43 	bl	800dbf4 <HAL_GPIO_Init>

    }
}
 800316e:	bf00      	nop
 8003170:	3728      	adds	r7, #40	; 0x28
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40015404 	.word	0x40015404
 800317c:	20001684 	.word	0x20001684
 8003180:	40021000 	.word	0x40021000
 8003184:	48001000 	.word	0x48001000
 8003188:	48000400 	.word	0x48000400
 800318c:	40015424 	.word	0x40015424

08003190 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003194:	4b14      	ldr	r3, [pc, #80]	; (80031e8 <MX_SDMMC1_SD_Init+0x58>)
 8003196:	4a15      	ldr	r2, [pc, #84]	; (80031ec <MX_SDMMC1_SD_Init+0x5c>)
 8003198:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800319a:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <MX_SDMMC1_SD_Init+0x58>)
 800319c:	2200      	movs	r2, #0
 800319e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80031a0:	4b11      	ldr	r3, [pc, #68]	; (80031e8 <MX_SDMMC1_SD_Init+0x58>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80031a6:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <MX_SDMMC1_SD_Init+0x58>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80031ac:	4b0e      	ldr	r3, [pc, #56]	; (80031e8 <MX_SDMMC1_SD_Init+0x58>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80031b2:	4b0d      	ldr	r3, [pc, #52]	; (80031e8 <MX_SDMMC1_SD_Init+0x58>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <MX_SDMMC1_SD_Init+0x58>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80031be:	480a      	ldr	r0, [pc, #40]	; (80031e8 <MX_SDMMC1_SD_Init+0x58>)
 80031c0:	f010 f87e 	bl	80132c0 <HAL_SD_Init>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 80031ca:	f7ff fe2b 	bl	8002e24 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80031ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80031d2:	4805      	ldr	r0, [pc, #20]	; (80031e8 <MX_SDMMC1_SD_Init+0x58>)
 80031d4:	f010 faee 	bl	80137b4 <HAL_SD_ConfigWideBusOperation>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 80031de:	f7ff fe21 	bl	8002e24 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80031e2:	bf00      	nop
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20001688 	.word	0x20001688
 80031ec:	40012800 	.word	0x40012800

080031f0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08a      	sub	sp, #40	; 0x28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f8:	f107 0314 	add.w	r3, r7, #20
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a25      	ldr	r2, [pc, #148]	; (80032a4 <HAL_SD_MspInit+0xb4>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d144      	bne.n	800329c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003212:	4b25      	ldr	r3, [pc, #148]	; (80032a8 <HAL_SD_MspInit+0xb8>)
 8003214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003216:	4a24      	ldr	r2, [pc, #144]	; (80032a8 <HAL_SD_MspInit+0xb8>)
 8003218:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800321c:	6613      	str	r3, [r2, #96]	; 0x60
 800321e:	4b22      	ldr	r3, [pc, #136]	; (80032a8 <HAL_SD_MspInit+0xb8>)
 8003220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800322a:	4b1f      	ldr	r3, [pc, #124]	; (80032a8 <HAL_SD_MspInit+0xb8>)
 800322c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322e:	4a1e      	ldr	r2, [pc, #120]	; (80032a8 <HAL_SD_MspInit+0xb8>)
 8003230:	f043 0308 	orr.w	r3, r3, #8
 8003234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003236:	4b1c      	ldr	r3, [pc, #112]	; (80032a8 <HAL_SD_MspInit+0xb8>)
 8003238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003242:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <HAL_SD_MspInit+0xb8>)
 8003244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003246:	4a18      	ldr	r2, [pc, #96]	; (80032a8 <HAL_SD_MspInit+0xb8>)
 8003248:	f043 0304 	orr.w	r3, r3, #4
 800324c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800324e:	4b16      	ldr	r3, [pc, #88]	; (80032a8 <HAL_SD_MspInit+0xb8>)
 8003250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 800325a:	2304      	movs	r3, #4
 800325c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325e:	2302      	movs	r3, #2
 8003260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003262:	2300      	movs	r3, #0
 8003264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003266:	2303      	movs	r3, #3
 8003268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800326a:	230c      	movs	r3, #12
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 800326e:	f107 0314 	add.w	r3, r7, #20
 8003272:	4619      	mov	r1, r3
 8003274:	480d      	ldr	r0, [pc, #52]	; (80032ac <HAL_SD_MspInit+0xbc>)
 8003276:	f00a fcbd 	bl	800dbf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 800327a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800327e:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003280:	2302      	movs	r3, #2
 8003282:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003284:	2300      	movs	r3, #0
 8003286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003288:	2303      	movs	r3, #3
 800328a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800328c:	230c      	movs	r3, #12
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003290:	f107 0314 	add.w	r3, r7, #20
 8003294:	4619      	mov	r1, r3
 8003296:	4806      	ldr	r0, [pc, #24]	; (80032b0 <HAL_SD_MspInit+0xc0>)
 8003298:	f00a fcac 	bl	800dbf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800329c:	bf00      	nop
 800329e:	3728      	adds	r7, #40	; 0x28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40012800 	.word	0x40012800
 80032a8:	40021000 	.word	0x40021000
 80032ac:	48000c00 	.word	0x48000c00
 80032b0:	48000800 	.word	0x48000800

080032b4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80032b8:	4b1b      	ldr	r3, [pc, #108]	; (8003328 <MX_SPI1_Init+0x74>)
 80032ba:	4a1c      	ldr	r2, [pc, #112]	; (800332c <MX_SPI1_Init+0x78>)
 80032bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80032be:	4b1a      	ldr	r3, [pc, #104]	; (8003328 <MX_SPI1_Init+0x74>)
 80032c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80032c6:	4b18      	ldr	r3, [pc, #96]	; (8003328 <MX_SPI1_Init+0x74>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80032cc:	4b16      	ldr	r3, [pc, #88]	; (8003328 <MX_SPI1_Init+0x74>)
 80032ce:	f44f 7240 	mov.w	r2, #768	; 0x300
 80032d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032d4:	4b14      	ldr	r3, [pc, #80]	; (8003328 <MX_SPI1_Init+0x74>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032da:	4b13      	ldr	r3, [pc, #76]	; (8003328 <MX_SPI1_Init+0x74>)
 80032dc:	2200      	movs	r2, #0
 80032de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80032e0:	4b11      	ldr	r3, [pc, #68]	; (8003328 <MX_SPI1_Init+0x74>)
 80032e2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80032e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032e8:	4b0f      	ldr	r3, [pc, #60]	; (8003328 <MX_SPI1_Init+0x74>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032ee:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <MX_SPI1_Init+0x74>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80032f4:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <MX_SPI1_Init+0x74>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032fa:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <MX_SPI1_Init+0x74>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003300:	4b09      	ldr	r3, [pc, #36]	; (8003328 <MX_SPI1_Init+0x74>)
 8003302:	2207      	movs	r2, #7
 8003304:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003306:	4b08      	ldr	r3, [pc, #32]	; (8003328 <MX_SPI1_Init+0x74>)
 8003308:	2200      	movs	r2, #0
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800330c:	4b06      	ldr	r3, [pc, #24]	; (8003328 <MX_SPI1_Init+0x74>)
 800330e:	2208      	movs	r2, #8
 8003310:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003312:	4805      	ldr	r0, [pc, #20]	; (8003328 <MX_SPI1_Init+0x74>)
 8003314:	f010 fdc6 	bl	8013ea4 <HAL_SPI_Init>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800331e:	f7ff fd81 	bl	8002e24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003322:	bf00      	nop
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	2000170c 	.word	0x2000170c
 800332c:	40013000 	.word	0x40013000

08003330 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003334:	4b1b      	ldr	r3, [pc, #108]	; (80033a4 <MX_SPI2_Init+0x74>)
 8003336:	4a1c      	ldr	r2, [pc, #112]	; (80033a8 <MX_SPI2_Init+0x78>)
 8003338:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800333a:	4b1a      	ldr	r3, [pc, #104]	; (80033a4 <MX_SPI2_Init+0x74>)
 800333c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003340:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003342:	4b18      	ldr	r3, [pc, #96]	; (80033a4 <MX_SPI2_Init+0x74>)
 8003344:	2200      	movs	r2, #0
 8003346:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8003348:	4b16      	ldr	r3, [pc, #88]	; (80033a4 <MX_SPI2_Init+0x74>)
 800334a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800334e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003350:	4b14      	ldr	r3, [pc, #80]	; (80033a4 <MX_SPI2_Init+0x74>)
 8003352:	2200      	movs	r2, #0
 8003354:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003356:	4b13      	ldr	r3, [pc, #76]	; (80033a4 <MX_SPI2_Init+0x74>)
 8003358:	2200      	movs	r2, #0
 800335a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800335c:	4b11      	ldr	r3, [pc, #68]	; (80033a4 <MX_SPI2_Init+0x74>)
 800335e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003362:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003364:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <MX_SPI2_Init+0x74>)
 8003366:	2200      	movs	r2, #0
 8003368:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800336a:	4b0e      	ldr	r3, [pc, #56]	; (80033a4 <MX_SPI2_Init+0x74>)
 800336c:	2200      	movs	r2, #0
 800336e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003370:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <MX_SPI2_Init+0x74>)
 8003372:	2200      	movs	r2, #0
 8003374:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003376:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <MX_SPI2_Init+0x74>)
 8003378:	2200      	movs	r2, #0
 800337a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800337c:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <MX_SPI2_Init+0x74>)
 800337e:	2207      	movs	r2, #7
 8003380:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003382:	4b08      	ldr	r3, [pc, #32]	; (80033a4 <MX_SPI2_Init+0x74>)
 8003384:	2200      	movs	r2, #0
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <MX_SPI2_Init+0x74>)
 800338a:	2208      	movs	r2, #8
 800338c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800338e:	4805      	ldr	r0, [pc, #20]	; (80033a4 <MX_SPI2_Init+0x74>)
 8003390:	f010 fd88 	bl	8013ea4 <HAL_SPI_Init>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800339a:	f7ff fd43 	bl	8002e24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20001770 	.word	0x20001770
 80033a8:	40003800 	.word	0x40003800

080033ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08e      	sub	sp, #56	; 0x38
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	60da      	str	r2, [r3, #12]
 80033c2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a4b      	ldr	r2, [pc, #300]	; (80034f8 <HAL_SPI_MspInit+0x14c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d146      	bne.n	800345c <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033ce:	4b4b      	ldr	r3, [pc, #300]	; (80034fc <HAL_SPI_MspInit+0x150>)
 80033d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d2:	4a4a      	ldr	r2, [pc, #296]	; (80034fc <HAL_SPI_MspInit+0x150>)
 80033d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033d8:	6613      	str	r3, [r2, #96]	; 0x60
 80033da:	4b48      	ldr	r3, [pc, #288]	; (80034fc <HAL_SPI_MspInit+0x150>)
 80033dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033e2:	623b      	str	r3, [r7, #32]
 80033e4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033e6:	4b45      	ldr	r3, [pc, #276]	; (80034fc <HAL_SPI_MspInit+0x150>)
 80033e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ea:	4a44      	ldr	r2, [pc, #272]	; (80034fc <HAL_SPI_MspInit+0x150>)
 80033ec:	f043 0302 	orr.w	r3, r3, #2
 80033f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033f2:	4b42      	ldr	r3, [pc, #264]	; (80034fc <HAL_SPI_MspInit+0x150>)
 80033f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	61fb      	str	r3, [r7, #28]
 80033fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fe:	4b3f      	ldr	r3, [pc, #252]	; (80034fc <HAL_SPI_MspInit+0x150>)
 8003400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003402:	4a3e      	ldr	r2, [pc, #248]	; (80034fc <HAL_SPI_MspInit+0x150>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800340a:	4b3c      	ldr	r3, [pc, #240]	; (80034fc <HAL_SPI_MspInit+0x150>)
 800340c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	61bb      	str	r3, [r7, #24]
 8003414:	69bb      	ldr	r3, [r7, #24]
    PB4 (NJTRST)     ------> SPI1_MISO
    PA15 (JTDI)     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8003416:	2330      	movs	r3, #48	; 0x30
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341a:	2302      	movs	r3, #2
 800341c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341e:	2300      	movs	r3, #0
 8003420:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003422:	2303      	movs	r3, #3
 8003424:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003426:	2305      	movs	r3, #5
 8003428:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800342a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800342e:	4619      	mov	r1, r3
 8003430:	4833      	ldr	r0, [pc, #204]	; (8003500 <HAL_SPI_MspInit+0x154>)
 8003432:	f00a fbdf 	bl	800dbf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 8003436:	f248 0320 	movw	r3, #32800	; 0x8020
 800343a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343c:	2302      	movs	r3, #2
 800343e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003440:	2300      	movs	r3, #0
 8003442:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003444:	2303      	movs	r3, #3
 8003446:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003448:	2305      	movs	r3, #5
 800344a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003450:	4619      	mov	r1, r3
 8003452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003456:	f00a fbcd 	bl	800dbf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800345a:	e049      	b.n	80034f0 <HAL_SPI_MspInit+0x144>
  else if(spiHandle->Instance==SPI2)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a28      	ldr	r2, [pc, #160]	; (8003504 <HAL_SPI_MspInit+0x158>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d144      	bne.n	80034f0 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003466:	4b25      	ldr	r3, [pc, #148]	; (80034fc <HAL_SPI_MspInit+0x150>)
 8003468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346a:	4a24      	ldr	r2, [pc, #144]	; (80034fc <HAL_SPI_MspInit+0x150>)
 800346c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003470:	6593      	str	r3, [r2, #88]	; 0x58
 8003472:	4b22      	ldr	r3, [pc, #136]	; (80034fc <HAL_SPI_MspInit+0x150>)
 8003474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800347e:	4b1f      	ldr	r3, [pc, #124]	; (80034fc <HAL_SPI_MspInit+0x150>)
 8003480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003482:	4a1e      	ldr	r2, [pc, #120]	; (80034fc <HAL_SPI_MspInit+0x150>)
 8003484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800348a:	4b1c      	ldr	r3, [pc, #112]	; (80034fc <HAL_SPI_MspInit+0x150>)
 800348c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003496:	4b19      	ldr	r3, [pc, #100]	; (80034fc <HAL_SPI_MspInit+0x150>)
 8003498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349a:	4a18      	ldr	r2, [pc, #96]	; (80034fc <HAL_SPI_MspInit+0x150>)
 800349c:	f043 0302 	orr.w	r3, r3, #2
 80034a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034a2:	4b16      	ldr	r3, [pc, #88]	; (80034fc <HAL_SPI_MspInit+0x150>)
 80034a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 80034ae:	2306      	movs	r3, #6
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b2:	2302      	movs	r3, #2
 80034b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ba:	2303      	movs	r3, #3
 80034bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034be:	2305      	movs	r3, #5
 80034c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80034c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034c6:	4619      	mov	r1, r3
 80034c8:	480f      	ldr	r0, [pc, #60]	; (8003508 <HAL_SPI_MspInit+0x15c>)
 80034ca:	f00a fb93 	bl	800dbf4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 80034ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d4:	2302      	movs	r3, #2
 80034d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d8:	2300      	movs	r3, #0
 80034da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034dc:	2303      	movs	r3, #3
 80034de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034e0:	2305      	movs	r3, #5
 80034e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 80034e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e8:	4619      	mov	r1, r3
 80034ea:	4805      	ldr	r0, [pc, #20]	; (8003500 <HAL_SPI_MspInit+0x154>)
 80034ec:	f00a fb82 	bl	800dbf4 <HAL_GPIO_Init>
}
 80034f0:	bf00      	nop
 80034f2:	3738      	adds	r7, #56	; 0x38
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40013000 	.word	0x40013000
 80034fc:	40021000 	.word	0x40021000
 8003500:	48000400 	.word	0x48000400
 8003504:	40003800 	.word	0x40003800
 8003508:	48002000 	.word	0x48002000

0800350c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003512:	4b0f      	ldr	r3, [pc, #60]	; (8003550 <HAL_MspInit+0x44>)
 8003514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003516:	4a0e      	ldr	r2, [pc, #56]	; (8003550 <HAL_MspInit+0x44>)
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	6613      	str	r3, [r2, #96]	; 0x60
 800351e:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <HAL_MspInit+0x44>)
 8003520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	607b      	str	r3, [r7, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800352a:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_MspInit+0x44>)
 800352c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352e:	4a08      	ldr	r2, [pc, #32]	; (8003550 <HAL_MspInit+0x44>)
 8003530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003534:	6593      	str	r3, [r2, #88]	; 0x58
 8003536:	4b06      	ldr	r3, [pc, #24]	; (8003550 <HAL_MspInit+0x44>)
 8003538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40021000 	.word	0x40021000

08003554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003558:	e7fe      	b.n	8003558 <NMI_Handler+0x4>

0800355a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800355a:	b480      	push	{r7}
 800355c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800355e:	e7fe      	b.n	800355e <HardFault_Handler+0x4>

08003560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003564:	e7fe      	b.n	8003564 <MemManage_Handler+0x4>

08003566 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003566:	b480      	push	{r7}
 8003568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800356a:	e7fe      	b.n	800356a <BusFault_Handler+0x4>

0800356c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003570:	e7fe      	b.n	8003570 <UsageFault_Handler+0x4>

08003572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003572:	b480      	push	{r7}
 8003574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003584:	bf00      	nop
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800358e:	b480      	push	{r7}
 8003590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003592:	bf00      	nop
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035a0:	f008 fd90 	bl	800c0c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80035a4:	f00a f98d 	bl	800d8c2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80035a8:	bf00      	nop
 80035aa:	bd80      	pop	{r7, pc}

080035ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MFX_IRQ_OUT_Pin);
 80035b0:	2020      	movs	r0, #32
 80035b2:	f00a fdbb 	bl	800e12c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80035b6:	bf00      	nop
 80035b8:	bd80      	pop	{r7, pc}

080035ba <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_DOWN_Pin);
 80035be:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80035c2:	f00a fdb3 	bl	800e12c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_RIGHT_Pin);
 80035c6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80035ca:	f00a fdaf 	bl	800e12c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CTP_INT_Pin);
 80035ce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80035d2:	f00a fdab 	bl	800e12c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80035d6:	bf00      	nop
 80035d8:	bd80      	pop	{r7, pc}
	...

080035dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80035e0:	4802      	ldr	r0, [pc, #8]	; (80035ec <TIM6_DAC_IRQHandler+0x10>)
 80035e2:	f011 f805 	bl	80145f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80035e6:	bf00      	nop
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	200017d8 	.word	0x200017d8

080035f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80035f4:	4802      	ldr	r0, [pc, #8]	; (8003600 <OTG_FS_IRQHandler+0x10>)
 80035f6:	f00c f8a7 	bl	800f748 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80035fa:	bf00      	nop
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	200030f4 	.word	0x200030f4

08003604 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	e00a      	b.n	800362c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003616:	f3af 8000 	nop.w
 800361a:	4601      	mov	r1, r0
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	60ba      	str	r2, [r7, #8]
 8003622:	b2ca      	uxtb	r2, r1
 8003624:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	3301      	adds	r3, #1
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	429a      	cmp	r2, r3
 8003632:	dbf0      	blt.n	8003616 <_read+0x12>
	}

return len;
 8003634:	687b      	ldr	r3, [r7, #4]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b086      	sub	sp, #24
 8003642:	af00      	add	r7, sp, #0
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
 800364e:	e009      	b.n	8003664 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	60ba      	str	r2, [r7, #8]
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	3301      	adds	r3, #1
 8003662:	617b      	str	r3, [r7, #20]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	429a      	cmp	r2, r3
 800366a:	dbf1      	blt.n	8003650 <_write+0x12>
	}
	return len;
 800366c:	687b      	ldr	r3, [r7, #4]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <_close>:

int _close(int file)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
	return -1;
 800367e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003682:	4618      	mov	r0, r3
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800369e:	605a      	str	r2, [r3, #4]
	return 0;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <_isatty>:

int _isatty(int file)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
	return 1;
 80036b6:	2301      	movs	r3, #1
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
	return 0;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
	...

080036e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036e8:	4a14      	ldr	r2, [pc, #80]	; (800373c <_sbrk+0x5c>)
 80036ea:	4b15      	ldr	r3, [pc, #84]	; (8003740 <_sbrk+0x60>)
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036f4:	4b13      	ldr	r3, [pc, #76]	; (8003744 <_sbrk+0x64>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d102      	bne.n	8003702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036fc:	4b11      	ldr	r3, [pc, #68]	; (8003744 <_sbrk+0x64>)
 80036fe:	4a12      	ldr	r2, [pc, #72]	; (8003748 <_sbrk+0x68>)
 8003700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003702:	4b10      	ldr	r3, [pc, #64]	; (8003744 <_sbrk+0x64>)
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4413      	add	r3, r2
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	429a      	cmp	r2, r3
 800370e:	d207      	bcs.n	8003720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003710:	f016 fed2 	bl	801a4b8 <__errno>
 8003714:	4603      	mov	r3, r0
 8003716:	220c      	movs	r2, #12
 8003718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800371a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800371e:	e009      	b.n	8003734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003720:	4b08      	ldr	r3, [pc, #32]	; (8003744 <_sbrk+0x64>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003726:	4b07      	ldr	r3, [pc, #28]	; (8003744 <_sbrk+0x64>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4413      	add	r3, r2
 800372e:	4a05      	ldr	r2, [pc, #20]	; (8003744 <_sbrk+0x64>)
 8003730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003732:	68fb      	ldr	r3, [r7, #12]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	20050000 	.word	0x20050000
 8003740:	00000400 	.word	0x00000400
 8003744:	200017d4 	.word	0x200017d4
 8003748:	20003830 	.word	0x20003830

0800374c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003750:	4b06      	ldr	r3, [pc, #24]	; (800376c <SystemInit+0x20>)
 8003752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003756:	4a05      	ldr	r2, [pc, #20]	; (800376c <SystemInit+0x20>)
 8003758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800375c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003760:	bf00      	nop
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	e000ed00 	.word	0xe000ed00

08003770 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003776:	1d3b      	adds	r3, r7, #4
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	605a      	str	r2, [r3, #4]
 800377e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003780:	4b14      	ldr	r3, [pc, #80]	; (80037d4 <MX_TIM6_Init+0x64>)
 8003782:	4a15      	ldr	r2, [pc, #84]	; (80037d8 <MX_TIM6_Init+0x68>)
 8003784:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100-1;
 8003786:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <MX_TIM6_Init+0x64>)
 8003788:	2263      	movs	r2, #99	; 0x63
 800378a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800378c:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <MX_TIM6_Init+0x64>)
 800378e:	2200      	movs	r2, #0
 8003790:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19200-1;
 8003792:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <MX_TIM6_Init+0x64>)
 8003794:	f644 22ff 	movw	r2, #19199	; 0x4aff
 8003798:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800379a:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <MX_TIM6_Init+0x64>)
 800379c:	2200      	movs	r2, #0
 800379e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80037a0:	480c      	ldr	r0, [pc, #48]	; (80037d4 <MX_TIM6_Init+0x64>)
 80037a2:	f010 fc6a 	bl	801407a <HAL_TIM_Base_Init>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80037ac:	f7ff fb3a 	bl	8002e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037b0:	2300      	movs	r3, #0
 80037b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037b4:	2300      	movs	r3, #0
 80037b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80037b8:	1d3b      	adds	r3, r7, #4
 80037ba:	4619      	mov	r1, r3
 80037bc:	4805      	ldr	r0, [pc, #20]	; (80037d4 <MX_TIM6_Init+0x64>)
 80037be:	f011 fd09 	bl	80151d4 <HAL_TIMEx_MasterConfigSynchronization>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80037c8:	f7ff fb2c 	bl	8002e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80037cc:	bf00      	nop
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	200017d8 	.word	0x200017d8
 80037d8:	40001000 	.word	0x40001000

080037dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a0d      	ldr	r2, [pc, #52]	; (8003820 <HAL_TIM_Base_MspInit+0x44>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d113      	bne.n	8003816 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80037ee:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <HAL_TIM_Base_MspInit+0x48>)
 80037f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f2:	4a0c      	ldr	r2, [pc, #48]	; (8003824 <HAL_TIM_Base_MspInit+0x48>)
 80037f4:	f043 0310 	orr.w	r3, r3, #16
 80037f8:	6593      	str	r3, [r2, #88]	; 0x58
 80037fa:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <HAL_TIM_Base_MspInit+0x48>)
 80037fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003806:	2200      	movs	r2, #0
 8003808:	2100      	movs	r1, #0
 800380a:	2036      	movs	r0, #54	; 0x36
 800380c:	f00a f815 	bl	800d83a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003810:	2036      	movs	r0, #54	; 0x36
 8003812:	f00a f82e 	bl	800d872 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8003816:	bf00      	nop
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40001000 	.word	0x40001000
 8003824:	40021000 	.word	0x40021000

08003828 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800382c:	4b12      	ldr	r3, [pc, #72]	; (8003878 <MX_LPUART1_UART_Init+0x50>)
 800382e:	4a13      	ldr	r2, [pc, #76]	; (800387c <MX_LPUART1_UART_Init+0x54>)
 8003830:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8003832:	4b11      	ldr	r3, [pc, #68]	; (8003878 <MX_LPUART1_UART_Init+0x50>)
 8003834:	4a12      	ldr	r2, [pc, #72]	; (8003880 <MX_LPUART1_UART_Init+0x58>)
 8003836:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003838:	4b0f      	ldr	r3, [pc, #60]	; (8003878 <MX_LPUART1_UART_Init+0x50>)
 800383a:	2200      	movs	r2, #0
 800383c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800383e:	4b0e      	ldr	r3, [pc, #56]	; (8003878 <MX_LPUART1_UART_Init+0x50>)
 8003840:	2200      	movs	r2, #0
 8003842:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003844:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <MX_LPUART1_UART_Init+0x50>)
 8003846:	2200      	movs	r2, #0
 8003848:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800384a:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <MX_LPUART1_UART_Init+0x50>)
 800384c:	220c      	movs	r2, #12
 800384e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003850:	4b09      	ldr	r3, [pc, #36]	; (8003878 <MX_LPUART1_UART_Init+0x50>)
 8003852:	2200      	movs	r2, #0
 8003854:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003856:	4b08      	ldr	r3, [pc, #32]	; (8003878 <MX_LPUART1_UART_Init+0x50>)
 8003858:	2200      	movs	r2, #0
 800385a:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800385c:	4b06      	ldr	r3, [pc, #24]	; (8003878 <MX_LPUART1_UART_Init+0x50>)
 800385e:	2200      	movs	r2, #0
 8003860:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003862:	4805      	ldr	r0, [pc, #20]	; (8003878 <MX_LPUART1_UART_Init+0x50>)
 8003864:	f011 fd5c 	bl	8015320 <HAL_UART_Init>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <MX_LPUART1_UART_Init+0x4a>
  {
    Error_Handler();
 800386e:	f7ff fad9 	bl	8002e24 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003872:	bf00      	nop
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20001824 	.word	0x20001824
 800387c:	40008000 	.word	0x40008000
 8003880:	00033324 	.word	0x00033324

08003884 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003888:	4b14      	ldr	r3, [pc, #80]	; (80038dc <MX_USART1_UART_Init+0x58>)
 800388a:	4a15      	ldr	r2, [pc, #84]	; (80038e0 <MX_USART1_UART_Init+0x5c>)
 800388c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800388e:	4b13      	ldr	r3, [pc, #76]	; (80038dc <MX_USART1_UART_Init+0x58>)
 8003890:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003894:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003896:	4b11      	ldr	r3, [pc, #68]	; (80038dc <MX_USART1_UART_Init+0x58>)
 8003898:	2200      	movs	r2, #0
 800389a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800389c:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <MX_USART1_UART_Init+0x58>)
 800389e:	2200      	movs	r2, #0
 80038a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80038a2:	4b0e      	ldr	r3, [pc, #56]	; (80038dc <MX_USART1_UART_Init+0x58>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80038a8:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <MX_USART1_UART_Init+0x58>)
 80038aa:	220c      	movs	r2, #12
 80038ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038ae:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <MX_USART1_UART_Init+0x58>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80038b4:	4b09      	ldr	r3, [pc, #36]	; (80038dc <MX_USART1_UART_Init+0x58>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038ba:	4b08      	ldr	r3, [pc, #32]	; (80038dc <MX_USART1_UART_Init+0x58>)
 80038bc:	2200      	movs	r2, #0
 80038be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038c0:	4b06      	ldr	r3, [pc, #24]	; (80038dc <MX_USART1_UART_Init+0x58>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80038c6:	4805      	ldr	r0, [pc, #20]	; (80038dc <MX_USART1_UART_Init+0x58>)
 80038c8:	f011 fd2a 	bl	8015320 <HAL_UART_Init>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80038d2:	f7ff faa7 	bl	8002e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80038d6:	bf00      	nop
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	200018a8 	.word	0x200018a8
 80038e0:	40013800 	.word	0x40013800

080038e4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80038e8:	4b14      	ldr	r3, [pc, #80]	; (800393c <MX_USART2_UART_Init+0x58>)
 80038ea:	4a15      	ldr	r2, [pc, #84]	; (8003940 <MX_USART2_UART_Init+0x5c>)
 80038ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80038ee:	4b13      	ldr	r3, [pc, #76]	; (800393c <MX_USART2_UART_Init+0x58>)
 80038f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80038f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80038f6:	4b11      	ldr	r3, [pc, #68]	; (800393c <MX_USART2_UART_Init+0x58>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80038fc:	4b0f      	ldr	r3, [pc, #60]	; (800393c <MX_USART2_UART_Init+0x58>)
 80038fe:	2200      	movs	r2, #0
 8003900:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003902:	4b0e      	ldr	r3, [pc, #56]	; (800393c <MX_USART2_UART_Init+0x58>)
 8003904:	2200      	movs	r2, #0
 8003906:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003908:	4b0c      	ldr	r3, [pc, #48]	; (800393c <MX_USART2_UART_Init+0x58>)
 800390a:	220c      	movs	r2, #12
 800390c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800390e:	4b0b      	ldr	r3, [pc, #44]	; (800393c <MX_USART2_UART_Init+0x58>)
 8003910:	2200      	movs	r2, #0
 8003912:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003914:	4b09      	ldr	r3, [pc, #36]	; (800393c <MX_USART2_UART_Init+0x58>)
 8003916:	2200      	movs	r2, #0
 8003918:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800391a:	4b08      	ldr	r3, [pc, #32]	; (800393c <MX_USART2_UART_Init+0x58>)
 800391c:	2200      	movs	r2, #0
 800391e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <MX_USART2_UART_Init+0x58>)
 8003922:	2200      	movs	r2, #0
 8003924:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003926:	4805      	ldr	r0, [pc, #20]	; (800393c <MX_USART2_UART_Init+0x58>)
 8003928:	f011 fcfa 	bl	8015320 <HAL_UART_Init>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003932:	f7ff fa77 	bl	8002e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	2000192c 	.word	0x2000192c
 8003940:	40004400 	.word	0x40004400

08003944 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b0b2      	sub	sp, #200	; 0xc8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800394c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	609a      	str	r2, [r3, #8]
 8003958:	60da      	str	r2, [r3, #12]
 800395a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800395c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003960:	228c      	movs	r2, #140	; 0x8c
 8003962:	2100      	movs	r1, #0
 8003964:	4618      	mov	r0, r3
 8003966:	f016 fddf 	bl	801a528 <memset>
  if(uartHandle->Instance==LPUART1)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a86      	ldr	r2, [pc, #536]	; (8003b88 <HAL_UART_MspInit+0x244>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d13e      	bne.n	80039f2 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003974:	2320      	movs	r3, #32
 8003976:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003978:	2300      	movs	r3, #0
 800397a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800397c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003980:	4618      	mov	r0, r3
 8003982:	f00d ff5d 	bl	8011840 <HAL_RCCEx_PeriphCLKConfig>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800398c:	f7ff fa4a 	bl	8002e24 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003990:	4b7e      	ldr	r3, [pc, #504]	; (8003b8c <HAL_UART_MspInit+0x248>)
 8003992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003994:	4a7d      	ldr	r2, [pc, #500]	; (8003b8c <HAL_UART_MspInit+0x248>)
 8003996:	f043 0301 	orr.w	r3, r3, #1
 800399a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800399c:	4b7b      	ldr	r3, [pc, #492]	; (8003b8c <HAL_UART_MspInit+0x248>)
 800399e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80039a8:	4b78      	ldr	r3, [pc, #480]	; (8003b8c <HAL_UART_MspInit+0x248>)
 80039aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ac:	4a77      	ldr	r2, [pc, #476]	; (8003b8c <HAL_UART_MspInit+0x248>)
 80039ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039b4:	4b75      	ldr	r3, [pc, #468]	; (8003b8c <HAL_UART_MspInit+0x248>)
 80039b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039bc:	623b      	str	r3, [r7, #32]
 80039be:	6a3b      	ldr	r3, [r7, #32]
    HAL_PWREx_EnableVddIO2();
 80039c0:	f00c ffe6 	bl	8010990 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 80039c4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80039c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039cc:	2302      	movs	r3, #2
 80039ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d8:	2303      	movs	r3, #3
 80039da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80039de:	2308      	movs	r3, #8
 80039e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80039e4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80039e8:	4619      	mov	r1, r3
 80039ea:	4869      	ldr	r0, [pc, #420]	; (8003b90 <HAL_UART_MspInit+0x24c>)
 80039ec:	f00a f902 	bl	800dbf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80039f0:	e0c6      	b.n	8003b80 <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART1)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a67      	ldr	r2, [pc, #412]	; (8003b94 <HAL_UART_MspInit+0x250>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d15f      	bne.n	8003abc <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80039fc:	2301      	movs	r3, #1
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003a00:	2300      	movs	r3, #0
 8003a02:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f00d ff19 	bl	8011840 <HAL_RCCEx_PeriphCLKConfig>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8003a14:	f7ff fa06 	bl	8002e24 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a18:	4b5c      	ldr	r3, [pc, #368]	; (8003b8c <HAL_UART_MspInit+0x248>)
 8003a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a1c:	4a5b      	ldr	r2, [pc, #364]	; (8003b8c <HAL_UART_MspInit+0x248>)
 8003a1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a22:	6613      	str	r3, [r2, #96]	; 0x60
 8003a24:	4b59      	ldr	r3, [pc, #356]	; (8003b8c <HAL_UART_MspInit+0x248>)
 8003a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a30:	4b56      	ldr	r3, [pc, #344]	; (8003b8c <HAL_UART_MspInit+0x248>)
 8003a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a34:	4a55      	ldr	r2, [pc, #340]	; (8003b8c <HAL_UART_MspInit+0x248>)
 8003a36:	f043 0302 	orr.w	r3, r3, #2
 8003a3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a3c:	4b53      	ldr	r3, [pc, #332]	; (8003b8c <HAL_UART_MspInit+0x248>)
 8003a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a48:	4b50      	ldr	r3, [pc, #320]	; (8003b8c <HAL_UART_MspInit+0x248>)
 8003a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4c:	4a4f      	ldr	r2, [pc, #316]	; (8003b8c <HAL_UART_MspInit+0x248>)
 8003a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a54:	4b4d      	ldr	r3, [pc, #308]	; (8003b8c <HAL_UART_MspInit+0x248>)
 8003a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8003a60:	f00c ff96 	bl	8010990 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 8003a64:	2340      	movs	r3, #64	; 0x40
 8003a66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a70:	2300      	movs	r3, #0
 8003a72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a76:	2303      	movs	r3, #3
 8003a78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a7c:	2307      	movs	r3, #7
 8003a7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8003a82:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003a86:	4619      	mov	r1, r3
 8003a88:	4843      	ldr	r0, [pc, #268]	; (8003b98 <HAL_UART_MspInit+0x254>)
 8003a8a:	f00a f8b3 	bl	800dbf4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 8003a8e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003a92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a96:	2302      	movs	r3, #2
 8003a98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003aa8:	2307      	movs	r3, #7
 8003aaa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003aae:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4836      	ldr	r0, [pc, #216]	; (8003b90 <HAL_UART_MspInit+0x24c>)
 8003ab6:	f00a f89d 	bl	800dbf4 <HAL_GPIO_Init>
}
 8003aba:	e061      	b.n	8003b80 <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART2)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a36      	ldr	r2, [pc, #216]	; (8003b9c <HAL_UART_MspInit+0x258>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d15c      	bne.n	8003b80 <HAL_UART_MspInit+0x23c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003aca:	2300      	movs	r3, #0
 8003acc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ace:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f00d feb4 	bl	8011840 <HAL_RCCEx_PeriphCLKConfig>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8003ade:	f7ff f9a1 	bl	8002e24 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ae2:	4b2a      	ldr	r3, [pc, #168]	; (8003b8c <HAL_UART_MspInit+0x248>)
 8003ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae6:	4a29      	ldr	r2, [pc, #164]	; (8003b8c <HAL_UART_MspInit+0x248>)
 8003ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aec:	6593      	str	r3, [r2, #88]	; 0x58
 8003aee:	4b27      	ldr	r3, [pc, #156]	; (8003b8c <HAL_UART_MspInit+0x248>)
 8003af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003afa:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <HAL_UART_MspInit+0x248>)
 8003afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afe:	4a23      	ldr	r2, [pc, #140]	; (8003b8c <HAL_UART_MspInit+0x248>)
 8003b00:	f043 0308 	orr.w	r3, r3, #8
 8003b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b06:	4b21      	ldr	r3, [pc, #132]	; (8003b8c <HAL_UART_MspInit+0x248>)
 8003b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b12:	4b1e      	ldr	r3, [pc, #120]	; (8003b8c <HAL_UART_MspInit+0x248>)
 8003b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b16:	4a1d      	ldr	r2, [pc, #116]	; (8003b8c <HAL_UART_MspInit+0x248>)
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b1e:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <HAL_UART_MspInit+0x248>)
 8003b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 8003b2a:	2340      	movs	r3, #64	; 0x40
 8003b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b30:	2302      	movs	r3, #2
 8003b32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b42:	2307      	movs	r3, #7
 8003b44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8003b48:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4814      	ldr	r0, [pc, #80]	; (8003ba0 <HAL_UART_MspInit+0x25c>)
 8003b50:	f00a f850 	bl	800dbf4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8003b54:	2304      	movs	r3, #4
 8003b56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b66:	2303      	movs	r3, #3
 8003b68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b6c:	2307      	movs	r3, #7
 8003b6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8003b72:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003b76:	4619      	mov	r1, r3
 8003b78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b7c:	f00a f83a 	bl	800dbf4 <HAL_GPIO_Init>
}
 8003b80:	bf00      	nop
 8003b82:	37c8      	adds	r7, #200	; 0xc8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40008000 	.word	0x40008000
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	48001800 	.word	0x48001800
 8003b94:	40013800 	.word	0x40013800
 8003b98:	48000400 	.word	0x48000400
 8003b9c:	40004400 	.word	0x40004400
 8003ba0:	48000c00 	.word	0x48000c00

08003ba4 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	330a      	adds	r3, #10
 8003bb4:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8003bc2:	b299      	uxth	r1, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	f00a fb82 	bl	800e2d8 <HAL_I2C_Master_Transmit>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8003bd8:	693b      	ldr	r3, [r7, #16]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b088      	sub	sp, #32
 8003be6:	af02      	add	r7, sp, #8
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	330a      	adds	r3, #10
 8003bf2:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	b299      	uxth	r1, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	4613      	mov	r3, r2
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	f00a fc54 	bl	800e4c0 <HAL_I2C_Master_Receive>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8003c1c:	693b      	ldr	r3, [r7, #16]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	607a      	str	r2, [r7, #4]
 8003c32:	603b      	str	r3, [r7, #0]
 8003c34:	460b      	mov	r3, r1
 8003c36:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	2b3f      	cmp	r3, #63	; 0x3f
 8003c40:	d902      	bls.n	8003c48 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8003c42:	f06f 0303 	mvn.w	r3, #3
 8003c46:	e016      	b.n	8003c76 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8003c48:	4a0d      	ldr	r2, [pc, #52]	; (8003c80 <VL53L0X_WriteMulti+0x58>)
 8003c4a:	7afb      	ldrb	r3, [r7, #11]
 8003c4c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	480c      	ldr	r0, [pc, #48]	; (8003c84 <VL53L0X_WriteMulti+0x5c>)
 8003c54:	f016 fc5a 	bl	801a50c <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4908      	ldr	r1, [pc, #32]	; (8003c80 <VL53L0X_WriteMulti+0x58>)
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f7ff ff9f 	bl	8003ba4 <_I2CWrite>
 8003c66:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003c6e:	23ec      	movs	r3, #236	; 0xec
 8003c70:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8003c72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	200019b0 	.word	0x200019b0
 8003c84:	200019b1 	.word	0x200019b1

08003c88 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	607a      	str	r2, [r7, #4]
 8003c92:	603b      	str	r3, [r7, #0]
 8003c94:	460b      	mov	r3, r1
 8003c96:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8003c9c:	f107 030b 	add.w	r3, r7, #11
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f7ff ff7d 	bl	8003ba4 <_I2CWrite>
 8003caa:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003cb2:	23ec      	movs	r3, #236	; 0xec
 8003cb4:	75fb      	strb	r3, [r7, #23]
        goto done;
 8003cb6:	e00c      	b.n	8003cd2 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f7ff ff90 	bl	8003be2 <_I2CRead>
 8003cc2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003cca:	23ec      	movs	r3, #236	; 0xec
 8003ccc:	75fb      	strb	r3, [r7, #23]
 8003cce:	e000      	b.n	8003cd2 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8003cd0:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8003cd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	70fb      	strb	r3, [r7, #3]
 8003cec:	4613      	mov	r3, r2
 8003cee:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8003cf4:	4a0b      	ldr	r2, [pc, #44]	; (8003d24 <VL53L0X_WrByte+0x44>)
 8003cf6:	78fb      	ldrb	r3, [r7, #3]
 8003cf8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8003cfa:	4a0a      	ldr	r2, [pc, #40]	; (8003d24 <VL53L0X_WrByte+0x44>)
 8003cfc:	78bb      	ldrb	r3, [r7, #2]
 8003cfe:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8003d00:	2202      	movs	r2, #2
 8003d02:	4908      	ldr	r1, [pc, #32]	; (8003d24 <VL53L0X_WrByte+0x44>)
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff ff4d 	bl	8003ba4 <_I2CWrite>
 8003d0a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003d12:	23ec      	movs	r3, #236	; 0xec
 8003d14:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8003d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	200019b0 	.word	0x200019b0

08003d28 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	70fb      	strb	r3, [r7, #3]
 8003d34:	4613      	mov	r3, r2
 8003d36:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8003d3c:	4a0e      	ldr	r2, [pc, #56]	; (8003d78 <VL53L0X_WrWord+0x50>)
 8003d3e:	78fb      	ldrb	r3, [r7, #3]
 8003d40:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8003d42:	883b      	ldrh	r3, [r7, #0]
 8003d44:	0a1b      	lsrs	r3, r3, #8
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <VL53L0X_WrWord+0x50>)
 8003d4c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8003d4e:	883b      	ldrh	r3, [r7, #0]
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <VL53L0X_WrWord+0x50>)
 8003d54:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8003d56:	2203      	movs	r2, #3
 8003d58:	4907      	ldr	r1, [pc, #28]	; (8003d78 <VL53L0X_WrWord+0x50>)
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff ff22 	bl	8003ba4 <_I2CWrite>
 8003d60:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003d68:	23ec      	movs	r3, #236	; 0xec
 8003d6a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8003d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	200019b0 	.word	0x200019b0

08003d7c <VL53L0X_WrDWord>:

VL53L0X_Error VL53L0X_WrDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t data) {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	460b      	mov	r3, r1
 8003d86:	607a      	str	r2, [r7, #4]
 8003d88:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    _I2CBuffer[0] = index;
 8003d8e:	4a13      	ldr	r2, [pc, #76]	; (8003ddc <VL53L0X_WrDWord+0x60>)
 8003d90:	7afb      	ldrb	r3, [r7, #11]
 8003d92:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = (data >> 24) & 0xFF;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	0e1b      	lsrs	r3, r3, #24
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	4b10      	ldr	r3, [pc, #64]	; (8003ddc <VL53L0X_WrDWord+0x60>)
 8003d9c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = (data >> 16) & 0xFF;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	0c1b      	lsrs	r3, r3, #16
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	4b0d      	ldr	r3, [pc, #52]	; (8003ddc <VL53L0X_WrDWord+0x60>)
 8003da6:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = (data >> 8)  & 0xFF;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	0a1b      	lsrs	r3, r3, #8
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <VL53L0X_WrDWord+0x60>)
 8003db0:	70da      	strb	r2, [r3, #3]
    _I2CBuffer[4] = (data >> 0 ) & 0xFF;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <VL53L0X_WrDWord+0x60>)
 8003db8:	711a      	strb	r2, [r3, #4]
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 5);
 8003dba:	2205      	movs	r2, #5
 8003dbc:	4907      	ldr	r1, [pc, #28]	; (8003ddc <VL53L0X_WrDWord+0x60>)
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f7ff fef0 	bl	8003ba4 <_I2CWrite>
 8003dc4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <VL53L0X_WrDWord+0x54>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003dcc:	23ec      	movs	r3, #236	; 0xec
 8003dce:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8003dd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	200019b0 	.word	0x200019b0

08003de0 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	4608      	mov	r0, r1
 8003dea:	4611      	mov	r1, r2
 8003dec:	461a      	mov	r2, r3
 8003dee:	4603      	mov	r3, r0
 8003df0:	70fb      	strb	r3, [r7, #3]
 8003df2:	460b      	mov	r3, r1
 8003df4:	70bb      	strb	r3, [r7, #2]
 8003df6:	4613      	mov	r3, r2
 8003df8:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8003dfe:	f107 020e 	add.w	r2, r7, #14
 8003e02:	78fb      	ldrb	r3, [r7, #3]
 8003e04:	4619      	mov	r1, r3
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f81e 	bl	8003e48 <VL53L0X_RdByte>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8003e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d110      	bne.n	8003e3a <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8003e18:	7bba      	ldrb	r2, [r7, #14]
 8003e1a:	78bb      	ldrb	r3, [r7, #2]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	787b      	ldrb	r3, [r7, #1]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8003e28:	7bba      	ldrb	r2, [r7, #14]
 8003e2a:	78fb      	ldrb	r3, [r7, #3]
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff ff56 	bl	8003ce0 <VL53L0X_WrByte>
 8003e34:	4603      	mov	r3, r0
 8003e36:	73fb      	strb	r3, [r7, #15]
 8003e38:	e000      	b.n	8003e3c <VL53L0X_UpdateByte+0x5c>
        goto done;
 8003e3a:	bf00      	nop
done:
    return Status;
 8003e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	460b      	mov	r3, r1
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e56:	2300      	movs	r3, #0
 8003e58:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8003e5a:	f107 030b 	add.w	r3, r7, #11
 8003e5e:	2201      	movs	r2, #1
 8003e60:	4619      	mov	r1, r3
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f7ff fe9e 	bl	8003ba4 <_I2CWrite>
 8003e68:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003e70:	23ec      	movs	r3, #236	; 0xec
 8003e72:	75fb      	strb	r3, [r7, #23]
        goto done;
 8003e74:	e00c      	b.n	8003e90 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8003e76:	2201      	movs	r2, #1
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f7ff feb1 	bl	8003be2 <_I2CRead>
 8003e80:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003e88:	23ec      	movs	r3, #236	; 0xec
 8003e8a:	75fb      	strb	r3, [r7, #23]
 8003e8c:	e000      	b.n	8003e90 <VL53L0X_RdByte+0x48>
    }
done:
 8003e8e:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8003e90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8003eae:	f107 030b 	add.w	r3, r7, #11
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f7ff fe74 	bl	8003ba4 <_I2CWrite>
 8003ebc:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003ec4:	23ec      	movs	r3, #236	; 0xec
 8003ec6:	75fb      	strb	r3, [r7, #23]
        goto done;
 8003ec8:	e017      	b.n	8003efa <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8003eca:	2202      	movs	r2, #2
 8003ecc:	490e      	ldr	r1, [pc, #56]	; (8003f08 <VL53L0X_RdWord+0x6c>)
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f7ff fe87 	bl	8003be2 <_I2CRead>
 8003ed4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003edc:	23ec      	movs	r3, #236	; 0xec
 8003ede:	75fb      	strb	r3, [r7, #23]
        goto done;
 8003ee0:	e00b      	b.n	8003efa <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8003ee2:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <VL53L0X_RdWord+0x6c>)
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	021b      	lsls	r3, r3, #8
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <VL53L0X_RdWord+0x6c>)
 8003eee:	785b      	ldrb	r3, [r3, #1]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	4413      	add	r3, r2
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8003efa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	200019b0 	.word	0x200019b0

08003f0c <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	460b      	mov	r3, r1
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8003f1e:	f107 030b 	add.w	r3, r7, #11
 8003f22:	2201      	movs	r2, #1
 8003f24:	4619      	mov	r1, r3
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f7ff fe3c 	bl	8003ba4 <_I2CWrite>
 8003f2c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003f34:	23ec      	movs	r3, #236	; 0xec
 8003f36:	75fb      	strb	r3, [r7, #23]
        goto done;
 8003f38:	e01b      	b.n	8003f72 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8003f3a:	2204      	movs	r2, #4
 8003f3c:	4910      	ldr	r1, [pc, #64]	; (8003f80 <VL53L0X_RdDWord+0x74>)
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f7ff fe4f 	bl	8003be2 <_I2CRead>
 8003f44:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003f4c:	23ec      	movs	r3, #236	; 0xec
 8003f4e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8003f50:	e00f      	b.n	8003f72 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8003f52:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <VL53L0X_RdDWord+0x74>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	061a      	lsls	r2, r3, #24
 8003f58:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <VL53L0X_RdDWord+0x74>)
 8003f5a:	785b      	ldrb	r3, [r3, #1]
 8003f5c:	041b      	lsls	r3, r3, #16
 8003f5e:	441a      	add	r2, r3
 8003f60:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <VL53L0X_RdDWord+0x74>)
 8003f62:	789b      	ldrb	r3, [r3, #2]
 8003f64:	021b      	lsls	r3, r3, #8
 8003f66:	4413      	add	r3, r2
 8003f68:	4a05      	ldr	r2, [pc, #20]	; (8003f80 <VL53L0X_RdDWord+0x74>)
 8003f6a:	78d2      	ldrb	r2, [r2, #3]
 8003f6c:	441a      	add	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8003f72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	200019b0 	.word	0x200019b0

08003f84 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8003f90:	2002      	movs	r0, #2
 8003f92:	f008 f8b7 	bl	800c104 <HAL_Delay>
    return status;
 8003f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003fa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fdc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003fa8:	f7ff fbd0 	bl	800374c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fac:	480c      	ldr	r0, [pc, #48]	; (8003fe0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003fae:	490d      	ldr	r1, [pc, #52]	; (8003fe4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003fb0:	4a0d      	ldr	r2, [pc, #52]	; (8003fe8 <LoopForever+0xe>)
  movs r3, #0
 8003fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fb4:	e002      	b.n	8003fbc <LoopCopyDataInit>

08003fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fba:	3304      	adds	r3, #4

08003fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fc0:	d3f9      	bcc.n	8003fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fc2:	4a0a      	ldr	r2, [pc, #40]	; (8003fec <LoopForever+0x12>)
  ldr r4, =_ebss
 8003fc4:	4c0a      	ldr	r4, [pc, #40]	; (8003ff0 <LoopForever+0x16>)
  movs r3, #0
 8003fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fc8:	e001      	b.n	8003fce <LoopFillZerobss>

08003fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fcc:	3204      	adds	r2, #4

08003fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fd0:	d3fb      	bcc.n	8003fca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003fd2:	f016 fa77 	bl	801a4c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003fd6:	f7fd ff37 	bl	8001e48 <main>

08003fda <LoopForever>:

LoopForever:
    b LoopForever
 8003fda:	e7fe      	b.n	8003fda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003fdc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fe4:	2000074c 	.word	0x2000074c
  ldr r2, =_sidata
 8003fe8:	0801d9d4 	.word	0x0801d9d4
  ldr r2, =_sbss
 8003fec:	2000074c 	.word	0x2000074c
  ldr r4, =_ebss
 8003ff0:	20003830 	.word	0x20003830

08003ff4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ff4:	e7fe      	b.n	8003ff4 <ADC1_2_IRQHandler>
	...

08003ff8 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	4603      	mov	r3, r0
 8004000:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 8004002:	88fb      	ldrh	r3, [r7, #6]
 8004004:	4618      	mov	r0, r3
 8004006:	f000 f90d 	bl	8004224 <ft6x06_GetInstance>
 800400a:	4603      	mov	r3, r0
 800400c:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800400e:	7bfb      	ldrb	r3, [r7, #15]
 8004010:	2bff      	cmp	r3, #255	; 0xff
 8004012:	d10e      	bne.n	8004032 <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8004014:	2000      	movs	r0, #0
 8004016:	f000 f905 	bl	8004224 <ft6x06_GetInstance>
 800401a:	4603      	mov	r3, r0
 800401c:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 800401e:	7bbb      	ldrb	r3, [r7, #14]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d806      	bhi.n	8004032 <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 8004024:	7bbb      	ldrb	r3, [r7, #14]
 8004026:	88fa      	ldrh	r2, [r7, #6]
 8004028:	b2d1      	uxtb	r1, r2
 800402a:	4a04      	ldr	r2, [pc, #16]	; (800403c <ft6x06_Init+0x44>)
 800402c:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 800402e:	f006 fee7 	bl	800ae00 <TS_IO_Init>
    }
  }
}
 8004032:	bf00      	nop
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	200019f0 	.word	0x200019f0

08004040 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	4603      	mov	r3, r0
 8004048:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b082      	sub	sp, #8
 800405a:	af00      	add	r7, sp, #0
 800405c:	4603      	mov	r3, r0
 800405e:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8004060:	f006 fece 	bl	800ae00 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8004064:	88fb      	ldrh	r3, [r7, #6]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	21a8      	movs	r1, #168	; 0xa8
 800406a:	4618      	mov	r0, r3
 800406c:	f006 ff0e 	bl	800ae8c <TS_IO_Read>
 8004070:	4603      	mov	r3, r0
 8004072:	b29b      	uxth	r3, r3
}
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	4603      	mov	r3, r0
 8004084:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 8004086:	88fb      	ldrh	r3, [r7, #6]
 8004088:	4618      	mov	r0, r3
 800408a:	f000 f8bc 	bl	8004206 <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 800408e:	88fb      	ldrh	r3, [r7, #6]
 8004090:	4618      	mov	r0, r3
 8004092:	f000 f88d 	bl	80041b0 <ft6x06_TS_DisableIT>
}
 8004096:	bf00      	nop
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
	...

080040a0 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	4603      	mov	r3, r0
 80040a8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80040ae:	88fb      	ldrh	r3, [r7, #6]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2102      	movs	r1, #2
 80040b4:	4618      	mov	r0, r3
 80040b6:	f006 fee9 	bl	800ae8c <TS_IO_Read>
 80040ba:	4603      	mov	r3, r0
 80040bc:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 80040be:	7bfb      	ldrb	r3, [r7, #15]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80040d6:	7bfb      	ldrb	r3, [r7, #15]
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <ft6x06_TS_DetectTouch+0x50>)
 80040dc:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 80040de:	4b04      	ldr	r3, [pc, #16]	; (80040f0 <ft6x06_TS_DetectTouch+0x50>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
 80040e6:	b2db      	uxtb	r3, r3
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	200019f4 	.word	0x200019f4

080040f4 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8004106:	4b1f      	ldr	r3, [pc, #124]	; (8004184 <ft6x06_TS_GetXY+0x90>)
 8004108:	789a      	ldrb	r2, [r3, #2]
 800410a:	4b1e      	ldr	r3, [pc, #120]	; (8004184 <ft6x06_TS_GetXY+0x90>)
 800410c:	785b      	ldrb	r3, [r3, #1]
 800410e:	429a      	cmp	r2, r3
 8004110:	d234      	bcs.n	800417c <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 8004112:	4b1c      	ldr	r3, [pc, #112]	; (8004184 <ft6x06_TS_GetXY+0x90>)
 8004114:	789b      	ldrb	r3, [r3, #2]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <ft6x06_TS_GetXY+0x2c>
 800411a:	2b01      	cmp	r3, #1
 800411c:	d003      	beq.n	8004126 <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 800411e:	e005      	b.n	800412c <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8004120:	2303      	movs	r3, #3
 8004122:	75fb      	strb	r3, [r7, #23]
      break;
 8004124:	e002      	b.n	800412c <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 8004126:	2309      	movs	r3, #9
 8004128:	75fb      	strb	r3, [r7, #23]
      break;
 800412a:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 800412c:	89fb      	ldrh	r3, [r7, #14]
 800412e:	b2d8      	uxtb	r0, r3
 8004130:	f107 0210 	add.w	r2, r7, #16
 8004134:	7df9      	ldrb	r1, [r7, #23]
 8004136:	2304      	movs	r3, #4
 8004138:	f006 febe 	bl	800aeb8 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 800413c:	7c3b      	ldrb	r3, [r7, #16]
 800413e:	021b      	lsls	r3, r3, #8
 8004140:	b21b      	sxth	r3, r3
 8004142:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004146:	b21a      	sxth	r2, r3
 8004148:	7c7b      	ldrb	r3, [r7, #17]
 800414a:	b21b      	sxth	r3, r3
 800414c:	4313      	orrs	r3, r2
 800414e:	b21b      	sxth	r3, r3
 8004150:	b29a      	uxth	r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8004156:	7cbb      	ldrb	r3, [r7, #18]
 8004158:	021b      	lsls	r3, r3, #8
 800415a:	b21b      	sxth	r3, r3
 800415c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004160:	b21a      	sxth	r2, r3
 8004162:	7cfb      	ldrb	r3, [r7, #19]
 8004164:	b21b      	sxth	r3, r3
 8004166:	4313      	orrs	r3, r2
 8004168:	b21b      	sxth	r3, r3
 800416a:	b29a      	uxth	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8004170:	4b04      	ldr	r3, [pc, #16]	; (8004184 <ft6x06_TS_GetXY+0x90>)
 8004172:	789b      	ldrb	r3, [r3, #2]
 8004174:	3301      	adds	r3, #1
 8004176:	b2da      	uxtb	r2, r3
 8004178:	4b02      	ldr	r3, [pc, #8]	; (8004184 <ft6x06_TS_GetXY+0x90>)
 800417a:	709a      	strb	r2, [r3, #2]
  }
}
 800417c:	bf00      	nop
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	200019f4 	.word	0x200019f4

08004188 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	4603      	mov	r3, r0
 8004190:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8004196:	2301      	movs	r3, #1
 8004198:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 800419a:	88fb      	ldrh	r3, [r7, #6]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	7bfa      	ldrb	r2, [r7, #15]
 80041a0:	21a4      	movs	r1, #164	; 0xa4
 80041a2:	4618      	mov	r0, r3
 80041a4:	f006 fe58 	bl	800ae58 <TS_IO_Write>
}
 80041a8:	bf00      	nop
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80041be:	2300      	movs	r3, #0
 80041c0:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80041c2:	88fb      	ldrh	r3, [r7, #6]
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	7bfa      	ldrb	r2, [r7, #15]
 80041c8:	21a4      	movs	r1, #164	; 0xa4
 80041ca:	4618      	mov	r0, r3
 80041cc:	f006 fe44 	bl	800ae58 <TS_IO_Write>
}
 80041d0:	bf00      	nop
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	4603      	mov	r3, r0
 80041e0:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 8004206:	b480      	push	{r7}
 8004208:	b085      	sub	sp, #20
 800420a:	af00      	add	r7, sp, #0
 800420c:	4603      	mov	r3, r0
 800420e:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8004210:	2300      	movs	r3, #0
 8004212:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 8004214:	68fb      	ldr	r3, [r7, #12]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
	...

08004224 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	4603      	mov	r3, r0
 800422c:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800422e:	2300      	movs	r3, #0
 8004230:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8004232:	2300      	movs	r3, #0
 8004234:	73fb      	strb	r3, [r7, #15]
 8004236:	e00b      	b.n	8004250 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8004238:	7bfb      	ldrb	r3, [r7, #15]
 800423a:	4a0a      	ldr	r2, [pc, #40]	; (8004264 <ft6x06_GetInstance+0x40>)
 800423c:	5cd3      	ldrb	r3, [r2, r3]
 800423e:	b29b      	uxth	r3, r3
 8004240:	88fa      	ldrh	r2, [r7, #6]
 8004242:	429a      	cmp	r2, r3
 8004244:	d101      	bne.n	800424a <ft6x06_GetInstance+0x26>
    {
      return idx; 
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	e006      	b.n	8004258 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800424a:	7bfb      	ldrb	r3, [r7, #15]
 800424c:	3301      	adds	r3, #1
 800424e:	73fb      	strb	r3, [r7, #15]
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d9f0      	bls.n	8004238 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8004256:	23ff      	movs	r3, #255	; 0xff
}
 8004258:	4618      	mov	r0, r3
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	200019f0 	.word	0x200019f0

08004268 <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	4603      	mov	r3, r0
 8004270:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8004272:	88fb      	ldrh	r3, [r7, #6]
 8004274:	4618      	mov	r0, r3
 8004276:	f000 ffd1 	bl	800521c <mfxstm32l152_GetInstance>
 800427a:	4603      	mov	r3, r0
 800427c:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 800427e:	7bfb      	ldrb	r3, [r7, #15]
 8004280:	2bff      	cmp	r3, #255	; 0xff
 8004282:	d10e      	bne.n	80042a2 <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 8004284:	2000      	movs	r0, #0
 8004286:	f000 ffc9 	bl	800521c <mfxstm32l152_GetInstance>
 800428a:	4603      	mov	r3, r0
 800428c:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 800428e:	7bbb      	ldrb	r3, [r7, #14]
 8004290:	2b02      	cmp	r3, #2
 8004292:	d806      	bhi.n	80042a2 <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 8004294:	7bbb      	ldrb	r3, [r7, #14]
 8004296:	88fa      	ldrh	r2, [r7, #6]
 8004298:	b2d1      	uxtb	r1, r2
 800429a:	4a09      	ldr	r2, [pc, #36]	; (80042c0 <mfxstm32l152_Init+0x58>)
 800429c:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 800429e:	f006 fb81 	bl	800a9a4 <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	2102      	movs	r1, #2
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 f8db 	bl	8004462 <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 80042ac:	88fb      	ldrh	r3, [r7, #6]
 80042ae:	2101      	movs	r1, #1
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 f8fc 	bl	80044ae <mfxstm32l152_SetIrqOutPinType>
}
 80042b6:	bf00      	nop
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	200019f8 	.word	0x200019f8

080042c4 <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 80042ce:	88fb      	ldrh	r3, [r7, #6]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 ffc3 	bl	800525c <mfxstm32l152_ReleaseInstance>
 80042d6:	4603      	mov	r3, r0
 80042d8:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 80042da:	7bfb      	ldrb	r3, [r7, #15]
 80042dc:	2bff      	cmp	r3, #255	; 0xff
 80042de:	d001      	beq.n	80042e4 <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 80042e0:	f006 fb70 	bl	800a9c4 <MFX_IO_DeInit>
  }
}
 80042e4:	bf00      	nop
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	4603      	mov	r3, r0
 80042f4:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 80042f6:	88fb      	ldrh	r3, [r7, #6]
 80042f8:	2280      	movs	r2, #128	; 0x80
 80042fa:	2140      	movs	r1, #64	; 0x40
 80042fc:	4618      	mov	r0, r3
 80042fe:	f006 fc03 	bl	800ab08 <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 8004302:	200a      	movs	r0, #10
 8004304:	f006 fc42 	bl	800ab8c <MFX_IO_Delay>
}
 8004308:	bf00      	nop
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	4603      	mov	r3, r0
 8004318:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 800431a:	88fb      	ldrh	r3, [r7, #6]
 800431c:	2240      	movs	r2, #64	; 0x40
 800431e:	2140      	movs	r1, #64	; 0x40
 8004320:	4618      	mov	r0, r3
 8004322:	f006 fbf1 	bl	800ab08 <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 8004326:	f006 fbb7 	bl	800aa98 <MFX_IO_EnableWakeupPin>
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	4603      	mov	r3, r0
 800433a:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 800433c:	88fb      	ldrh	r3, [r7, #6]
 800433e:	4618      	mov	r0, r3
 8004340:	f000 ff6c 	bl	800521c <mfxstm32l152_GetInstance>
 8004344:	4603      	mov	r3, r0
 8004346:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 8004348:	7bfb      	ldrb	r3, [r7, #15]
 800434a:	2bff      	cmp	r3, #255	; 0xff
 800434c:	d101      	bne.n	8004352 <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 800434e:	f006 fba3 	bl	800aa98 <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 8004352:	f006 fbc5 	bl	800aae0 <MFX_IO_Wakeup>
}
 8004356:	bf00      	nop
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b084      	sub	sp, #16
 8004362:	af00      	add	r7, sp, #0
 8004364:	4603      	mov	r3, r0
 8004366:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 8004368:	2001      	movs	r0, #1
 800436a:	f006 fc0f 	bl	800ab8c <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 800436e:	f006 fb19 	bl	800a9a4 <MFX_IO_Init>

  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 8004372:	88fb      	ldrh	r3, [r7, #6]
 8004374:	2100      	movs	r1, #0
 8004376:	4618      	mov	r0, r3
 8004378:	f006 fbda 	bl	800ab30 <MFX_IO_Read>
 800437c:	4603      	mov	r3, r0
 800437e:	73fb      	strb	r3, [r7, #15]

  /* Return the device ID value */
  return (id);
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	b29b      	uxth	r3, r3
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	4603      	mov	r3, r0
 8004394:	460a      	mov	r2, r1
 8004396:	80fb      	strh	r3, [r7, #6]
 8004398:	4613      	mov	r3, r2
 800439a:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800439c:	2300      	movs	r3, #0
 800439e:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 80043a0:	88fb      	ldrh	r3, [r7, #6]
 80043a2:	2142      	movs	r1, #66	; 0x42
 80043a4:	4618      	mov	r0, r3
 80043a6:	f006 fbc3 	bl	800ab30 <MFX_IO_Read>
 80043aa:	4603      	mov	r3, r0
 80043ac:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 80043ae:	7bfa      	ldrb	r2, [r7, #15]
 80043b0:	797b      	ldrb	r3, [r7, #5]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 80043b6:	7bfa      	ldrb	r2, [r7, #15]
 80043b8:	88fb      	ldrh	r3, [r7, #6]
 80043ba:	2142      	movs	r1, #66	; 0x42
 80043bc:	4618      	mov	r0, r3
 80043be:	f006 fba3 	bl	800ab08 <MFX_IO_Write>
}
 80043c2:	bf00      	nop
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	4603      	mov	r3, r0
 80043d2:	460a      	mov	r2, r1
 80043d4:	80fb      	strh	r3, [r7, #6]
 80043d6:	4613      	mov	r3, r2
 80043d8:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80043da:	2300      	movs	r3, #0
 80043dc:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 80043de:	88fb      	ldrh	r3, [r7, #6]
 80043e0:	2142      	movs	r1, #66	; 0x42
 80043e2:	4618      	mov	r0, r3
 80043e4:	f006 fba4 	bl	800ab30 <MFX_IO_Read>
 80043e8:	4603      	mov	r3, r0
 80043ea:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 80043ec:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80043f0:	43db      	mvns	r3, r3
 80043f2:	b25a      	sxtb	r2, r3
 80043f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043f8:	4013      	ands	r3, r2
 80043fa:	b25b      	sxtb	r3, r3
 80043fc:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 80043fe:	7bfa      	ldrb	r2, [r7, #15]
 8004400:	88fb      	ldrh	r3, [r7, #6]
 8004402:	2142      	movs	r1, #66	; 0x42
 8004404:	4618      	mov	r0, r3
 8004406:	f006 fb7f 	bl	800ab08 <MFX_IO_Write>
}
 800440a:	bf00      	nop
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	4603      	mov	r3, r0
 800441a:	460a      	mov	r2, r1
 800441c:	80fb      	strh	r3, [r7, #6]
 800441e:	4613      	mov	r3, r2
 8004420:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 8004422:	88fb      	ldrh	r3, [r7, #6]
 8004424:	2108      	movs	r1, #8
 8004426:	4618      	mov	r0, r3
 8004428:	f006 fb82 	bl	800ab30 <MFX_IO_Read>
 800442c:	4603      	mov	r3, r0
 800442e:	461a      	mov	r2, r3
 8004430:	797b      	ldrb	r3, [r7, #5]
 8004432:	4013      	ands	r3, r2
 8004434:	b2db      	uxtb	r3, r3
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b082      	sub	sp, #8
 8004442:	af00      	add	r7, sp, #0
 8004444:	4603      	mov	r3, r0
 8004446:	460a      	mov	r2, r1
 8004448:	80fb      	strh	r3, [r7, #6]
 800444a:	4613      	mov	r3, r2
 800444c:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 800444e:	797a      	ldrb	r2, [r7, #5]
 8004450:	88fb      	ldrh	r3, [r7, #6]
 8004452:	2144      	movs	r1, #68	; 0x44
 8004454:	4618      	mov	r0, r3
 8004456:	f006 fb57 	bl	800ab08 <MFX_IO_Write>
}
 800445a:	bf00      	nop
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b084      	sub	sp, #16
 8004466:	af00      	add	r7, sp, #0
 8004468:	4603      	mov	r3, r0
 800446a:	460a      	mov	r2, r1
 800446c:	80fb      	strh	r3, [r7, #6]
 800446e:	4613      	mov	r3, r2
 8004470:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8004472:	2300      	movs	r3, #0
 8004474:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8004476:	88fb      	ldrh	r3, [r7, #6]
 8004478:	2141      	movs	r1, #65	; 0x41
 800447a:	4618      	mov	r0, r3
 800447c:	f006 fb58 	bl	800ab30 <MFX_IO_Read>
 8004480:	4603      	mov	r3, r0
 8004482:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	f023 0302 	bic.w	r3, r3, #2
 800448a:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 800448c:	7bfa      	ldrb	r2, [r7, #15]
 800448e:	797b      	ldrb	r3, [r7, #5]
 8004490:	4313      	orrs	r3, r2
 8004492:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8004494:	7bfa      	ldrb	r2, [r7, #15]
 8004496:	88fb      	ldrh	r3, [r7, #6]
 8004498:	2141      	movs	r1, #65	; 0x41
 800449a:	4618      	mov	r0, r3
 800449c:	f006 fb34 	bl	800ab08 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 80044a0:	2001      	movs	r0, #1
 80044a2:	f006 fb73 	bl	800ab8c <MFX_IO_Delay>

}
 80044a6:	bf00      	nop
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b084      	sub	sp, #16
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	4603      	mov	r3, r0
 80044b6:	460a      	mov	r2, r1
 80044b8:	80fb      	strh	r3, [r7, #6]
 80044ba:	4613      	mov	r3, r2
 80044bc:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80044be:	2300      	movs	r3, #0
 80044c0:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	2141      	movs	r1, #65	; 0x41
 80044c6:	4618      	mov	r0, r3
 80044c8:	f006 fb32 	bl	800ab30 <MFX_IO_Read>
 80044cc:	4603      	mov	r3, r0
 80044ce:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	f023 0301 	bic.w	r3, r3, #1
 80044d6:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 80044d8:	7bfa      	ldrb	r2, [r7, #15]
 80044da:	797b      	ldrb	r3, [r7, #5]
 80044dc:	4313      	orrs	r3, r2
 80044de:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 80044e0:	7bfa      	ldrb	r2, [r7, #15]
 80044e2:	88fb      	ldrh	r3, [r7, #6]
 80044e4:	2141      	movs	r1, #65	; 0x41
 80044e6:	4618      	mov	r0, r3
 80044e8:	f006 fb0e 	bl	800ab08 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 80044ec:	2001      	movs	r0, #1
 80044ee:	f006 fb4d 	bl	800ab8c <MFX_IO_Delay>

}
 80044f2:	bf00      	nop
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b084      	sub	sp, #16
 80044fe:	af00      	add	r7, sp, #0
 8004500:	4603      	mov	r3, r0
 8004502:	6039      	str	r1, [r7, #0]
 8004504:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8004506:	88fb      	ldrh	r3, [r7, #6]
 8004508:	2140      	movs	r1, #64	; 0x40
 800450a:	4618      	mov	r0, r3
 800450c:	f006 fb10 	bl	800ab30 <MFX_IO_Read>
 8004510:	4603      	mov	r3, r0
 8004512:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	f043 0301 	orr.w	r3, r3, #1
 800451a:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004522:	d304      	bcc.n	800452e <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 8004524:	7bfb      	ldrb	r3, [r7, #15]
 8004526:	f043 0308 	orr.w	r3, r3, #8
 800452a:	73fb      	strb	r3, [r7, #15]
 800452c:	e003      	b.n	8004536 <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 800452e:	7bfb      	ldrb	r3, [r7, #15]
 8004530:	f023 0308 	bic.w	r3, r3, #8
 8004534:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8004536:	7bfa      	ldrb	r2, [r7, #15]
 8004538:	88fb      	ldrh	r3, [r7, #6]
 800453a:	2140      	movs	r1, #64	; 0x40
 800453c:	4618      	mov	r0, r3
 800453e:	f006 fae3 	bl	800ab08 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8004542:	2001      	movs	r0, #1
 8004544:	f006 fb22 	bl	800ab8c <MFX_IO_Delay>
}
 8004548:	bf00      	nop
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	4603      	mov	r3, r0
 8004558:	6039      	str	r1, [r7, #0]
 800455a:	80fb      	strh	r3, [r7, #6]
 800455c:	4613      	mov	r3, r2
 800455e:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 8004560:	2300      	movs	r3, #0
 8004562:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 8004564:	797b      	ldrb	r3, [r7, #5]
 8004566:	2b17      	cmp	r3, #23
 8004568:	f200 82d4 	bhi.w	8004b14 <mfxstm32l152_IO_Config+0x5c4>
 800456c:	a201      	add	r2, pc, #4	; (adr r2, 8004574 <mfxstm32l152_IO_Config+0x24>)
 800456e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004572:	bf00      	nop
 8004574:	08004605 	.word	0x08004605
 8004578:	08004695 	.word	0x08004695
 800457c:	08004755 	.word	0x08004755
 8004580:	08004845 	.word	0x08004845
 8004584:	08004935 	.word	0x08004935
 8004588:	08004a25 	.word	0x08004a25
 800458c:	080045d5 	.word	0x080045d5
 8004590:	080045d5 	.word	0x080045d5
 8004594:	08004635 	.word	0x08004635
 8004598:	08004665 	.word	0x08004665
 800459c:	08004b15 	.word	0x08004b15
 80045a0:	08004725 	.word	0x08004725
 80045a4:	080046f5 	.word	0x080046f5
 80045a8:	08004b15 	.word	0x08004b15
 80045ac:	080046c5 	.word	0x080046c5
 80045b0:	08004695 	.word	0x08004695
 80045b4:	080047a5 	.word	0x080047a5
 80045b8:	080047f5 	.word	0x080047f5
 80045bc:	08004895 	.word	0x08004895
 80045c0:	080048e5 	.word	0x080048e5
 80045c4:	08004985 	.word	0x08004985
 80045c8:	080049d5 	.word	0x080049d5
 80045cc:	08004a75 	.word	0x08004a75
 80045d0:	08004ac5 	.word	0x08004ac5
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80045d4:	88fb      	ldrh	r3, [r7, #6]
 80045d6:	6839      	ldr	r1, [r7, #0]
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 fb67 	bl	8004cac <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80045de:	88fb      	ldrh	r3, [r7, #6]
 80045e0:	2200      	movs	r2, #0
 80045e2:	6839      	ldr	r1, [r7, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 fa9d 	bl	8004b24 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80045ea:	88f8      	ldrh	r0, [r7, #6]
 80045ec:	2300      	movs	r3, #0
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	2164      	movs	r1, #100	; 0x64
 80045f2:	f000 fe57 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80045f6:	88f8      	ldrh	r0, [r7, #6]
 80045f8:	2300      	movs	r3, #0
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	2168      	movs	r1, #104	; 0x68
 80045fe:	f000 fe51 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    break;
 8004602:	e28a      	b.n	8004b1a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8004604:	88fb      	ldrh	r3, [r7, #6]
 8004606:	6839      	ldr	r1, [r7, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f000 fb4f 	bl	8004cac <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800460e:	88fb      	ldrh	r3, [r7, #6]
 8004610:	2200      	movs	r2, #0
 8004612:	6839      	ldr	r1, [r7, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f000 fa85 	bl	8004b24 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 800461a:	88f8      	ldrh	r0, [r7, #6]
 800461c:	2300      	movs	r3, #0
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	2164      	movs	r1, #100	; 0x64
 8004622:	f000 fe3f 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8004626:	88f8      	ldrh	r0, [r7, #6]
 8004628:	2301      	movs	r3, #1
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	2168      	movs	r1, #104	; 0x68
 800462e:	f000 fe39 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    break;
 8004632:	e272      	b.n	8004b1a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8004634:	88fb      	ldrh	r3, [r7, #6]
 8004636:	6839      	ldr	r1, [r7, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f000 fb37 	bl	8004cac <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800463e:	88fb      	ldrh	r3, [r7, #6]
 8004640:	2200      	movs	r2, #0
 8004642:	6839      	ldr	r1, [r7, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fa6d 	bl	8004b24 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800464a:	88f8      	ldrh	r0, [r7, #6]
 800464c:	2301      	movs	r3, #1
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	2164      	movs	r1, #100	; 0x64
 8004652:	f000 fe27 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8004656:	88f8      	ldrh	r0, [r7, #6]
 8004658:	2301      	movs	r3, #1
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	2168      	movs	r1, #104	; 0x68
 800465e:	f000 fe21 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    break;
 8004662:	e25a      	b.n	8004b1a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8004664:	88fb      	ldrh	r3, [r7, #6]
 8004666:	6839      	ldr	r1, [r7, #0]
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fb1f 	bl	8004cac <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800466e:	88fb      	ldrh	r3, [r7, #6]
 8004670:	2200      	movs	r2, #0
 8004672:	6839      	ldr	r1, [r7, #0]
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fa55 	bl	8004b24 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800467a:	88f8      	ldrh	r0, [r7, #6]
 800467c:	2301      	movs	r3, #1
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	2164      	movs	r1, #100	; 0x64
 8004682:	f000 fe0f 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8004686:	88f8      	ldrh	r0, [r7, #6]
 8004688:	2300      	movs	r3, #0
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	2168      	movs	r1, #104	; 0x68
 800468e:	f000 fe09 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    break;
 8004692:	e242      	b.n	8004b1a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8004694:	88fb      	ldrh	r3, [r7, #6]
 8004696:	6839      	ldr	r1, [r7, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fb07 	bl	8004cac <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 800469e:	88fb      	ldrh	r3, [r7, #6]
 80046a0:	2201      	movs	r2, #1
 80046a2:	6839      	ldr	r1, [r7, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 fa3d 	bl	8004b24 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 80046aa:	88f8      	ldrh	r0, [r7, #6]
 80046ac:	2300      	movs	r3, #0
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	2164      	movs	r1, #100	; 0x64
 80046b2:	f000 fdf7 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80046b6:	88f8      	ldrh	r0, [r7, #6]
 80046b8:	2300      	movs	r3, #0
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	2168      	movs	r1, #104	; 0x68
 80046be:	f000 fdf1 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    break;
 80046c2:	e22a      	b.n	8004b1a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80046c4:	88fb      	ldrh	r3, [r7, #6]
 80046c6:	6839      	ldr	r1, [r7, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 faef 	bl	8004cac <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	2201      	movs	r2, #1
 80046d2:	6839      	ldr	r1, [r7, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 fa25 	bl	8004b24 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 80046da:	88f8      	ldrh	r0, [r7, #6]
 80046dc:	2300      	movs	r3, #0
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	2164      	movs	r1, #100	; 0x64
 80046e2:	f000 fddf 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80046e6:	88f8      	ldrh	r0, [r7, #6]
 80046e8:	2301      	movs	r3, #1
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	2168      	movs	r1, #104	; 0x68
 80046ee:	f000 fdd9 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    break;
 80046f2:	e212      	b.n	8004b1a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80046f4:	88fb      	ldrh	r3, [r7, #6]
 80046f6:	6839      	ldr	r1, [r7, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 fad7 	bl	8004cac <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80046fe:	88fb      	ldrh	r3, [r7, #6]
 8004700:	2201      	movs	r2, #1
 8004702:	6839      	ldr	r1, [r7, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fa0d 	bl	8004b24 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 800470a:	88f8      	ldrh	r0, [r7, #6]
 800470c:	2301      	movs	r3, #1
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	2164      	movs	r1, #100	; 0x64
 8004712:	f000 fdc7 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8004716:	88f8      	ldrh	r0, [r7, #6]
 8004718:	2300      	movs	r3, #0
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	2168      	movs	r1, #104	; 0x68
 800471e:	f000 fdc1 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    break;
 8004722:	e1fa      	b.n	8004b1a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8004724:	88fb      	ldrh	r3, [r7, #6]
 8004726:	6839      	ldr	r1, [r7, #0]
 8004728:	4618      	mov	r0, r3
 800472a:	f000 fabf 	bl	8004cac <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	2201      	movs	r2, #1
 8004732:	6839      	ldr	r1, [r7, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f000 f9f5 	bl	8004b24 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 800473a:	88f8      	ldrh	r0, [r7, #6]
 800473c:	2301      	movs	r3, #1
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	2164      	movs	r1, #100	; 0x64
 8004742:	f000 fdaf 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8004746:	88f8      	ldrh	r0, [r7, #6]
 8004748:	2301      	movs	r3, #1
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	2168      	movs	r1, #104	; 0x68
 800474e:	f000 fda9 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    break;
 8004752:	e1e2      	b.n	8004b1a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8004754:	88fb      	ldrh	r3, [r7, #6]
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fa7a 	bl	8004c50 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800475c:	88fb      	ldrh	r3, [r7, #6]
 800475e:	2200      	movs	r2, #0
 8004760:	6839      	ldr	r1, [r7, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f000 f9de 	bl	8004b24 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8004768:	88f8      	ldrh	r0, [r7, #6]
 800476a:	2300      	movs	r3, #0
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	2164      	movs	r1, #100	; 0x64
 8004770:	f000 fd98 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8004774:	88f8      	ldrh	r0, [r7, #6]
 8004776:	2301      	movs	r3, #1
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	2168      	movs	r1, #104	; 0x68
 800477c:	f000 fd92 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8004780:	88fb      	ldrh	r3, [r7, #6]
 8004782:	2201      	movs	r2, #1
 8004784:	6839      	ldr	r1, [r7, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f000 f9de 	bl	8004b48 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 800478c:	88fb      	ldrh	r3, [r7, #6]
 800478e:	2201      	movs	r2, #1
 8004790:	6839      	ldr	r1, [r7, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f000 f9ed 	bl	8004b72 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 8004798:	88fb      	ldrh	r3, [r7, #6]
 800479a:	6839      	ldr	r1, [r7, #0]
 800479c:	4618      	mov	r0, r3
 800479e:	f000 fa75 	bl	8004c8c <mfxstm32l152_IO_EnablePinIT>
    break;
 80047a2:	e1ba      	b.n	8004b1a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80047a4:	88fb      	ldrh	r3, [r7, #6]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fa52 	bl	8004c50 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80047ac:	88fb      	ldrh	r3, [r7, #6]
 80047ae:	2200      	movs	r2, #0
 80047b0:	6839      	ldr	r1, [r7, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 f9b6 	bl	8004b24 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80047b8:	88f8      	ldrh	r0, [r7, #6]
 80047ba:	2301      	movs	r3, #1
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	2164      	movs	r1, #100	; 0x64
 80047c0:	f000 fd70 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80047c4:	88f8      	ldrh	r0, [r7, #6]
 80047c6:	2301      	movs	r3, #1
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	2168      	movs	r1, #104	; 0x68
 80047cc:	f000 fd6a 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80047d0:	88fb      	ldrh	r3, [r7, #6]
 80047d2:	2201      	movs	r2, #1
 80047d4:	6839      	ldr	r1, [r7, #0]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 f9b6 	bl	8004b48 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80047dc:	88fb      	ldrh	r3, [r7, #6]
 80047de:	2201      	movs	r2, #1
 80047e0:	6839      	ldr	r1, [r7, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 f9c5 	bl	8004b72 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80047e8:	88fb      	ldrh	r3, [r7, #6]
 80047ea:	6839      	ldr	r1, [r7, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 fa4d 	bl	8004c8c <mfxstm32l152_IO_EnablePinIT>
    break;
 80047f2:	e192      	b.n	8004b1a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80047f4:	88fb      	ldrh	r3, [r7, #6]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 fa2a 	bl	8004c50 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80047fc:	88fb      	ldrh	r3, [r7, #6]
 80047fe:	2200      	movs	r2, #0
 8004800:	6839      	ldr	r1, [r7, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f000 f98e 	bl	8004b24 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8004808:	88f8      	ldrh	r0, [r7, #6]
 800480a:	2301      	movs	r3, #1
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	2164      	movs	r1, #100	; 0x64
 8004810:	f000 fd48 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8004814:	88f8      	ldrh	r0, [r7, #6]
 8004816:	2300      	movs	r3, #0
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	2168      	movs	r1, #104	; 0x68
 800481c:	f000 fd42 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8004820:	88fb      	ldrh	r3, [r7, #6]
 8004822:	2201      	movs	r2, #1
 8004824:	6839      	ldr	r1, [r7, #0]
 8004826:	4618      	mov	r0, r3
 8004828:	f000 f98e 	bl	8004b48 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 800482c:	88fb      	ldrh	r3, [r7, #6]
 800482e:	2201      	movs	r2, #1
 8004830:	6839      	ldr	r1, [r7, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f000 f99d 	bl	8004b72 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8004838:	88fb      	ldrh	r3, [r7, #6]
 800483a:	6839      	ldr	r1, [r7, #0]
 800483c:	4618      	mov	r0, r3
 800483e:	f000 fa25 	bl	8004c8c <mfxstm32l152_IO_EnablePinIT>
    break;
 8004842:	e16a      	b.n	8004b1a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8004844:	88fb      	ldrh	r3, [r7, #6]
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fa02 	bl	8004c50 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800484c:	88fb      	ldrh	r3, [r7, #6]
 800484e:	2200      	movs	r2, #0
 8004850:	6839      	ldr	r1, [r7, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f000 f966 	bl	8004b24 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8004858:	88f8      	ldrh	r0, [r7, #6]
 800485a:	2300      	movs	r3, #0
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	2164      	movs	r1, #100	; 0x64
 8004860:	f000 fd20 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8004864:	88f8      	ldrh	r0, [r7, #6]
 8004866:	2301      	movs	r3, #1
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	2168      	movs	r1, #104	; 0x68
 800486c:	f000 fd1a 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8004870:	88fb      	ldrh	r3, [r7, #6]
 8004872:	2201      	movs	r2, #1
 8004874:	6839      	ldr	r1, [r7, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f000 f966 	bl	8004b48 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 800487c:	88fb      	ldrh	r3, [r7, #6]
 800487e:	2200      	movs	r2, #0
 8004880:	6839      	ldr	r1, [r7, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f000 f975 	bl	8004b72 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8004888:	88fb      	ldrh	r3, [r7, #6]
 800488a:	6839      	ldr	r1, [r7, #0]
 800488c:	4618      	mov	r0, r3
 800488e:	f000 f9fd 	bl	8004c8c <mfxstm32l152_IO_EnablePinIT>
    break;
 8004892:	e142      	b.n	8004b1a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8004894:	88fb      	ldrh	r3, [r7, #6]
 8004896:	4618      	mov	r0, r3
 8004898:	f000 f9da 	bl	8004c50 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800489c:	88fb      	ldrh	r3, [r7, #6]
 800489e:	2200      	movs	r2, #0
 80048a0:	6839      	ldr	r1, [r7, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 f93e 	bl	8004b24 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80048a8:	88f8      	ldrh	r0, [r7, #6]
 80048aa:	2301      	movs	r3, #1
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	2164      	movs	r1, #100	; 0x64
 80048b0:	f000 fcf8 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80048b4:	88f8      	ldrh	r0, [r7, #6]
 80048b6:	2301      	movs	r3, #1
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	2168      	movs	r1, #104	; 0x68
 80048bc:	f000 fcf2 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80048c0:	88fb      	ldrh	r3, [r7, #6]
 80048c2:	2201      	movs	r2, #1
 80048c4:	6839      	ldr	r1, [r7, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 f93e 	bl	8004b48 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80048cc:	88fb      	ldrh	r3, [r7, #6]
 80048ce:	2200      	movs	r2, #0
 80048d0:	6839      	ldr	r1, [r7, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 f94d 	bl	8004b72 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80048d8:	88fb      	ldrh	r3, [r7, #6]
 80048da:	6839      	ldr	r1, [r7, #0]
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 f9d5 	bl	8004c8c <mfxstm32l152_IO_EnablePinIT>
    break;
 80048e2:	e11a      	b.n	8004b1a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80048e4:	88fb      	ldrh	r3, [r7, #6]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 f9b2 	bl	8004c50 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80048ec:	88fb      	ldrh	r3, [r7, #6]
 80048ee:	2200      	movs	r2, #0
 80048f0:	6839      	ldr	r1, [r7, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 f916 	bl	8004b24 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80048f8:	88f8      	ldrh	r0, [r7, #6]
 80048fa:	2301      	movs	r3, #1
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	2164      	movs	r1, #100	; 0x64
 8004900:	f000 fcd0 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8004904:	88f8      	ldrh	r0, [r7, #6]
 8004906:	2300      	movs	r3, #0
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	2168      	movs	r1, #104	; 0x68
 800490c:	f000 fcca 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8004910:	88fb      	ldrh	r3, [r7, #6]
 8004912:	2201      	movs	r2, #1
 8004914:	6839      	ldr	r1, [r7, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f000 f916 	bl	8004b48 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 800491c:	88fb      	ldrh	r3, [r7, #6]
 800491e:	2200      	movs	r2, #0
 8004920:	6839      	ldr	r1, [r7, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f000 f925 	bl	8004b72 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8004928:	88fb      	ldrh	r3, [r7, #6]
 800492a:	6839      	ldr	r1, [r7, #0]
 800492c:	4618      	mov	r0, r3
 800492e:	f000 f9ad 	bl	8004c8c <mfxstm32l152_IO_EnablePinIT>
    break;
 8004932:	e0f2      	b.n	8004b1a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8004934:	88fb      	ldrh	r3, [r7, #6]
 8004936:	4618      	mov	r0, r3
 8004938:	f000 f98a 	bl	8004c50 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800493c:	88fb      	ldrh	r3, [r7, #6]
 800493e:	2200      	movs	r2, #0
 8004940:	6839      	ldr	r1, [r7, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	f000 f8ee 	bl	8004b24 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8004948:	88f8      	ldrh	r0, [r7, #6]
 800494a:	2300      	movs	r3, #0
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	2164      	movs	r1, #100	; 0x64
 8004950:	f000 fca8 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8004954:	88f8      	ldrh	r0, [r7, #6]
 8004956:	2301      	movs	r3, #1
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	2168      	movs	r1, #104	; 0x68
 800495c:	f000 fca2 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8004960:	88fb      	ldrh	r3, [r7, #6]
 8004962:	2200      	movs	r2, #0
 8004964:	6839      	ldr	r1, [r7, #0]
 8004966:	4618      	mov	r0, r3
 8004968:	f000 f8ee 	bl	8004b48 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 800496c:	88fb      	ldrh	r3, [r7, #6]
 800496e:	2200      	movs	r2, #0
 8004970:	6839      	ldr	r1, [r7, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f000 f8fd 	bl	8004b72 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8004978:	88fb      	ldrh	r3, [r7, #6]
 800497a:	6839      	ldr	r1, [r7, #0]
 800497c:	4618      	mov	r0, r3
 800497e:	f000 f985 	bl	8004c8c <mfxstm32l152_IO_EnablePinIT>
    break;
 8004982:	e0ca      	b.n	8004b1a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8004984:	88fb      	ldrh	r3, [r7, #6]
 8004986:	4618      	mov	r0, r3
 8004988:	f000 f962 	bl	8004c50 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800498c:	88fb      	ldrh	r3, [r7, #6]
 800498e:	2200      	movs	r2, #0
 8004990:	6839      	ldr	r1, [r7, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	f000 f8c6 	bl	8004b24 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8004998:	88f8      	ldrh	r0, [r7, #6]
 800499a:	2301      	movs	r3, #1
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	2164      	movs	r1, #100	; 0x64
 80049a0:	f000 fc80 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80049a4:	88f8      	ldrh	r0, [r7, #6]
 80049a6:	2301      	movs	r3, #1
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	2168      	movs	r1, #104	; 0x68
 80049ac:	f000 fc7a 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80049b0:	88fb      	ldrh	r3, [r7, #6]
 80049b2:	2200      	movs	r2, #0
 80049b4:	6839      	ldr	r1, [r7, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 f8c6 	bl	8004b48 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80049bc:	88fb      	ldrh	r3, [r7, #6]
 80049be:	2200      	movs	r2, #0
 80049c0:	6839      	ldr	r1, [r7, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 f8d5 	bl	8004b72 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80049c8:	88fb      	ldrh	r3, [r7, #6]
 80049ca:	6839      	ldr	r1, [r7, #0]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 f95d 	bl	8004c8c <mfxstm32l152_IO_EnablePinIT>
    break;
 80049d2:	e0a2      	b.n	8004b1a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80049d4:	88fb      	ldrh	r3, [r7, #6]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 f93a 	bl	8004c50 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80049dc:	88fb      	ldrh	r3, [r7, #6]
 80049de:	2200      	movs	r2, #0
 80049e0:	6839      	ldr	r1, [r7, #0]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 f89e 	bl	8004b24 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80049e8:	88f8      	ldrh	r0, [r7, #6]
 80049ea:	2301      	movs	r3, #1
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	2164      	movs	r1, #100	; 0x64
 80049f0:	f000 fc58 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80049f4:	88f8      	ldrh	r0, [r7, #6]
 80049f6:	2300      	movs	r3, #0
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	2168      	movs	r1, #104	; 0x68
 80049fc:	f000 fc52 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8004a00:	88fb      	ldrh	r3, [r7, #6]
 8004a02:	2200      	movs	r2, #0
 8004a04:	6839      	ldr	r1, [r7, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 f89e 	bl	8004b48 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8004a0c:	88fb      	ldrh	r3, [r7, #6]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	6839      	ldr	r1, [r7, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 f8ad 	bl	8004b72 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8004a18:	88fb      	ldrh	r3, [r7, #6]
 8004a1a:	6839      	ldr	r1, [r7, #0]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 f935 	bl	8004c8c <mfxstm32l152_IO_EnablePinIT>
    break;
 8004a22:	e07a      	b.n	8004b1a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8004a24:	88fb      	ldrh	r3, [r7, #6]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 f912 	bl	8004c50 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8004a2c:	88fb      	ldrh	r3, [r7, #6]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	6839      	ldr	r1, [r7, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 f876 	bl	8004b24 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8004a38:	88f8      	ldrh	r0, [r7, #6]
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	2164      	movs	r1, #100	; 0x64
 8004a40:	f000 fc30 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8004a44:	88f8      	ldrh	r0, [r7, #6]
 8004a46:	2301      	movs	r3, #1
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	2168      	movs	r1, #104	; 0x68
 8004a4c:	f000 fc2a 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8004a50:	88fb      	ldrh	r3, [r7, #6]
 8004a52:	2200      	movs	r2, #0
 8004a54:	6839      	ldr	r1, [r7, #0]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 f876 	bl	8004b48 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8004a5c:	88fb      	ldrh	r3, [r7, #6]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	6839      	ldr	r1, [r7, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 f885 	bl	8004b72 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8004a68:	88fb      	ldrh	r3, [r7, #6]
 8004a6a:	6839      	ldr	r1, [r7, #0]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 f90d 	bl	8004c8c <mfxstm32l152_IO_EnablePinIT>
    break;
 8004a72:	e052      	b.n	8004b1a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8004a74:	88fb      	ldrh	r3, [r7, #6]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 f8ea 	bl	8004c50 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8004a7c:	88fb      	ldrh	r3, [r7, #6]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	6839      	ldr	r1, [r7, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 f84e 	bl	8004b24 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8004a88:	88f8      	ldrh	r0, [r7, #6]
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	2164      	movs	r1, #100	; 0x64
 8004a90:	f000 fc08 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8004a94:	88f8      	ldrh	r0, [r7, #6]
 8004a96:	2301      	movs	r3, #1
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	2168      	movs	r1, #104	; 0x68
 8004a9c:	f000 fc02 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8004aa0:	88fb      	ldrh	r3, [r7, #6]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	6839      	ldr	r1, [r7, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 f84e 	bl	8004b48 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8004aac:	88fb      	ldrh	r3, [r7, #6]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	6839      	ldr	r1, [r7, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 f85d 	bl	8004b72 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8004ab8:	88fb      	ldrh	r3, [r7, #6]
 8004aba:	6839      	ldr	r1, [r7, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 f8e5 	bl	8004c8c <mfxstm32l152_IO_EnablePinIT>
    break;
 8004ac2:	e02a      	b.n	8004b1a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8004ac4:	88fb      	ldrh	r3, [r7, #6]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 f8c2 	bl	8004c50 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8004acc:	88fb      	ldrh	r3, [r7, #6]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	6839      	ldr	r1, [r7, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 f826 	bl	8004b24 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8004ad8:	88f8      	ldrh	r0, [r7, #6]
 8004ada:	2301      	movs	r3, #1
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	2164      	movs	r1, #100	; 0x64
 8004ae0:	f000 fbe0 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8004ae4:	88f8      	ldrh	r0, [r7, #6]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	2168      	movs	r1, #104	; 0x68
 8004aec:	f000 fbda 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8004af0:	88fb      	ldrh	r3, [r7, #6]
 8004af2:	2200      	movs	r2, #0
 8004af4:	6839      	ldr	r1, [r7, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 f826 	bl	8004b48 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8004afc:	88fb      	ldrh	r3, [r7, #6]
 8004afe:	2201      	movs	r2, #1
 8004b00:	6839      	ldr	r1, [r7, #0]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 f835 	bl	8004b72 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8004b08:	88fb      	ldrh	r3, [r7, #6]
 8004b0a:	6839      	ldr	r1, [r7, #0]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 f8bd 	bl	8004c8c <mfxstm32l152_IO_EnablePinIT>
    break;
 8004b12:	e002      	b.n	8004b1a <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 8004b14:	797b      	ldrb	r3, [r7, #5]
 8004b16:	73fb      	strb	r3, [r7, #15]
    break;
 8004b18:	bf00      	nop
  }

  return error_code;
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	6039      	str	r1, [r7, #0]
 8004b2e:	80fb      	strh	r3, [r7, #6]
 8004b30:	4613      	mov	r3, r2
 8004b32:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 8004b34:	797b      	ldrb	r3, [r7, #5]
 8004b36:	88f8      	ldrh	r0, [r7, #6]
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	2160      	movs	r1, #96	; 0x60
 8004b3c:	f000 fbb2 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
}
 8004b40:	bf00      	nop
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	6039      	str	r1, [r7, #0]
 8004b52:	80fb      	strh	r3, [r7, #6]
 8004b54:	4613      	mov	r3, r2
 8004b56:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 8004b58:	797b      	ldrb	r3, [r7, #5]
 8004b5a:	88f8      	ldrh	r0, [r7, #6]
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	214c      	movs	r1, #76	; 0x4c
 8004b60:	f000 fba0 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8004b64:	2001      	movs	r0, #1
 8004b66:	f006 f811 	bl	800ab8c <MFX_IO_Delay>
}
 8004b6a:	bf00      	nop
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b082      	sub	sp, #8
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	4603      	mov	r3, r0
 8004b7a:	6039      	str	r1, [r7, #0]
 8004b7c:	80fb      	strh	r3, [r7, #6]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 8004b82:	797b      	ldrb	r3, [r7, #5]
 8004b84:	88f8      	ldrh	r0, [r7, #6]
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	2150      	movs	r1, #80	; 0x50
 8004b8a:	f000 fb8b 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8004b8e:	2001      	movs	r0, #1
 8004b90:	f005 fffc 	bl	800ab8c <MFX_IO_Delay>
}
 8004b94:	bf00      	nop
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	6039      	str	r1, [r7, #0]
 8004ba6:	80fb      	strh	r3, [r7, #6]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8004bac:	797b      	ldrb	r3, [r7, #5]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d006      	beq.n	8004bc0 <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 8004bb2:	88f8      	ldrh	r0, [r7, #6]
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	216c      	movs	r1, #108	; 0x6c
 8004bba:	f000 fb73 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 8004bbe:	e005      	b.n	8004bcc <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 8004bc0:	88f8      	ldrh	r0, [r7, #6]
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	2170      	movs	r1, #112	; 0x70
 8004bc8:	f000 fb6c 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
}
 8004bcc:	bf00      	nop
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	4603      	mov	r3, r0
 8004bdc:	6039      	str	r1, [r7, #0]
 8004bde:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 8004be4:	2300      	movs	r3, #0
 8004be6:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d006      	beq.n	8004c02 <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 8004bf4:	88fb      	ldrh	r3, [r7, #6]
 8004bf6:	2110      	movs	r1, #16
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f005 ff99 	bl	800ab30 <MFX_IO_Read>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d006      	beq.n	8004c1a <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 8004c0c:	88fb      	ldrh	r3, [r7, #6]
 8004c0e:	2111      	movs	r1, #17
 8004c10:	4618      	mov	r0, r3
 8004c12:	f005 ff8d 	bl	800ab30 <MFX_IO_Read>
 8004c16:	4603      	mov	r3, r0
 8004c18:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d006      	beq.n	8004c32 <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 8004c24:	88fb      	ldrh	r3, [r7, #6]
 8004c26:	2112      	movs	r1, #18
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f005 ff81 	bl	800ab30 <MFX_IO_Read>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	021a      	lsls	r2, r3, #8
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	441a      	add	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	041b      	lsls	r3, r3, #16
 8004c3e:	4413      	add	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	4013      	ands	r3, r2
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	4603      	mov	r3, r0
 8004c58:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8004c5a:	f005 feef 	bl	800aa3c <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8004c5e:	88fb      	ldrh	r3, [r7, #6]
 8004c60:	2101      	movs	r1, #1
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff fb92 	bl	800438c <mfxstm32l152_EnableITSource>
}
 8004c68:	bf00      	nop
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	4603      	mov	r3, r0
 8004c78:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8004c7a:	88fb      	ldrh	r3, [r7, #6]
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff fba3 	bl	80043ca <mfxstm32l152_DisableITSource>
}
 8004c84:	bf00      	nop
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	4603      	mov	r3, r0
 8004c94:	6039      	str	r1, [r7, #0]
 8004c96:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 8004c98:	88f8      	ldrh	r0, [r7, #6]
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	2148      	movs	r1, #72	; 0x48
 8004ca0:	f000 fb00 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
}
 8004ca4:	bf00      	nop
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	6039      	str	r1, [r7, #0]
 8004cb6:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 8004cb8:	88f8      	ldrh	r0, [r7, #6]
 8004cba:	2300      	movs	r3, #0
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	2148      	movs	r1, #72	; 0x48
 8004cc0:	f000 faf0 	bl	80052a4 <mfxstm32l152_reg24_setPinValue>
}
 8004cc4:	bf00      	nop
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	6039      	str	r1, [r7, #0]
 8004cd6:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d006      	beq.n	8004cfa <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	210c      	movs	r1, #12
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f005 ff1d 	bl	800ab30 <MFX_IO_Read>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004d00:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d006      	beq.n	8004d16 <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 8004d08:	88fb      	ldrh	r3, [r7, #6]
 8004d0a:	210d      	movs	r1, #13
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f005 ff0f 	bl	800ab30 <MFX_IO_Read>
 8004d12:	4603      	mov	r3, r0
 8004d14:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	0c1b      	lsrs	r3, r3, #16
 8004d1a:	041b      	lsls	r3, r3, #16
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d006      	beq.n	8004d2e <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 8004d20:	88fb      	ldrh	r3, [r7, #6]
 8004d22:	210e      	movs	r1, #14
 8004d24:	4618      	mov	r0, r3
 8004d26:	f005 ff03 	bl	800ab30 <MFX_IO_Read>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8004d2e:	7bfa      	ldrb	r2, [r7, #15]
 8004d30:	89bb      	ldrh	r3, [r7, #12]
 8004d32:	021b      	lsls	r3, r3, #8
 8004d34:	4413      	add	r3, r2
 8004d36:	461a      	mov	r2, r3
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	041b      	lsls	r3, r3, #16
 8004d3c:	4413      	add	r3, r2
 8004d3e:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	4013      	ands	r3, r2
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b084      	sub	sp, #16
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	4603      	mov	r3, r0
 8004d56:	6039      	str	r1, [r7, #0]
 8004d58:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	0a1b      	lsrs	r3, r3, #8
 8004d62:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	0c1b      	lsrs	r3, r3, #16
 8004d68:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 8004d6a:	7bfb      	ldrb	r3, [r7, #15]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d005      	beq.n	8004d7c <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 8004d70:	7bfa      	ldrb	r2, [r7, #15]
 8004d72:	88fb      	ldrh	r3, [r7, #6]
 8004d74:	2154      	movs	r1, #84	; 0x54
 8004d76:	4618      	mov	r0, r3
 8004d78:	f005 fec6 	bl	800ab08 <MFX_IO_Write>
  }
  if (pin_8_15)
 8004d7c:	7bbb      	ldrb	r3, [r7, #14]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d005      	beq.n	8004d8e <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 8004d82:	7bba      	ldrb	r2, [r7, #14]
 8004d84:	88fb      	ldrh	r3, [r7, #6]
 8004d86:	2155      	movs	r1, #85	; 0x55
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f005 febd 	bl	800ab08 <MFX_IO_Write>
  }
  if (pin_16_23)
 8004d8e:	7b7b      	ldrb	r3, [r7, #13]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d005      	beq.n	8004da0 <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 8004d94:	7b7a      	ldrb	r2, [r7, #13]
 8004d96:	88fb      	ldrh	r3, [r7, #6]
 8004d98:	2156      	movs	r1, #86	; 0x56
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f005 feb4 	bl	800ab08 <MFX_IO_Write>
  }
}
 8004da0:	bf00      	nop
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	4603      	mov	r3, r0
 8004db0:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 8004db2:	2300      	movs	r3, #0
 8004db4:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 8004db6:	88fb      	ldrh	r3, [r7, #6]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2180      	movs	r1, #128	; 0x80
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f005 feb6 	bl	800ab30 <MFX_IO_Read>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	f043 0301 	orr.w	r3, r3, #1
 8004dce:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 8004dd0:	88fb      	ldrh	r3, [r7, #6]
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	7bfa      	ldrb	r2, [r7, #15]
 8004dd8:	2180      	movs	r1, #128	; 0x80
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f005 fe94 	bl	800ab08 <MFX_IO_Write>
}
 8004de0:	bf00      	nop
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 8004de8:	b084      	sub	sp, #16
 8004dea:	b590      	push	{r4, r7, lr}
 8004dec:	b085      	sub	sp, #20
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	4604      	mov	r4, r0
 8004df2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004df6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004dfa:	4623      	mov	r3, r4
 8004dfc:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 8004e02:	2300      	movs	r3, #0
 8004e04:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8004e06:	88fb      	ldrh	r3, [r7, #6]
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2140      	movs	r1, #64	; 0x40
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f005 fe8e 	bl	800ab30 <MFX_IO_Read>
 8004e14:	4603      	mov	r3, r0
 8004e16:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 8004e18:	7bbb      	ldrb	r3, [r7, #14]
 8004e1a:	f003 0304 	and.w	r3, r3, #4
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10b      	bne.n	8004e3a <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 8004e22:	7bbb      	ldrb	r3, [r7, #14]
 8004e24:	f043 0304 	orr.w	r3, r3, #4
 8004e28:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8004e2a:	88fb      	ldrh	r3, [r7, #6]
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	7bba      	ldrb	r2, [r7, #14]
 8004e32:	2140      	movs	r1, #64	; 0x40
 8004e34:	4618      	mov	r0, r3
 8004e36:	f005 fe67 	bl	800ab08 <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 8004e3a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	f003 030e 	and.w	r3, r3, #14
 8004e46:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 8004e48:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004e4c:	b25b      	sxtb	r3, r3
 8004e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e52:	b25a      	sxtb	r2, r3
 8004e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	b25b      	sxtb	r3, r3
 8004e5c:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 8004e5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004e62:	b25b      	sxtb	r3, r3
 8004e64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004e68:	b25a      	sxtb	r2, r3
 8004e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	b25b      	sxtb	r3, r3
 8004e72:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 8004e74:	88fb      	ldrh	r3, [r7, #6]
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	7bfa      	ldrb	r2, [r7, #15]
 8004e7c:	2180      	movs	r1, #128	; 0x80
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f005 fe42 	bl	800ab08 <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8004e84:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004e88:	b25b      	sxtb	r3, r3
 8004e8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004e8e:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 8004e90:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8004e94:	b25b      	sxtb	r3, r3
 8004e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e9a:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	b25b      	sxtb	r3, r3
 8004ea0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 8004ea2:	88fb      	ldrh	r3, [r7, #6]
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	7bfa      	ldrb	r2, [r7, #15]
 8004eaa:	2181      	movs	r1, #129	; 0x81
 8004eac:	4618      	mov	r0, r3
 8004eae:	f005 fe2b 	bl	800ab08 <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 8004eb2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004eb4:	0a1b      	lsrs	r3, r3, #8
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 8004eba:	88fb      	ldrh	r3, [r7, #6]
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	7bfa      	ldrb	r2, [r7, #15]
 8004ec2:	2182      	movs	r1, #130	; 0x82
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f005 fe1f 	bl	800ab08 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 8004eca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004ecc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 8004ece:	88fb      	ldrh	r3, [r7, #6]
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	7bfa      	ldrb	r2, [r7, #15]
 8004ed6:	2183      	movs	r1, #131	; 0x83
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f005 fe15 	bl	800ab08 <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 8004ede:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ee0:	0a1b      	lsrs	r3, r3, #8
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 8004ee6:	88fb      	ldrh	r3, [r7, #6]
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	7bfa      	ldrb	r2, [r7, #15]
 8004eee:	2184      	movs	r1, #132	; 0x84
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f005 fe09 	bl	800ab08 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 8004ef6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ef8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 8004efa:	88fb      	ldrh	r3, [r7, #6]
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	7bfa      	ldrb	r2, [r7, #15]
 8004f02:	2185      	movs	r1, #133	; 0x85
 8004f04:	4618      	mov	r0, r3
 8004f06:	f005 fdff 	bl	800ab08 <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 8004f0a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004f0c:	0a1b      	lsrs	r3, r3, #8
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 8004f12:	88fb      	ldrh	r3, [r7, #6]
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	7bfa      	ldrb	r2, [r7, #15]
 8004f1a:	2186      	movs	r1, #134	; 0x86
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f005 fdf3 	bl	800ab08 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 8004f22:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004f24:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 8004f26:	88fb      	ldrh	r3, [r7, #6]
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	7bfa      	ldrb	r2, [r7, #15]
 8004f2e:	2187      	movs	r1, #135	; 0x87
 8004f30:	4618      	mov	r0, r3
 8004f32:	f005 fde9 	bl	800ab08 <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 8004f36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f38:	0a1b      	lsrs	r3, r3, #8
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 8004f3e:	88fb      	ldrh	r3, [r7, #6]
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	7bfa      	ldrb	r2, [r7, #15]
 8004f46:	2188      	movs	r1, #136	; 0x88
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f005 fddd 	bl	800ab08 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 8004f4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f50:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 8004f52:	88fb      	ldrh	r3, [r7, #6]
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	7bfa      	ldrb	r2, [r7, #15]
 8004f5a:	2189      	movs	r1, #137	; 0x89
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f005 fdd3 	bl	800ab08 <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 8004f62:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004f64:	0a1b      	lsrs	r3, r3, #8
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 8004f6a:	88fb      	ldrh	r3, [r7, #6]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	7bfa      	ldrb	r2, [r7, #15]
 8004f72:	218a      	movs	r1, #138	; 0x8a
 8004f74:	4618      	mov	r0, r3
 8004f76:	f005 fdc7 	bl	800ab08 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 8004f7a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004f7c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 8004f7e:	88fb      	ldrh	r3, [r7, #6]
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	7bfa      	ldrb	r2, [r7, #15]
 8004f86:	218b      	movs	r1, #139	; 0x8b
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f005 fdbd 	bl	800ab08 <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 8004f8e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004f90:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 8004f92:	88fb      	ldrh	r3, [r7, #6]
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	7bfa      	ldrb	r2, [r7, #15]
 8004f9a:	2190      	movs	r1, #144	; 0x90
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f005 fdb3 	bl	800ab08 <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 8004fa2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fa4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 8004fa6:	88fb      	ldrh	r3, [r7, #6]
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	7bfa      	ldrb	r2, [r7, #15]
 8004fae:	2191      	movs	r1, #145	; 0x91
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f005 fda9 	bl	800ab08 <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 8004fb6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004fb8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 8004fba:	88fb      	ldrh	r3, [r7, #6]
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	7bfa      	ldrb	r2, [r7, #15]
 8004fc2:	2192      	movs	r1, #146	; 0x92
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f005 fd9f 	bl	800ab08 <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 8004fca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004fcc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 8004fce:	88fb      	ldrh	r3, [r7, #6]
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	7bfa      	ldrb	r2, [r7, #15]
 8004fd6:	2193      	movs	r1, #147	; 0x93
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f005 fd95 	bl	800ab08 <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 8004fde:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004fe0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 8004fe2:	88fb      	ldrh	r3, [r7, #6]
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	7bfa      	ldrb	r2, [r7, #15]
 8004fea:	2194      	movs	r1, #148	; 0x94
 8004fec:	4618      	mov	r0, r3
 8004fee:	f005 fd8b 	bl	800ab08 <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 8004ff2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ff4:	0a1b      	lsrs	r3, r3, #8
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 8004ffa:	88fb      	ldrh	r3, [r7, #6]
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	7bfa      	ldrb	r2, [r7, #15]
 8005002:	218c      	movs	r1, #140	; 0x8c
 8005004:	4618      	mov	r0, r3
 8005006:	f005 fd7f 	bl	800ab08 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 800500a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800500c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	b2db      	uxtb	r3, r3
 8005012:	b29b      	uxth	r3, r3
 8005014:	7bfa      	ldrb	r2, [r7, #15]
 8005016:	218d      	movs	r1, #141	; 0x8d
 8005018:	4618      	mov	r0, r3
 800501a:	f005 fd75 	bl	800ab08 <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 800501e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005020:	0a1b      	lsrs	r3, r3, #8
 8005022:	b29b      	uxth	r3, r3
 8005024:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 8005026:	88fb      	ldrh	r3, [r7, #6]
 8005028:	b2db      	uxtb	r3, r3
 800502a:	b29b      	uxth	r3, r3
 800502c:	7bfa      	ldrb	r2, [r7, #15]
 800502e:	218e      	movs	r1, #142	; 0x8e
 8005030:	4618      	mov	r0, r3
 8005032:	f005 fd69 	bl	800ab08 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 8005036:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005038:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 800503a:	88fb      	ldrh	r3, [r7, #6]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	b29b      	uxth	r3, r3
 8005040:	7bfa      	ldrb	r2, [r7, #15]
 8005042:	218f      	movs	r1, #143	; 0x8f
 8005044:	4618      	mov	r0, r3
 8005046:	f005 fd5f 	bl	800ab08 <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 800504a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800504e:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 8005050:	88fb      	ldrh	r3, [r7, #6]
 8005052:	b2db      	uxtb	r3, r3
 8005054:	b29b      	uxth	r3, r3
 8005056:	7bfa      	ldrb	r2, [r7, #15]
 8005058:	2196      	movs	r1, #150	; 0x96
 800505a:	4618      	mov	r0, r3
 800505c:	f005 fd54 	bl	800ab08 <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8005060:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005064:	b25b      	sxtb	r3, r3
 8005066:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800506a:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 800506c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005070:	b25b      	sxtb	r3, r3
 8005072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005076:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8005078:	4313      	orrs	r3, r2
 800507a:	b25b      	sxtb	r3, r3
 800507c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 800507e:	88fb      	ldrh	r3, [r7, #6]
 8005080:	b2db      	uxtb	r3, r3
 8005082:	b29b      	uxth	r3, r3
 8005084:	7bfa      	ldrb	r2, [r7, #15]
 8005086:	2197      	movs	r1, #151	; 0x97
 8005088:	4618      	mov	r0, r3
 800508a:	f005 fd3d 	bl	800ab08 <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 800508e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005092:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 8005094:	88fb      	ldrh	r3, [r7, #6]
 8005096:	b2db      	uxtb	r3, r3
 8005098:	b29b      	uxth	r3, r3
 800509a:	7bfa      	ldrb	r2, [r7, #15]
 800509c:	2198      	movs	r1, #152	; 0x98
 800509e:	4618      	mov	r0, r3
 80050a0:	f005 fd32 	bl	800ab08 <MFX_IO_Write>
}
 80050a4:	bf00      	nop
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80050ae:	b004      	add	sp, #16
 80050b0:	4770      	bx	lr

080050b2 <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b084      	sub	sp, #16
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	4603      	mov	r3, r0
 80050ba:	6039      	str	r1, [r7, #0]
 80050bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 80050be:	88fb      	ldrh	r3, [r7, #6]
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	b298      	uxth	r0, r3
 80050c4:	f107 020c 	add.w	r2, r7, #12
 80050c8:	2303      	movs	r3, #3
 80050ca:	2114      	movs	r1, #20
 80050cc:	f005 fd44 	bl	800ab58 <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 80050d0:	7b3b      	ldrb	r3, [r7, #12]
 80050d2:	041a      	lsls	r2, r3, #16
 80050d4:	7b7b      	ldrb	r3, [r7, #13]
 80050d6:	021b      	lsls	r3, r3, #8
 80050d8:	4313      	orrs	r3, r2
 80050da:	7bba      	ldrb	r2, [r7, #14]
 80050dc:	4313      	orrs	r3, r2
 80050de:	461a      	mov	r2, r3
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	601a      	str	r2, [r3, #0]

}
 80050e4:	bf00      	nop
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	4603      	mov	r3, r0
 80050f4:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 80050f6:	f005 fca1 	bl	800aa3c <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 80050fa:	88fb      	ldrh	r3, [r7, #6]
 80050fc:	2102      	movs	r1, #2
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff f944 	bl	800438c <mfxstm32l152_EnableITSource>
}
 8005104:	bf00      	nop
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	4603      	mov	r3, r0
 8005114:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8005116:	88fb      	ldrh	r3, [r7, #6]
 8005118:	2102      	movs	r1, #2
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff f98f 	bl	800443e <mfxstm32l152_ClearGlobalIT>
}
 8005120:	bf00      	nop
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	4603      	mov	r3, r0
 8005130:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 8005132:	88fb      	ldrh	r3, [r7, #6]
 8005134:	2102      	movs	r1, #2
 8005136:	4618      	mov	r0, r3
 8005138:	f7ff f96b 	bl	8004412 <mfxstm32l152_GlobalITStatus>
 800513c:	4603      	mov	r3, r0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b082      	sub	sp, #8
 800514a:	af00      	add	r7, sp, #0
 800514c:	4603      	mov	r3, r0
 800514e:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8005150:	88fb      	ldrh	r3, [r7, #6]
 8005152:	2102      	movs	r1, #2
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff f938 	bl	80043ca <mfxstm32l152_DisableITSource>
}
 800515a:	bf00      	nop
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b082      	sub	sp, #8
 8005166:	af00      	add	r7, sp, #0
 8005168:	4603      	mov	r3, r0
 800516a:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 800516c:	88fb      	ldrh	r3, [r7, #6]
 800516e:	b2db      	uxtb	r3, r3
 8005170:	b29b      	uxth	r3, r3
 8005172:	2103      	movs	r1, #3
 8005174:	4618      	mov	r0, r3
 8005176:	f005 fcdb 	bl	800ab30 <MFX_IO_Read>
 800517a:	4603      	mov	r3, r0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	4603      	mov	r3, r0
 800518c:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 800518e:	88fb      	ldrh	r3, [r7, #6]
 8005190:	b2db      	uxtb	r3, r3
 8005192:	b29b      	uxth	r3, r3
 8005194:	2104      	movs	r1, #4
 8005196:	4618      	mov	r0, r3
 8005198:	f005 fcca 	bl	800ab30 <MFX_IO_Read>
 800519c:	4603      	mov	r3, r0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b082      	sub	sp, #8
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	4603      	mov	r3, r0
 80051ae:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 80051b0:	f005 fc44 	bl	800aa3c <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 80051b4:	88fb      	ldrh	r3, [r7, #6]
 80051b6:	2104      	movs	r1, #4
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff f8e7 	bl	800438c <mfxstm32l152_EnableITSource>
}
 80051be:	bf00      	nop
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b082      	sub	sp, #8
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	4603      	mov	r3, r0
 80051ce:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 80051d0:	88fb      	ldrh	r3, [r7, #6]
 80051d2:	2104      	movs	r1, #4
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7ff f932 	bl	800443e <mfxstm32l152_ClearGlobalIT>
}
 80051da:	bf00      	nop
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b082      	sub	sp, #8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	4603      	mov	r3, r0
 80051ea:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 80051ec:	88fb      	ldrh	r3, [r7, #6]
 80051ee:	2104      	movs	r1, #4
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7ff f90e 	bl	8004412 <mfxstm32l152_GlobalITStatus>
 80051f6:	4603      	mov	r3, r0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	4603      	mov	r3, r0
 8005208:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 800520a:	88fb      	ldrh	r3, [r7, #6]
 800520c:	2104      	movs	r1, #4
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff f8db 	bl	80043ca <mfxstm32l152_DisableITSource>
}
 8005214:	bf00      	nop
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	4603      	mov	r3, r0
 8005224:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8005226:	2300      	movs	r3, #0
 8005228:	73fb      	strb	r3, [r7, #15]
 800522a:	e00b      	b.n	8005244 <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 800522c:	7bfb      	ldrb	r3, [r7, #15]
 800522e:	4a0a      	ldr	r2, [pc, #40]	; (8005258 <mfxstm32l152_GetInstance+0x3c>)
 8005230:	5cd3      	ldrb	r3, [r2, r3]
 8005232:	b29b      	uxth	r3, r3
 8005234:	88fa      	ldrh	r2, [r7, #6]
 8005236:	429a      	cmp	r2, r3
 8005238:	d101      	bne.n	800523e <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 800523a:	7bfb      	ldrb	r3, [r7, #15]
 800523c:	e006      	b.n	800524c <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 800523e:	7bfb      	ldrb	r3, [r7, #15]
 8005240:	3301      	adds	r3, #1
 8005242:	73fb      	strb	r3, [r7, #15]
 8005244:	7bfb      	ldrb	r3, [r7, #15]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d9f0      	bls.n	800522c <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 800524a:	23ff      	movs	r3, #255	; 0xff
}
 800524c:	4618      	mov	r0, r3
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	200019f8 	.word	0x200019f8

0800525c <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	4603      	mov	r3, r0
 8005264:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8005266:	2300      	movs	r3, #0
 8005268:	73fb      	strb	r3, [r7, #15]
 800526a:	e00f      	b.n	800528c <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 800526c:	7bfb      	ldrb	r3, [r7, #15]
 800526e:	4a0c      	ldr	r2, [pc, #48]	; (80052a0 <mfxstm32l152_ReleaseInstance+0x44>)
 8005270:	5cd3      	ldrb	r3, [r2, r3]
 8005272:	b29b      	uxth	r3, r3
 8005274:	88fa      	ldrh	r2, [r7, #6]
 8005276:	429a      	cmp	r2, r3
 8005278:	d105      	bne.n	8005286 <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 800527a:	7bfb      	ldrb	r3, [r7, #15]
 800527c:	4a08      	ldr	r2, [pc, #32]	; (80052a0 <mfxstm32l152_ReleaseInstance+0x44>)
 800527e:	2100      	movs	r1, #0
 8005280:	54d1      	strb	r1, [r2, r3]
      return idx;
 8005282:	7bfb      	ldrb	r3, [r7, #15]
 8005284:	e006      	b.n	8005294 <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8005286:	7bfb      	ldrb	r3, [r7, #15]
 8005288:	3301      	adds	r3, #1
 800528a:	73fb      	strb	r3, [r7, #15]
 800528c:	7bfb      	ldrb	r3, [r7, #15]
 800528e:	2b02      	cmp	r3, #2
 8005290:	d9ec      	bls.n	800526c <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 8005292:	23ff      	movs	r3, #255	; 0xff
}
 8005294:	4618      	mov	r0, r3
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	200019f8 	.word	0x200019f8

080052a4 <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	603a      	str	r2, [r7, #0]
 80052ac:	461a      	mov	r2, r3
 80052ae:	4603      	mov	r3, r0
 80052b0:	80fb      	strh	r3, [r7, #6]
 80052b2:	460b      	mov	r3, r1
 80052b4:	717b      	strb	r3, [r7, #5]
 80052b6:	4613      	mov	r3, r2
 80052b8:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 80052ba:	2300      	movs	r3, #0
 80052bc:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	0a1b      	lsrs	r3, r3, #8
 80052c6:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	0c1b      	lsrs	r3, r3, #16
 80052cc:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 80052ce:	7bbb      	ldrb	r3, [r7, #14]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d01e      	beq.n	8005312 <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 80052d4:	797a      	ldrb	r2, [r7, #5]
 80052d6:	88fb      	ldrh	r3, [r7, #6]
 80052d8:	4611      	mov	r1, r2
 80052da:	4618      	mov	r0, r3
 80052dc:	f005 fc28 	bl	800ab30 <MFX_IO_Read>
 80052e0:	4603      	mov	r3, r0
 80052e2:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80052e4:	793b      	ldrb	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d004      	beq.n	80052f4 <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 80052ea:	7bfa      	ldrb	r2, [r7, #15]
 80052ec:	7bbb      	ldrb	r3, [r7, #14]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	73fb      	strb	r3, [r7, #15]
 80052f2:	e008      	b.n	8005306 <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 80052f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052f8:	43db      	mvns	r3, r3
 80052fa:	b25a      	sxtb	r2, r3
 80052fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005300:	4013      	ands	r3, r2
 8005302:	b25b      	sxtb	r3, r3
 8005304:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 8005306:	7bfa      	ldrb	r2, [r7, #15]
 8005308:	7979      	ldrb	r1, [r7, #5]
 800530a:	88fb      	ldrh	r3, [r7, #6]
 800530c:	4618      	mov	r0, r3
 800530e:	f005 fbfb 	bl	800ab08 <MFX_IO_Write>
  }

  if (pin_8_15)
 8005312:	7b7b      	ldrb	r3, [r7, #13]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d022      	beq.n	800535e <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 8005318:	797b      	ldrb	r3, [r7, #5]
 800531a:	3301      	adds	r3, #1
 800531c:	b2da      	uxtb	r2, r3
 800531e:	88fb      	ldrh	r3, [r7, #6]
 8005320:	4611      	mov	r1, r2
 8005322:	4618      	mov	r0, r3
 8005324:	f005 fc04 	bl	800ab30 <MFX_IO_Read>
 8005328:	4603      	mov	r3, r0
 800532a:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 800532c:	793b      	ldrb	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d004      	beq.n	800533c <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 8005332:	7bfa      	ldrb	r2, [r7, #15]
 8005334:	7b7b      	ldrb	r3, [r7, #13]
 8005336:	4313      	orrs	r3, r2
 8005338:	73fb      	strb	r3, [r7, #15]
 800533a:	e008      	b.n	800534e <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 800533c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005340:	43db      	mvns	r3, r3
 8005342:	b25a      	sxtb	r2, r3
 8005344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005348:	4013      	ands	r3, r2
 800534a:	b25b      	sxtb	r3, r3
 800534c:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 800534e:	797b      	ldrb	r3, [r7, #5]
 8005350:	3301      	adds	r3, #1
 8005352:	b2d9      	uxtb	r1, r3
 8005354:	7bfa      	ldrb	r2, [r7, #15]
 8005356:	88fb      	ldrh	r3, [r7, #6]
 8005358:	4618      	mov	r0, r3
 800535a:	f005 fbd5 	bl	800ab08 <MFX_IO_Write>
  }

  if (pin_16_23)
 800535e:	7b3b      	ldrb	r3, [r7, #12]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d022      	beq.n	80053aa <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 8005364:	797b      	ldrb	r3, [r7, #5]
 8005366:	3302      	adds	r3, #2
 8005368:	b2da      	uxtb	r2, r3
 800536a:	88fb      	ldrh	r3, [r7, #6]
 800536c:	4611      	mov	r1, r2
 800536e:	4618      	mov	r0, r3
 8005370:	f005 fbde 	bl	800ab30 <MFX_IO_Read>
 8005374:	4603      	mov	r3, r0
 8005376:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8005378:	793b      	ldrb	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d004      	beq.n	8005388 <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 800537e:	7bfa      	ldrb	r2, [r7, #15]
 8005380:	7b3b      	ldrb	r3, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	73fb      	strb	r3, [r7, #15]
 8005386:	e008      	b.n	800539a <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 8005388:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800538c:	43db      	mvns	r3, r3
 800538e:	b25a      	sxtb	r2, r3
 8005390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005394:	4013      	ands	r3, r2
 8005396:	b25b      	sxtb	r3, r3
 8005398:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 800539a:	797b      	ldrb	r3, [r7, #5]
 800539c:	3302      	adds	r3, #2
 800539e:	b2d9      	uxtb	r1, r3
 80053a0:	7bfa      	ldrb	r2, [r7, #15]
 80053a2:	88fb      	ldrh	r3, [r7, #6]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f005 fbaf 	bl	800ab08 <MFX_IO_Write>
  }
}
 80053aa:	bf00      	nop
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b084      	sub	sp, #16
 80053b6:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80053b8:	f005 fcf0 	bl	800ad9c <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 80053bc:	2200      	movs	r2, #0
 80053be:	2100      	movs	r1, #0
 80053c0:	2010      	movs	r0, #16
 80053c2:	f000 f9e4 	bl	800578e <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 80053c6:	200a      	movs	r0, #10
 80053c8:	f005 fd0f 	bl	800adea <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 80053cc:	2200      	movs	r2, #0
 80053ce:	2100      	movs	r1, #0
 80053d0:	2001      	movs	r0, #1
 80053d2:	f000 f9dc 	bl	800578e <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 80053d6:	20c8      	movs	r0, #200	; 0xc8
 80053d8:	f005 fd07 	bl	800adea <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 80053dc:	2200      	movs	r2, #0
 80053de:	2100      	movs	r1, #0
 80053e0:	2011      	movs	r0, #17
 80053e2:	f000 f9d4 	bl	800578e <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 80053e6:	2078      	movs	r0, #120	; 0x78
 80053e8:	f005 fcff 	bl	800adea <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 80053ec:	2300      	movs	r3, #0
 80053ee:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80053f0:	463b      	mov	r3, r7
 80053f2:	2201      	movs	r2, #1
 80053f4:	4619      	mov	r1, r3
 80053f6:	2036      	movs	r0, #54	; 0x36
 80053f8:	f000 f9c9 	bl	800578e <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 80053fc:	2305      	movs	r3, #5
 80053fe:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8005400:	463b      	mov	r3, r7
 8005402:	2201      	movs	r2, #1
 8005404:	4619      	mov	r1, r3
 8005406:	203a      	movs	r0, #58	; 0x3a
 8005408:	f000 f9c1 	bl	800578e <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 800540c:	2200      	movs	r2, #0
 800540e:	2100      	movs	r1, #0
 8005410:	2021      	movs	r0, #33	; 0x21
 8005412:	f000 f9bc 	bl	800578e <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 8005416:	2300      	movs	r3, #0
 8005418:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 800541a:	2300      	movs	r3, #0
 800541c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 800541e:	2300      	movs	r3, #0
 8005420:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8005422:	23ef      	movs	r3, #239	; 0xef
 8005424:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8005426:	463b      	mov	r3, r7
 8005428:	2204      	movs	r2, #4
 800542a:	4619      	mov	r1, r3
 800542c:	202a      	movs	r0, #42	; 0x2a
 800542e:	f000 f9ae 	bl	800578e <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 8005432:	2300      	movs	r3, #0
 8005434:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8005436:	2300      	movs	r3, #0
 8005438:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 800543a:	2300      	movs	r3, #0
 800543c:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 800543e:	23ef      	movs	r3, #239	; 0xef
 8005440:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8005442:	463b      	mov	r3, r7
 8005444:	2204      	movs	r2, #4
 8005446:	4619      	mov	r1, r3
 8005448:	202b      	movs	r0, #43	; 0x2b
 800544a:	f000 f9a0 	bl	800578e <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 800544e:	230c      	movs	r3, #12
 8005450:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 8005452:	230c      	movs	r3, #12
 8005454:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8005456:	2300      	movs	r3, #0
 8005458:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 800545a:	2333      	movs	r3, #51	; 0x33
 800545c:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 800545e:	2333      	movs	r3, #51	; 0x33
 8005460:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8005462:	463b      	mov	r3, r7
 8005464:	2205      	movs	r2, #5
 8005466:	4619      	mov	r1, r3
 8005468:	20b2      	movs	r0, #178	; 0xb2
 800546a:	f000 f990 	bl	800578e <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 800546e:	2335      	movs	r3, #53	; 0x35
 8005470:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8005472:	463b      	mov	r3, r7
 8005474:	2201      	movs	r2, #1
 8005476:	4619      	mov	r1, r3
 8005478:	20b7      	movs	r0, #183	; 0xb7
 800547a:	f000 f988 	bl	800578e <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 800547e:	231f      	movs	r3, #31
 8005480:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8005482:	463b      	mov	r3, r7
 8005484:	2201      	movs	r2, #1
 8005486:	4619      	mov	r1, r3
 8005488:	20bb      	movs	r0, #187	; 0xbb
 800548a:	f000 f980 	bl	800578e <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 800548e:	232c      	movs	r3, #44	; 0x2c
 8005490:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8005492:	463b      	mov	r3, r7
 8005494:	2201      	movs	r2, #1
 8005496:	4619      	mov	r1, r3
 8005498:	20c0      	movs	r0, #192	; 0xc0
 800549a:	f000 f978 	bl	800578e <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 800549e:	2301      	movs	r3, #1
 80054a0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 80054a2:	23c3      	movs	r3, #195	; 0xc3
 80054a4:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 80054a6:	463b      	mov	r3, r7
 80054a8:	2202      	movs	r2, #2
 80054aa:	4619      	mov	r1, r3
 80054ac:	20c2      	movs	r0, #194	; 0xc2
 80054ae:	f000 f96e 	bl	800578e <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 80054b2:	2320      	movs	r3, #32
 80054b4:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 80054b6:	463b      	mov	r3, r7
 80054b8:	2201      	movs	r2, #1
 80054ba:	4619      	mov	r1, r3
 80054bc:	20c4      	movs	r0, #196	; 0xc4
 80054be:	f000 f966 	bl	800578e <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 80054c2:	230f      	movs	r3, #15
 80054c4:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 80054c6:	463b      	mov	r3, r7
 80054c8:	2201      	movs	r2, #1
 80054ca:	4619      	mov	r1, r3
 80054cc:	20c6      	movs	r0, #198	; 0xc6
 80054ce:	f000 f95e 	bl	800578e <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 80054d2:	23a4      	movs	r3, #164	; 0xa4
 80054d4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 80054d6:	23a1      	movs	r3, #161	; 0xa1
 80054d8:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 2); 
 80054da:	463b      	mov	r3, r7
 80054dc:	2202      	movs	r2, #2
 80054de:	4619      	mov	r1, r3
 80054e0:	20d0      	movs	r0, #208	; 0xd0
 80054e2:	f000 f954 	bl	800578e <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 80054e6:	23d0      	movs	r3, #208	; 0xd0
 80054e8:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 80054ea:	2308      	movs	r3, #8
 80054ec:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 80054ee:	2311      	movs	r3, #17
 80054f0:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 80054f2:	2308      	movs	r3, #8
 80054f4:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 80054f6:	230c      	movs	r3, #12
 80054f8:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 80054fa:	2315      	movs	r3, #21
 80054fc:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 80054fe:	2339      	movs	r3, #57	; 0x39
 8005500:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8005502:	2333      	movs	r3, #51	; 0x33
 8005504:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 8005506:	2350      	movs	r3, #80	; 0x50
 8005508:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 800550a:	2336      	movs	r3, #54	; 0x36
 800550c:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 800550e:	2313      	movs	r3, #19
 8005510:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8005512:	2314      	movs	r3, #20
 8005514:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8005516:	2329      	movs	r3, #41	; 0x29
 8005518:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 800551a:	232d      	movs	r3, #45	; 0x2d
 800551c:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 800551e:	463b      	mov	r3, r7
 8005520:	220e      	movs	r2, #14
 8005522:	4619      	mov	r1, r3
 8005524:	20e0      	movs	r0, #224	; 0xe0
 8005526:	f000 f932 	bl	800578e <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 800552a:	23d0      	movs	r3, #208	; 0xd0
 800552c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 800552e:	2308      	movs	r3, #8
 8005530:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 8005532:	2310      	movs	r3, #16
 8005534:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8005536:	2308      	movs	r3, #8
 8005538:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 800553a:	2306      	movs	r3, #6
 800553c:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 800553e:	2306      	movs	r3, #6
 8005540:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8005542:	2339      	movs	r3, #57	; 0x39
 8005544:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8005546:	2344      	movs	r3, #68	; 0x44
 8005548:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 800554a:	2351      	movs	r3, #81	; 0x51
 800554c:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 800554e:	230b      	movs	r3, #11
 8005550:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 8005552:	2316      	movs	r3, #22
 8005554:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8005556:	2314      	movs	r3, #20
 8005558:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 800555a:	232f      	movs	r3, #47	; 0x2f
 800555c:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 800555e:	2331      	movs	r3, #49	; 0x31
 8005560:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8005562:	463b      	mov	r3, r7
 8005564:	220e      	movs	r2, #14
 8005566:	4619      	mov	r1, r3
 8005568:	20e1      	movs	r0, #225	; 0xe1
 800556a:	f000 f910 	bl	800578e <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 800556e:	f000 f847 	bl	8005600 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 8005572:	2300      	movs	r3, #0
 8005574:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8005576:	463b      	mov	r3, r7
 8005578:	2201      	movs	r2, #1
 800557a:	4619      	mov	r1, r3
 800557c:	2035      	movs	r0, #53	; 0x35
 800557e:	f000 f906 	bl	800578e <ST7789H2_WriteReg>

}
 8005582:	bf00      	nop
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b084      	sub	sp, #16
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d102      	bne.n	800559e <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8005598:	2300      	movs	r3, #0
 800559a:	723b      	strb	r3, [r7, #8]
 800559c:	e025      	b.n	80055ea <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d120      	bne.n	80055e6 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 80055a4:	2300      	movs	r3, #0
 80055a6:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 80055a8:	2300      	movs	r3, #0
 80055aa:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 80055ac:	2301      	movs	r3, #1
 80055ae:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 80055b0:	23f0      	movs	r3, #240	; 0xf0
 80055b2:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 80055b4:	2300      	movs	r3, #0
 80055b6:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 80055b8:	2300      	movs	r3, #0
 80055ba:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 80055bc:	f107 0308 	add.w	r3, r7, #8
 80055c0:	2206      	movs	r2, #6
 80055c2:	4619      	mov	r1, r3
 80055c4:	2033      	movs	r0, #51	; 0x33
 80055c6:	f000 f8e2 	bl	800578e <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 80055ca:	2300      	movs	r3, #0
 80055cc:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 80055ce:	2350      	movs	r3, #80	; 0x50
 80055d0:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 80055d2:	f107 0308 	add.w	r3, r7, #8
 80055d6:	2202      	movs	r2, #2
 80055d8:	4619      	mov	r1, r3
 80055da:	2037      	movs	r0, #55	; 0x37
 80055dc:	f000 f8d7 	bl	800578e <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 80055e0:	23c0      	movs	r3, #192	; 0xc0
 80055e2:	723b      	strb	r3, [r7, #8]
 80055e4:	e001      	b.n	80055ea <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 80055e6:	2360      	movs	r3, #96	; 0x60
 80055e8:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80055ea:	f107 0308 	add.w	r3, r7, #8
 80055ee:	2201      	movs	r2, #1
 80055f0:	4619      	mov	r1, r3
 80055f2:	2036      	movs	r0, #54	; 0x36
 80055f4:	f000 f8cb 	bl	800578e <ST7789H2_WriteReg>
}
 80055f8:	bf00      	nop
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8005604:	2200      	movs	r2, #0
 8005606:	2100      	movs	r1, #0
 8005608:	2029      	movs	r0, #41	; 0x29
 800560a:	f000 f8c0 	bl	800578e <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 800560e:	2200      	movs	r2, #0
 8005610:	2100      	movs	r1, #0
 8005612:	2011      	movs	r0, #17
 8005614:	f000 f8bb 	bl	800578e <ST7789H2_WriteReg>
}
 8005618:	bf00      	nop
 800561a:	bd80      	pop	{r7, pc}

0800561c <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 8005622:	23fe      	movs	r3, #254	; 0xfe
 8005624:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8005626:	1d3b      	adds	r3, r7, #4
 8005628:	2201      	movs	r2, #1
 800562a:	4619      	mov	r1, r3
 800562c:	20bd      	movs	r0, #189	; 0xbd
 800562e:	f000 f8ae 	bl	800578e <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8005632:	2200      	movs	r2, #0
 8005634:	2100      	movs	r1, #0
 8005636:	2010      	movs	r0, #16
 8005638:	f000 f8a9 	bl	800578e <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 800563c:	200a      	movs	r0, #10
 800563e:	f005 fbd4 	bl	800adea <LCD_IO_Delay>
}
 8005642:	bf00      	nop
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 800564a:	b480      	push	{r7}
 800564c:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 800564e:	23f0      	movs	r3, #240	; 0xf0
}
 8005650:	4618      	mov	r0, r3
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 800565a:	b480      	push	{r7}
 800565c:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 800565e:	23f0      	movs	r3, #240	; 0xf0
}
 8005660:	4618      	mov	r0, r3
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800566e:	f005 fb95 	bl	800ad9c <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 8005672:	2004      	movs	r0, #4
 8005674:	f000 f8ae 	bl	80057d4 <ST7789H2_ReadReg>
 8005678:	4603      	mov	r3, r0
 800567a:	b29b      	uxth	r3, r3
}
 800567c:	4618      	mov	r0, r3
 800567e:	bd80      	pop	{r7, pc}

08005680 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	460a      	mov	r2, r1
 800568a:	80fb      	strh	r3, [r7, #6]
 800568c:	4613      	mov	r3, r2
 800568e:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8005690:	2300      	movs	r3, #0
 8005692:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8005694:	88fb      	ldrh	r3, [r7, #6]
 8005696:	b2db      	uxtb	r3, r3
 8005698:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 800569a:	2300      	movs	r3, #0
 800569c:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 800569e:	88fb      	ldrh	r3, [r7, #6]
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	3b11      	subs	r3, #17
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 80056a8:	f107 030c 	add.w	r3, r7, #12
 80056ac:	2204      	movs	r2, #4
 80056ae:	4619      	mov	r1, r3
 80056b0:	202a      	movs	r0, #42	; 0x2a
 80056b2:	f000 f86c 	bl	800578e <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 80056b6:	2300      	movs	r3, #0
 80056b8:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 80056ba:	88bb      	ldrh	r3, [r7, #4]
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 80056c0:	2300      	movs	r3, #0
 80056c2:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 80056c4:	88bb      	ldrh	r3, [r7, #4]
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	3b11      	subs	r3, #17
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 80056ce:	f107 030c 	add.w	r3, r7, #12
 80056d2:	2204      	movs	r2, #4
 80056d4:	4619      	mov	r1, r3
 80056d6:	202b      	movs	r0, #43	; 0x2b
 80056d8:	f000 f859 	bl	800578e <ST7789H2_WriteReg>
}
 80056dc:	bf00      	nop
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	4603      	mov	r3, r0
 80056ec:	80fb      	strh	r3, [r7, #6]
 80056ee:	460b      	mov	r3, r1
 80056f0:	80bb      	strh	r3, [r7, #4]
 80056f2:	4613      	mov	r3, r2
 80056f4:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80056f6:	88ba      	ldrh	r2, [r7, #4]
 80056f8:	88fb      	ldrh	r3, [r7, #6]
 80056fa:	4611      	mov	r1, r2
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7ff ffbf 	bl	8005680 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8005702:	2200      	movs	r2, #0
 8005704:	2100      	movs	r1, #0
 8005706:	202c      	movs	r0, #44	; 0x2c
 8005708:	f000 f841 	bl	800578e <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 800570c:	887b      	ldrh	r3, [r7, #2]
 800570e:	4618      	mov	r0, r3
 8005710:	f005 fb4a 	bl	800ada8 <LCD_IO_WriteData>
}
 8005714:	bf00      	nop
 8005716:	3708      	adds	r7, #8
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	4603      	mov	r3, r0
 8005724:	460a      	mov	r2, r1
 8005726:	80fb      	strh	r3, [r7, #6]
 8005728:	4613      	mov	r3, r2
 800572a:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 800572c:	88ba      	ldrh	r2, [r7, #4]
 800572e:	88fb      	ldrh	r3, [r7, #6]
 8005730:	4611      	mov	r1, r2
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff ffa4 	bl	8005680 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8005738:	88ba      	ldrh	r2, [r7, #4]
 800573a:	88fb      	ldrh	r3, [r7, #6]
 800573c:	4611      	mov	r1, r2
 800573e:	4618      	mov	r0, r3
 8005740:	f000 f9c0 	bl	8005ac4 <ST7789H2_ReadPixel_rgb888>
 8005744:	4603      	mov	r3, r0
 8005746:	461a      	mov	r2, r3
 8005748:	733a      	strb	r2, [r7, #12]
 800574a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800574e:	737a      	strb	r2, [r7, #13]
 8005750:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005754:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8005756:	7b3b      	ldrb	r3, [r7, #12]
 8005758:	08db      	lsrs	r3, r3, #3
 800575a:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 800575c:	7b7b      	ldrb	r3, [r7, #13]
 800575e:	089b      	lsrs	r3, r3, #2
 8005760:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 8005762:	7bbb      	ldrb	r3, [r7, #14]
 8005764:	08db      	lsrs	r3, r3, #3
 8005766:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8005768:	7dfb      	ldrb	r3, [r7, #23]
 800576a:	b29b      	uxth	r3, r3
 800576c:	02db      	lsls	r3, r3, #11
 800576e:	b29a      	uxth	r2, r3
 8005770:	7dbb      	ldrb	r3, [r7, #22]
 8005772:	b29b      	uxth	r3, r3
 8005774:	015b      	lsls	r3, r3, #5
 8005776:	b29b      	uxth	r3, r3
 8005778:	4413      	add	r3, r2
 800577a:	b29a      	uxth	r2, r3
 800577c:	7d7b      	ldrb	r3, [r7, #21]
 800577e:	b29b      	uxth	r3, r3
 8005780:	4413      	add	r3, r2
 8005782:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8005784:	8a7b      	ldrh	r3, [r7, #18]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b084      	sub	sp, #16
 8005792:	af00      	add	r7, sp, #0
 8005794:	4603      	mov	r3, r0
 8005796:	6039      	str	r1, [r7, #0]
 8005798:	71fb      	strb	r3, [r7, #7]
 800579a:	4613      	mov	r3, r2
 800579c:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f005 fb0e 	bl	800adc2 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 80057a6:	2300      	movs	r3, #0
 80057a8:	73fb      	strb	r3, [r7, #15]
 80057aa:	e00a      	b.n	80057c2 <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	4413      	add	r3, r2
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	4618      	mov	r0, r3
 80057b8:	f005 faf6 	bl	800ada8 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
 80057be:	3301      	adds	r3, #1
 80057c0:	73fb      	strb	r3, [r7, #15]
 80057c2:	7bfa      	ldrb	r2, [r7, #15]
 80057c4:	79bb      	ldrb	r3, [r7, #6]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d3f0      	bcc.n	80057ac <ST7789H2_WriteReg+0x1e>
  }
}
 80057ca:	bf00      	nop
 80057cc:	bf00      	nop
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	4603      	mov	r3, r0
 80057dc:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 80057de:	79fb      	ldrb	r3, [r7, #7]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f005 faee 	bl	800adc2 <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 80057e6:	f005 faf9 	bl	800addc <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 80057ea:	f005 faf7 	bl	800addc <LCD_IO_ReadData>
 80057ee:	4603      	mov	r3, r0
 80057f0:	b2db      	uxtb	r3, r3
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
	...

080057fc <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80057fc:	b490      	push	{r4, r7}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	4604      	mov	r4, r0
 8005804:	4608      	mov	r0, r1
 8005806:	4611      	mov	r1, r2
 8005808:	461a      	mov	r2, r3
 800580a:	4623      	mov	r3, r4
 800580c:	80fb      	strh	r3, [r7, #6]
 800580e:	4603      	mov	r3, r0
 8005810:	80bb      	strh	r3, [r7, #4]
 8005812:	460b      	mov	r3, r1
 8005814:	807b      	strh	r3, [r7, #2]
 8005816:	4613      	mov	r3, r2
 8005818:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 800581a:	88fb      	ldrh	r3, [r7, #6]
 800581c:	2bef      	cmp	r3, #239	; 0xef
 800581e:	d803      	bhi.n	8005828 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8005820:	4a1b      	ldr	r2, [pc, #108]	; (8005890 <ST7789H2_SetDisplayWindow+0x94>)
 8005822:	88fb      	ldrh	r3, [r7, #6]
 8005824:	8013      	strh	r3, [r2, #0]
 8005826:	e002      	b.n	800582e <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8005828:	4b19      	ldr	r3, [pc, #100]	; (8005890 <ST7789H2_SetDisplayWindow+0x94>)
 800582a:	2200      	movs	r2, #0
 800582c:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 800582e:	88bb      	ldrh	r3, [r7, #4]
 8005830:	2bef      	cmp	r3, #239	; 0xef
 8005832:	d803      	bhi.n	800583c <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8005834:	4a17      	ldr	r2, [pc, #92]	; (8005894 <ST7789H2_SetDisplayWindow+0x98>)
 8005836:	88bb      	ldrh	r3, [r7, #4]
 8005838:	8013      	strh	r3, [r2, #0]
 800583a:	e002      	b.n	8005842 <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 800583c:	4b15      	ldr	r3, [pc, #84]	; (8005894 <ST7789H2_SetDisplayWindow+0x98>)
 800583e:	2200      	movs	r2, #0
 8005840:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 8005842:	887a      	ldrh	r2, [r7, #2]
 8005844:	88fb      	ldrh	r3, [r7, #6]
 8005846:	4413      	add	r3, r2
 8005848:	2bf0      	cmp	r3, #240	; 0xf0
 800584a:	dc08      	bgt.n	800585e <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 800584c:	887a      	ldrh	r2, [r7, #2]
 800584e:	88fb      	ldrh	r3, [r7, #6]
 8005850:	4413      	add	r3, r2
 8005852:	b29b      	uxth	r3, r3
 8005854:	3b01      	subs	r3, #1
 8005856:	b29a      	uxth	r2, r3
 8005858:	4b0f      	ldr	r3, [pc, #60]	; (8005898 <ST7789H2_SetDisplayWindow+0x9c>)
 800585a:	801a      	strh	r2, [r3, #0]
 800585c:	e002      	b.n	8005864 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 800585e:	4b0e      	ldr	r3, [pc, #56]	; (8005898 <ST7789H2_SetDisplayWindow+0x9c>)
 8005860:	22ef      	movs	r2, #239	; 0xef
 8005862:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8005864:	883a      	ldrh	r2, [r7, #0]
 8005866:	88bb      	ldrh	r3, [r7, #4]
 8005868:	4413      	add	r3, r2
 800586a:	2bf0      	cmp	r3, #240	; 0xf0
 800586c:	dc08      	bgt.n	8005880 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 800586e:	883a      	ldrh	r2, [r7, #0]
 8005870:	88bb      	ldrh	r3, [r7, #4]
 8005872:	4413      	add	r3, r2
 8005874:	b29b      	uxth	r3, r3
 8005876:	3b01      	subs	r3, #1
 8005878:	b29a      	uxth	r2, r3
 800587a:	4b08      	ldr	r3, [pc, #32]	; (800589c <ST7789H2_SetDisplayWindow+0xa0>)
 800587c:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 800587e:	e002      	b.n	8005886 <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8005880:	4b06      	ldr	r3, [pc, #24]	; (800589c <ST7789H2_SetDisplayWindow+0xa0>)
 8005882:	22ef      	movs	r2, #239	; 0xef
 8005884:	801a      	strh	r2, [r3, #0]
}
 8005886:	bf00      	nop
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bc90      	pop	{r4, r7}
 800588e:	4770      	bx	lr
 8005890:	200019fc 	.word	0x200019fc
 8005894:	200019fe 	.word	0x200019fe
 8005898:	2000027c 	.word	0x2000027c
 800589c:	2000027e 	.word	0x2000027e

080058a0 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80058a0:	b590      	push	{r4, r7, lr}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	4604      	mov	r4, r0
 80058a8:	4608      	mov	r0, r1
 80058aa:	4611      	mov	r1, r2
 80058ac:	461a      	mov	r2, r3
 80058ae:	4623      	mov	r3, r4
 80058b0:	80fb      	strh	r3, [r7, #6]
 80058b2:	4603      	mov	r3, r0
 80058b4:	80bb      	strh	r3, [r7, #4]
 80058b6:	460b      	mov	r3, r1
 80058b8:	807b      	strh	r3, [r7, #2]
 80058ba:	4613      	mov	r3, r2
 80058bc:	803b      	strh	r3, [r7, #0]
  uint16_t counter;
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 80058be:	887a      	ldrh	r2, [r7, #2]
 80058c0:	88bb      	ldrh	r3, [r7, #4]
 80058c2:	4611      	mov	r1, r2
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff fedb 	bl	8005680 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80058ca:	2200      	movs	r2, #0
 80058cc:	2100      	movs	r1, #0
 80058ce:	202c      	movs	r0, #44	; 0x2c
 80058d0:	f7ff ff5d 	bl	800578e <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 80058d4:	2300      	movs	r3, #0
 80058d6:	81fb      	strh	r3, [r7, #14]
 80058d8:	e006      	b.n	80058e8 <ST7789H2_DrawHLine+0x48>
  {
    LCD_IO_WriteData(RGBCode);
 80058da:	88fb      	ldrh	r3, [r7, #6]
 80058dc:	4618      	mov	r0, r3
 80058de:	f005 fa63 	bl	800ada8 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 80058e2:	89fb      	ldrh	r3, [r7, #14]
 80058e4:	3301      	adds	r3, #1
 80058e6:	81fb      	strh	r3, [r7, #14]
 80058e8:	89fa      	ldrh	r2, [r7, #14]
 80058ea:	883b      	ldrh	r3, [r7, #0]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d3f4      	bcc.n	80058da <ST7789H2_DrawHLine+0x3a>
  }  
}
 80058f0:	bf00      	nop
 80058f2:	bf00      	nop
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd90      	pop	{r4, r7, pc}

080058fa <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80058fa:	b590      	push	{r4, r7, lr}
 80058fc:	b085      	sub	sp, #20
 80058fe:	af00      	add	r7, sp, #0
 8005900:	4604      	mov	r4, r0
 8005902:	4608      	mov	r0, r1
 8005904:	4611      	mov	r1, r2
 8005906:	461a      	mov	r2, r3
 8005908:	4623      	mov	r3, r4
 800590a:	80fb      	strh	r3, [r7, #6]
 800590c:	4603      	mov	r3, r0
 800590e:	80bb      	strh	r3, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	807b      	strh	r3, [r7, #2]
 8005914:	4613      	mov	r3, r2
 8005916:	803b      	strh	r3, [r7, #0]
  uint16_t counter;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8005918:	887a      	ldrh	r2, [r7, #2]
 800591a:	88bb      	ldrh	r3, [r7, #4]
 800591c:	4611      	mov	r1, r2
 800591e:	4618      	mov	r0, r3
 8005920:	f7ff feae 	bl	8005680 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8005924:	2200      	movs	r2, #0
 8005926:	2100      	movs	r1, #0
 8005928:	202c      	movs	r0, #44	; 0x2c
 800592a:	f7ff ff30 	bl	800578e <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 800592e:	2300      	movs	r3, #0
 8005930:	81fb      	strh	r3, [r7, #14]
 8005932:	e00b      	b.n	800594c <ST7789H2_DrawVLine+0x52>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8005934:	887a      	ldrh	r2, [r7, #2]
 8005936:	89fb      	ldrh	r3, [r7, #14]
 8005938:	4413      	add	r3, r2
 800593a:	b299      	uxth	r1, r3
 800593c:	88fa      	ldrh	r2, [r7, #6]
 800593e:	88bb      	ldrh	r3, [r7, #4]
 8005940:	4618      	mov	r0, r3
 8005942:	f7ff fecf 	bl	80056e4 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8005946:	89fb      	ldrh	r3, [r7, #14]
 8005948:	3301      	adds	r3, #1
 800594a:	81fb      	strh	r3, [r7, #14]
 800594c:	89fa      	ldrh	r2, [r7, #14]
 800594e:	883b      	ldrh	r3, [r7, #0]
 8005950:	429a      	cmp	r2, r3
 8005952:	d3ef      	bcc.n	8005934 <ST7789H2_DrawVLine+0x3a>
  }
}
 8005954:	bf00      	nop
 8005956:	bf00      	nop
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	bd90      	pop	{r4, r7, pc}
	...

08005960 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b088      	sub	sp, #32
 8005964:	af00      	add	r7, sp, #0
 8005966:	4603      	mov	r3, r0
 8005968:	603a      	str	r2, [r7, #0]
 800596a:	80fb      	strh	r3, [r7, #6]
 800596c:	460b      	mov	r3, r1
 800596e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8005970:	2300      	movs	r3, #0
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	2300      	movs	r3, #0
 8005976:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8005978:	2300      	movs	r3, #0
 800597a:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 800597c:	4b30      	ldr	r3, [pc, #192]	; (8005a40 <ST7789H2_DrawBitmap+0xe0>)
 800597e:	881a      	ldrh	r2, [r3, #0]
 8005980:	4b30      	ldr	r3, [pc, #192]	; (8005a44 <ST7789H2_DrawBitmap+0xe4>)
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	b29b      	uxth	r3, r3
 8005988:	3301      	adds	r3, #1
 800598a:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 800598c:	4b2e      	ldr	r3, [pc, #184]	; (8005a48 <ST7789H2_DrawBitmap+0xe8>)
 800598e:	881a      	ldrh	r2, [r3, #0]
 8005990:	4b2e      	ldr	r3, [pc, #184]	; (8005a4c <ST7789H2_DrawBitmap+0xec>)
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	b29b      	uxth	r3, r3
 8005998:	3301      	adds	r3, #1
 800599a:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	3302      	adds	r3, #2
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	3304      	adds	r3, #4
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	041b      	lsls	r3, r3, #16
 80059b0:	461a      	mov	r2, r3
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	330a      	adds	r3, #10
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	b29b      	uxth	r3, r3
 80059c0:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	330c      	adds	r3, #12
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	041b      	lsls	r3, r3, #16
 80059cc:	461a      	mov	r2, r3
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	085b      	lsrs	r3, r3, #1
 80059dc:	613b      	str	r3, [r7, #16]
  pbmp += index;
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	4413      	add	r3, r2
 80059e4:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 80059e6:	88ba      	ldrh	r2, [r7, #4]
 80059e8:	89bb      	ldrh	r3, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	61fb      	str	r3, [r7, #28]
 80059ee:	e01d      	b.n	8005a2c <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	3b01      	subs	r3, #1
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	88fb      	ldrh	r3, [r7, #6]
 80059fa:	4611      	mov	r1, r2
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7ff fe3f 	bl	8005680 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	3b01      	subs	r3, #1
 8005a08:	b299      	uxth	r1, r3
 8005a0a:	89fb      	ldrh	r3, [r7, #14]
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	fb02 f303 	mul.w	r3, r2, r3
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	4413      	add	r3, r2
 8005a18:	89fa      	ldrh	r2, [r7, #14]
 8005a1a:	88f8      	ldrh	r0, [r7, #6]
 8005a1c:	f000 f89c 	bl	8005b58 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	3301      	adds	r3, #1
 8005a24:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	61fb      	str	r3, [r7, #28]
 8005a2c:	88bb      	ldrh	r3, [r7, #4]
 8005a2e:	69fa      	ldr	r2, [r7, #28]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d8dd      	bhi.n	80059f0 <ST7789H2_DrawBitmap+0x90>
  }
}
 8005a34:	bf00      	nop
 8005a36:	bf00      	nop
 8005a38:	3720      	adds	r7, #32
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	2000027c 	.word	0x2000027c
 8005a44:	200019fc 	.word	0x200019fc
 8005a48:	2000027e 	.word	0x2000027e
 8005a4c:	200019fe 	.word	0x200019fe

08005a50 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8005a50:	b590      	push	{r4, r7, lr}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	4604      	mov	r4, r0
 8005a58:	4608      	mov	r0, r1
 8005a5a:	4611      	mov	r1, r2
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	4623      	mov	r3, r4
 8005a60:	80fb      	strh	r3, [r7, #6]
 8005a62:	4603      	mov	r3, r0
 8005a64:	80bb      	strh	r3, [r7, #4]
 8005a66:	460b      	mov	r3, r1
 8005a68:	807b      	strh	r3, [r7, #2]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8005a72:	88bb      	ldrh	r3, [r7, #4]
 8005a74:	60fb      	str	r3, [r7, #12]
 8005a76:	e019      	b.n	8005aac <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	88fb      	ldrh	r3, [r7, #6]
 8005a7e:	4611      	mov	r1, r2
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7ff fdfd 	bl	8005680 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	b299      	uxth	r1, r3
 8005a8a:	887b      	ldrh	r3, [r7, #2]
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	fb02 f303 	mul.w	r3, r2, r3
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	6a3a      	ldr	r2, [r7, #32]
 8005a96:	4413      	add	r3, r2
 8005a98:	887a      	ldrh	r2, [r7, #2]
 8005a9a:	88f8      	ldrh	r0, [r7, #6]
 8005a9c:	f000 f85c 	bl	8005b58 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	88ba      	ldrh	r2, [r7, #4]
 8005aae:	883b      	ldrh	r3, [r7, #0]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d3de      	bcc.n	8005a78 <ST7789H2_DrawRGBImage+0x28>
  }
}
 8005aba:	bf00      	nop
 8005abc:	bf00      	nop
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd90      	pop	{r4, r7, pc}

08005ac4 <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	4603      	mov	r3, r0
 8005acc:	460a      	mov	r2, r1
 8005ace:	80fb      	strh	r3, [r7, #6]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8005ad4:	88ba      	ldrh	r2, [r7, #4]
 8005ad6:	88fb      	ldrh	r3, [r7, #6]
 8005ad8:	4611      	mov	r1, r2
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7ff fdd0 	bl	8005680 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	202e      	movs	r0, #46	; 0x2e
 8005ae6:	f7ff fe52 	bl	800578e <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 8005aea:	f005 f977 	bl	800addc <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8005aee:	f005 f975 	bl	800addc <LCD_IO_ReadData>
 8005af2:	4603      	mov	r3, r0
 8005af4:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8005af6:	f005 f971 	bl	800addc <LCD_IO_ReadData>
 8005afa:	4603      	mov	r3, r0
 8005afc:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8005afe:	8afb      	ldrh	r3, [r7, #22]
 8005b00:	121b      	asrs	r3, r3, #8
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	f023 0303 	bic.w	r3, r3, #3
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8005b0c:	8afb      	ldrh	r3, [r7, #22]
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	f023 0303 	bic.w	r3, r3, #3
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8005b18:	8abb      	ldrh	r3, [r7, #20]
 8005b1a:	121b      	asrs	r3, r3, #8
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	f023 0303 	bic.w	r3, r3, #3
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8005b26:	f107 0310 	add.w	r3, r7, #16
 8005b2a:	f107 020c 	add.w	r2, r7, #12
 8005b2e:	6812      	ldr	r2, [r2, #0]
 8005b30:	4611      	mov	r1, r2
 8005b32:	8019      	strh	r1, [r3, #0]
 8005b34:	3302      	adds	r3, #2
 8005b36:	0c12      	lsrs	r2, r2, #16
 8005b38:	701a      	strb	r2, [r3, #0]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	7c3a      	ldrb	r2, [r7, #16]
 8005b3e:	f362 0307 	bfi	r3, r2, #0, #8
 8005b42:	7c7a      	ldrb	r2, [r7, #17]
 8005b44:	f362 230f 	bfi	r3, r2, #8, #8
 8005b48:	7cba      	ldrb	r2, [r7, #18]
 8005b4a:	f362 4317 	bfi	r3, r2, #16, #8
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
	...

08005b58 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b088      	sub	sp, #32
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	607b      	str	r3, [r7, #4]
 8005b60:	4603      	mov	r3, r0
 8005b62:	81fb      	strh	r3, [r7, #14]
 8005b64:	460b      	mov	r3, r1
 8005b66:	81bb      	strh	r3, [r7, #12]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8005b74:	2200      	movs	r2, #0
 8005b76:	2100      	movs	r1, #0
 8005b78:	202c      	movs	r0, #44	; 0x2c
 8005b7a:	f7ff fe08 	bl	800578e <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8005b7e:	89fb      	ldrh	r3, [r7, #14]
 8005b80:	61bb      	str	r3, [r7, #24]
 8005b82:	e029      	b.n	8005bd8 <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8005b84:	4b1a      	ldr	r3, [pc, #104]	; (8005bf0 <ST7789H2_DrawRGBHLine+0x98>)
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d320      	bcc.n	8005bd2 <ST7789H2_DrawRGBHLine+0x7a>
 8005b90:	4b18      	ldr	r3, [pc, #96]	; (8005bf4 <ST7789H2_DrawRGBHLine+0x9c>)
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	89ba      	ldrh	r2, [r7, #12]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d31b      	bcc.n	8005bd2 <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8005b9a:	4b17      	ldr	r3, [pc, #92]	; (8005bf8 <ST7789H2_DrawRGBHLine+0xa0>)
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d815      	bhi.n	8005bd2 <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8005ba6:	4b15      	ldr	r3, [pc, #84]	; (8005bfc <ST7789H2_DrawRGBHLine+0xa4>)
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	89ba      	ldrh	r2, [r7, #12]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d810      	bhi.n	8005bd2 <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8005bb0:	897a      	ldrh	r2, [r7, #10]
 8005bb2:	89fb      	ldrh	r3, [r7, #14]
 8005bb4:	441a      	add	r2, r3
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d007      	beq.n	8005bcc <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f005 f8ee 	bl	800ada8 <LCD_IO_WriteData>
      }      
      i++;
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	61bb      	str	r3, [r7, #24]
 8005bd8:	897a      	ldrh	r2, [r7, #10]
 8005bda:	89fb      	ldrh	r3, [r7, #14]
 8005bdc:	4413      	add	r3, r2
 8005bde:	461a      	mov	r2, r3
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d3ce      	bcc.n	8005b84 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 8005be6:	bf00      	nop
 8005be8:	bf00      	nop
 8005bea:	3720      	adds	r7, #32
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	200019fc 	.word	0x200019fc
 8005bf4:	200019fe 	.word	0x200019fe
 8005bf8:	2000027c 	.word	0x2000027c
 8005bfc:	2000027e 	.word	0x2000027e

08005c00 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8005c0e:	6839      	ldr	r1, [r7, #0]
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f001 fcc0 	bl	8007596 <VL53L0X_get_offset_calibration_data_micro_meter>
 8005c16:	4603      	mov	r3, r0
 8005c18:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8005c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
	...

08005c28 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8005c28:	b5b0      	push	{r4, r5, r7, lr}
 8005c2a:	b096      	sub	sp, #88	; 0x58
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c30:	2300      	movs	r3, #0
 8005c32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8005c36:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d107      	bne.n	8005c4e <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8005c3e:	2200      	movs	r2, #0
 8005c40:	2188      	movs	r1, #136	; 0x88
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7fe f84c 	bl	8003ce0 <VL53L0X_WrByte>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c5c:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005c66:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a9e      	ldr	r2, [pc, #632]	; (8005ee8 <VL53L0X_DataInit+0x2c0>)
 8005c6e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a9d      	ldr	r2, [pc, #628]	; (8005eec <VL53L0X_DataInit+0x2c4>)
 8005c76:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005c80:	f107 0310 	add.w	r3, r7, #16
 8005c84:	4619      	mov	r1, r3
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fab4 	bl	80061f4 <VL53L0X_GetDeviceParameters>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8005c92:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d112      	bne.n	8005cc0 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f103 0410 	add.w	r4, r3, #16
 8005ca8:	f107 0510 	add.w	r5, r7, #16
 8005cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cb8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005cbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2264      	movs	r2, #100	; 0x64
 8005cc4:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f44f 7261 	mov.w	r2, #900	; 0x384
 8005cce:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005cd8:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8005ce2:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005cee:	2201      	movs	r2, #1
 8005cf0:	2180      	movs	r1, #128	; 0x80
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7fd fff4 	bl	8003ce0 <VL53L0X_WrByte>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d00:	4313      	orrs	r3, r2
 8005d02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005d06:	2201      	movs	r2, #1
 8005d08:	21ff      	movs	r1, #255	; 0xff
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7fd ffe8 	bl	8003ce0 <VL53L0X_WrByte>
 8005d10:	4603      	mov	r3, r0
 8005d12:	461a      	mov	r2, r3
 8005d14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005d1e:	2200      	movs	r2, #0
 8005d20:	2100      	movs	r1, #0
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7fd ffdc 	bl	8003ce0 <VL53L0X_WrByte>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d30:	4313      	orrs	r3, r2
 8005d32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8005d36:	f107 030f 	add.w	r3, r7, #15
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	2191      	movs	r1, #145	; 0x91
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7fe f882 	bl	8003e48 <VL53L0X_RdByte>
 8005d44:	4603      	mov	r3, r0
 8005d46:	461a      	mov	r2, r3
 8005d48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8005d52:	7bfa      	ldrb	r2, [r7, #15]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7fd ffbe 	bl	8003ce0 <VL53L0X_WrByte>
 8005d64:	4603      	mov	r3, r0
 8005d66:	461a      	mov	r2, r3
 8005d68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005d72:	2200      	movs	r2, #0
 8005d74:	21ff      	movs	r1, #255	; 0xff
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7fd ffb2 	bl	8003ce0 <VL53L0X_WrByte>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d84:	4313      	orrs	r3, r2
 8005d86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	2180      	movs	r1, #128	; 0x80
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7fd ffa6 	bl	8003ce0 <VL53L0X_WrByte>
 8005d94:	4603      	mov	r3, r0
 8005d96:	461a      	mov	r2, r3
 8005d98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005da2:	2300      	movs	r3, #0
 8005da4:	653b      	str	r3, [r7, #80]	; 0x50
 8005da6:	e014      	b.n	8005dd2 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8005da8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d114      	bne.n	8005dda <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8005db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	2201      	movs	r2, #1
 8005db6:	4619      	mov	r1, r3
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fd43 	bl	8006844 <VL53L0X_SetLimitCheckEnable>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dce:	3301      	adds	r3, #1
 8005dd0:	653b      	str	r3, [r7, #80]	; 0x50
 8005dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dd4:	2b05      	cmp	r3, #5
 8005dd6:	dde7      	ble.n	8005da8 <VL53L0X_DataInit+0x180>
 8005dd8:	e000      	b.n	8005ddc <VL53L0X_DataInit+0x1b4>
		else
			break;
 8005dda:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8005ddc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d107      	bne.n	8005df4 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005de4:	2200      	movs	r2, #0
 8005de6:	2102      	movs	r1, #2
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fd2b 	bl	8006844 <VL53L0X_SetLimitCheckEnable>
 8005dee:	4603      	mov	r3, r0
 8005df0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005df4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d107      	bne.n	8005e0c <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2103      	movs	r1, #3
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fd1f 	bl	8006844 <VL53L0X_SetLimitCheckEnable>
 8005e06:	4603      	mov	r3, r0
 8005e08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005e0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d107      	bne.n	8005e24 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005e14:	2200      	movs	r2, #0
 8005e16:	2104      	movs	r1, #4
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fd13 	bl	8006844 <VL53L0X_SetLimitCheckEnable>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005e24:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d107      	bne.n	8005e3c <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2105      	movs	r1, #5
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 fd07 	bl	8006844 <VL53L0X_SetLimitCheckEnable>
 8005e36:	4603      	mov	r3, r0
 8005e38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8005e3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d108      	bne.n	8005e56 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005e44:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8005e48:	2100      	movs	r1, #0
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fdaa 	bl	80069a4 <VL53L0X_SetLimitCheckValue>
 8005e50:	4603      	mov	r3, r0
 8005e52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005e56:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d108      	bne.n	8005e70 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005e5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005e62:	2101      	movs	r1, #1
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fd9d 	bl	80069a4 <VL53L0X_SetLimitCheckValue>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005e70:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d108      	bne.n	8005e8a <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005e78:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8005e7c:	2102      	movs	r1, #2
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fd90 	bl	80069a4 <VL53L0X_SetLimitCheckValue>
 8005e84:	4603      	mov	r3, r0
 8005e86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005e8a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d107      	bne.n	8005ea2 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005e92:	2200      	movs	r2, #0
 8005e94:	2103      	movs	r1, #3
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fd84 	bl	80069a4 <VL53L0X_SetLimitCheckValue>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005ea2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10f      	bne.n	8005eca <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	22ff      	movs	r2, #255	; 0xff
 8005eae:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005eb2:	22ff      	movs	r2, #255	; 0xff
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7fd ff12 	bl	8003ce0 <VL53L0X_WrByte>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8005eca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d103      	bne.n	8005eda <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8005eda:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3758      	adds	r7, #88	; 0x58
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	00016b85 	.word	0x00016b85
 8005eec:	000970a4 	.word	0x000970a4

08005ef0 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8005ef0:	b5b0      	push	{r4, r5, r7, lr}
 8005ef2:	b09e      	sub	sp, #120	; 0x78
 8005ef4:	af02      	add	r7, sp, #8
 8005ef6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8005efe:	f107 031c 	add.w	r3, r7, #28
 8005f02:	2240      	movs	r2, #64	; 0x40
 8005f04:	2100      	movs	r1, #0
 8005f06:	4618      	mov	r0, r3
 8005f08:	f014 fb0e 	bl	801a528 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8005f10:	2300      	movs	r3, #0
 8005f12:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8005f14:	2300      	movs	r3, #0
 8005f16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8005f26:	2300      	movs	r3, #0
 8005f28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f002 fa74 	bl	800841c <VL53L0X_get_info_from_device>
 8005f34:	4603      	mov	r3, r0
 8005f36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8005f40:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8005f48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8005f4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d80d      	bhi.n	8005f70 <VL53L0X_StaticInit+0x80>
 8005f54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d102      	bne.n	8005f62 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8005f5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f5e:	2b20      	cmp	r3, #32
 8005f60:	d806      	bhi.n	8005f70 <VL53L0X_StaticInit+0x80>
 8005f62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10e      	bne.n	8005f88 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8005f6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f6c:	2b0c      	cmp	r3, #12
 8005f6e:	d90b      	bls.n	8005f88 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8005f70:	f107 0218 	add.w	r2, r7, #24
 8005f74:	f107 0314 	add.w	r3, r7, #20
 8005f78:	4619      	mov	r1, r3
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f001 fd06 	bl	800798c <VL53L0X_perform_ref_spad_management>
 8005f80:	4603      	mov	r3, r0
 8005f82:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8005f86:	e009      	b.n	8005f9c <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8005f88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f001 ff07 	bl	8007da4 <VL53L0X_set_reference_spads>
 8005f96:	4603      	mov	r3, r0
 8005f98:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8005f9c:	4b94      	ldr	r3, [pc, #592]	; (80061f0 <VL53L0X_StaticInit+0x300>)
 8005f9e:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8005fa0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10f      	bne.n	8005fc8 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8005fae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8005fb2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d104      	bne.n	8005fc4 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005fc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fc2:	e001      	b.n	8005fc8 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8005fc4:	4b8a      	ldr	r3, [pc, #552]	; (80061f0 <VL53L0X_StaticInit+0x300>)
 8005fc6:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8005fc8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d106      	bne.n	8005fde <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8005fd0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f003 fb40 	bl	8009658 <VL53L0X_load_tuning_settings>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8005fde:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10a      	bne.n	8005ffc <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	2304      	movs	r3, #4
 8005fec:	2200      	movs	r2, #0
 8005fee:	2100      	movs	r1, #0
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f001 f8ff 	bl	80071f4 <VL53L0X_SetGpioConfig>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005ffc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006000:	2b00      	cmp	r3, #0
 8006002:	d121      	bne.n	8006048 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006004:	2201      	movs	r2, #1
 8006006:	21ff      	movs	r1, #255	; 0xff
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7fd fe69 	bl	8003ce0 <VL53L0X_WrByte>
 800600e:	4603      	mov	r3, r0
 8006010:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8006014:	f107 031a 	add.w	r3, r7, #26
 8006018:	461a      	mov	r2, r3
 800601a:	2184      	movs	r1, #132	; 0x84
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7fd ff3d 	bl	8003e9c <VL53L0X_RdWord>
 8006022:	4603      	mov	r3, r0
 8006024:	461a      	mov	r2, r3
 8006026:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800602a:	4313      	orrs	r3, r2
 800602c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006030:	2200      	movs	r2, #0
 8006032:	21ff      	movs	r1, #255	; 0xff
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7fd fe53 	bl	8003ce0 <VL53L0X_WrByte>
 800603a:	4603      	mov	r3, r0
 800603c:	461a      	mov	r2, r3
 800603e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006042:	4313      	orrs	r3, r2
 8006044:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006048:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800604c:	2b00      	cmp	r3, #0
 800604e:	d105      	bne.n	800605c <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8006050:	8b7b      	ldrh	r3, [r7, #26]
 8006052:	011b      	lsls	r3, r3, #4
 8006054:	461a      	mov	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800605c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006060:	2b00      	cmp	r3, #0
 8006062:	d108      	bne.n	8006076 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006064:	f107 031c 	add.w	r3, r7, #28
 8006068:	4619      	mov	r1, r3
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f8c2 	bl	80061f4 <VL53L0X_GetDeviceParameters>
 8006070:	4603      	mov	r3, r0
 8006072:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8006076:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800607a:	2b00      	cmp	r3, #0
 800607c:	d110      	bne.n	80060a0 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800607e:	f107 0319 	add.w	r3, r7, #25
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f984 	bl	8006392 <VL53L0X_GetFractionEnable>
 800608a:	4603      	mov	r3, r0
 800608c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8006090:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006094:	2b00      	cmp	r3, #0
 8006096:	d103      	bne.n	80060a0 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8006098:	7e7a      	ldrb	r2, [r7, #25]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80060a0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10e      	bne.n	80060c6 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f103 0410 	add.w	r4, r3, #16
 80060ae:	f107 051c 	add.w	r5, r7, #28
 80060b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80060c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80060c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d111      	bne.n	80060f2 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 80060ce:	f107 0319 	add.w	r3, r7, #25
 80060d2:	461a      	mov	r2, r3
 80060d4:	2101      	movs	r1, #1
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7fd feb6 	bl	8003e48 <VL53L0X_RdByte>
 80060dc:	4603      	mov	r3, r0
 80060de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80060e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d103      	bne.n	80060f2 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80060ea:	7e7a      	ldrb	r2, [r7, #25]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80060f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d107      	bne.n	800610a <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80060fa:	2200      	movs	r2, #0
 80060fc:	2100      	movs	r1, #0
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f9a4 	bl	800644c <VL53L0X_SetSequenceStepEnable>
 8006104:	4603      	mov	r3, r0
 8006106:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800610a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800610e:	2b00      	cmp	r3, #0
 8006110:	d107      	bne.n	8006122 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006112:	2200      	movs	r2, #0
 8006114:	2102      	movs	r1, #2
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f998 	bl	800644c <VL53L0X_SetSequenceStepEnable>
 800611c:	4603      	mov	r3, r0
 800611e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8006122:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006126:	2b00      	cmp	r3, #0
 8006128:	d103      	bne.n	8006132 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2203      	movs	r2, #3
 800612e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006132:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006136:	2b00      	cmp	r3, #0
 8006138:	d109      	bne.n	800614e <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800613a:	f107 0313 	add.w	r3, r7, #19
 800613e:	461a      	mov	r2, r3
 8006140:	2100      	movs	r1, #0
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f96a 	bl	800641c <VL53L0X_GetVcselPulsePeriod>
 8006148:	4603      	mov	r3, r0
 800614a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800614e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006152:	2b00      	cmp	r3, #0
 8006154:	d103      	bne.n	800615e <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006156:	7cfa      	ldrb	r2, [r7, #19]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800615e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006162:	2b00      	cmp	r3, #0
 8006164:	d109      	bne.n	800617a <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006166:	f107 0313 	add.w	r3, r7, #19
 800616a:	461a      	mov	r2, r3
 800616c:	2101      	movs	r1, #1
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f954 	bl	800641c <VL53L0X_GetVcselPulsePeriod>
 8006174:	4603      	mov	r3, r0
 8006176:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800617a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800617e:	2b00      	cmp	r3, #0
 8006180:	d103      	bne.n	800618a <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006182:	7cfa      	ldrb	r2, [r7, #19]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800618a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800618e:	2b00      	cmp	r3, #0
 8006190:	d109      	bne.n	80061a6 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8006192:	f107 030c 	add.w	r3, r7, #12
 8006196:	461a      	mov	r2, r3
 8006198:	2103      	movs	r1, #3
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f002 fec0 	bl	8008f20 <get_sequence_step_timeout>
 80061a0:	4603      	mov	r3, r0
 80061a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80061a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d103      	bne.n	80061b6 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80061b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d109      	bne.n	80061d2 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 80061be:	f107 030c 	add.w	r3, r7, #12
 80061c2:	461a      	mov	r2, r3
 80061c4:	2104      	movs	r1, #4
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f002 feaa 	bl	8008f20 <get_sequence_step_timeout>
 80061cc:	4603      	mov	r3, r0
 80061ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80061d2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d103      	bne.n	80061e2 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80061e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3770      	adds	r7, #112	; 0x70
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bdb0      	pop	{r4, r5, r7, pc}
 80061ee:	bf00      	nop
 80061f0:	20000280 	.word	0x20000280

080061f4 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80061fe:	2300      	movs	r3, #0
 8006200:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	4619      	mov	r1, r3
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f8b0 	bl	800636c <VL53L0X_GetDeviceMode>
 800620c:	4603      	mov	r3, r0
 800620e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d107      	bne.n	8006228 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	3308      	adds	r3, #8
 800621c:	4619      	mov	r1, r3
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fa94 	bl	800674c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8006224:	4603      	mov	r3, r0
 8006226:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8006228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d102      	bne.n	8006236 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	2200      	movs	r2, #0
 8006234:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8006236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d107      	bne.n	800624e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	3310      	adds	r3, #16
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 faca 	bl	80067de <VL53L0X_GetXTalkCompensationRateMegaCps>
 800624a:	4603      	mov	r3, r0
 800624c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800624e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d107      	bne.n	8006266 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	3314      	adds	r3, #20
 800625a:	4619      	mov	r1, r3
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7ff fccf 	bl	8005c00 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8006262:	4603      	mov	r3, r0
 8006264:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8006266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d134      	bne.n	80062d8 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800626e:	2300      	movs	r3, #0
 8006270:	60bb      	str	r3, [r7, #8]
 8006272:	e02a      	b.n	80062ca <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006274:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d12a      	bne.n	80062d2 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	b299      	uxth	r1, r3
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	3308      	adds	r3, #8
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	4413      	add	r3, r2
 800628a:	3304      	adds	r3, #4
 800628c:	461a      	mov	r2, r3
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fbea 	bl	8006a68 <VL53L0X_GetLimitCheckValue>
 8006294:	4603      	mov	r3, r0
 8006296:	461a      	mov	r2, r3
 8006298:	7bfb      	ldrb	r3, [r7, #15]
 800629a:	4313      	orrs	r3, r2
 800629c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800629e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d117      	bne.n	80062d6 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	b299      	uxth	r1, r3
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	3318      	adds	r3, #24
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	4413      	add	r3, r2
 80062b2:	461a      	mov	r2, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fb51 	bl	800695c <VL53L0X_GetLimitCheckEnable>
 80062ba:	4603      	mov	r3, r0
 80062bc:	461a      	mov	r2, r3
 80062be:	7bfb      	ldrb	r3, [r7, #15]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	3301      	adds	r3, #1
 80062c8:	60bb      	str	r3, [r7, #8]
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	2b05      	cmp	r3, #5
 80062ce:	ddd1      	ble.n	8006274 <VL53L0X_GetDeviceParameters+0x80>
 80062d0:	e002      	b.n	80062d8 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80062d2:	bf00      	nop
 80062d4:	e000      	b.n	80062d8 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80062d6:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80062d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d107      	bne.n	80062f0 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	333c      	adds	r3, #60	; 0x3c
 80062e4:	4619      	mov	r1, r3
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fc4c 	bl	8006b84 <VL53L0X_GetWrapAroundCheckEnable>
 80062ec:	4603      	mov	r3, r0
 80062ee:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80062f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d107      	bne.n	8006308 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	3304      	adds	r3, #4
 80062fc:	4619      	mov	r1, r3
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f879 	bl	80063f6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8006304:	4603      	mov	r3, r0
 8006306:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006308:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006320:	2300      	movs	r3, #0
 8006322:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	2b15      	cmp	r3, #21
 8006328:	bf8c      	ite	hi
 800632a:	2201      	movhi	r2, #1
 800632c:	2200      	movls	r2, #0
 800632e:	b2d2      	uxtb	r2, r2
 8006330:	2a00      	cmp	r2, #0
 8006332:	d10e      	bne.n	8006352 <VL53L0X_SetDeviceMode+0x3e>
 8006334:	2201      	movs	r2, #1
 8006336:	409a      	lsls	r2, r3
 8006338:	4b0b      	ldr	r3, [pc, #44]	; (8006368 <VL53L0X_SetDeviceMode+0x54>)
 800633a:	4013      	ands	r3, r2
 800633c:	2b00      	cmp	r3, #0
 800633e:	bf14      	ite	ne
 8006340:	2301      	movne	r3, #1
 8006342:	2300      	moveq	r3, #0
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	78fa      	ldrb	r2, [r7, #3]
 800634e:	741a      	strb	r2, [r3, #16]
		break;
 8006350:	e001      	b.n	8006356 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006352:	23f8      	movs	r3, #248	; 0xf8
 8006354:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006356:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	0030000b 	.word	0x0030000b

0800636c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006376:	2300      	movs	r3, #0
 8006378:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	7c1a      	ldrb	r2, [r3, #16]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006382:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800639c:	2300      	movs	r3, #0
 800639e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	2109      	movs	r1, #9
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f7fd fd4f 	bl	8003e48 <VL53L0X_RdByte>
 80063aa:	4603      	mov	r3, r0
 80063ac:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80063ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d106      	bne.n	80063c4 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	b2da      	uxtb	r2, r3
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80063c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063da:	2300      	movs	r3, #0
 80063dc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f002 ffa7 	bl	8009334 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80063e6:	4603      	mov	r3, r0
 80063e8:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80063ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b084      	sub	sp, #16
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006400:	2300      	movs	r3, #0
 8006402:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8006404:	6839      	ldr	r1, [r7, #0]
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f003 f874 	bl	80094f4 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800640c:	4603      	mov	r3, r0
 800640e:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8006410:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	460b      	mov	r3, r1
 8006426:	607a      	str	r2, [r7, #4]
 8006428:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800642a:	2300      	movs	r3, #0
 800642c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800642e:	7afb      	ldrb	r3, [r7, #11]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	4619      	mov	r1, r3
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f002 ff46 	bl	80092c6 <VL53L0X_get_vcsel_pulse_period>
 800643a:	4603      	mov	r3, r0
 800643c:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800643e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006442:	4618      	mov	r0, r3
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
	...

0800644c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	460b      	mov	r3, r1
 8006456:	70fb      	strb	r3, [r7, #3]
 8006458:	4613      	mov	r3, r2
 800645a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800645c:	2300      	movs	r3, #0
 800645e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006460:	2300      	movs	r3, #0
 8006462:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8006464:	2300      	movs	r3, #0
 8006466:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006468:	f107 030f 	add.w	r3, r7, #15
 800646c:	461a      	mov	r2, r3
 800646e:	2101      	movs	r1, #1
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f7fd fce9 	bl	8003e48 <VL53L0X_RdByte>
 8006476:	4603      	mov	r3, r0
 8006478:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800647a:	7bfb      	ldrb	r3, [r7, #15]
 800647c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800647e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d15a      	bne.n	800653c <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8006486:	78bb      	ldrb	r3, [r7, #2]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d12b      	bne.n	80064e4 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800648c:	78fb      	ldrb	r3, [r7, #3]
 800648e:	2b04      	cmp	r3, #4
 8006490:	d825      	bhi.n	80064de <VL53L0X_SetSequenceStepEnable+0x92>
 8006492:	a201      	add	r2, pc, #4	; (adr r2, 8006498 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8006494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006498:	080064ad 	.word	0x080064ad
 800649c:	080064b7 	.word	0x080064b7
 80064a0:	080064c1 	.word	0x080064c1
 80064a4:	080064cb 	.word	0x080064cb
 80064a8:	080064d5 	.word	0x080064d5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80064ac:	7dbb      	ldrb	r3, [r7, #22]
 80064ae:	f043 0310 	orr.w	r3, r3, #16
 80064b2:	75bb      	strb	r3, [r7, #22]
				break;
 80064b4:	e043      	b.n	800653e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80064b6:	7dbb      	ldrb	r3, [r7, #22]
 80064b8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80064bc:	75bb      	strb	r3, [r7, #22]
				break;
 80064be:	e03e      	b.n	800653e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80064c0:	7dbb      	ldrb	r3, [r7, #22]
 80064c2:	f043 0304 	orr.w	r3, r3, #4
 80064c6:	75bb      	strb	r3, [r7, #22]
				break;
 80064c8:	e039      	b.n	800653e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80064ca:	7dbb      	ldrb	r3, [r7, #22]
 80064cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064d0:	75bb      	strb	r3, [r7, #22]
				break;
 80064d2:	e034      	b.n	800653e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80064d4:	7dbb      	ldrb	r3, [r7, #22]
 80064d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064da:	75bb      	strb	r3, [r7, #22]
				break;
 80064dc:	e02f      	b.n	800653e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80064de:	23fc      	movs	r3, #252	; 0xfc
 80064e0:	75fb      	strb	r3, [r7, #23]
 80064e2:	e02c      	b.n	800653e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80064e4:	78fb      	ldrb	r3, [r7, #3]
 80064e6:	2b04      	cmp	r3, #4
 80064e8:	d825      	bhi.n	8006536 <VL53L0X_SetSequenceStepEnable+0xea>
 80064ea:	a201      	add	r2, pc, #4	; (adr r2, 80064f0 <VL53L0X_SetSequenceStepEnable+0xa4>)
 80064ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f0:	08006505 	.word	0x08006505
 80064f4:	0800650f 	.word	0x0800650f
 80064f8:	08006519 	.word	0x08006519
 80064fc:	08006523 	.word	0x08006523
 8006500:	0800652d 	.word	0x0800652d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8006504:	7dbb      	ldrb	r3, [r7, #22]
 8006506:	f023 0310 	bic.w	r3, r3, #16
 800650a:	75bb      	strb	r3, [r7, #22]
				break;
 800650c:	e017      	b.n	800653e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800650e:	7dbb      	ldrb	r3, [r7, #22]
 8006510:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8006514:	75bb      	strb	r3, [r7, #22]
				break;
 8006516:	e012      	b.n	800653e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8006518:	7dbb      	ldrb	r3, [r7, #22]
 800651a:	f023 0304 	bic.w	r3, r3, #4
 800651e:	75bb      	strb	r3, [r7, #22]
				break;
 8006520:	e00d      	b.n	800653e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8006522:	7dbb      	ldrb	r3, [r7, #22]
 8006524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006528:	75bb      	strb	r3, [r7, #22]
				break;
 800652a:	e008      	b.n	800653e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800652c:	7dbb      	ldrb	r3, [r7, #22]
 800652e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006532:	75bb      	strb	r3, [r7, #22]
				break;
 8006534:	e003      	b.n	800653e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006536:	23fc      	movs	r3, #252	; 0xfc
 8006538:	75fb      	strb	r3, [r7, #23]
 800653a:	e000      	b.n	800653e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800653c:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800653e:	7bfb      	ldrb	r3, [r7, #15]
 8006540:	7dba      	ldrb	r2, [r7, #22]
 8006542:	429a      	cmp	r2, r3
 8006544:	d01e      	beq.n	8006584 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8006546:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d107      	bne.n	800655e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800654e:	7dbb      	ldrb	r3, [r7, #22]
 8006550:	461a      	mov	r2, r3
 8006552:	2101      	movs	r1, #1
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7fd fbc3 	bl	8003ce0 <VL53L0X_WrByte>
 800655a:	4603      	mov	r3, r0
 800655c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800655e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d103      	bne.n	800656e <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	7dba      	ldrb	r2, [r7, #22]
 800656a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800656e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d106      	bne.n	8006584 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800657c:	6939      	ldr	r1, [r7, #16]
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7ff ff26 	bl	80063d0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8006584:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3718      	adds	r7, #24
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	607b      	str	r3, [r7, #4]
 800659a:	460b      	mov	r3, r1
 800659c:	72fb      	strb	r3, [r7, #11]
 800659e:	4613      	mov	r3, r2
 80065a0:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80065a2:	2300      	movs	r3, #0
 80065a4:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80065ac:	7afb      	ldrb	r3, [r7, #11]
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d836      	bhi.n	8006620 <sequence_step_enabled+0x90>
 80065b2:	a201      	add	r2, pc, #4	; (adr r2, 80065b8 <sequence_step_enabled+0x28>)
 80065b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b8:	080065cd 	.word	0x080065cd
 80065bc:	080065df 	.word	0x080065df
 80065c0:	080065f1 	.word	0x080065f1
 80065c4:	08006603 	.word	0x08006603
 80065c8:	08006615 	.word	0x08006615
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80065cc:	7abb      	ldrb	r3, [r7, #10]
 80065ce:	111b      	asrs	r3, r3, #4
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	701a      	strb	r2, [r3, #0]
		break;
 80065dc:	e022      	b.n	8006624 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80065de:	7abb      	ldrb	r3, [r7, #10]
 80065e0:	10db      	asrs	r3, r3, #3
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	701a      	strb	r2, [r3, #0]
		break;
 80065ee:	e019      	b.n	8006624 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80065f0:	7abb      	ldrb	r3, [r7, #10]
 80065f2:	109b      	asrs	r3, r3, #2
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	701a      	strb	r2, [r3, #0]
		break;
 8006600:	e010      	b.n	8006624 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8006602:	7abb      	ldrb	r3, [r7, #10]
 8006604:	119b      	asrs	r3, r3, #6
 8006606:	b2db      	uxtb	r3, r3
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	b2da      	uxtb	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	701a      	strb	r2, [r3, #0]
		break;
 8006612:	e007      	b.n	8006624 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8006614:	7abb      	ldrb	r3, [r7, #10]
 8006616:	09db      	lsrs	r3, r3, #7
 8006618:	b2da      	uxtb	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	701a      	strb	r2, [r3, #0]
		break;
 800661e:	e001      	b.n	8006624 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006620:	23fc      	movs	r3, #252	; 0xfc
 8006622:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006624:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006628:	4618      	mov	r0, r3
 800662a:	371c      	adds	r7, #28
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800663e:	2300      	movs	r3, #0
 8006640:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8006642:	2300      	movs	r3, #0
 8006644:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006646:	f107 030e 	add.w	r3, r7, #14
 800664a:	461a      	mov	r2, r3
 800664c:	2101      	movs	r1, #1
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fd fbfa 	bl	8003e48 <VL53L0X_RdByte>
 8006654:	4603      	mov	r3, r0
 8006656:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8006658:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d107      	bne.n	8006670 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8006660:	7bba      	ldrb	r2, [r7, #14]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2100      	movs	r1, #0
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7ff ff92 	bl	8006590 <sequence_step_enabled>
 800666c:	4603      	mov	r3, r0
 800666e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d108      	bne.n	800668a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8006678:	7bba      	ldrb	r2, [r7, #14]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	3302      	adds	r3, #2
 800667e:	2101      	movs	r1, #1
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7ff ff85 	bl	8006590 <sequence_step_enabled>
 8006686:	4603      	mov	r3, r0
 8006688:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800668a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d108      	bne.n	80066a4 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8006692:	7bba      	ldrb	r2, [r7, #14]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	3301      	adds	r3, #1
 8006698:	2102      	movs	r1, #2
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7ff ff78 	bl	8006590 <sequence_step_enabled>
 80066a0:	4603      	mov	r3, r0
 80066a2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80066a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d108      	bne.n	80066be <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80066ac:	7bba      	ldrb	r2, [r7, #14]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	3303      	adds	r3, #3
 80066b2:	2103      	movs	r1, #3
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7ff ff6b 	bl	8006590 <sequence_step_enabled>
 80066ba:	4603      	mov	r3, r0
 80066bc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80066be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d108      	bne.n	80066d8 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80066c6:	7bba      	ldrb	r2, [r7, #14]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	3304      	adds	r3, #4
 80066cc:	2104      	movs	r1, #4
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7ff ff5e 	bl	8006590 <sequence_step_enabled>
 80066d4:	4603      	mov	r3, r0
 80066d6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80066d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066ee:	2300      	movs	r3, #0
 80066f0:	75fb      	strb	r3, [r7, #23]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80066f2:	f107 030e 	add.w	r3, r7, #14
 80066f6:	461a      	mov	r2, r3
 80066f8:	21f8      	movs	r1, #248	; 0xf8
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7fd fbce 	bl	8003e9c <VL53L0X_RdWord>
 8006700:	4603      	mov	r3, r0
 8006702:	75fb      	strb	r3, [r7, #23]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8006704:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d112      	bne.n	8006732 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x4e>
		if (osc_calibrate_val != 0) {
 800670c:	89fb      	ldrh	r3, [r7, #14]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d006      	beq.n	8006720 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x3c>
			IMPeriodMilliSeconds =
				InterMeasurementPeriodMilliSeconds
					* osc_calibrate_val;
 8006712:	89fb      	ldrh	r3, [r7, #14]
 8006714:	461a      	mov	r2, r3
			IMPeriodMilliSeconds =
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	fb02 f303 	mul.w	r3, r2, r3
 800671c:	613b      	str	r3, [r7, #16]
 800671e:	e001      	b.n	8006724 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x40>
		} else {
			IMPeriodMilliSeconds =
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	613b      	str	r3, [r7, #16]
				InterMeasurementPeriodMilliSeconds;
		}
		Status = VL53L0X_WrDWord(Dev,
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	2104      	movs	r1, #4
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7fd fb27 	bl	8003d7c <VL53L0X_WrDWord>
 800672e:	4603      	mov	r3, r0
 8006730:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006732:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d102      	bne.n	8006740 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x5c>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			InterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006740:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3718      	adds	r7, #24
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006756:	2300      	movs	r3, #0
 8006758:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800675a:	f107 030c 	add.w	r3, r7, #12
 800675e:	461a      	mov	r2, r3
 8006760:	21f8      	movs	r1, #248	; 0xf8
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7fd fb9a 	bl	8003e9c <VL53L0X_RdWord>
 8006768:	4603      	mov	r3, r0
 800676a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800676c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d108      	bne.n	8006786 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8006774:	f107 0308 	add.w	r3, r7, #8
 8006778:	461a      	mov	r2, r3
 800677a:	2104      	movs	r1, #4
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f7fd fbc5 	bl	8003f0c <VL53L0X_RdDWord>
 8006782:	4603      	mov	r3, r0
 8006784:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10c      	bne.n	80067a8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800678e:	89bb      	ldrh	r3, [r7, #12]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d005      	beq.n	80067a0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	89ba      	ldrh	r2, [r7, #12]
 8006798:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80067a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067be:	2300      	movs	r3, #0
 80067c0:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	7f1b      	ldrb	r3, [r3, #28]
 80067c6:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	7bba      	ldrb	r2, [r7, #14]
 80067cc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80067ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b086      	sub	sp, #24
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067e8:	2300      	movs	r3, #0
 80067ea:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80067ec:	f107 030e 	add.w	r3, r7, #14
 80067f0:	461a      	mov	r2, r3
 80067f2:	2120      	movs	r1, #32
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7fd fb51 	bl	8003e9c <VL53L0X_RdWord>
 80067fa:	4603      	mov	r3, r0
 80067fc:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80067fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d118      	bne.n	8006838 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8006806:	89fb      	ldrh	r3, [r7, #14]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d109      	bne.n	8006820 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	771a      	strb	r2, [r3, #28]
 800681e:	e00b      	b.n	8006838 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8006820:	89fb      	ldrh	r3, [r7, #14]
 8006822:	00db      	lsls	r3, r3, #3
 8006824:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006838:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	460b      	mov	r3, r1
 800684e:	807b      	strh	r3, [r7, #2]
 8006850:	4613      	mov	r3, r2
 8006852:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006854:	2300      	movs	r3, #0
 8006856:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8006858:	2300      	movs	r3, #0
 800685a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800685c:	2300      	movs	r3, #0
 800685e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006864:	887b      	ldrh	r3, [r7, #2]
 8006866:	2b05      	cmp	r3, #5
 8006868:	d902      	bls.n	8006870 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800686a:	23fc      	movs	r3, #252	; 0xfc
 800686c:	75fb      	strb	r3, [r7, #23]
 800686e:	e05b      	b.n	8006928 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8006870:	787b      	ldrb	r3, [r7, #1]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d106      	bne.n	8006884 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8006876:	2300      	movs	r3, #0
 8006878:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800687a:	2300      	movs	r3, #0
 800687c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800687e:	2301      	movs	r3, #1
 8006880:	73bb      	strb	r3, [r7, #14]
 8006882:	e00a      	b.n	800689a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006884:	887b      	ldrh	r3, [r7, #2]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	330c      	adds	r3, #12
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8006892:	2300      	movs	r3, #0
 8006894:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8006896:	2301      	movs	r3, #1
 8006898:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800689a:	887b      	ldrh	r3, [r7, #2]
 800689c:	2b05      	cmp	r3, #5
 800689e:	d841      	bhi.n	8006924 <VL53L0X_SetLimitCheckEnable+0xe0>
 80068a0:	a201      	add	r2, pc, #4	; (adr r2, 80068a8 <VL53L0X_SetLimitCheckEnable+0x64>)
 80068a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a6:	bf00      	nop
 80068a8:	080068c1 	.word	0x080068c1
 80068ac:	080068cb 	.word	0x080068cb
 80068b0:	080068e1 	.word	0x080068e1
 80068b4:	080068eb 	.word	0x080068eb
 80068b8:	080068f5 	.word	0x080068f5
 80068bc:	0800690d 	.word	0x0800690d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	7bfa      	ldrb	r2, [r7, #15]
 80068c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80068c8:	e02e      	b.n	8006928 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	461a      	mov	r2, r3
 80068d2:	2144      	movs	r1, #68	; 0x44
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7fd fa27 	bl	8003d28 <VL53L0X_WrWord>
 80068da:	4603      	mov	r3, r0
 80068dc:	75fb      	strb	r3, [r7, #23]

			break;
 80068de:	e023      	b.n	8006928 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	7bfa      	ldrb	r2, [r7, #15]
 80068e4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80068e8:	e01e      	b.n	8006928 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	7bfa      	ldrb	r2, [r7, #15]
 80068ee:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80068f2:	e019      	b.n	8006928 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80068f4:	7bbb      	ldrb	r3, [r7, #14]
 80068f6:	005b      	lsls	r3, r3, #1
 80068f8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80068fa:	7b7b      	ldrb	r3, [r7, #13]
 80068fc:	22fe      	movs	r2, #254	; 0xfe
 80068fe:	2160      	movs	r1, #96	; 0x60
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7fd fa6d 	bl	8003de0 <VL53L0X_UpdateByte>
 8006906:	4603      	mov	r3, r0
 8006908:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800690a:	e00d      	b.n	8006928 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800690c:	7bbb      	ldrb	r3, [r7, #14]
 800690e:	011b      	lsls	r3, r3, #4
 8006910:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006912:	7b7b      	ldrb	r3, [r7, #13]
 8006914:	22ef      	movs	r2, #239	; 0xef
 8006916:	2160      	movs	r1, #96	; 0x60
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7fd fa61 	bl	8003de0 <VL53L0X_UpdateByte>
 800691e:	4603      	mov	r3, r0
 8006920:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8006922:	e001      	b.n	8006928 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006924:	23fc      	movs	r3, #252	; 0xfc
 8006926:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006928:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10f      	bne.n	8006950 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8006930:	787b      	ldrb	r3, [r7, #1]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d106      	bne.n	8006944 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006936:	887b      	ldrh	r3, [r7, #2]
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	4413      	add	r3, r2
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006942:	e005      	b.n	8006950 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006944:	887b      	ldrh	r3, [r7, #2]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	4413      	add	r3, r2
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006950:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3718      	adds	r7, #24
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	460b      	mov	r3, r1
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800696a:	2300      	movs	r3, #0
 800696c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800696e:	897b      	ldrh	r3, [r7, #10]
 8006970:	2b05      	cmp	r3, #5
 8006972:	d905      	bls.n	8006980 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006974:	23fc      	movs	r3, #252	; 0xfc
 8006976:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	701a      	strb	r2, [r3, #0]
 800697e:	e008      	b.n	8006992 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006980:	897b      	ldrh	r3, [r7, #10]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	4413      	add	r3, r2
 8006986:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800698a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	7dba      	ldrb	r2, [r7, #22]
 8006990:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006992:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006996:	4618      	mov	r0, r3
 8006998:	371c      	adds	r7, #28
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
	...

080069a4 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	460b      	mov	r3, r1
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069b2:	2300      	movs	r3, #0
 80069b4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80069b6:	897b      	ldrh	r3, [r7, #10]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	4413      	add	r3, r2
 80069bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069c0:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80069c2:	7dbb      	ldrb	r3, [r7, #22]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d107      	bne.n	80069d8 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80069c8:	897b      	ldrh	r3, [r7, #10]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	330c      	adds	r3, #12
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	605a      	str	r2, [r3, #4]
 80069d6:	e040      	b.n	8006a5a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80069d8:	897b      	ldrh	r3, [r7, #10]
 80069da:	2b05      	cmp	r3, #5
 80069dc:	d830      	bhi.n	8006a40 <VL53L0X_SetLimitCheckValue+0x9c>
 80069de:	a201      	add	r2, pc, #4	; (adr r2, 80069e4 <VL53L0X_SetLimitCheckValue+0x40>)
 80069e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e4:	080069fd 	.word	0x080069fd
 80069e8:	08006a05 	.word	0x08006a05
 80069ec:	08006a1b 	.word	0x08006a1b
 80069f0:	08006a23 	.word	0x08006a23
 80069f4:	08006a2b 	.word	0x08006a2b
 80069f8:	08006a2b 	.word	0x08006a2b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8006a02:	e01f      	b.n	8006a44 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	2144      	movs	r1, #68	; 0x44
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f7fd f98a 	bl	8003d28 <VL53L0X_WrWord>
 8006a14:	4603      	mov	r3, r0
 8006a16:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8006a18:	e014      	b.n	8006a44 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8006a20:	e010      	b.n	8006a44 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8006a28:	e00c      	b.n	8006a44 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	461a      	mov	r2, r3
 8006a32:	2164      	movs	r1, #100	; 0x64
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f7fd f977 	bl	8003d28 <VL53L0X_WrWord>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8006a3e:	e001      	b.n	8006a44 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006a40:	23fc      	movs	r3, #252	; 0xfc
 8006a42:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006a44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d106      	bne.n	8006a5a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006a4c:	897b      	ldrh	r3, [r7, #10]
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	330c      	adds	r3, #12
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4413      	add	r3, r2
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006a5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop

08006a68 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b088      	sub	sp, #32
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	460b      	mov	r3, r1
 8006a72:	607a      	str	r2, [r7, #4]
 8006a74:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a76:	2300      	movs	r3, #0
 8006a78:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8006a7e:	897b      	ldrh	r3, [r7, #10]
 8006a80:	2b05      	cmp	r3, #5
 8006a82:	d847      	bhi.n	8006b14 <VL53L0X_GetLimitCheckValue+0xac>
 8006a84:	a201      	add	r2, pc, #4	; (adr r2, 8006a8c <VL53L0X_GetLimitCheckValue+0x24>)
 8006a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8a:	bf00      	nop
 8006a8c:	08006aa5 	.word	0x08006aa5
 8006a90:	08006ab1 	.word	0x08006ab1
 8006a94:	08006ad7 	.word	0x08006ad7
 8006a98:	08006ae3 	.word	0x08006ae3
 8006a9c:	08006aef 	.word	0x08006aef
 8006aa0:	08006aef 	.word	0x08006aef

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa8:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	77bb      	strb	r3, [r7, #30]
		break;
 8006aae:	e033      	b.n	8006b18 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006ab0:	f107 0316 	add.w	r3, r7, #22
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	2144      	movs	r1, #68	; 0x44
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f7fd f9ef 	bl	8003e9c <VL53L0X_RdWord>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8006ac2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d102      	bne.n	8006ad0 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006aca:	8afb      	ldrh	r3, [r7, #22]
 8006acc:	025b      	lsls	r3, r3, #9
 8006ace:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	77bb      	strb	r3, [r7, #30]
		break;
 8006ad4:	e020      	b.n	8006b18 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ada:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8006adc:	2300      	movs	r3, #0
 8006ade:	77bb      	strb	r3, [r7, #30]
		break;
 8006ae0:	e01a      	b.n	8006b18 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	77bb      	strb	r3, [r7, #30]
		break;
 8006aec:	e014      	b.n	8006b18 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006aee:	f107 0316 	add.w	r3, r7, #22
 8006af2:	461a      	mov	r2, r3
 8006af4:	2164      	movs	r1, #100	; 0x64
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f7fd f9d0 	bl	8003e9c <VL53L0X_RdWord>
 8006afc:	4603      	mov	r3, r0
 8006afe:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8006b00:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d102      	bne.n	8006b0e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006b08:	8afb      	ldrh	r3, [r7, #22]
 8006b0a:	025b      	lsls	r3, r3, #9
 8006b0c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	77bb      	strb	r3, [r7, #30]
		break;
 8006b12:	e001      	b.n	8006b18 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006b14:	23fc      	movs	r3, #252	; 0xfc
 8006b16:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b18:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d12a      	bne.n	8006b76 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8006b20:	7fbb      	ldrb	r3, [r7, #30]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d124      	bne.n	8006b70 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d110      	bne.n	8006b4e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8006b2c:	897b      	ldrh	r3, [r7, #10]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	330c      	adds	r3, #12
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006b40:	897b      	ldrh	r3, [r7, #10]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	4413      	add	r3, r2
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006b4c:	e013      	b.n	8006b76 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006b54:	897b      	ldrh	r3, [r7, #10]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	330c      	adds	r3, #12
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006b62:	897b      	ldrh	r3, [r7, #10]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	4413      	add	r3, r2
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006b6e:	e002      	b.n	8006b76 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	69ba      	ldr	r2, [r7, #24]
 8006b74:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006b76:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3720      	adds	r7, #32
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop

08006b84 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8006b92:	f107 030e 	add.w	r3, r7, #14
 8006b96:	461a      	mov	r2, r3
 8006b98:	2101      	movs	r1, #1
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7fd f954 	bl	8003e48 <VL53L0X_RdByte>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8006ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10e      	bne.n	8006bca <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8006bac:	7bba      	ldrb	r2, [r7, #14]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8006bb4:	7bbb      	ldrb	r3, [r7, #14]
 8006bb6:	b25b      	sxtb	r3, r3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	da03      	bge.n	8006bc4 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	701a      	strb	r2, [r3, #0]
 8006bc2:	e002      	b.n	8006bca <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d104      	bne.n	8006bdc <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	781a      	ldrb	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006bf4:	f107 030e 	add.w	r3, r7, #14
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7ff fbb6 	bl	800636c <VL53L0X_GetDeviceMode>
 8006c00:	4603      	mov	r3, r0
 8006c02:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d107      	bne.n	8006c1c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d104      	bne.n	8006c1c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f898 	bl	8006d48 <VL53L0X_StartMeasurement>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d104      	bne.n	8006c2e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f001 fb3f 	bl	80082a8 <VL53L0X_measurement_poll_for_completion>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d106      	bne.n	8006c44 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006c36:	7bbb      	ldrb	r3, [r7, #14]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d103      	bne.n	8006c44 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2203      	movs	r2, #3
 8006c40:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8006c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8006c60:	2301      	movs	r3, #1
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	68b9      	ldr	r1, [r7, #8]
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f001 fae1 	bl	800822e <VL53L0X_perform_ref_calibration>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8006c70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	460b      	mov	r3, r1
 8006c86:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8006c92:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8006c94:	7dbb      	ldrb	r3, [r7, #22]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d005      	beq.n	8006ca6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8006c9a:	7dbb      	ldrb	r3, [r7, #22]
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d002      	beq.n	8006ca6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8006ca0:	7dbb      	ldrb	r3, [r7, #22]
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d147      	bne.n	8006d36 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8006ca6:	f107 030c 	add.w	r3, r7, #12
 8006caa:	f107 0210 	add.w	r2, r7, #16
 8006cae:	2101      	movs	r1, #1
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 fbc3 	bl	800743c <VL53L0X_GetInterruptThresholds>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006cc0:	d803      	bhi.n	8006cca <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8006cc2:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8006cc4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006cc8:	d935      	bls.n	8006d36 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8006cca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d131      	bne.n	8006d36 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8006cd2:	78fb      	ldrb	r3, [r7, #3]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d006      	beq.n	8006ce6 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8006cd8:	491a      	ldr	r1, [pc, #104]	; (8006d44 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f002 fcbc 	bl	8009658 <VL53L0X_load_tuning_settings>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	75fb      	strb	r3, [r7, #23]
 8006ce4:	e027      	b.n	8006d36 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8006ce6:	2204      	movs	r2, #4
 8006ce8:	21ff      	movs	r1, #255	; 0xff
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7fc fff8 	bl	8003ce0 <VL53L0X_WrByte>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	7dfb      	ldrb	r3, [r7, #23]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2170      	movs	r1, #112	; 0x70
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7fc ffee 	bl	8003ce0 <VL53L0X_WrByte>
 8006d04:	4603      	mov	r3, r0
 8006d06:	461a      	mov	r2, r3
 8006d08:	7dfb      	ldrb	r3, [r7, #23]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006d0e:	2200      	movs	r2, #0
 8006d10:	21ff      	movs	r1, #255	; 0xff
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7fc ffe4 	bl	8003ce0 <VL53L0X_WrByte>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	7dfb      	ldrb	r3, [r7, #23]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006d22:	2200      	movs	r2, #0
 8006d24:	2180      	movs	r1, #128	; 0x80
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f7fc ffda 	bl	8003ce0 <VL53L0X_WrByte>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	461a      	mov	r2, r3
 8006d30:	7dfb      	ldrb	r3, [r7, #23]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8006d36:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	20000374 	.word	0x20000374

08006d48 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d50:	2300      	movs	r3, #0
 8006d52:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8006d54:	2301      	movs	r3, #1
 8006d56:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006d58:	f107 030e 	add.w	r3, r7, #14
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7ff fb04 	bl	800636c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006d64:	2201      	movs	r2, #1
 8006d66:	2180      	movs	r1, #128	; 0x80
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7fc ffb9 	bl	8003ce0 <VL53L0X_WrByte>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006d72:	2201      	movs	r2, #1
 8006d74:	21ff      	movs	r1, #255	; 0xff
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7fc ffb2 	bl	8003ce0 <VL53L0X_WrByte>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006d80:	2200      	movs	r2, #0
 8006d82:	2100      	movs	r1, #0
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7fc ffab 	bl	8003ce0 <VL53L0X_WrByte>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8006d94:	461a      	mov	r2, r3
 8006d96:	2191      	movs	r1, #145	; 0x91
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f7fc ffa1 	bl	8003ce0 <VL53L0X_WrByte>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006da2:	2201      	movs	r2, #1
 8006da4:	2100      	movs	r1, #0
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f7fc ff9a 	bl	8003ce0 <VL53L0X_WrByte>
 8006dac:	4603      	mov	r3, r0
 8006dae:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006db0:	2200      	movs	r2, #0
 8006db2:	21ff      	movs	r1, #255	; 0xff
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f7fc ff93 	bl	8003ce0 <VL53L0X_WrByte>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	2180      	movs	r1, #128	; 0x80
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f7fc ff8c 	bl	8003ce0 <VL53L0X_WrByte>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8006dcc:	7bbb      	ldrb	r3, [r7, #14]
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	d054      	beq.n	8006e7c <VL53L0X_StartMeasurement+0x134>
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	dc6c      	bgt.n	8006eb0 <VL53L0X_StartMeasurement+0x168>
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d002      	beq.n	8006de0 <VL53L0X_StartMeasurement+0x98>
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d034      	beq.n	8006e48 <VL53L0X_StartMeasurement+0x100>
 8006dde:	e067      	b.n	8006eb0 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8006de0:	2201      	movs	r2, #1
 8006de2:	2100      	movs	r1, #0
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f7fc ff7b 	bl	8003ce0 <VL53L0X_WrByte>
 8006dea:	4603      	mov	r3, r0
 8006dec:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8006dee:	7bfb      	ldrb	r3, [r7, #15]
 8006df0:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8006df2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d15d      	bne.n	8006eb6 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d008      	beq.n	8006e16 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8006e04:	f107 030d 	add.w	r3, r7, #13
 8006e08:	461a      	mov	r2, r3
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7fd f81b 	bl	8003e48 <VL53L0X_RdByte>
 8006e12:	4603      	mov	r3, r0
 8006e14:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8006e1c:	7b7a      	ldrb	r2, [r7, #13]
 8006e1e:	7bfb      	ldrb	r3, [r7, #15]
 8006e20:	4013      	ands	r3, r2
 8006e22:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006e24:	7bfa      	ldrb	r2, [r7, #15]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d107      	bne.n	8006e3a <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8006e2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d103      	bne.n	8006e3a <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006e38:	d3e1      	bcc.n	8006dfe <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006e40:	d339      	bcc.n	8006eb6 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8006e42:	23f9      	movs	r3, #249	; 0xf9
 8006e44:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8006e46:	e036      	b.n	8006eb6 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006e48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d105      	bne.n	8006e5c <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006e50:	2101      	movs	r1, #1
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7ff ff12 	bl	8006c7c <VL53L0X_CheckAndLoadInterruptSettings>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	2100      	movs	r1, #0
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f7fc ff3d 	bl	8003ce0 <VL53L0X_WrByte>
 8006e66:	4603      	mov	r3, r0
 8006e68:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8006e6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d123      	bne.n	8006eba <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2204      	movs	r2, #4
 8006e76:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8006e7a:	e01e      	b.n	8006eba <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006e7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d105      	bne.n	8006e90 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006e84:	2101      	movs	r1, #1
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7ff fef8 	bl	8006c7c <VL53L0X_CheckAndLoadInterruptSettings>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006e90:	2204      	movs	r2, #4
 8006e92:	2100      	movs	r1, #0
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7fc ff23 	bl	8003ce0 <VL53L0X_WrByte>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8006e9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10b      	bne.n	8006ebe <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2204      	movs	r2, #4
 8006eaa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8006eae:	e006      	b.n	8006ebe <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006eb0:	23f8      	movs	r3, #248	; 0xf8
 8006eb2:	75fb      	strb	r3, [r7, #23]
 8006eb4:	e004      	b.n	8006ec0 <VL53L0X_StartMeasurement+0x178>
		break;
 8006eb6:	bf00      	nop
 8006eb8:	e002      	b.n	8006ec0 <VL53L0X_StartMeasurement+0x178>
		break;
 8006eba:	bf00      	nop
 8006ebc:	e000      	b.n	8006ec0 <VL53L0X_StartMeasurement+0x178>
		break;
 8006ebe:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8006ec0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8006ee0:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8006ee2:	7bbb      	ldrb	r3, [r7, #14]
 8006ee4:	2b04      	cmp	r3, #4
 8006ee6:	d112      	bne.n	8006f0e <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8006ee8:	f107 0308 	add.w	r3, r7, #8
 8006eec:	4619      	mov	r1, r3
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fb1a 	bl	8007528 <VL53L0X_GetInterruptMaskStatus>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	d103      	bne.n	8006f06 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2201      	movs	r2, #1
 8006f02:	701a      	strb	r2, [r3, #0]
 8006f04:	e01c      	b.n	8006f40 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	701a      	strb	r2, [r3, #0]
 8006f0c:	e018      	b.n	8006f40 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8006f0e:	f107 030d 	add.w	r3, r7, #13
 8006f12:	461a      	mov	r2, r3
 8006f14:	2114      	movs	r1, #20
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7fc ff96 	bl	8003e48 <VL53L0X_RdByte>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8006f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10b      	bne.n	8006f40 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8006f28:	7b7b      	ldrb	r3, [r7, #13]
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d003      	beq.n	8006f3a <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2201      	movs	r2, #1
 8006f36:	701a      	strb	r2, [r3, #0]
 8006f38:	e002      	b.n	8006f40 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8006f4c:	b5b0      	push	{r4, r5, r7, lr}
 8006f4e:	b096      	sub	sp, #88	; 0x58
 8006f50:	af02      	add	r7, sp, #8
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f56:	2300      	movs	r3, #0
 8006f58:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8006f5c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006f60:	230c      	movs	r3, #12
 8006f62:	2114      	movs	r1, #20
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f7fc fe8f 	bl	8003c88 <VL53L0X_ReadMulti>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8006f70:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f040 80d1 	bne.w	800711c <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	2200      	movs	r2, #0
 8006f84:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8006f86:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	021b      	lsls	r3, r3, #8
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	4413      	add	r3, r2
 8006f98:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8006fa2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	021b      	lsls	r3, r3, #8
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	4413      	add	r3, r2
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	025b      	lsls	r3, r3, #9
 8006fb8:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fbe:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8006fc0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	021b      	lsls	r3, r3, #8
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8006fd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006fda:	025b      	lsls	r3, r3, #9
 8006fdc:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8006fe2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	021b      	lsls	r3, r3, #8
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006ffe:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8007000:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007004:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800700e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8007016:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800701a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800701c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007020:	d046      	beq.n	80070b0 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8007022:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007024:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007028:	fb02 f303 	mul.w	r3, r2, r3
 800702c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007030:	4a57      	ldr	r2, [pc, #348]	; (8007190 <VL53L0X_GetRangingMeasurementData+0x244>)
 8007032:	fb82 1203 	smull	r1, r2, r2, r3
 8007036:	1192      	asrs	r2, r2, #6
 8007038:	17db      	asrs	r3, r3, #31
 800703a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800703c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a1b      	ldr	r3, [r3, #32]
 8007044:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	7f1b      	ldrb	r3, [r3, #28]
 800704a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800704e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007052:	2b00      	cmp	r3, #0
 8007054:	d02c      	beq.n	80070b0 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8007056:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007058:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800705c:	fb02 f303 	mul.w	r3, r2, r3
 8007060:	121a      	asrs	r2, r3, #8
					<= 0) {
 8007062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8007064:	429a      	cmp	r2, r3
 8007066:	d10d      	bne.n	8007084 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8007068:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800706c:	2b00      	cmp	r3, #0
 800706e:	d004      	beq.n	800707a <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8007070:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8007074:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007078:	e016      	b.n	80070a8 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800707a:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800707e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007082:	e011      	b.n	80070a8 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8007084:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007088:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800708a:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800708e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007090:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8007094:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8007098:	121b      	asrs	r3, r3, #8
 800709a:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800709c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800709e:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80070a0:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80070a4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80070a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80070ac:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80070b0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00d      	beq.n	80070d4 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80070b8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80070bc:	089b      	lsrs	r3, r3, #2
 80070be:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80070c4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	019b      	lsls	r3, r3, #6
 80070cc:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	75da      	strb	r2, [r3, #23]
 80070d2:	e006      	b.n	80070e2 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80070da:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	2200      	movs	r2, #0
 80070e0:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80070e2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80070e6:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80070ea:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80070ee:	9301      	str	r3, [sp, #4]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	4613      	mov	r3, r2
 80070f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f002 ff4b 	bl	8009f94 <VL53L0X_get_pal_range_status>
 80070fe:	4603      	mov	r3, r0
 8007100:	461a      	mov	r2, r3
 8007102:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007106:	4313      	orrs	r3, r2
 8007108:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800710c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007110:	2b00      	cmp	r3, #0
 8007112:	d103      	bne.n	800711c <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8007114:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800711c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007120:	2b00      	cmp	r3, #0
 8007122:	d12f      	bne.n	8007184 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f107 040c 	add.w	r4, r7, #12
 800712a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800712e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007130:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007132:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007136:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800713e:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8007144:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800714c:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8007152:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8007158:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800715e:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8007164:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800716a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8007174:	f107 050c 	add.w	r5, r7, #12
 8007178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800717a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800717c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007180:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007184:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8007188:	4618      	mov	r0, r3
 800718a:	3750      	adds	r7, #80	; 0x50
 800718c:	46bd      	mov	sp, r7
 800718e:	bdb0      	pop	{r4, r5, r7, pc}
 8007190:	10624dd3 	.word	0x10624dd3

08007194 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800719e:	2300      	movs	r3, #0
 80071a0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80071a2:	2100      	movs	r1, #0
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f7ff f8b5 	bl	8006314 <VL53L0X_SetDeviceMode>
 80071aa:	4603      	mov	r3, r0
 80071ac:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80071ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d104      	bne.n	80071c0 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7ff fd16 	bl	8006be8 <VL53L0X_PerformSingleMeasurement>
 80071bc:	4603      	mov	r3, r0
 80071be:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80071c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d105      	bne.n	80071d4 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7ff febe 	bl	8006f4c <VL53L0X_GetRangingMeasurementData>
 80071d0:	4603      	mov	r3, r0
 80071d2:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80071d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d105      	bne.n	80071e8 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80071dc:	2100      	movs	r1, #0
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f962 	bl	80074a8 <VL53L0X_ClearInterruptMask>
 80071e4:	4603      	mov	r3, r0
 80071e6:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80071e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	4608      	mov	r0, r1
 80071fe:	4611      	mov	r1, r2
 8007200:	461a      	mov	r2, r3
 8007202:	4603      	mov	r3, r0
 8007204:	70fb      	strb	r3, [r7, #3]
 8007206:	460b      	mov	r3, r1
 8007208:	70bb      	strb	r3, [r7, #2]
 800720a:	4613      	mov	r3, r2
 800720c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800720e:	2300      	movs	r3, #0
 8007210:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8007212:	78fb      	ldrb	r3, [r7, #3]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d002      	beq.n	800721e <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8007218:	23f6      	movs	r3, #246	; 0xf6
 800721a:	73fb      	strb	r3, [r7, #15]
 800721c:	e107      	b.n	800742e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800721e:	78bb      	ldrb	r3, [r7, #2]
 8007220:	2b14      	cmp	r3, #20
 8007222:	d110      	bne.n	8007246 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007224:	7e3b      	ldrb	r3, [r7, #24]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d102      	bne.n	8007230 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800722a:	2310      	movs	r3, #16
 800722c:	73bb      	strb	r3, [r7, #14]
 800722e:	e001      	b.n	8007234 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8007230:	2301      	movs	r3, #1
 8007232:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8007234:	7bbb      	ldrb	r3, [r7, #14]
 8007236:	461a      	mov	r2, r3
 8007238:	2184      	movs	r1, #132	; 0x84
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f7fc fd50 	bl	8003ce0 <VL53L0X_WrByte>
 8007240:	4603      	mov	r3, r0
 8007242:	73fb      	strb	r3, [r7, #15]
 8007244:	e0f3      	b.n	800742e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8007246:	78bb      	ldrb	r3, [r7, #2]
 8007248:	2b15      	cmp	r3, #21
 800724a:	f040 8097 	bne.w	800737c <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800724e:	2201      	movs	r2, #1
 8007250:	21ff      	movs	r1, #255	; 0xff
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7fc fd44 	bl	8003ce0 <VL53L0X_WrByte>
 8007258:	4603      	mov	r3, r0
 800725a:	461a      	mov	r2, r3
 800725c:	7bfb      	ldrb	r3, [r7, #15]
 800725e:	4313      	orrs	r3, r2
 8007260:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007262:	2200      	movs	r2, #0
 8007264:	2100      	movs	r1, #0
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f7fc fd3a 	bl	8003ce0 <VL53L0X_WrByte>
 800726c:	4603      	mov	r3, r0
 800726e:	461a      	mov	r2, r3
 8007270:	7bfb      	ldrb	r3, [r7, #15]
 8007272:	4313      	orrs	r3, r2
 8007274:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007276:	2200      	movs	r2, #0
 8007278:	21ff      	movs	r1, #255	; 0xff
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f7fc fd30 	bl	8003ce0 <VL53L0X_WrByte>
 8007280:	4603      	mov	r3, r0
 8007282:	461a      	mov	r2, r3
 8007284:	7bfb      	ldrb	r3, [r7, #15]
 8007286:	4313      	orrs	r3, r2
 8007288:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800728a:	2201      	movs	r2, #1
 800728c:	2180      	movs	r1, #128	; 0x80
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7fc fd26 	bl	8003ce0 <VL53L0X_WrByte>
 8007294:	4603      	mov	r3, r0
 8007296:	461a      	mov	r2, r3
 8007298:	7bfb      	ldrb	r3, [r7, #15]
 800729a:	4313      	orrs	r3, r2
 800729c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800729e:	2202      	movs	r2, #2
 80072a0:	2185      	movs	r1, #133	; 0x85
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7fc fd1c 	bl	8003ce0 <VL53L0X_WrByte>
 80072a8:	4603      	mov	r3, r0
 80072aa:	461a      	mov	r2, r3
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80072b2:	2204      	movs	r2, #4
 80072b4:	21ff      	movs	r1, #255	; 0xff
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7fc fd12 	bl	8003ce0 <VL53L0X_WrByte>
 80072bc:	4603      	mov	r3, r0
 80072be:	461a      	mov	r2, r3
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80072c6:	2200      	movs	r2, #0
 80072c8:	21cd      	movs	r1, #205	; 0xcd
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7fc fd08 	bl	8003ce0 <VL53L0X_WrByte>
 80072d0:	4603      	mov	r3, r0
 80072d2:	461a      	mov	r2, r3
 80072d4:	7bfb      	ldrb	r3, [r7, #15]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80072da:	2211      	movs	r2, #17
 80072dc:	21cc      	movs	r1, #204	; 0xcc
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7fc fcfe 	bl	8003ce0 <VL53L0X_WrByte>
 80072e4:	4603      	mov	r3, r0
 80072e6:	461a      	mov	r2, r3
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80072ee:	2207      	movs	r2, #7
 80072f0:	21ff      	movs	r1, #255	; 0xff
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7fc fcf4 	bl	8003ce0 <VL53L0X_WrByte>
 80072f8:	4603      	mov	r3, r0
 80072fa:	461a      	mov	r2, r3
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
 80072fe:	4313      	orrs	r3, r2
 8007300:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8007302:	2200      	movs	r2, #0
 8007304:	21be      	movs	r1, #190	; 0xbe
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f7fc fcea 	bl	8003ce0 <VL53L0X_WrByte>
 800730c:	4603      	mov	r3, r0
 800730e:	461a      	mov	r2, r3
 8007310:	7bfb      	ldrb	r3, [r7, #15]
 8007312:	4313      	orrs	r3, r2
 8007314:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8007316:	2206      	movs	r2, #6
 8007318:	21ff      	movs	r1, #255	; 0xff
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7fc fce0 	bl	8003ce0 <VL53L0X_WrByte>
 8007320:	4603      	mov	r3, r0
 8007322:	461a      	mov	r2, r3
 8007324:	7bfb      	ldrb	r3, [r7, #15]
 8007326:	4313      	orrs	r3, r2
 8007328:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800732a:	2209      	movs	r2, #9
 800732c:	21cc      	movs	r1, #204	; 0xcc
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7fc fcd6 	bl	8003ce0 <VL53L0X_WrByte>
 8007334:	4603      	mov	r3, r0
 8007336:	461a      	mov	r2, r3
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	4313      	orrs	r3, r2
 800733c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800733e:	2200      	movs	r2, #0
 8007340:	21ff      	movs	r1, #255	; 0xff
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7fc fccc 	bl	8003ce0 <VL53L0X_WrByte>
 8007348:	4603      	mov	r3, r0
 800734a:	461a      	mov	r2, r3
 800734c:	7bfb      	ldrb	r3, [r7, #15]
 800734e:	4313      	orrs	r3, r2
 8007350:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007352:	2201      	movs	r2, #1
 8007354:	21ff      	movs	r1, #255	; 0xff
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7fc fcc2 	bl	8003ce0 <VL53L0X_WrByte>
 800735c:	4603      	mov	r3, r0
 800735e:	461a      	mov	r2, r3
 8007360:	7bfb      	ldrb	r3, [r7, #15]
 8007362:	4313      	orrs	r3, r2
 8007364:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007366:	2200      	movs	r2, #0
 8007368:	2100      	movs	r1, #0
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7fc fcb8 	bl	8003ce0 <VL53L0X_WrByte>
 8007370:	4603      	mov	r3, r0
 8007372:	461a      	mov	r2, r3
 8007374:	7bfb      	ldrb	r3, [r7, #15]
 8007376:	4313      	orrs	r3, r2
 8007378:	73fb      	strb	r3, [r7, #15]
 800737a:	e058      	b.n	800742e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800737c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d121      	bne.n	80073c8 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8007384:	787b      	ldrb	r3, [r7, #1]
 8007386:	2b04      	cmp	r3, #4
 8007388:	d81b      	bhi.n	80073c2 <VL53L0X_SetGpioConfig+0x1ce>
 800738a:	a201      	add	r2, pc, #4	; (adr r2, 8007390 <VL53L0X_SetGpioConfig+0x19c>)
 800738c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007390:	080073a5 	.word	0x080073a5
 8007394:	080073ab 	.word	0x080073ab
 8007398:	080073b1 	.word	0x080073b1
 800739c:	080073b7 	.word	0x080073b7
 80073a0:	080073bd 	.word	0x080073bd
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80073a4:	2300      	movs	r3, #0
 80073a6:	73bb      	strb	r3, [r7, #14]
				break;
 80073a8:	e00f      	b.n	80073ca <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80073aa:	2301      	movs	r3, #1
 80073ac:	73bb      	strb	r3, [r7, #14]
				break;
 80073ae:	e00c      	b.n	80073ca <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80073b0:	2302      	movs	r3, #2
 80073b2:	73bb      	strb	r3, [r7, #14]
				break;
 80073b4:	e009      	b.n	80073ca <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80073b6:	2303      	movs	r3, #3
 80073b8:	73bb      	strb	r3, [r7, #14]
				break;
 80073ba:	e006      	b.n	80073ca <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80073bc:	2304      	movs	r3, #4
 80073be:	73bb      	strb	r3, [r7, #14]
				break;
 80073c0:	e003      	b.n	80073ca <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80073c2:	23f5      	movs	r3, #245	; 0xf5
 80073c4:	73fb      	strb	r3, [r7, #15]
 80073c6:	e000      	b.n	80073ca <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80073c8:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80073ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d107      	bne.n	80073e2 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80073d2:	7bbb      	ldrb	r3, [r7, #14]
 80073d4:	461a      	mov	r2, r3
 80073d6:	210a      	movs	r1, #10
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f7fc fc81 	bl	8003ce0 <VL53L0X_WrByte>
 80073de:	4603      	mov	r3, r0
 80073e0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80073e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10f      	bne.n	800740a <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80073ea:	7e3b      	ldrb	r3, [r7, #24]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d102      	bne.n	80073f6 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80073f0:	2300      	movs	r3, #0
 80073f2:	73bb      	strb	r3, [r7, #14]
 80073f4:	e001      	b.n	80073fa <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80073f6:	2310      	movs	r3, #16
 80073f8:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80073fa:	7bbb      	ldrb	r3, [r7, #14]
 80073fc:	22ef      	movs	r2, #239	; 0xef
 80073fe:	2184      	movs	r1, #132	; 0x84
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7fc fced 	bl	8003de0 <VL53L0X_UpdateByte>
 8007406:	4603      	mov	r3, r0
 8007408:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800740a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d103      	bne.n	800741a <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	787a      	ldrb	r2, [r7, #1]
 8007416:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800741a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d105      	bne.n	800742e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007422:	2100      	movs	r1, #0
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f83f 	bl	80074a8 <VL53L0X_ClearInterruptMask>
 800742a:	4603      	mov	r3, r0
 800742c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800742e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop

0800743c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	607a      	str	r2, [r7, #4]
 8007446:	603b      	str	r3, [r7, #0]
 8007448:	460b      	mov	r3, r1
 800744a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800744c:	2300      	movs	r3, #0
 800744e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8007450:	f107 0314 	add.w	r3, r7, #20
 8007454:	461a      	mov	r2, r3
 8007456:	210e      	movs	r1, #14
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f7fc fd1f 	bl	8003e9c <VL53L0X_RdWord>
 800745e:	4603      	mov	r3, r0
 8007460:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007462:	8abb      	ldrh	r3, [r7, #20]
 8007464:	045b      	lsls	r3, r3, #17
 8007466:	461a      	mov	r2, r3
 8007468:	4b0e      	ldr	r3, [pc, #56]	; (80074a4 <VL53L0X_GetInterruptThresholds+0x68>)
 800746a:	4013      	ands	r3, r2
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8007470:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10f      	bne.n	8007498 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8007478:	f107 0314 	add.w	r3, r7, #20
 800747c:	461a      	mov	r2, r3
 800747e:	210c      	movs	r1, #12
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f7fc fd0b 	bl	8003e9c <VL53L0X_RdWord>
 8007486:	4603      	mov	r3, r0
 8007488:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800748a:	8abb      	ldrh	r3, [r7, #20]
 800748c:	045b      	lsls	r3, r3, #17
 800748e:	461a      	mov	r2, r3
 8007490:	4b04      	ldr	r3, [pc, #16]	; (80074a4 <VL53L0X_GetInterruptThresholds+0x68>)
 8007492:	4013      	ands	r3, r2
		*pThresholdHigh =
 8007494:	683a      	ldr	r2, [r7, #0]
 8007496:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007498:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3718      	adds	r7, #24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	1ffe0000 	.word	0x1ffe0000

080074a8 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074b2:	2300      	movs	r3, #0
 80074b4:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80074b6:	2300      	movs	r3, #0
 80074b8:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80074ba:	2201      	movs	r2, #1
 80074bc:	210b      	movs	r1, #11
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7fc fc0e 	bl	8003ce0 <VL53L0X_WrByte>
 80074c4:	4603      	mov	r3, r0
 80074c6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80074c8:	2200      	movs	r2, #0
 80074ca:	210b      	movs	r1, #11
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7fc fc07 	bl	8003ce0 <VL53L0X_WrByte>
 80074d2:	4603      	mov	r3, r0
 80074d4:	461a      	mov	r2, r3
 80074d6:	7bfb      	ldrb	r3, [r7, #15]
 80074d8:	4313      	orrs	r3, r2
 80074da:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80074dc:	f107 030d 	add.w	r3, r7, #13
 80074e0:	461a      	mov	r2, r3
 80074e2:	2113      	movs	r1, #19
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f7fc fcaf 	bl	8003e48 <VL53L0X_RdByte>
 80074ea:	4603      	mov	r3, r0
 80074ec:	461a      	mov	r2, r3
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80074f4:	7bbb      	ldrb	r3, [r7, #14]
 80074f6:	3301      	adds	r3, #1
 80074f8:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80074fa:	7b7b      	ldrb	r3, [r7, #13]
 80074fc:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8007500:	2b00      	cmp	r3, #0
 8007502:	d006      	beq.n	8007512 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8007504:	7bbb      	ldrb	r3, [r7, #14]
 8007506:	2b02      	cmp	r3, #2
 8007508:	d803      	bhi.n	8007512 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800750a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d0d3      	beq.n	80074ba <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8007512:	7bbb      	ldrb	r3, [r7, #14]
 8007514:	2b02      	cmp	r3, #2
 8007516:	d901      	bls.n	800751c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8007518:	23f4      	movs	r3, #244	; 0xf4
 800751a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800751c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007532:	2300      	movs	r3, #0
 8007534:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8007536:	f107 030e 	add.w	r3, r7, #14
 800753a:	461a      	mov	r2, r3
 800753c:	2113      	movs	r1, #19
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7fc fc82 	bl	8003e48 <VL53L0X_RdByte>
 8007544:	4603      	mov	r3, r0
 8007546:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8007548:	7bbb      	ldrb	r3, [r7, #14]
 800754a:	f003 0207 	and.w	r2, r3, #7
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8007552:	7bbb      	ldrb	r3, [r7, #14]
 8007554:	f003 0318 	and.w	r3, r3, #24
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800755c:	23fa      	movs	r3, #250	; 0xfa
 800755e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007560:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007578:	2300      	movs	r3, #0
 800757a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	68b9      	ldr	r1, [r7, #8]
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 fa03 	bl	800798c <VL53L0X_perform_ref_spad_management>
 8007586:	4603      	mov	r3, r0
 8007588:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800758a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3718      	adds	r7, #24
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b084      	sub	sp, #16
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075a0:	2300      	movs	r3, #0
 80075a2:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80075a4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80075a8:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80075aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075ae:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80075b0:	f107 0308 	add.w	r3, r7, #8
 80075b4:	461a      	mov	r2, r3
 80075b6:	2128      	movs	r1, #40	; 0x28
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7fc fc6f 	bl	8003e9c <VL53L0X_RdWord>
 80075be:	4603      	mov	r3, r0
 80075c0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80075c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d11e      	bne.n	8007608 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80075ca:	893b      	ldrh	r3, [r7, #8]
 80075cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80075d4:	893b      	ldrh	r3, [r7, #8]
 80075d6:	461a      	mov	r2, r3
 80075d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80075dc:	429a      	cmp	r2, r3
 80075de:	dd0b      	ble.n	80075f8 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80075e0:	893a      	ldrh	r2, [r7, #8]
 80075e2:	897b      	ldrh	r3, [r7, #10]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	b21b      	sxth	r3, r3
 80075ea:	461a      	mov	r2, r3
					* 250;
 80075ec:	23fa      	movs	r3, #250	; 0xfa
 80075ee:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	e007      	b.n	8007608 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80075f8:	893b      	ldrh	r3, [r7, #8]
 80075fa:	b21b      	sxth	r3, r3
 80075fc:	461a      	mov	r2, r3
 80075fe:	23fa      	movs	r3, #250	; 0xfa
 8007600:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8007608:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8007614:	b480      	push	{r7}
 8007616:	b08b      	sub	sp, #44	; 0x2c
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
 8007620:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8007622:	2308      	movs	r3, #8
 8007624:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8007626:	2300      	movs	r3, #0
 8007628:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007630:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	fbb2 f3f3 	udiv	r3, r2, r3
 800763a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	69ba      	ldr	r2, [r7, #24]
 8007640:	fbb3 f2f2 	udiv	r2, r3, r2
 8007644:	69b9      	ldr	r1, [r7, #24]
 8007646:	fb01 f202 	mul.w	r2, r1, r2
 800764a:	1a9b      	subs	r3, r3, r2
 800764c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	627b      	str	r3, [r7, #36]	; 0x24
 8007652:	e030      	b.n	80076b6 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8007654:	2300      	movs	r3, #0
 8007656:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765c:	4413      	add	r3, r2
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8007662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	429a      	cmp	r2, r3
 8007668:	d11e      	bne.n	80076a8 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800766a:	7ffa      	ldrb	r2, [r7, #31]
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	fa42 f303 	asr.w	r3, r2, r3
 8007672:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8007678:	e016      	b.n	80076a8 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800767a:	7ffb      	ldrb	r3, [r7, #31]
 800767c:	f003 0301 	and.w	r3, r3, #1
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00b      	beq.n	800769c <get_next_good_spad+0x88>
				success = 1;
 8007684:	2301      	movs	r3, #1
 8007686:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8007688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768a:	69ba      	ldr	r2, [r7, #24]
 800768c:	fb03 f202 	mul.w	r2, r3, r2
 8007690:	6a3b      	ldr	r3, [r7, #32]
 8007692:	4413      	add	r3, r2
 8007694:	461a      	mov	r2, r3
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	601a      	str	r2, [r3, #0]
				break;
 800769a:	e009      	b.n	80076b0 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800769c:	7ffb      	ldrb	r3, [r7, #31]
 800769e:	085b      	lsrs	r3, r3, #1
 80076a0:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80076a2:	6a3b      	ldr	r3, [r7, #32]
 80076a4:	3301      	adds	r3, #1
 80076a6:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80076a8:	6a3a      	ldr	r2, [r7, #32]
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d3e4      	bcc.n	800767a <get_next_good_spad+0x66>
				coarseIndex++) {
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	3301      	adds	r3, #1
 80076b4:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80076b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d202      	bcs.n	80076c4 <get_next_good_spad+0xb0>
 80076be:	7fbb      	ldrb	r3, [r7, #30]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d0c7      	beq.n	8007654 <get_next_good_spad+0x40>
		}
	}
}
 80076c4:	bf00      	nop
 80076c6:	372c      	adds	r7, #44	; 0x2c
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80076d8:	2301      	movs	r3, #1
 80076da:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	099b      	lsrs	r3, r3, #6
 80076e0:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80076e2:	4a07      	ldr	r2, [pc, #28]	; (8007700 <is_aperture+0x30>)
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <is_aperture+0x22>
		isAperture = 0;
 80076ee:	2300      	movs	r3, #0
 80076f0:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	2000052c 	.word	0x2000052c

08007704 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8007704:	b480      	push	{r7}
 8007706:	b089      	sub	sp, #36	; 0x24
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007710:	2300      	movs	r3, #0
 8007712:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8007714:	2308      	movs	r3, #8
 8007716:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007720:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	69ba      	ldr	r2, [r7, #24]
 8007726:	fbb3 f2f2 	udiv	r2, r3, r2
 800772a:	69b9      	ldr	r1, [r7, #24]
 800772c:	fb01 f202 	mul.w	r2, r1, r2
 8007730:	1a9b      	subs	r3, r3, r2
 8007732:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	429a      	cmp	r2, r3
 800773a:	d302      	bcc.n	8007742 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800773c:	23ce      	movs	r3, #206	; 0xce
 800773e:	77fb      	strb	r3, [r7, #31]
 8007740:	e010      	b.n	8007764 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	4413      	add	r3, r2
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	b25a      	sxtb	r2, r3
 800774c:	2101      	movs	r1, #1
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	fa01 f303 	lsl.w	r3, r1, r3
 8007754:	b25b      	sxtb	r3, r3
 8007756:	4313      	orrs	r3, r2
 8007758:	b259      	sxtb	r1, r3
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	4413      	add	r3, r2
 8007760:	b2ca      	uxtb	r2, r1
 8007762:	701a      	strb	r2, [r3, #0]

	return status;
 8007764:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3724      	adds	r7, #36	; 0x24
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800777e:	2306      	movs	r3, #6
 8007780:	683a      	ldr	r2, [r7, #0]
 8007782:	21b0      	movs	r1, #176	; 0xb0
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7fc fa4f 	bl	8003c28 <VL53L0X_WriteMulti>
 800778a:	4603      	mov	r3, r0
 800778c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800778e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b084      	sub	sp, #16
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80077a4:	2306      	movs	r3, #6
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	21b0      	movs	r1, #176	; 0xb0
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7fc fa6c 	bl	8003c88 <VL53L0X_ReadMulti>
 80077b0:	4603      	mov	r3, r0
 80077b2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80077b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b08c      	sub	sp, #48	; 0x30
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	607a      	str	r2, [r7, #4]
 80077ca:	603b      	str	r3, [r7, #0]
 80077cc:	460b      	mov	r3, r1
 80077ce:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80077d0:	2300      	movs	r3, #0
 80077d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80077d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077d8:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80077da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077dc:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80077de:	2300      	movs	r3, #0
 80077e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80077e2:	e02b      	b.n	800783c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80077e4:	f107 031c 	add.w	r3, r7, #28
 80077e8:	6a3a      	ldr	r2, [r7, #32]
 80077ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f7ff ff11 	bl	8007614 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077f8:	d103      	bne.n	8007802 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80077fa:	23ce      	movs	r3, #206	; 0xce
 80077fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007800:	e020      	b.n	8007844 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	461a      	mov	r2, r3
 8007806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007808:	4413      	add	r3, r2
 800780a:	4618      	mov	r0, r3
 800780c:	f7ff ff60 	bl	80076d0 <is_aperture>
 8007810:	4603      	mov	r3, r0
 8007812:	461a      	mov	r2, r3
 8007814:	7afb      	ldrb	r3, [r7, #11]
 8007816:	4293      	cmp	r3, r2
 8007818:	d003      	beq.n	8007822 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800781a:	23ce      	movs	r3, #206	; 0xce
 800781c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007820:	e010      	b.n	8007844 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8007826:	6a3a      	ldr	r2, [r7, #32]
 8007828:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800782a:	6838      	ldr	r0, [r7, #0]
 800782c:	f7ff ff6a 	bl	8007704 <enable_spad_bit>
		currentSpad++;
 8007830:	6a3b      	ldr	r3, [r7, #32]
 8007832:	3301      	adds	r3, #1
 8007834:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007838:	3301      	adds	r3, #1
 800783a:	62bb      	str	r3, [r7, #40]	; 0x28
 800783c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800783e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007840:	429a      	cmp	r2, r3
 8007842:	d3cf      	bcc.n	80077e4 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8007844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007846:	6a3a      	ldr	r2, [r7, #32]
 8007848:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800784a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800784e:	2b00      	cmp	r3, #0
 8007850:	d106      	bne.n	8007860 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f7ff ff8d 	bl	8007774 <set_ref_spad_map>
 800785a:	4603      	mov	r3, r0
 800785c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8007860:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007864:	2b00      	cmp	r3, #0
 8007866:	d121      	bne.n	80078ac <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8007868:	f107 0314 	add.w	r3, r7, #20
 800786c:	4619      	mov	r1, r3
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f7ff ff93 	bl	800779a <get_ref_spad_map>
 8007874:	4603      	mov	r3, r0
 8007876:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800787a:	2300      	movs	r3, #0
 800787c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800787e:	e011      	b.n	80078a4 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007884:	4413      	add	r3, r2
 8007886:	781a      	ldrb	r2, [r3, #0]
 8007888:	f107 0114 	add.w	r1, r7, #20
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	440b      	add	r3, r1
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	429a      	cmp	r2, r3
 8007894:	d003      	beq.n	800789e <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007896:	23ce      	movs	r3, #206	; 0xce
 8007898:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800789c:	e006      	b.n	80078ac <enable_ref_spads+0xec>
			}
			i++;
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	3301      	adds	r3, #1
 80078a2:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80078a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d3e9      	bcc.n	8007880 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80078ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3730      	adds	r7, #48	; 0x30
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b08a      	sub	sp, #40	; 0x28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80078c2:	2300      	movs	r3, #0
 80078c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80078c8:	2300      	movs	r3, #0
 80078ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80078d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80078d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d107      	bne.n	80078f0 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80078e0:	22c0      	movs	r2, #192	; 0xc0
 80078e2:	2101      	movs	r1, #1
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7fc f9fb 	bl	8003ce0 <VL53L0X_WrByte>
 80078ea:	4603      	mov	r3, r0
 80078ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80078f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d108      	bne.n	800790a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80078f8:	f107 0308 	add.w	r3, r7, #8
 80078fc:	4619      	mov	r1, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7ff fc48 	bl	8007194 <VL53L0X_PerformSingleRangingMeasurement>
 8007904:	4603      	mov	r3, r0
 8007906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800790a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800790e:	2b00      	cmp	r3, #0
 8007910:	d107      	bne.n	8007922 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007912:	2201      	movs	r2, #1
 8007914:	21ff      	movs	r1, #255	; 0xff
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7fc f9e2 	bl	8003ce0 <VL53L0X_WrByte>
 800791c:	4603      	mov	r3, r0
 800791e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8007922:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007926:	2b00      	cmp	r3, #0
 8007928:	d107      	bne.n	800793a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800792a:	683a      	ldr	r2, [r7, #0]
 800792c:	21b6      	movs	r1, #182	; 0xb6
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7fc fab4 	bl	8003e9c <VL53L0X_RdWord>
 8007934:	4603      	mov	r3, r0
 8007936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800793a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800793e:	2b00      	cmp	r3, #0
 8007940:	d107      	bne.n	8007952 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007942:	2200      	movs	r2, #0
 8007944:	21ff      	movs	r1, #255	; 0xff
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7fc f9ca 	bl	8003ce0 <VL53L0X_WrByte>
 800794c:	4603      	mov	r3, r0
 800794e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8007952:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007956:	2b00      	cmp	r3, #0
 8007958:	d112      	bne.n	8007980 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800795a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800795e:	461a      	mov	r2, r3
 8007960:	2101      	movs	r1, #1
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7fc f9bc 	bl	8003ce0 <VL53L0X_WrByte>
 8007968:	4603      	mov	r3, r0
 800796a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800796e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007972:	2b00      	cmp	r3, #0
 8007974:	d104      	bne.n	8007980 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800797c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8007980:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007984:	4618      	mov	r0, r3
 8007986:	3728      	adds	r7, #40	; 0x28
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800798c:	b590      	push	{r4, r7, lr}
 800798e:	b09d      	sub	sp, #116	; 0x74
 8007990:	af06      	add	r7, sp, #24
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007998:	2300      	movs	r3, #0
 800799a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800799e:	23b4      	movs	r3, #180	; 0xb4
 80079a0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80079a4:	2303      	movs	r3, #3
 80079a6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80079a8:	232c      	movs	r3, #44	; 0x2c
 80079aa:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80079ac:	2300      	movs	r3, #0
 80079ae:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80079b0:	2300      	movs	r3, #0
 80079b2:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80079b4:	2300      	movs	r3, #0
 80079b6:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80079b8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80079bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80079be:	2300      	movs	r3, #0
 80079c0:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80079c2:	2300      	movs	r3, #0
 80079c4:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80079c6:	2306      	movs	r3, #6
 80079c8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80079ca:	2300      	movs	r3, #0
 80079cc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80079ce:	2300      	movs	r3, #0
 80079d0:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80079d2:	2300      	movs	r3, #0
 80079d4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80079d8:	2300      	movs	r3, #0
 80079da:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80079dc:	2300      	movs	r3, #0
 80079de:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80079e0:	2300      	movs	r3, #0
 80079e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80079e4:	2300      	movs	r3, #0
 80079e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 80079f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80079f2:	2300      	movs	r3, #0
 80079f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80079f6:	e009      	b.n	8007a0c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007a02:	2200      	movs	r2, #0
 8007a04:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a08:	3301      	adds	r3, #1
 8007a0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d3f1      	bcc.n	80079f8 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007a14:	2201      	movs	r2, #1
 8007a16:	21ff      	movs	r1, #255	; 0xff
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f7fc f961 	bl	8003ce0 <VL53L0X_WrByte>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007a24:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d107      	bne.n	8007a3c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	214f      	movs	r1, #79	; 0x4f
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f7fc f955 	bl	8003ce0 <VL53L0X_WrByte>
 8007a36:	4603      	mov	r3, r0
 8007a38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8007a3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d107      	bne.n	8007a54 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8007a44:	222c      	movs	r2, #44	; 0x2c
 8007a46:	214e      	movs	r1, #78	; 0x4e
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f7fc f949 	bl	8003ce0 <VL53L0X_WrByte>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007a54:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d107      	bne.n	8007a6c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	21ff      	movs	r1, #255	; 0xff
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f7fc f93d 	bl	8003ce0 <VL53L0X_WrByte>
 8007a66:	4603      	mov	r3, r0
 8007a68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007a6c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d109      	bne.n	8007a88 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8007a74:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007a78:	461a      	mov	r2, r3
 8007a7a:	21b6      	movs	r1, #182	; 0xb6
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f7fc f92f 	bl	8003ce0 <VL53L0X_WrByte>
 8007a82:	4603      	mov	r3, r0
 8007a84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8007a88:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d107      	bne.n	8007aa0 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8007a90:	2200      	movs	r2, #0
 8007a92:	2180      	movs	r1, #128	; 0x80
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f7fc f923 	bl	8003ce0 <VL53L0X_WrByte>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8007aa0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10a      	bne.n	8007abe <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8007aa8:	f107 0210 	add.w	r2, r7, #16
 8007aac:	f107 0111 	add.w	r1, r7, #17
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f000 fbbb 	bl	800822e <VL53L0X_perform_ref_calibration>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8007abe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d121      	bne.n	8007b0a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8007aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007acc:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8007ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ad4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8007ae2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007ae6:	f107 0218 	add.w	r2, r7, #24
 8007aea:	9204      	str	r2, [sp, #16]
 8007aec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007aee:	9203      	str	r2, [sp, #12]
 8007af0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007af2:	9202      	str	r2, [sp, #8]
 8007af4:	9301      	str	r3, [sp, #4]
 8007af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	4623      	mov	r3, r4
 8007afc:	4602      	mov	r2, r0
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f7ff fe5e 	bl	80077c0 <enable_ref_spads>
 8007b04:	4603      	mov	r3, r0
 8007b06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007b0a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d174      	bne.n	8007bfc <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8007b16:	f107 0312 	add.w	r3, r7, #18
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f7ff fecb 	bl	80078b8 <perform_ref_signal_measurement>
 8007b22:	4603      	mov	r3, r0
 8007b24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007b28:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d161      	bne.n	8007bf4 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8007b30:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007b32:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d25d      	bcs.n	8007bf4 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8007b38:	2300      	movs	r3, #0
 8007b3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b3c:	e009      	b.n	8007b52 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007b48:	2200      	movs	r2, #0
 8007b4a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8007b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b4e:	3301      	adds	r3, #1
 8007b50:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d3f1      	bcc.n	8007b3e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8007b5a:	e002      	b.n	8007b62 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8007b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b5e:	3301      	adds	r3, #1
 8007b60:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8007b62:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8007b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b68:	4413      	add	r3, r2
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7ff fdb0 	bl	80076d0 <is_aperture>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d103      	bne.n	8007b7e <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8007b76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d3ee      	bcc.n	8007b5c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8007b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b84:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8007b92:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007b96:	f107 0218 	add.w	r2, r7, #24
 8007b9a:	9204      	str	r2, [sp, #16]
 8007b9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b9e:	9203      	str	r2, [sp, #12]
 8007ba0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ba2:	9202      	str	r2, [sp, #8]
 8007ba4:	9301      	str	r3, [sp, #4]
 8007ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	4623      	mov	r3, r4
 8007bac:	4602      	mov	r2, r0
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f7ff fe06 	bl	80077c0 <enable_ref_spads>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8007bba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d11b      	bne.n	8007bfa <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8007bc6:	f107 0312 	add.w	r3, r7, #18
 8007bca:	4619      	mov	r1, r3
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f7ff fe73 	bl	80078b8 <perform_ref_signal_measurement>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8007bd8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10c      	bne.n	8007bfa <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8007be0:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8007be2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d208      	bcs.n	8007bfa <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8007be8:	2301      	movs	r3, #1
 8007bea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8007bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8007bf2:	e002      	b.n	8007bfa <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bf8:	e000      	b.n	8007bfc <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8007bfa:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007bfc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f040 80af 	bne.w	8007d64 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8007c06:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8007c08:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	f240 80aa 	bls.w	8007d64 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8007c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8007c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c18:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8007c20:	f107 031c 	add.w	r3, r7, #28
 8007c24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c26:	4618      	mov	r0, r3
 8007c28:	f012 fc70 	bl	801a50c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8007c2c:	8a7b      	ldrh	r3, [r7, #18]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	bfb8      	it	lt
 8007c38:	425b      	neglt	r3, r3
 8007c3a:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8007c42:	e086      	b.n	8007d52 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8007c4a:	f107 0314 	add.w	r3, r7, #20
 8007c4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c52:	f7ff fcdf 	bl	8007614 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c5c:	d103      	bne.n	8007c66 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007c5e:	23ce      	movs	r3, #206	; 0xce
 8007c60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8007c64:	e07e      	b.n	8007d64 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8007c66:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7ff fd2e 	bl	80076d0 <is_aperture>
 8007c74:	4603      	mov	r3, r0
 8007c76:	461a      	mov	r2, r3
 8007c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d003      	beq.n	8007c86 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8007c84:	e06e      	b.n	8007d64 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8007c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c88:	3301      	adds	r3, #1
 8007c8a:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8007c96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7ff fd32 	bl	8007704 <enable_spad_bit>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8007ca6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d10c      	bne.n	8007cc8 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8007cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8007cba:	4619      	mov	r1, r3
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f7ff fd59 	bl	8007774 <set_ref_spad_map>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8007cc8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d146      	bne.n	8007d5e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8007cd0:	f107 0312 	add.w	r3, r7, #18
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f7ff fdee 	bl	80078b8 <perform_ref_signal_measurement>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8007ce2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d13b      	bne.n	8007d62 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8007cea:	8a7b      	ldrh	r3, [r7, #18]
 8007cec:	461a      	mov	r2, r3
 8007cee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	bfb8      	it	lt
 8007cf6:	425b      	neglt	r3, r3
 8007cf8:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8007cfa:	8a7b      	ldrh	r3, [r7, #18]
 8007cfc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d21c      	bcs.n	8007d3c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8007d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d914      	bls.n	8007d34 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8007d0a:	f107 031c 	add.w	r3, r7, #28
 8007d0e:	4619      	mov	r1, r3
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f7ff fd2f 	bl	8007774 <set_ref_spad_map>
 8007d16:	4603      	mov	r3, r0
 8007d18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8007d22:	f107 011c 	add.w	r1, r7, #28
 8007d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f012 fbef 	bl	801a50c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8007d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d30:	3b01      	subs	r3, #1
 8007d32:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8007d34:	2301      	movs	r3, #1
 8007d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d3a:	e00a      	b.n	8007d52 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8007d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8007d46:	f107 031c 	add.w	r3, r7, #28
 8007d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f012 fbdd 	bl	801a50c <memcpy>
		while (!complete) {
 8007d52:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f43f af74 	beq.w	8007c44 <VL53L0X_perform_ref_spad_management+0x2b8>
 8007d5c:	e002      	b.n	8007d64 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007d5e:	bf00      	nop
 8007d60:	e000      	b.n	8007d64 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007d62:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007d64:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d115      	bne.n	8007d98 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d70:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8007d78:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	781a      	ldrb	r2, [r3, #0]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8007d98:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	375c      	adds	r7, #92	; 0x5c
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd90      	pop	{r4, r7, pc}

08007da4 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8007da4:	b590      	push	{r4, r7, lr}
 8007da6:	b093      	sub	sp, #76	; 0x4c
 8007da8:	af06      	add	r7, sp, #24
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	4613      	mov	r3, r2
 8007db0:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007db2:	2300      	movs	r3, #0
 8007db4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8007db8:	2300      	movs	r3, #0
 8007dba:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8007dbc:	23b4      	movs	r3, #180	; 0xb4
 8007dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8007dc2:	2306      	movs	r3, #6
 8007dc4:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8007dc6:	232c      	movs	r3, #44	; 0x2c
 8007dc8:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007dca:	2201      	movs	r2, #1
 8007dcc:	21ff      	movs	r1, #255	; 0xff
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f7fb ff86 	bl	8003ce0 <VL53L0X_WrByte>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007dda:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d107      	bne.n	8007df2 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8007de2:	2200      	movs	r2, #0
 8007de4:	214f      	movs	r1, #79	; 0x4f
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f7fb ff7a 	bl	8003ce0 <VL53L0X_WrByte>
 8007dec:	4603      	mov	r3, r0
 8007dee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8007df2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d107      	bne.n	8007e0a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8007dfa:	222c      	movs	r2, #44	; 0x2c
 8007dfc:	214e      	movs	r1, #78	; 0x4e
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f7fb ff6e 	bl	8003ce0 <VL53L0X_WrByte>
 8007e04:	4603      	mov	r3, r0
 8007e06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007e0a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d107      	bne.n	8007e22 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007e12:	2200      	movs	r2, #0
 8007e14:	21ff      	movs	r1, #255	; 0xff
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f7fb ff62 	bl	8003ce0 <VL53L0X_WrByte>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007e22:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d109      	bne.n	8007e3e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8007e2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e2e:	461a      	mov	r2, r3
 8007e30:	21b6      	movs	r1, #182	; 0xb6
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f7fb ff54 	bl	8003ce0 <VL53L0X_WrByte>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8007e3e:	2300      	movs	r3, #0
 8007e40:	627b      	str	r3, [r7, #36]	; 0x24
 8007e42:	e009      	b.n	8007e58 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e48:	4413      	add	r3, r2
 8007e4a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007e4e:	2200      	movs	r2, #0
 8007e50:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e54:	3301      	adds	r3, #1
 8007e56:	627b      	str	r3, [r7, #36]	; 0x24
 8007e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d3f1      	bcc.n	8007e44 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8007e60:	79fb      	ldrb	r3, [r7, #7]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d011      	beq.n	8007e8a <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007e66:	e002      	b.n	8007e6e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8007e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007e6e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e74:	4413      	add	r3, r2
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7ff fc2a 	bl	80076d0 <is_aperture>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d103      	bne.n	8007e8a <VL53L0X_set_reference_spads+0xe6>
 8007e82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d3ee      	bcc.n	8007e68 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8007e96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e9a:	79f9      	ldrb	r1, [r7, #7]
 8007e9c:	f107 0214 	add.w	r2, r7, #20
 8007ea0:	9204      	str	r2, [sp, #16]
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	9203      	str	r2, [sp, #12]
 8007ea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ea8:	9202      	str	r2, [sp, #8]
 8007eaa:	9301      	str	r3, [sp, #4]
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	4623      	mov	r3, r4
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f7ff fc83 	bl	80077c0 <enable_ref_spads>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8007ec0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10c      	bne.n	8007ee2 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	b2da      	uxtb	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	79fa      	ldrb	r2, [r7, #7]
 8007ede:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8007ee2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3734      	adds	r7, #52	; 0x34
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd90      	pop	{r4, r7, pc}

08007eee <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b084      	sub	sp, #16
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007efa:	2300      	movs	r3, #0
 8007efc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10a      	bne.n	8007f1c <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8007f06:	78fb      	ldrb	r3, [r7, #3]
 8007f08:	f043 0301 	orr.w	r3, r3, #1
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	461a      	mov	r2, r3
 8007f10:	2100      	movs	r1, #0
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7fb fee4 	bl	8003ce0 <VL53L0X_WrByte>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8007f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d104      	bne.n	8007f2e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 f9bf 	bl	80082a8 <VL53L0X_measurement_poll_for_completion>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d105      	bne.n	8007f42 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007f36:	2100      	movs	r1, #0
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f7ff fab5 	bl	80074a8 <VL53L0X_ClearInterruptMask>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d106      	bne.n	8007f58 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7fb fec6 	bl	8003ce0 <VL53L0X_WrByte>
 8007f54:	4603      	mov	r3, r0
 8007f56:	73fb      	strb	r3, [r7, #15]

	return Status;
 8007f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	4608      	mov	r0, r1
 8007f6e:	4611      	mov	r1, r2
 8007f70:	461a      	mov	r2, r3
 8007f72:	4603      	mov	r3, r0
 8007f74:	70fb      	strb	r3, [r7, #3]
 8007f76:	460b      	mov	r3, r1
 8007f78:	70bb      	strb	r3, [r7, #2]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8007f82:	2300      	movs	r3, #0
 8007f84:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007f86:	2201      	movs	r2, #1
 8007f88:	21ff      	movs	r1, #255	; 0xff
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f7fb fea8 	bl	8003ce0 <VL53L0X_WrByte>
 8007f90:	4603      	mov	r3, r0
 8007f92:	461a      	mov	r2, r3
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f7fb fe9e 	bl	8003ce0 <VL53L0X_WrByte>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	7bfb      	ldrb	r3, [r7, #15]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007fae:	2200      	movs	r2, #0
 8007fb0:	21ff      	movs	r1, #255	; 0xff
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7fb fe94 	bl	8003ce0 <VL53L0X_WrByte>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	461a      	mov	r2, r3
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8007fc2:	78fb      	ldrb	r3, [r7, #3]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d01e      	beq.n	8008006 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8007fc8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d009      	beq.n	8007fe4 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8007fd0:	69ba      	ldr	r2, [r7, #24]
 8007fd2:	21cb      	movs	r1, #203	; 0xcb
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f7fb ff37 	bl	8003e48 <VL53L0X_RdByte>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	461a      	mov	r2, r3
 8007fde:	7bfb      	ldrb	r3, [r7, #15]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007fe4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d02a      	beq.n	8008042 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8007fec:	f107 030e 	add.w	r3, r7, #14
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	21ee      	movs	r1, #238	; 0xee
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f7fb ff27 	bl	8003e48 <VL53L0X_RdByte>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	7bfb      	ldrb	r3, [r7, #15]
 8008000:	4313      	orrs	r3, r2
 8008002:	73fb      	strb	r3, [r7, #15]
 8008004:	e01d      	b.n	8008042 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8008006:	f897 3020 	ldrb.w	r3, [r7, #32]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00a      	beq.n	8008024 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800800e:	78bb      	ldrb	r3, [r7, #2]
 8008010:	461a      	mov	r2, r3
 8008012:	21cb      	movs	r1, #203	; 0xcb
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f7fb fe63 	bl	8003ce0 <VL53L0X_WrByte>
 800801a:	4603      	mov	r3, r0
 800801c:	461a      	mov	r2, r3
 800801e:	7bfb      	ldrb	r3, [r7, #15]
 8008020:	4313      	orrs	r3, r2
 8008022:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008024:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00a      	beq.n	8008042 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800802c:	787b      	ldrb	r3, [r7, #1]
 800802e:	2280      	movs	r2, #128	; 0x80
 8008030:	21ee      	movs	r1, #238	; 0xee
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f7fb fed4 	bl	8003de0 <VL53L0X_UpdateByte>
 8008038:	4603      	mov	r3, r0
 800803a:	461a      	mov	r2, r3
 800803c:	7bfb      	ldrb	r3, [r7, #15]
 800803e:	4313      	orrs	r3, r2
 8008040:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008042:	2201      	movs	r2, #1
 8008044:	21ff      	movs	r1, #255	; 0xff
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7fb fe4a 	bl	8003ce0 <VL53L0X_WrByte>
 800804c:	4603      	mov	r3, r0
 800804e:	461a      	mov	r2, r3
 8008050:	7bfb      	ldrb	r3, [r7, #15]
 8008052:	4313      	orrs	r3, r2
 8008054:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008056:	2201      	movs	r2, #1
 8008058:	2100      	movs	r1, #0
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7fb fe40 	bl	8003ce0 <VL53L0X_WrByte>
 8008060:	4603      	mov	r3, r0
 8008062:	461a      	mov	r2, r3
 8008064:	7bfb      	ldrb	r3, [r7, #15]
 8008066:	4313      	orrs	r3, r2
 8008068:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800806a:	2200      	movs	r2, #0
 800806c:	21ff      	movs	r1, #255	; 0xff
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7fb fe36 	bl	8003ce0 <VL53L0X_WrByte>
 8008074:	4603      	mov	r3, r0
 8008076:	461a      	mov	r2, r3
 8008078:	7bfb      	ldrb	r3, [r7, #15]
 800807a:	4313      	orrs	r3, r2
 800807c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800807e:	7bbb      	ldrb	r3, [r7, #14]
 8008080:	f023 0310 	bic.w	r3, r3, #16
 8008084:	b2da      	uxtb	r2, r3
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	701a      	strb	r2, [r3, #0]

	return Status;
 800808a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b08a      	sub	sp, #40	; 0x28
 800809a:	af04      	add	r7, sp, #16
 800809c:	60f8      	str	r0, [r7, #12]
 800809e:	60b9      	str	r1, [r7, #8]
 80080a0:	4611      	mov	r1, r2
 80080a2:	461a      	mov	r2, r3
 80080a4:	460b      	mov	r3, r1
 80080a6:	71fb      	strb	r3, [r7, #7]
 80080a8:	4613      	mov	r3, r2
 80080aa:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80080ac:	2300      	movs	r3, #0
 80080ae:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80080b0:	2300      	movs	r3, #0
 80080b2:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80080b8:	2300      	movs	r3, #0
 80080ba:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80080bc:	2300      	movs	r3, #0
 80080be:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80080c0:	79bb      	ldrb	r3, [r7, #6]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d003      	beq.n	80080ce <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80080cc:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80080ce:	2201      	movs	r2, #1
 80080d0:	2101      	movs	r1, #1
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f7fb fe04 	bl	8003ce0 <VL53L0X_WrByte>
 80080d8:	4603      	mov	r3, r0
 80080da:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80080dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d105      	bne.n	80080f0 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80080e4:	2140      	movs	r1, #64	; 0x40
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f7ff ff01 	bl	8007eee <VL53L0X_perform_single_ref_calibration>
 80080ec:	4603      	mov	r3, r0
 80080ee:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80080f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d115      	bne.n	8008124 <VL53L0X_perform_vhv_calibration+0x8e>
 80080f8:	79fb      	ldrb	r3, [r7, #7]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d112      	bne.n	8008124 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80080fe:	7d39      	ldrb	r1, [r7, #20]
 8008100:	7d7a      	ldrb	r2, [r7, #21]
 8008102:	2300      	movs	r3, #0
 8008104:	9303      	str	r3, [sp, #12]
 8008106:	2301      	movs	r3, #1
 8008108:	9302      	str	r3, [sp, #8]
 800810a:	f107 0313 	add.w	r3, r7, #19
 800810e:	9301      	str	r3, [sp, #4]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	9300      	str	r3, [sp, #0]
 8008114:	460b      	mov	r3, r1
 8008116:	2101      	movs	r1, #1
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f7ff ff23 	bl	8007f64 <VL53L0X_ref_calibration_io>
 800811e:	4603      	mov	r3, r0
 8008120:	75fb      	strb	r3, [r7, #23]
 8008122:	e002      	b.n	800812a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	2200      	movs	r2, #0
 8008128:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800812a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d112      	bne.n	8008158 <VL53L0X_perform_vhv_calibration+0xc2>
 8008132:	79bb      	ldrb	r3, [r7, #6]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00f      	beq.n	8008158 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008138:	7dbb      	ldrb	r3, [r7, #22]
 800813a:	461a      	mov	r2, r3
 800813c:	2101      	movs	r1, #1
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f7fb fdce 	bl	8003ce0 <VL53L0X_WrByte>
 8008144:	4603      	mov	r3, r0
 8008146:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008148:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d103      	bne.n	8008158 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	7dba      	ldrb	r2, [r7, #22]
 8008154:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008158:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800815c:	4618      	mov	r0, r3
 800815e:	3718      	adds	r7, #24
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b08a      	sub	sp, #40	; 0x28
 8008168:	af04      	add	r7, sp, #16
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	4611      	mov	r1, r2
 8008170:	461a      	mov	r2, r3
 8008172:	460b      	mov	r3, r1
 8008174:	71fb      	strb	r3, [r7, #7]
 8008176:	4613      	mov	r3, r2
 8008178:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800817a:	2300      	movs	r3, #0
 800817c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800817e:	2300      	movs	r3, #0
 8008180:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008182:	2300      	movs	r3, #0
 8008184:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008186:	2300      	movs	r3, #0
 8008188:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800818a:	79bb      	ldrb	r3, [r7, #6]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d003      	beq.n	8008198 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008196:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8008198:	2202      	movs	r2, #2
 800819a:	2101      	movs	r1, #1
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f7fb fd9f 	bl	8003ce0 <VL53L0X_WrByte>
 80081a2:	4603      	mov	r3, r0
 80081a4:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80081a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d105      	bne.n	80081ba <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80081ae:	2100      	movs	r1, #0
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f7ff fe9c 	bl	8007eee <VL53L0X_perform_single_ref_calibration>
 80081b6:	4603      	mov	r3, r0
 80081b8:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80081ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d115      	bne.n	80081ee <VL53L0X_perform_phase_calibration+0x8a>
 80081c2:	79fb      	ldrb	r3, [r7, #7]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d112      	bne.n	80081ee <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80081c8:	7d39      	ldrb	r1, [r7, #20]
 80081ca:	7d7a      	ldrb	r2, [r7, #21]
 80081cc:	2301      	movs	r3, #1
 80081ce:	9303      	str	r3, [sp, #12]
 80081d0:	2300      	movs	r3, #0
 80081d2:	9302      	str	r3, [sp, #8]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	9301      	str	r3, [sp, #4]
 80081d8:	f107 0313 	add.w	r3, r7, #19
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	460b      	mov	r3, r1
 80081e0:	2101      	movs	r1, #1
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	f7ff febe 	bl	8007f64 <VL53L0X_ref_calibration_io>
 80081e8:	4603      	mov	r3, r0
 80081ea:	75fb      	strb	r3, [r7, #23]
 80081ec:	e002      	b.n	80081f4 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	2200      	movs	r2, #0
 80081f2:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80081f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d112      	bne.n	8008222 <VL53L0X_perform_phase_calibration+0xbe>
 80081fc:	79bb      	ldrb	r3, [r7, #6]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00f      	beq.n	8008222 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008202:	7dbb      	ldrb	r3, [r7, #22]
 8008204:	461a      	mov	r2, r3
 8008206:	2101      	movs	r1, #1
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f7fb fd69 	bl	8003ce0 <VL53L0X_WrByte>
 800820e:	4603      	mov	r3, r0
 8008210:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008212:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d103      	bne.n	8008222 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	7dba      	ldrb	r2, [r7, #22]
 800821e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008222:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008226:	4618      	mov	r0, r3
 8008228:	3718      	adds	r7, #24
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b086      	sub	sp, #24
 8008232:	af00      	add	r7, sp, #0
 8008234:	60f8      	str	r0, [r7, #12]
 8008236:	60b9      	str	r1, [r7, #8]
 8008238:	607a      	str	r2, [r7, #4]
 800823a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800823c:	2300      	movs	r3, #0
 800823e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008240:	2300      	movs	r3, #0
 8008242:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800824a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800824c:	78fa      	ldrb	r2, [r7, #3]
 800824e:	2300      	movs	r3, #0
 8008250:	68b9      	ldr	r1, [r7, #8]
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f7ff ff1f 	bl	8008096 <VL53L0X_perform_vhv_calibration>
 8008258:	4603      	mov	r3, r0
 800825a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800825c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d107      	bne.n	8008274 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8008264:	78fa      	ldrb	r2, [r7, #3]
 8008266:	2300      	movs	r3, #0
 8008268:	6879      	ldr	r1, [r7, #4]
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f7ff ff7a 	bl	8008164 <VL53L0X_perform_phase_calibration>
 8008270:	4603      	mov	r3, r0
 8008272:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8008274:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10f      	bne.n	800829c <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800827c:	7dbb      	ldrb	r3, [r7, #22]
 800827e:	461a      	mov	r2, r3
 8008280:	2101      	movs	r1, #1
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f7fb fd2c 	bl	8003ce0 <VL53L0X_WrByte>
 8008288:	4603      	mov	r3, r0
 800828a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800828c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d103      	bne.n	800829c <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	7dba      	ldrb	r2, [r7, #22]
 8008298:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800829c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3718      	adds	r7, #24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b086      	sub	sp, #24
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082b0:	2300      	movs	r3, #0
 80082b2:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80082b4:	2300      	movs	r3, #0
 80082b6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80082bc:	f107 030f 	add.w	r3, r7, #15
 80082c0:	4619      	mov	r1, r3
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7fe fe02 	bl	8006ecc <VL53L0X_GetMeasurementDataReady>
 80082c8:	4603      	mov	r3, r0
 80082ca:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80082cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d110      	bne.n	80082f6 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80082d4:	7bfb      	ldrb	r3, [r7, #15]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d00f      	beq.n	80082fa <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	3301      	adds	r3, #1
 80082de:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80082e6:	d302      	bcc.n	80082ee <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80082e8:	23f9      	movs	r3, #249	; 0xf9
 80082ea:	75fb      	strb	r3, [r7, #23]
			break;
 80082ec:	e006      	b.n	80082fc <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7fb fe48 	bl	8003f84 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80082f4:	e7e2      	b.n	80082bc <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80082f6:	bf00      	nop
 80082f8:	e000      	b.n	80082fc <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 80082fa:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80082fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3718      	adds	r7, #24
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	4603      	mov	r3, r0
 8008310:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8008312:	2300      	movs	r3, #0
 8008314:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8008316:	79fb      	ldrb	r3, [r7, #7]
 8008318:	3301      	adds	r3, #1
 800831a:	b2db      	uxtb	r3, r3
 800831c:	005b      	lsls	r3, r3, #1
 800831e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8008320:	7bfb      	ldrb	r3, [r7, #15]
}
 8008322:	4618      	mov	r0, r3
 8008324:	3714      	adds	r7, #20
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800832e:	b480      	push	{r7}
 8008330:	b085      	sub	sp, #20
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8008336:	2300      	movs	r3, #0
 8008338:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800833a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800833e:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8008340:	e002      	b.n	8008348 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	089b      	lsrs	r3, r3, #2
 8008346:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8008348:	68ba      	ldr	r2, [r7, #8]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	429a      	cmp	r2, r3
 800834e:	d8f8      	bhi.n	8008342 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8008350:	e017      	b.n	8008382 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	4413      	add	r3, r2
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	429a      	cmp	r2, r3
 800835c:	d30b      	bcc.n	8008376 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	4413      	add	r3, r2
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	085b      	lsrs	r3, r3, #1
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	4413      	add	r3, r2
 8008372:	60fb      	str	r3, [r7, #12]
 8008374:	e002      	b.n	800837c <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	085b      	lsrs	r3, r3, #1
 800837a:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	089b      	lsrs	r3, r3, #2
 8008380:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d1e4      	bne.n	8008352 <VL53L0X_isqrt+0x24>
	}

	return res;
 8008388:	68fb      	ldr	r3, [r7, #12]
}
 800838a:	4618      	mov	r0, r3
 800838c:	3714      	adds	r7, #20
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b086      	sub	sp, #24
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800839e:	2300      	movs	r3, #0
 80083a0:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80083a2:	2200      	movs	r2, #0
 80083a4:	2183      	movs	r1, #131	; 0x83
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f7fb fc9a 	bl	8003ce0 <VL53L0X_WrByte>
 80083ac:	4603      	mov	r3, r0
 80083ae:	461a      	mov	r2, r3
 80083b0:	7dfb      	ldrb	r3, [r7, #23]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80083b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d11e      	bne.n	80083fc <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80083be:	2300      	movs	r3, #0
 80083c0:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80083c2:	f107 030f 	add.w	r3, r7, #15
 80083c6:	461a      	mov	r2, r3
 80083c8:	2183      	movs	r1, #131	; 0x83
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f7fb fd3c 	bl	8003e48 <VL53L0X_RdByte>
 80083d0:	4603      	mov	r3, r0
 80083d2:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80083d4:	7bfb      	ldrb	r3, [r7, #15]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10a      	bne.n	80083f0 <VL53L0X_device_read_strobe+0x5a>
 80083da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d106      	bne.n	80083f0 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	3301      	adds	r3, #1
 80083e6:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80083ee:	d3e8      	bcc.n	80083c2 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80083f6:	d301      	bcc.n	80083fc <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 80083f8:	23f9      	movs	r3, #249	; 0xf9
 80083fa:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80083fc:	2201      	movs	r2, #1
 80083fe:	2183      	movs	r1, #131	; 0x83
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f7fb fc6d 	bl	8003ce0 <VL53L0X_WrByte>
 8008406:	4603      	mov	r3, r0
 8008408:	461a      	mov	r2, r3
 800840a:	7dfb      	ldrb	r3, [r7, #23]
 800840c:	4313      	orrs	r3, r2
 800840e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8008410:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008414:	4618      	mov	r0, r3
 8008416:	3718      	adds	r7, #24
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b098      	sub	sp, #96	; 0x60
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	460b      	mov	r3, r1
 8008426:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008428:	2300      	movs	r3, #0
 800842a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800842e:	2300      	movs	r3, #0
 8008430:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8008434:	2300      	movs	r3, #0
 8008436:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800843a:	2300      	movs	r3, #0
 800843c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800843e:	2300      	movs	r3, #0
 8008440:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8008442:	2300      	movs	r3, #0
 8008444:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8008446:	2300      	movs	r3, #0
 8008448:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800844c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8008450:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8008452:	2300      	movs	r3, #0
 8008454:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8008456:	2300      	movs	r3, #0
 8008458:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800845a:	2300      	movs	r3, #0
 800845c:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8008464:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8008468:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800846c:	2b07      	cmp	r3, #7
 800846e:	f000 8408 	beq.w	8008c82 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008472:	2201      	movs	r2, #1
 8008474:	2180      	movs	r1, #128	; 0x80
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7fb fc32 	bl	8003ce0 <VL53L0X_WrByte>
 800847c:	4603      	mov	r3, r0
 800847e:	461a      	mov	r2, r3
 8008480:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008484:	4313      	orrs	r3, r2
 8008486:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800848a:	2201      	movs	r2, #1
 800848c:	21ff      	movs	r1, #255	; 0xff
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7fb fc26 	bl	8003ce0 <VL53L0X_WrByte>
 8008494:	4603      	mov	r3, r0
 8008496:	461a      	mov	r2, r3
 8008498:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800849c:	4313      	orrs	r3, r2
 800849e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80084a2:	2200      	movs	r2, #0
 80084a4:	2100      	movs	r1, #0
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f7fb fc1a 	bl	8003ce0 <VL53L0X_WrByte>
 80084ac:	4603      	mov	r3, r0
 80084ae:	461a      	mov	r2, r3
 80084b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084b4:	4313      	orrs	r3, r2
 80084b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80084ba:	2206      	movs	r2, #6
 80084bc:	21ff      	movs	r1, #255	; 0xff
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7fb fc0e 	bl	8003ce0 <VL53L0X_WrByte>
 80084c4:	4603      	mov	r3, r0
 80084c6:	461a      	mov	r2, r3
 80084c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084cc:	4313      	orrs	r3, r2
 80084ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80084d2:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80084d6:	461a      	mov	r2, r3
 80084d8:	2183      	movs	r1, #131	; 0x83
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f7fb fcb4 	bl	8003e48 <VL53L0X_RdByte>
 80084e0:	4603      	mov	r3, r0
 80084e2:	461a      	mov	r2, r3
 80084e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084e8:	4313      	orrs	r3, r2
 80084ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80084ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80084f2:	f043 0304 	orr.w	r3, r3, #4
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	461a      	mov	r2, r3
 80084fa:	2183      	movs	r1, #131	; 0x83
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f7fb fbef 	bl	8003ce0 <VL53L0X_WrByte>
 8008502:	4603      	mov	r3, r0
 8008504:	461a      	mov	r2, r3
 8008506:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800850a:	4313      	orrs	r3, r2
 800850c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8008510:	2207      	movs	r2, #7
 8008512:	21ff      	movs	r1, #255	; 0xff
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f7fb fbe3 	bl	8003ce0 <VL53L0X_WrByte>
 800851a:	4603      	mov	r3, r0
 800851c:	461a      	mov	r2, r3
 800851e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008522:	4313      	orrs	r3, r2
 8008524:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8008528:	2201      	movs	r2, #1
 800852a:	2181      	movs	r1, #129	; 0x81
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f7fb fbd7 	bl	8003ce0 <VL53L0X_WrByte>
 8008532:	4603      	mov	r3, r0
 8008534:	461a      	mov	r2, r3
 8008536:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800853a:	4313      	orrs	r3, r2
 800853c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f7fb fd1f 	bl	8003f84 <VL53L0X_PollingDelay>
 8008546:	4603      	mov	r3, r0
 8008548:	461a      	mov	r2, r3
 800854a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800854e:	4313      	orrs	r3, r2
 8008550:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008554:	2201      	movs	r2, #1
 8008556:	2180      	movs	r1, #128	; 0x80
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f7fb fbc1 	bl	8003ce0 <VL53L0X_WrByte>
 800855e:	4603      	mov	r3, r0
 8008560:	461a      	mov	r2, r3
 8008562:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008566:	4313      	orrs	r3, r2
 8008568:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800856c:	78fb      	ldrb	r3, [r7, #3]
 800856e:	f003 0301 	and.w	r3, r3, #1
 8008572:	2b00      	cmp	r3, #0
 8008574:	f000 8098 	beq.w	80086a8 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008578:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800857c:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008580:	2b00      	cmp	r3, #0
 8008582:	f040 8091 	bne.w	80086a8 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8008586:	226b      	movs	r2, #107	; 0x6b
 8008588:	2194      	movs	r1, #148	; 0x94
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7fb fba8 	bl	8003ce0 <VL53L0X_WrByte>
 8008590:	4603      	mov	r3, r0
 8008592:	461a      	mov	r2, r3
 8008594:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008598:	4313      	orrs	r3, r2
 800859a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7ff fef9 	bl	8008396 <VL53L0X_device_read_strobe>
 80085a4:	4603      	mov	r3, r0
 80085a6:	461a      	mov	r2, r3
 80085a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085ac:	4313      	orrs	r3, r2
 80085ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80085b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80085b6:	461a      	mov	r2, r3
 80085b8:	2190      	movs	r1, #144	; 0x90
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f7fb fca6 	bl	8003f0c <VL53L0X_RdDWord>
 80085c0:	4603      	mov	r3, r0
 80085c2:	461a      	mov	r2, r3
 80085c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085c8:	4313      	orrs	r3, r2
 80085ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80085ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d0:	0a1b      	lsrs	r3, r3, #8
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085d8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80085dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085de:	0bdb      	lsrs	r3, r3, #15
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80085ea:	2224      	movs	r2, #36	; 0x24
 80085ec:	2194      	movs	r1, #148	; 0x94
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f7fb fb76 	bl	8003ce0 <VL53L0X_WrByte>
 80085f4:	4603      	mov	r3, r0
 80085f6:	461a      	mov	r2, r3
 80085f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085fc:	4313      	orrs	r3, r2
 80085fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7ff fec7 	bl	8008396 <VL53L0X_device_read_strobe>
 8008608:	4603      	mov	r3, r0
 800860a:	461a      	mov	r2, r3
 800860c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008610:	4313      	orrs	r3, r2
 8008612:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008616:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800861a:	461a      	mov	r2, r3
 800861c:	2190      	movs	r1, #144	; 0x90
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f7fb fc74 	bl	8003f0c <VL53L0X_RdDWord>
 8008624:	4603      	mov	r3, r0
 8008626:	461a      	mov	r2, r3
 8008628:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800862c:	4313      	orrs	r3, r2
 800862e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8008632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008634:	0e1b      	lsrs	r3, r3, #24
 8008636:	b2db      	uxtb	r3, r3
 8008638:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800863a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863c:	0c1b      	lsrs	r3, r3, #16
 800863e:	b2db      	uxtb	r3, r3
 8008640:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8008642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008644:	0a1b      	lsrs	r3, r3, #8
 8008646:	b2db      	uxtb	r3, r3
 8008648:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800864a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864c:	b2db      	uxtb	r3, r3
 800864e:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8008650:	2225      	movs	r2, #37	; 0x25
 8008652:	2194      	movs	r1, #148	; 0x94
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f7fb fb43 	bl	8003ce0 <VL53L0X_WrByte>
 800865a:	4603      	mov	r3, r0
 800865c:	461a      	mov	r2, r3
 800865e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008662:	4313      	orrs	r3, r2
 8008664:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f7ff fe94 	bl	8008396 <VL53L0X_device_read_strobe>
 800866e:	4603      	mov	r3, r0
 8008670:	461a      	mov	r2, r3
 8008672:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008676:	4313      	orrs	r3, r2
 8008678:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800867c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008680:	461a      	mov	r2, r3
 8008682:	2190      	movs	r1, #144	; 0x90
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f7fb fc41 	bl	8003f0c <VL53L0X_RdDWord>
 800868a:	4603      	mov	r3, r0
 800868c:	461a      	mov	r2, r3
 800868e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008692:	4313      	orrs	r3, r2
 8008694:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8008698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869a:	0e1b      	lsrs	r3, r3, #24
 800869c:	b2db      	uxtb	r3, r3
 800869e:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80086a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a2:	0c1b      	lsrs	r3, r3, #16
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80086a8:	78fb      	ldrb	r3, [r7, #3]
 80086aa:	f003 0302 	and.w	r3, r3, #2
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f000 8189 	beq.w	80089c6 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80086b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80086b8:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f040 8182 	bne.w	80089c6 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80086c2:	2202      	movs	r2, #2
 80086c4:	2194      	movs	r1, #148	; 0x94
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f7fb fb0a 	bl	8003ce0 <VL53L0X_WrByte>
 80086cc:	4603      	mov	r3, r0
 80086ce:	461a      	mov	r2, r3
 80086d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086d4:	4313      	orrs	r3, r2
 80086d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7ff fe5b 	bl	8008396 <VL53L0X_device_read_strobe>
 80086e0:	4603      	mov	r3, r0
 80086e2:	461a      	mov	r2, r3
 80086e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086e8:	4313      	orrs	r3, r2
 80086ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80086ee:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80086f2:	461a      	mov	r2, r3
 80086f4:	2190      	movs	r1, #144	; 0x90
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f7fb fba6 	bl	8003e48 <VL53L0X_RdByte>
 80086fc:	4603      	mov	r3, r0
 80086fe:	461a      	mov	r2, r3
 8008700:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008704:	4313      	orrs	r3, r2
 8008706:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800870a:	227b      	movs	r2, #123	; 0x7b
 800870c:	2194      	movs	r1, #148	; 0x94
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f7fb fae6 	bl	8003ce0 <VL53L0X_WrByte>
 8008714:	4603      	mov	r3, r0
 8008716:	461a      	mov	r2, r3
 8008718:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800871c:	4313      	orrs	r3, r2
 800871e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f7ff fe37 	bl	8008396 <VL53L0X_device_read_strobe>
 8008728:	4603      	mov	r3, r0
 800872a:	461a      	mov	r2, r3
 800872c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008730:	4313      	orrs	r3, r2
 8008732:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8008736:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800873a:	461a      	mov	r2, r3
 800873c:	2190      	movs	r1, #144	; 0x90
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7fb fb82 	bl	8003e48 <VL53L0X_RdByte>
 8008744:	4603      	mov	r3, r0
 8008746:	461a      	mov	r2, r3
 8008748:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800874c:	4313      	orrs	r3, r2
 800874e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8008752:	2277      	movs	r2, #119	; 0x77
 8008754:	2194      	movs	r1, #148	; 0x94
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f7fb fac2 	bl	8003ce0 <VL53L0X_WrByte>
 800875c:	4603      	mov	r3, r0
 800875e:	461a      	mov	r2, r3
 8008760:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008764:	4313      	orrs	r3, r2
 8008766:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f7ff fe13 	bl	8008396 <VL53L0X_device_read_strobe>
 8008770:	4603      	mov	r3, r0
 8008772:	461a      	mov	r2, r3
 8008774:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008778:	4313      	orrs	r3, r2
 800877a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800877e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008782:	461a      	mov	r2, r3
 8008784:	2190      	movs	r1, #144	; 0x90
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f7fb fbc0 	bl	8003f0c <VL53L0X_RdDWord>
 800878c:	4603      	mov	r3, r0
 800878e:	461a      	mov	r2, r3
 8008790:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008794:	4313      	orrs	r3, r2
 8008796:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800879a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879c:	0e5b      	lsrs	r3, r3, #25
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80087a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087aa:	0c9b      	lsrs	r3, r3, #18
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80087b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b8:	0adb      	lsrs	r3, r3, #11
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80087c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c6:	091b      	lsrs	r3, r3, #4
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80087d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	00db      	lsls	r3, r3, #3
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80087e4:	2278      	movs	r2, #120	; 0x78
 80087e6:	2194      	movs	r1, #148	; 0x94
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f7fb fa79 	bl	8003ce0 <VL53L0X_WrByte>
 80087ee:	4603      	mov	r3, r0
 80087f0:	461a      	mov	r2, r3
 80087f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087f6:	4313      	orrs	r3, r2
 80087f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f7ff fdca 	bl	8008396 <VL53L0X_device_read_strobe>
 8008802:	4603      	mov	r3, r0
 8008804:	461a      	mov	r2, r3
 8008806:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800880a:	4313      	orrs	r3, r2
 800880c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008810:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008814:	461a      	mov	r2, r3
 8008816:	2190      	movs	r1, #144	; 0x90
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7fb fb77 	bl	8003f0c <VL53L0X_RdDWord>
 800881e:	4603      	mov	r3, r0
 8008820:	461a      	mov	r2, r3
 8008822:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008826:	4313      	orrs	r3, r2
 8008828:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800882c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882e:	0f5b      	lsrs	r3, r3, #29
 8008830:	b2db      	uxtb	r3, r3
 8008832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008836:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8008838:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800883c:	4413      	add	r3, r2
 800883e:	b2db      	uxtb	r3, r3
 8008840:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8008842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008844:	0d9b      	lsrs	r3, r3, #22
 8008846:	b2db      	uxtb	r3, r3
 8008848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800884c:	b2db      	uxtb	r3, r3
 800884e:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8008850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008852:	0bdb      	lsrs	r3, r3, #15
 8008854:	b2db      	uxtb	r3, r3
 8008856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800885a:	b2db      	uxtb	r3, r3
 800885c:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800885e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008860:	0a1b      	lsrs	r3, r3, #8
 8008862:	b2db      	uxtb	r3, r3
 8008864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008868:	b2db      	uxtb	r3, r3
 800886a:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800886c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886e:	085b      	lsrs	r3, r3, #1
 8008870:	b2db      	uxtb	r3, r3
 8008872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008876:	b2db      	uxtb	r3, r3
 8008878:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800887a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887c:	b2db      	uxtb	r3, r3
 800887e:	019b      	lsls	r3, r3, #6
 8008880:	b2db      	uxtb	r3, r3
 8008882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008886:	b2db      	uxtb	r3, r3
 8008888:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800888c:	2279      	movs	r2, #121	; 0x79
 800888e:	2194      	movs	r1, #148	; 0x94
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f7fb fa25 	bl	8003ce0 <VL53L0X_WrByte>
 8008896:	4603      	mov	r3, r0
 8008898:	461a      	mov	r2, r3
 800889a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800889e:	4313      	orrs	r3, r2
 80088a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f7ff fd76 	bl	8008396 <VL53L0X_device_read_strobe>
 80088aa:	4603      	mov	r3, r0
 80088ac:	461a      	mov	r2, r3
 80088ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088b2:	4313      	orrs	r3, r2
 80088b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80088b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80088bc:	461a      	mov	r2, r3
 80088be:	2190      	movs	r1, #144	; 0x90
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f7fb fb23 	bl	8003f0c <VL53L0X_RdDWord>
 80088c6:	4603      	mov	r3, r0
 80088c8:	461a      	mov	r2, r3
 80088ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088ce:	4313      	orrs	r3, r2
 80088d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80088d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d6:	0e9b      	lsrs	r3, r3, #26
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088de:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80088e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80088e4:	4413      	add	r3, r2
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80088ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ec:	0cdb      	lsrs	r3, r3, #19
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 80088f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fa:	0b1b      	lsrs	r3, r3, #12
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008902:	b2db      	uxtb	r3, r3
 8008904:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8008906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008908:	095b      	lsrs	r3, r3, #5
 800890a:	b2db      	uxtb	r3, r3
 800890c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008910:	b2db      	uxtb	r3, r3
 8008912:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8008914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008916:	b2db      	uxtb	r3, r3
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	b2db      	uxtb	r3, r3
 800891c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8008920:	b2db      	uxtb	r3, r3
 8008922:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8008926:	227a      	movs	r2, #122	; 0x7a
 8008928:	2194      	movs	r1, #148	; 0x94
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f7fb f9d8 	bl	8003ce0 <VL53L0X_WrByte>
 8008930:	4603      	mov	r3, r0
 8008932:	461a      	mov	r2, r3
 8008934:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008938:	4313      	orrs	r3, r2
 800893a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f7ff fd29 	bl	8008396 <VL53L0X_device_read_strobe>
 8008944:	4603      	mov	r3, r0
 8008946:	461a      	mov	r2, r3
 8008948:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800894c:	4313      	orrs	r3, r2
 800894e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008952:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008956:	461a      	mov	r2, r3
 8008958:	2190      	movs	r1, #144	; 0x90
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7fb fad6 	bl	8003f0c <VL53L0X_RdDWord>
 8008960:	4603      	mov	r3, r0
 8008962:	461a      	mov	r2, r3
 8008964:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008968:	4313      	orrs	r3, r2
 800896a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800896e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008970:	0f9b      	lsrs	r3, r3, #30
 8008972:	b2db      	uxtb	r3, r3
 8008974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008978:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800897a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800897e:	4413      	add	r3, r2
 8008980:	b2db      	uxtb	r3, r3
 8008982:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8008984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008986:	0ddb      	lsrs	r3, r3, #23
 8008988:	b2db      	uxtb	r3, r3
 800898a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800898e:	b2db      	uxtb	r3, r3
 8008990:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8008992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008994:	0c1b      	lsrs	r3, r3, #16
 8008996:	b2db      	uxtb	r3, r3
 8008998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800899c:	b2db      	uxtb	r3, r3
 800899e:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80089a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a2:	0a5b      	lsrs	r3, r3, #9
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80089b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b2:	089b      	lsrs	r3, r3, #2
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 80089c0:	2300      	movs	r3, #0
 80089c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80089c6:	78fb      	ldrb	r3, [r7, #3]
 80089c8:	f003 0304 	and.w	r3, r3, #4
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f000 80f1 	beq.w	8008bb4 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80089d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80089d6:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f040 80ea 	bne.w	8008bb4 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80089e0:	227b      	movs	r2, #123	; 0x7b
 80089e2:	2194      	movs	r1, #148	; 0x94
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f7fb f97b 	bl	8003ce0 <VL53L0X_WrByte>
 80089ea:	4603      	mov	r3, r0
 80089ec:	461a      	mov	r2, r3
 80089ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089f2:	4313      	orrs	r3, r2
 80089f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f7ff fccc 	bl	8008396 <VL53L0X_device_read_strobe>
 80089fe:	4603      	mov	r3, r0
 8008a00:	461a      	mov	r2, r3
 8008a02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a06:	4313      	orrs	r3, r2
 8008a08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8008a0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008a10:	461a      	mov	r2, r3
 8008a12:	2190      	movs	r1, #144	; 0x90
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f7fb fa79 	bl	8003f0c <VL53L0X_RdDWord>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a22:	4313      	orrs	r3, r2
 8008a24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8008a28:	227c      	movs	r2, #124	; 0x7c
 8008a2a:	2194      	movs	r1, #148	; 0x94
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f7fb f957 	bl	8003ce0 <VL53L0X_WrByte>
 8008a32:	4603      	mov	r3, r0
 8008a34:	461a      	mov	r2, r3
 8008a36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7ff fca8 	bl	8008396 <VL53L0X_device_read_strobe>
 8008a46:	4603      	mov	r3, r0
 8008a48:	461a      	mov	r2, r3
 8008a4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8008a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a58:	461a      	mov	r2, r3
 8008a5a:	2190      	movs	r1, #144	; 0x90
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7fb fa55 	bl	8003f0c <VL53L0X_RdDWord>
 8008a62:	4603      	mov	r3, r0
 8008a64:	461a      	mov	r2, r3
 8008a66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8008a70:	2273      	movs	r2, #115	; 0x73
 8008a72:	2194      	movs	r1, #148	; 0x94
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f7fb f933 	bl	8003ce0 <VL53L0X_WrByte>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a82:	4313      	orrs	r3, r2
 8008a84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f7ff fc84 	bl	8008396 <VL53L0X_device_read_strobe>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	461a      	mov	r2, r3
 8008a92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a96:	4313      	orrs	r3, r2
 8008a98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008a9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	2190      	movs	r1, #144	; 0x90
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f7fb fa31 	bl	8003f0c <VL53L0X_RdDWord>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	461a      	mov	r2, r3
 8008aae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aba:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8008ac0:	2274      	movs	r2, #116	; 0x74
 8008ac2:	2194      	movs	r1, #148	; 0x94
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7fb f90b 	bl	8003ce0 <VL53L0X_WrByte>
 8008aca:	4603      	mov	r3, r0
 8008acc:	461a      	mov	r2, r3
 8008ace:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f7ff fc5c 	bl	8008396 <VL53L0X_device_read_strobe>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008aec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008af0:	461a      	mov	r2, r3
 8008af2:	2190      	movs	r1, #144	; 0x90
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f7fb fa09 	bl	8003f0c <VL53L0X_RdDWord>
 8008afa:	4603      	mov	r3, r0
 8008afc:	461a      	mov	r2, r3
 8008afe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b02:	4313      	orrs	r3, r2
 8008b04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8008b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0a:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8008b0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8008b12:	2275      	movs	r2, #117	; 0x75
 8008b14:	2194      	movs	r1, #148	; 0x94
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f7fb f8e2 	bl	8003ce0 <VL53L0X_WrByte>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	461a      	mov	r2, r3
 8008b20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b24:	4313      	orrs	r3, r2
 8008b26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f7ff fc33 	bl	8008396 <VL53L0X_device_read_strobe>
 8008b30:	4603      	mov	r3, r0
 8008b32:	461a      	mov	r2, r3
 8008b34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008b3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008b42:	461a      	mov	r2, r3
 8008b44:	2190      	movs	r1, #144	; 0x90
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7fb f9e0 	bl	8003f0c <VL53L0X_RdDWord>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	461a      	mov	r2, r3
 8008b50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b54:	4313      	orrs	r3, r2
 8008b56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5c:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8008b62:	2276      	movs	r2, #118	; 0x76
 8008b64:	2194      	movs	r1, #148	; 0x94
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f7fb f8ba 	bl	8003ce0 <VL53L0X_WrByte>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	461a      	mov	r2, r3
 8008b70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b74:	4313      	orrs	r3, r2
 8008b76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f7ff fc0b 	bl	8008396 <VL53L0X_device_read_strobe>
 8008b80:	4603      	mov	r3, r0
 8008b82:	461a      	mov	r2, r3
 8008b84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008b8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008b92:	461a      	mov	r2, r3
 8008b94:	2190      	movs	r1, #144	; 0x90
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7fb f9b8 	bl	8003f0c <VL53L0X_RdDWord>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8008baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bac:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8008bae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	2181      	movs	r1, #129	; 0x81
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f7fb f891 	bl	8003ce0 <VL53L0X_WrByte>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008bcc:	2206      	movs	r2, #6
 8008bce:	21ff      	movs	r1, #255	; 0xff
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f7fb f885 	bl	8003ce0 <VL53L0X_WrByte>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	461a      	mov	r2, r3
 8008bda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bde:	4313      	orrs	r3, r2
 8008be0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008be4:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008be8:	461a      	mov	r2, r3
 8008bea:	2183      	movs	r1, #131	; 0x83
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f7fb f92b 	bl	8003e48 <VL53L0X_RdByte>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8008c00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c04:	f023 0304 	bic.w	r3, r3, #4
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	2183      	movs	r1, #131	; 0x83
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7fb f866 	bl	8003ce0 <VL53L0X_WrByte>
 8008c14:	4603      	mov	r3, r0
 8008c16:	461a      	mov	r2, r3
 8008c18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008c22:	2201      	movs	r2, #1
 8008c24:	21ff      	movs	r1, #255	; 0xff
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7fb f85a 	bl	8003ce0 <VL53L0X_WrByte>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	461a      	mov	r2, r3
 8008c30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c34:	4313      	orrs	r3, r2
 8008c36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7fb f84e 	bl	8003ce0 <VL53L0X_WrByte>
 8008c44:	4603      	mov	r3, r0
 8008c46:	461a      	mov	r2, r3
 8008c48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008c52:	2200      	movs	r2, #0
 8008c54:	21ff      	movs	r1, #255	; 0xff
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7fb f842 	bl	8003ce0 <VL53L0X_WrByte>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	461a      	mov	r2, r3
 8008c60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c64:	4313      	orrs	r3, r2
 8008c66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	2180      	movs	r1, #128	; 0x80
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f7fb f836 	bl	8003ce0 <VL53L0X_WrByte>
 8008c74:	4603      	mov	r3, r0
 8008c76:	461a      	mov	r2, r3
 8008c78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8008c82:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f040 808f 	bne.w	8008daa <VL53L0X_get_info_from_device+0x98e>
 8008c8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008c90:	2b07      	cmp	r3, #7
 8008c92:	f000 808a 	beq.w	8008daa <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8008c96:	78fb      	ldrb	r3, [r7, #3]
 8008c98:	f003 0301 	and.w	r3, r3, #1
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d024      	beq.n	8008cea <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008ca0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ca4:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d11e      	bne.n	8008cea <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8008cb2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8008cbc:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cc4:	e00e      	b.n	8008ce4 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8008cc6:	f107 0208 	add.w	r2, r7, #8
 8008cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ccc:	4413      	add	r3, r2
 8008cce:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8008cda:	460a      	mov	r2, r1
 8008cdc:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ce6:	2b05      	cmp	r3, #5
 8008ce8:	dded      	ble.n	8008cc6 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8008cea:	78fb      	ldrb	r3, [r7, #3]
 8008cec:	f003 0302 	and.w	r3, r3, #2
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d018      	beq.n	8008d26 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008cf4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008cf8:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d112      	bne.n	8008d26 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008d00:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008d0a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	33f3      	adds	r3, #243	; 0xf3
 8008d18:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8008d1a:	f107 0310 	add.w	r3, r7, #16
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008d22:	f011 fda7 	bl	801a874 <strcpy>

		}

		if (((option & 4) == 4) &&
 8008d26:	78fb      	ldrb	r3, [r7, #3]
 8008d28:	f003 0304 	and.w	r3, r3, #4
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d030      	beq.n	8008d92 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008d30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008d34:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d12a      	bne.n	8008d92 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008d3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8008d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d4e:	025b      	lsls	r3, r3, #9
 8008d50:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d56:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8008d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d011      	beq.n	8008d8a <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8008d66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d6a:	1ad3      	subs	r3, r2, r3
 8008d6c:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8008d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d74:	fb02 f303 	mul.w	r3, r2, r3
 8008d78:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8008d7a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8008d7e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008d82:	425b      	negs	r3, r3
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8008d8a:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8008d92:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008d96:	78fb      	ldrb	r3, [r7, #3]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8008da0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008daa:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3760      	adds	r7, #96	; 0x60
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b087      	sub	sp, #28
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8008dc2:	f240 6277 	movw	r2, #1655	; 0x677
 8008dc6:	f04f 0300 	mov.w	r3, #0
 8008dca:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8008dce:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8008dd2:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8008dd4:	78fb      	ldrb	r3, [r7, #3]
 8008dd6:	68fa      	ldr	r2, [r7, #12]
 8008dd8:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	fb02 f303 	mul.w	r3, r2, r3
 8008de2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8008de4:	68bb      	ldr	r3, [r7, #8]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	371c      	adds	r7, #28
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr

08008df2 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8008df2:	b480      	push	{r7}
 8008df4:	b087      	sub	sp, #28
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8008e02:	2300      	movs	r3, #0
 8008e04:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d017      	beq.n	8008e3c <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008e12:	e005      	b.n	8008e20 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	085b      	lsrs	r3, r3, #1
 8008e18:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8008e1a:	89fb      	ldrh	r3, [r7, #14]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1f4      	bne.n	8008e14 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8008e2a:	89fb      	ldrh	r3, [r7, #14]
 8008e2c:	021b      	lsls	r3, r3, #8
 8008e2e:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8008e38:	4413      	add	r3, r2
 8008e3a:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8008e3c:	8afb      	ldrh	r3, [r7, #22]

}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	371c      	adds	r7, #28
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr

08008e4a <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8008e4a:	b480      	push	{r7}
 8008e4c:	b085      	sub	sp, #20
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	4603      	mov	r3, r0
 8008e52:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8008e54:	2300      	movs	r3, #0
 8008e56:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008e58:	88fb      	ldrh	r3, [r7, #6]
 8008e5a:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8008e5c:	88fa      	ldrh	r2, [r7, #6]
 8008e5e:	0a12      	lsrs	r2, r2, #8
 8008e60:	b292      	uxth	r2, r2
 8008e62:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008e64:	3301      	adds	r3, #1
 8008e66:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8008e68:	68fb      	ldr	r3, [r7, #12]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
	...

08008e78 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b088      	sub	sp, #32
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	4613      	mov	r3, r2
 8008e84:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8008e86:	2300      	movs	r3, #0
 8008e88:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008e8a:	79fb      	ldrb	r3, [r7, #7]
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f7ff ff91 	bl	8008db6 <VL53L0X_calc_macro_period_ps>
 8008e94:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008e9c:	4a0a      	ldr	r2, [pc, #40]	; (8008ec8 <VL53L0X_calc_timeout_mclks+0x50>)
 8008e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea2:	099b      	lsrs	r3, r3, #6
 8008ea4:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008eac:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	085b      	lsrs	r3, r3, #1
 8008eb4:	441a      	add	r2, r3
	timeout_period_mclks =
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ebc:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8008ebe:	69fb      	ldr	r3, [r7, #28]
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3720      	adds	r7, #32
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	10624dd3 	.word	0x10624dd3

08008ecc <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b086      	sub	sp, #24
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	807b      	strh	r3, [r7, #2]
 8008ed8:	4613      	mov	r3, r2
 8008eda:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8008edc:	2300      	movs	r3, #0
 8008ede:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008ee0:	787b      	ldrb	r3, [r7, #1]
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f7ff ff66 	bl	8008db6 <VL53L0X_calc_macro_period_ps>
 8008eea:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008ef2:	4a0a      	ldr	r2, [pc, #40]	; (8008f1c <VL53L0X_calc_timeout_us+0x50>)
 8008ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ef8:	099b      	lsrs	r3, r3, #6
 8008efa:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8008efc:	887b      	ldrh	r3, [r7, #2]
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	fb02 f303 	mul.w	r3, r2, r3
 8008f04:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8008f08:	4a04      	ldr	r2, [pc, #16]	; (8008f1c <VL53L0X_calc_timeout_us+0x50>)
 8008f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f0e:	099b      	lsrs	r3, r3, #6
 8008f10:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8008f12:	697b      	ldr	r3, [r7, #20]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3718      	adds	r7, #24
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	10624dd3 	.word	0x10624dd3

08008f20 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b08c      	sub	sp, #48	; 0x30
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	460b      	mov	r3, r1
 8008f2a:	607a      	str	r2, [r7, #4]
 8008f2c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8008f34:	2300      	movs	r3, #0
 8008f36:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8008f42:	2300      	movs	r3, #0
 8008f44:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8008f46:	7afb      	ldrb	r3, [r7, #11]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d005      	beq.n	8008f58 <get_sequence_step_timeout+0x38>
 8008f4c:	7afb      	ldrb	r3, [r7, #11]
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d002      	beq.n	8008f58 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8008f52:	7afb      	ldrb	r3, [r7, #11]
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	d128      	bne.n	8008faa <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008f58:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	2100      	movs	r1, #0
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f7fd fa5b 	bl	800641c <VL53L0X_GetVcselPulsePeriod>
 8008f66:	4603      	mov	r3, r0
 8008f68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8008f6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d109      	bne.n	8008f88 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8008f74:	f107 0320 	add.w	r3, r7, #32
 8008f78:	461a      	mov	r2, r3
 8008f7a:	2146      	movs	r1, #70	; 0x46
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f7fa ff63 	bl	8003e48 <VL53L0X_RdByte>
 8008f82:	4603      	mov	r3, r0
 8008f84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8008f88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7ff ff5b 	bl	8008e4a <VL53L0X_decode_timeout>
 8008f94:	4603      	mov	r3, r0
 8008f96:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008f98:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008f9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f7ff ff93 	bl	8008ecc <VL53L0X_calc_timeout_us>
 8008fa6:	62b8      	str	r0, [r7, #40]	; 0x28
 8008fa8:	e092      	b.n	80090d0 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8008faa:	7afb      	ldrb	r3, [r7, #11]
 8008fac:	2b03      	cmp	r3, #3
 8008fae:	d135      	bne.n	800901c <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008fb0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f7fd fa2f 	bl	800641c <VL53L0X_GetVcselPulsePeriod>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8008fc4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f040 8081 	bne.w	80090d0 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008fce:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	f7fd fa20 	bl	800641c <VL53L0X_GetVcselPulsePeriod>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8008fe2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d109      	bne.n	8008ffe <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8008fea:	f107 031e 	add.w	r3, r7, #30
 8008fee:	461a      	mov	r2, r3
 8008ff0:	2151      	movs	r1, #81	; 0x51
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f7fa ff52 	bl	8003e9c <VL53L0X_RdWord>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008ffe:	8bfb      	ldrh	r3, [r7, #30]
 8009000:	4618      	mov	r0, r3
 8009002:	f7ff ff22 	bl	8008e4a <VL53L0X_decode_timeout>
 8009006:	4603      	mov	r3, r0
 8009008:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800900a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800900e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009010:	4619      	mov	r1, r3
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	f7ff ff5a 	bl	8008ecc <VL53L0X_calc_timeout_us>
 8009018:	62b8      	str	r0, [r7, #40]	; 0x28
 800901a:	e059      	b.n	80090d0 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800901c:	7afb      	ldrb	r3, [r7, #11]
 800901e:	2b04      	cmp	r3, #4
 8009020:	d156      	bne.n	80090d0 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009022:	f107 0314 	add.w	r3, r7, #20
 8009026:	4619      	mov	r1, r3
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f7fd fb03 	bl	8006634 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800902e:	2300      	movs	r3, #0
 8009030:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8009032:	7dfb      	ldrb	r3, [r7, #23]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d01d      	beq.n	8009074 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009038:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800903c:	461a      	mov	r2, r3
 800903e:	2100      	movs	r1, #0
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f7fd f9eb 	bl	800641c <VL53L0X_GetVcselPulsePeriod>
 8009046:	4603      	mov	r3, r0
 8009048:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800904c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10f      	bne.n	8009074 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8009054:	f107 031e 	add.w	r3, r7, #30
 8009058:	461a      	mov	r2, r3
 800905a:	2151      	movs	r1, #81	; 0x51
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f7fa ff1d 	bl	8003e9c <VL53L0X_RdWord>
 8009062:	4603      	mov	r3, r0
 8009064:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009068:	8bfb      	ldrh	r3, [r7, #30]
 800906a:	4618      	mov	r0, r3
 800906c:	f7ff feed 	bl	8008e4a <VL53L0X_decode_timeout>
 8009070:	4603      	mov	r3, r0
 8009072:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009074:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009078:	2b00      	cmp	r3, #0
 800907a:	d109      	bne.n	8009090 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800907c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009080:	461a      	mov	r2, r3
 8009082:	2101      	movs	r1, #1
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f7fd f9c9 	bl	800641c <VL53L0X_GetVcselPulsePeriod>
 800908a:	4603      	mov	r3, r0
 800908c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009090:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009094:	2b00      	cmp	r3, #0
 8009096:	d10f      	bne.n	80090b8 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8009098:	f107 031c 	add.w	r3, r7, #28
 800909c:	461a      	mov	r2, r3
 800909e:	2171      	movs	r1, #113	; 0x71
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f7fa fefb 	bl	8003e9c <VL53L0X_RdWord>
 80090a6:	4603      	mov	r3, r0
 80090a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80090ac:	8bbb      	ldrh	r3, [r7, #28]
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7ff fecb 	bl	8008e4a <VL53L0X_decode_timeout>
 80090b4:	4603      	mov	r3, r0
 80090b6:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80090b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80090ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80090bc:	1ad3      	subs	r3, r2, r3
 80090be:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80090c0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80090c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090c6:	4619      	mov	r1, r3
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f7ff feff 	bl	8008ecc <VL53L0X_calc_timeout_us>
 80090ce:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090d4:	601a      	str	r2, [r3, #0]

	return Status;
 80090d6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3730      	adds	r7, #48	; 0x30
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b08a      	sub	sp, #40	; 0x28
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	60f8      	str	r0, [r7, #12]
 80090ea:	460b      	mov	r3, r1
 80090ec:	607a      	str	r2, [r7, #4]
 80090ee:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80090f0:	2300      	movs	r3, #0
 80090f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80090f6:	7afb      	ldrb	r3, [r7, #11]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d005      	beq.n	8009108 <set_sequence_step_timeout+0x26>
 80090fc:	7afb      	ldrb	r3, [r7, #11]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d002      	beq.n	8009108 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009102:	7afb      	ldrb	r3, [r7, #11]
 8009104:	2b02      	cmp	r3, #2
 8009106:	d138      	bne.n	800917a <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009108:	f107 031b 	add.w	r3, r7, #27
 800910c:	461a      	mov	r2, r3
 800910e:	2100      	movs	r1, #0
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f7fd f983 	bl	800641c <VL53L0X_GetVcselPulsePeriod>
 8009116:	4603      	mov	r3, r0
 8009118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800911c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009120:	2b00      	cmp	r3, #0
 8009122:	d11a      	bne.n	800915a <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8009124:	7efb      	ldrb	r3, [r7, #27]
 8009126:	461a      	mov	r2, r3
 8009128:	6879      	ldr	r1, [r7, #4]
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f7ff fea4 	bl	8008e78 <VL53L0X_calc_timeout_mclks>
 8009130:	4603      	mov	r3, r0
 8009132:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8009134:	8bbb      	ldrh	r3, [r7, #28]
 8009136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800913a:	d903      	bls.n	8009144 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800913c:	23ff      	movs	r3, #255	; 0xff
 800913e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009142:	e004      	b.n	800914e <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8009144:	8bbb      	ldrh	r3, [r7, #28]
 8009146:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8009148:	3b01      	subs	r3, #1
 800914a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800914e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009152:	b29a      	uxth	r2, r3
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800915a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800915e:	2b00      	cmp	r3, #0
 8009160:	f040 80ab 	bne.w	80092ba <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8009164:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009168:	461a      	mov	r2, r3
 800916a:	2146      	movs	r1, #70	; 0x46
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f7fa fdb7 	bl	8003ce0 <VL53L0X_WrByte>
 8009172:	4603      	mov	r3, r0
 8009174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8009178:	e09f      	b.n	80092ba <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800917a:	7afb      	ldrb	r3, [r7, #11]
 800917c:	2b03      	cmp	r3, #3
 800917e:	d135      	bne.n	80091ec <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8009180:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009184:	2b00      	cmp	r3, #0
 8009186:	d11b      	bne.n	80091c0 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009188:	f107 031b 	add.w	r3, r7, #27
 800918c:	461a      	mov	r2, r3
 800918e:	2100      	movs	r1, #0
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	f7fd f943 	bl	800641c <VL53L0X_GetVcselPulsePeriod>
 8009196:	4603      	mov	r3, r0
 8009198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800919c:	7efb      	ldrb	r3, [r7, #27]
 800919e:	461a      	mov	r2, r3
 80091a0:	6879      	ldr	r1, [r7, #4]
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f7ff fe68 	bl	8008e78 <VL53L0X_calc_timeout_mclks>
 80091a8:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80091aa:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80091ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7ff fe1f 	bl	8008df2 <VL53L0X_encode_timeout>
 80091b4:	4603      	mov	r3, r0
 80091b6:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80091b8:	8b3a      	ldrh	r2, [r7, #24]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80091c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d108      	bne.n	80091da <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80091c8:	8b3b      	ldrh	r3, [r7, #24]
 80091ca:	461a      	mov	r2, r3
 80091cc:	2151      	movs	r1, #81	; 0x51
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f7fa fdaa 	bl	8003d28 <VL53L0X_WrWord>
 80091d4:	4603      	mov	r3, r0
 80091d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80091da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d16b      	bne.n	80092ba <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80091ea:	e066      	b.n	80092ba <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80091ec:	7afb      	ldrb	r3, [r7, #11]
 80091ee:	2b04      	cmp	r3, #4
 80091f0:	d160      	bne.n	80092b4 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 80091f2:	f107 0310 	add.w	r3, r7, #16
 80091f6:	4619      	mov	r1, r3
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f7fd fa1b 	bl	8006634 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 80091fe:	2300      	movs	r3, #0
 8009200:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8009202:	7cfb      	ldrb	r3, [r7, #19]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d01d      	beq.n	8009244 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009208:	f107 031b 	add.w	r3, r7, #27
 800920c:	461a      	mov	r2, r3
 800920e:	2100      	movs	r1, #0
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f7fd f903 	bl	800641c <VL53L0X_GetVcselPulsePeriod>
 8009216:	4603      	mov	r3, r0
 8009218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800921c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009220:	2b00      	cmp	r3, #0
 8009222:	d10f      	bne.n	8009244 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8009224:	f107 0318 	add.w	r3, r7, #24
 8009228:	461a      	mov	r2, r3
 800922a:	2151      	movs	r1, #81	; 0x51
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f7fa fe35 	bl	8003e9c <VL53L0X_RdWord>
 8009232:	4603      	mov	r3, r0
 8009234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8009238:	8b3b      	ldrh	r3, [r7, #24]
 800923a:	4618      	mov	r0, r3
 800923c:	f7ff fe05 	bl	8008e4a <VL53L0X_decode_timeout>
 8009240:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8009242:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8009244:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009248:	2b00      	cmp	r3, #0
 800924a:	d109      	bne.n	8009260 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800924c:	f107 031b 	add.w	r3, r7, #27
 8009250:	461a      	mov	r2, r3
 8009252:	2101      	movs	r1, #1
 8009254:	68f8      	ldr	r0, [r7, #12]
 8009256:	f7fd f8e1 	bl	800641c <VL53L0X_GetVcselPulsePeriod>
 800925a:	4603      	mov	r3, r0
 800925c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8009260:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009264:	2b00      	cmp	r3, #0
 8009266:	d128      	bne.n	80092ba <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8009268:	7efb      	ldrb	r3, [r7, #27]
 800926a:	461a      	mov	r2, r3
 800926c:	6879      	ldr	r1, [r7, #4]
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f7ff fe02 	bl	8008e78 <VL53L0X_calc_timeout_mclks>
 8009274:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8009276:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009278:	6a3a      	ldr	r2, [r7, #32]
 800927a:	4413      	add	r3, r2
 800927c:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800927e:	6a38      	ldr	r0, [r7, #32]
 8009280:	f7ff fdb7 	bl	8008df2 <VL53L0X_encode_timeout>
 8009284:	4603      	mov	r3, r0
 8009286:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8009288:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800928c:	2b00      	cmp	r3, #0
 800928e:	d108      	bne.n	80092a2 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8009290:	8bfb      	ldrh	r3, [r7, #30]
 8009292:	461a      	mov	r2, r3
 8009294:	2171      	movs	r1, #113	; 0x71
 8009296:	68f8      	ldr	r0, [r7, #12]
 8009298:	f7fa fd46 	bl	8003d28 <VL53L0X_WrWord>
 800929c:	4603      	mov	r3, r0
 800929e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80092a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d107      	bne.n	80092ba <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80092b2:	e002      	b.n	80092ba <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80092b4:	23fc      	movs	r3, #252	; 0xfc
 80092b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80092ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3728      	adds	r7, #40	; 0x28
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b086      	sub	sp, #24
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	60f8      	str	r0, [r7, #12]
 80092ce:	460b      	mov	r3, r1
 80092d0:	607a      	str	r2, [r7, #4]
 80092d2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092d4:	2300      	movs	r3, #0
 80092d6:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80092d8:	7afb      	ldrb	r3, [r7, #11]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d002      	beq.n	80092e4 <VL53L0X_get_vcsel_pulse_period+0x1e>
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d00a      	beq.n	80092f8 <VL53L0X_get_vcsel_pulse_period+0x32>
 80092e2:	e013      	b.n	800930c <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80092e4:	f107 0316 	add.w	r3, r7, #22
 80092e8:	461a      	mov	r2, r3
 80092ea:	2150      	movs	r1, #80	; 0x50
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f7fa fdab 	bl	8003e48 <VL53L0X_RdByte>
 80092f2:	4603      	mov	r3, r0
 80092f4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80092f6:	e00b      	b.n	8009310 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80092f8:	f107 0316 	add.w	r3, r7, #22
 80092fc:	461a      	mov	r2, r3
 80092fe:	2170      	movs	r1, #112	; 0x70
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f7fa fda1 	bl	8003e48 <VL53L0X_RdByte>
 8009306:	4603      	mov	r3, r0
 8009308:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800930a:	e001      	b.n	8009310 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800930c:	23fc      	movs	r3, #252	; 0xfc
 800930e:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8009310:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d107      	bne.n	8009328 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8009318:	7dbb      	ldrb	r3, [r7, #22]
 800931a:	4618      	mov	r0, r3
 800931c:	f7fe fff4 	bl	8008308 <VL53L0X_decode_vcsel_period>
 8009320:	4603      	mov	r3, r0
 8009322:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	701a      	strb	r2, [r3, #0]

	return Status;
 8009328:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800932c:	4618      	mov	r0, r3
 800932e:	3718      	adds	r7, #24
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b092      	sub	sp, #72	; 0x48
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800933e:	2300      	movs	r3, #0
 8009340:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009344:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009348:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800934a:	f240 7376 	movw	r3, #1910	; 0x776
 800934e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8009350:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009354:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009356:	f44f 7325 	mov.w	r3, #660	; 0x294
 800935a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800935c:	f240 234e 	movw	r3, #590	; 0x24e
 8009360:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8009362:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009366:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8009368:	f44f 7325 	mov.w	r3, #660	; 0x294
 800936c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800936e:	f240 2326 	movw	r3, #550	; 0x226
 8009372:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009374:	2300      	movs	r3, #0
 8009376:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8009378:	f644 6320 	movw	r3, #20000	; 0x4e20
 800937c:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800937e:	2300      	movs	r3, #0
 8009380:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	6a3b      	ldr	r3, [r7, #32]
 8009386:	429a      	cmp	r2, r3
 8009388:	d205      	bcs.n	8009396 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800938a:	23fc      	movs	r3, #252	; 0xfc
 800938c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8009390:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009394:	e0aa      	b.n	80094ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8009396:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939a:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800939c:	683a      	ldr	r2, [r7, #0]
 800939e:	1ad3      	subs	r3, r2, r3
 80093a0:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80093a2:	f107 0314 	add.w	r3, r7, #20
 80093a6:	4619      	mov	r1, r3
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f7fd f943 	bl	8006634 <VL53L0X_GetSequenceStepEnables>
 80093ae:	4603      	mov	r3, r0
 80093b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 80093b4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d15b      	bne.n	8009474 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 80093bc:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d105      	bne.n	80093ce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 80093c2:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d102      	bne.n	80093ce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 80093c8:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d052      	beq.n	8009474 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80093ce:	f107 0310 	add.w	r3, r7, #16
 80093d2:	461a      	mov	r2, r3
 80093d4:	2102      	movs	r1, #2
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f7ff fda2 	bl	8008f20 <get_sequence_step_timeout>
 80093dc:	4603      	mov	r3, r0
 80093de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 80093e2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d002      	beq.n	80093f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 80093ea:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80093ee:	e07d      	b.n	80094ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 80093f0:	7d3b      	ldrb	r3, [r7, #20]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00f      	beq.n	8009416 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 80093f6:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 80093f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093fa:	4413      	add	r3, r2
 80093fc:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 80093fe:	69fa      	ldr	r2, [r7, #28]
 8009400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009402:	429a      	cmp	r2, r3
 8009404:	d204      	bcs.n	8009410 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8009406:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	1ad3      	subs	r3, r2, r3
 800940c:	643b      	str	r3, [r7, #64]	; 0x40
 800940e:	e002      	b.n	8009416 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009410:	23fc      	movs	r3, #252	; 0xfc
 8009412:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8009416:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800941a:	2b00      	cmp	r3, #0
 800941c:	d002      	beq.n	8009424 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800941e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009422:	e063      	b.n	80094ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8009424:	7dbb      	ldrb	r3, [r7, #22]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d011      	beq.n	800944e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800942a:	693a      	ldr	r2, [r7, #16]
 800942c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942e:	4413      	add	r3, r2
 8009430:	005b      	lsls	r3, r3, #1
 8009432:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009434:	69fa      	ldr	r2, [r7, #28]
 8009436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009438:	429a      	cmp	r2, r3
 800943a:	d204      	bcs.n	8009446 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800943c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	643b      	str	r3, [r7, #64]	; 0x40
 8009444:	e016      	b.n	8009474 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009446:	23fc      	movs	r3, #252	; 0xfc
 8009448:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800944c:	e012      	b.n	8009474 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800944e:	7d7b      	ldrb	r3, [r7, #21]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00f      	beq.n	8009474 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009458:	4413      	add	r3, r2
 800945a:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800945c:	69fa      	ldr	r2, [r7, #28]
 800945e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009460:	429a      	cmp	r2, r3
 8009462:	d204      	bcs.n	800946e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009464:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	1ad3      	subs	r3, r2, r3
 800946a:	643b      	str	r3, [r7, #64]	; 0x40
 800946c:	e002      	b.n	8009474 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800946e:	23fc      	movs	r3, #252	; 0xfc
 8009470:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009474:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009478:	2b00      	cmp	r3, #0
 800947a:	d002      	beq.n	8009482 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800947c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009480:	e034      	b.n	80094ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8009482:	7dfb      	ldrb	r3, [r7, #23]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d019      	beq.n	80094bc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8009488:	f107 030c 	add.w	r3, r7, #12
 800948c:	461a      	mov	r2, r3
 800948e:	2103      	movs	r1, #3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f7ff fd45 	bl	8008f20 <get_sequence_step_timeout>
 8009496:	4603      	mov	r3, r0
 8009498:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094a0:	4413      	add	r3, r2
 80094a2:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80094a4:	69fa      	ldr	r2, [r7, #28]
 80094a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d204      	bcs.n	80094b6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80094ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	643b      	str	r3, [r7, #64]	; 0x40
 80094b4:	e002      	b.n	80094bc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80094b6:	23fc      	movs	r3, #252	; 0xfc
 80094b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 80094bc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d111      	bne.n	80094e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 80094c4:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00e      	beq.n	80094e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 80094ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ce:	1ad3      	subs	r3, r2, r3
 80094d0:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 80094d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094d4:	2104      	movs	r1, #4
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f7ff fe03 	bl	80090e2 <set_sequence_step_timeout>
 80094dc:	4603      	mov	r3, r0
 80094de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	683a      	ldr	r2, [r7, #0]
 80094e6:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80094e8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3748      	adds	r7, #72	; 0x48
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b090      	sub	sp, #64	; 0x40
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80094fe:	2300      	movs	r3, #0
 8009500:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009504:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009508:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800950a:	f240 7376 	movw	r3, #1910	; 0x776
 800950e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8009510:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009514:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009516:	f44f 7325 	mov.w	r3, #660	; 0x294
 800951a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800951c:	f240 234e 	movw	r3, #590	; 0x24e
 8009520:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8009522:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009526:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8009528:	f44f 7325 	mov.w	r3, #660	; 0x294
 800952c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800952e:	f240 2326 	movw	r3, #550	; 0x226
 8009532:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009534:	2300      	movs	r3, #0
 8009536:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8009538:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800953a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800953c:	441a      	add	r2, r3
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009542:	f107 0318 	add.w	r3, r7, #24
 8009546:	4619      	mov	r1, r3
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f7fd f873 	bl	8006634 <VL53L0X_GetSequenceStepEnables>
 800954e:	4603      	mov	r3, r0
 8009550:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8009554:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009558:	2b00      	cmp	r3, #0
 800955a:	d002      	beq.n	8009562 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800955c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009560:	e075      	b.n	800964e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8009562:	7e3b      	ldrb	r3, [r7, #24]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d105      	bne.n	8009574 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8009568:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800956a:	2b00      	cmp	r3, #0
 800956c:	d102      	bne.n	8009574 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800956e:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8009570:	2b00      	cmp	r3, #0
 8009572:	d030      	beq.n	80095d6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8009574:	f107 0310 	add.w	r3, r7, #16
 8009578:	461a      	mov	r2, r3
 800957a:	2102      	movs	r1, #2
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f7ff fccf 	bl	8008f20 <get_sequence_step_timeout>
 8009582:	4603      	mov	r3, r0
 8009584:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8009588:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800958c:	2b00      	cmp	r3, #0
 800958e:	d122      	bne.n	80095d6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8009590:	7e3b      	ldrb	r3, [r7, #24]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d007      	beq.n	80095a6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800959a:	6939      	ldr	r1, [r7, #16]
 800959c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959e:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80095a0:	441a      	add	r2, r3
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80095a6:	7ebb      	ldrb	r3, [r7, #26]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d009      	beq.n	80095c0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80095b0:	6939      	ldr	r1, [r7, #16]
 80095b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b4:	440b      	add	r3, r1
 80095b6:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80095b8:	441a      	add	r2, r3
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	601a      	str	r2, [r3, #0]
 80095be:	e00a      	b.n	80095d6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80095c0:	7e7b      	ldrb	r3, [r7, #25]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d007      	beq.n	80095d6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80095ca:	6939      	ldr	r1, [r7, #16]
 80095cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ce:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80095d0:	441a      	add	r2, r3
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80095d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d114      	bne.n	8009608 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 80095de:	7efb      	ldrb	r3, [r7, #27]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d011      	beq.n	8009608 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 80095e4:	f107 030c 	add.w	r3, r7, #12
 80095e8:	461a      	mov	r2, r3
 80095ea:	2103      	movs	r1, #3
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7ff fc97 	bl	8008f20 <get_sequence_step_timeout>
 80095f2:	4603      	mov	r3, r0
 80095f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 80095fc:	68f9      	ldr	r1, [r7, #12]
 80095fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009600:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8009602:	441a      	add	r2, r3
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009608:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800960c:	2b00      	cmp	r3, #0
 800960e:	d114      	bne.n	800963a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8009610:	7f3b      	ldrb	r3, [r7, #28]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d011      	beq.n	800963a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8009616:	f107 0314 	add.w	r3, r7, #20
 800961a:	461a      	mov	r2, r3
 800961c:	2104      	movs	r1, #4
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f7ff fc7e 	bl	8008f20 <get_sequence_step_timeout>
 8009624:	4603      	mov	r3, r0
 8009626:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800962e:	6979      	ldr	r1, [r7, #20]
 8009630:	6a3b      	ldr	r3, [r7, #32]
 8009632:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8009634:	441a      	add	r2, r3
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800963a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800963e:	2b00      	cmp	r3, #0
 8009640:	d103      	bne.n	800964a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800964a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800964e:	4618      	mov	r0, r3
 8009650:	3740      	adds	r7, #64	; 0x40
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
	...

08009658 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b088      	sub	sp, #32
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009662:	2300      	movs	r3, #0
 8009664:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8009666:	2300      	movs	r3, #0
 8009668:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800966a:	e0c6      	b.n	80097fa <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	683a      	ldr	r2, [r7, #0]
 8009670:	4413      	add	r3, r2
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	74fb      	strb	r3, [r7, #19]
		Index++;
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	3301      	adds	r3, #1
 800967a:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800967c:	7cfb      	ldrb	r3, [r7, #19]
 800967e:	2bff      	cmp	r3, #255	; 0xff
 8009680:	f040 808d 	bne.w	800979e <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	683a      	ldr	r2, [r7, #0]
 8009688:	4413      	add	r3, r2
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	747b      	strb	r3, [r7, #17]
			Index++;
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	3301      	adds	r3, #1
 8009692:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8009694:	7c7b      	ldrb	r3, [r7, #17]
 8009696:	2b03      	cmp	r3, #3
 8009698:	d87e      	bhi.n	8009798 <VL53L0X_load_tuning_settings+0x140>
 800969a:	a201      	add	r2, pc, #4	; (adr r2, 80096a0 <VL53L0X_load_tuning_settings+0x48>)
 800969c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a0:	080096b1 	.word	0x080096b1
 80096a4:	080096eb 	.word	0x080096eb
 80096a8:	08009725 	.word	0x08009725
 80096ac:	0800975f 	.word	0x0800975f
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	4413      	add	r3, r2
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	743b      	strb	r3, [r7, #16]
				Index++;
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	3301      	adds	r3, #1
 80096be:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	683a      	ldr	r2, [r7, #0]
 80096c4:	4413      	add	r3, r2
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	73fb      	strb	r3, [r7, #15]
				Index++;
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	3301      	adds	r3, #1
 80096ce:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80096d0:	7c3b      	ldrb	r3, [r7, #16]
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	021b      	lsls	r3, r3, #8
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
 80096da:	b29b      	uxth	r3, r3
 80096dc:	4413      	add	r3, r2
 80096de:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	89ba      	ldrh	r2, [r7, #12]
 80096e4:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 80096e8:	e087      	b.n	80097fa <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	683a      	ldr	r2, [r7, #0]
 80096ee:	4413      	add	r3, r2
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	743b      	strb	r3, [r7, #16]
				Index++;
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	3301      	adds	r3, #1
 80096f8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	4413      	add	r3, r2
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	3301      	adds	r3, #1
 8009708:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800970a:	7c3b      	ldrb	r3, [r7, #16]
 800970c:	b29b      	uxth	r3, r3
 800970e:	021b      	lsls	r3, r3, #8
 8009710:	b29a      	uxth	r2, r3
 8009712:	7bfb      	ldrb	r3, [r7, #15]
 8009714:	b29b      	uxth	r3, r3
 8009716:	4413      	add	r3, r2
 8009718:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	89ba      	ldrh	r2, [r7, #12]
 800971e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8009722:	e06a      	b.n	80097fa <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	683a      	ldr	r2, [r7, #0]
 8009728:	4413      	add	r3, r2
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	743b      	strb	r3, [r7, #16]
				Index++;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	3301      	adds	r3, #1
 8009732:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	683a      	ldr	r2, [r7, #0]
 8009738:	4413      	add	r3, r2
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	3301      	adds	r3, #1
 8009742:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009744:	7c3b      	ldrb	r3, [r7, #16]
 8009746:	b29b      	uxth	r3, r3
 8009748:	021b      	lsls	r3, r3, #8
 800974a:	b29a      	uxth	r2, r3
 800974c:	7bfb      	ldrb	r3, [r7, #15]
 800974e:	b29b      	uxth	r3, r3
 8009750:	4413      	add	r3, r2
 8009752:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	89ba      	ldrh	r2, [r7, #12]
 8009758:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800975c:	e04d      	b.n	80097fa <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	683a      	ldr	r2, [r7, #0]
 8009762:	4413      	add	r3, r2
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	743b      	strb	r3, [r7, #16]
				Index++;
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	3301      	adds	r3, #1
 800976c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	683a      	ldr	r2, [r7, #0]
 8009772:	4413      	add	r3, r2
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	3301      	adds	r3, #1
 800977c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800977e:	7c3b      	ldrb	r3, [r7, #16]
 8009780:	b29b      	uxth	r3, r3
 8009782:	021b      	lsls	r3, r3, #8
 8009784:	b29a      	uxth	r2, r3
 8009786:	7bfb      	ldrb	r3, [r7, #15]
 8009788:	b29b      	uxth	r3, r3
 800978a:	4413      	add	r3, r2
 800978c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	89ba      	ldrh	r2, [r7, #12]
 8009792:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8009796:	e030      	b.n	80097fa <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009798:	23fc      	movs	r3, #252	; 0xfc
 800979a:	77fb      	strb	r3, [r7, #31]
 800979c:	e02d      	b.n	80097fa <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800979e:	7cfb      	ldrb	r3, [r7, #19]
 80097a0:	2b04      	cmp	r3, #4
 80097a2:	d828      	bhi.n	80097f6 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	683a      	ldr	r2, [r7, #0]
 80097a8:	4413      	add	r3, r2
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	74bb      	strb	r3, [r7, #18]
			Index++;
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	3301      	adds	r3, #1
 80097b2:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 80097b4:	2300      	movs	r3, #0
 80097b6:	61bb      	str	r3, [r7, #24]
 80097b8:	e00f      	b.n	80097da <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	683a      	ldr	r2, [r7, #0]
 80097be:	4413      	add	r3, r2
 80097c0:	7819      	ldrb	r1, [r3, #0]
 80097c2:	f107 0208 	add.w	r2, r7, #8
 80097c6:	69bb      	ldr	r3, [r7, #24]
 80097c8:	4413      	add	r3, r2
 80097ca:	460a      	mov	r2, r1
 80097cc:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	3301      	adds	r3, #1
 80097d2:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	3301      	adds	r3, #1
 80097d8:	61bb      	str	r3, [r7, #24]
 80097da:	7cfb      	ldrb	r3, [r7, #19]
 80097dc:	69ba      	ldr	r2, [r7, #24]
 80097de:	429a      	cmp	r2, r3
 80097e0:	dbeb      	blt.n	80097ba <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 80097e2:	7cfb      	ldrb	r3, [r7, #19]
 80097e4:	f107 0208 	add.w	r2, r7, #8
 80097e8:	7cb9      	ldrb	r1, [r7, #18]
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f7fa fa1c 	bl	8003c28 <VL53L0X_WriteMulti>
 80097f0:	4603      	mov	r3, r0
 80097f2:	77fb      	strb	r3, [r7, #31]
 80097f4:	e001      	b.n	80097fa <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80097f6:	23fc      	movs	r3, #252	; 0xfc
 80097f8:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	683a      	ldr	r2, [r7, #0]
 80097fe:	4413      	add	r3, r2
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d004      	beq.n	8009810 <VL53L0X_load_tuning_settings+0x1b8>
 8009806:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800980a:	2b00      	cmp	r3, #0
 800980c:	f43f af2e 	beq.w	800966c <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009810:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009814:	4618      	mov	r0, r3
 8009816:	3720      	adds	r7, #32
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b088      	sub	sp, #32
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009828:	2300      	movs	r3, #0
 800982a:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8009832:	f107 0313 	add.w	r3, r7, #19
 8009836:	4619      	mov	r1, r3
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f7fc ffbb 	bl	80067b4 <VL53L0X_GetXTalkCompensationEnable>
 800983e:	4603      	mov	r3, r0
 8009840:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8009842:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d111      	bne.n	800986e <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800984a:	7cfb      	ldrb	r3, [r7, #19]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00e      	beq.n	800986e <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6a1b      	ldr	r3, [r3, #32]
 8009854:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	8a9b      	ldrh	r3, [r3, #20]
 800985a:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800985c:	69bb      	ldr	r3, [r7, #24]
 800985e:	fb02 f303 	mul.w	r3, r2, r3
 8009862:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	3380      	adds	r3, #128	; 0x80
 8009868:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800986e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009872:	4618      	mov	r0, r3
 8009874:	3720      	adds	r7, #32
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b086      	sub	sp, #24
 800987e:	af00      	add	r7, sp, #0
 8009880:	60f8      	str	r0, [r7, #12]
 8009882:	60b9      	str	r1, [r7, #8]
 8009884:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009886:	2300      	movs	r3, #0
 8009888:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8009892:	f107 0310 	add.w	r3, r7, #16
 8009896:	461a      	mov	r2, r3
 8009898:	68b9      	ldr	r1, [r7, #8]
 800989a:	68f8      	ldr	r0, [r7, #12]
 800989c:	f7ff ffbe 	bl	800981c <VL53L0X_get_total_xtalk_rate>
 80098a0:	4603      	mov	r3, r0
 80098a2:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80098a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d105      	bne.n	80098b8 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	441a      	add	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	601a      	str	r2, [r3, #0]

	return Status;
 80098b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3718      	adds	r7, #24
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b09a      	sub	sp, #104	; 0x68
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
 80098d0:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 80098d2:	2312      	movs	r3, #18
 80098d4:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 80098d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80098da:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 80098dc:	2342      	movs	r3, #66	; 0x42
 80098de:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 80098e0:	2306      	movs	r3, #6
 80098e2:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 80098e4:	2307      	movs	r3, #7
 80098e6:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098e8:	2300      	movs	r3, #0
 80098ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 80098f4:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80098fc:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 80098fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009900:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009902:	fb02 f303 	mul.w	r3, r2, r3
 8009906:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8009908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800990a:	3380      	adds	r3, #128	; 0x80
 800990c:	0a1b      	lsrs	r3, r3, #8
 800990e:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8009910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009912:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009914:	fb02 f303 	mul.w	r3, r2, r3
 8009918:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800991a:	2300      	movs	r3, #0
 800991c:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d01a      	beq.n	800995a <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	029b      	lsls	r3, r3, #10
 8009928:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800992e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009930:	4413      	add	r3, r2
 8009932:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8009934:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	fbb2 f3f3 	udiv	r3, r2, r3
 800993c:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800993e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009940:	4613      	mov	r3, r2
 8009942:	005b      	lsls	r3, r3, #1
 8009944:	4413      	add	r3, r2
 8009946:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8009948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800994a:	fb03 f303 	mul.w	r3, r3, r3
 800994e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8009950:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009952:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009956:	0c1b      	lsrs	r3, r3, #16
 8009958:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800995e:	fb02 f303 	mul.w	r3, r2, r3
 8009962:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8009964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009966:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800996a:	0c1b      	lsrs	r3, r3, #16
 800996c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800996e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009970:	fb03 f303 	mul.w	r3, r3, r3
 8009974:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8009976:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009978:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800997c:	0c1b      	lsrs	r3, r3, #16
 800997e:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8009980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009982:	085a      	lsrs	r2, r3, #1
 8009984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009986:	441a      	add	r2, r3
 8009988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800998a:	fbb2 f3f3 	udiv	r3, r2, r3
 800998e:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8009990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009992:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009994:	fb02 f303 	mul.w	r3, r2, r3
 8009998:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800999a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099a0:	d302      	bcc.n	80099a8 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 80099a2:	4b54      	ldr	r3, [pc, #336]	; (8009af4 <VL53L0X_calc_dmax+0x230>)
 80099a4:	663b      	str	r3, [r7, #96]	; 0x60
 80099a6:	e015      	b.n	80099d4 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 80099a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099aa:	085a      	lsrs	r2, r3, #1
 80099ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099ae:	441a      	add	r2, r3
 80099b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80099b6:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 80099b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099bc:	fb02 f303 	mul.w	r3, r2, r3
 80099c0:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80099c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80099c8:	0c1b      	lsrs	r3, r3, #16
 80099ca:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 80099cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099ce:	fb03 f303 	mul.w	r3, r3, r3
 80099d2:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 80099d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099d6:	039b      	lsls	r3, r3, #14
 80099d8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80099dc:	4a46      	ldr	r2, [pc, #280]	; (8009af8 <VL53L0X_calc_dmax+0x234>)
 80099de:	fba2 2303 	umull	r2, r3, r2, r3
 80099e2:	099b      	lsrs	r3, r3, #6
 80099e4:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 80099e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e8:	fb03 f303 	mul.w	r3, r3, r3
 80099ec:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 80099ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099f0:	fb03 f303 	mul.w	r3, r3, r3
 80099f4:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 80099f6:	6a3b      	ldr	r3, [r7, #32]
 80099f8:	3308      	adds	r3, #8
 80099fa:	091b      	lsrs	r3, r3, #4
 80099fc:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 80099fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a00:	6a3b      	ldr	r3, [r7, #32]
 8009a02:	1ad3      	subs	r3, r2, r3
 8009a04:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8009a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a08:	4613      	mov	r3, r2
 8009a0a:	005b      	lsls	r3, r3, #1
 8009a0c:	4413      	add	r3, r2
 8009a0e:	011b      	lsls	r3, r3, #4
 8009a10:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8009a12:	69fb      	ldr	r3, [r7, #28]
 8009a14:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009a18:	0b9b      	lsrs	r3, r3, #14
 8009a1a:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8009a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a20:	4413      	add	r3, r2
 8009a22:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8009a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a26:	085b      	lsrs	r3, r3, #1
 8009a28:	69ba      	ldr	r2, [r7, #24]
 8009a2a:	4413      	add	r3, r2
 8009a2c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8009a2e:	69ba      	ldr	r2, [r7, #24]
 8009a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a36:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	039b      	lsls	r3, r3, #14
 8009a3c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	085b      	lsrs	r3, r3, #1
 8009a42:	69ba      	ldr	r2, [r7, #24]
 8009a44:	4413      	add	r3, r2
 8009a46:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8009a48:	69ba      	ldr	r2, [r7, #24]
 8009a4a:	69fb      	ldr	r3, [r7, #28]
 8009a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a50:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009a56:	fb02 f303 	mul.w	r3, r2, r3
 8009a5a:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009a62:	4a25      	ldr	r2, [pc, #148]	; (8009af8 <VL53L0X_calc_dmax+0x234>)
 8009a64:	fba2 2303 	umull	r2, r3, r2, r3
 8009a68:	099b      	lsrs	r3, r3, #6
 8009a6a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	011b      	lsls	r3, r3, #4
 8009a70:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009a78:	4a1f      	ldr	r2, [pc, #124]	; (8009af8 <VL53L0X_calc_dmax+0x234>)
 8009a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a7e:	099b      	lsrs	r3, r3, #6
 8009a80:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8009a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a84:	3380      	adds	r3, #128	; 0x80
 8009a86:	0a1b      	lsrs	r3, r3, #8
 8009a88:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d008      	beq.n	8009aa2 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	085a      	lsrs	r2, r3, #1
 8009a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a96:	441a      	add	r2, r3
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009aa0:	e001      	b.n	8009aa6 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8009aa6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009aa8:	f7fe fc41 	bl	800832e <VL53L0X_isqrt>
 8009aac:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d008      	beq.n	8009ac6 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	085a      	lsrs	r2, r3, #1
 8009ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aba:	441a      	add	r2, r3
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ac4:	e001      	b.n	8009aca <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8009aca:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009acc:	f7fe fc2f 	bl	800832e <VL53L0X_isqrt>
 8009ad0:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8009ad2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009ad4:	693a      	ldr	r2, [r7, #16]
 8009ad6:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8009ad8:	693a      	ldr	r2, [r7, #16]
 8009ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d902      	bls.n	8009ae6 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8009ae0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009ae2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009ae4:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8009ae6:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3768      	adds	r7, #104	; 0x68
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	fff00000 	.word	0xfff00000
 8009af8:	10624dd3 	.word	0x10624dd3

08009afc <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b0b4      	sub	sp, #208	; 0xd0
 8009b00:	af04      	add	r7, sp, #16
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	607a      	str	r2, [r7, #4]
 8009b08:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8009b0a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8009b0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8009b12:	f44f 7316 	mov.w	r3, #600	; 0x258
 8009b16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8009b1a:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8009b1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8009b22:	f241 235c 	movw	r3, #4700	; 0x125c
 8009b26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8009b2a:	4b9e      	ldr	r3, [pc, #632]	; (8009da4 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8009b2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8009b30:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009b34:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8009b36:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8009b3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b42:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8009b44:	4b98      	ldr	r3, [pc, #608]	; (8009da8 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8009b46:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8009b48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b4c:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8009b4e:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8009b52:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8009b54:	f240 6377 	movw	r3, #1655	; 0x677
 8009b58:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6a1b      	ldr	r3, [r3, #32]
 8009b64:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	691b      	ldr	r3, [r3, #16]
 8009b6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009b6e:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8009b72:	0c1b      	lsrs	r3, r3, #16
 8009b74:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8009b7c:	f107 0310 	add.w	r3, r7, #16
 8009b80:	461a      	mov	r2, r3
 8009b82:	68b9      	ldr	r1, [r7, #8]
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f7ff fe78 	bl	800987a <VL53L0X_get_total_signal_rate>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8009b90:	f107 0314 	add.w	r3, r7, #20
 8009b94:	461a      	mov	r2, r3
 8009b96:	68b9      	ldr	r1, [r7, #8]
 8009b98:	68f8      	ldr	r0, [r7, #12]
 8009b9a:	f7ff fe3f 	bl	800981c <VL53L0X_get_total_xtalk_rate>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009baa:	fb02 f303 	mul.w	r3, r2, r3
 8009bae:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8009bb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bb2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009bb6:	0c1b      	lsrs	r3, r3, #16
 8009bb8:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009bc0:	fb02 f303 	mul.w	r3, r2, r3
 8009bc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8009bc8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d902      	bls.n	8009bd8 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8009bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8009bd8:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d168      	bne.n	8009cb2 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009be6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8009bf0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8009bf4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f7ff f93a 	bl	8008e78 <VL53L0X_calc_timeout_mclks>
 8009c04:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8009c16:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8009c1a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009c1e:	461a      	mov	r2, r3
 8009c20:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8009c24:	68f8      	ldr	r0, [r7, #12]
 8009c26:	f7ff f927 	bl	8008e78 <VL53L0X_calc_timeout_mclks>
 8009c2a:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8009c2c:	2303      	movs	r3, #3
 8009c2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8009c32:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009c36:	2b08      	cmp	r3, #8
 8009c38:	d102      	bne.n	8009c40 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8009c3a:	2302      	movs	r3, #2
 8009c3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8009c40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c44:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8009c46:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009c4a:	fb02 f303 	mul.w	r3, r2, r3
 8009c4e:	02db      	lsls	r3, r3, #11
 8009c50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8009c54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009c58:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009c5c:	4a53      	ldr	r2, [pc, #332]	; (8009dac <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c62:	099b      	lsrs	r3, r3, #6
 8009c64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8009c68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009c6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009c6e:	fb02 f303 	mul.w	r3, r2, r3
 8009c72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8009c76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009c7a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009c7e:	4a4b      	ldr	r2, [pc, #300]	; (8009dac <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009c80:	fba2 2303 	umull	r2, r3, r2, r3
 8009c84:	099b      	lsrs	r3, r3, #6
 8009c86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	3380      	adds	r3, #128	; 0x80
 8009c8e:	0a1b      	lsrs	r3, r3, #8
 8009c90:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8009c92:	693a      	ldr	r2, [r7, #16]
 8009c94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009c98:	fb02 f303 	mul.w	r3, r2, r3
 8009c9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8009ca0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009ca4:	3380      	adds	r3, #128	; 0x80
 8009ca6:	0a1b      	lsrs	r3, r3, #8
 8009ca8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	021b      	lsls	r3, r3, #8
 8009cb0:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009cb2:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d002      	beq.n	8009cc0 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8009cba:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009cbe:	e15e      	b.n	8009f7e <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8009cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10c      	bne.n	8009ce0 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009ccc:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009cd4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	601a      	str	r2, [r3, #0]
 8009cde:	e14c      	b.n	8009f7a <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8009ce0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d102      	bne.n	8009cee <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8009cee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009cf2:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8009cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cf6:	041a      	lsls	r2, r3, #16
 8009cf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8009d02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009d06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d902      	bls.n	8009d12 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8009d0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8009d12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009d16:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009d1a:	fb02 f303 	mul.w	r3, r2, r3
 8009d1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8009d22:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009d26:	4613      	mov	r3, r2
 8009d28:	005b      	lsls	r3, r3, #1
 8009d2a:	4413      	add	r3, r2
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7fe fafd 	bl	800832e <VL53L0X_isqrt>
 8009d34:	4603      	mov	r3, r0
 8009d36:	005b      	lsls	r3, r3, #1
 8009d38:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	891b      	ldrh	r3, [r3, #8]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d42:	fb02 f303 	mul.w	r3, r2, r3
 8009d46:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d4a:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8009d4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d50:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009d52:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8009d54:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009d58:	4a14      	ldr	r2, [pc, #80]	; (8009dac <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d5e:	099b      	lsrs	r3, r3, #6
 8009d60:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8009d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d64:	041b      	lsls	r3, r3, #16
 8009d66:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009d6a:	4a10      	ldr	r2, [pc, #64]	; (8009dac <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8009d70:	099b      	lsrs	r3, r3, #6
 8009d72:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8009d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d76:	021b      	lsls	r3, r3, #8
 8009d78:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8009d7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	bfb8      	it	lt
 8009d86:	425b      	neglt	r3, r3
 8009d88:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8009d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d8c:	021b      	lsls	r3, r3, #8
 8009d8e:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	7e1b      	ldrb	r3, [r3, #24]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d00b      	beq.n	8009db0 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8009d98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009da0:	e033      	b.n	8009e0a <VL53L0X_calc_sigma_estimate+0x30e>
 8009da2:	bf00      	nop
 8009da4:	028f87ae 	.word	0x028f87ae
 8009da8:	0006999a 	.word	0x0006999a
 8009dac:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8009db0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009db2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8009dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dc0:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8009dc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009dc8:	fb02 f303 	mul.w	r3, r2, r3
 8009dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8009dd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009dd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009dd6:	4413      	add	r3, r2
 8009dd8:	0c1b      	lsrs	r3, r3, #16
 8009dda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8009dde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009de2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8009de6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8009dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009dee:	085b      	lsrs	r3, r3, #1
 8009df0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8009df4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009df8:	fb03 f303 	mul.w	r3, r3, r3
 8009dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8009e00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e04:	0b9b      	lsrs	r3, r3, #14
 8009e06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8009e0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e10:	fb02 f303 	mul.w	r3, r2, r3
 8009e14:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8009e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e18:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009e1c:	0c1b      	lsrs	r3, r3, #16
 8009e1e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8009e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e22:	fb03 f303 	mul.w	r3, r3, r3
 8009e26:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8009e28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009e2c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8009e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e30:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009e34:	0c1b      	lsrs	r3, r3, #16
 8009e36:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8009e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3a:	fb03 f303 	mul.w	r3, r3, r3
 8009e3e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8009e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e44:	4413      	add	r3, r2
 8009e46:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8009e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e4a:	f7fe fa70 	bl	800832e <VL53L0X_isqrt>
 8009e4e:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8009e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e52:	041b      	lsls	r3, r3, #16
 8009e54:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8009e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e58:	3332      	adds	r3, #50	; 0x32
 8009e5a:	4a4b      	ldr	r2, [pc, #300]	; (8009f88 <VL53L0X_calc_sigma_estimate+0x48c>)
 8009e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e60:	095a      	lsrs	r2, r3, #5
 8009e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8009e6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009e70:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8009e74:	fb02 f303 	mul.w	r3, r2, r3
 8009e78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8009e7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009e80:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8009e84:	3308      	adds	r3, #8
 8009e86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8009e8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009e8e:	4a3f      	ldr	r2, [pc, #252]	; (8009f8c <VL53L0X_calc_sigma_estimate+0x490>)
 8009e90:	fba2 2303 	umull	r2, r3, r2, r3
 8009e94:	0b5b      	lsrs	r3, r3, #13
 8009e96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8009e9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009e9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d902      	bls.n	8009eaa <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8009ea4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009ea6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8009eaa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009eae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009eb2:	4413      	add	r3, r2
 8009eb4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8009eb8:	4a35      	ldr	r2, [pc, #212]	; (8009f90 <VL53L0X_calc_sigma_estimate+0x494>)
 8009eba:	fba2 2303 	umull	r2, r3, r2, r3
 8009ebe:	099b      	lsrs	r3, r3, #6
 8009ec0:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8009ec2:	6a3b      	ldr	r3, [r7, #32]
 8009ec4:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8009ec6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009eca:	441a      	add	r2, r3
 8009ecc:	6a3b      	ldr	r3, [r7, #32]
 8009ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fe fa2b 	bl	800832e <VL53L0X_isqrt>
 8009ed8:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8009eda:	69fb      	ldr	r3, [r7, #28]
 8009edc:	021b      	lsls	r3, r3, #8
 8009ede:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009ee6:	4a2a      	ldr	r2, [pc, #168]	; (8009f90 <VL53L0X_calc_sigma_estimate+0x494>)
 8009ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8009eec:	099b      	lsrs	r3, r3, #6
 8009eee:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8009ef0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009ef4:	fb03 f303 	mul.w	r3, r3, r3
 8009ef8:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	fb03 f303 	mul.w	r3, r3, r3
 8009f00:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8009f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f06:	4413      	add	r3, r2
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7fe fa10 	bl	800832e <VL53L0X_isqrt>
 8009f0e:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8009f10:	69bb      	ldr	r3, [r7, #24]
 8009f12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009f16:	fb02 f303 	mul.w	r3, r2, r3
 8009f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8009f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d009      	beq.n	8009f38 <VL53L0X_calc_sigma_estimate+0x43c>
 8009f24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d005      	beq.n	8009f38 <VL53L0X_calc_sigma_estimate+0x43c>
 8009f2c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009f30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d903      	bls.n	8009f40 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8009f38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009f46:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8009f52:	6939      	ldr	r1, [r7, #16]
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	9303      	str	r3, [sp, #12]
 8009f58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009f5c:	9302      	str	r3, [sp, #8]
 8009f5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009f62:	9301      	str	r3, [sp, #4]
 8009f64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f7ff fca8 	bl	80098c4 <VL53L0X_calc_dmax>
 8009f74:	4603      	mov	r3, r0
 8009f76:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009f7a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	37c0      	adds	r7, #192	; 0xc0
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	51eb851f 	.word	0x51eb851f
 8009f8c:	d1b71759 	.word	0xd1b71759
 8009f90:	10624dd3 	.word	0x10624dd3

08009f94 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b090      	sub	sp, #64	; 0x40
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	607a      	str	r2, [r7, #4]
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	72fb      	strb	r3, [r7, #11]
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8009fe6:	7afb      	ldrb	r3, [r7, #11]
 8009fe8:	10db      	asrs	r3, r3, #3
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	f003 030f 	and.w	r3, r3, #15
 8009ff0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8009ff4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d017      	beq.n	800a02c <VL53L0X_get_pal_range_status+0x98>
 8009ffc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a000:	2b05      	cmp	r3, #5
 800a002:	d013      	beq.n	800a02c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800a004:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a008:	2b07      	cmp	r3, #7
 800a00a:	d00f      	beq.n	800a02c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800a00c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a010:	2b0c      	cmp	r3, #12
 800a012:	d00b      	beq.n	800a02c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800a014:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a018:	2b0d      	cmp	r3, #13
 800a01a:	d007      	beq.n	800a02c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800a01c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a020:	2b0e      	cmp	r3, #14
 800a022:	d003      	beq.n	800a02c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800a024:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a028:	2b0f      	cmp	r3, #15
 800a02a:	d103      	bne.n	800a034 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800a02c:	2301      	movs	r3, #1
 800a02e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a032:	e002      	b.n	800a03a <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800a034:	2300      	movs	r3, #0
 800a036:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a03a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d109      	bne.n	800a056 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a042:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800a046:	461a      	mov	r2, r3
 800a048:	2100      	movs	r1, #0
 800a04a:	68f8      	ldr	r0, [r7, #12]
 800a04c:	f7fc fc86 	bl	800695c <VL53L0X_GetLimitCheckEnable>
 800a050:	4603      	mov	r3, r0
 800a052:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800a056:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d02e      	beq.n	800a0bc <VL53L0X_get_pal_range_status+0x128>
 800a05e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a062:	2b00      	cmp	r3, #0
 800a064:	d12a      	bne.n	800a0bc <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800a066:	f107 0310 	add.w	r3, r7, #16
 800a06a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a06e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f7ff fd43 	bl	8009afc <VL53L0X_calc_sigma_estimate>
 800a076:	4603      	mov	r3, r0
 800a078:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800a07c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a080:	2b00      	cmp	r3, #0
 800a082:	d103      	bne.n	800a08c <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	b29a      	uxth	r2, r3
 800a088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a08a:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800a08c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a090:	2b00      	cmp	r3, #0
 800a092:	d113      	bne.n	800a0bc <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800a094:	f107 0320 	add.w	r3, r7, #32
 800a098:	461a      	mov	r2, r3
 800a09a:	2100      	movs	r1, #0
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f7fc fce3 	bl	8006a68 <VL53L0X_GetLimitCheckValue>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800a0a8:	6a3b      	ldr	r3, [r7, #32]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d006      	beq.n	800a0bc <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800a0ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0b0:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d902      	bls.n	800a0bc <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a0bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d109      	bne.n	800a0d8 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a0c4:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	2102      	movs	r1, #2
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f7fc fc45 	bl	800695c <VL53L0X_GetLimitCheckEnable>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800a0d8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d044      	beq.n	800a16a <VL53L0X_get_pal_range_status+0x1d6>
 800a0e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d140      	bne.n	800a16a <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800a0e8:	f107 031c 	add.w	r3, r7, #28
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	2102      	movs	r1, #2
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f7fc fcb9 	bl	8006a68 <VL53L0X_GetLimitCheckValue>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800a0fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a100:	2b00      	cmp	r3, #0
 800a102:	d107      	bne.n	800a114 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a104:	2201      	movs	r2, #1
 800a106:	21ff      	movs	r1, #255	; 0xff
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f7f9 fde9 	bl	8003ce0 <VL53L0X_WrByte>
 800a10e:	4603      	mov	r3, r0
 800a110:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800a114:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d109      	bne.n	800a130 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800a11c:	f107 0316 	add.w	r3, r7, #22
 800a120:	461a      	mov	r2, r3
 800a122:	21b6      	movs	r1, #182	; 0xb6
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f7f9 feb9 	bl	8003e9c <VL53L0X_RdWord>
 800a12a:	4603      	mov	r3, r0
 800a12c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800a130:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a134:	2b00      	cmp	r3, #0
 800a136:	d107      	bne.n	800a148 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a138:	2200      	movs	r2, #0
 800a13a:	21ff      	movs	r1, #255	; 0xff
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f7f9 fdcf 	bl	8003ce0 <VL53L0X_WrByte>
 800a142:	4603      	mov	r3, r0
 800a144:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800a148:	8afb      	ldrh	r3, [r7, #22]
 800a14a:	025b      	lsls	r3, r3, #9
 800a14c:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a152:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d006      	beq.n	800a16a <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800a15c:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800a15e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a160:	429a      	cmp	r2, r3
 800a162:	d902      	bls.n	800a16a <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800a164:	2301      	movs	r3, #1
 800a166:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a16a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d109      	bne.n	800a186 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a172:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a176:	461a      	mov	r2, r3
 800a178:	2103      	movs	r1, #3
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f7fc fbee 	bl	800695c <VL53L0X_GetLimitCheckEnable>
 800a180:	4603      	mov	r3, r0
 800a182:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800a186:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d023      	beq.n	800a1d6 <VL53L0X_get_pal_range_status+0x242>
 800a18e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a192:	2b00      	cmp	r3, #0
 800a194:	d11f      	bne.n	800a1d6 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800a196:	893b      	ldrh	r3, [r7, #8]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d102      	bne.n	800a1a2 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800a19c:	2300      	movs	r3, #0
 800a19e:	637b      	str	r3, [r7, #52]	; 0x34
 800a1a0:	e005      	b.n	800a1ae <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	021a      	lsls	r2, r3, #8
 800a1a6:	893b      	ldrh	r3, [r7, #8]
 800a1a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ac:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800a1ae:	f107 0318 	add.w	r3, r7, #24
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	2103      	movs	r1, #3
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f7fc fc56 	bl	8006a68 <VL53L0X_GetLimitCheckValue>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d006      	beq.n	800a1d6 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800a1c8:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800a1ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d202      	bcs.n	800a1d6 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a1d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d14a      	bne.n	800a274 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800a1de:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d103      	bne.n	800a1ee <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800a1e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1e8:	22ff      	movs	r2, #255	; 0xff
 800a1ea:	701a      	strb	r2, [r3, #0]
 800a1ec:	e042      	b.n	800a274 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800a1ee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d007      	beq.n	800a206 <VL53L0X_get_pal_range_status+0x272>
 800a1f6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	d003      	beq.n	800a206 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800a1fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a202:	2b03      	cmp	r3, #3
 800a204:	d103      	bne.n	800a20e <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800a206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a208:	2205      	movs	r2, #5
 800a20a:	701a      	strb	r2, [r3, #0]
 800a20c:	e032      	b.n	800a274 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800a20e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a212:	2b06      	cmp	r3, #6
 800a214:	d003      	beq.n	800a21e <VL53L0X_get_pal_range_status+0x28a>
 800a216:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a21a:	2b09      	cmp	r3, #9
 800a21c:	d103      	bne.n	800a226 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800a21e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a220:	2204      	movs	r2, #4
 800a222:	701a      	strb	r2, [r3, #0]
 800a224:	e026      	b.n	800a274 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800a226:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a22a:	2b08      	cmp	r3, #8
 800a22c:	d007      	beq.n	800a23e <VL53L0X_get_pal_range_status+0x2aa>
 800a22e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a232:	2b0a      	cmp	r3, #10
 800a234:	d003      	beq.n	800a23e <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800a236:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d103      	bne.n	800a246 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800a23e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a240:	2203      	movs	r2, #3
 800a242:	701a      	strb	r2, [r3, #0]
 800a244:	e016      	b.n	800a274 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800a246:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a24a:	2b04      	cmp	r3, #4
 800a24c:	d003      	beq.n	800a256 <VL53L0X_get_pal_range_status+0x2c2>
 800a24e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a252:	2b01      	cmp	r3, #1
 800a254:	d103      	bne.n	800a25e <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800a256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a258:	2202      	movs	r2, #2
 800a25a:	701a      	strb	r2, [r3, #0]
 800a25c:	e00a      	b.n	800a274 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800a25e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a262:	2b01      	cmp	r3, #1
 800a264:	d103      	bne.n	800a26e <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800a266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a268:	2201      	movs	r2, #1
 800a26a:	701a      	strb	r2, [r3, #0]
 800a26c:	e002      	b.n	800a274 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800a26e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a270:	2200      	movs	r2, #0
 800a272:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800a274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d102      	bne.n	800a282 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800a27c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a27e:	2200      	movs	r2, #0
 800a280:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a282:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800a286:	461a      	mov	r2, r3
 800a288:	2101      	movs	r1, #1
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	f7fc fb66 	bl	800695c <VL53L0X_GetLimitCheckEnable>
 800a290:	4603      	mov	r3, r0
 800a292:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800a296:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d14f      	bne.n	800a33e <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800a29e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d003      	beq.n	800a2ae <VL53L0X_get_pal_range_status+0x31a>
 800a2a6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d103      	bne.n	800a2b6 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2b4:	e002      	b.n	800a2bc <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a2c2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800a2c6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a2ca:	2b04      	cmp	r3, #4
 800a2cc:	d003      	beq.n	800a2d6 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800a2ce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d103      	bne.n	800a2de <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2dc:	e002      	b.n	800a2e4 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a2ea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800a2ee:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d003      	beq.n	800a2fe <VL53L0X_get_pal_range_status+0x36a>
 800a2f6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d103      	bne.n	800a306 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800a2fe:	2301      	movs	r3, #1
 800a300:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a304:	e002      	b.n	800a30c <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800a306:	2300      	movs	r3, #0
 800a308:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a312:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800a316:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d003      	beq.n	800a326 <VL53L0X_get_pal_range_status+0x392>
 800a31e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a322:	2b01      	cmp	r3, #1
 800a324:	d103      	bne.n	800a32e <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800a326:	2301      	movs	r3, #1
 800a328:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a32c:	e002      	b.n	800a334 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800a32e:	2300      	movs	r3, #0
 800a330:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a33a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a33e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800a342:	4618      	mov	r0, r3
 800a344:	3740      	adds	r7, #64	; 0x40
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 800a34a:	b480      	push	{r7}
 800a34c:	af00      	add	r7, sp, #0
  while (1);
 800a34e:	e7fe      	b.n	800a34e <BSP_ErrorHandler+0x4>

0800a350 <BSP_LED_Init>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b088      	sub	sp, #32
 800a354:	af00      	add	r7, sp, #0
 800a356:	4603      	mov	r3, r0
 800a358:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;

  if (Led == LED2)
 800a35a:	79fb      	ldrb	r3, [r7, #7]
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d124      	bne.n	800a3aa <BSP_LED_Init+0x5a>
  {
    /* Enable the GPIO_LED clock */
    LED2_GPIO_CLK_ENABLE();
 800a360:	4b1f      	ldr	r3, [pc, #124]	; (800a3e0 <BSP_LED_Init+0x90>)
 800a362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a364:	4a1e      	ldr	r2, [pc, #120]	; (800a3e0 <BSP_LED_Init+0x90>)
 800a366:	f043 0302 	orr.w	r3, r3, #2
 800a36a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a36c:	4b1c      	ldr	r3, [pc, #112]	; (800a3e0 <BSP_LED_Init+0x90>)
 800a36e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a370:	f003 0302 	and.w	r3, r3, #2
 800a374:	60bb      	str	r3, [r7, #8]
 800a376:	68bb      	ldr	r3, [r7, #8]

    /* Configure the GPIO_LED pin */
    GPIO_InitStructure.Pin = LED_PIN[Led];
 800a378:	79fb      	ldrb	r3, [r7, #7]
 800a37a:	4a1a      	ldr	r2, [pc, #104]	; (800a3e4 <BSP_LED_Init+0x94>)
 800a37c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a380:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800a382:	2301      	movs	r3, #1
 800a384:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 800a386:	2300      	movs	r3, #0
 800a388:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a38a:	2303      	movs	r3, #3
 800a38c:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStructure);
 800a38e:	f107 030c 	add.w	r3, r7, #12
 800a392:	4619      	mov	r1, r3
 800a394:	4814      	ldr	r0, [pc, #80]	; (800a3e8 <BSP_LED_Init+0x98>)
 800a396:	f003 fc2d 	bl	800dbf4 <HAL_GPIO_Init>
    /* By default, turn off LED */
    HAL_GPIO_WritePin(LED2_GPIO_PORT, GPIO_InitStructure.Pin, GPIO_PIN_SET);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	2201      	movs	r2, #1
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	4811      	ldr	r0, [pc, #68]	; (800a3e8 <BSP_LED_Init+0x98>)
 800a3a4:	f003 feaa 	bl	800e0fc <HAL_GPIO_WritePin>

    /* By default, turn off LED */
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }

}
 800a3a8:	e016      	b.n	800a3d8 <BSP_LED_Init+0x88>
    if (BSP_IO_Init() == IO_ERROR)
 800a3aa:	f000 fda3 	bl	800aef4 <BSP_IO_Init>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d101      	bne.n	800a3b8 <BSP_LED_Init+0x68>
      BSP_ErrorHandler();
 800a3b4:	f7ff ffc9 	bl	800a34a <BSP_ErrorHandler>
    BSP_IO_ConfigPin(LED_PIN[Led], IO_MODE_OUTPUT);
 800a3b8:	79fb      	ldrb	r3, [r7, #7]
 800a3ba:	4a0a      	ldr	r2, [pc, #40]	; (800a3e4 <BSP_LED_Init+0x94>)
 800a3bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3c0:	2101      	movs	r1, #1
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f000 fdda 	bl	800af7c <BSP_IO_ConfigPin>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 800a3c8:	79fb      	ldrb	r3, [r7, #7]
 800a3ca:	4a06      	ldr	r2, [pc, #24]	; (800a3e4 <BSP_LED_Init+0x94>)
 800a3cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3d0:	2101      	movs	r1, #1
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f000 fdee 	bl	800afb4 <BSP_IO_WritePin>
}
 800a3d8:	bf00      	nop
 800a3da:	3720      	adds	r7, #32
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	40021000 	.word	0x40021000
 800a3e4:	0801b9fc 	.word	0x0801b9fc
 800a3e8:	48000400 	.word	0x48000400

0800a3ec <BSP_LED_On>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 800a3f6:	79fb      	ldrb	r3, [r7, #7]
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d109      	bne.n	800a410 <BSP_LED_On+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_RESET);
 800a3fc:	79fb      	ldrb	r3, [r7, #7]
 800a3fe:	4a0a      	ldr	r2, [pc, #40]	; (800a428 <BSP_LED_On+0x3c>)
 800a400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a404:	2200      	movs	r2, #0
 800a406:	4619      	mov	r1, r3
 800a408:	4808      	ldr	r0, [pc, #32]	; (800a42c <BSP_LED_On+0x40>)
 800a40a:	f003 fe77 	bl	800e0fc <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
  }
}
 800a40e:	e007      	b.n	800a420 <BSP_LED_On+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
 800a410:	79fb      	ldrb	r3, [r7, #7]
 800a412:	4a05      	ldr	r2, [pc, #20]	; (800a428 <BSP_LED_On+0x3c>)
 800a414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a418:	2100      	movs	r1, #0
 800a41a:	4618      	mov	r0, r3
 800a41c:	f000 fdca 	bl	800afb4 <BSP_IO_WritePin>
}
 800a420:	bf00      	nop
 800a422:	3708      	adds	r7, #8
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	0801b9fc 	.word	0x0801b9fc
 800a42c:	48000400 	.word	0x48000400

0800a430 <BSP_LED_Off>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	4603      	mov	r3, r0
 800a438:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 800a43a:	79fb      	ldrb	r3, [r7, #7]
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d109      	bne.n	800a454 <BSP_LED_Off+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_SET);
 800a440:	79fb      	ldrb	r3, [r7, #7]
 800a442:	4a0a      	ldr	r2, [pc, #40]	; (800a46c <BSP_LED_Off+0x3c>)
 800a444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a448:	2201      	movs	r2, #1
 800a44a:	4619      	mov	r1, r3
 800a44c:	4808      	ldr	r0, [pc, #32]	; (800a470 <BSP_LED_Off+0x40>)
 800a44e:	f003 fe55 	bl	800e0fc <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }
}
 800a452:	e007      	b.n	800a464 <BSP_LED_Off+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 800a454:	79fb      	ldrb	r3, [r7, #7]
 800a456:	4a05      	ldr	r2, [pc, #20]	; (800a46c <BSP_LED_Off+0x3c>)
 800a458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a45c:	2101      	movs	r1, #1
 800a45e:	4618      	mov	r0, r3
 800a460:	f000 fda8 	bl	800afb4 <BSP_IO_WritePin>
}
 800a464:	bf00      	nop
 800a466:	3708      	adds	r7, #8
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	0801b9fc 	.word	0x0801b9fc
 800a470:	48000400 	.word	0x48000400

0800a474 <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 800a478:	4812      	ldr	r0, [pc, #72]	; (800a4c4 <I2C2_Init+0x50>)
 800a47a:	f004 fc4c 	bl	800ed16 <HAL_I2C_GetState>
 800a47e:	4603      	mov	r3, r0
 800a480:	2b00      	cmp	r3, #0
 800a482:	d11d      	bne.n	800a4c0 <I2C2_Init+0x4c>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 800a484:	4b0f      	ldr	r3, [pc, #60]	; (800a4c4 <I2C2_Init+0x50>)
 800a486:	4a10      	ldr	r2, [pc, #64]	; (800a4c8 <I2C2_Init+0x54>)
 800a488:	601a      	str	r2, [r3, #0]
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 800a48a:	4b0e      	ldr	r3, [pc, #56]	; (800a4c4 <I2C2_Init+0x50>)
 800a48c:	4a0f      	ldr	r2, [pc, #60]	; (800a4cc <I2C2_Init+0x58>)
 800a48e:	605a      	str	r2, [r3, #4]
    I2c2Handle.Init.OwnAddress1      = 0x70;
 800a490:	4b0c      	ldr	r3, [pc, #48]	; (800a4c4 <I2C2_Init+0x50>)
 800a492:	2270      	movs	r2, #112	; 0x70
 800a494:	609a      	str	r2, [r3, #8]
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800a496:	4b0b      	ldr	r3, [pc, #44]	; (800a4c4 <I2C2_Init+0x50>)
 800a498:	2201      	movs	r2, #1
 800a49a:	60da      	str	r2, [r3, #12]
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800a49c:	4b09      	ldr	r3, [pc, #36]	; (800a4c4 <I2C2_Init+0x50>)
 800a49e:	2200      	movs	r2, #0
 800a4a0:	611a      	str	r2, [r3, #16]
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 800a4a2:	4b08      	ldr	r3, [pc, #32]	; (800a4c4 <I2C2_Init+0x50>)
 800a4a4:	22ff      	movs	r2, #255	; 0xff
 800a4a6:	615a      	str	r2, [r3, #20]
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800a4a8:	4b06      	ldr	r3, [pc, #24]	; (800a4c4 <I2C2_Init+0x50>)
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	61da      	str	r2, [r3, #28]
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800a4ae:	4b05      	ldr	r3, [pc, #20]	; (800a4c4 <I2C2_Init+0x50>)
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit(&I2c2Handle);
 800a4b4:	4803      	ldr	r0, [pc, #12]	; (800a4c4 <I2C2_Init+0x50>)
 800a4b6:	f000 f80b 	bl	800a4d0 <I2C2_MspInit>
    HAL_I2C_Init(&I2c2Handle);
 800a4ba:	4802      	ldr	r0, [pc, #8]	; (800a4c4 <I2C2_Init+0x50>)
 800a4bc:	f003 fe4e 	bl	800e15c <HAL_I2C_Init>
  }
}
 800a4c0:	bf00      	nop
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	20001a04 	.word	0x20001a04
 800a4c8:	40005800 	.word	0x40005800
 800a4cc:	40403e5d 	.word	0x40403e5d

0800a4d0 <I2C2_MspInit>:
  * @brief Discovery I2C2 MSP Initialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hi2c)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b0ae      	sub	sp, #184	; 0xb8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == DISCOVERY_I2C2)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a37      	ldr	r2, [pc, #220]	; (800a5bc <I2C2_MspInit+0xec>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d168      	bne.n	800a5b4 <I2C2_MspInit+0xe4>
  {
    /*##-1- Configure the Discovery I2C2 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800a4e2:	2380      	movs	r3, #128	; 0x80
 800a4e4:	61bb      	str	r3, [r7, #24]
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 800a4e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a4ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 800a4ec:	f107 0318 	add.w	r3, r7, #24
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f007 f9a5 	bl	8011840 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 800a4f6:	4b32      	ldr	r3, [pc, #200]	; (800a5c0 <I2C2_MspInit+0xf0>)
 800a4f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4fa:	4a31      	ldr	r2, [pc, #196]	; (800a5c0 <I2C2_MspInit+0xf0>)
 800a4fc:	f043 0302 	orr.w	r3, r3, #2
 800a500:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a502:	4b2f      	ldr	r3, [pc, #188]	; (800a5c0 <I2C2_MspInit+0xf0>)
 800a504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a506:	f003 0302 	and.w	r3, r3, #2
 800a50a:	617b      	str	r3, [r7, #20]
 800a50c:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 800a50e:	4b2c      	ldr	r3, [pc, #176]	; (800a5c0 <I2C2_MspInit+0xf0>)
 800a510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a512:	4a2b      	ldr	r2, [pc, #172]	; (800a5c0 <I2C2_MspInit+0xf0>)
 800a514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a51a:	4b29      	ldr	r3, [pc, #164]	; (800a5c0 <I2C2_MspInit+0xf0>)
 800a51c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a51e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a522:	613b      	str	r3, [r7, #16]
 800a524:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 800a526:	2310      	movs	r3, #16
 800a528:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 800a52c:	2312      	movs	r3, #18
 800a52e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 800a532:	2301      	movs	r3, #1
 800a534:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 800a538:	2303      	movs	r3, #3
 800a53a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 800a53e:	2304      	movs	r3, #4
 800a540:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 800a544:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a548:	4619      	mov	r1, r3
 800a54a:	481e      	ldr	r0, [pc, #120]	; (800a5c4 <I2C2_MspInit+0xf4>)
 800a54c:	f003 fb52 	bl	800dbf4 <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 800a550:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a554:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 800a558:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a55c:	4619      	mov	r1, r3
 800a55e:	481a      	ldr	r0, [pc, #104]	; (800a5c8 <I2C2_MspInit+0xf8>)
 800a560:	f003 fb48 	bl	800dbf4 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 800a564:	4b16      	ldr	r3, [pc, #88]	; (800a5c0 <I2C2_MspInit+0xf0>)
 800a566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a568:	4a15      	ldr	r2, [pc, #84]	; (800a5c0 <I2C2_MspInit+0xf0>)
 800a56a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a56e:	6593      	str	r3, [r2, #88]	; 0x58
 800a570:	4b13      	ldr	r3, [pc, #76]	; (800a5c0 <I2C2_MspInit+0xf0>)
 800a572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a574:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a578:	60fb      	str	r3, [r7, #12]
 800a57a:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 800a57c:	4b10      	ldr	r3, [pc, #64]	; (800a5c0 <I2C2_MspInit+0xf0>)
 800a57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a580:	4a0f      	ldr	r2, [pc, #60]	; (800a5c0 <I2C2_MspInit+0xf0>)
 800a582:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a586:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 800a588:	4b0d      	ldr	r3, [pc, #52]	; (800a5c0 <I2C2_MspInit+0xf0>)
 800a58a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a58c:	4a0c      	ldr	r2, [pc, #48]	; (800a5c0 <I2C2_MspInit+0xf0>)
 800a58e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a592:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 800a594:	2200      	movs	r2, #0
 800a596:	2100      	movs	r1, #0
 800a598:	2021      	movs	r0, #33	; 0x21
 800a59a:	f003 f94e 	bl	800d83a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 800a59e:	2021      	movs	r0, #33	; 0x21
 800a5a0:	f003 f967 	bl	800d872 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	2100      	movs	r1, #0
 800a5a8:	2022      	movs	r0, #34	; 0x22
 800a5aa:	f003 f946 	bl	800d83a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 800a5ae:	2022      	movs	r0, #34	; 0x22
 800a5b0:	f003 f95f 	bl	800d872 <HAL_NVIC_EnableIRQ>
  }
}
 800a5b4:	bf00      	nop
 800a5b6:	37b8      	adds	r7, #184	; 0xb8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	40005800 	.word	0x40005800
 800a5c0:	40021000 	.word	0x40021000
 800a5c4:	48001c00 	.word	0x48001c00
 800a5c8:	48000400 	.word	0x48000400

0800a5cc <I2C2_DeInit>:
/**
  * @brief Discovery I2C2 Bus Deinitialization
  * @retval None
  */
void I2C2_DeInit(void)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 800a5d0:	4806      	ldr	r0, [pc, #24]	; (800a5ec <I2C2_DeInit+0x20>)
 800a5d2:	f004 fba0 	bl	800ed16 <HAL_I2C_GetState>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d005      	beq.n	800a5e8 <I2C2_DeInit+0x1c>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c2Handle);
 800a5dc:	4803      	ldr	r0, [pc, #12]	; (800a5ec <I2C2_DeInit+0x20>)
 800a5de:	f003 fe4c 	bl	800e27a <HAL_I2C_DeInit>
    I2C2_MspDeInit(&I2c2Handle);
 800a5e2:	4802      	ldr	r0, [pc, #8]	; (800a5ec <I2C2_DeInit+0x20>)
 800a5e4:	f000 f804 	bl	800a5f0 <I2C2_MspDeInit>
  }
}
 800a5e8:	bf00      	nop
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	20001a04 	.word	0x20001a04

0800a5f0 <I2C2_MspDeInit>:
  * @brief Discovery I2C2 MSP DeInitialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C2)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a1f      	ldr	r2, [pc, #124]	; (800a67c <I2C2_MspDeInit+0x8c>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d138      	bne.n	800a674 <I2C2_MspDeInit+0x84>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 800a602:	4b1f      	ldr	r3, [pc, #124]	; (800a680 <I2C2_MspDeInit+0x90>)
 800a604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a606:	4a1e      	ldr	r2, [pc, #120]	; (800a680 <I2C2_MspDeInit+0x90>)
 800a608:	f043 0302 	orr.w	r3, r3, #2
 800a60c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a60e:	4b1c      	ldr	r3, [pc, #112]	; (800a680 <I2C2_MspDeInit+0x90>)
 800a610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a612:	f003 0302 	and.w	r3, r3, #2
 800a616:	60fb      	str	r3, [r7, #12]
 800a618:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 800a61a:	4b19      	ldr	r3, [pc, #100]	; (800a680 <I2C2_MspDeInit+0x90>)
 800a61c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a61e:	4a18      	ldr	r2, [pc, #96]	; (800a680 <I2C2_MspDeInit+0x90>)
 800a620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a624:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a626:	4b16      	ldr	r3, [pc, #88]	; (800a680 <I2C2_MspDeInit+0x90>)
 800a628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a62a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a62e:	60bb      	str	r3, [r7, #8]
 800a630:	68bb      	ldr	r3, [r7, #8]

    /* Configure I2C Rx/Tx as alternate function  */
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 800a632:	2110      	movs	r1, #16
 800a634:	4813      	ldr	r0, [pc, #76]	; (800a684 <I2C2_MspDeInit+0x94>)
 800a636:	f003 fc6f 	bl	800df18 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 800a63a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a63e:	4812      	ldr	r0, [pc, #72]	; (800a688 <I2C2_MspDeInit+0x98>)
 800a640:	f003 fc6a 	bl	800df18 <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C2 peripheral ############################*/
    /* Force and release I2C Peripheral */
    DISCOVERY_I2C2_FORCE_RESET();
 800a644:	4b0e      	ldr	r3, [pc, #56]	; (800a680 <I2C2_MspDeInit+0x90>)
 800a646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a648:	4a0d      	ldr	r2, [pc, #52]	; (800a680 <I2C2_MspDeInit+0x90>)
 800a64a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a64e:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 800a650:	4b0b      	ldr	r3, [pc, #44]	; (800a680 <I2C2_MspDeInit+0x90>)
 800a652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a654:	4a0a      	ldr	r2, [pc, #40]	; (800a680 <I2C2_MspDeInit+0x90>)
 800a656:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a65a:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C2 clock */
    DISCOVERY_I2C2_CLK_DISABLE();
 800a65c:	4b08      	ldr	r3, [pc, #32]	; (800a680 <I2C2_MspDeInit+0x90>)
 800a65e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a660:	4a07      	ldr	r2, [pc, #28]	; (800a680 <I2C2_MspDeInit+0x90>)
 800a662:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a666:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C2 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 800a668:	2021      	movs	r0, #33	; 0x21
 800a66a:	f003 f910 	bl	800d88e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 800a66e:	2022      	movs	r0, #34	; 0x22
 800a670:	f003 f90d 	bl	800d88e <HAL_NVIC_DisableIRQ>
  }
}
 800a674:	bf00      	nop
 800a676:	3710      	adds	r7, #16
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	40005800 	.word	0x40005800
 800a680:	40021000 	.word	0x40021000
 800a684:	48001c00 	.word	0x48001c00
 800a688:	48000400 	.word	0x48000400

0800a68c <I2C2_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
static void I2C2_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 800a68c:	b590      	push	{r4, r7, lr}
 800a68e:	b089      	sub	sp, #36	; 0x24
 800a690:	af04      	add	r7, sp, #16
 800a692:	4604      	mov	r4, r0
 800a694:	4608      	mov	r0, r1
 800a696:	4611      	mov	r1, r2
 800a698:	461a      	mov	r2, r3
 800a69a:	4623      	mov	r3, r4
 800a69c:	80fb      	strh	r3, [r7, #6]
 800a69e:	4603      	mov	r3, r0
 800a6a0:	80bb      	strh	r3, [r7, #4]
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	807b      	strh	r3, [r7, #2]
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6ae:	b672      	cpsid	i
}
 800a6b0:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 800a6b2:	4b0d      	ldr	r3, [pc, #52]	; (800a6e8 <I2C2_WriteData+0x5c>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	8878      	ldrh	r0, [r7, #2]
 800a6b8:	88ba      	ldrh	r2, [r7, #4]
 800a6ba:	88f9      	ldrh	r1, [r7, #6]
 800a6bc:	9302      	str	r3, [sp, #8]
 800a6be:	2301      	movs	r3, #1
 800a6c0:	9301      	str	r3, [sp, #4]
 800a6c2:	1c7b      	adds	r3, r7, #1
 800a6c4:	9300      	str	r3, [sp, #0]
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	4808      	ldr	r0, [pc, #32]	; (800a6ec <I2C2_WriteData+0x60>)
 800a6ca:	f003 ffef 	bl	800e6ac <HAL_I2C_Mem_Write>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 800a6d2:	b662      	cpsie	i
}
 800a6d4:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 800a6d6:	7bfb      	ldrb	r3, [r7, #15]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d001      	beq.n	800a6e0 <I2C2_WriteData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800a6dc:	f000 f890 	bl	800a800 <I2C2_Error>
  }
}
 800a6e0:	bf00      	nop
 800a6e2:	3714      	adds	r7, #20
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd90      	pop	{r4, r7, pc}
 800a6e8:	2000053c 	.word	0x2000053c
 800a6ec:	20001a04 	.word	0x20001a04

0800a6f0 <I2C2_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
static uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b088      	sub	sp, #32
 800a6f4:	af04      	add	r7, sp, #16
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	80fb      	strh	r3, [r7, #6]
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	80bb      	strh	r3, [r7, #4]
 800a6fe:	4613      	mov	r3, r2
 800a700:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800a702:	2300      	movs	r3, #0
 800a704:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 800a706:	2300      	movs	r3, #0
 800a708:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 800a70a:	b672      	cpsid	i
}
 800a70c:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 800a70e:	4b10      	ldr	r3, [pc, #64]	; (800a750 <I2C2_ReadData+0x60>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	8878      	ldrh	r0, [r7, #2]
 800a714:	88ba      	ldrh	r2, [r7, #4]
 800a716:	88f9      	ldrh	r1, [r7, #6]
 800a718:	9302      	str	r3, [sp, #8]
 800a71a:	2301      	movs	r3, #1
 800a71c:	9301      	str	r3, [sp, #4]
 800a71e:	f107 030e 	add.w	r3, r7, #14
 800a722:	9300      	str	r3, [sp, #0]
 800a724:	4603      	mov	r3, r0
 800a726:	480b      	ldr	r0, [pc, #44]	; (800a754 <I2C2_ReadData+0x64>)
 800a728:	f004 f8d4 	bl	800e8d4 <HAL_I2C_Mem_Read>
 800a72c:	4603      	mov	r3, r0
 800a72e:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 800a730:	b662      	cpsie	i
}
 800a732:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 800a734:	7bfb      	ldrb	r3, [r7, #15]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d004      	beq.n	800a744 <I2C2_ReadData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800a73a:	f000 f861 	bl	800a800 <I2C2_Error>
    HAL_Delay(200);
 800a73e:	20c8      	movs	r0, #200	; 0xc8
 800a740:	f001 fce0 	bl	800c104 <HAL_Delay>
  }

  return value;
 800a744:	7bbb      	ldrb	r3, [r7, #14]
}
 800a746:	4618      	mov	r0, r3
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	2000053c 	.word	0x2000053c
 800a754:	20001a04 	.word	0x20001a04

0800a758 <I2C2_isDeviceReady>:

static uint8_t I2C2_isDeviceReady(uint16_t Addr, uint32_t trial)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	4603      	mov	r3, r0
 800a760:	6039      	str	r1, [r7, #0]
 800a762:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a764:	2300      	movs	r3, #0
 800a766:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 800a768:	2300      	movs	r3, #0
 800a76a:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 800a76c:	b672      	cpsid	i
}
 800a76e:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 800a770:	88f9      	ldrh	r1, [r7, #6]
 800a772:	2332      	movs	r3, #50	; 0x32
 800a774:	683a      	ldr	r2, [r7, #0]
 800a776:	480a      	ldr	r0, [pc, #40]	; (800a7a0 <I2C2_isDeviceReady+0x48>)
 800a778:	f004 f9c6 	bl	800eb08 <HAL_I2C_IsDeviceReady>
 800a77c:	4603      	mov	r3, r0
 800a77e:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 800a780:	b662      	cpsie	i
}
 800a782:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 800a784:	7bfb      	ldrb	r3, [r7, #15]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d004      	beq.n	800a794 <I2C2_isDeviceReady+0x3c>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800a78a:	f000 f839 	bl	800a800 <I2C2_Error>
    HAL_Delay(200);
 800a78e:	20c8      	movs	r0, #200	; 0xc8
 800a790:	f001 fcb8 	bl	800c104 <HAL_Delay>
  }

  return value;
 800a794:	7bbb      	ldrb	r3, [r7, #14]
}
 800a796:	4618      	mov	r0, r3
 800a798:	3710      	adds	r7, #16
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	20001a04 	.word	0x20001a04

0800a7a4 <I2C2_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C2_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b08a      	sub	sp, #40	; 0x28
 800a7a8:	af04      	add	r7, sp, #16
 800a7aa:	607b      	str	r3, [r7, #4]
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	81fb      	strh	r3, [r7, #14]
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	81bb      	strh	r3, [r7, #12]
 800a7b4:	4613      	mov	r3, r2
 800a7b6:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7bc:	b672      	cpsid	i
}
 800a7be:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 800a7c0:	4b0d      	ldr	r3, [pc, #52]	; (800a7f8 <I2C2_ReadBuffer+0x54>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	8978      	ldrh	r0, [r7, #10]
 800a7c6:	89ba      	ldrh	r2, [r7, #12]
 800a7c8:	89f9      	ldrh	r1, [r7, #14]
 800a7ca:	9302      	str	r3, [sp, #8]
 800a7cc:	8c3b      	ldrh	r3, [r7, #32]
 800a7ce:	9301      	str	r3, [sp, #4]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	9300      	str	r3, [sp, #0]
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	4809      	ldr	r0, [pc, #36]	; (800a7fc <I2C2_ReadBuffer+0x58>)
 800a7d8:	f004 f87c 	bl	800e8d4 <HAL_I2C_Mem_Read>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 800a7e0:	b662      	cpsie	i
}
 800a7e2:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 800a7e4:	7dfb      	ldrb	r3, [r7, #23]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d001      	beq.n	800a7ee <I2C2_ReadBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800a7ea:	f000 f809 	bl	800a800 <I2C2_Error>
  }

  return status;
 800a7ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3718      	adds	r7, #24
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	2000053c 	.word	0x2000053c
 800a7fc:	20001a04 	.word	0x20001a04

0800a800 <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	af00      	add	r7, sp, #0
  BSP_ErrorHandler();
 800a804:	f7ff fda1 	bl	800a34a <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 800a808:	4803      	ldr	r0, [pc, #12]	; (800a818 <I2C2_Error+0x18>)
 800a80a:	f003 fd36 	bl	800e27a <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
 800a80e:	f7ff fe31 	bl	800a474 <I2C2_Init>
}
 800a812:	bf00      	nop
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	20001a04 	.word	0x20001a04

0800a81c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]

  if (HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f004 fa76 	bl	800ed16 <HAL_I2C_GetState>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d132      	bne.n	800a896 <I2Cx_Init+0x7a>
  {
    if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cTSHandler))
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	4a1b      	ldr	r2, [pc, #108]	; (800a8a0 <I2Cx_Init+0x84>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d103      	bne.n	800a840 <I2Cx_Init+0x24>
    {
      /* TS (Capacitive Touch Panel) and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_TS_I2Cx;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	4a1a      	ldr	r2, [pc, #104]	; (800a8a4 <I2Cx_Init+0x88>)
 800a83c:	601a      	str	r2, [r3, #0]
 800a83e:	e012      	b.n	800a866 <I2Cx_Init+0x4a>

      /* Need to enable MFX, and in doing so, initialize I2C at the same time */
      /* MFX_IO_Init();*/

    }
    else if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cAudioHandler))
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	4a19      	ldr	r2, [pc, #100]	; (800a8a8 <I2Cx_Init+0x8c>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d103      	bne.n	800a850 <I2Cx_Init+0x34>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	4a18      	ldr	r2, [pc, #96]	; (800a8ac <I2Cx_Init+0x90>)
 800a84c:	601a      	str	r2, [r3, #0]
 800a84e:	e00a      	b.n	800a866 <I2Cx_Init+0x4a>
    }
    else if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cCameraHandler))
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4a17      	ldr	r2, [pc, #92]	; (800a8b0 <I2Cx_Init+0x94>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d103      	bne.n	800a860 <I2Cx_Init+0x44>
    {
      i2c_handler->Instance = DISCOVERY_CAMERA_I2Cx;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	4a12      	ldr	r2, [pc, #72]	; (800a8a4 <I2Cx_Init+0x88>)
 800a85c:	601a      	str	r2, [r3, #0]
 800a85e:	e002      	b.n	800a866 <I2Cx_Init+0x4a>
    }
    else
    {
      /* External, EEPROM and Arduino connector I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	4a10      	ldr	r2, [pc, #64]	; (800a8a4 <I2Cx_Init+0x88>)
 800a864:	601a      	str	r2, [r3, #0]
    }

    i2c_handler->Init.Timing           = DISCOVERY_I2C_TIMING;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4a12      	ldr	r2, [pc, #72]	; (800a8b4 <I2Cx_Init+0x98>)
 800a86a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0x70;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2270      	movs	r2, #112	; 0x70
 800a870:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2201      	movs	r2, #1
 800a876:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0xFF;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	22ff      	movs	r2, #255	; 0xff
 800a882:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2200      	movs	r2, #0
 800a88e:	621a      	str	r2, [r3, #32]


    /* Init the I2C */
    HAL_I2C_Init(i2c_handler);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f003 fc63 	bl	800e15c <HAL_I2C_Init>

  }

}
 800a896:	bf00      	nop
 800a898:	3708      	adds	r7, #8
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	20001a58 	.word	0x20001a58
 800a8a4:	40005800 	.word	0x40005800
 800a8a8:	20001aac 	.word	0x20001aac
 800a8ac:	40005400 	.word	0x40005400
 800a8b0:	20001b00 	.word	0x20001b00
 800a8b4:	90112626 	.word	0x90112626

0800a8b8 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b08a      	sub	sp, #40	; 0x28
 800a8bc:	af04      	add	r7, sp, #16
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	4608      	mov	r0, r1
 800a8c2:	4611      	mov	r1, r2
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	72fb      	strb	r3, [r7, #11]
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	813b      	strh	r3, [r7, #8]
 800a8ce:	4613      	mov	r3, r2
 800a8d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800a8d6:	7afb      	ldrb	r3, [r7, #11]
 800a8d8:	b299      	uxth	r1, r3
 800a8da:	88f8      	ldrh	r0, [r7, #6]
 800a8dc:	893a      	ldrh	r2, [r7, #8]
 800a8de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a8e2:	9302      	str	r3, [sp, #8]
 800a8e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8e6:	9301      	str	r3, [sp, #4]
 800a8e8:	6a3b      	ldr	r3, [r7, #32]
 800a8ea:	9300      	str	r3, [sp, #0]
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	68f8      	ldr	r0, [r7, #12]
 800a8f0:	f003 fff0 	bl	800e8d4 <HAL_I2C_Mem_Read>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 800a8f8:	7dfb      	ldrb	r3, [r7, #23]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d004      	beq.n	800a908 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800a8fe:	7afb      	ldrb	r3, [r7, #11]
 800a900:	4619      	mov	r1, r3
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	f000 f832 	bl	800a96c <I2Cx_Error>
  }
  return status;
 800a908:	7dfb      	ldrb	r3, [r7, #23]
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3718      	adds	r7, #24
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b08a      	sub	sp, #40	; 0x28
 800a916:	af04      	add	r7, sp, #16
 800a918:	60f8      	str	r0, [r7, #12]
 800a91a:	4608      	mov	r0, r1
 800a91c:	4611      	mov	r1, r2
 800a91e:	461a      	mov	r2, r3
 800a920:	4603      	mov	r3, r0
 800a922:	72fb      	strb	r3, [r7, #11]
 800a924:	460b      	mov	r3, r1
 800a926:	813b      	strh	r3, [r7, #8]
 800a928:	4613      	mov	r3, r2
 800a92a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a92c:	2300      	movs	r3, #0
 800a92e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800a930:	7afb      	ldrb	r3, [r7, #11]
 800a932:	b299      	uxth	r1, r3
 800a934:	88f8      	ldrh	r0, [r7, #6]
 800a936:	893a      	ldrh	r2, [r7, #8]
 800a938:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a93c:	9302      	str	r3, [sp, #8]
 800a93e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a940:	9301      	str	r3, [sp, #4]
 800a942:	6a3b      	ldr	r3, [r7, #32]
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	4603      	mov	r3, r0
 800a948:	68f8      	ldr	r0, [r7, #12]
 800a94a:	f003 feaf 	bl	800e6ac <HAL_I2C_Mem_Write>
 800a94e:	4603      	mov	r3, r0
 800a950:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 800a952:	7dfb      	ldrb	r3, [r7, #23]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d004      	beq.n	800a962 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initialize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800a958:	7afb      	ldrb	r3, [r7, #11]
 800a95a:	4619      	mov	r1, r3
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f000 f805 	bl	800a96c <I2Cx_Error>
  }
  return status;
 800a962:	7dfb      	ldrb	r3, [r7, #23]
}
 800a964:	4618      	mov	r0, r3
 800a966:	3718      	adds	r7, #24
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	460b      	mov	r3, r1
 800a976:	70fb      	strb	r3, [r7, #3]
  BSP_ErrorHandler();
 800a978:	f7ff fce7 	bl	800a34a <BSP_ErrorHandler>

  /* De-initialize the I2C communication bus */
  if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cTSHandler))
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4a08      	ldr	r2, [pc, #32]	; (800a9a0 <I2Cx_Error+0x34>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d102      	bne.n	800a98a <I2Cx_Error+0x1e>
  {
    I2C2_DeInit();
 800a984:	f7ff fe22 	bl	800a5cc <I2C2_DeInit>
 800a988:	e002      	b.n	800a990 <I2Cx_Error+0x24>
  }
  else
  {
    HAL_I2C_DeInit(i2c_handler);
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f003 fc75 	bl	800e27a <HAL_I2C_DeInit>
  }

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f7ff ff43 	bl	800a81c <I2Cx_Init>
}
 800a996:	bf00      	nop
 800a998:	3708      	adds	r7, #8
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	20001a58 	.word	0x20001a58

0800a9a4 <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	af00      	add	r7, sp, #0
  /* I2C2 init */
  I2C2_Init();
 800a9a8:	f7ff fd64 	bl	800a474 <I2C2_Init>

  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
 800a9ac:	2104      	movs	r1, #4
 800a9ae:	2084      	movs	r0, #132	; 0x84
 800a9b0:	f7ff fed2 	bl	800a758 <I2C2_isDeviceReady>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d001      	beq.n	800a9be <MFX_IO_Init+0x1a>
  {
    BSP_ErrorHandler();
 800a9ba:	f7ff fcc6 	bl	800a34a <BSP_ErrorHandler>
  }
}
 800a9be:	bf00      	nop
 800a9c0:	bd80      	pop	{r7, pc}
	...

0800a9c4 <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b088      	sub	sp, #32
 800a9c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 800a9ca:	4b19      	ldr	r3, [pc, #100]	; (800aa30 <MFX_IO_DeInit+0x6c>)
 800a9cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ce:	4a18      	ldr	r2, [pc, #96]	; (800aa30 <MFX_IO_DeInit+0x6c>)
 800a9d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a9d6:	4b16      	ldr	r3, [pc, #88]	; (800aa30 <MFX_IO_DeInit+0x6c>)
 800a9d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9de:	60bb      	str	r3, [r7, #8]
 800a9e0:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 800a9e2:	2340      	movs	r3, #64	; 0x40
 800a9e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 800a9ee:	2302      	movs	r3, #2
 800a9f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 800a9f2:	f107 030c 	add.w	r3, r7, #12
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	480e      	ldr	r0, [pc, #56]	; (800aa34 <MFX_IO_DeInit+0x70>)
 800a9fa:	f003 f8fb 	bl	800dbf4 <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 800a9fe:	2017      	movs	r0, #23
 800aa00:	f002 ff45 	bl	800d88e <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 800aa04:	4b0a      	ldr	r3, [pc, #40]	; (800aa30 <MFX_IO_DeInit+0x6c>)
 800aa06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa08:	4a09      	ldr	r2, [pc, #36]	; (800aa30 <MFX_IO_DeInit+0x6c>)
 800aa0a:	f043 0304 	orr.w	r3, r3, #4
 800aa0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aa10:	4b07      	ldr	r3, [pc, #28]	; (800aa30 <MFX_IO_DeInit+0x6c>)
 800aa12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa14:	f003 0304 	and.w	r3, r3, #4
 800aa18:	607b      	str	r3, [r7, #4]
 800aa1a:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 800aa1c:	2120      	movs	r1, #32
 800aa1e:	4806      	ldr	r0, [pc, #24]	; (800aa38 <MFX_IO_DeInit+0x74>)
 800aa20:	f003 fa7a 	bl	800df18 <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 800aa24:	f7ff fdd2 	bl	800a5cc <I2C2_DeInit>
}
 800aa28:	bf00      	nop
 800aa2a:	3720      	adds	r7, #32
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	40021000 	.word	0x40021000
 800aa34:	48001c00 	.word	0x48001c00
 800aa38:	48000800 	.word	0x48000800

0800aa3c <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b086      	sub	sp, #24
 800aa40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 800aa42:	4b13      	ldr	r3, [pc, #76]	; (800aa90 <MFX_IO_ITConfig+0x54>)
 800aa44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa46:	4a12      	ldr	r2, [pc, #72]	; (800aa90 <MFX_IO_ITConfig+0x54>)
 800aa48:	f043 0304 	orr.w	r3, r3, #4
 800aa4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aa4e:	4b10      	ldr	r3, [pc, #64]	; (800aa90 <MFX_IO_ITConfig+0x54>)
 800aa50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa52:	f003 0304 	and.w	r3, r3, #4
 800aa56:	603b      	str	r3, [r7, #0]
 800aa58:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 800aa5a:	2320      	movs	r3, #32
 800aa5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa62:	2300      	movs	r3, #0
 800aa64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 800aa66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800aa6a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 800aa6c:	1d3b      	adds	r3, r7, #4
 800aa6e:	4619      	mov	r1, r3
 800aa70:	4808      	ldr	r0, [pc, #32]	; (800aa94 <MFX_IO_ITConfig+0x58>)
 800aa72:	f003 f8bf 	bl	800dbf4 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 800aa76:	220f      	movs	r2, #15
 800aa78:	210f      	movs	r1, #15
 800aa7a:	2017      	movs	r0, #23
 800aa7c:	f002 fedd 	bl	800d83a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 800aa80:	2017      	movs	r0, #23
 800aa82:	f002 fef6 	bl	800d872 <HAL_NVIC_EnableIRQ>
}
 800aa86:	bf00      	nop
 800aa88:	3718      	adds	r7, #24
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	40021000 	.word	0x40021000
 800aa94:	48000800 	.word	0x48000800

0800aa98 <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b086      	sub	sp, #24
 800aa9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 800aa9e:	4b0e      	ldr	r3, [pc, #56]	; (800aad8 <MFX_IO_EnableWakeupPin+0x40>)
 800aaa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaa2:	4a0d      	ldr	r2, [pc, #52]	; (800aad8 <MFX_IO_EnableWakeupPin+0x40>)
 800aaa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aaaa:	4b0b      	ldr	r3, [pc, #44]	; (800aad8 <MFX_IO_EnableWakeupPin+0x40>)
 800aaac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aab2:	603b      	str	r3, [r7, #0]
 800aab4:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 800aab6:	2340      	movs	r3, #64	; 0x40
 800aab8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800aaba:	2301      	movs	r3, #1
 800aabc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800aabe:	2302      	movs	r3, #2
 800aac0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800aac2:	2300      	movs	r3, #0
 800aac4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 800aac6:	1d3b      	adds	r3, r7, #4
 800aac8:	4619      	mov	r1, r3
 800aaca:	4804      	ldr	r0, [pc, #16]	; (800aadc <MFX_IO_EnableWakeupPin+0x44>)
 800aacc:	f003 f892 	bl	800dbf4 <HAL_GPIO_Init>
}
 800aad0:	bf00      	nop
 800aad2:	3718      	adds	r7, #24
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	40021000 	.word	0x40021000
 800aadc:	48001c00 	.word	0x48001c00

0800aae0 <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 800aae4:	2201      	movs	r2, #1
 800aae6:	2140      	movs	r1, #64	; 0x40
 800aae8:	4806      	ldr	r0, [pc, #24]	; (800ab04 <MFX_IO_Wakeup+0x24>)
 800aaea:	f003 fb07 	bl	800e0fc <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 800aaee:	2001      	movs	r0, #1
 800aaf0:	f001 fb08 	bl	800c104 <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	2140      	movs	r1, #64	; 0x40
 800aaf8:	4802      	ldr	r0, [pc, #8]	; (800ab04 <MFX_IO_Wakeup+0x24>)
 800aafa:	f003 faff 	bl	800e0fc <HAL_GPIO_WritePin>
}
 800aafe:	bf00      	nop
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	48001c00 	.word	0x48001c00

0800ab08 <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	4603      	mov	r3, r0
 800ab10:	80fb      	strh	r3, [r7, #6]
 800ab12:	460b      	mov	r3, r1
 800ab14:	717b      	strb	r3, [r7, #5]
 800ab16:	4613      	mov	r3, r2
 800ab18:	713b      	strb	r3, [r7, #4]
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 800ab1a:	797b      	ldrb	r3, [r7, #5]
 800ab1c:	b299      	uxth	r1, r3
 800ab1e:	793b      	ldrb	r3, [r7, #4]
 800ab20:	88f8      	ldrh	r0, [r7, #6]
 800ab22:	2201      	movs	r2, #1
 800ab24:	f7ff fdb2 	bl	800a68c <I2C2_WriteData>
}
 800ab28:	bf00      	nop
 800ab2a:	3708      	adds	r7, #8
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	4603      	mov	r3, r0
 800ab38:	460a      	mov	r2, r1
 800ab3a:	80fb      	strh	r3, [r7, #6]
 800ab3c:	4613      	mov	r3, r2
 800ab3e:	717b      	strb	r3, [r7, #5]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 800ab40:	797b      	ldrb	r3, [r7, #5]
 800ab42:	b299      	uxth	r1, r3
 800ab44:	88fb      	ldrh	r3, [r7, #6]
 800ab46:	2201      	movs	r2, #1
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7ff fdd1 	bl	800a6f0 <I2C2_ReadData>
 800ab4e:	4603      	mov	r3, r0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b086      	sub	sp, #24
 800ab5c:	af02      	add	r7, sp, #8
 800ab5e:	60ba      	str	r2, [r7, #8]
 800ab60:	461a      	mov	r2, r3
 800ab62:	4603      	mov	r3, r0
 800ab64:	81fb      	strh	r3, [r7, #14]
 800ab66:	460b      	mov	r3, r1
 800ab68:	737b      	strb	r3, [r7, #13]
 800ab6a:	4613      	mov	r3, r2
 800ab6c:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800ab6e:	7b7b      	ldrb	r3, [r7, #13]
 800ab70:	b299      	uxth	r1, r3
 800ab72:	89f8      	ldrh	r0, [r7, #14]
 800ab74:	88fb      	ldrh	r3, [r7, #6]
 800ab76:	9300      	str	r3, [sp, #0]
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	f7ff fe12 	bl	800a7a4 <I2C2_ReadBuffer>
 800ab80:	4603      	mov	r3, r0
 800ab82:	b29b      	uxth	r3, r3
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3710      	adds	r7, #16
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f001 fab5 	bl	800c104 <HAL_Delay>
}
 800ab9a:	bf00      	nop
 800ab9c:	3708      	adds	r7, #8
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
	...

0800aba4 <FMC_BANK1_MspInit>:
  * @brief  Initializes FMC_BANK1_LCD_IO MSP.
  * @param  None
  * @retval None
  */
void FMC_BANK1_MspInit(void)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b08c      	sub	sp, #48	; 0x30
 800aba8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_Init_Structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800abaa:	4b38      	ldr	r3, [pc, #224]	; (800ac8c <FMC_BANK1_MspInit+0xe8>)
 800abac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abae:	4a37      	ldr	r2, [pc, #220]	; (800ac8c <FMC_BANK1_MspInit+0xe8>)
 800abb0:	f043 0301 	orr.w	r3, r3, #1
 800abb4:	6513      	str	r3, [r2, #80]	; 0x50
 800abb6:	4b35      	ldr	r3, [pc, #212]	; (800ac8c <FMC_BANK1_MspInit+0xe8>)
 800abb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abba:	f003 0301 	and.w	r3, r3, #1
 800abbe:	61bb      	str	r3, [r7, #24]
 800abc0:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800abc2:	4b32      	ldr	r3, [pc, #200]	; (800ac8c <FMC_BANK1_MspInit+0xe8>)
 800abc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abc6:	4a31      	ldr	r2, [pc, #196]	; (800ac8c <FMC_BANK1_MspInit+0xe8>)
 800abc8:	f043 0308 	orr.w	r3, r3, #8
 800abcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800abce:	4b2f      	ldr	r3, [pc, #188]	; (800ac8c <FMC_BANK1_MspInit+0xe8>)
 800abd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abd2:	f003 0308 	and.w	r3, r3, #8
 800abd6:	617b      	str	r3, [r7, #20]
 800abd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800abda:	4b2c      	ldr	r3, [pc, #176]	; (800ac8c <FMC_BANK1_MspInit+0xe8>)
 800abdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abde:	4a2b      	ldr	r2, [pc, #172]	; (800ac8c <FMC_BANK1_MspInit+0xe8>)
 800abe0:	f043 0310 	orr.w	r3, r3, #16
 800abe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800abe6:	4b29      	ldr	r3, [pc, #164]	; (800ac8c <FMC_BANK1_MspInit+0xe8>)
 800abe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abea:	f003 0310 	and.w	r3, r3, #16
 800abee:	613b      	str	r3, [r7, #16]
 800abf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800abf2:	4b26      	ldr	r3, [pc, #152]	; (800ac8c <FMC_BANK1_MspInit+0xe8>)
 800abf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abf6:	4a25      	ldr	r2, [pc, #148]	; (800ac8c <FMC_BANK1_MspInit+0xe8>)
 800abf8:	f043 0320 	orr.w	r3, r3, #32
 800abfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800abfe:	4b23      	ldr	r3, [pc, #140]	; (800ac8c <FMC_BANK1_MspInit+0xe8>)
 800ac00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac02:	f003 0320 	and.w	r3, r3, #32
 800ac06:	60fb      	str	r3, [r7, #12]
 800ac08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800ac0a:	4b20      	ldr	r3, [pc, #128]	; (800ac8c <FMC_BANK1_MspInit+0xe8>)
 800ac0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac0e:	4a1f      	ldr	r2, [pc, #124]	; (800ac8c <FMC_BANK1_MspInit+0xe8>)
 800ac10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac14:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac16:	4b1d      	ldr	r3, [pc, #116]	; (800ac8c <FMC_BANK1_MspInit+0xe8>)
 800ac18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac1e:	60bb      	str	r3, [r7, #8]
 800ac20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ac22:	4b1a      	ldr	r3, [pc, #104]	; (800ac8c <FMC_BANK1_MspInit+0xe8>)
 800ac24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac26:	4a19      	ldr	r2, [pc, #100]	; (800ac8c <FMC_BANK1_MspInit+0xe8>)
 800ac28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac2c:	6593      	str	r3, [r2, #88]	; 0x58
 800ac2e:	4b17      	ldr	r3, [pc, #92]	; (800ac8c <FMC_BANK1_MspInit+0xe8>)
 800ac30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac36:	607b      	str	r3, [r7, #4]
 800ac38:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800ac3a:	f005 fea9 	bl	8010990 <HAL_PWREx_EnableVddIO2>

  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 800ac3e:	2302      	movs	r3, #2
 800ac40:	623b      	str	r3, [r7, #32]
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
 800ac42:	2301      	movs	r3, #1
 800ac44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac46:	2303      	movs	r3, #3
 800ac48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Alternate = GPIO_AF12_FMC;
 800ac4a:	230c      	movs	r3, #12
 800ac4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* GPIOD configuration */ /* GPIO_PIN_7 is  FMC_NE1 */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | \
 800ac4e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800ac52:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7;

  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 800ac54:	f107 031c 	add.w	r3, r7, #28
 800ac58:	4619      	mov	r1, r3
 800ac5a:	480d      	ldr	r0, [pc, #52]	; (800ac90 <FMC_BANK1_MspInit+0xec>)
 800ac5c:	f002 ffca 	bl	800dbf4 <HAL_GPIO_Init>




  /* GPIOE configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_7     | \
 800ac60:	f64f 7380 	movw	r3, #65408	; 0xff80
 800ac64:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | \
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 800ac66:	f107 031c 	add.w	r3, r7, #28
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	4809      	ldr	r0, [pc, #36]	; (800ac94 <FMC_BANK1_MspInit+0xf0>)
 800ac6e:	f002 ffc1 	bl	800dbf4 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_13 ;
 800ac72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 800ac78:	f107 031c 	add.w	r3, r7, #28
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	4804      	ldr	r0, [pc, #16]	; (800ac90 <FMC_BANK1_MspInit+0xec>)
 800ac80:	f002 ffb8 	bl	800dbf4 <HAL_GPIO_Init>

}
 800ac84:	bf00      	nop
 800ac86:	3730      	adds	r7, #48	; 0x30
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	40021000 	.word	0x40021000
 800ac90:	48000c00 	.word	0x48000c00
 800ac94:	48001000 	.word	0x48001000

0800ac98 <FMC_BANK1_Init>:
  * @brief  Initializes LCD IO.
  * @param  None
  * @retval None
  */
void FMC_BANK1_Init(void)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b0a4      	sub	sp, #144	; 0x90
 800ac9c:	af00      	add	r7, sp, #0
  FMC_NORSRAM_TimingTypeDef sram_timing;
  FMC_NORSRAM_TimingTypeDef sram_timing_write;

  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FMC_NORSRAM_DEVICE;
 800ac9e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800aca2:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Extended  = FMC_NORSRAM_EXTENDED_DEVICE;
 800aca4:	4b26      	ldr	r3, [pc, #152]	; (800ad40 <FMC_BANK1_Init+0xa8>)
 800aca6:	647b      	str	r3, [r7, #68]	; 0x44


  /* Timing for READING */

  sram_timing.AddressSetupTime       = 1;
 800aca8:	2301      	movs	r3, #1
 800acaa:	623b      	str	r3, [r7, #32]
  sram_timing.AddressHoldTime        = 1;
 800acac:	2301      	movs	r3, #1
 800acae:	627b      	str	r3, [r7, #36]	; 0x24
  sram_timing.DataSetupTime          = 1;
 800acb0:	2301      	movs	r3, #1
 800acb2:	62bb      	str	r3, [r7, #40]	; 0x28
  sram_timing.BusTurnAroundDuration  = 0;
 800acb4:	2300      	movs	r3, #0
 800acb6:	633b      	str	r3, [r7, #48]	; 0x30
  sram_timing.CLKDivision            = 2;
 800acb8:	2302      	movs	r3, #2
 800acba:	637b      	str	r3, [r7, #52]	; 0x34
  sram_timing.DataLatency            = 2;
 800acbc:	2302      	movs	r3, #2
 800acbe:	63bb      	str	r3, [r7, #56]	; 0x38
  sram_timing.AccessMode             = FMC_ACCESS_MODE_A;
 800acc0:	2300      	movs	r3, #0
 800acc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Timing for WRITING */
  sram_timing_write.AddressSetupTime      = 5;
 800acc4:	2305      	movs	r3, #5
 800acc6:	603b      	str	r3, [r7, #0]
  sram_timing_write.AddressHoldTime       = 1;
 800acc8:	2301      	movs	r3, #1
 800acca:	607b      	str	r3, [r7, #4]
  sram_timing_write.DataSetupTime         = 3;
 800accc:	2303      	movs	r3, #3
 800acce:	60bb      	str	r3, [r7, #8]
  sram_timing_write.BusTurnAroundDuration = 2;
 800acd0:	2302      	movs	r3, #2
 800acd2:	613b      	str	r3, [r7, #16]
  sram_timing_write.CLKDivision           = 2;
 800acd4:	2302      	movs	r3, #2
 800acd6:	617b      	str	r3, [r7, #20]
  sram_timing_write.DataLatency           = 2;
 800acd8:	2302      	movs	r3, #2
 800acda:	61bb      	str	r3, [r7, #24]
  sram_timing_write.AccessMode            = FMC_ACCESS_MODE_A;
 800acdc:	2300      	movs	r3, #0
 800acde:	61fb      	str	r3, [r7, #28]


  hsram.Init.NSBank             = FMC_NORSRAM_BANK1;
 800ace0:	2300      	movs	r3, #0
 800ace2:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.DataAddressMux     = FMC_DATA_ADDRESS_MUX_DISABLE;
 800ace4:	2300      	movs	r3, #0
 800ace6:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.MemoryType         = FMC_MEMORY_TYPE_SRAM;
 800ace8:	2300      	movs	r3, #0
 800acea:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.MemoryDataWidth    = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800acec:	2310      	movs	r3, #16
 800acee:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.BurstAccessMode    = FMC_BURST_ACCESS_MODE_DISABLE;
 800acf0:	2300      	movs	r3, #0
 800acf2:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800acf4:	2300      	movs	r3, #0
 800acf6:	65fb      	str	r3, [r7, #92]	; 0x5c
  hsram.Init.WaitSignalActive   = FMC_WAIT_TIMING_BEFORE_WS;
 800acf8:	2300      	movs	r3, #0
 800acfa:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.WriteOperation     = FMC_WRITE_OPERATION_ENABLE;
 800acfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad00:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.WaitSignal         = FMC_WAIT_SIGNAL_DISABLE;
 800ad02:	2300      	movs	r3, #0
 800ad04:	66bb      	str	r3, [r7, #104]	; 0x68
  hsram.Init.ExtendedMode       = FMC_EXTENDED_MODE_DISABLE;
 800ad06:	2300      	movs	r3, #0
 800ad08:	66fb      	str	r3, [r7, #108]	; 0x6c
  hsram.Init.AsynchronousWait   = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	673b      	str	r3, [r7, #112]	; 0x70
  hsram.Init.WriteBurst         = FMC_WRITE_BURST_DISABLE;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	677b      	str	r3, [r7, #116]	; 0x74
  hsram.Init.PageSize           = FMC_PAGE_SIZE_NONE;
 800ad12:	2300      	movs	r3, #0
 800ad14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  hsram.Init.WriteFifo          = FMC_WRITE_FIFO_DISABLE;
 800ad18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ad1c:	67fb      	str	r3, [r7, #124]	; 0x7c
  hsram.Init.ContinuousClock    = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	67bb      	str	r3, [r7, #120]	; 0x78
  /* Initialize the SRAM controller */
  FMC_BANK1_MspInit();
 800ad22:	f7ff ff3f 	bl	800aba4 <FMC_BANK1_MspInit>
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing_write);
 800ad26:	463a      	mov	r2, r7
 800ad28:	f107 0120 	add.w	r1, r7, #32
 800ad2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ad30:	4618      	mov	r0, r3
 800ad32:	f009 f95a 	bl	8013fea <HAL_SRAM_Init>

}
 800ad36:	bf00      	nop
 800ad38:	3790      	adds	r7, #144	; 0x90
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	a0000104 	.word	0xa0000104

0800ad44 <FMC_BANK1_WriteData>:
  * @brief  Writes register value.
  * @param  Data: Data to be written
  * @retval None
  */
static void FMC_BANK1_WriteData(uint16_t Data)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  LCD_ADDR->REG = Data;
 800ad4e:	4a04      	ldr	r2, [pc, #16]	; (800ad60 <FMC_BANK1_WriteData+0x1c>)
 800ad50:	88fb      	ldrh	r3, [r7, #6]
 800ad52:	8013      	strh	r3, [r2, #0]
}
 800ad54:	bf00      	nop
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr
 800ad60:	60080000 	.word	0x60080000

0800ad64 <FMC_BANK1_WriteReg>:
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  * @retval None
  */
static void FMC_BANK1_WriteReg(uint8_t Reg)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK1_ADDR->REG = Reg;
 800ad6e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800ad72:	79fa      	ldrb	r2, [r7, #7]
 800ad74:	b292      	uxth	r2, r2
 800ad76:	801a      	strh	r2, [r3, #0]
}
 800ad78:	bf00      	nop
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <FMC_BANK1_ReadData>:
  * @brief  Reads register value.
  * @param  None
  * @retval Read value
  */
static uint16_t FMC_BANK1_ReadData(void)
{
 800ad84:	b480      	push	{r7}
 800ad86:	af00      	add	r7, sp, #0
  return LCD_ADDR->REG;
 800ad88:	4b03      	ldr	r3, [pc, #12]	; (800ad98 <FMC_BANK1_ReadData+0x14>)
 800ad8a:	881b      	ldrh	r3, [r3, #0]
 800ad8c:	b29b      	uxth	r3, r3
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr
 800ad98:	60080000 	.word	0x60080000

0800ad9c <LCD_IO_Init>:
  * @brief  Initializes LCD low level.
  * @param  None
  * @retval None
  */
void LCD_IO_Init(void)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	af00      	add	r7, sp, #0
  FMC_BANK1_Init();
 800ada0:	f7ff ff7a 	bl	800ac98 <FMC_BANK1_Init>
}
 800ada4:	bf00      	nop
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <LCD_IO_WriteData>:
  * @brief  Writes data on LCD data register.
  * @param  Data: Data to be written
  * @retval None
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	4603      	mov	r3, r0
 800adb0:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1_WriteData(RegValue);
 800adb2:	88fb      	ldrh	r3, [r7, #6]
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7ff ffc5 	bl	800ad44 <FMC_BANK1_WriteData>
}
 800adba:	bf00      	nop
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <LCD_IO_WriteReg>:
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 800adc2:	b580      	push	{r7, lr}
 800adc4:	b082      	sub	sp, #8
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	4603      	mov	r3, r0
 800adca:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK1_WriteReg(Reg);
 800adcc:	79fb      	ldrb	r3, [r7, #7]
 800adce:	4618      	mov	r0, r3
 800add0:	f7ff ffc8 	bl	800ad64 <FMC_BANK1_WriteReg>
}
 800add4:	bf00      	nop
 800add6:	3708      	adds	r7, #8
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <LCD_IO_ReadData>:
  * @brief  Reads data from LCD data register.
  * @param  None
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	af00      	add	r7, sp, #0
  return FMC_BANK1_ReadData();
 800ade0:	f7ff ffd0 	bl	800ad84 <FMC_BANK1_ReadData>
 800ade4:	4603      	mov	r3, r0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	bd80      	pop	{r7, pc}

0800adea <LCD_IO_Delay>:
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void LCD_IO_Delay(uint32_t Delay)
{
 800adea:	b580      	push	{r7, lr}
 800adec:	b082      	sub	sp, #8
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f001 f986 	bl	800c104 <HAL_Delay>
}
 800adf8:	bf00      	nop
 800adfa:	3708      	adds	r7, #8
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cTSHandler);
 800ae04:	4812      	ldr	r0, [pc, #72]	; (800ae50 <TS_IO_Init+0x50>)
 800ae06:	f7ff fd09 	bl	800a81c <I2Cx_Init>

  if (ts_io_init == 0)
 800ae0a:	4b12      	ldr	r3, [pc, #72]	; (800ae54 <TS_IO_Init+0x54>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d11b      	bne.n	800ae4a <TS_IO_Init+0x4a>
  {
    if (BSP_LCD_Init() == LCD_ERROR)
 800ae12:	f000 f8eb 	bl	800afec <BSP_LCD_Init>
 800ae16:	4603      	mov	r3, r0
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d101      	bne.n	800ae20 <TS_IO_Init+0x20>
    {
      BSP_ErrorHandler();
 800ae1c:	f7ff fa95 	bl	800a34a <BSP_ErrorHandler>
    }

    BSP_IO_ConfigPin(TS_RST_PIN, IO_MODE_OUTPUT);
 800ae20:	2101      	movs	r1, #1
 800ae22:	2002      	movs	r0, #2
 800ae24:	f000 f8aa 	bl	800af7c <BSP_IO_ConfigPin>

    BSP_IO_WritePin(TS_RST_PIN, GPIO_PIN_RESET);
 800ae28:	2100      	movs	r1, #0
 800ae2a:	2002      	movs	r0, #2
 800ae2c:	f000 f8c2 	bl	800afb4 <BSP_IO_WritePin>
    HAL_Delay(10);
 800ae30:	200a      	movs	r0, #10
 800ae32:	f001 f967 	bl	800c104 <HAL_Delay>
    BSP_IO_WritePin(TS_RST_PIN, GPIO_PIN_SET);
 800ae36:	2101      	movs	r1, #1
 800ae38:	2002      	movs	r0, #2
 800ae3a:	f000 f8bb 	bl	800afb4 <BSP_IO_WritePin>
    HAL_Delay(200);
 800ae3e:	20c8      	movs	r0, #200	; 0xc8
 800ae40:	f001 f960 	bl	800c104 <HAL_Delay>

    ts_io_init = 1;
 800ae44:	4b03      	ldr	r3, [pc, #12]	; (800ae54 <TS_IO_Init+0x54>)
 800ae46:	2201      	movs	r2, #1
 800ae48:	601a      	str	r2, [r3, #0]
  }
}
 800ae4a:	bf00      	nop
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	20001a58 	.word	0x20001a58
 800ae54:	20001a00 	.word	0x20001a00

0800ae58 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af02      	add	r7, sp, #8
 800ae5e:	4603      	mov	r3, r0
 800ae60:	71fb      	strb	r3, [r7, #7]
 800ae62:	460b      	mov	r3, r1
 800ae64:	71bb      	strb	r3, [r7, #6]
 800ae66:	4613      	mov	r3, r2
 800ae68:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cTSHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&Value, 1);
 800ae6a:	79bb      	ldrb	r3, [r7, #6]
 800ae6c:	b29a      	uxth	r2, r3
 800ae6e:	79f9      	ldrb	r1, [r7, #7]
 800ae70:	2301      	movs	r3, #1
 800ae72:	9301      	str	r3, [sp, #4]
 800ae74:	1d7b      	adds	r3, r7, #5
 800ae76:	9300      	str	r3, [sp, #0]
 800ae78:	2301      	movs	r3, #1
 800ae7a:	4803      	ldr	r0, [pc, #12]	; (800ae88 <TS_IO_Write+0x30>)
 800ae7c:	f7ff fd49 	bl	800a912 <I2Cx_WriteMultiple>
}
 800ae80:	bf00      	nop
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	20001a58 	.word	0x20001a58

0800ae8c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	4603      	mov	r3, r0
 800ae94:	460a      	mov	r2, r1
 800ae96:	71fb      	strb	r3, [r7, #7]
 800ae98:	4613      	mov	r3, r2
 800ae9a:	71bb      	strb	r3, [r7, #6]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 800ae9c:	79fb      	ldrb	r3, [r7, #7]
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	79ba      	ldrb	r2, [r7, #6]
 800aea2:	b291      	uxth	r1, r2
 800aea4:	2201      	movs	r2, #1
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7ff fc22 	bl	800a6f0 <I2C2_ReadData>
 800aeac:	4603      	mov	r3, r0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3708      	adds	r7, #8
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
	...

0800aeb8 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af02      	add	r7, sp, #8
 800aebe:	603a      	str	r2, [r7, #0]
 800aec0:	461a      	mov	r2, r3
 800aec2:	4603      	mov	r3, r0
 800aec4:	71fb      	strb	r3, [r7, #7]
 800aec6:	460b      	mov	r3, r1
 800aec8:	71bb      	strb	r3, [r7, #6]
 800aeca:	4613      	mov	r3, r2
 800aecc:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadMultiple(&hI2cTSHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800aece:	79bb      	ldrb	r3, [r7, #6]
 800aed0:	b29a      	uxth	r2, r3
 800aed2:	79f9      	ldrb	r1, [r7, #7]
 800aed4:	88bb      	ldrh	r3, [r7, #4]
 800aed6:	9301      	str	r3, [sp, #4]
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	9300      	str	r3, [sp, #0]
 800aedc:	2301      	movs	r3, #1
 800aede:	4804      	ldr	r0, [pc, #16]	; (800aef0 <TS_IO_ReadMultiple+0x38>)
 800aee0:	f7ff fcea 	bl	800a8b8 <I2Cx_ReadMultiple>
 800aee4:	4603      	mov	r3, r0
 800aee6:	b29b      	uxth	r3, r3
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3708      	adds	r7, #8
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	20001a58 	.word	0x20001a58

0800aef4 <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 800aefa:	2301      	movs	r3, #1
 800aefc:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 800aefe:	2300      	movs	r3, #0
 800af00:	71bb      	strb	r3, [r7, #6]

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 800af02:	4b1a      	ldr	r3, [pc, #104]	; (800af6c <BSP_IO_Init+0x78>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d128      	bne.n	800af5c <BSP_IO_Init+0x68>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 800af0a:	4b19      	ldr	r3, [pc, #100]	; (800af70 <BSP_IO_Init+0x7c>)
 800af0c:	695b      	ldr	r3, [r3, #20]
 800af0e:	2084      	movs	r0, #132	; 0x84
 800af10:	4798      	blx	r3

    HAL_Delay(10);
 800af12:	200a      	movs	r0, #10
 800af14:	f001 f8f6 	bl	800c104 <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 800af18:	4b16      	ldr	r3, [pc, #88]	; (800af74 <BSP_IO_Init+0x80>)
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	2084      	movs	r0, #132	; 0x84
 800af1e:	4798      	blx	r3
 800af20:	4603      	mov	r3, r0
 800af22:	71bb      	strb	r3, [r7, #6]

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 800af24:	79bb      	ldrb	r3, [r7, #6]
 800af26:	2b7b      	cmp	r3, #123	; 0x7b
 800af28:	d002      	beq.n	800af30 <BSP_IO_Init+0x3c>
 800af2a:	79bb      	ldrb	r3, [r7, #6]
 800af2c:	2b79      	cmp	r3, #121	; 0x79
 800af2e:	d117      	bne.n	800af60 <BSP_IO_Init+0x6c>
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;
 800af30:	4b0e      	ldr	r3, [pc, #56]	; (800af6c <BSP_IO_Init+0x78>)
 800af32:	4a10      	ldr	r2, [pc, #64]	; (800af74 <BSP_IO_Init+0x80>)
 800af34:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 800af36:	4b0d      	ldr	r3, [pc, #52]	; (800af6c <BSP_IO_Init+0x78>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d00f      	beq.n	800af60 <BSP_IO_Init+0x6c>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 800af40:	4b0a      	ldr	r3, [pc, #40]	; (800af6c <BSP_IO_Init+0x78>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	2084      	movs	r0, #132	; 0x84
 800af48:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 800af4a:	4b08      	ldr	r3, [pc, #32]	; (800af6c <BSP_IO_Init+0x78>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	68db      	ldr	r3, [r3, #12]
 800af50:	4909      	ldr	r1, [pc, #36]	; (800af78 <BSP_IO_Init+0x84>)
 800af52:	2084      	movs	r0, #132	; 0x84
 800af54:	4798      	blx	r3

        ret = IO_OK;
 800af56:	2300      	movs	r3, #0
 800af58:	71fb      	strb	r3, [r7, #7]
 800af5a:	e001      	b.n	800af60 <BSP_IO_Init+0x6c>
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 800af5c:	2303      	movs	r3, #3
 800af5e:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 800af60:	79fb      	ldrb	r3, [r7, #7]
}
 800af62:	4618      	mov	r0, r3
 800af64:	3708      	adds	r7, #8
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	20001b54 	.word	0x20001b54
 800af70:	200001f8 	.word	0x200001f8
 800af74:	200001cc 	.word	0x200001cc
 800af78:	000301ff 	.word	0x000301ff

0800af7c <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	460b      	mov	r3, r1
 800af86:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 800af88:	2300      	movs	r3, #0
 800af8a:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	4b07      	ldr	r3, [pc, #28]	; (800afac <BSP_IO_ConfigPin+0x30>)
 800af90:	4013      	ands	r3, r2
 800af92:	60fb      	str	r3, [r7, #12]


  /* Configure the selected IO Expander 1 pin(s) mode */
  io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);
 800af94:	4b06      	ldr	r3, [pc, #24]	; (800afb0 <BSP_IO_ConfigPin+0x34>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	691b      	ldr	r3, [r3, #16]
 800af9a:	78fa      	ldrb	r2, [r7, #3]
 800af9c:	68f9      	ldr	r1, [r7, #12]
 800af9e:	2084      	movs	r0, #132	; 0x84
 800afa0:	4798      	blx	r3

  return IO_OK;
 800afa2:	2300      	movs	r3, #0
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	000301ff 	.word	0x000301ff
 800afb0:	20001b54 	.word	0x20001b54

0800afb4 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState: New pins state to write
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	460b      	mov	r3, r1
 800afbe:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 800afc0:	2300      	movs	r3, #0
 800afc2:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	4b07      	ldr	r3, [pc, #28]	; (800afe4 <BSP_IO_WritePin+0x30>)
 800afc8:	4013      	ands	r3, r2
 800afca:	60fb      	str	r3, [r7, #12]

  /* Sets the IO Expander 1 selected pins state */
  io1_driver->WritePin(IO1_I2C_ADDRESS, io1_pin, PinState);
 800afcc:	4b06      	ldr	r3, [pc, #24]	; (800afe8 <BSP_IO_WritePin+0x34>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	695b      	ldr	r3, [r3, #20]
 800afd2:	78fa      	ldrb	r2, [r7, #3]
 800afd4:	68f9      	ldr	r1, [r7, #12]
 800afd6:	2084      	movs	r0, #132	; 0x84
 800afd8:	4798      	blx	r3

}
 800afda:	bf00      	nop
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	000301ff 	.word	0x000301ff
 800afe8:	20001b54 	.word	0x20001b54

0800afec <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 800aff0:	2001      	movs	r0, #1
 800aff2:	f000 f803 	bl	800affc <BSP_LCD_InitEx>
 800aff6:	4603      	mov	r3, r0
}
 800aff8:	4618      	mov	r0, r3
 800affa:	bd80      	pop	{r7, pc}

0800affc <BSP_LCD_InitEx>:
  * @brief  Initializes the LCD with a given orientation.
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 800b004:	2301      	movs	r3, #1
 800b006:	73fb      	strb	r3, [r7, #15]
  uint32_t i = 0;
 800b008:	2300      	movs	r3, #0
 800b00a:	60bb      	str	r3, [r7, #8]

  if (bsp_lcd_initialized == 1)
 800b00c:	4b33      	ldr	r3, [pc, #204]	; (800b0dc <BSP_LCD_InitEx+0xe0>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2b01      	cmp	r3, #1
 800b012:	d102      	bne.n	800b01a <BSP_LCD_InitEx+0x1e>
  {
    ret = LCD_OK;
 800b014:	2300      	movs	r3, #0
 800b016:	73fb      	strb	r3, [r7, #15]
 800b018:	e05b      	b.n	800b0d2 <BSP_LCD_InitEx+0xd6>
  }
  else
  {
    /* Initialize the IO functionalities */
    if (BSP_IO_Init() == IO_ERROR)
 800b01a:	f7ff ff6b 	bl	800aef4 <BSP_IO_Init>
 800b01e:	4603      	mov	r3, r0
 800b020:	2b01      	cmp	r3, #1
 800b022:	d101      	bne.n	800b028 <BSP_LCD_InitEx+0x2c>
    {
      BSP_ErrorHandler();
 800b024:	f7ff f991 	bl	800a34a <BSP_ErrorHandler>
    }

    /* Initialize LCD special pins GPIOs */
    BSP_LCD_MspInit();
 800b028:	f000 fce4 	bl	800b9f4 <BSP_LCD_MspInit>

    /* LCD Power On */
    HAL_GPIO_WritePin(LCD_PWR_CTRL_GPIO_PORT, LCD_PWR_CTRL_PIN, GPIO_PIN_RESET);
 800b02c:	2200      	movs	r2, #0
 800b02e:	2101      	movs	r1, #1
 800b030:	482b      	ldr	r0, [pc, #172]	; (800b0e0 <BSP_LCD_InitEx+0xe4>)
 800b032:	f003 f863 	bl	800e0fc <HAL_GPIO_WritePin>

    /* Default value for draw propriety */
    DrawProp.BackColor = 0xFFFF;
 800b036:	4b2b      	ldr	r3, [pc, #172]	; (800b0e4 <BSP_LCD_InitEx+0xe8>)
 800b038:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b03c:	605a      	str	r2, [r3, #4]
    DrawProp.pFont     = &Font24;
 800b03e:	4b29      	ldr	r3, [pc, #164]	; (800b0e4 <BSP_LCD_InitEx+0xe8>)
 800b040:	4a29      	ldr	r2, [pc, #164]	; (800b0e8 <BSP_LCD_InitEx+0xec>)
 800b042:	609a      	str	r2, [r3, #8]
    DrawProp.TextColor = 0x0000;
 800b044:	4b27      	ldr	r3, [pc, #156]	; (800b0e4 <BSP_LCD_InitEx+0xe8>)
 800b046:	2200      	movs	r2, #0
 800b048:	601a      	str	r2, [r3, #0]

    if ((WakeUpFromStandby == RESET) && (WakeUpFromShutdown == RESET))
 800b04a:	4b28      	ldr	r3, [pc, #160]	; (800b0ec <BSP_LCD_InitEx+0xf0>)
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d108      	bne.n	800b064 <BSP_LCD_InitEx+0x68>
 800b052:	4b27      	ldr	r3, [pc, #156]	; (800b0f0 <BSP_LCD_InitEx+0xf4>)
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d104      	bne.n	800b064 <BSP_LCD_InitEx+0x68>
    {
      /* Backlight control signal assertion */
      HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800b05a:	2201      	movs	r2, #1
 800b05c:	2101      	movs	r1, #1
 800b05e:	4825      	ldr	r0, [pc, #148]	; (800b0f4 <BSP_LCD_InitEx+0xf8>)
 800b060:	f003 f84c 	bl	800e0fc <HAL_GPIO_WritePin>
    }

    /* Reset the LCD */
    BSP_LCD_Reset();
 800b064:	f000 f850 	bl	800b108 <BSP_LCD_Reset>

    if (ST7789H2_drv.ReadID() == ST7789H2_ID)
 800b068:	4b23      	ldr	r3, [pc, #140]	; (800b0f8 <BSP_LCD_InitEx+0xfc>)
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	4798      	blx	r3
 800b06e:	4603      	mov	r3, r0
 800b070:	2b85      	cmp	r3, #133	; 0x85
 800b072:	d12e      	bne.n	800b0d2 <BSP_LCD_InitEx+0xd6>
    {
      LcdDrv = &ST7789H2_drv;
 800b074:	4b21      	ldr	r3, [pc, #132]	; (800b0fc <BSP_LCD_InitEx+0x100>)
 800b076:	4a20      	ldr	r2, [pc, #128]	; (800b0f8 <BSP_LCD_InitEx+0xfc>)
 800b078:	601a      	str	r2, [r3, #0]

      /* LCD Init */
      LcdDrv->Init();
 800b07a:	4b20      	ldr	r3, [pc, #128]	; (800b0fc <BSP_LCD_InitEx+0x100>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4798      	blx	r3

      /* Fill LCD frame memory with white pixels (or black pixels if INIT_BLACK_LCD is enabled) */
      ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t *)NULL, 0);  /* RAM Write Data */
 800b082:	2200      	movs	r2, #0
 800b084:	2100      	movs	r1, #0
 800b086:	202c      	movs	r0, #44	; 0x2c
 800b088:	f7fa fb81 	bl	800578e <ST7789H2_WriteReg>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 800b08c:	2300      	movs	r3, #0
 800b08e:	60bb      	str	r3, [r7, #8]
 800b090:	e006      	b.n	800b0a0 <BSP_LCD_InitEx+0xa4>
      {
#if defined(INIT_BLACK_LCD)
        LCD_IO_WriteData(0x0);
#else
        LCD_IO_WriteData(0xFFFF);
 800b092:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b096:	f7ff fe87 	bl	800ada8 <LCD_IO_WriteData>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	3301      	adds	r3, #1
 800b09e:	60bb      	str	r3, [r7, #8]
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 800b0a6:	d3f4      	bcc.n	800b092 <BSP_LCD_InitEx+0x96>
#endif
      }

      if (orientation == LCD_ORIENTATION_PORTRAIT)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d106      	bne.n	800b0bc <BSP_LCD_InitEx+0xc0>
      {
        ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT);
 800b0ae:	2000      	movs	r0, #0
 800b0b0:	f7fa fa6b 	bl	800558a <ST7789H2_SetOrientation>
        LCD_orientation = LCD_ORIENTATION_PORTRAIT;
 800b0b4:	4b12      	ldr	r3, [pc, #72]	; (800b100 <BSP_LCD_InitEx+0x104>)
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	701a      	strb	r2, [r3, #0]
 800b0ba:	e002      	b.n	800b0c2 <BSP_LCD_InitEx+0xc6>
      }
      else
      {
        LCD_orientation = LCD_ORIENTATION_LANDSCAPE;
 800b0bc:	4b10      	ldr	r3, [pc, #64]	; (800b100 <BSP_LCD_InitEx+0x104>)
 800b0be:	2201      	movs	r2, #1
 800b0c0:	701a      	strb	r2, [r3, #0]
      }
      /* Initialize the font */
      BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800b0c2:	4810      	ldr	r0, [pc, #64]	; (800b104 <BSP_LCD_InitEx+0x108>)
 800b0c4:	f000 f868 	bl	800b198 <BSP_LCD_SetFont>

      bsp_lcd_initialized = 1;
 800b0c8:	4b04      	ldr	r3, [pc, #16]	; (800b0dc <BSP_LCD_InitEx+0xe0>)
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	601a      	str	r2, [r3, #0]
      ret = LCD_OK;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b0d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3710      	adds	r7, #16
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}
 800b0dc:	20001b58 	.word	0x20001b58
 800b0e0:	48001c00 	.word	0x48001c00
 800b0e4:	20001bcc 	.word	0x20001bcc
 800b0e8:	20000540 	.word	0x20000540
 800b0ec:	20001bc8 	.word	0x20001bc8
 800b0f0:	20001bc9 	.word	0x20001bc9
 800b0f4:	48002000 	.word	0x48002000
 800b0f8:	20000244 	.word	0x20000244
 800b0fc:	20001bd8 	.word	0x20001bd8
 800b100:	20000550 	.word	0x20000550
 800b104:	20000548 	.word	0x20000548

0800b108 <BSP_LCD_Reset>:
  * @brief  Reset the LCD.
  * @param  None
  * @retval LCD state
  */
void BSP_LCD_Reset(void)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	af00      	add	r7, sp, #0
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 800b10c:	2100      	movs	r1, #0
 800b10e:	2004      	movs	r0, #4
 800b110:	f7ff ff50 	bl	800afb4 <BSP_IO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 800b114:	2005      	movs	r0, #5
 800b116:	f000 fff5 	bl	800c104 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 800b11a:	2101      	movs	r1, #1
 800b11c:	2004      	movs	r0, #4
 800b11e:	f7ff ff49 	bl	800afb4 <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 800b122:	200a      	movs	r0, #10
 800b124:	f000 ffee 	bl	800c104 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 800b128:	2100      	movs	r1, #0
 800b12a:	2004      	movs	r0, #4
 800b12c:	f7ff ff42 	bl	800afb4 <BSP_IO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 800b130:	2014      	movs	r0, #20
 800b132:	f000 ffe7 	bl	800c104 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 800b136:	2101      	movs	r1, #1
 800b138:	2004      	movs	r0, #4
 800b13a:	f7ff ff3b 	bl	800afb4 <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 800b13e:	200a      	movs	r0, #10
 800b140:	f000 ffe0 	bl	800c104 <HAL_Delay>
}
 800b144:	bf00      	nop
 800b146:	bd80      	pop	{r7, pc}

0800b148 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelWidth());
 800b14c:	4b03      	ldr	r3, [pc, #12]	; (800b15c <BSP_LCD_GetXSize+0x14>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b152:	4798      	blx	r3
 800b154:	4603      	mov	r3, r0
}
 800b156:	4618      	mov	r0, r3
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	20001bd8 	.word	0x20001bd8

0800b160 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelHeight());
 800b164:	4b03      	ldr	r3, [pc, #12]	; (800b174 <BSP_LCD_GetYSize+0x14>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b16a:	4798      	blx	r3
 800b16c:	4603      	mov	r3, r0
}
 800b16e:	4618      	mov	r0, r3
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	20001bd8 	.word	0x20001bd8

0800b178 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	4603      	mov	r3, r0
 800b180:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 800b182:	88fb      	ldrh	r3, [r7, #6]
 800b184:	4a03      	ldr	r2, [pc, #12]	; (800b194 <BSP_LCD_SetTextColor+0x1c>)
 800b186:	6013      	str	r3, [r2, #0]
}
 800b188:	bf00      	nop
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr
 800b194:	20001bcc 	.word	0x20001bcc

0800b198 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 800b1a0:	4a04      	ldr	r2, [pc, #16]	; (800b1b4 <BSP_LCD_SetFont+0x1c>)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6093      	str	r3, [r2, #8]
}
 800b1a6:	bf00      	nop
 800b1a8:	370c      	adds	r7, #12
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr
 800b1b2:	bf00      	nop
 800b1b4:	20001bcc 	.word	0x20001bcc

0800b1b8 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 800b1b8:	b590      	push	{r4, r7, lr}
 800b1ba:	b087      	sub	sp, #28
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	4603      	mov	r3, r0
 800b1c0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor;
 800b1ca:	4b15      	ldr	r3, [pc, #84]	; (800b220 <BSP_LCD_Clear+0x68>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 800b1d0:	88fb      	ldrh	r3, [r7, #6]
 800b1d2:	4a13      	ldr	r2, [pc, #76]	; (800b220 <BSP_LCD_Clear+0x68>)
 800b1d4:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 800b1d6:	f7ff ffc3 	bl	800b160 <BSP_LCD_GetYSize>
 800b1da:	6138      	str	r0, [r7, #16]

  for (counter = 0; counter < y_size; counter++)
 800b1dc:	2300      	movs	r3, #0
 800b1de:	617b      	str	r3, [r7, #20]
 800b1e0:	e00d      	b.n	800b1fe <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	b29c      	uxth	r4, r3
 800b1e6:	f7ff ffaf 	bl	800b148 <BSP_LCD_GetXSize>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	4621      	mov	r1, r4
 800b1f2:	2000      	movs	r0, #0
 800b1f4:	f000 f8e8 	bl	800b3c8 <BSP_LCD_DrawHLine>
  for (counter = 0; counter < y_size; counter++)
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	617b      	str	r3, [r7, #20]
 800b1fe:	697a      	ldr	r2, [r7, #20]
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	429a      	cmp	r2, r3
 800b204:	d3ed      	bcc.n	800b1e2 <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup;
 800b206:	4a06      	ldr	r2, [pc, #24]	; (800b220 <BSP_LCD_Clear+0x68>)
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800b20c:	4b04      	ldr	r3, [pc, #16]	; (800b220 <BSP_LCD_Clear+0x68>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	b29b      	uxth	r3, r3
 800b212:	4618      	mov	r0, r3
 800b214:	f7ff ffb0 	bl	800b178 <BSP_LCD_SetTextColor>
}
 800b218:	bf00      	nop
 800b21a:	371c      	adds	r7, #28
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd90      	pop	{r4, r7, pc}
 800b220:	20001bcc 	.word	0x20001bcc

0800b224 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	4603      	mov	r3, r0
 800b22c:	80fb      	strh	r3, [r7, #6]
 800b22e:	460b      	mov	r3, r1
 800b230:	80bb      	strh	r3, [r7, #4]
 800b232:	4613      	mov	r3, r2
 800b234:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 800b236:	4b0f      	ldr	r3, [pc, #60]	; (800b274 <BSP_LCD_DisplayChar+0x50>)
 800b238:	689b      	ldr	r3, [r3, #8]
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	78fb      	ldrb	r3, [r7, #3]
 800b23e:	3b20      	subs	r3, #32
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800b240:	490c      	ldr	r1, [pc, #48]	; (800b274 <BSP_LCD_DisplayChar+0x50>)
 800b242:	6889      	ldr	r1, [r1, #8]
 800b244:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 800b246:	fb03 f101 	mul.w	r1, r3, r1
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800b24a:	4b0a      	ldr	r3, [pc, #40]	; (800b274 <BSP_LCD_DisplayChar+0x50>)
 800b24c:	689b      	ldr	r3, [r3, #8]
 800b24e:	889b      	ldrh	r3, [r3, #4]
 800b250:	3307      	adds	r3, #7
 800b252:	2b00      	cmp	r3, #0
 800b254:	da00      	bge.n	800b258 <BSP_LCD_DisplayChar+0x34>
 800b256:	3307      	adds	r3, #7
 800b258:	10db      	asrs	r3, r3, #3
 800b25a:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 800b25e:	441a      	add	r2, r3
 800b260:	88b9      	ldrh	r1, [r7, #4]
 800b262:	88fb      	ldrh	r3, [r7, #6]
 800b264:	4618      	mov	r0, r3
 800b266:	f000 fc21 	bl	800baac <DrawChar>
}
 800b26a:	bf00      	nop
 800b26c:	3708      	adds	r7, #8
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	20001bcc 	.word	0x20001bcc

0800b278 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b088      	sub	sp, #32
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60ba      	str	r2, [r7, #8]
 800b280:	461a      	mov	r2, r3
 800b282:	4603      	mov	r3, r0
 800b284:	81fb      	strh	r3, [r7, #14]
 800b286:	460b      	mov	r3, r1
 800b288:	81bb      	strh	r3, [r7, #12]
 800b28a:	4613      	mov	r3, r2
 800b28c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800b28e:	2301      	movs	r3, #1
 800b290:	83fb      	strh	r3, [r7, #30]
 800b292:	2300      	movs	r3, #0
 800b294:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 800b296:	2300      	movs	r3, #0
 800b298:	61bb      	str	r3, [r7, #24]
 800b29a:	2300      	movs	r3, #0
 800b29c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++)
 800b2a2:	e002      	b.n	800b2aa <BSP_LCD_DisplayStringAt+0x32>
  {
    size ++ ;
 800b2a4:	69bb      	ldr	r3, [r7, #24]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	61bb      	str	r3, [r7, #24]
  while (*ptr++)
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	1c5a      	adds	r2, r3, #1
 800b2ae:	617a      	str	r2, [r7, #20]
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d1f6      	bne.n	800b2a4 <BSP_LCD_DisplayStringAt+0x2c>
  }

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp.pFont->Width);
 800b2b6:	f7ff ff47 	bl	800b148 <BSP_LCD_GetXSize>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	4b33      	ldr	r3, [pc, #204]	; (800b38c <BSP_LCD_DisplayStringAt+0x114>)
 800b2be:	689b      	ldr	r3, [r3, #8]
 800b2c0:	889b      	ldrh	r3, [r3, #4]
 800b2c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2c6:	613b      	str	r3, [r7, #16]

  switch (Mode)
 800b2c8:	79fb      	ldrb	r3, [r7, #7]
 800b2ca:	2b03      	cmp	r3, #3
 800b2cc:	d014      	beq.n	800b2f8 <BSP_LCD_DisplayStringAt+0x80>
 800b2ce:	2b03      	cmp	r3, #3
 800b2d0:	dc23      	bgt.n	800b31a <BSP_LCD_DisplayStringAt+0xa2>
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d002      	beq.n	800b2dc <BSP_LCD_DisplayStringAt+0x64>
 800b2d6:	2b02      	cmp	r3, #2
 800b2d8:	d011      	beq.n	800b2fe <BSP_LCD_DisplayStringAt+0x86>
 800b2da:	e01e      	b.n	800b31a <BSP_LCD_DisplayStringAt+0xa2>
  {
    case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size) * DrawProp.pFont->Width) / 2;
 800b2dc:	693a      	ldr	r2, [r7, #16]
 800b2de:	69bb      	ldr	r3, [r7, #24]
 800b2e0:	1ad3      	subs	r3, r2, r3
 800b2e2:	4a2a      	ldr	r2, [pc, #168]	; (800b38c <BSP_LCD_DisplayStringAt+0x114>)
 800b2e4:	6892      	ldr	r2, [r2, #8]
 800b2e6:	8892      	ldrh	r2, [r2, #4]
 800b2e8:	fb02 f303 	mul.w	r3, r2, r3
 800b2ec:	085b      	lsrs	r3, r3, #1
 800b2ee:	b29a      	uxth	r2, r3
 800b2f0:	89fb      	ldrh	r3, [r7, #14]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	83fb      	strh	r3, [r7, #30]
      break;
 800b2f6:	e013      	b.n	800b320 <BSP_LCD_DisplayStringAt+0xa8>
    }
    case LEFT_MODE:
    {
      refcolumn = Xpos;
 800b2f8:	89fb      	ldrh	r3, [r7, #14]
 800b2fa:	83fb      	strh	r3, [r7, #30]
      break;
 800b2fc:	e010      	b.n	800b320 <BSP_LCD_DisplayStringAt+0xa8>
    }
    case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size) * DrawProp.pFont->Width);
 800b2fe:	693a      	ldr	r2, [r7, #16]
 800b300:	69bb      	ldr	r3, [r7, #24]
 800b302:	1ad3      	subs	r3, r2, r3
 800b304:	b29a      	uxth	r2, r3
 800b306:	4b21      	ldr	r3, [pc, #132]	; (800b38c <BSP_LCD_DisplayStringAt+0x114>)
 800b308:	689b      	ldr	r3, [r3, #8]
 800b30a:	889b      	ldrh	r3, [r3, #4]
 800b30c:	fb12 f303 	smulbb	r3, r2, r3
 800b310:	b29a      	uxth	r2, r3
 800b312:	89fb      	ldrh	r3, [r7, #14]
 800b314:	1ad3      	subs	r3, r2, r3
 800b316:	83fb      	strh	r3, [r7, #30]
      break;
 800b318:	e002      	b.n	800b320 <BSP_LCD_DisplayStringAt+0xa8>
    }
    default:
    {
      refcolumn = Xpos;
 800b31a:	89fb      	ldrh	r3, [r7, #14]
 800b31c:	83fb      	strh	r3, [r7, #30]
      break;
 800b31e:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 800b320:	8bfb      	ldrh	r3, [r7, #30]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d003      	beq.n	800b32e <BSP_LCD_DisplayStringAt+0xb6>
 800b326:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	da15      	bge.n	800b35a <BSP_LCD_DisplayStringAt+0xe2>
  {
    refcolumn = 1;
 800b32e:	2301      	movs	r3, #1
 800b330:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800b332:	e012      	b.n	800b35a <BSP_LCD_DisplayStringAt+0xe2>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	781a      	ldrb	r2, [r3, #0]
 800b338:	89b9      	ldrh	r1, [r7, #12]
 800b33a:	8bfb      	ldrh	r3, [r7, #30]
 800b33c:	4618      	mov	r0, r3
 800b33e:	f7ff ff71 	bl	800b224 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 800b342:	4b12      	ldr	r3, [pc, #72]	; (800b38c <BSP_LCD_DisplayStringAt+0x114>)
 800b344:	689b      	ldr	r3, [r3, #8]
 800b346:	889a      	ldrh	r2, [r3, #4]
 800b348:	8bfb      	ldrh	r3, [r7, #30]
 800b34a:	4413      	add	r3, r2
 800b34c:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	3301      	adds	r3, #1
 800b352:	60bb      	str	r3, [r7, #8]
    i++;
 800b354:	8bbb      	ldrh	r3, [r7, #28]
 800b356:	3301      	adds	r3, #1
 800b358:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00f      	beq.n	800b382 <BSP_LCD_DisplayStringAt+0x10a>
 800b362:	f7ff fef1 	bl	800b148 <BSP_LCD_GetXSize>
 800b366:	4601      	mov	r1, r0
 800b368:	8bbb      	ldrh	r3, [r7, #28]
 800b36a:	4a08      	ldr	r2, [pc, #32]	; (800b38c <BSP_LCD_DisplayStringAt+0x114>)
 800b36c:	6892      	ldr	r2, [r2, #8]
 800b36e:	8892      	ldrh	r2, [r2, #4]
 800b370:	fb02 f303 	mul.w	r3, r2, r3
 800b374:	1acb      	subs	r3, r1, r3
 800b376:	b29b      	uxth	r3, r3
 800b378:	4a04      	ldr	r2, [pc, #16]	; (800b38c <BSP_LCD_DisplayStringAt+0x114>)
 800b37a:	6892      	ldr	r2, [r2, #8]
 800b37c:	8892      	ldrh	r2, [r2, #4]
 800b37e:	4293      	cmp	r3, r2
 800b380:	d2d8      	bcs.n	800b334 <BSP_LCD_DisplayStringAt+0xbc>
  }
}
 800b382:	bf00      	nop
 800b384:	3720      	adds	r7, #32
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	20001bcc 	.word	0x20001bcc

0800b390 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	4603      	mov	r3, r0
 800b398:	80fb      	strh	r3, [r7, #6]
 800b39a:	460b      	mov	r3, r1
 800b39c:	80bb      	strh	r3, [r7, #4]
 800b39e:	4613      	mov	r3, r2
 800b3a0:	807b      	strh	r3, [r7, #2]
  if (LcdDrv->WritePixel != NULL)
 800b3a2:	4b08      	ldr	r3, [pc, #32]	; (800b3c4 <BSP_LCD_DrawPixel+0x34>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	695b      	ldr	r3, [r3, #20]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d006      	beq.n	800b3ba <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 800b3ac:	4b05      	ldr	r3, [pc, #20]	; (800b3c4 <BSP_LCD_DrawPixel+0x34>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	695b      	ldr	r3, [r3, #20]
 800b3b2:	887a      	ldrh	r2, [r7, #2]
 800b3b4:	88b9      	ldrh	r1, [r7, #4]
 800b3b6:	88f8      	ldrh	r0, [r7, #6]
 800b3b8:	4798      	blx	r3
  }
}
 800b3ba:	bf00      	nop
 800b3bc:	3708      	adds	r7, #8
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	20001bd8 	.word	0x20001bd8

0800b3c8 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800b3c8:	b590      	push	{r4, r7, lr}
 800b3ca:	b085      	sub	sp, #20
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	80fb      	strh	r3, [r7, #6]
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	80bb      	strh	r3, [r7, #4]
 800b3d6:	4613      	mov	r3, r2
 800b3d8:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	60fb      	str	r3, [r7, #12]

  if (LcdDrv->DrawHLine != NULL)
 800b3de:	4b15      	ldr	r3, [pc, #84]	; (800b434 <BSP_LCD_DrawHLine+0x6c>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	6a1b      	ldr	r3, [r3, #32]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d00a      	beq.n	800b3fe <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 800b3e8:	4b12      	ldr	r3, [pc, #72]	; (800b434 <BSP_LCD_DrawHLine+0x6c>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	6a1c      	ldr	r4, [r3, #32]
 800b3ee:	4b12      	ldr	r3, [pc, #72]	; (800b438 <BSP_LCD_DrawHLine+0x70>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	b298      	uxth	r0, r3
 800b3f4:	887b      	ldrh	r3, [r7, #2]
 800b3f6:	88ba      	ldrh	r2, [r7, #4]
 800b3f8:	88f9      	ldrh	r1, [r7, #6]
 800b3fa:	47a0      	blx	r4
    for (index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 800b3fc:	e015      	b.n	800b42a <BSP_LCD_DrawHLine+0x62>
    for (index = 0; index < Length; index++)
 800b3fe:	2300      	movs	r3, #0
 800b400:	60fb      	str	r3, [r7, #12]
 800b402:	e00e      	b.n	800b422 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	b29a      	uxth	r2, r3
 800b408:	88fb      	ldrh	r3, [r7, #6]
 800b40a:	4413      	add	r3, r2
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	4a0a      	ldr	r2, [pc, #40]	; (800b438 <BSP_LCD_DrawHLine+0x70>)
 800b410:	6812      	ldr	r2, [r2, #0]
 800b412:	b292      	uxth	r2, r2
 800b414:	88b9      	ldrh	r1, [r7, #4]
 800b416:	4618      	mov	r0, r3
 800b418:	f7ff ffba 	bl	800b390 <BSP_LCD_DrawPixel>
    for (index = 0; index < Length; index++)
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	3301      	adds	r3, #1
 800b420:	60fb      	str	r3, [r7, #12]
 800b422:	887b      	ldrh	r3, [r7, #2]
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	429a      	cmp	r2, r3
 800b428:	d3ec      	bcc.n	800b404 <BSP_LCD_DrawHLine+0x3c>
}
 800b42a:	bf00      	nop
 800b42c:	3714      	adds	r7, #20
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd90      	pop	{r4, r7, pc}
 800b432:	bf00      	nop
 800b434:	20001bd8 	.word	0x20001bd8
 800b438:	20001bcc 	.word	0x20001bcc

0800b43c <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b086      	sub	sp, #24
 800b440:	af00      	add	r7, sp, #0
 800b442:	4603      	mov	r3, r0
 800b444:	80fb      	strh	r3, [r7, #6]
 800b446:	460b      	mov	r3, r1
 800b448:	80bb      	strh	r3, [r7, #4]
 800b44a:	4613      	mov	r3, r2
 800b44c:	807b      	strh	r3, [r7, #2]
  int32_t  decision;       /* Decision Variable */
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */

  decision = 3 - (Radius << 1);
 800b44e:	887b      	ldrh	r3, [r7, #2]
 800b450:	005b      	lsls	r3, r3, #1
 800b452:	f1c3 0303 	rsb	r3, r3, #3
 800b456:	617b      	str	r3, [r7, #20]
  current_x = 0;
 800b458:	2300      	movs	r3, #0
 800b45a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800b45c:	887b      	ldrh	r3, [r7, #2]
 800b45e:	60fb      	str	r3, [r7, #12]

  while (current_x <= current_y)
 800b460:	e09a      	b.n	800b598 <BSP_LCD_DrawCircle+0x15c>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp.TextColor);
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	b29a      	uxth	r2, r3
 800b466:	88fb      	ldrh	r3, [r7, #6]
 800b468:	4413      	add	r3, r2
 800b46a:	b298      	uxth	r0, r3
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	b29b      	uxth	r3, r3
 800b470:	88ba      	ldrh	r2, [r7, #4]
 800b472:	1ad3      	subs	r3, r2, r3
 800b474:	b29b      	uxth	r3, r3
 800b476:	4a4d      	ldr	r2, [pc, #308]	; (800b5ac <BSP_LCD_DrawCircle+0x170>)
 800b478:	6812      	ldr	r2, [r2, #0]
 800b47a:	b292      	uxth	r2, r2
 800b47c:	4619      	mov	r1, r3
 800b47e:	f7ff ff87 	bl	800b390 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp.TextColor);
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	b29b      	uxth	r3, r3
 800b486:	88fa      	ldrh	r2, [r7, #6]
 800b488:	1ad3      	subs	r3, r2, r3
 800b48a:	b298      	uxth	r0, r3
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	b29b      	uxth	r3, r3
 800b490:	88ba      	ldrh	r2, [r7, #4]
 800b492:	1ad3      	subs	r3, r2, r3
 800b494:	b29b      	uxth	r3, r3
 800b496:	4a45      	ldr	r2, [pc, #276]	; (800b5ac <BSP_LCD_DrawCircle+0x170>)
 800b498:	6812      	ldr	r2, [r2, #0]
 800b49a:	b292      	uxth	r2, r2
 800b49c:	4619      	mov	r1, r3
 800b49e:	f7ff ff77 	bl	800b390 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp.TextColor);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	b29a      	uxth	r2, r3
 800b4a6:	88fb      	ldrh	r3, [r7, #6]
 800b4a8:	4413      	add	r3, r2
 800b4aa:	b298      	uxth	r0, r3
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	88ba      	ldrh	r2, [r7, #4]
 800b4b2:	1ad3      	subs	r3, r2, r3
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	4a3d      	ldr	r2, [pc, #244]	; (800b5ac <BSP_LCD_DrawCircle+0x170>)
 800b4b8:	6812      	ldr	r2, [r2, #0]
 800b4ba:	b292      	uxth	r2, r2
 800b4bc:	4619      	mov	r1, r3
 800b4be:	f7ff ff67 	bl	800b390 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp.TextColor);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	88fa      	ldrh	r2, [r7, #6]
 800b4c8:	1ad3      	subs	r3, r2, r3
 800b4ca:	b298      	uxth	r0, r3
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	88ba      	ldrh	r2, [r7, #4]
 800b4d2:	1ad3      	subs	r3, r2, r3
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	4a35      	ldr	r2, [pc, #212]	; (800b5ac <BSP_LCD_DrawCircle+0x170>)
 800b4d8:	6812      	ldr	r2, [r2, #0]
 800b4da:	b292      	uxth	r2, r2
 800b4dc:	4619      	mov	r1, r3
 800b4de:	f7ff ff57 	bl	800b390 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp.TextColor);
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	b29a      	uxth	r2, r3
 800b4e6:	88fb      	ldrh	r3, [r7, #6]
 800b4e8:	4413      	add	r3, r2
 800b4ea:	b298      	uxth	r0, r3
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	88bb      	ldrh	r3, [r7, #4]
 800b4f2:	4413      	add	r3, r2
 800b4f4:	b29b      	uxth	r3, r3
 800b4f6:	4a2d      	ldr	r2, [pc, #180]	; (800b5ac <BSP_LCD_DrawCircle+0x170>)
 800b4f8:	6812      	ldr	r2, [r2, #0]
 800b4fa:	b292      	uxth	r2, r2
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	f7ff ff47 	bl	800b390 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp.TextColor);
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	b29b      	uxth	r3, r3
 800b506:	88fa      	ldrh	r2, [r7, #6]
 800b508:	1ad3      	subs	r3, r2, r3
 800b50a:	b298      	uxth	r0, r3
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	b29a      	uxth	r2, r3
 800b510:	88bb      	ldrh	r3, [r7, #4]
 800b512:	4413      	add	r3, r2
 800b514:	b29b      	uxth	r3, r3
 800b516:	4a25      	ldr	r2, [pc, #148]	; (800b5ac <BSP_LCD_DrawCircle+0x170>)
 800b518:	6812      	ldr	r2, [r2, #0]
 800b51a:	b292      	uxth	r2, r2
 800b51c:	4619      	mov	r1, r3
 800b51e:	f7ff ff37 	bl	800b390 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp.TextColor);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	b29a      	uxth	r2, r3
 800b526:	88fb      	ldrh	r3, [r7, #6]
 800b528:	4413      	add	r3, r2
 800b52a:	b298      	uxth	r0, r3
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	b29a      	uxth	r2, r3
 800b530:	88bb      	ldrh	r3, [r7, #4]
 800b532:	4413      	add	r3, r2
 800b534:	b29b      	uxth	r3, r3
 800b536:	4a1d      	ldr	r2, [pc, #116]	; (800b5ac <BSP_LCD_DrawCircle+0x170>)
 800b538:	6812      	ldr	r2, [r2, #0]
 800b53a:	b292      	uxth	r2, r2
 800b53c:	4619      	mov	r1, r3
 800b53e:	f7ff ff27 	bl	800b390 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp.TextColor);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	b29b      	uxth	r3, r3
 800b546:	88fa      	ldrh	r2, [r7, #6]
 800b548:	1ad3      	subs	r3, r2, r3
 800b54a:	b298      	uxth	r0, r3
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	b29a      	uxth	r2, r3
 800b550:	88bb      	ldrh	r3, [r7, #4]
 800b552:	4413      	add	r3, r2
 800b554:	b29b      	uxth	r3, r3
 800b556:	4a15      	ldr	r2, [pc, #84]	; (800b5ac <BSP_LCD_DrawCircle+0x170>)
 800b558:	6812      	ldr	r2, [r2, #0]
 800b55a:	b292      	uxth	r2, r2
 800b55c:	4619      	mov	r1, r3
 800b55e:	f7ff ff17 	bl	800b390 <BSP_LCD_DrawPixel>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800b562:	4813      	ldr	r0, [pc, #76]	; (800b5b0 <BSP_LCD_DrawCircle+0x174>)
 800b564:	f7ff fe18 	bl	800b198 <BSP_LCD_SetFont>

    if (decision < 0)
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	da06      	bge.n	800b57c <BSP_LCD_DrawCircle+0x140>
    {
      decision += (current_x << 2) + 6;
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	009a      	lsls	r2, r3, #2
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	4413      	add	r3, r2
 800b576:	3306      	adds	r3, #6
 800b578:	617b      	str	r3, [r7, #20]
 800b57a:	e00a      	b.n	800b592 <BSP_LCD_DrawCircle+0x156>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800b57c:	693a      	ldr	r2, [r7, #16]
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	1ad3      	subs	r3, r2, r3
 800b582:	009a      	lsls	r2, r3, #2
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	4413      	add	r3, r2
 800b588:	330a      	adds	r3, #10
 800b58a:	617b      	str	r3, [r7, #20]
      current_y--;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	3b01      	subs	r3, #1
 800b590:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	3301      	adds	r3, #1
 800b596:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800b598:	693a      	ldr	r2, [r7, #16]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	429a      	cmp	r2, r3
 800b59e:	f67f af60 	bls.w	800b462 <BSP_LCD_DrawCircle+0x26>
  }
}
 800b5a2:	bf00      	nop
 800b5a4:	bf00      	nop
 800b5a6:	3718      	adds	r7, #24
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	20001bcc 	.word	0x20001bcc
 800b5b0:	20000548 	.word	0x20000548

0800b5b4 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b086      	sub	sp, #24
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	80fb      	strh	r3, [r7, #6]
 800b5be:	460b      	mov	r3, r1
 800b5c0:	80bb      	strh	r3, [r7, #4]
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	807b      	strh	r3, [r7, #2]
  int32_t  decision;        /* Decision Variable */
  uint32_t  current_x;    /* Current X Value */
  uint32_t  current_y;    /* Current Y Value */

  decision = 3 - (Radius << 1);
 800b5c6:	887b      	ldrh	r3, [r7, #2]
 800b5c8:	005b      	lsls	r3, r3, #1
 800b5ca:	f1c3 0303 	rsb	r3, r3, #3
 800b5ce:	617b      	str	r3, [r7, #20]

  current_x = 0;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800b5d4:	887b      	ldrh	r3, [r7, #2]
 800b5d6:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800b5d8:	4b3e      	ldr	r3, [pc, #248]	; (800b6d4 <BSP_LCD_FillCircle+0x120>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7ff fdca 	bl	800b178 <BSP_LCD_SetTextColor>

  while (current_x <= current_y)
 800b5e4:	e061      	b.n	800b6aa <BSP_LCD_FillCircle+0xf6>
  {
    if (current_y > 0)
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d021      	beq.n	800b630 <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2 * current_y);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	88fa      	ldrh	r2, [r7, #6]
 800b5f2:	1ad3      	subs	r3, r2, r3
 800b5f4:	b298      	uxth	r0, r3
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	b29a      	uxth	r2, r3
 800b5fa:	88bb      	ldrh	r3, [r7, #4]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	b299      	uxth	r1, r3
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	b29b      	uxth	r3, r3
 800b604:	005b      	lsls	r3, r3, #1
 800b606:	b29b      	uxth	r3, r3
 800b608:	461a      	mov	r2, r3
 800b60a:	f7ff fedd 	bl	800b3c8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2 * current_y);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	b29b      	uxth	r3, r3
 800b612:	88fa      	ldrh	r2, [r7, #6]
 800b614:	1ad3      	subs	r3, r2, r3
 800b616:	b298      	uxth	r0, r3
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	88ba      	ldrh	r2, [r7, #4]
 800b61e:	1ad3      	subs	r3, r2, r3
 800b620:	b299      	uxth	r1, r3
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	b29b      	uxth	r3, r3
 800b626:	005b      	lsls	r3, r3, #1
 800b628:	b29b      	uxth	r3, r3
 800b62a:	461a      	mov	r2, r3
 800b62c:	f7ff fecc 	bl	800b3c8 <BSP_LCD_DrawHLine>
    }

    if (current_x > 0)
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d021      	beq.n	800b67a <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2 * current_x);
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	b29b      	uxth	r3, r3
 800b63a:	88fa      	ldrh	r2, [r7, #6]
 800b63c:	1ad3      	subs	r3, r2, r3
 800b63e:	b298      	uxth	r0, r3
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	b29b      	uxth	r3, r3
 800b644:	88ba      	ldrh	r2, [r7, #4]
 800b646:	1ad3      	subs	r3, r2, r3
 800b648:	b299      	uxth	r1, r3
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	005b      	lsls	r3, r3, #1
 800b650:	b29b      	uxth	r3, r3
 800b652:	461a      	mov	r2, r3
 800b654:	f7ff feb8 	bl	800b3c8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2 * current_x);
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	88fa      	ldrh	r2, [r7, #6]
 800b65e:	1ad3      	subs	r3, r2, r3
 800b660:	b298      	uxth	r0, r3
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	b29a      	uxth	r2, r3
 800b666:	88bb      	ldrh	r3, [r7, #4]
 800b668:	4413      	add	r3, r2
 800b66a:	b299      	uxth	r1, r3
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	b29b      	uxth	r3, r3
 800b670:	005b      	lsls	r3, r3, #1
 800b672:	b29b      	uxth	r3, r3
 800b674:	461a      	mov	r2, r3
 800b676:	f7ff fea7 	bl	800b3c8 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	da06      	bge.n	800b68e <BSP_LCD_FillCircle+0xda>
    {
      decision += (current_x << 2) + 6;
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	009a      	lsls	r2, r3, #2
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	4413      	add	r3, r2
 800b688:	3306      	adds	r3, #6
 800b68a:	617b      	str	r3, [r7, #20]
 800b68c:	e00a      	b.n	800b6a4 <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800b68e:	693a      	ldr	r2, [r7, #16]
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	1ad3      	subs	r3, r2, r3
 800b694:	009a      	lsls	r2, r3, #2
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	4413      	add	r3, r2
 800b69a:	330a      	adds	r3, #10
 800b69c:	617b      	str	r3, [r7, #20]
      current_y--;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	3b01      	subs	r3, #1
 800b6a2:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800b6aa:	693a      	ldr	r2, [r7, #16]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d999      	bls.n	800b5e6 <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800b6b2:	4b08      	ldr	r3, [pc, #32]	; (800b6d4 <BSP_LCD_FillCircle+0x120>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7ff fd5d 	bl	800b178 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800b6be:	887a      	ldrh	r2, [r7, #2]
 800b6c0:	88b9      	ldrh	r1, [r7, #4]
 800b6c2:	88fb      	ldrh	r3, [r7, #6]
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7ff feb9 	bl	800b43c <BSP_LCD_DrawCircle>
}
 800b6ca:	bf00      	nop
 800b6cc:	3718      	adds	r7, #24
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	20001bcc 	.word	0x20001bcc

0800b6d8 <BSP_LCD_DisplayOn>:
  * @brief  Enables the display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	af00      	add	r7, sp, #0
  LcdDrv->DisplayOn();
 800b6dc:	4b02      	ldr	r3, [pc, #8]	; (800b6e8 <BSP_LCD_DisplayOn+0x10>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	689b      	ldr	r3, [r3, #8]
 800b6e2:	4798      	blx	r3
}
 800b6e4:	bf00      	nop
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	20001bd8 	.word	0x20001bd8

0800b6ec <BSP_LCD_DisplayOff>:
  * @brief  Disables the display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOff(void)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	af00      	add	r7, sp, #0
  LcdDrv->DisplayOff();
 800b6f0:	4b02      	ldr	r3, [pc, #8]	; (800b6fc <BSP_LCD_DisplayOff+0x10>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	68db      	ldr	r3, [r3, #12]
 800b6f6:	4798      	blx	r3
}
 800b6f8:	bf00      	nop
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	20001bd8 	.word	0x20001bd8

0800b700 <BSP_LCD_ScreenDimmingConfig>:
  * @param  step    : step value in percent
  * @param  delay   : delay in milliseconds between each step
  * @retval None
  */
void BSP_LCD_ScreenDimmingConfig(const uint8_t start, const uint8_t stop, const uint8_t step, const uint8_t delay)
{
 800b700:	b490      	push	{r4, r7}
 800b702:	b082      	sub	sp, #8
 800b704:	af00      	add	r7, sp, #0
 800b706:	4604      	mov	r4, r0
 800b708:	4608      	mov	r0, r1
 800b70a:	4611      	mov	r1, r2
 800b70c:	461a      	mov	r2, r3
 800b70e:	4623      	mov	r3, r4
 800b710:	71fb      	strb	r3, [r7, #7]
 800b712:	4603      	mov	r3, r0
 800b714:	71bb      	strb	r3, [r7, #6]
 800b716:	460b      	mov	r3, r1
 800b718:	717b      	strb	r3, [r7, #5]
 800b71a:	4613      	mov	r3, r2
 800b71c:	713b      	strb	r3, [r7, #4]
  if ((dimming_config.ongoing == 0)
 800b71e:	4b10      	ldr	r3, [pc, #64]	; (800b760 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d117      	bne.n	800b756 <BSP_LCD_ScreenDimmingConfig+0x56>
      && (start <= 100) && (stop <= 100)
 800b726:	79fb      	ldrb	r3, [r7, #7]
 800b728:	2b64      	cmp	r3, #100	; 0x64
 800b72a:	d814      	bhi.n	800b756 <BSP_LCD_ScreenDimmingConfig+0x56>
 800b72c:	79bb      	ldrb	r3, [r7, #6]
 800b72e:	2b64      	cmp	r3, #100	; 0x64
 800b730:	d811      	bhi.n	800b756 <BSP_LCD_ScreenDimmingConfig+0x56>
      && (step > 0) && (step < 100))
 800b732:	797b      	ldrb	r3, [r7, #5]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d00e      	beq.n	800b756 <BSP_LCD_ScreenDimmingConfig+0x56>
 800b738:	797b      	ldrb	r3, [r7, #5]
 800b73a:	2b63      	cmp	r3, #99	; 0x63
 800b73c:	d80b      	bhi.n	800b756 <BSP_LCD_ScreenDimmingConfig+0x56>
  {
    dimming_config.start = start;
 800b73e:	4a08      	ldr	r2, [pc, #32]	; (800b760 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800b740:	79fb      	ldrb	r3, [r7, #7]
 800b742:	7053      	strb	r3, [r2, #1]
    dimming_config.stop  = stop;
 800b744:	4a06      	ldr	r2, [pc, #24]	; (800b760 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800b746:	79bb      	ldrb	r3, [r7, #6]
 800b748:	7093      	strb	r3, [r2, #2]
    dimming_config.step  = step;
 800b74a:	4a05      	ldr	r2, [pc, #20]	; (800b760 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800b74c:	797b      	ldrb	r3, [r7, #5]
 800b74e:	70d3      	strb	r3, [r2, #3]
    dimming_config.delay = delay;
 800b750:	4a03      	ldr	r2, [pc, #12]	; (800b760 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800b752:	793b      	ldrb	r3, [r7, #4]
 800b754:	7113      	strb	r3, [r2, #4]
  }
}
 800b756:	bf00      	nop
 800b758:	3708      	adds	r7, #8
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bc90      	pop	{r4, r7}
 800b75e:	4770      	bx	lr
 800b760:	20000554 	.word	0x20000554

0800b764 <BSP_LCD_ScreenDimmingOn>:
  * @note   Screen brightness is gradually decreased
  * @param  None
  * @retval None
  */
void BSP_LCD_ScreenDimmingOn(void)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b082      	sub	sp, #8
 800b768:	af00      	add	r7, sp, #0
  }


#else
  /* Counter Prescaler value */
  uint32_t uhPrescalerValue = 0;
 800b76a:	2300      	movs	r3, #0
 800b76c:	603b      	str	r3, [r7, #0]
  int32_t   step;

  /* Reject this while ongoing dimming */
  if (dimming_config.ongoing)
 800b76e:	4b71      	ldr	r3, [pc, #452]	; (800b934 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	f040 80d9 	bne.w	800b92a <BSP_LCD_ScreenDimmingOn+0x1c6>
  {
    return;
  }

  /* Set that dim feature is active */
  dimming_on = 1;
 800b778:	4b6f      	ldr	r3, [pc, #444]	; (800b938 <BSP_LCD_ScreenDimmingOn+0x1d4>)
 800b77a:	2201      	movs	r2, #1
 800b77c:	601a      	str	r2, [r3, #0]
  dimming_config.ongoing = 1;
 800b77e:	4b6d      	ldr	r3, [pc, #436]	; (800b934 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b780:	2201      	movs	r2, #1
 800b782:	701a      	strb	r2, [r3, #0]

  if (dimming_config.stop > dimming_config.start)
 800b784:	4b6b      	ldr	r3, [pc, #428]	; (800b934 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b786:	789a      	ldrb	r2, [r3, #2]
 800b788:	4b6a      	ldr	r3, [pc, #424]	; (800b934 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b78a:	785b      	ldrb	r3, [r3, #1]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d903      	bls.n	800b798 <BSP_LCD_ScreenDimmingOn+0x34>
  {
    step      = dimming_config.step;
 800b790:	4b68      	ldr	r3, [pc, #416]	; (800b934 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b792:	78db      	ldrb	r3, [r3, #3]
 800b794:	607b      	str	r3, [r7, #4]
 800b796:	e003      	b.n	800b7a0 <BSP_LCD_ScreenDimmingOn+0x3c>
  }
  else
  {
    step      = -dimming_config.step;
 800b798:	4b66      	ldr	r3, [pc, #408]	; (800b934 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b79a:	78db      	ldrb	r3, [r3, #3]
 800b79c:	425b      	negs	r3, r3
 800b79e:	607b      	str	r3, [r7, #4]

  /* Always redo the full initialization as there is no apriori knowledge
    of IO or timer settings at this point (may have been modified by application) */

  /* Compute the prescaler value to have TIM1 counter clock equal to 16000000 Hz */
  uhPrescalerValue = (uint32_t)(SystemCoreClock / 16000000) - 1;
 800b7a0:	4b66      	ldr	r3, [pc, #408]	; (800b93c <BSP_LCD_ScreenDimmingOn+0x1d8>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4a66      	ldr	r2, [pc, #408]	; (800b940 <BSP_LCD_ScreenDimmingOn+0x1dc>)
 800b7a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b7aa:	0d9b      	lsrs	r3, r3, #22
 800b7ac:	3b01      	subs	r3, #1
 800b7ae:	603b      	str	r3, [r7, #0]

  LCD_TimHandle.Instance = TIMx;
 800b7b0:	4b64      	ldr	r3, [pc, #400]	; (800b944 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b7b2:	4a65      	ldr	r2, [pc, #404]	; (800b948 <BSP_LCD_ScreenDimmingOn+0x1e4>)
 800b7b4:	601a      	str	r2, [r3, #0]

  __HAL_TIM_RESET_HANDLE_STATE(&LCD_TimHandle); /* to force MSP call */
 800b7b6:	4b63      	ldr	r3, [pc, #396]	; (800b944 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b7be:	4b61      	ldr	r3, [pc, #388]	; (800b944 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b7c6:	4b5f      	ldr	r3, [pc, #380]	; (800b944 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b7ce:	4b5d      	ldr	r3, [pc, #372]	; (800b944 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b7d6:	4b5b      	ldr	r3, [pc, #364]	; (800b944 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b7d8:	2200      	movs	r2, #0
 800b7da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b7de:	4b59      	ldr	r3, [pc, #356]	; (800b944 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b7e6:	4b57      	ldr	r3, [pc, #348]	; (800b944 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b7ee:	4b55      	ldr	r3, [pc, #340]	; (800b944 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7f6:	4b53      	ldr	r3, [pc, #332]	; (800b944 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7fe:	4b51      	ldr	r3, [pc, #324]	; (800b944 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b800:	2200      	movs	r2, #0
 800b802:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b806:	4b4f      	ldr	r3, [pc, #316]	; (800b944 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b808:	2200      	movs	r2, #0
 800b80a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800b80e:	4b4d      	ldr	r3, [pc, #308]	; (800b944 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b810:	2200      	movs	r2, #0
 800b812:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  LCD_TimHandle.Init.Prescaler         = uhPrescalerValue;
 800b816:	4a4b      	ldr	r2, [pc, #300]	; (800b944 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	6053      	str	r3, [r2, #4]
  LCD_TimHandle.Init.Period            = PERIOD_VALUE;
 800b81c:	4b49      	ldr	r3, [pc, #292]	; (800b944 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b81e:	f240 2299 	movw	r2, #665	; 0x299
 800b822:	60da      	str	r2, [r3, #12]
  LCD_TimHandle.Init.ClockDivision     = 0;
 800b824:	4b47      	ldr	r3, [pc, #284]	; (800b944 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b826:	2200      	movs	r2, #0
 800b828:	611a      	str	r2, [r3, #16]
  LCD_TimHandle.Init.CounterMode       = (step > 0 ? TIM_COUNTERMODE_DOWN : TIM_COUNTERMODE_UP);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	dd01      	ble.n	800b834 <BSP_LCD_ScreenDimmingOn+0xd0>
 800b830:	2310      	movs	r3, #16
 800b832:	e000      	b.n	800b836 <BSP_LCD_ScreenDimmingOn+0xd2>
 800b834:	2300      	movs	r3, #0
 800b836:	4a43      	ldr	r2, [pc, #268]	; (800b944 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b838:	6093      	str	r3, [r2, #8]
  LCD_TimHandle.Init.RepetitionCounter = 0;
 800b83a:	4b42      	ldr	r3, [pc, #264]	; (800b944 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b83c:	2200      	movs	r2, #0
 800b83e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&LCD_TimHandle) != HAL_OK)
 800b840:	4840      	ldr	r0, [pc, #256]	; (800b944 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b842:	f008 fce1 	bl	8014208 <HAL_TIM_PWM_Init>
 800b846:	4603      	mov	r3, r0
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d001      	beq.n	800b850 <BSP_LCD_ScreenDimmingOn+0xec>
  {
    /* Initialization Error */
    BSP_ErrorHandler();
 800b84c:	f7fe fd7d 	bl	800a34a <BSP_ErrorHandler>
  }

  /* Common configuration for all channels */
  LCD_sConfig.OCMode       = TIM_OCMODE_PWM1;
 800b850:	4b3e      	ldr	r3, [pc, #248]	; (800b94c <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800b852:	2260      	movs	r2, #96	; 0x60
 800b854:	601a      	str	r2, [r3, #0]
  LCD_sConfig.OCPolarity   = TIM_OCPOLARITY_HIGH;
 800b856:	4b3d      	ldr	r3, [pc, #244]	; (800b94c <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800b858:	2200      	movs	r2, #0
 800b85a:	609a      	str	r2, [r3, #8]
  LCD_sConfig.OCFastMode   = TIM_OCFAST_DISABLE;
 800b85c:	4b3b      	ldr	r3, [pc, #236]	; (800b94c <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800b85e:	2200      	movs	r2, #0
 800b860:	611a      	str	r2, [r3, #16]
  LCD_sConfig.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 800b862:	4b3a      	ldr	r3, [pc, #232]	; (800b94c <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800b864:	2200      	movs	r2, #0
 800b866:	60da      	str	r2, [r3, #12]
  LCD_sConfig.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800b868:	4b38      	ldr	r3, [pc, #224]	; (800b94c <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800b86a:	2200      	movs	r2, #0
 800b86c:	619a      	str	r2, [r3, #24]

  LCD_sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;
 800b86e:	4b37      	ldr	r3, [pc, #220]	; (800b94c <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800b870:	2200      	movs	r2, #0
 800b872:	615a      	str	r2, [r3, #20]

  /* Set the pulse value for channel */
  LCD_sConfig.Pulse = __DIMMING_CYCLE_VALUE(dimming_config.start);
 800b874:	4b2f      	ldr	r3, [pc, #188]	; (800b934 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b876:	785b      	ldrb	r3, [r3, #1]
 800b878:	461a      	mov	r2, r3
 800b87a:	f240 2399 	movw	r3, #665	; 0x299
 800b87e:	fb02 f303 	mul.w	r3, r2, r3
 800b882:	4a33      	ldr	r2, [pc, #204]	; (800b950 <BSP_LCD_ScreenDimmingOn+0x1ec>)
 800b884:	fba2 2303 	umull	r2, r3, r2, r3
 800b888:	095b      	lsrs	r3, r3, #5
 800b88a:	4a30      	ldr	r2, [pc, #192]	; (800b94c <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800b88c:	6053      	str	r3, [r2, #4]
  if (HAL_TIM_PWM_ConfigChannel(&LCD_TimHandle, &LCD_sConfig, TIMx_CHANNEL) != HAL_OK)
 800b88e:	220c      	movs	r2, #12
 800b890:	492e      	ldr	r1, [pc, #184]	; (800b94c <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800b892:	482c      	ldr	r0, [pc, #176]	; (800b944 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b894:	f008 ffcc 	bl	8014830 <HAL_TIM_PWM_ConfigChannel>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d001      	beq.n	800b8a2 <BSP_LCD_ScreenDimmingOn+0x13e>
  {
    /* Configuration Error */
    BSP_ErrorHandler();
 800b89e:	f7fe fd54 	bl	800a34a <BSP_ErrorHandler>
  }

  /* Start Timer channel */
  if (HAL_TIM_PWM_Start(&LCD_TimHandle, TIMx_CHANNEL) != HAL_OK)
 800b8a2:	210c      	movs	r1, #12
 800b8a4:	4827      	ldr	r0, [pc, #156]	; (800b944 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b8a6:	f008 fd07 	bl	80142b8 <HAL_TIM_PWM_Start>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d001      	beq.n	800b8b4 <BSP_LCD_ScreenDimmingOn+0x150>
  {
    /* PWM Generation Error */
    BSP_ErrorHandler();
 800b8b0:	f7fe fd4b 	bl	800a34a <BSP_ErrorHandler>
  }

  /* Set the pulse value for the timer channel */
  i = dimming_config.start;
 800b8b4:	4b1f      	ldr	r3, [pc, #124]	; (800b934 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b8b6:	785b      	ldrb	r3, [r3, #1]
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	4b26      	ldr	r3, [pc, #152]	; (800b954 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800b8bc:	601a      	str	r2, [r3, #0]
  while (dimming_config.ongoing)
 800b8be:	e02f      	b.n	800b920 <BSP_LCD_ScreenDimmingOn+0x1bc>
  {
    __HAL_TIM_SET_COMPARE(&LCD_TimHandle, TIMx_CHANNEL, __DIMMING_CYCLE_VALUE(i));
 800b8c0:	4b24      	ldr	r3, [pc, #144]	; (800b954 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f240 2299 	movw	r2, #665	; 0x299
 800b8c8:	fb03 f202 	mul.w	r2, r3, r2
 800b8cc:	4b1d      	ldr	r3, [pc, #116]	; (800b944 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	491f      	ldr	r1, [pc, #124]	; (800b950 <BSP_LCD_ScreenDimmingOn+0x1ec>)
 800b8d2:	fba1 1202 	umull	r1, r2, r1, r2
 800b8d6:	0952      	lsrs	r2, r2, #5
 800b8d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Exit if stop is reached */
    if (((step > 0) && (i >= dimming_config.stop))
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	dd06      	ble.n	800b8ee <BSP_LCD_ScreenDimmingOn+0x18a>
 800b8e0:	4b14      	ldr	r3, [pc, #80]	; (800b934 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b8e2:	789b      	ldrb	r3, [r3, #2]
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	4b1b      	ldr	r3, [pc, #108]	; (800b954 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d909      	bls.n	800b902 <BSP_LCD_ScreenDimmingOn+0x19e>
        || ((step < 0) && (i <= dimming_config.stop)))
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	da0a      	bge.n	800b90a <BSP_LCD_ScreenDimmingOn+0x1a6>
 800b8f4:	4b0f      	ldr	r3, [pc, #60]	; (800b934 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b8f6:	789b      	ldrb	r3, [r3, #2]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	4b16      	ldr	r3, [pc, #88]	; (800b954 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d303      	bcc.n	800b90a <BSP_LCD_ScreenDimmingOn+0x1a6>
    {
      dimming_config.ongoing = 0;
 800b902:	4b0c      	ldr	r3, [pc, #48]	; (800b934 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b904:	2200      	movs	r2, #0
 800b906:	701a      	strb	r2, [r3, #0]
 800b908:	e00a      	b.n	800b920 <BSP_LCD_ScreenDimmingOn+0x1bc>
    }
    else
    {
      HAL_Delay(dimming_config.delay);
 800b90a:	4b0a      	ldr	r3, [pc, #40]	; (800b934 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b90c:	791b      	ldrb	r3, [r3, #4]
 800b90e:	4618      	mov	r0, r3
 800b910:	f000 fbf8 	bl	800c104 <HAL_Delay>
      i += step;
 800b914:	4b0f      	ldr	r3, [pc, #60]	; (800b954 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	4413      	add	r3, r2
 800b91c:	4a0d      	ldr	r2, [pc, #52]	; (800b954 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800b91e:	6013      	str	r3, [r2, #0]
  while (dimming_config.ongoing)
 800b920:	4b04      	ldr	r3, [pc, #16]	; (800b934 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d1cb      	bne.n	800b8c0 <BSP_LCD_ScreenDimmingOn+0x15c>
 800b928:	e000      	b.n	800b92c <BSP_LCD_ScreenDimmingOn+0x1c8>
    return;
 800b92a:	bf00      	nop
    }
  }
#endif
}
 800b92c:	3708      	adds	r7, #8
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	20000554 	.word	0x20000554
 800b938:	20001b5c 	.word	0x20001b5c
 800b93c:	200001a0 	.word	0x200001a0
 800b940:	431bde83 	.word	0x431bde83
 800b944:	20001b60 	.word	0x20001b60
 800b948:	40000c00 	.word	0x40000c00
 800b94c:	20001bac 	.word	0x20001bac
 800b950:	51eb851f 	.word	0x51eb851f
 800b954:	20001bdc 	.word	0x20001bdc

0800b958 <BSP_LCD_ScreenDimmingOff>:
  * @note   Screen brightness is immediately set to its highest level
  * @param  None
  * @retval None
  */
void BSP_LCD_ScreenDimmingOff(void)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	af00      	add	r7, sp, #0
#if defined(LPTIMER_DIMMING)
  GPIO_InitTypeDef GPIO_InitStructure;
#endif

  if (dimming_on == 1)
 800b95c:	4b0d      	ldr	r3, [pc, #52]	; (800b994 <BSP_LCD_ScreenDimmingOff+0x3c>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	2b01      	cmp	r3, #1
 800b962:	d114      	bne.n	800b98e <BSP_LCD_ScreenDimmingOff+0x36>
  {
    /* Stop ongoing dimming */
    dimming_config.ongoing = 0;
 800b964:	4b0c      	ldr	r3, [pc, #48]	; (800b998 <BSP_LCD_ScreenDimmingOff+0x40>)
 800b966:	2200      	movs	r2, #0
 800b968:	701a      	strb	r2, [r3, #0]

    /* Disable timer clock for power consumption reasons */
    __HAL_RCC_LPTIM1_CLK_DISABLE();
#else
    /* Stop Timer channel */
    if (HAL_TIM_PWM_Stop(&LCD_TimHandle, TIMx_CHANNEL) != HAL_OK)
 800b96a:	210c      	movs	r1, #12
 800b96c:	480b      	ldr	r0, [pc, #44]	; (800b99c <BSP_LCD_ScreenDimmingOff+0x44>)
 800b96e:	f008 fda9 	bl	80144c4 <HAL_TIM_PWM_Stop>
 800b972:	4603      	mov	r3, r0
 800b974:	2b00      	cmp	r3, #0
 800b976:	d001      	beq.n	800b97c <BSP_LCD_ScreenDimmingOff+0x24>
    {
      /* PWM Generation Error */
      BSP_ErrorHandler();
 800b978:	f7fe fce7 	bl	800a34a <BSP_ErrorHandler>
    }

    /* Disable timer clock for power consumption reasons */
    TIMx_CLK_DISABLE();
 800b97c:	4b08      	ldr	r3, [pc, #32]	; (800b9a0 <BSP_LCD_ScreenDimmingOff+0x48>)
 800b97e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b980:	4a07      	ldr	r2, [pc, #28]	; (800b9a0 <BSP_LCD_ScreenDimmingOff+0x48>)
 800b982:	f023 0308 	bic.w	r3, r3, #8
 800b986:	6593      	str	r3, [r2, #88]	; 0x58
#endif

    dimming_on = 0;
 800b988:	4b02      	ldr	r3, [pc, #8]	; (800b994 <BSP_LCD_ScreenDimmingOff+0x3c>)
 800b98a:	2200      	movs	r2, #0
 800b98c:	601a      	str	r2, [r3, #0]
  }
}
 800b98e:	bf00      	nop
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	20001b5c 	.word	0x20001b5c
 800b998:	20000554 	.word	0x20000554
 800b99c:	20001b60 	.word	0x20001b60
 800b9a0:	40021000 	.word	0x40021000

0800b9a4 <HAL_TIM_PWM_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b088      	sub	sp, #32
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStruct;

  /* TIMx Peripheral clock enable */
  TIMx_CLK_ENABLE();
 800b9ac:	4b0f      	ldr	r3, [pc, #60]	; (800b9ec <HAL_TIM_PWM_MspInit+0x48>)
 800b9ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9b0:	4a0e      	ldr	r2, [pc, #56]	; (800b9ec <HAL_TIM_PWM_MspInit+0x48>)
 800b9b2:	f043 0308 	orr.w	r3, r3, #8
 800b9b6:	6593      	str	r3, [r2, #88]	; 0x58
 800b9b8:	4b0c      	ldr	r3, [pc, #48]	; (800b9ec <HAL_TIM_PWM_MspInit+0x48>)
 800b9ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9bc:	f003 0308 	and.w	r3, r3, #8
 800b9c0:	60bb      	str	r3, [r7, #8]
 800b9c2:	68bb      	ldr	r3, [r7, #8]

  /* Timer channel configuration */

  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9c4:	2302      	movs	r3, #2
 800b9c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b9cc:	2303      	movs	r3, #3
 800b9ce:	61bb      	str	r3, [r7, #24]

  GPIO_InitStruct.Alternate = TIMx_CHANNEl_AF;
 800b9d0:	2302      	movs	r3, #2
 800b9d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b9d8:	f107 030c 	add.w	r3, r7, #12
 800b9dc:	4619      	mov	r1, r3
 800b9de:	4804      	ldr	r0, [pc, #16]	; (800b9f0 <HAL_TIM_PWM_MspInit+0x4c>)
 800b9e0:	f002 f908 	bl	800dbf4 <HAL_GPIO_Init>
}
 800b9e4:	bf00      	nop
 800b9e6:	3720      	adds	r7, #32
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	40021000 	.word	0x40021000
 800b9f0:	48002000 	.word	0x48002000

0800b9f4 <BSP_LCD_MspInit>:
  * @brief  Initializes the LCD GPIO special pins MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_LCD_MspInit(void)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b088      	sub	sp, #32
 800b9f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clock */
  LCD_TE_GPIO_CLK_ENABLE();
 800b9fa:	4b29      	ldr	r3, [pc, #164]	; (800baa0 <BSP_LCD_MspInit+0xac>)
 800b9fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9fe:	4a28      	ldr	r2, [pc, #160]	; (800baa0 <BSP_LCD_MspInit+0xac>)
 800ba00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba04:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ba06:	4b26      	ldr	r3, [pc, #152]	; (800baa0 <BSP_LCD_MspInit+0xac>)
 800ba08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba0e:	60bb      	str	r3, [r7, #8]
 800ba10:	68bb      	ldr	r3, [r7, #8]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800ba12:	4b23      	ldr	r3, [pc, #140]	; (800baa0 <BSP_LCD_MspInit+0xac>)
 800ba14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba16:	4a22      	ldr	r2, [pc, #136]	; (800baa0 <BSP_LCD_MspInit+0xac>)
 800ba18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ba1e:	4b20      	ldr	r3, [pc, #128]	; (800baa0 <BSP_LCD_MspInit+0xac>)
 800ba20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba26:	607b      	str	r3, [r7, #4]
 800ba28:	687b      	ldr	r3, [r7, #4]
  LCD_PWR_CTRL_GPIO_CLK_ENABLE();
 800ba2a:	4b1d      	ldr	r3, [pc, #116]	; (800baa0 <BSP_LCD_MspInit+0xac>)
 800ba2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba2e:	4a1c      	ldr	r2, [pc, #112]	; (800baa0 <BSP_LCD_MspInit+0xac>)
 800ba30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba34:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ba36:	4b1a      	ldr	r3, [pc, #104]	; (800baa0 <BSP_LCD_MspInit+0xac>)
 800ba38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba3e:	603b      	str	r3, [r7, #0]
 800ba40:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  if (BSP_IO_Init() == IO_ERROR)
 800ba42:	f7ff fa57 	bl	800aef4 <BSP_IO_Init>
 800ba46:	4603      	mov	r3, r0
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d101      	bne.n	800ba50 <BSP_LCD_MspInit+0x5c>
  {
    BSP_ErrorHandler();
 800ba4c:	f7fe fc7d 	bl	800a34a <BSP_ErrorHandler>
  }
  BSP_IO_ConfigPin(LCD_RST_PIN, IO_MODE_OUTPUT);
 800ba50:	2101      	movs	r1, #1
 800ba52:	2004      	movs	r0, #4
 800ba54:	f7ff fa92 	bl	800af7c <BSP_IO_ConfigPin>

  /* LCD_BL_CTRL GPIO configuration */
  GPIO_InitStructure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 800ba58:	2301      	movs	r3, #1
 800ba5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode      = GPIO_MODE_OUTPUT_PP;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull      = GPIO_NOPULL;
 800ba60:	2300      	movs	r3, #0
 800ba62:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 800ba64:	2300      	movs	r3, #0
 800ba66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed   = GPIO_SPEED_FREQ_LOW;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStructure);
 800ba6c:	f107 030c 	add.w	r3, r7, #12
 800ba70:	4619      	mov	r1, r3
 800ba72:	480c      	ldr	r0, [pc, #48]	; (800baa4 <BSP_LCD_MspInit+0xb0>)
 800ba74:	f002 f8be 	bl	800dbf4 <HAL_GPIO_Init>

  /* Power on the screen (also done in Touch Screen driver ... */
  GPIO_InitStructure.Pin = LCD_PWR_CTRL_PIN;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP /*GPIO_MODE_OUTPUT_PP*/;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull =   GPIO_NOPULL;
 800ba80:	2300      	movs	r3, #0
 800ba82:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 800ba84:	2300      	movs	r3, #0
 800ba86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_PWR_CTRL_GPIO_PORT, &GPIO_InitStructure);
 800ba8c:	f107 030c 	add.w	r3, r7, #12
 800ba90:	4619      	mov	r1, r3
 800ba92:	4805      	ldr	r0, [pc, #20]	; (800baa8 <BSP_LCD_MspInit+0xb4>)
 800ba94:	f002 f8ae 	bl	800dbf4 <HAL_GPIO_Init>
}
 800ba98:	bf00      	nop
 800ba9a:	3720      	adds	r7, #32
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}
 800baa0:	40021000 	.word	0x40021000
 800baa4:	48002000 	.word	0x48002000
 800baa8:	48001c00 	.word	0x48001c00

0800baac <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b088      	sub	sp, #32
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	4603      	mov	r3, r0
 800bab4:	603a      	str	r2, [r7, #0]
 800bab6:	80fb      	strh	r3, [r7, #6]
 800bab8:	460b      	mov	r3, r1
 800baba:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800babc:	2300      	movs	r3, #0
 800babe:	61fb      	str	r3, [r7, #28]
 800bac0:	2300      	movs	r3, #0
 800bac2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;

  height = DrawProp.pFont->Height;
 800bac4:	4b45      	ldr	r3, [pc, #276]	; (800bbdc <DrawChar+0x130>)
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	88db      	ldrh	r3, [r3, #6]
 800baca:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 800bacc:	4b43      	ldr	r3, [pc, #268]	; (800bbdc <DrawChar+0x130>)
 800bace:	689b      	ldr	r3, [r3, #8]
 800bad0:	889b      	ldrh	r3, [r3, #4]
 800bad2:	823b      	strh	r3, [r7, #16]

  offset =  8 * ((width + 7) / 8) -  width ;
 800bad4:	8a3b      	ldrh	r3, [r7, #16]
 800bad6:	3307      	adds	r3, #7
 800bad8:	2b00      	cmp	r3, #0
 800bada:	da00      	bge.n	800bade <DrawChar+0x32>
 800badc:	3307      	adds	r3, #7
 800bade:	10db      	asrs	r3, r3, #3
 800bae0:	b2db      	uxtb	r3, r3
 800bae2:	00db      	lsls	r3, r3, #3
 800bae4:	b2da      	uxtb	r2, r3
 800bae6:	8a3b      	ldrh	r3, [r7, #16]
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	1ad3      	subs	r3, r2, r3
 800baec:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 800baee:	2300      	movs	r3, #0
 800baf0:	61fb      	str	r3, [r7, #28]
 800baf2:	e069      	b.n	800bbc8 <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 800baf4:	8a3b      	ldrh	r3, [r7, #16]
 800baf6:	3307      	adds	r3, #7
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	da00      	bge.n	800bafe <DrawChar+0x52>
 800bafc:	3307      	adds	r3, #7
 800bafe:	10db      	asrs	r3, r3, #3
 800bb00:	461a      	mov	r2, r3
 800bb02:	69fb      	ldr	r3, [r7, #28]
 800bb04:	fb02 f303 	mul.w	r3, r2, r3
 800bb08:	683a      	ldr	r2, [r7, #0]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 800bb0e:	8a3b      	ldrh	r3, [r7, #16]
 800bb10:	3307      	adds	r3, #7
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	da00      	bge.n	800bb18 <DrawChar+0x6c>
 800bb16:	3307      	adds	r3, #7
 800bb18:	10db      	asrs	r3, r3, #3
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d002      	beq.n	800bb24 <DrawChar+0x78>
 800bb1e:	2b02      	cmp	r3, #2
 800bb20:	d004      	beq.n	800bb2c <DrawChar+0x80>
 800bb22:	e00c      	b.n	800bb3e <DrawChar+0x92>
    {
      case 1:
        line =  pchar[0];
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	617b      	str	r3, [r7, #20]
        break;
 800bb2a:	e016      	b.n	800bb5a <DrawChar+0xae>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	021b      	lsls	r3, r3, #8
 800bb32:	68ba      	ldr	r2, [r7, #8]
 800bb34:	3201      	adds	r2, #1
 800bb36:	7812      	ldrb	r2, [r2, #0]
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	617b      	str	r3, [r7, #20]
        break;
 800bb3c:	e00d      	b.n	800bb5a <DrawChar+0xae>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	781b      	ldrb	r3, [r3, #0]
 800bb42:	041a      	lsls	r2, r3, #16
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	3301      	adds	r3, #1
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	021b      	lsls	r3, r3, #8
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	3202      	adds	r2, #2
 800bb52:	7812      	ldrb	r2, [r2, #0]
 800bb54:	4313      	orrs	r3, r2
 800bb56:	617b      	str	r3, [r7, #20]
        break;
 800bb58:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	61bb      	str	r3, [r7, #24]
 800bb5e:	e029      	b.n	800bbb4 <DrawChar+0x108>
    {
      if ((line & (1 << (width - j + offset - 1))) != 0)
 800bb60:	8a3a      	ldrh	r2, [r7, #16]
 800bb62:	69bb      	ldr	r3, [r7, #24]
 800bb64:	1ad2      	subs	r2, r2, r3
 800bb66:	7bfb      	ldrb	r3, [r7, #15]
 800bb68:	4413      	add	r3, r2
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	fa02 f303 	lsl.w	r3, r2, r3
 800bb72:	461a      	mov	r2, r3
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	4013      	ands	r3, r2
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d00c      	beq.n	800bb96 <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 800bb7c:	69bb      	ldr	r3, [r7, #24]
 800bb7e:	b29a      	uxth	r2, r3
 800bb80:	88fb      	ldrh	r3, [r7, #6]
 800bb82:	4413      	add	r3, r2
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	4a15      	ldr	r2, [pc, #84]	; (800bbdc <DrawChar+0x130>)
 800bb88:	6812      	ldr	r2, [r2, #0]
 800bb8a:	b292      	uxth	r2, r2
 800bb8c:	88b9      	ldrh	r1, [r7, #4]
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7ff fbfe 	bl	800b390 <BSP_LCD_DrawPixel>
 800bb94:	e00b      	b.n	800bbae <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 800bb96:	69bb      	ldr	r3, [r7, #24]
 800bb98:	b29a      	uxth	r2, r3
 800bb9a:	88fb      	ldrh	r3, [r7, #6]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	4a0e      	ldr	r2, [pc, #56]	; (800bbdc <DrawChar+0x130>)
 800bba2:	6852      	ldr	r2, [r2, #4]
 800bba4:	b292      	uxth	r2, r2
 800bba6:	88b9      	ldrh	r1, [r7, #4]
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f7ff fbf1 	bl	800b390 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800bbae:	69bb      	ldr	r3, [r7, #24]
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	61bb      	str	r3, [r7, #24]
 800bbb4:	8a3b      	ldrh	r3, [r7, #16]
 800bbb6:	69ba      	ldr	r2, [r7, #24]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d3d1      	bcc.n	800bb60 <DrawChar+0xb4>
      }
    }
    Ypos++;
 800bbbc:	88bb      	ldrh	r3, [r7, #4]
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 800bbc2:	69fb      	ldr	r3, [r7, #28]
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	61fb      	str	r3, [r7, #28]
 800bbc8:	8a7b      	ldrh	r3, [r7, #18]
 800bbca:	69fa      	ldr	r2, [r7, #28]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d391      	bcc.n	800baf4 <DrawChar+0x48>
  }
}
 800bbd0:	bf00      	nop
 800bbd2:	bf00      	nop
 800bbd4:	3720      	adds	r7, #32
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	bf00      	nop
 800bbdc:	20001bcc 	.word	0x20001bcc

0800bbe0 <BSP_TS_InitEx>:
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @param  orientation : TS_ORIENTATION_LANDSCAPE or TS_ORIENTATION_PORTRAIT
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_InitEx(uint16_t ts_SizeX, uint16_t ts_SizeY, uint8_t  orientation)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	80fb      	strh	r3, [r7, #6]
 800bbea:	460b      	mov	r3, r1
 800bbec:	80bb      	strh	r3, [r7, #4]
 800bbee:	4613      	mov	r3, r2
 800bbf0:	70fb      	strb	r3, [r7, #3]
  uint8_t ts_status = TS_OK;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	73fb      	strb	r3, [r7, #15]
  uint16_t read_id = 0;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	81bb      	strh	r3, [r7, #12]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 800bbfa:	4b20      	ldr	r3, [pc, #128]	; (800bc7c <BSP_TS_InitEx+0x9c>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4a20      	ldr	r2, [pc, #128]	; (800bc80 <BSP_TS_InitEx+0xa0>)
 800bc00:	7812      	ldrb	r2, [r2, #0]
 800bc02:	b292      	uxth	r2, r2
 800bc04:	4610      	mov	r0, r2
 800bc06:	4798      	blx	r3

  /* Scan FT6x36 TouchScreen IC controller ID register by I2C Read */
  /* Verify this is a FT6x36, otherwise this is an error case      */

  read_id = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 800bc08:	4b1c      	ldr	r3, [pc, #112]	; (800bc7c <BSP_TS_InitEx+0x9c>)
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	2070      	movs	r0, #112	; 0x70
 800bc0e:	4798      	blx	r3
 800bc10:	4603      	mov	r3, r0
 800bc12:	81bb      	strh	r3, [r7, #12]

  if (read_id == FT6x36_ID_VALUE)
 800bc14:	89bb      	ldrh	r3, [r7, #12]
 800bc16:	2bcd      	cmp	r3, #205	; 0xcd
 800bc18:	d12a      	bne.n	800bc70 <BSP_TS_InitEx+0x90>
  {
    /* Found FT6x36 : Initialize the TS driver structure */
    tsDriver = &ft6x06_ts_drv;
 800bc1a:	4b1a      	ldr	r3, [pc, #104]	; (800bc84 <BSP_TS_InitEx+0xa4>)
 800bc1c:	4a17      	ldr	r2, [pc, #92]	; (800bc7c <BSP_TS_InitEx+0x9c>)
 800bc1e:	601a      	str	r2, [r3, #0]

    I2C_Address    = TS_I2C_ADDRESS;
 800bc20:	4b17      	ldr	r3, [pc, #92]	; (800bc80 <BSP_TS_InitEx+0xa0>)
 800bc22:	2270      	movs	r2, #112	; 0x70
 800bc24:	701a      	strb	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if (orientation == TS_ORIENTATION_PORTRAIT)
 800bc26:	78fb      	ldrb	r3, [r7, #3]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d106      	bne.n	800bc3a <BSP_TS_InitEx+0x5a>
    {
      tsOrientation = TS_SWAP_X | TS_SWAP_Y;
 800bc2c:	4b16      	ldr	r3, [pc, #88]	; (800bc88 <BSP_TS_InitEx+0xa8>)
 800bc2e:	2206      	movs	r2, #6
 800bc30:	701a      	strb	r2, [r3, #0]
      TS_orientation = TS_ORIENTATION_PORTRAIT;
 800bc32:	4b16      	ldr	r3, [pc, #88]	; (800bc8c <BSP_TS_InitEx+0xac>)
 800bc34:	2200      	movs	r2, #0
 800bc36:	701a      	strb	r2, [r3, #0]
 800bc38:	e005      	b.n	800bc46 <BSP_TS_InitEx+0x66>
    }
    else
    {
      tsOrientation = TS_SWAP_XY | TS_SWAP_Y;
 800bc3a:	4b13      	ldr	r3, [pc, #76]	; (800bc88 <BSP_TS_InitEx+0xa8>)
 800bc3c:	220c      	movs	r2, #12
 800bc3e:	701a      	strb	r2, [r3, #0]
      TS_orientation = TS_ORIENTATION_LANDSCAPE;
 800bc40:	4b12      	ldr	r3, [pc, #72]	; (800bc8c <BSP_TS_InitEx+0xac>)
 800bc42:	2201      	movs	r2, #1
 800bc44:	701a      	strb	r2, [r3, #0]
    }

    if (ts_status == TS_OK)
 800bc46:	7bfb      	ldrb	r3, [r7, #15]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d111      	bne.n	800bc70 <BSP_TS_InitEx+0x90>
    {
      /* Software reset the TouchScreen */
      tsDriver->Reset(I2C_Address);
 800bc4c:	4b0d      	ldr	r3, [pc, #52]	; (800bc84 <BSP_TS_InitEx+0xa4>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	689b      	ldr	r3, [r3, #8]
 800bc52:	4a0b      	ldr	r2, [pc, #44]	; (800bc80 <BSP_TS_InitEx+0xa0>)
 800bc54:	7812      	ldrb	r2, [r2, #0]
 800bc56:	b292      	uxth	r2, r2
 800bc58:	4610      	mov	r0, r2
 800bc5a:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      tsDriver->Start(I2C_Address);
 800bc5c:	4b09      	ldr	r3, [pc, #36]	; (800bc84 <BSP_TS_InitEx+0xa4>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	68db      	ldr	r3, [r3, #12]
 800bc62:	4a07      	ldr	r2, [pc, #28]	; (800bc80 <BSP_TS_InitEx+0xa0>)
 800bc64:	7812      	ldrb	r2, [r2, #0]
 800bc66:	b292      	uxth	r2, r2
 800bc68:	4610      	mov	r0, r2
 800bc6a:	4798      	blx	r3

      return TS_OK;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	e000      	b.n	800bc72 <BSP_TS_InitEx+0x92>

    } /* of if(ts_status == TS_OK) */
  }

  return TS_DEVICE_NOT_FOUND;
 800bc70:	2303      	movs	r3, #3


}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3710      	adds	r7, #16
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	200001a4 	.word	0x200001a4
 800bc80:	20001be4 	.word	0x20001be4
 800bc84:	20001be0 	.word	0x20001be0
 800bc88:	20000559 	.word	0x20000559
 800bc8c:	2000055a 	.word	0x2000055a

0800bc90 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 800bc96:	2300      	movs	r3, #0
 800bc98:	71fb      	strb	r3, [r7, #7]

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x36 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspInit();
 800bc9a:	f000 f93b 	bl	800bf14 <BSP_TS_INT_MspInit>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  tsDriver->EnableIT(I2C_Address);
 800bc9e:	4b06      	ldr	r3, [pc, #24]	; (800bcb8 <BSP_TS_ITConfig+0x28>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	699b      	ldr	r3, [r3, #24]
 800bca4:	4a05      	ldr	r2, [pc, #20]	; (800bcbc <BSP_TS_ITConfig+0x2c>)
 800bca6:	7812      	ldrb	r2, [r2, #0]
 800bca8:	b292      	uxth	r2, r2
 800bcaa:	4610      	mov	r0, r2
 800bcac:	4798      	blx	r3

  return (ts_status);
 800bcae:	79fb      	ldrb	r3, [r7, #7]
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3708      	adds	r7, #8
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}
 800bcb8:	20001be0 	.word	0x20001be0
 800bcbc:	20001be4 	.word	0x20001be4

0800bcc0 <BSP_TS_ITDeConfig>:
/**
  * @brief  deConfigures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITDeConfig(void)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b082      	sub	sp, #8
 800bcc4:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	71fb      	strb	r3, [r7, #7]

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x36 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspDeInit();
 800bcca:	f000 f969 	bl	800bfa0 <BSP_TS_INT_MspDeInit>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  tsDriver->DisableIT(I2C_Address);
 800bcce:	4b06      	ldr	r3, [pc, #24]	; (800bce8 <BSP_TS_ITDeConfig+0x28>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd4:	4a05      	ldr	r2, [pc, #20]	; (800bcec <BSP_TS_ITDeConfig+0x2c>)
 800bcd6:	7812      	ldrb	r2, [r2, #0]
 800bcd8:	b292      	uxth	r2, r2
 800bcda:	4610      	mov	r0, r2
 800bcdc:	4798      	blx	r3

  return (ts_status);
 800bcde:	79fb      	ldrb	r3, [r7, #7]
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3708      	adds	r7, #8
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	20001be0 	.word	0x20001be0
 800bcec:	20001be4 	.word	0x20001be4

0800bcf0 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800bcf0:	b590      	push	{r4, r7, lr}
 800bcf2:	b089      	sub	sp, #36	; 0x24
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2C_Address);
 800bcfc:	4b80      	ldr	r3, [pc, #512]	; (800bf00 <BSP_TS_GetState+0x210>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	691b      	ldr	r3, [r3, #16]
 800bd02:	4a80      	ldr	r2, [pc, #512]	; (800bf04 <BSP_TS_GetState+0x214>)
 800bd04:	7812      	ldrb	r2, [r2, #0]
 800bd06:	b292      	uxth	r2, r2
 800bd08:	4610      	mov	r0, r2
 800bd0a:	4798      	blx	r3
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	461a      	mov	r2, r3
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	701a      	strb	r2, [r3, #0]
  if (TS_State->touchDetected)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	f000 80ec 	beq.w	800bef6 <BSP_TS_GetState+0x206>
  {
    for (index = 0; index < TS_State->touchDetected; index++)
 800bd1e:	2300      	movs	r3, #0
 800bd20:	61fb      	str	r3, [r7, #28]
 800bd22:	e0e1      	b.n	800bee8 <BSP_TS_GetState+0x1f8>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 800bd24:	4b76      	ldr	r3, [pc, #472]	; (800bf00 <BSP_TS_GetState+0x210>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	695b      	ldr	r3, [r3, #20]
 800bd2a:	4a76      	ldr	r2, [pc, #472]	; (800bf04 <BSP_TS_GetState+0x214>)
 800bd2c:	7812      	ldrb	r2, [r2, #0]
 800bd2e:	b290      	uxth	r0, r2
 800bd30:	f107 0110 	add.w	r1, r7, #16
 800bd34:	69fa      	ldr	r2, [r7, #28]
 800bd36:	0052      	lsls	r2, r2, #1
 800bd38:	188c      	adds	r4, r1, r2
 800bd3a:	f107 010c 	add.w	r1, r7, #12
 800bd3e:	69fa      	ldr	r2, [r7, #28]
 800bd40:	0052      	lsls	r2, r2, #1
 800bd42:	440a      	add	r2, r1
 800bd44:	4621      	mov	r1, r4
 800bd46:	4798      	blx	r3

      if (tsOrientation & TS_SWAP_XY)
 800bd48:	4b6f      	ldr	r3, [pc, #444]	; (800bf08 <BSP_TS_GetState+0x218>)
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	f003 0308 	and.w	r3, r3, #8
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d019      	beq.n	800bd88 <BSP_TS_GetState+0x98>
      {
        tmp = Raw_x[index];
 800bd54:	69fb      	ldr	r3, [r7, #28]
 800bd56:	005b      	lsls	r3, r3, #1
 800bd58:	3320      	adds	r3, #32
 800bd5a:	443b      	add	r3, r7
 800bd5c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800bd60:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index];
 800bd62:	69fb      	ldr	r3, [r7, #28]
 800bd64:	005b      	lsls	r3, r3, #1
 800bd66:	3320      	adds	r3, #32
 800bd68:	443b      	add	r3, r7
 800bd6a:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800bd6e:	69fb      	ldr	r3, [r7, #28]
 800bd70:	005b      	lsls	r3, r3, #1
 800bd72:	3320      	adds	r3, #32
 800bd74:	443b      	add	r3, r7
 800bd76:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 800bd7a:	69fb      	ldr	r3, [r7, #28]
 800bd7c:	005b      	lsls	r3, r3, #1
 800bd7e:	3320      	adds	r3, #32
 800bd80:	443b      	add	r3, r7
 800bd82:	8b3a      	ldrh	r2, [r7, #24]
 800bd84:	f823 2c14 	strh.w	r2, [r3, #-20]
      }

      if (tsOrientation & TS_SWAP_X)
 800bd88:	4b5f      	ldr	r3, [pc, #380]	; (800bf08 <BSP_TS_GetState+0x218>)
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	f003 0302 	and.w	r3, r3, #2
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d00e      	beq.n	800bdb2 <BSP_TS_GetState+0xc2>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH_HEIGHT - 1 - Raw_x[index];
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	005b      	lsls	r3, r3, #1
 800bd98:	3320      	adds	r3, #32
 800bd9a:	443b      	add	r3, r7
 800bd9c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800bda0:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800bda4:	b29a      	uxth	r2, r3
 800bda6:	69fb      	ldr	r3, [r7, #28]
 800bda8:	005b      	lsls	r3, r3, #1
 800bdaa:	3320      	adds	r3, #32
 800bdac:	443b      	add	r3, r7
 800bdae:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if (tsOrientation & TS_SWAP_Y)
 800bdb2:	4b55      	ldr	r3, [pc, #340]	; (800bf08 <BSP_TS_GetState+0x218>)
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	f003 0304 	and.w	r3, r3, #4
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d00e      	beq.n	800bddc <BSP_TS_GetState+0xec>
      {
        Raw_y[index] = FT_6206_MAX_WIDTH_HEIGHT - 1 - Raw_y[index];
 800bdbe:	69fb      	ldr	r3, [r7, #28]
 800bdc0:	005b      	lsls	r3, r3, #1
 800bdc2:	3320      	adds	r3, #32
 800bdc4:	443b      	add	r3, r7
 800bdc6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800bdca:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800bdce:	b29a      	uxth	r2, r3
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	005b      	lsls	r3, r3, #1
 800bdd4:	3320      	adds	r3, #32
 800bdd6:	443b      	add	r3, r7
 800bdd8:	f823 2c14 	strh.w	r2, [r3, #-20]
      }

      xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	005b      	lsls	r3, r3, #1
 800bde0:	3320      	adds	r3, #32
 800bde2:	443b      	add	r3, r7
 800bde4:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800bde8:	4619      	mov	r1, r3
 800bdea:	4a48      	ldr	r2, [pc, #288]	; (800bf0c <BSP_TS_GetState+0x21c>)
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdf2:	4299      	cmp	r1, r3
 800bdf4:	d90d      	bls.n	800be12 <BSP_TS_GetState+0x122>
 800bdf6:	69fb      	ldr	r3, [r7, #28]
 800bdf8:	005b      	lsls	r3, r3, #1
 800bdfa:	3320      	adds	r3, #32
 800bdfc:	443b      	add	r3, r7
 800bdfe:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800be02:	4942      	ldr	r1, [pc, #264]	; (800bf0c <BSP_TS_GetState+0x21c>)
 800be04:	69fb      	ldr	r3, [r7, #28]
 800be06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	1ad3      	subs	r3, r2, r3
 800be0e:	b29b      	uxth	r3, r3
 800be10:	e00c      	b.n	800be2c <BSP_TS_GetState+0x13c>
 800be12:	4a3e      	ldr	r2, [pc, #248]	; (800bf0c <BSP_TS_GetState+0x21c>)
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be1a:	b29a      	uxth	r2, r3
 800be1c:	69fb      	ldr	r3, [r7, #28]
 800be1e:	005b      	lsls	r3, r3, #1
 800be20:	3320      	adds	r3, #32
 800be22:	443b      	add	r3, r7
 800be24:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800be28:	1ad3      	subs	r3, r2, r3
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	005b      	lsls	r3, r3, #1
 800be32:	3320      	adds	r3, #32
 800be34:	443b      	add	r3, r7
 800be36:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800be3a:	4619      	mov	r1, r3
 800be3c:	4a34      	ldr	r2, [pc, #208]	; (800bf10 <BSP_TS_GetState+0x220>)
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be44:	4299      	cmp	r1, r3
 800be46:	d90d      	bls.n	800be64 <BSP_TS_GetState+0x174>
 800be48:	69fb      	ldr	r3, [r7, #28]
 800be4a:	005b      	lsls	r3, r3, #1
 800be4c:	3320      	adds	r3, #32
 800be4e:	443b      	add	r3, r7
 800be50:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800be54:	492e      	ldr	r1, [pc, #184]	; (800bf10 <BSP_TS_GetState+0x220>)
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	1ad3      	subs	r3, r2, r3
 800be60:	b29b      	uxth	r3, r3
 800be62:	e00c      	b.n	800be7e <BSP_TS_GetState+0x18e>
 800be64:	4a2a      	ldr	r2, [pc, #168]	; (800bf10 <BSP_TS_GetState+0x220>)
 800be66:	69fb      	ldr	r3, [r7, #28]
 800be68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be6c:	b29a      	uxth	r2, r3
 800be6e:	69fb      	ldr	r3, [r7, #28]
 800be70:	005b      	lsls	r3, r3, #1
 800be72:	3320      	adds	r3, #32
 800be74:	443b      	add	r3, r7
 800be76:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800be7a:	1ad3      	subs	r3, r2, r3
 800be7c:	b29b      	uxth	r3, r3
 800be7e:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 800be80:	8afa      	ldrh	r2, [r7, #22]
 800be82:	8abb      	ldrh	r3, [r7, #20]
 800be84:	4413      	add	r3, r2
 800be86:	2b05      	cmp	r3, #5
 800be88:	dd15      	ble.n	800beb6 <BSP_TS_GetState+0x1c6>
      {
        _x[index] = Raw_x[index];
 800be8a:	69fb      	ldr	r3, [r7, #28]
 800be8c:	005b      	lsls	r3, r3, #1
 800be8e:	3320      	adds	r3, #32
 800be90:	443b      	add	r3, r7
 800be92:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800be96:	4619      	mov	r1, r3
 800be98:	4a1c      	ldr	r2, [pc, #112]	; (800bf0c <BSP_TS_GetState+0x21c>)
 800be9a:	69fb      	ldr	r3, [r7, #28]
 800be9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 800bea0:	69fb      	ldr	r3, [r7, #28]
 800bea2:	005b      	lsls	r3, r3, #1
 800bea4:	3320      	adds	r3, #32
 800bea6:	443b      	add	r3, r7
 800bea8:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800beac:	4619      	mov	r1, r3
 800beae:	4a18      	ldr	r2, [pc, #96]	; (800bf10 <BSP_TS_GetState+0x220>)
 800beb0:	69fb      	ldr	r3, [r7, #28]
 800beb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 800beb6:	4a15      	ldr	r2, [pc, #84]	; (800bf0c <BSP_TS_GetState+0x21c>)
 800beb8:	69fb      	ldr	r3, [r7, #28]
 800beba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bebe:	b299      	uxth	r1, r3
 800bec0:	687a      	ldr	r2, [r7, #4]
 800bec2:	69fb      	ldr	r3, [r7, #28]
 800bec4:	005b      	lsls	r3, r3, #1
 800bec6:	4413      	add	r3, r2
 800bec8:	460a      	mov	r2, r1
 800beca:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 800becc:	4a10      	ldr	r2, [pc, #64]	; (800bf10 <BSP_TS_GetState+0x220>)
 800bece:	69fb      	ldr	r3, [r7, #28]
 800bed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bed4:	b299      	uxth	r1, r3
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	69fb      	ldr	r3, [r7, #28]
 800beda:	005b      	lsls	r3, r3, #1
 800bedc:	4413      	add	r3, r2
 800bede:	460a      	mov	r2, r1
 800bee0:	80da      	strh	r2, [r3, #6]
    for (index = 0; index < TS_State->touchDetected; index++)
 800bee2:	69fb      	ldr	r3, [r7, #28]
 800bee4:	3301      	adds	r3, #1
 800bee6:	61fb      	str	r3, [r7, #28]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	461a      	mov	r2, r3
 800beee:	69fb      	ldr	r3, [r7, #28]
 800bef0:	4293      	cmp	r3, r2
 800bef2:	f4ff af17 	bcc.w	800bd24 <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800bef6:	7efb      	ldrb	r3, [r7, #27]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3724      	adds	r7, #36	; 0x24
 800befc:	46bd      	mov	sp, r7
 800befe:	bd90      	pop	{r4, r7, pc}
 800bf00:	20001be0 	.word	0x20001be0
 800bf04:	20001be4 	.word	0x20001be4
 800bf08:	20000559 	.word	0x20000559
 800bf0c:	20001be8 	.word	0x20001be8
 800bf10:	20001bf0 	.word	0x20001bf0

0800bf14 <BSP_TS_INT_MspInit>:
  * @brief  Initializes the TS_INT pin MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_TS_INT_MspInit(void)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b088      	sub	sp, #32
 800bf18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_PWR_CLK_ENABLE();
 800bf1a:	4b1e      	ldr	r3, [pc, #120]	; (800bf94 <BSP_TS_INT_MspInit+0x80>)
 800bf1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf1e:	4a1d      	ldr	r2, [pc, #116]	; (800bf94 <BSP_TS_INT_MspInit+0x80>)
 800bf20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf24:	6593      	str	r3, [r2, #88]	; 0x58
 800bf26:	4b1b      	ldr	r3, [pc, #108]	; (800bf94 <BSP_TS_INT_MspInit+0x80>)
 800bf28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf2e:	60bb      	str	r3, [r7, #8]
 800bf30:	68bb      	ldr	r3, [r7, #8]
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800bf32:	4b19      	ldr	r3, [pc, #100]	; (800bf98 <BSP_TS_INT_MspInit+0x84>)
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	4a18      	ldr	r2, [pc, #96]	; (800bf98 <BSP_TS_INT_MspInit+0x84>)
 800bf38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bf3c:	6053      	str	r3, [r2, #4]

  TS_INT_GPIO_CLK_ENABLE();
 800bf3e:	4b15      	ldr	r3, [pc, #84]	; (800bf94 <BSP_TS_INT_MspInit+0x80>)
 800bf40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf42:	4a14      	ldr	r2, [pc, #80]	; (800bf94 <BSP_TS_INT_MspInit+0x80>)
 800bf44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf48:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bf4a:	4b12      	ldr	r3, [pc, #72]	; (800bf94 <BSP_TS_INT_MspInit+0x80>)
 800bf4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf52:	607b      	str	r3, [r7, #4]
 800bf54:	687b      	ldr	r3, [r7, #4]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 800bf56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bf5a:	60fb      	str	r3, [r7, #12]

  /* Configure Interrupt mode for TS_INT pin falling edge : when a new touch is available */
  /* TS_INT pin is active on low level on new touch available */
  gpio_init_structure.Pin = TS_INT_PIN;
 800bf5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bf60:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800bf62:	2301      	movs	r3, #1
 800bf64:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800bf66:	2302      	movs	r3, #2
 800bf68:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 800bf6a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800bf6e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 800bf70:	f107 030c 	add.w	r3, r7, #12
 800bf74:	4619      	mov	r1, r3
 800bf76:	4809      	ldr	r0, [pc, #36]	; (800bf9c <BSP_TS_INT_MspInit+0x88>)
 800bf78:	f001 fe3c 	bl	800dbf4 <HAL_GPIO_Init>

  /* Enable and set the TS_INT EXTI Interrupt to an intermediate priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x08, 0x00);
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	2108      	movs	r1, #8
 800bf80:	2028      	movs	r0, #40	; 0x28
 800bf82:	f001 fc5a 	bl	800d83a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 800bf86:	2028      	movs	r0, #40	; 0x28
 800bf88:	f001 fc73 	bl	800d872 <HAL_NVIC_EnableIRQ>
}
 800bf8c:	bf00      	nop
 800bf8e:	3720      	adds	r7, #32
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}
 800bf94:	40021000 	.word	0x40021000
 800bf98:	40007000 	.word	0x40007000
 800bf9c:	48001800 	.word	0x48001800

0800bfa0 <BSP_TS_INT_MspDeInit>:
  * @brief  Initializes the TS_INT pin MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_TS_INT_MspDeInit(void)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b088      	sub	sp, #32
 800bfa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_PWR_CLK_ENABLE();
 800bfa6:	4b1a      	ldr	r3, [pc, #104]	; (800c010 <BSP_TS_INT_MspDeInit+0x70>)
 800bfa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfaa:	4a19      	ldr	r2, [pc, #100]	; (800c010 <BSP_TS_INT_MspDeInit+0x70>)
 800bfac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bfb0:	6593      	str	r3, [r2, #88]	; 0x58
 800bfb2:	4b17      	ldr	r3, [pc, #92]	; (800c010 <BSP_TS_INT_MspDeInit+0x70>)
 800bfb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bfba:	60bb      	str	r3, [r7, #8]
 800bfbc:	68bb      	ldr	r3, [r7, #8]
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800bfbe:	4b15      	ldr	r3, [pc, #84]	; (800c014 <BSP_TS_INT_MspDeInit+0x74>)
 800bfc0:	685b      	ldr	r3, [r3, #4]
 800bfc2:	4a14      	ldr	r2, [pc, #80]	; (800c014 <BSP_TS_INT_MspDeInit+0x74>)
 800bfc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bfc8:	6053      	str	r3, [r2, #4]

  TS_INT_GPIO_CLK_ENABLE();
 800bfca:	4b11      	ldr	r3, [pc, #68]	; (800c010 <BSP_TS_INT_MspDeInit+0x70>)
 800bfcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfce:	4a10      	ldr	r2, [pc, #64]	; (800c010 <BSP_TS_INT_MspDeInit+0x70>)
 800bfd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bfd6:	4b0e      	ldr	r3, [pc, #56]	; (800c010 <BSP_TS_INT_MspDeInit+0x70>)
 800bfd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfde:	607b      	str	r3, [r7, #4]
 800bfe0:	687b      	ldr	r3, [r7, #4]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 800bfe2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bfe6:	60fb      	str	r3, [r7, #12]

  gpio_init_structure.Pin = GPIO_PIN_All;
 800bfe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bfec:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_ANALOG;
 800bfee:	2303      	movs	r3, #3
 800bff0:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800bff2:	2300      	movs	r3, #0
 800bff4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 800bff6:	f107 030c 	add.w	r3, r7, #12
 800bffa:	4619      	mov	r1, r3
 800bffc:	4806      	ldr	r0, [pc, #24]	; (800c018 <BSP_TS_INT_MspDeInit+0x78>)
 800bffe:	f001 fdf9 	bl	800dbf4 <HAL_GPIO_Init>

  HAL_NVIC_DisableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 800c002:	2028      	movs	r0, #40	; 0x28
 800c004:	f001 fc43 	bl	800d88e <HAL_NVIC_DisableIRQ>
}
 800c008:	bf00      	nop
 800c00a:	3720      	adds	r7, #32
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	40021000 	.word	0x40021000
 800c014:	40007000 	.word	0x40007000
 800c018:	48001800 	.word	0x48001800

0800c01c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b082      	sub	sp, #8
 800c020:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800c022:	2300      	movs	r3, #0
 800c024:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c026:	2003      	movs	r0, #3
 800c028:	f001 fbfc 	bl	800d824 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800c02c:	2000      	movs	r0, #0
 800c02e:	f000 f80d 	bl	800c04c <HAL_InitTick>
 800c032:	4603      	mov	r3, r0
 800c034:	2b00      	cmp	r3, #0
 800c036:	d002      	beq.n	800c03e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800c038:	2301      	movs	r3, #1
 800c03a:	71fb      	strb	r3, [r7, #7]
 800c03c:	e001      	b.n	800c042 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800c03e:	f7f7 fa65 	bl	800350c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800c042:	79fb      	ldrb	r3, [r7, #7]
}
 800c044:	4618      	mov	r0, r3
 800c046:	3708      	adds	r7, #8
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800c054:	2300      	movs	r3, #0
 800c056:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800c058:	4b17      	ldr	r3, [pc, #92]	; (800c0b8 <HAL_InitTick+0x6c>)
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d023      	beq.n	800c0a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800c060:	4b16      	ldr	r3, [pc, #88]	; (800c0bc <HAL_InitTick+0x70>)
 800c062:	681a      	ldr	r2, [r3, #0]
 800c064:	4b14      	ldr	r3, [pc, #80]	; (800c0b8 <HAL_InitTick+0x6c>)
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	4619      	mov	r1, r3
 800c06a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c06e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c072:	fbb2 f3f3 	udiv	r3, r2, r3
 800c076:	4618      	mov	r0, r3
 800c078:	f001 fc17 	bl	800d8aa <HAL_SYSTICK_Config>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d10f      	bne.n	800c0a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2b0f      	cmp	r3, #15
 800c086:	d809      	bhi.n	800c09c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c088:	2200      	movs	r2, #0
 800c08a:	6879      	ldr	r1, [r7, #4]
 800c08c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c090:	f001 fbd3 	bl	800d83a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800c094:	4a0a      	ldr	r2, [pc, #40]	; (800c0c0 <HAL_InitTick+0x74>)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6013      	str	r3, [r2, #0]
 800c09a:	e007      	b.n	800c0ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800c09c:	2301      	movs	r3, #1
 800c09e:	73fb      	strb	r3, [r7, #15]
 800c0a0:	e004      	b.n	800c0ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	73fb      	strb	r3, [r7, #15]
 800c0a6:	e001      	b.n	800c0ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800c0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3710      	adds	r7, #16
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	20000560 	.word	0x20000560
 800c0bc:	200001a0 	.word	0x200001a0
 800c0c0:	2000055c 	.word	0x2000055c

0800c0c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800c0c8:	4b06      	ldr	r3, [pc, #24]	; (800c0e4 <HAL_IncTick+0x20>)
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	4b06      	ldr	r3, [pc, #24]	; (800c0e8 <HAL_IncTick+0x24>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4413      	add	r3, r2
 800c0d4:	4a04      	ldr	r2, [pc, #16]	; (800c0e8 <HAL_IncTick+0x24>)
 800c0d6:	6013      	str	r3, [r2, #0]
}
 800c0d8:	bf00      	nop
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr
 800c0e2:	bf00      	nop
 800c0e4:	20000560 	.word	0x20000560
 800c0e8:	20001bf8 	.word	0x20001bf8

0800c0ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	af00      	add	r7, sp, #0
  return uwTick;
 800c0f0:	4b03      	ldr	r3, [pc, #12]	; (800c100 <HAL_GetTick+0x14>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr
 800c0fe:	bf00      	nop
 800c100:	20001bf8 	.word	0x20001bf8

0800c104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c10c:	f7ff ffee 	bl	800c0ec <HAL_GetTick>
 800c110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c11c:	d005      	beq.n	800c12a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800c11e:	4b0a      	ldr	r3, [pc, #40]	; (800c148 <HAL_Delay+0x44>)
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	461a      	mov	r2, r3
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	4413      	add	r3, r2
 800c128:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800c12a:	bf00      	nop
 800c12c:	f7ff ffde 	bl	800c0ec <HAL_GetTick>
 800c130:	4602      	mov	r2, r0
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	1ad3      	subs	r3, r2, r3
 800c136:	68fa      	ldr	r2, [r7, #12]
 800c138:	429a      	cmp	r2, r3
 800c13a:	d8f7      	bhi.n	800c12c <HAL_Delay+0x28>
  {
  }
}
 800c13c:	bf00      	nop
 800c13e:	bf00      	nop
 800c140:	3710      	adds	r7, #16
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
 800c146:	bf00      	nop
 800c148:	20000560 	.word	0x20000560

0800c14c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800c14c:	b480      	push	{r7}
 800c14e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800c150:	4b05      	ldr	r3, [pc, #20]	; (800c168 <HAL_SuspendTick+0x1c>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4a04      	ldr	r2, [pc, #16]	; (800c168 <HAL_SuspendTick+0x1c>)
 800c156:	f023 0302 	bic.w	r3, r3, #2
 800c15a:	6013      	str	r3, [r2, #0]
}
 800c15c:	bf00      	nop
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr
 800c166:	bf00      	nop
 800c168:	e000e010 	.word	0xe000e010

0800c16c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800c16c:	b480      	push	{r7}
 800c16e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800c170:	4b05      	ldr	r3, [pc, #20]	; (800c188 <HAL_ResumeTick+0x1c>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	4a04      	ldr	r2, [pc, #16]	; (800c188 <HAL_ResumeTick+0x1c>)
 800c176:	f043 0302 	orr.w	r3, r3, #2
 800c17a:	6013      	str	r3, [r2, #0]
}
 800c17c:	bf00      	nop
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr
 800c186:	bf00      	nop
 800c188:	e000e010 	.word	0xe000e010

0800c18c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	689b      	ldr	r3, [r3, #8]
 800c19a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	431a      	orrs	r2, r3
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	609a      	str	r2, [r3, #8]
}
 800c1a6:	bf00      	nop
 800c1a8:	370c      	adds	r7, #12
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr

0800c1b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800c1b2:	b480      	push	{r7}
 800c1b4:	b083      	sub	sp, #12
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
 800c1ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	689b      	ldr	r3, [r3, #8]
 800c1c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	431a      	orrs	r2, r3
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	609a      	str	r2, [r3, #8]
}
 800c1cc:	bf00      	nop
 800c1ce:	370c      	adds	r7, #12
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr

0800c1d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	370c      	adds	r7, #12
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr

0800c1f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b087      	sub	sp, #28
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	60b9      	str	r1, [r7, #8]
 800c1fe:	607a      	str	r2, [r7, #4]
 800c200:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	3360      	adds	r3, #96	; 0x60
 800c206:	461a      	mov	r2, r3
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	4413      	add	r3, r2
 800c20e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	681a      	ldr	r2, [r3, #0]
 800c214:	4b08      	ldr	r3, [pc, #32]	; (800c238 <LL_ADC_SetOffset+0x44>)
 800c216:	4013      	ands	r3, r2
 800c218:	687a      	ldr	r2, [r7, #4]
 800c21a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800c21e:	683a      	ldr	r2, [r7, #0]
 800c220:	430a      	orrs	r2, r1
 800c222:	4313      	orrs	r3, r2
 800c224:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800c22c:	bf00      	nop
 800c22e:	371c      	adds	r7, #28
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr
 800c238:	03fff000 	.word	0x03fff000

0800c23c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800c23c:	b480      	push	{r7}
 800c23e:	b085      	sub	sp, #20
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	3360      	adds	r3, #96	; 0x60
 800c24a:	461a      	mov	r2, r3
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	4413      	add	r3, r2
 800c252:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3714      	adds	r7, #20
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr

0800c268 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800c268:	b480      	push	{r7}
 800c26a:	b087      	sub	sp, #28
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	60b9      	str	r1, [r7, #8]
 800c272:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	3360      	adds	r3, #96	; 0x60
 800c278:	461a      	mov	r2, r3
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	4413      	add	r3, r2
 800c280:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	431a      	orrs	r2, r3
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800c292:	bf00      	nop
 800c294:	371c      	adds	r7, #28
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr

0800c29e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800c29e:	b480      	push	{r7}
 800c2a0:	b083      	sub	sp, #12
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	6078      	str	r0, [r7, #4]
 800c2a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	695b      	ldr	r3, [r3, #20]
 800c2ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	431a      	orrs	r2, r3
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	615a      	str	r2, [r3, #20]
}
 800c2b8:	bf00      	nop
 800c2ba:	370c      	adds	r7, #12
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr

0800c2c4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b083      	sub	sp, #12
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d101      	bne.n	800c2dc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800c2d8:	2301      	movs	r3, #1
 800c2da:	e000      	b.n	800c2de <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800c2dc:	2300      	movs	r3, #0
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	370c      	adds	r7, #12
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr

0800c2ea <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800c2ea:	b480      	push	{r7}
 800c2ec:	b087      	sub	sp, #28
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	60f8      	str	r0, [r7, #12]
 800c2f2:	60b9      	str	r1, [r7, #8]
 800c2f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	3330      	adds	r3, #48	; 0x30
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	0a1b      	lsrs	r3, r3, #8
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	f003 030c 	and.w	r3, r3, #12
 800c306:	4413      	add	r3, r2
 800c308:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	f003 031f 	and.w	r3, r3, #31
 800c314:	211f      	movs	r1, #31
 800c316:	fa01 f303 	lsl.w	r3, r1, r3
 800c31a:	43db      	mvns	r3, r3
 800c31c:	401a      	ands	r2, r3
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	0e9b      	lsrs	r3, r3, #26
 800c322:	f003 011f 	and.w	r1, r3, #31
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	f003 031f 	and.w	r3, r3, #31
 800c32c:	fa01 f303 	lsl.w	r3, r1, r3
 800c330:	431a      	orrs	r2, r3
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800c336:	bf00      	nop
 800c338:	371c      	adds	r7, #28
 800c33a:	46bd      	mov	sp, r7
 800c33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c340:	4770      	bx	lr

0800c342 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800c342:	b480      	push	{r7}
 800c344:	b087      	sub	sp, #28
 800c346:	af00      	add	r7, sp, #0
 800c348:	60f8      	str	r0, [r7, #12]
 800c34a:	60b9      	str	r1, [r7, #8]
 800c34c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	3314      	adds	r3, #20
 800c352:	461a      	mov	r2, r3
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	0e5b      	lsrs	r3, r3, #25
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	f003 0304 	and.w	r3, r3, #4
 800c35e:	4413      	add	r3, r2
 800c360:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	681a      	ldr	r2, [r3, #0]
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	0d1b      	lsrs	r3, r3, #20
 800c36a:	f003 031f 	and.w	r3, r3, #31
 800c36e:	2107      	movs	r1, #7
 800c370:	fa01 f303 	lsl.w	r3, r1, r3
 800c374:	43db      	mvns	r3, r3
 800c376:	401a      	ands	r2, r3
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	0d1b      	lsrs	r3, r3, #20
 800c37c:	f003 031f 	and.w	r3, r3, #31
 800c380:	6879      	ldr	r1, [r7, #4]
 800c382:	fa01 f303 	lsl.w	r3, r1, r3
 800c386:	431a      	orrs	r2, r3
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800c38c:	bf00      	nop
 800c38e:	371c      	adds	r7, #28
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr

0800c398 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800c398:	b480      	push	{r7}
 800c39a:	b085      	sub	sp, #20
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c3b0:	43db      	mvns	r3, r3
 800c3b2:	401a      	ands	r2, r3
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f003 0318 	and.w	r3, r3, #24
 800c3ba:	4908      	ldr	r1, [pc, #32]	; (800c3dc <LL_ADC_SetChannelSingleDiff+0x44>)
 800c3bc:	40d9      	lsrs	r1, r3
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	400b      	ands	r3, r1
 800c3c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c3c6:	431a      	orrs	r2, r3
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800c3ce:	bf00      	nop
 800c3d0:	3714      	adds	r7, #20
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d8:	4770      	bx	lr
 800c3da:	bf00      	nop
 800c3dc:	0007ffff 	.word	0x0007ffff

0800c3e0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b083      	sub	sp, #12
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	f003 031f 	and.w	r3, r3, #31
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	370c      	adds	r7, #12
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr

0800c3fc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b083      	sub	sp, #12
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	370c      	adds	r7, #12
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr

0800c418 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800c418:	b480      	push	{r7}
 800c41a:	b083      	sub	sp, #12
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	689b      	ldr	r3, [r3, #8]
 800c424:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800c428:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	6093      	str	r3, [r2, #8]
}
 800c430:	bf00      	nop
 800c432:	370c      	adds	r7, #12
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr

0800c43c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b083      	sub	sp, #12
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	689b      	ldr	r3, [r3, #8]
 800c448:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c44c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c450:	d101      	bne.n	800c456 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800c452:	2301      	movs	r3, #1
 800c454:	e000      	b.n	800c458 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800c456:	2300      	movs	r3, #0
}
 800c458:	4618      	mov	r0, r3
 800c45a:	370c      	adds	r7, #12
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800c464:	b480      	push	{r7}
 800c466:	b083      	sub	sp, #12
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800c474:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c478:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800c480:	bf00      	nop
 800c482:	370c      	adds	r7, #12
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c49c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4a0:	d101      	bne.n	800c4a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	e000      	b.n	800c4a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800c4a6:	2300      	movs	r3, #0
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	370c      	adds	r7, #12
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	689b      	ldr	r3, [r3, #8]
 800c4c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c4c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c4c8:	f043 0201 	orr.w	r2, r3, #1
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800c4d0:	bf00      	nop
 800c4d2:	370c      	adds	r7, #12
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	f003 0301 	and.w	r3, r3, #1
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	d101      	bne.n	800c4f4 <LL_ADC_IsEnabled+0x18>
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	e000      	b.n	800c4f6 <LL_ADC_IsEnabled+0x1a>
 800c4f4:	2300      	movs	r3, #0
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	370c      	adds	r7, #12
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr

0800c502 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800c502:	b480      	push	{r7}
 800c504:	b083      	sub	sp, #12
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	689b      	ldr	r3, [r3, #8]
 800c50e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c512:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c516:	f043 0204 	orr.w	r2, r3, #4
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800c51e:	bf00      	nop
 800c520:	370c      	adds	r7, #12
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr

0800c52a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800c52a:	b480      	push	{r7}
 800c52c:	b083      	sub	sp, #12
 800c52e:	af00      	add	r7, sp, #0
 800c530:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	689b      	ldr	r3, [r3, #8]
 800c536:	f003 0304 	and.w	r3, r3, #4
 800c53a:	2b04      	cmp	r3, #4
 800c53c:	d101      	bne.n	800c542 <LL_ADC_REG_IsConversionOngoing+0x18>
 800c53e:	2301      	movs	r3, #1
 800c540:	e000      	b.n	800c544 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800c542:	2300      	movs	r3, #0
}
 800c544:	4618      	mov	r0, r3
 800c546:	370c      	adds	r7, #12
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr

0800c550 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800c550:	b480      	push	{r7}
 800c552:	b083      	sub	sp, #12
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	689b      	ldr	r3, [r3, #8]
 800c55c:	f003 0308 	and.w	r3, r3, #8
 800c560:	2b08      	cmp	r3, #8
 800c562:	d101      	bne.n	800c568 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800c564:	2301      	movs	r3, #1
 800c566:	e000      	b.n	800c56a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800c568:	2300      	movs	r3, #0
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	370c      	adds	r7, #12
 800c56e:	46bd      	mov	sp, r7
 800c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c574:	4770      	bx	lr
	...

0800c578 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800c578:	b590      	push	{r4, r7, lr}
 800c57a:	b089      	sub	sp, #36	; 0x24
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c580:	2300      	movs	r3, #0
 800c582:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800c584:	2300      	movs	r3, #0
 800c586:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d101      	bne.n	800c592 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800c58e:	2301      	movs	r3, #1
 800c590:	e139      	b.n	800c806 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	691b      	ldr	r3, [r3, #16]
 800c596:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d109      	bne.n	800c5b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f7f4 fd5b 	bl	800105c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f7ff ff3f 	bl	800c43c <LL_ADC_IsDeepPowerDownEnabled>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d004      	beq.n	800c5ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7ff ff25 	bl	800c418 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7ff ff5a 	bl	800c48c <LL_ADC_IsInternalRegulatorEnabled>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d115      	bne.n	800c60a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7ff ff3e 	bl	800c464 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c5e8:	4b89      	ldr	r3, [pc, #548]	; (800c810 <HAL_ADC_Init+0x298>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	099b      	lsrs	r3, r3, #6
 800c5ee:	4a89      	ldr	r2, [pc, #548]	; (800c814 <HAL_ADC_Init+0x29c>)
 800c5f0:	fba2 2303 	umull	r2, r3, r2, r3
 800c5f4:	099b      	lsrs	r3, r3, #6
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	005b      	lsls	r3, r3, #1
 800c5fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800c5fc:	e002      	b.n	800c604 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	3b01      	subs	r3, #1
 800c602:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d1f9      	bne.n	800c5fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4618      	mov	r0, r3
 800c610:	f7ff ff3c 	bl	800c48c <LL_ADC_IsInternalRegulatorEnabled>
 800c614:	4603      	mov	r3, r0
 800c616:	2b00      	cmp	r3, #0
 800c618:	d10d      	bne.n	800c636 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c61e:	f043 0210 	orr.w	r2, r3, #16
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c62a:	f043 0201 	orr.w	r2, r3, #1
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800c632:	2301      	movs	r3, #1
 800c634:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7ff ff75 	bl	800c52a <LL_ADC_REG_IsConversionOngoing>
 800c640:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c646:	f003 0310 	and.w	r3, r3, #16
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	f040 80d2 	bne.w	800c7f4 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	2b00      	cmp	r3, #0
 800c654:	f040 80ce 	bne.w	800c7f4 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c65c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800c660:	f043 0202 	orr.w	r2, r3, #2
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	4618      	mov	r0, r3
 800c66e:	f7ff ff35 	bl	800c4dc <LL_ADC_IsEnabled>
 800c672:	4603      	mov	r3, r0
 800c674:	2b00      	cmp	r3, #0
 800c676:	d115      	bne.n	800c6a4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c678:	4867      	ldr	r0, [pc, #412]	; (800c818 <HAL_ADC_Init+0x2a0>)
 800c67a:	f7ff ff2f 	bl	800c4dc <LL_ADC_IsEnabled>
 800c67e:	4604      	mov	r4, r0
 800c680:	4866      	ldr	r0, [pc, #408]	; (800c81c <HAL_ADC_Init+0x2a4>)
 800c682:	f7ff ff2b 	bl	800c4dc <LL_ADC_IsEnabled>
 800c686:	4603      	mov	r3, r0
 800c688:	431c      	orrs	r4, r3
 800c68a:	4865      	ldr	r0, [pc, #404]	; (800c820 <HAL_ADC_Init+0x2a8>)
 800c68c:	f7ff ff26 	bl	800c4dc <LL_ADC_IsEnabled>
 800c690:	4603      	mov	r3, r0
 800c692:	4323      	orrs	r3, r4
 800c694:	2b00      	cmp	r3, #0
 800c696:	d105      	bne.n	800c6a4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	4619      	mov	r1, r3
 800c69e:	4861      	ldr	r0, [pc, #388]	; (800c824 <HAL_ADC_Init+0x2ac>)
 800c6a0:	f7ff fd74 	bl	800c18c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	7e5b      	ldrb	r3, [r3, #25]
 800c6a8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800c6ae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800c6b4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800c6ba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c6c2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800c6c4:	4313      	orrs	r3, r2
 800c6c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d106      	bne.n	800c6e0 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d6:	3b01      	subs	r3, #1
 800c6d8:	045b      	lsls	r3, r3, #17
 800c6da:	69ba      	ldr	r2, [r7, #24]
 800c6dc:	4313      	orrs	r3, r2
 800c6de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d009      	beq.n	800c6fc <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ec:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6f4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800c6f6:	69ba      	ldr	r2, [r7, #24]
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	68da      	ldr	r2, [r3, #12]
 800c702:	4b49      	ldr	r3, [pc, #292]	; (800c828 <HAL_ADC_Init+0x2b0>)
 800c704:	4013      	ands	r3, r2
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	6812      	ldr	r2, [r2, #0]
 800c70a:	69b9      	ldr	r1, [r7, #24]
 800c70c:	430b      	orrs	r3, r1
 800c70e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4618      	mov	r0, r3
 800c716:	f7ff ff08 	bl	800c52a <LL_ADC_REG_IsConversionOngoing>
 800c71a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4618      	mov	r0, r3
 800c722:	f7ff ff15 	bl	800c550 <LL_ADC_INJ_IsConversionOngoing>
 800c726:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d140      	bne.n	800c7b0 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d13d      	bne.n	800c7b0 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	7e1b      	ldrb	r3, [r3, #24]
 800c73c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800c73e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c746:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800c748:	4313      	orrs	r3, r2
 800c74a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c756:	f023 0306 	bic.w	r3, r3, #6
 800c75a:	687a      	ldr	r2, [r7, #4]
 800c75c:	6812      	ldr	r2, [r2, #0]
 800c75e:	69b9      	ldr	r1, [r7, #24]
 800c760:	430b      	orrs	r3, r1
 800c762:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	d118      	bne.n	800c7a0 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	691b      	ldr	r3, [r3, #16]
 800c774:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c778:	f023 0304 	bic.w	r3, r3, #4
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c784:	4311      	orrs	r1, r2
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c78a:	4311      	orrs	r1, r2
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c790:	430a      	orrs	r2, r1
 800c792:	431a      	orrs	r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f042 0201 	orr.w	r2, r2, #1
 800c79c:	611a      	str	r2, [r3, #16]
 800c79e:	e007      	b.n	800c7b0 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	691a      	ldr	r2, [r3, #16]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f022 0201 	bic.w	r2, r2, #1
 800c7ae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	691b      	ldr	r3, [r3, #16]
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d10c      	bne.n	800c7d2 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7be:	f023 010f 	bic.w	r1, r3, #15
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	69db      	ldr	r3, [r3, #28]
 800c7c6:	1e5a      	subs	r2, r3, #1
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	430a      	orrs	r2, r1
 800c7ce:	631a      	str	r2, [r3, #48]	; 0x30
 800c7d0:	e007      	b.n	800c7e2 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f022 020f 	bic.w	r2, r2, #15
 800c7e0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7e6:	f023 0303 	bic.w	r3, r3, #3
 800c7ea:	f043 0201 	orr.w	r2, r3, #1
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	659a      	str	r2, [r3, #88]	; 0x58
 800c7f2:	e007      	b.n	800c804 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7f8:	f043 0210 	orr.w	r2, r3, #16
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800c800:	2301      	movs	r3, #1
 800c802:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800c804:	7ffb      	ldrb	r3, [r7, #31]
}
 800c806:	4618      	mov	r0, r3
 800c808:	3724      	adds	r7, #36	; 0x24
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd90      	pop	{r4, r7, pc}
 800c80e:	bf00      	nop
 800c810:	200001a0 	.word	0x200001a0
 800c814:	053e2d63 	.word	0x053e2d63
 800c818:	50040000 	.word	0x50040000
 800c81c:	50040100 	.word	0x50040100
 800c820:	50040200 	.word	0x50040200
 800c824:	50040300 	.word	0x50040300
 800c828:	fff0c007 	.word	0xfff0c007

0800c82c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b086      	sub	sp, #24
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c834:	4857      	ldr	r0, [pc, #348]	; (800c994 <HAL_ADC_Start+0x168>)
 800c836:	f7ff fdd3 	bl	800c3e0 <LL_ADC_GetMultimode>
 800c83a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4618      	mov	r0, r3
 800c842:	f7ff fe72 	bl	800c52a <LL_ADC_REG_IsConversionOngoing>
 800c846:	4603      	mov	r3, r0
 800c848:	2b00      	cmp	r3, #0
 800c84a:	f040 809c 	bne.w	800c986 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c854:	2b01      	cmp	r3, #1
 800c856:	d101      	bne.n	800c85c <HAL_ADC_Start+0x30>
 800c858:	2302      	movs	r3, #2
 800c85a:	e097      	b.n	800c98c <HAL_ADC_Start+0x160>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2201      	movs	r2, #1
 800c860:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 fd8d 	bl	800d384 <ADC_Enable>
 800c86a:	4603      	mov	r3, r0
 800c86c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800c86e:	7dfb      	ldrb	r3, [r7, #23]
 800c870:	2b00      	cmp	r3, #0
 800c872:	f040 8083 	bne.w	800c97c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c87a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c87e:	f023 0301 	bic.w	r3, r3, #1
 800c882:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	4a42      	ldr	r2, [pc, #264]	; (800c998 <HAL_ADC_Start+0x16c>)
 800c890:	4293      	cmp	r3, r2
 800c892:	d002      	beq.n	800c89a <HAL_ADC_Start+0x6e>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	e000      	b.n	800c89c <HAL_ADC_Start+0x70>
 800c89a:	4b40      	ldr	r3, [pc, #256]	; (800c99c <HAL_ADC_Start+0x170>)
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	6812      	ldr	r2, [r2, #0]
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d002      	beq.n	800c8aa <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d105      	bne.n	800c8b6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c8be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8c2:	d106      	bne.n	800c8d2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8c8:	f023 0206 	bic.w	r2, r3, #6
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	65da      	str	r2, [r3, #92]	; 0x5c
 800c8d0:	e002      	b.n	800c8d8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	221c      	movs	r2, #28
 800c8de:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4a2a      	ldr	r2, [pc, #168]	; (800c998 <HAL_ADC_Start+0x16c>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d002      	beq.n	800c8f8 <HAL_ADC_Start+0xcc>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	e000      	b.n	800c8fa <HAL_ADC_Start+0xce>
 800c8f8:	4b28      	ldr	r3, [pc, #160]	; (800c99c <HAL_ADC_Start+0x170>)
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	6812      	ldr	r2, [r2, #0]
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d008      	beq.n	800c914 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d005      	beq.n	800c914 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	2b05      	cmp	r3, #5
 800c90c:	d002      	beq.n	800c914 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	2b09      	cmp	r3, #9
 800c912:	d114      	bne.n	800c93e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	68db      	ldr	r3, [r3, #12]
 800c91a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d007      	beq.n	800c932 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c926:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c92a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	4618      	mov	r0, r3
 800c938:	f7ff fde3 	bl	800c502 <LL_ADC_REG_StartConversion>
 800c93c:	e025      	b.n	800c98a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c942:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	4a12      	ldr	r2, [pc, #72]	; (800c998 <HAL_ADC_Start+0x16c>)
 800c950:	4293      	cmp	r3, r2
 800c952:	d002      	beq.n	800c95a <HAL_ADC_Start+0x12e>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	e000      	b.n	800c95c <HAL_ADC_Start+0x130>
 800c95a:	4b10      	ldr	r3, [pc, #64]	; (800c99c <HAL_ADC_Start+0x170>)
 800c95c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	68db      	ldr	r3, [r3, #12]
 800c962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c966:	2b00      	cmp	r3, #0
 800c968:	d00f      	beq.n	800c98a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c96e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c972:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	659a      	str	r2, [r3, #88]	; 0x58
 800c97a:	e006      	b.n	800c98a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2200      	movs	r2, #0
 800c980:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800c984:	e001      	b.n	800c98a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800c986:	2302      	movs	r3, #2
 800c988:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800c98a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3718      	adds	r7, #24
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}
 800c994:	50040300 	.word	0x50040300
 800c998:	50040100 	.word	0x50040100
 800c99c:	50040000 	.word	0x50040000

0800c9a0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b088      	sub	sp, #32
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c9aa:	4866      	ldr	r0, [pc, #408]	; (800cb44 <HAL_ADC_PollForConversion+0x1a4>)
 800c9ac:	f7ff fd18 	bl	800c3e0 <LL_ADC_GetMultimode>
 800c9b0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	695b      	ldr	r3, [r3, #20]
 800c9b6:	2b08      	cmp	r3, #8
 800c9b8:	d102      	bne.n	800c9c0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800c9ba:	2308      	movs	r3, #8
 800c9bc:	61fb      	str	r3, [r7, #28]
 800c9be:	e02a      	b.n	800ca16 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d005      	beq.n	800c9d2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	2b05      	cmp	r3, #5
 800c9ca:	d002      	beq.n	800c9d2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	2b09      	cmp	r3, #9
 800c9d0:	d111      	bne.n	800c9f6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	68db      	ldr	r3, [r3, #12]
 800c9d8:	f003 0301 	and.w	r3, r3, #1
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d007      	beq.n	800c9f0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9e4:	f043 0220 	orr.w	r2, r3, #32
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	e0a4      	b.n	800cb3a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800c9f0:	2304      	movs	r3, #4
 800c9f2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800c9f4:	e00f      	b.n	800ca16 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800c9f6:	4853      	ldr	r0, [pc, #332]	; (800cb44 <HAL_ADC_PollForConversion+0x1a4>)
 800c9f8:	f7ff fd00 	bl	800c3fc <LL_ADC_GetMultiDMATransfer>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d007      	beq.n	800ca12 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca06:	f043 0220 	orr.w	r2, r3, #32
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 800ca0e:	2301      	movs	r3, #1
 800ca10:	e093      	b.n	800cb3a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800ca12:	2304      	movs	r3, #4
 800ca14:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800ca16:	f7ff fb69 	bl	800c0ec <HAL_GetTick>
 800ca1a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800ca1c:	e021      	b.n	800ca62 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca24:	d01d      	beq.n	800ca62 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800ca26:	f7ff fb61 	bl	800c0ec <HAL_GetTick>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	1ad3      	subs	r3, r2, r3
 800ca30:	683a      	ldr	r2, [r7, #0]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d302      	bcc.n	800ca3c <HAL_ADC_PollForConversion+0x9c>
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d112      	bne.n	800ca62 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	681a      	ldr	r2, [r3, #0]
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	4013      	ands	r3, r2
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d10b      	bne.n	800ca62 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca4e:	f043 0204 	orr.w	r2, r3, #4
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800ca5e:	2303      	movs	r3, #3
 800ca60:	e06b      	b.n	800cb3a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	681a      	ldr	r2, [r3, #0]
 800ca68:	69fb      	ldr	r3, [r7, #28]
 800ca6a:	4013      	ands	r3, r2
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d0d6      	beq.n	800ca1e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7ff fc1f 	bl	800c2c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d01c      	beq.n	800cac6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	7e5b      	ldrb	r3, [r3, #25]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d118      	bne.n	800cac6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f003 0308 	and.w	r3, r3, #8
 800ca9e:	2b08      	cmp	r3, #8
 800caa0:	d111      	bne.n	800cac6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cab2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d105      	bne.n	800cac6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cabe:	f043 0201 	orr.w	r2, r3, #1
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	4a1f      	ldr	r2, [pc, #124]	; (800cb48 <HAL_ADC_PollForConversion+0x1a8>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d002      	beq.n	800cad6 <HAL_ADC_PollForConversion+0x136>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	e000      	b.n	800cad8 <HAL_ADC_PollForConversion+0x138>
 800cad6:	4b1d      	ldr	r3, [pc, #116]	; (800cb4c <HAL_ADC_PollForConversion+0x1ac>)
 800cad8:	687a      	ldr	r2, [r7, #4]
 800cada:	6812      	ldr	r2, [r2, #0]
 800cadc:	4293      	cmp	r3, r2
 800cade:	d008      	beq.n	800caf2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d005      	beq.n	800caf2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	2b05      	cmp	r3, #5
 800caea:	d002      	beq.n	800caf2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	2b09      	cmp	r3, #9
 800caf0:	d104      	bne.n	800cafc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	68db      	ldr	r3, [r3, #12]
 800caf8:	61bb      	str	r3, [r7, #24]
 800cafa:	e00c      	b.n	800cb16 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4a11      	ldr	r2, [pc, #68]	; (800cb48 <HAL_ADC_PollForConversion+0x1a8>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d002      	beq.n	800cb0c <HAL_ADC_PollForConversion+0x16c>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	e000      	b.n	800cb0e <HAL_ADC_PollForConversion+0x16e>
 800cb0c:	4b0f      	ldr	r3, [pc, #60]	; (800cb4c <HAL_ADC_PollForConversion+0x1ac>)
 800cb0e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	68db      	ldr	r3, [r3, #12]
 800cb14:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800cb16:	69fb      	ldr	r3, [r7, #28]
 800cb18:	2b08      	cmp	r3, #8
 800cb1a:	d104      	bne.n	800cb26 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	2208      	movs	r2, #8
 800cb22:	601a      	str	r2, [r3, #0]
 800cb24:	e008      	b.n	800cb38 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800cb26:	69bb      	ldr	r3, [r7, #24]
 800cb28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d103      	bne.n	800cb38 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	220c      	movs	r2, #12
 800cb36:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800cb38:	2300      	movs	r3, #0
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3720      	adds	r7, #32
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop
 800cb44:	50040300 	.word	0x50040300
 800cb48:	50040100 	.word	0x50040100
 800cb4c:	50040000 	.word	0x50040000

0800cb50 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b083      	sub	sp, #12
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	370c      	adds	r7, #12
 800cb62:	46bd      	mov	sp, r7
 800cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb68:	4770      	bx	lr
	...

0800cb6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b0b6      	sub	sp, #216	; 0xd8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800cb76:	2300      	movs	r3, #0
 800cb78:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800cb86:	2b01      	cmp	r3, #1
 800cb88:	d101      	bne.n	800cb8e <HAL_ADC_ConfigChannel+0x22>
 800cb8a:	2302      	movs	r3, #2
 800cb8c:	e3e3      	b.n	800d356 <HAL_ADC_ConfigChannel+0x7ea>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2201      	movs	r2, #1
 800cb92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7ff fcc5 	bl	800c52a <LL_ADC_REG_IsConversionOngoing>
 800cba0:	4603      	mov	r3, r0
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	f040 83c4 	bne.w	800d330 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	2b05      	cmp	r3, #5
 800cbae:	d824      	bhi.n	800cbfa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	3b02      	subs	r3, #2
 800cbb6:	2b03      	cmp	r3, #3
 800cbb8:	d81b      	bhi.n	800cbf2 <HAL_ADC_ConfigChannel+0x86>
 800cbba:	a201      	add	r2, pc, #4	; (adr r2, 800cbc0 <HAL_ADC_ConfigChannel+0x54>)
 800cbbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc0:	0800cbd1 	.word	0x0800cbd1
 800cbc4:	0800cbd9 	.word	0x0800cbd9
 800cbc8:	0800cbe1 	.word	0x0800cbe1
 800cbcc:	0800cbe9 	.word	0x0800cbe9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	220c      	movs	r2, #12
 800cbd4:	605a      	str	r2, [r3, #4]
          break;
 800cbd6:	e011      	b.n	800cbfc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	2212      	movs	r2, #18
 800cbdc:	605a      	str	r2, [r3, #4]
          break;
 800cbde:	e00d      	b.n	800cbfc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	2218      	movs	r2, #24
 800cbe4:	605a      	str	r2, [r3, #4]
          break;
 800cbe6:	e009      	b.n	800cbfc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cbee:	605a      	str	r2, [r3, #4]
          break;
 800cbf0:	e004      	b.n	800cbfc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	2206      	movs	r2, #6
 800cbf6:	605a      	str	r2, [r3, #4]
          break;
 800cbf8:	e000      	b.n	800cbfc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800cbfa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6818      	ldr	r0, [r3, #0]
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	6859      	ldr	r1, [r3, #4]
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	461a      	mov	r2, r3
 800cc0a:	f7ff fb6e 	bl	800c2ea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7ff fc89 	bl	800c52a <LL_ADC_REG_IsConversionOngoing>
 800cc18:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7ff fc95 	bl	800c550 <LL_ADC_INJ_IsConversionOngoing>
 800cc26:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800cc2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	f040 81c1 	bne.w	800cfb6 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800cc34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	f040 81bc 	bne.w	800cfb6 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	689b      	ldr	r3, [r3, #8]
 800cc42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc46:	d10f      	bne.n	800cc68 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6818      	ldr	r0, [r3, #0]
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	2200      	movs	r2, #0
 800cc52:	4619      	mov	r1, r3
 800cc54:	f7ff fb75 	bl	800c342 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7ff fb1c 	bl	800c29e <LL_ADC_SetSamplingTimeCommonConfig>
 800cc66:	e00e      	b.n	800cc86 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6818      	ldr	r0, [r3, #0]
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	6819      	ldr	r1, [r3, #0]
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	689b      	ldr	r3, [r3, #8]
 800cc74:	461a      	mov	r2, r3
 800cc76:	f7ff fb64 	bl	800c342 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2100      	movs	r1, #0
 800cc80:	4618      	mov	r0, r3
 800cc82:	f7ff fb0c 	bl	800c29e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	695a      	ldr	r2, [r3, #20]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	08db      	lsrs	r3, r3, #3
 800cc92:	f003 0303 	and.w	r3, r3, #3
 800cc96:	005b      	lsls	r3, r3, #1
 800cc98:	fa02 f303 	lsl.w	r3, r2, r3
 800cc9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	691b      	ldr	r3, [r3, #16]
 800cca4:	2b04      	cmp	r3, #4
 800cca6:	d00a      	beq.n	800ccbe <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6818      	ldr	r0, [r3, #0]
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	6919      	ldr	r1, [r3, #16]
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ccb8:	f7ff fa9c 	bl	800c1f4 <LL_ADC_SetOffset>
 800ccbc:	e17b      	b.n	800cfb6 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	2100      	movs	r1, #0
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f7ff fab9 	bl	800c23c <LL_ADC_GetOffsetChannel>
 800ccca:	4603      	mov	r3, r0
 800cccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d10a      	bne.n	800ccea <HAL_ADC_ConfigChannel+0x17e>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	2100      	movs	r1, #0
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7ff faae 	bl	800c23c <LL_ADC_GetOffsetChannel>
 800cce0:	4603      	mov	r3, r0
 800cce2:	0e9b      	lsrs	r3, r3, #26
 800cce4:	f003 021f 	and.w	r2, r3, #31
 800cce8:	e01e      	b.n	800cd28 <HAL_ADC_ConfigChannel+0x1bc>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2100      	movs	r1, #0
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7ff faa3 	bl	800c23c <LL_ADC_GetOffsetChannel>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ccfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800cd00:	fa93 f3a3 	rbit	r3, r3
 800cd04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800cd08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cd0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800cd10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d101      	bne.n	800cd1c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800cd18:	2320      	movs	r3, #32
 800cd1a:	e004      	b.n	800cd26 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800cd1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cd20:	fab3 f383 	clz	r3, r3
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d105      	bne.n	800cd40 <HAL_ADC_ConfigChannel+0x1d4>
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	0e9b      	lsrs	r3, r3, #26
 800cd3a:	f003 031f 	and.w	r3, r3, #31
 800cd3e:	e018      	b.n	800cd72 <HAL_ADC_ConfigChannel+0x206>
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cd48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cd4c:	fa93 f3a3 	rbit	r3, r3
 800cd50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800cd54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cd58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800cd5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d101      	bne.n	800cd68 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800cd64:	2320      	movs	r3, #32
 800cd66:	e004      	b.n	800cd72 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800cd68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cd6c:	fab3 f383 	clz	r3, r3
 800cd70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d106      	bne.n	800cd84 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	2100      	movs	r1, #0
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7ff fa72 	bl	800c268 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	2101      	movs	r1, #1
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7ff fa56 	bl	800c23c <LL_ADC_GetOffsetChannel>
 800cd90:	4603      	mov	r3, r0
 800cd92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d10a      	bne.n	800cdb0 <HAL_ADC_ConfigChannel+0x244>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	2101      	movs	r1, #1
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7ff fa4b 	bl	800c23c <LL_ADC_GetOffsetChannel>
 800cda6:	4603      	mov	r3, r0
 800cda8:	0e9b      	lsrs	r3, r3, #26
 800cdaa:	f003 021f 	and.w	r2, r3, #31
 800cdae:	e01e      	b.n	800cdee <HAL_ADC_ConfigChannel+0x282>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	2101      	movs	r1, #1
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7ff fa40 	bl	800c23c <LL_ADC_GetOffsetChannel>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cdc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cdc6:	fa93 f3a3 	rbit	r3, r3
 800cdca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800cdce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cdd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800cdd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d101      	bne.n	800cde2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800cdde:	2320      	movs	r3, #32
 800cde0:	e004      	b.n	800cdec <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800cde2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cde6:	fab3 f383 	clz	r3, r3
 800cdea:	b2db      	uxtb	r3, r3
 800cdec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d105      	bne.n	800ce06 <HAL_ADC_ConfigChannel+0x29a>
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	0e9b      	lsrs	r3, r3, #26
 800ce00:	f003 031f 	and.w	r3, r3, #31
 800ce04:	e018      	b.n	800ce38 <HAL_ADC_ConfigChannel+0x2cc>
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ce0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ce12:	fa93 f3a3 	rbit	r3, r3
 800ce16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800ce1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ce1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800ce22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d101      	bne.n	800ce2e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800ce2a:	2320      	movs	r3, #32
 800ce2c:	e004      	b.n	800ce38 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800ce2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ce32:	fab3 f383 	clz	r3, r3
 800ce36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d106      	bne.n	800ce4a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	2200      	movs	r2, #0
 800ce42:	2101      	movs	r1, #1
 800ce44:	4618      	mov	r0, r3
 800ce46:	f7ff fa0f 	bl	800c268 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	2102      	movs	r1, #2
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7ff f9f3 	bl	800c23c <LL_ADC_GetOffsetChannel>
 800ce56:	4603      	mov	r3, r0
 800ce58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d10a      	bne.n	800ce76 <HAL_ADC_ConfigChannel+0x30a>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	2102      	movs	r1, #2
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7ff f9e8 	bl	800c23c <LL_ADC_GetOffsetChannel>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	0e9b      	lsrs	r3, r3, #26
 800ce70:	f003 021f 	and.w	r2, r3, #31
 800ce74:	e01e      	b.n	800ceb4 <HAL_ADC_ConfigChannel+0x348>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2102      	movs	r1, #2
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f7ff f9dd 	bl	800c23c <LL_ADC_GetOffsetChannel>
 800ce82:	4603      	mov	r3, r0
 800ce84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ce88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ce8c:	fa93 f3a3 	rbit	r3, r3
 800ce90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800ce94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ce98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800ce9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d101      	bne.n	800cea8 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800cea4:	2320      	movs	r3, #32
 800cea6:	e004      	b.n	800ceb2 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800cea8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ceac:	fab3 f383 	clz	r3, r3
 800ceb0:	b2db      	uxtb	r3, r3
 800ceb2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d105      	bne.n	800cecc <HAL_ADC_ConfigChannel+0x360>
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	0e9b      	lsrs	r3, r3, #26
 800cec6:	f003 031f 	and.w	r3, r3, #31
 800ceca:	e016      	b.n	800cefa <HAL_ADC_ConfigChannel+0x38e>
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ced4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ced8:	fa93 f3a3 	rbit	r3, r3
 800cedc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800cede:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800cee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d101      	bne.n	800cef0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800ceec:	2320      	movs	r3, #32
 800ceee:	e004      	b.n	800cefa <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800cef0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cef4:	fab3 f383 	clz	r3, r3
 800cef8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d106      	bne.n	800cf0c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	2200      	movs	r2, #0
 800cf04:	2102      	movs	r1, #2
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7ff f9ae 	bl	800c268 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2103      	movs	r1, #3
 800cf12:	4618      	mov	r0, r3
 800cf14:	f7ff f992 	bl	800c23c <LL_ADC_GetOffsetChannel>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d10a      	bne.n	800cf38 <HAL_ADC_ConfigChannel+0x3cc>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	2103      	movs	r1, #3
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f7ff f987 	bl	800c23c <LL_ADC_GetOffsetChannel>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	0e9b      	lsrs	r3, r3, #26
 800cf32:	f003 021f 	and.w	r2, r3, #31
 800cf36:	e017      	b.n	800cf68 <HAL_ADC_ConfigChannel+0x3fc>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2103      	movs	r1, #3
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7ff f97c 	bl	800c23c <LL_ADC_GetOffsetChannel>
 800cf44:	4603      	mov	r3, r0
 800cf46:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cf48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf4a:	fa93 f3a3 	rbit	r3, r3
 800cf4e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800cf50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf52:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800cf54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d101      	bne.n	800cf5e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800cf5a:	2320      	movs	r3, #32
 800cf5c:	e003      	b.n	800cf66 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800cf5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf60:	fab3 f383 	clz	r3, r3
 800cf64:	b2db      	uxtb	r3, r3
 800cf66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d105      	bne.n	800cf80 <HAL_ADC_ConfigChannel+0x414>
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	0e9b      	lsrs	r3, r3, #26
 800cf7a:	f003 031f 	and.w	r3, r3, #31
 800cf7e:	e011      	b.n	800cfa4 <HAL_ADC_ConfigChannel+0x438>
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cf86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf88:	fa93 f3a3 	rbit	r3, r3
 800cf8c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800cf8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf90:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800cf92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d101      	bne.n	800cf9c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800cf98:	2320      	movs	r3, #32
 800cf9a:	e003      	b.n	800cfa4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800cf9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf9e:	fab3 f383 	clz	r3, r3
 800cfa2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d106      	bne.n	800cfb6 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	2200      	movs	r2, #0
 800cfae:	2103      	movs	r1, #3
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7ff f959 	bl	800c268 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7ff fa8e 	bl	800c4dc <LL_ADC_IsEnabled>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	f040 8140 	bne.w	800d248 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6818      	ldr	r0, [r3, #0]
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	6819      	ldr	r1, [r3, #0]
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	68db      	ldr	r3, [r3, #12]
 800cfd4:	461a      	mov	r2, r3
 800cfd6:	f7ff f9df 	bl	800c398 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	68db      	ldr	r3, [r3, #12]
 800cfde:	4a8f      	ldr	r2, [pc, #572]	; (800d21c <HAL_ADC_ConfigChannel+0x6b0>)
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	f040 8131 	bne.w	800d248 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d10b      	bne.n	800d00e <HAL_ADC_ConfigChannel+0x4a2>
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	0e9b      	lsrs	r3, r3, #26
 800cffc:	3301      	adds	r3, #1
 800cffe:	f003 031f 	and.w	r3, r3, #31
 800d002:	2b09      	cmp	r3, #9
 800d004:	bf94      	ite	ls
 800d006:	2301      	movls	r3, #1
 800d008:	2300      	movhi	r3, #0
 800d00a:	b2db      	uxtb	r3, r3
 800d00c:	e019      	b.n	800d042 <HAL_ADC_ConfigChannel+0x4d6>
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d016:	fa93 f3a3 	rbit	r3, r3
 800d01a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800d01c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d01e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800d020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d022:	2b00      	cmp	r3, #0
 800d024:	d101      	bne.n	800d02a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800d026:	2320      	movs	r3, #32
 800d028:	e003      	b.n	800d032 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800d02a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d02c:	fab3 f383 	clz	r3, r3
 800d030:	b2db      	uxtb	r3, r3
 800d032:	3301      	adds	r3, #1
 800d034:	f003 031f 	and.w	r3, r3, #31
 800d038:	2b09      	cmp	r3, #9
 800d03a:	bf94      	ite	ls
 800d03c:	2301      	movls	r3, #1
 800d03e:	2300      	movhi	r3, #0
 800d040:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800d042:	2b00      	cmp	r3, #0
 800d044:	d079      	beq.n	800d13a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d107      	bne.n	800d062 <HAL_ADC_ConfigChannel+0x4f6>
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	0e9b      	lsrs	r3, r3, #26
 800d058:	3301      	adds	r3, #1
 800d05a:	069b      	lsls	r3, r3, #26
 800d05c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800d060:	e015      	b.n	800d08e <HAL_ADC_ConfigChannel+0x522>
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d06a:	fa93 f3a3 	rbit	r3, r3
 800d06e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800d070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d072:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800d074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d076:	2b00      	cmp	r3, #0
 800d078:	d101      	bne.n	800d07e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800d07a:	2320      	movs	r3, #32
 800d07c:	e003      	b.n	800d086 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800d07e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d080:	fab3 f383 	clz	r3, r3
 800d084:	b2db      	uxtb	r3, r3
 800d086:	3301      	adds	r3, #1
 800d088:	069b      	lsls	r3, r3, #26
 800d08a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d096:	2b00      	cmp	r3, #0
 800d098:	d109      	bne.n	800d0ae <HAL_ADC_ConfigChannel+0x542>
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	0e9b      	lsrs	r3, r3, #26
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	f003 031f 	and.w	r3, r3, #31
 800d0a6:	2101      	movs	r1, #1
 800d0a8:	fa01 f303 	lsl.w	r3, r1, r3
 800d0ac:	e017      	b.n	800d0de <HAL_ADC_ConfigChannel+0x572>
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d0b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0b6:	fa93 f3a3 	rbit	r3, r3
 800d0ba:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800d0bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0be:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800d0c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d101      	bne.n	800d0ca <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800d0c6:	2320      	movs	r3, #32
 800d0c8:	e003      	b.n	800d0d2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800d0ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0cc:	fab3 f383 	clz	r3, r3
 800d0d0:	b2db      	uxtb	r3, r3
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	f003 031f 	and.w	r3, r3, #31
 800d0d8:	2101      	movs	r1, #1
 800d0da:	fa01 f303 	lsl.w	r3, r1, r3
 800d0de:	ea42 0103 	orr.w	r1, r2, r3
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d10a      	bne.n	800d104 <HAL_ADC_ConfigChannel+0x598>
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	0e9b      	lsrs	r3, r3, #26
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	f003 021f 	and.w	r2, r3, #31
 800d0fa:	4613      	mov	r3, r2
 800d0fc:	005b      	lsls	r3, r3, #1
 800d0fe:	4413      	add	r3, r2
 800d100:	051b      	lsls	r3, r3, #20
 800d102:	e018      	b.n	800d136 <HAL_ADC_ConfigChannel+0x5ca>
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d10c:	fa93 f3a3 	rbit	r3, r3
 800d110:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800d112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d114:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800d116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d101      	bne.n	800d120 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800d11c:	2320      	movs	r3, #32
 800d11e:	e003      	b.n	800d128 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800d120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d122:	fab3 f383 	clz	r3, r3
 800d126:	b2db      	uxtb	r3, r3
 800d128:	3301      	adds	r3, #1
 800d12a:	f003 021f 	and.w	r2, r3, #31
 800d12e:	4613      	mov	r3, r2
 800d130:	005b      	lsls	r3, r3, #1
 800d132:	4413      	add	r3, r2
 800d134:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800d136:	430b      	orrs	r3, r1
 800d138:	e081      	b.n	800d23e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d142:	2b00      	cmp	r3, #0
 800d144:	d107      	bne.n	800d156 <HAL_ADC_ConfigChannel+0x5ea>
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	0e9b      	lsrs	r3, r3, #26
 800d14c:	3301      	adds	r3, #1
 800d14e:	069b      	lsls	r3, r3, #26
 800d150:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800d154:	e015      	b.n	800d182 <HAL_ADC_ConfigChannel+0x616>
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d15e:	fa93 f3a3 	rbit	r3, r3
 800d162:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800d164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d166:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800d168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d101      	bne.n	800d172 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800d16e:	2320      	movs	r3, #32
 800d170:	e003      	b.n	800d17a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800d172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d174:	fab3 f383 	clz	r3, r3
 800d178:	b2db      	uxtb	r3, r3
 800d17a:	3301      	adds	r3, #1
 800d17c:	069b      	lsls	r3, r3, #26
 800d17e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d109      	bne.n	800d1a2 <HAL_ADC_ConfigChannel+0x636>
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	0e9b      	lsrs	r3, r3, #26
 800d194:	3301      	adds	r3, #1
 800d196:	f003 031f 	and.w	r3, r3, #31
 800d19a:	2101      	movs	r1, #1
 800d19c:	fa01 f303 	lsl.w	r3, r1, r3
 800d1a0:	e017      	b.n	800d1d2 <HAL_ADC_ConfigChannel+0x666>
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d1a8:	6a3b      	ldr	r3, [r7, #32]
 800d1aa:	fa93 f3a3 	rbit	r3, r3
 800d1ae:	61fb      	str	r3, [r7, #28]
  return result;
 800d1b0:	69fb      	ldr	r3, [r7, #28]
 800d1b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800d1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d101      	bne.n	800d1be <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800d1ba:	2320      	movs	r3, #32
 800d1bc:	e003      	b.n	800d1c6 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800d1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c0:	fab3 f383 	clz	r3, r3
 800d1c4:	b2db      	uxtb	r3, r3
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	f003 031f 	and.w	r3, r3, #31
 800d1cc:	2101      	movs	r1, #1
 800d1ce:	fa01 f303 	lsl.w	r3, r1, r3
 800d1d2:	ea42 0103 	orr.w	r1, r2, r3
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d10d      	bne.n	800d1fe <HAL_ADC_ConfigChannel+0x692>
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	0e9b      	lsrs	r3, r3, #26
 800d1e8:	3301      	adds	r3, #1
 800d1ea:	f003 021f 	and.w	r2, r3, #31
 800d1ee:	4613      	mov	r3, r2
 800d1f0:	005b      	lsls	r3, r3, #1
 800d1f2:	4413      	add	r3, r2
 800d1f4:	3b1e      	subs	r3, #30
 800d1f6:	051b      	lsls	r3, r3, #20
 800d1f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d1fc:	e01e      	b.n	800d23c <HAL_ADC_ConfigChannel+0x6d0>
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	fa93 f3a3 	rbit	r3, r3
 800d20a:	613b      	str	r3, [r7, #16]
  return result;
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800d210:	69bb      	ldr	r3, [r7, #24]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d104      	bne.n	800d220 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800d216:	2320      	movs	r3, #32
 800d218:	e006      	b.n	800d228 <HAL_ADC_ConfigChannel+0x6bc>
 800d21a:	bf00      	nop
 800d21c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800d220:	69bb      	ldr	r3, [r7, #24]
 800d222:	fab3 f383 	clz	r3, r3
 800d226:	b2db      	uxtb	r3, r3
 800d228:	3301      	adds	r3, #1
 800d22a:	f003 021f 	and.w	r2, r3, #31
 800d22e:	4613      	mov	r3, r2
 800d230:	005b      	lsls	r3, r3, #1
 800d232:	4413      	add	r3, r2
 800d234:	3b1e      	subs	r3, #30
 800d236:	051b      	lsls	r3, r3, #20
 800d238:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800d23c:	430b      	orrs	r3, r1
 800d23e:	683a      	ldr	r2, [r7, #0]
 800d240:	6892      	ldr	r2, [r2, #8]
 800d242:	4619      	mov	r1, r3
 800d244:	f7ff f87d 	bl	800c342 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	681a      	ldr	r2, [r3, #0]
 800d24c:	4b44      	ldr	r3, [pc, #272]	; (800d360 <HAL_ADC_ConfigChannel+0x7f4>)
 800d24e:	4013      	ands	r3, r2
 800d250:	2b00      	cmp	r3, #0
 800d252:	d07a      	beq.n	800d34a <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800d254:	4843      	ldr	r0, [pc, #268]	; (800d364 <HAL_ADC_ConfigChannel+0x7f8>)
 800d256:	f7fe ffbf 	bl	800c1d8 <LL_ADC_GetCommonPathInternalCh>
 800d25a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	4a41      	ldr	r2, [pc, #260]	; (800d368 <HAL_ADC_ConfigChannel+0x7fc>)
 800d264:	4293      	cmp	r3, r2
 800d266:	d12c      	bne.n	800d2c2 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800d268:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d26c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d270:	2b00      	cmp	r3, #0
 800d272:	d126      	bne.n	800d2c2 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	4a3c      	ldr	r2, [pc, #240]	; (800d36c <HAL_ADC_ConfigChannel+0x800>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d004      	beq.n	800d288 <HAL_ADC_ConfigChannel+0x71c>
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	4a3b      	ldr	r2, [pc, #236]	; (800d370 <HAL_ADC_ConfigChannel+0x804>)
 800d284:	4293      	cmp	r3, r2
 800d286:	d15d      	bne.n	800d344 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d288:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d28c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d290:	4619      	mov	r1, r3
 800d292:	4834      	ldr	r0, [pc, #208]	; (800d364 <HAL_ADC_ConfigChannel+0x7f8>)
 800d294:	f7fe ff8d 	bl	800c1b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800d298:	4b36      	ldr	r3, [pc, #216]	; (800d374 <HAL_ADC_ConfigChannel+0x808>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	099b      	lsrs	r3, r3, #6
 800d29e:	4a36      	ldr	r2, [pc, #216]	; (800d378 <HAL_ADC_ConfigChannel+0x80c>)
 800d2a0:	fba2 2303 	umull	r2, r3, r2, r3
 800d2a4:	099b      	lsrs	r3, r3, #6
 800d2a6:	1c5a      	adds	r2, r3, #1
 800d2a8:	4613      	mov	r3, r2
 800d2aa:	005b      	lsls	r3, r3, #1
 800d2ac:	4413      	add	r3, r2
 800d2ae:	009b      	lsls	r3, r3, #2
 800d2b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800d2b2:	e002      	b.n	800d2ba <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	3b01      	subs	r3, #1
 800d2b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d1f9      	bne.n	800d2b4 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800d2c0:	e040      	b.n	800d344 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4a2d      	ldr	r2, [pc, #180]	; (800d37c <HAL_ADC_ConfigChannel+0x810>)
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d118      	bne.n	800d2fe <HAL_ADC_ConfigChannel+0x792>
 800d2cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d2d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d112      	bne.n	800d2fe <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	4a23      	ldr	r2, [pc, #140]	; (800d36c <HAL_ADC_ConfigChannel+0x800>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d004      	beq.n	800d2ec <HAL_ADC_ConfigChannel+0x780>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	4a22      	ldr	r2, [pc, #136]	; (800d370 <HAL_ADC_ConfigChannel+0x804>)
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d12d      	bne.n	800d348 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d2ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d2f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	481b      	ldr	r0, [pc, #108]	; (800d364 <HAL_ADC_ConfigChannel+0x7f8>)
 800d2f8:	f7fe ff5b 	bl	800c1b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800d2fc:	e024      	b.n	800d348 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4a1f      	ldr	r2, [pc, #124]	; (800d380 <HAL_ADC_ConfigChannel+0x814>)
 800d304:	4293      	cmp	r3, r2
 800d306:	d120      	bne.n	800d34a <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800d308:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d30c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d310:	2b00      	cmp	r3, #0
 800d312:	d11a      	bne.n	800d34a <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	4a14      	ldr	r2, [pc, #80]	; (800d36c <HAL_ADC_ConfigChannel+0x800>)
 800d31a:	4293      	cmp	r3, r2
 800d31c:	d115      	bne.n	800d34a <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d31e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d322:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d326:	4619      	mov	r1, r3
 800d328:	480e      	ldr	r0, [pc, #56]	; (800d364 <HAL_ADC_ConfigChannel+0x7f8>)
 800d32a:	f7fe ff42 	bl	800c1b2 <LL_ADC_SetCommonPathInternalCh>
 800d32e:	e00c      	b.n	800d34a <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d334:	f043 0220 	orr.w	r2, r3, #32
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800d33c:	2301      	movs	r3, #1
 800d33e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800d342:	e002      	b.n	800d34a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800d344:	bf00      	nop
 800d346:	e000      	b.n	800d34a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800d348:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2200      	movs	r2, #0
 800d34e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800d352:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800d356:	4618      	mov	r0, r3
 800d358:	37d8      	adds	r7, #216	; 0xd8
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	bf00      	nop
 800d360:	80080000 	.word	0x80080000
 800d364:	50040300 	.word	0x50040300
 800d368:	c7520000 	.word	0xc7520000
 800d36c:	50040000 	.word	0x50040000
 800d370:	50040200 	.word	0x50040200
 800d374:	200001a0 	.word	0x200001a0
 800d378:	053e2d63 	.word	0x053e2d63
 800d37c:	cb840000 	.word	0xcb840000
 800d380:	80000001 	.word	0x80000001

0800d384 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b084      	sub	sp, #16
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800d38c:	2300      	movs	r3, #0
 800d38e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	4618      	mov	r0, r3
 800d396:	f7ff f8a1 	bl	800c4dc <LL_ADC_IsEnabled>
 800d39a:	4603      	mov	r3, r0
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d169      	bne.n	800d474 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	689a      	ldr	r2, [r3, #8]
 800d3a6:	4b36      	ldr	r3, [pc, #216]	; (800d480 <ADC_Enable+0xfc>)
 800d3a8:	4013      	ands	r3, r2
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d00d      	beq.n	800d3ca <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3b2:	f043 0210 	orr.w	r2, r3, #16
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3be:	f043 0201 	orr.w	r2, r3, #1
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	e055      	b.n	800d476 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7ff f870 	bl	800c4b4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800d3d4:	482b      	ldr	r0, [pc, #172]	; (800d484 <ADC_Enable+0x100>)
 800d3d6:	f7fe feff 	bl	800c1d8 <LL_ADC_GetCommonPathInternalCh>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d013      	beq.n	800d40c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800d3e4:	4b28      	ldr	r3, [pc, #160]	; (800d488 <ADC_Enable+0x104>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	099b      	lsrs	r3, r3, #6
 800d3ea:	4a28      	ldr	r2, [pc, #160]	; (800d48c <ADC_Enable+0x108>)
 800d3ec:	fba2 2303 	umull	r2, r3, r2, r3
 800d3f0:	099b      	lsrs	r3, r3, #6
 800d3f2:	1c5a      	adds	r2, r3, #1
 800d3f4:	4613      	mov	r3, r2
 800d3f6:	005b      	lsls	r3, r3, #1
 800d3f8:	4413      	add	r3, r2
 800d3fa:	009b      	lsls	r3, r3, #2
 800d3fc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800d3fe:	e002      	b.n	800d406 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	3b01      	subs	r3, #1
 800d404:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d1f9      	bne.n	800d400 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800d40c:	f7fe fe6e 	bl	800c0ec <HAL_GetTick>
 800d410:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800d412:	e028      	b.n	800d466 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	4618      	mov	r0, r3
 800d41a:	f7ff f85f 	bl	800c4dc <LL_ADC_IsEnabled>
 800d41e:	4603      	mov	r3, r0
 800d420:	2b00      	cmp	r3, #0
 800d422:	d104      	bne.n	800d42e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	4618      	mov	r0, r3
 800d42a:	f7ff f843 	bl	800c4b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800d42e:	f7fe fe5d 	bl	800c0ec <HAL_GetTick>
 800d432:	4602      	mov	r2, r0
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	1ad3      	subs	r3, r2, r3
 800d438:	2b02      	cmp	r3, #2
 800d43a:	d914      	bls.n	800d466 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f003 0301 	and.w	r3, r3, #1
 800d446:	2b01      	cmp	r3, #1
 800d448:	d00d      	beq.n	800d466 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d44e:	f043 0210 	orr.w	r2, r3, #16
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d45a:	f043 0201 	orr.w	r2, r3, #1
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800d462:	2301      	movs	r3, #1
 800d464:	e007      	b.n	800d476 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f003 0301 	and.w	r3, r3, #1
 800d470:	2b01      	cmp	r3, #1
 800d472:	d1cf      	bne.n	800d414 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800d474:	2300      	movs	r3, #0
}
 800d476:	4618      	mov	r0, r3
 800d478:	3710      	adds	r7, #16
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
 800d47e:	bf00      	nop
 800d480:	8000003f 	.word	0x8000003f
 800d484:	50040300 	.word	0x50040300
 800d488:	200001a0 	.word	0x200001a0
 800d48c:	053e2d63 	.word	0x053e2d63

0800d490 <LL_ADC_IsEnabled>:
{
 800d490:	b480      	push	{r7}
 800d492:	b083      	sub	sp, #12
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	689b      	ldr	r3, [r3, #8]
 800d49c:	f003 0301 	and.w	r3, r3, #1
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	d101      	bne.n	800d4a8 <LL_ADC_IsEnabled+0x18>
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	e000      	b.n	800d4aa <LL_ADC_IsEnabled+0x1a>
 800d4a8:	2300      	movs	r3, #0
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	370c      	adds	r7, #12
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b4:	4770      	bx	lr

0800d4b6 <LL_ADC_REG_IsConversionOngoing>:
{
 800d4b6:	b480      	push	{r7}
 800d4b8:	b083      	sub	sp, #12
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	689b      	ldr	r3, [r3, #8]
 800d4c2:	f003 0304 	and.w	r3, r3, #4
 800d4c6:	2b04      	cmp	r3, #4
 800d4c8:	d101      	bne.n	800d4ce <LL_ADC_REG_IsConversionOngoing+0x18>
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	e000      	b.n	800d4d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800d4ce:	2300      	movs	r3, #0
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	370c      	adds	r7, #12
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr

0800d4dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800d4dc:	b590      	push	{r4, r7, lr}
 800d4de:	b0a1      	sub	sp, #132	; 0x84
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800d4f2:	2b01      	cmp	r3, #1
 800d4f4:	d101      	bne.n	800d4fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800d4f6:	2302      	movs	r3, #2
 800d4f8:	e093      	b.n	800d622 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2201      	movs	r2, #1
 800d4fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800d502:	2300      	movs	r3, #0
 800d504:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800d506:	2300      	movs	r3, #0
 800d508:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	4a47      	ldr	r2, [pc, #284]	; (800d62c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800d510:	4293      	cmp	r3, r2
 800d512:	d102      	bne.n	800d51a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800d514:	4b46      	ldr	r3, [pc, #280]	; (800d630 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800d516:	60fb      	str	r3, [r7, #12]
 800d518:	e001      	b.n	800d51e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800d51a:	2300      	movs	r3, #0
 800d51c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d10b      	bne.n	800d53c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d528:	f043 0220 	orr.w	r2, r3, #32
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2200      	movs	r2, #0
 800d534:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800d538:	2301      	movs	r3, #1
 800d53a:	e072      	b.n	800d622 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	4618      	mov	r0, r3
 800d540:	f7ff ffb9 	bl	800d4b6 <LL_ADC_REG_IsConversionOngoing>
 800d544:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7ff ffb3 	bl	800d4b6 <LL_ADC_REG_IsConversionOngoing>
 800d550:	4603      	mov	r3, r0
 800d552:	2b00      	cmp	r3, #0
 800d554:	d154      	bne.n	800d600 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800d556:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d151      	bne.n	800d600 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800d55c:	4b35      	ldr	r3, [pc, #212]	; (800d634 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800d55e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d02c      	beq.n	800d5c2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800d568:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d56a:	689b      	ldr	r3, [r3, #8]
 800d56c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	6859      	ldr	r1, [r3, #4]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d57a:	035b      	lsls	r3, r3, #13
 800d57c:	430b      	orrs	r3, r1
 800d57e:	431a      	orrs	r2, r3
 800d580:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d582:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800d584:	4829      	ldr	r0, [pc, #164]	; (800d62c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800d586:	f7ff ff83 	bl	800d490 <LL_ADC_IsEnabled>
 800d58a:	4604      	mov	r4, r0
 800d58c:	4828      	ldr	r0, [pc, #160]	; (800d630 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800d58e:	f7ff ff7f 	bl	800d490 <LL_ADC_IsEnabled>
 800d592:	4603      	mov	r3, r0
 800d594:	431c      	orrs	r4, r3
 800d596:	4828      	ldr	r0, [pc, #160]	; (800d638 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800d598:	f7ff ff7a 	bl	800d490 <LL_ADC_IsEnabled>
 800d59c:	4603      	mov	r3, r0
 800d59e:	4323      	orrs	r3, r4
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d137      	bne.n	800d614 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800d5a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5a6:	689b      	ldr	r3, [r3, #8]
 800d5a8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800d5ac:	f023 030f 	bic.w	r3, r3, #15
 800d5b0:	683a      	ldr	r2, [r7, #0]
 800d5b2:	6811      	ldr	r1, [r2, #0]
 800d5b4:	683a      	ldr	r2, [r7, #0]
 800d5b6:	6892      	ldr	r2, [r2, #8]
 800d5b8:	430a      	orrs	r2, r1
 800d5ba:	431a      	orrs	r2, r3
 800d5bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5be:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800d5c0:	e028      	b.n	800d614 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800d5c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5c4:	689b      	ldr	r3, [r3, #8]
 800d5c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d5ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5cc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800d5ce:	4817      	ldr	r0, [pc, #92]	; (800d62c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800d5d0:	f7ff ff5e 	bl	800d490 <LL_ADC_IsEnabled>
 800d5d4:	4604      	mov	r4, r0
 800d5d6:	4816      	ldr	r0, [pc, #88]	; (800d630 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800d5d8:	f7ff ff5a 	bl	800d490 <LL_ADC_IsEnabled>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	431c      	orrs	r4, r3
 800d5e0:	4815      	ldr	r0, [pc, #84]	; (800d638 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800d5e2:	f7ff ff55 	bl	800d490 <LL_ADC_IsEnabled>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	4323      	orrs	r3, r4
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d112      	bne.n	800d614 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800d5ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5f0:	689b      	ldr	r3, [r3, #8]
 800d5f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800d5f6:	f023 030f 	bic.w	r3, r3, #15
 800d5fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d5fc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800d5fe:	e009      	b.n	800d614 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d604:	f043 0220 	orr.w	r2, r3, #32
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800d60c:	2301      	movs	r3, #1
 800d60e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d612:	e000      	b.n	800d616 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800d614:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2200      	movs	r2, #0
 800d61a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800d61e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800d622:	4618      	mov	r0, r3
 800d624:	3784      	adds	r7, #132	; 0x84
 800d626:	46bd      	mov	sp, r7
 800d628:	bd90      	pop	{r4, r7, pc}
 800d62a:	bf00      	nop
 800d62c:	50040000 	.word	0x50040000
 800d630:	50040100 	.word	0x50040100
 800d634:	50040300 	.word	0x50040300
 800d638:	50040200 	.word	0x50040200

0800d63c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b085      	sub	sp, #20
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f003 0307 	and.w	r3, r3, #7
 800d64a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d64c:	4b0c      	ldr	r3, [pc, #48]	; (800d680 <__NVIC_SetPriorityGrouping+0x44>)
 800d64e:	68db      	ldr	r3, [r3, #12]
 800d650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d652:	68ba      	ldr	r2, [r7, #8]
 800d654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800d658:	4013      	ands	r3, r2
 800d65a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800d668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d66c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d66e:	4a04      	ldr	r2, [pc, #16]	; (800d680 <__NVIC_SetPriorityGrouping+0x44>)
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	60d3      	str	r3, [r2, #12]
}
 800d674:	bf00      	nop
 800d676:	3714      	adds	r7, #20
 800d678:	46bd      	mov	sp, r7
 800d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67e:	4770      	bx	lr
 800d680:	e000ed00 	.word	0xe000ed00

0800d684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800d684:	b480      	push	{r7}
 800d686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d688:	4b04      	ldr	r3, [pc, #16]	; (800d69c <__NVIC_GetPriorityGrouping+0x18>)
 800d68a:	68db      	ldr	r3, [r3, #12]
 800d68c:	0a1b      	lsrs	r3, r3, #8
 800d68e:	f003 0307 	and.w	r3, r3, #7
}
 800d692:	4618      	mov	r0, r3
 800d694:	46bd      	mov	sp, r7
 800d696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69a:	4770      	bx	lr
 800d69c:	e000ed00 	.word	0xe000ed00

0800d6a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b083      	sub	sp, #12
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d6aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	db0b      	blt.n	800d6ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d6b2:	79fb      	ldrb	r3, [r7, #7]
 800d6b4:	f003 021f 	and.w	r2, r3, #31
 800d6b8:	4907      	ldr	r1, [pc, #28]	; (800d6d8 <__NVIC_EnableIRQ+0x38>)
 800d6ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d6be:	095b      	lsrs	r3, r3, #5
 800d6c0:	2001      	movs	r0, #1
 800d6c2:	fa00 f202 	lsl.w	r2, r0, r2
 800d6c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800d6ca:	bf00      	nop
 800d6cc:	370c      	adds	r7, #12
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d4:	4770      	bx	lr
 800d6d6:	bf00      	nop
 800d6d8:	e000e100 	.word	0xe000e100

0800d6dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b083      	sub	sp, #12
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d6e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	db12      	blt.n	800d714 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d6ee:	79fb      	ldrb	r3, [r7, #7]
 800d6f0:	f003 021f 	and.w	r2, r3, #31
 800d6f4:	490a      	ldr	r1, [pc, #40]	; (800d720 <__NVIC_DisableIRQ+0x44>)
 800d6f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d6fa:	095b      	lsrs	r3, r3, #5
 800d6fc:	2001      	movs	r0, #1
 800d6fe:	fa00 f202 	lsl.w	r2, r0, r2
 800d702:	3320      	adds	r3, #32
 800d704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800d708:	f3bf 8f4f 	dsb	sy
}
 800d70c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d70e:	f3bf 8f6f 	isb	sy
}
 800d712:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800d714:	bf00      	nop
 800d716:	370c      	adds	r7, #12
 800d718:	46bd      	mov	sp, r7
 800d71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71e:	4770      	bx	lr
 800d720:	e000e100 	.word	0xe000e100

0800d724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800d724:	b480      	push	{r7}
 800d726:	b083      	sub	sp, #12
 800d728:	af00      	add	r7, sp, #0
 800d72a:	4603      	mov	r3, r0
 800d72c:	6039      	str	r1, [r7, #0]
 800d72e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d734:	2b00      	cmp	r3, #0
 800d736:	db0a      	blt.n	800d74e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	b2da      	uxtb	r2, r3
 800d73c:	490c      	ldr	r1, [pc, #48]	; (800d770 <__NVIC_SetPriority+0x4c>)
 800d73e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d742:	0112      	lsls	r2, r2, #4
 800d744:	b2d2      	uxtb	r2, r2
 800d746:	440b      	add	r3, r1
 800d748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800d74c:	e00a      	b.n	800d764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	b2da      	uxtb	r2, r3
 800d752:	4908      	ldr	r1, [pc, #32]	; (800d774 <__NVIC_SetPriority+0x50>)
 800d754:	79fb      	ldrb	r3, [r7, #7]
 800d756:	f003 030f 	and.w	r3, r3, #15
 800d75a:	3b04      	subs	r3, #4
 800d75c:	0112      	lsls	r2, r2, #4
 800d75e:	b2d2      	uxtb	r2, r2
 800d760:	440b      	add	r3, r1
 800d762:	761a      	strb	r2, [r3, #24]
}
 800d764:	bf00      	nop
 800d766:	370c      	adds	r7, #12
 800d768:	46bd      	mov	sp, r7
 800d76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76e:	4770      	bx	lr
 800d770:	e000e100 	.word	0xe000e100
 800d774:	e000ed00 	.word	0xe000ed00

0800d778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d778:	b480      	push	{r7}
 800d77a:	b089      	sub	sp, #36	; 0x24
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	60b9      	str	r1, [r7, #8]
 800d782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f003 0307 	and.w	r3, r3, #7
 800d78a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d78c:	69fb      	ldr	r3, [r7, #28]
 800d78e:	f1c3 0307 	rsb	r3, r3, #7
 800d792:	2b04      	cmp	r3, #4
 800d794:	bf28      	it	cs
 800d796:	2304      	movcs	r3, #4
 800d798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d79a:	69fb      	ldr	r3, [r7, #28]
 800d79c:	3304      	adds	r3, #4
 800d79e:	2b06      	cmp	r3, #6
 800d7a0:	d902      	bls.n	800d7a8 <NVIC_EncodePriority+0x30>
 800d7a2:	69fb      	ldr	r3, [r7, #28]
 800d7a4:	3b03      	subs	r3, #3
 800d7a6:	e000      	b.n	800d7aa <NVIC_EncodePriority+0x32>
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d7ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d7b0:	69bb      	ldr	r3, [r7, #24]
 800d7b2:	fa02 f303 	lsl.w	r3, r2, r3
 800d7b6:	43da      	mvns	r2, r3
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	401a      	ands	r2, r3
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d7c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	fa01 f303 	lsl.w	r3, r1, r3
 800d7ca:	43d9      	mvns	r1, r3
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d7d0:	4313      	orrs	r3, r2
         );
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3724      	adds	r7, #36	; 0x24
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7dc:	4770      	bx	lr
	...

0800d7e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b082      	sub	sp, #8
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	3b01      	subs	r3, #1
 800d7ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d7f0:	d301      	bcc.n	800d7f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	e00f      	b.n	800d816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d7f6:	4a0a      	ldr	r2, [pc, #40]	; (800d820 <SysTick_Config+0x40>)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	3b01      	subs	r3, #1
 800d7fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d7fe:	210f      	movs	r1, #15
 800d800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d804:	f7ff ff8e 	bl	800d724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d808:	4b05      	ldr	r3, [pc, #20]	; (800d820 <SysTick_Config+0x40>)
 800d80a:	2200      	movs	r2, #0
 800d80c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d80e:	4b04      	ldr	r3, [pc, #16]	; (800d820 <SysTick_Config+0x40>)
 800d810:	2207      	movs	r2, #7
 800d812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d814:	2300      	movs	r3, #0
}
 800d816:	4618      	mov	r0, r3
 800d818:	3708      	adds	r7, #8
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	bf00      	nop
 800d820:	e000e010 	.word	0xe000e010

0800d824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f7ff ff05 	bl	800d63c <__NVIC_SetPriorityGrouping>
}
 800d832:	bf00      	nop
 800d834:	3708      	adds	r7, #8
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}

0800d83a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d83a:	b580      	push	{r7, lr}
 800d83c:	b086      	sub	sp, #24
 800d83e:	af00      	add	r7, sp, #0
 800d840:	4603      	mov	r3, r0
 800d842:	60b9      	str	r1, [r7, #8]
 800d844:	607a      	str	r2, [r7, #4]
 800d846:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800d848:	2300      	movs	r3, #0
 800d84a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800d84c:	f7ff ff1a 	bl	800d684 <__NVIC_GetPriorityGrouping>
 800d850:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	68b9      	ldr	r1, [r7, #8]
 800d856:	6978      	ldr	r0, [r7, #20]
 800d858:	f7ff ff8e 	bl	800d778 <NVIC_EncodePriority>
 800d85c:	4602      	mov	r2, r0
 800d85e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d862:	4611      	mov	r1, r2
 800d864:	4618      	mov	r0, r3
 800d866:	f7ff ff5d 	bl	800d724 <__NVIC_SetPriority>
}
 800d86a:	bf00      	nop
 800d86c:	3718      	adds	r7, #24
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}

0800d872 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d872:	b580      	push	{r7, lr}
 800d874:	b082      	sub	sp, #8
 800d876:	af00      	add	r7, sp, #0
 800d878:	4603      	mov	r3, r0
 800d87a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d87c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d880:	4618      	mov	r0, r3
 800d882:	f7ff ff0d 	bl	800d6a0 <__NVIC_EnableIRQ>
}
 800d886:	bf00      	nop
 800d888:	3708      	adds	r7, #8
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}

0800d88e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800d88e:	b580      	push	{r7, lr}
 800d890:	b082      	sub	sp, #8
 800d892:	af00      	add	r7, sp, #0
 800d894:	4603      	mov	r3, r0
 800d896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800d898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7ff ff1d 	bl	800d6dc <__NVIC_DisableIRQ>
}
 800d8a2:	bf00      	nop
 800d8a4:	3708      	adds	r7, #8
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d8aa:	b580      	push	{r7, lr}
 800d8ac:	b082      	sub	sp, #8
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f7ff ff94 	bl	800d7e0 <SysTick_Config>
 800d8b8:	4603      	mov	r3, r0
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3708      	adds	r7, #8
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}

0800d8c2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800d8c2:	b580      	push	{r7, lr}
 800d8c4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800d8c6:	f7f5 fa97 	bl	8002df8 <HAL_SYSTICK_Callback>
}
 800d8ca:	bf00      	nop
 800d8cc:	bd80      	pop	{r7, pc}
	...

0800d8d0 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b082      	sub	sp, #8
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d101      	bne.n	800d8e2 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800d8de:	2301      	movs	r3, #1
 800d8e0:	e075      	b.n	800d9ce <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d8e8:	b2db      	uxtb	r3, r3
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d106      	bne.n	800d8fc <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f7f3 fcb4 	bl	8001264 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2202      	movs	r2, #2
 800d900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d912:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	699b      	ldr	r3, [r3, #24]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d002      	beq.n	800d922 <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2200      	movs	r2, #0
 800d920:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	6819      	ldr	r1, [r3, #0]
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681a      	ldr	r2, [r3, #0]
 800d92c:	4b2a      	ldr	r3, [pc, #168]	; (800d9d8 <HAL_DCMI_Init+0x108>)
 800d92e:	400b      	ands	r3, r1
 800d930:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	6819      	ldr	r1, [r3, #0]
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	685a      	ldr	r2, [r3, #4]
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	695b      	ldr	r3, [r3, #20]
 800d940:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800d946:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	691b      	ldr	r3, [r3, #16]
 800d94c:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800d952:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	699b      	ldr	r3, [r3, #24]
 800d958:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800d95e:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d964:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800d96a:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d970:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800d976:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	430a      	orrs	r2, r1
 800d97e:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	685b      	ldr	r3, [r3, #4]
 800d984:	2b10      	cmp	r3, #16
 800d986:	d112      	bne.n	800d9ae <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	7f1b      	ldrb	r3, [r3, #28]
 800d98c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	7f5b      	ldrb	r3, [r3, #29]
 800d992:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800d994:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	7f9b      	ldrb	r3, [r3, #30]
 800d99a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800d99c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	7fdb      	ldrb	r3, [r3, #31]
 800d9a4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800d9aa:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800d9ac:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	68da      	ldr	r2, [r3, #12]
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	f042 021f 	orr.w	r2, r2, #31
 800d9bc:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2201      	movs	r2, #1
 800d9c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800d9cc:	2300      	movs	r3, #0
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3708      	adds	r7, #8
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	bf00      	nop
 800d9d8:	ffe0f007 	.word	0xffe0f007

0800d9dc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d101      	bne.n	800d9ee <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	e0ac      	b.n	800db48 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f000 f8b2 	bl	800db5c <DFSDM_GetChannelFromInstance>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	4a55      	ldr	r2, [pc, #340]	; (800db50 <HAL_DFSDM_ChannelInit+0x174>)
 800d9fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d001      	beq.n	800da08 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800da04:	2301      	movs	r3, #1
 800da06:	e09f      	b.n	800db48 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f7f3 fd17 	bl	800143c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800da0e:	4b51      	ldr	r3, [pc, #324]	; (800db54 <HAL_DFSDM_ChannelInit+0x178>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	3301      	adds	r3, #1
 800da14:	4a4f      	ldr	r2, [pc, #316]	; (800db54 <HAL_DFSDM_ChannelInit+0x178>)
 800da16:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800da18:	4b4e      	ldr	r3, [pc, #312]	; (800db54 <HAL_DFSDM_ChannelInit+0x178>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d125      	bne.n	800da6c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800da20:	4b4d      	ldr	r3, [pc, #308]	; (800db58 <HAL_DFSDM_ChannelInit+0x17c>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4a4c      	ldr	r2, [pc, #304]	; (800db58 <HAL_DFSDM_ChannelInit+0x17c>)
 800da26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800da2a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800da2c:	4b4a      	ldr	r3, [pc, #296]	; (800db58 <HAL_DFSDM_ChannelInit+0x17c>)
 800da2e:	681a      	ldr	r2, [r3, #0]
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	689b      	ldr	r3, [r3, #8]
 800da34:	4948      	ldr	r1, [pc, #288]	; (800db58 <HAL_DFSDM_ChannelInit+0x17c>)
 800da36:	4313      	orrs	r3, r2
 800da38:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800da3a:	4b47      	ldr	r3, [pc, #284]	; (800db58 <HAL_DFSDM_ChannelInit+0x17c>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	4a46      	ldr	r2, [pc, #280]	; (800db58 <HAL_DFSDM_ChannelInit+0x17c>)
 800da40:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800da44:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	791b      	ldrb	r3, [r3, #4]
 800da4a:	2b01      	cmp	r3, #1
 800da4c:	d108      	bne.n	800da60 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800da4e:	4b42      	ldr	r3, [pc, #264]	; (800db58 <HAL_DFSDM_ChannelInit+0x17c>)
 800da50:	681a      	ldr	r2, [r3, #0]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	68db      	ldr	r3, [r3, #12]
 800da56:	3b01      	subs	r3, #1
 800da58:	041b      	lsls	r3, r3, #16
 800da5a:	493f      	ldr	r1, [pc, #252]	; (800db58 <HAL_DFSDM_ChannelInit+0x17c>)
 800da5c:	4313      	orrs	r3, r2
 800da5e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800da60:	4b3d      	ldr	r3, [pc, #244]	; (800db58 <HAL_DFSDM_ChannelInit+0x17c>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	4a3c      	ldr	r2, [pc, #240]	; (800db58 <HAL_DFSDM_ChannelInit+0x17c>)
 800da66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800da6a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	681a      	ldr	r2, [r3, #0]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800da7a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	6819      	ldr	r1, [r3, #0]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800da8a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800da90:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	430a      	orrs	r2, r1
 800da98:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	681a      	ldr	r2, [r3, #0]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f022 020f 	bic.w	r2, r2, #15
 800daa8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	6819      	ldr	r1, [r3, #0]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800dab8:	431a      	orrs	r2, r3
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	430a      	orrs	r2, r1
 800dac0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	689a      	ldr	r2, [r3, #8]
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800dad0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	6899      	ldr	r1, [r3, #8]
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dae0:	3b01      	subs	r3, #1
 800dae2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800dae4:	431a      	orrs	r2, r3
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	430a      	orrs	r2, r1
 800daec:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	685a      	ldr	r2, [r3, #4]
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f002 0207 	and.w	r2, r2, #7
 800dafc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	6859      	ldr	r1, [r3, #4]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db08:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db0e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800db10:	431a      	orrs	r2, r3
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	430a      	orrs	r2, r1
 800db18:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	681a      	ldr	r2, [r3, #0]
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800db28:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2201      	movs	r2, #1
 800db2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	4618      	mov	r0, r3
 800db38:	f000 f810 	bl	800db5c <DFSDM_GetChannelFromInstance>
 800db3c:	4602      	mov	r2, r0
 800db3e:	4904      	ldr	r1, [pc, #16]	; (800db50 <HAL_DFSDM_ChannelInit+0x174>)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800db46:	2300      	movs	r3, #0
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3708      	adds	r7, #8
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}
 800db50:	20001c00 	.word	0x20001c00
 800db54:	20001bfc 	.word	0x20001bfc
 800db58:	40016000 	.word	0x40016000

0800db5c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800db5c:	b480      	push	{r7}
 800db5e:	b085      	sub	sp, #20
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	4a1c      	ldr	r2, [pc, #112]	; (800dbd8 <DFSDM_GetChannelFromInstance+0x7c>)
 800db68:	4293      	cmp	r3, r2
 800db6a:	d102      	bne.n	800db72 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800db6c:	2300      	movs	r3, #0
 800db6e:	60fb      	str	r3, [r7, #12]
 800db70:	e02b      	b.n	800dbca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	4a19      	ldr	r2, [pc, #100]	; (800dbdc <DFSDM_GetChannelFromInstance+0x80>)
 800db76:	4293      	cmp	r3, r2
 800db78:	d102      	bne.n	800db80 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800db7a:	2301      	movs	r3, #1
 800db7c:	60fb      	str	r3, [r7, #12]
 800db7e:	e024      	b.n	800dbca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	4a17      	ldr	r2, [pc, #92]	; (800dbe0 <DFSDM_GetChannelFromInstance+0x84>)
 800db84:	4293      	cmp	r3, r2
 800db86:	d102      	bne.n	800db8e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800db88:	2302      	movs	r3, #2
 800db8a:	60fb      	str	r3, [r7, #12]
 800db8c:	e01d      	b.n	800dbca <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	4a14      	ldr	r2, [pc, #80]	; (800dbe4 <DFSDM_GetChannelFromInstance+0x88>)
 800db92:	4293      	cmp	r3, r2
 800db94:	d102      	bne.n	800db9c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800db96:	2304      	movs	r3, #4
 800db98:	60fb      	str	r3, [r7, #12]
 800db9a:	e016      	b.n	800dbca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	4a12      	ldr	r2, [pc, #72]	; (800dbe8 <DFSDM_GetChannelFromInstance+0x8c>)
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d102      	bne.n	800dbaa <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800dba4:	2305      	movs	r3, #5
 800dba6:	60fb      	str	r3, [r7, #12]
 800dba8:	e00f      	b.n	800dbca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	4a0f      	ldr	r2, [pc, #60]	; (800dbec <DFSDM_GetChannelFromInstance+0x90>)
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	d102      	bne.n	800dbb8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800dbb2:	2306      	movs	r3, #6
 800dbb4:	60fb      	str	r3, [r7, #12]
 800dbb6:	e008      	b.n	800dbca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	4a0d      	ldr	r2, [pc, #52]	; (800dbf0 <DFSDM_GetChannelFromInstance+0x94>)
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d102      	bne.n	800dbc6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800dbc0:	2307      	movs	r3, #7
 800dbc2:	60fb      	str	r3, [r7, #12]
 800dbc4:	e001      	b.n	800dbca <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800dbc6:	2303      	movs	r3, #3
 800dbc8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800dbca:	68fb      	ldr	r3, [r7, #12]
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3714      	adds	r7, #20
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd6:	4770      	bx	lr
 800dbd8:	40016000 	.word	0x40016000
 800dbdc:	40016020 	.word	0x40016020
 800dbe0:	40016040 	.word	0x40016040
 800dbe4:	40016080 	.word	0x40016080
 800dbe8:	400160a0 	.word	0x400160a0
 800dbec:	400160c0 	.word	0x400160c0
 800dbf0:	400160e0 	.word	0x400160e0

0800dbf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b087      	sub	sp, #28
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800dc02:	e166      	b.n	800ded2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	681a      	ldr	r2, [r3, #0]
 800dc08:	2101      	movs	r1, #1
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	fa01 f303 	lsl.w	r3, r1, r3
 800dc10:	4013      	ands	r3, r2
 800dc12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	f000 8158 	beq.w	800decc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	f003 0303 	and.w	r3, r3, #3
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d005      	beq.n	800dc34 <HAL_GPIO_Init+0x40>
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	685b      	ldr	r3, [r3, #4]
 800dc2c:	f003 0303 	and.w	r3, r3, #3
 800dc30:	2b02      	cmp	r3, #2
 800dc32:	d130      	bne.n	800dc96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	689b      	ldr	r3, [r3, #8]
 800dc38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	005b      	lsls	r3, r3, #1
 800dc3e:	2203      	movs	r2, #3
 800dc40:	fa02 f303 	lsl.w	r3, r2, r3
 800dc44:	43db      	mvns	r3, r3
 800dc46:	693a      	ldr	r2, [r7, #16]
 800dc48:	4013      	ands	r3, r2
 800dc4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	68da      	ldr	r2, [r3, #12]
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	005b      	lsls	r3, r3, #1
 800dc54:	fa02 f303 	lsl.w	r3, r2, r3
 800dc58:	693a      	ldr	r2, [r7, #16]
 800dc5a:	4313      	orrs	r3, r2
 800dc5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	693a      	ldr	r2, [r7, #16]
 800dc62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	685b      	ldr	r3, [r3, #4]
 800dc68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	fa02 f303 	lsl.w	r3, r2, r3
 800dc72:	43db      	mvns	r3, r3
 800dc74:	693a      	ldr	r2, [r7, #16]
 800dc76:	4013      	ands	r3, r2
 800dc78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	685b      	ldr	r3, [r3, #4]
 800dc7e:	091b      	lsrs	r3, r3, #4
 800dc80:	f003 0201 	and.w	r2, r3, #1
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	fa02 f303 	lsl.w	r3, r2, r3
 800dc8a:	693a      	ldr	r2, [r7, #16]
 800dc8c:	4313      	orrs	r3, r2
 800dc8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	693a      	ldr	r2, [r7, #16]
 800dc94:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	f003 0303 	and.w	r3, r3, #3
 800dc9e:	2b03      	cmp	r3, #3
 800dca0:	d017      	beq.n	800dcd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	68db      	ldr	r3, [r3, #12]
 800dca6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	005b      	lsls	r3, r3, #1
 800dcac:	2203      	movs	r2, #3
 800dcae:	fa02 f303 	lsl.w	r3, r2, r3
 800dcb2:	43db      	mvns	r3, r3
 800dcb4:	693a      	ldr	r2, [r7, #16]
 800dcb6:	4013      	ands	r3, r2
 800dcb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	689a      	ldr	r2, [r3, #8]
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	005b      	lsls	r3, r3, #1
 800dcc2:	fa02 f303 	lsl.w	r3, r2, r3
 800dcc6:	693a      	ldr	r2, [r7, #16]
 800dcc8:	4313      	orrs	r3, r2
 800dcca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	693a      	ldr	r2, [r7, #16]
 800dcd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	685b      	ldr	r3, [r3, #4]
 800dcd6:	f003 0303 	and.w	r3, r3, #3
 800dcda:	2b02      	cmp	r3, #2
 800dcdc:	d123      	bne.n	800dd26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	08da      	lsrs	r2, r3, #3
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	3208      	adds	r2, #8
 800dce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	f003 0307 	and.w	r3, r3, #7
 800dcf2:	009b      	lsls	r3, r3, #2
 800dcf4:	220f      	movs	r2, #15
 800dcf6:	fa02 f303 	lsl.w	r3, r2, r3
 800dcfa:	43db      	mvns	r3, r3
 800dcfc:	693a      	ldr	r2, [r7, #16]
 800dcfe:	4013      	ands	r3, r2
 800dd00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	691a      	ldr	r2, [r3, #16]
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	f003 0307 	and.w	r3, r3, #7
 800dd0c:	009b      	lsls	r3, r3, #2
 800dd0e:	fa02 f303 	lsl.w	r3, r2, r3
 800dd12:	693a      	ldr	r2, [r7, #16]
 800dd14:	4313      	orrs	r3, r2
 800dd16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	08da      	lsrs	r2, r3, #3
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	3208      	adds	r2, #8
 800dd20:	6939      	ldr	r1, [r7, #16]
 800dd22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	005b      	lsls	r3, r3, #1
 800dd30:	2203      	movs	r2, #3
 800dd32:	fa02 f303 	lsl.w	r3, r2, r3
 800dd36:	43db      	mvns	r3, r3
 800dd38:	693a      	ldr	r2, [r7, #16]
 800dd3a:	4013      	ands	r3, r2
 800dd3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	f003 0203 	and.w	r2, r3, #3
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	005b      	lsls	r3, r3, #1
 800dd4a:	fa02 f303 	lsl.w	r3, r2, r3
 800dd4e:	693a      	ldr	r2, [r7, #16]
 800dd50:	4313      	orrs	r3, r2
 800dd52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	693a      	ldr	r2, [r7, #16]
 800dd58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	f000 80b2 	beq.w	800decc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dd68:	4b61      	ldr	r3, [pc, #388]	; (800def0 <HAL_GPIO_Init+0x2fc>)
 800dd6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd6c:	4a60      	ldr	r2, [pc, #384]	; (800def0 <HAL_GPIO_Init+0x2fc>)
 800dd6e:	f043 0301 	orr.w	r3, r3, #1
 800dd72:	6613      	str	r3, [r2, #96]	; 0x60
 800dd74:	4b5e      	ldr	r3, [pc, #376]	; (800def0 <HAL_GPIO_Init+0x2fc>)
 800dd76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd78:	f003 0301 	and.w	r3, r3, #1
 800dd7c:	60bb      	str	r3, [r7, #8]
 800dd7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800dd80:	4a5c      	ldr	r2, [pc, #368]	; (800def4 <HAL_GPIO_Init+0x300>)
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	089b      	lsrs	r3, r3, #2
 800dd86:	3302      	adds	r3, #2
 800dd88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	f003 0303 	and.w	r3, r3, #3
 800dd94:	009b      	lsls	r3, r3, #2
 800dd96:	220f      	movs	r2, #15
 800dd98:	fa02 f303 	lsl.w	r3, r2, r3
 800dd9c:	43db      	mvns	r3, r3
 800dd9e:	693a      	ldr	r2, [r7, #16]
 800dda0:	4013      	ands	r3, r2
 800dda2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800ddaa:	d02b      	beq.n	800de04 <HAL_GPIO_Init+0x210>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	4a52      	ldr	r2, [pc, #328]	; (800def8 <HAL_GPIO_Init+0x304>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d025      	beq.n	800de00 <HAL_GPIO_Init+0x20c>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	4a51      	ldr	r2, [pc, #324]	; (800defc <HAL_GPIO_Init+0x308>)
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d01f      	beq.n	800ddfc <HAL_GPIO_Init+0x208>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	4a50      	ldr	r2, [pc, #320]	; (800df00 <HAL_GPIO_Init+0x30c>)
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	d019      	beq.n	800ddf8 <HAL_GPIO_Init+0x204>
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	4a4f      	ldr	r2, [pc, #316]	; (800df04 <HAL_GPIO_Init+0x310>)
 800ddc8:	4293      	cmp	r3, r2
 800ddca:	d013      	beq.n	800ddf4 <HAL_GPIO_Init+0x200>
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	4a4e      	ldr	r2, [pc, #312]	; (800df08 <HAL_GPIO_Init+0x314>)
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	d00d      	beq.n	800ddf0 <HAL_GPIO_Init+0x1fc>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	4a4d      	ldr	r2, [pc, #308]	; (800df0c <HAL_GPIO_Init+0x318>)
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d007      	beq.n	800ddec <HAL_GPIO_Init+0x1f8>
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	4a4c      	ldr	r2, [pc, #304]	; (800df10 <HAL_GPIO_Init+0x31c>)
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d101      	bne.n	800dde8 <HAL_GPIO_Init+0x1f4>
 800dde4:	2307      	movs	r3, #7
 800dde6:	e00e      	b.n	800de06 <HAL_GPIO_Init+0x212>
 800dde8:	2308      	movs	r3, #8
 800ddea:	e00c      	b.n	800de06 <HAL_GPIO_Init+0x212>
 800ddec:	2306      	movs	r3, #6
 800ddee:	e00a      	b.n	800de06 <HAL_GPIO_Init+0x212>
 800ddf0:	2305      	movs	r3, #5
 800ddf2:	e008      	b.n	800de06 <HAL_GPIO_Init+0x212>
 800ddf4:	2304      	movs	r3, #4
 800ddf6:	e006      	b.n	800de06 <HAL_GPIO_Init+0x212>
 800ddf8:	2303      	movs	r3, #3
 800ddfa:	e004      	b.n	800de06 <HAL_GPIO_Init+0x212>
 800ddfc:	2302      	movs	r3, #2
 800ddfe:	e002      	b.n	800de06 <HAL_GPIO_Init+0x212>
 800de00:	2301      	movs	r3, #1
 800de02:	e000      	b.n	800de06 <HAL_GPIO_Init+0x212>
 800de04:	2300      	movs	r3, #0
 800de06:	697a      	ldr	r2, [r7, #20]
 800de08:	f002 0203 	and.w	r2, r2, #3
 800de0c:	0092      	lsls	r2, r2, #2
 800de0e:	4093      	lsls	r3, r2
 800de10:	693a      	ldr	r2, [r7, #16]
 800de12:	4313      	orrs	r3, r2
 800de14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800de16:	4937      	ldr	r1, [pc, #220]	; (800def4 <HAL_GPIO_Init+0x300>)
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	089b      	lsrs	r3, r3, #2
 800de1c:	3302      	adds	r3, #2
 800de1e:	693a      	ldr	r2, [r7, #16]
 800de20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800de24:	4b3b      	ldr	r3, [pc, #236]	; (800df14 <HAL_GPIO_Init+0x320>)
 800de26:	689b      	ldr	r3, [r3, #8]
 800de28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	43db      	mvns	r3, r3
 800de2e:	693a      	ldr	r2, [r7, #16]
 800de30:	4013      	ands	r3, r2
 800de32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	685b      	ldr	r3, [r3, #4]
 800de38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d003      	beq.n	800de48 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800de40:	693a      	ldr	r2, [r7, #16]
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	4313      	orrs	r3, r2
 800de46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800de48:	4a32      	ldr	r2, [pc, #200]	; (800df14 <HAL_GPIO_Init+0x320>)
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800de4e:	4b31      	ldr	r3, [pc, #196]	; (800df14 <HAL_GPIO_Init+0x320>)
 800de50:	68db      	ldr	r3, [r3, #12]
 800de52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	43db      	mvns	r3, r3
 800de58:	693a      	ldr	r2, [r7, #16]
 800de5a:	4013      	ands	r3, r2
 800de5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800de66:	2b00      	cmp	r3, #0
 800de68:	d003      	beq.n	800de72 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800de6a:	693a      	ldr	r2, [r7, #16]
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	4313      	orrs	r3, r2
 800de70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800de72:	4a28      	ldr	r2, [pc, #160]	; (800df14 <HAL_GPIO_Init+0x320>)
 800de74:	693b      	ldr	r3, [r7, #16]
 800de76:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800de78:	4b26      	ldr	r3, [pc, #152]	; (800df14 <HAL_GPIO_Init+0x320>)
 800de7a:	685b      	ldr	r3, [r3, #4]
 800de7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	43db      	mvns	r3, r3
 800de82:	693a      	ldr	r2, [r7, #16]
 800de84:	4013      	ands	r3, r2
 800de86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de90:	2b00      	cmp	r3, #0
 800de92:	d003      	beq.n	800de9c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800de94:	693a      	ldr	r2, [r7, #16]
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	4313      	orrs	r3, r2
 800de9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800de9c:	4a1d      	ldr	r2, [pc, #116]	; (800df14 <HAL_GPIO_Init+0x320>)
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800dea2:	4b1c      	ldr	r3, [pc, #112]	; (800df14 <HAL_GPIO_Init+0x320>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	43db      	mvns	r3, r3
 800deac:	693a      	ldr	r2, [r7, #16]
 800deae:	4013      	ands	r3, r2
 800deb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800deba:	2b00      	cmp	r3, #0
 800debc:	d003      	beq.n	800dec6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800debe:	693a      	ldr	r2, [r7, #16]
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	4313      	orrs	r3, r2
 800dec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800dec6:	4a13      	ldr	r2, [pc, #76]	; (800df14 <HAL_GPIO_Init+0x320>)
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	3301      	adds	r3, #1
 800ded0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	681a      	ldr	r2, [r3, #0]
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	fa22 f303 	lsr.w	r3, r2, r3
 800dedc:	2b00      	cmp	r3, #0
 800dede:	f47f ae91 	bne.w	800dc04 <HAL_GPIO_Init+0x10>
  }
}
 800dee2:	bf00      	nop
 800dee4:	bf00      	nop
 800dee6:	371c      	adds	r7, #28
 800dee8:	46bd      	mov	sp, r7
 800deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deee:	4770      	bx	lr
 800def0:	40021000 	.word	0x40021000
 800def4:	40010000 	.word	0x40010000
 800def8:	48000400 	.word	0x48000400
 800defc:	48000800 	.word	0x48000800
 800df00:	48000c00 	.word	0x48000c00
 800df04:	48001000 	.word	0x48001000
 800df08:	48001400 	.word	0x48001400
 800df0c:	48001800 	.word	0x48001800
 800df10:	48001c00 	.word	0x48001c00
 800df14:	40010400 	.word	0x40010400

0800df18 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800df18:	b480      	push	{r7}
 800df1a:	b087      	sub	sp, #28
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
 800df20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800df22:	2300      	movs	r3, #0
 800df24:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800df26:	e0c9      	b.n	800e0bc <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800df28:	2201      	movs	r2, #1
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	fa02 f303 	lsl.w	r3, r2, r3
 800df30:	683a      	ldr	r2, [r7, #0]
 800df32:	4013      	ands	r3, r2
 800df34:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	f000 80bc 	beq.w	800e0b6 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800df3e:	4a66      	ldr	r2, [pc, #408]	; (800e0d8 <HAL_GPIO_DeInit+0x1c0>)
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	089b      	lsrs	r3, r3, #2
 800df44:	3302      	adds	r3, #2
 800df46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df4a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	f003 0303 	and.w	r3, r3, #3
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	220f      	movs	r2, #15
 800df56:	fa02 f303 	lsl.w	r3, r2, r3
 800df5a:	68fa      	ldr	r2, [r7, #12]
 800df5c:	4013      	ands	r3, r2
 800df5e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800df66:	d02b      	beq.n	800dfc0 <HAL_GPIO_DeInit+0xa8>
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	4a5c      	ldr	r2, [pc, #368]	; (800e0dc <HAL_GPIO_DeInit+0x1c4>)
 800df6c:	4293      	cmp	r3, r2
 800df6e:	d025      	beq.n	800dfbc <HAL_GPIO_DeInit+0xa4>
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	4a5b      	ldr	r2, [pc, #364]	; (800e0e0 <HAL_GPIO_DeInit+0x1c8>)
 800df74:	4293      	cmp	r3, r2
 800df76:	d01f      	beq.n	800dfb8 <HAL_GPIO_DeInit+0xa0>
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	4a5a      	ldr	r2, [pc, #360]	; (800e0e4 <HAL_GPIO_DeInit+0x1cc>)
 800df7c:	4293      	cmp	r3, r2
 800df7e:	d019      	beq.n	800dfb4 <HAL_GPIO_DeInit+0x9c>
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	4a59      	ldr	r2, [pc, #356]	; (800e0e8 <HAL_GPIO_DeInit+0x1d0>)
 800df84:	4293      	cmp	r3, r2
 800df86:	d013      	beq.n	800dfb0 <HAL_GPIO_DeInit+0x98>
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	4a58      	ldr	r2, [pc, #352]	; (800e0ec <HAL_GPIO_DeInit+0x1d4>)
 800df8c:	4293      	cmp	r3, r2
 800df8e:	d00d      	beq.n	800dfac <HAL_GPIO_DeInit+0x94>
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	4a57      	ldr	r2, [pc, #348]	; (800e0f0 <HAL_GPIO_DeInit+0x1d8>)
 800df94:	4293      	cmp	r3, r2
 800df96:	d007      	beq.n	800dfa8 <HAL_GPIO_DeInit+0x90>
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	4a56      	ldr	r2, [pc, #344]	; (800e0f4 <HAL_GPIO_DeInit+0x1dc>)
 800df9c:	4293      	cmp	r3, r2
 800df9e:	d101      	bne.n	800dfa4 <HAL_GPIO_DeInit+0x8c>
 800dfa0:	2307      	movs	r3, #7
 800dfa2:	e00e      	b.n	800dfc2 <HAL_GPIO_DeInit+0xaa>
 800dfa4:	2308      	movs	r3, #8
 800dfa6:	e00c      	b.n	800dfc2 <HAL_GPIO_DeInit+0xaa>
 800dfa8:	2306      	movs	r3, #6
 800dfaa:	e00a      	b.n	800dfc2 <HAL_GPIO_DeInit+0xaa>
 800dfac:	2305      	movs	r3, #5
 800dfae:	e008      	b.n	800dfc2 <HAL_GPIO_DeInit+0xaa>
 800dfb0:	2304      	movs	r3, #4
 800dfb2:	e006      	b.n	800dfc2 <HAL_GPIO_DeInit+0xaa>
 800dfb4:	2303      	movs	r3, #3
 800dfb6:	e004      	b.n	800dfc2 <HAL_GPIO_DeInit+0xaa>
 800dfb8:	2302      	movs	r3, #2
 800dfba:	e002      	b.n	800dfc2 <HAL_GPIO_DeInit+0xaa>
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	e000      	b.n	800dfc2 <HAL_GPIO_DeInit+0xaa>
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	697a      	ldr	r2, [r7, #20]
 800dfc4:	f002 0203 	and.w	r2, r2, #3
 800dfc8:	0092      	lsls	r2, r2, #2
 800dfca:	4093      	lsls	r3, r2
 800dfcc:	68fa      	ldr	r2, [r7, #12]
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	d132      	bne.n	800e038 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800dfd2:	4b49      	ldr	r3, [pc, #292]	; (800e0f8 <HAL_GPIO_DeInit+0x1e0>)
 800dfd4:	681a      	ldr	r2, [r3, #0]
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	43db      	mvns	r3, r3
 800dfda:	4947      	ldr	r1, [pc, #284]	; (800e0f8 <HAL_GPIO_DeInit+0x1e0>)
 800dfdc:	4013      	ands	r3, r2
 800dfde:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800dfe0:	4b45      	ldr	r3, [pc, #276]	; (800e0f8 <HAL_GPIO_DeInit+0x1e0>)
 800dfe2:	685a      	ldr	r2, [r3, #4]
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	43db      	mvns	r3, r3
 800dfe8:	4943      	ldr	r1, [pc, #268]	; (800e0f8 <HAL_GPIO_DeInit+0x1e0>)
 800dfea:	4013      	ands	r3, r2
 800dfec:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800dfee:	4b42      	ldr	r3, [pc, #264]	; (800e0f8 <HAL_GPIO_DeInit+0x1e0>)
 800dff0:	68da      	ldr	r2, [r3, #12]
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	43db      	mvns	r3, r3
 800dff6:	4940      	ldr	r1, [pc, #256]	; (800e0f8 <HAL_GPIO_DeInit+0x1e0>)
 800dff8:	4013      	ands	r3, r2
 800dffa:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800dffc:	4b3e      	ldr	r3, [pc, #248]	; (800e0f8 <HAL_GPIO_DeInit+0x1e0>)
 800dffe:	689a      	ldr	r2, [r3, #8]
 800e000:	693b      	ldr	r3, [r7, #16]
 800e002:	43db      	mvns	r3, r3
 800e004:	493c      	ldr	r1, [pc, #240]	; (800e0f8 <HAL_GPIO_DeInit+0x1e0>)
 800e006:	4013      	ands	r3, r2
 800e008:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	f003 0303 	and.w	r3, r3, #3
 800e010:	009b      	lsls	r3, r3, #2
 800e012:	220f      	movs	r2, #15
 800e014:	fa02 f303 	lsl.w	r3, r2, r3
 800e018:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800e01a:	4a2f      	ldr	r2, [pc, #188]	; (800e0d8 <HAL_GPIO_DeInit+0x1c0>)
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	089b      	lsrs	r3, r3, #2
 800e020:	3302      	adds	r3, #2
 800e022:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	43da      	mvns	r2, r3
 800e02a:	482b      	ldr	r0, [pc, #172]	; (800e0d8 <HAL_GPIO_DeInit+0x1c0>)
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	089b      	lsrs	r3, r3, #2
 800e030:	400a      	ands	r2, r1
 800e032:	3302      	adds	r3, #2
 800e034:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681a      	ldr	r2, [r3, #0]
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	005b      	lsls	r3, r3, #1
 800e040:	2103      	movs	r1, #3
 800e042:	fa01 f303 	lsl.w	r3, r1, r3
 800e046:	431a      	orrs	r2, r3
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	08da      	lsrs	r2, r3, #3
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	3208      	adds	r2, #8
 800e054:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	f003 0307 	and.w	r3, r3, #7
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	220f      	movs	r2, #15
 800e062:	fa02 f303 	lsl.w	r3, r2, r3
 800e066:	43db      	mvns	r3, r3
 800e068:	697a      	ldr	r2, [r7, #20]
 800e06a:	08d2      	lsrs	r2, r2, #3
 800e06c:	4019      	ands	r1, r3
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	3208      	adds	r2, #8
 800e072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	689a      	ldr	r2, [r3, #8]
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	005b      	lsls	r3, r3, #1
 800e07e:	2103      	movs	r1, #3
 800e080:	fa01 f303 	lsl.w	r3, r1, r3
 800e084:	43db      	mvns	r3, r3
 800e086:	401a      	ands	r2, r3
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	685a      	ldr	r2, [r3, #4]
 800e090:	2101      	movs	r1, #1
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	fa01 f303 	lsl.w	r3, r1, r3
 800e098:	43db      	mvns	r3, r3
 800e09a:	401a      	ands	r2, r3
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	68da      	ldr	r2, [r3, #12]
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	005b      	lsls	r3, r3, #1
 800e0a8:	2103      	movs	r1, #3
 800e0aa:	fa01 f303 	lsl.w	r3, r1, r3
 800e0ae:	43db      	mvns	r3, r3
 800e0b0:	401a      	ands	r2, r3
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	3301      	adds	r3, #1
 800e0ba:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800e0bc:	683a      	ldr	r2, [r7, #0]
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	fa22 f303 	lsr.w	r3, r2, r3
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	f47f af2f 	bne.w	800df28 <HAL_GPIO_DeInit+0x10>
  }
}
 800e0ca:	bf00      	nop
 800e0cc:	bf00      	nop
 800e0ce:	371c      	adds	r7, #28
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d6:	4770      	bx	lr
 800e0d8:	40010000 	.word	0x40010000
 800e0dc:	48000400 	.word	0x48000400
 800e0e0:	48000800 	.word	0x48000800
 800e0e4:	48000c00 	.word	0x48000c00
 800e0e8:	48001000 	.word	0x48001000
 800e0ec:	48001400 	.word	0x48001400
 800e0f0:	48001800 	.word	0x48001800
 800e0f4:	48001c00 	.word	0x48001c00
 800e0f8:	40010400 	.word	0x40010400

0800e0fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b083      	sub	sp, #12
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	460b      	mov	r3, r1
 800e106:	807b      	strh	r3, [r7, #2]
 800e108:	4613      	mov	r3, r2
 800e10a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e10c:	787b      	ldrb	r3, [r7, #1]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d003      	beq.n	800e11a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800e112:	887a      	ldrh	r2, [r7, #2]
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800e118:	e002      	b.n	800e120 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800e11a:	887a      	ldrh	r2, [r7, #2]
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800e120:	bf00      	nop
 800e122:	370c      	adds	r7, #12
 800e124:	46bd      	mov	sp, r7
 800e126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12a:	4770      	bx	lr

0800e12c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b082      	sub	sp, #8
 800e130:	af00      	add	r7, sp, #0
 800e132:	4603      	mov	r3, r0
 800e134:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800e136:	4b08      	ldr	r3, [pc, #32]	; (800e158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e138:	695a      	ldr	r2, [r3, #20]
 800e13a:	88fb      	ldrh	r3, [r7, #6]
 800e13c:	4013      	ands	r3, r2
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d006      	beq.n	800e150 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e142:	4a05      	ldr	r2, [pc, #20]	; (800e158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e144:	88fb      	ldrh	r3, [r7, #6]
 800e146:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e148:	88fb      	ldrh	r3, [r7, #6]
 800e14a:	4618      	mov	r0, r3
 800e14c:	f7f4 fe1a 	bl	8002d84 <HAL_GPIO_EXTI_Callback>
  }
}
 800e150:	bf00      	nop
 800e152:	3708      	adds	r7, #8
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}
 800e158:	40010400 	.word	0x40010400

0800e15c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d101      	bne.n	800e16e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e16a:	2301      	movs	r3, #1
 800e16c:	e081      	b.n	800e272 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e174:	b2db      	uxtb	r3, r3
 800e176:	2b00      	cmp	r3, #0
 800e178:	d106      	bne.n	800e188 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2200      	movs	r2, #0
 800e17e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f7f3 fd48 	bl	8001c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2224      	movs	r2, #36	; 0x24
 800e18c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	681a      	ldr	r2, [r3, #0]
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f022 0201 	bic.w	r2, r2, #1
 800e19e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	685a      	ldr	r2, [r3, #4]
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800e1ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	689a      	ldr	r2, [r3, #8]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e1bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	68db      	ldr	r3, [r3, #12]
 800e1c2:	2b01      	cmp	r3, #1
 800e1c4:	d107      	bne.n	800e1d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	689a      	ldr	r2, [r3, #8]
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e1d2:	609a      	str	r2, [r3, #8]
 800e1d4:	e006      	b.n	800e1e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	689a      	ldr	r2, [r3, #8]
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800e1e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	68db      	ldr	r3, [r3, #12]
 800e1e8:	2b02      	cmp	r3, #2
 800e1ea:	d104      	bne.n	800e1f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e1f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	685b      	ldr	r3, [r3, #4]
 800e1fc:	687a      	ldr	r2, [r7, #4]
 800e1fe:	6812      	ldr	r2, [r2, #0]
 800e200:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e208:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	68da      	ldr	r2, [r3, #12]
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e218:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	691a      	ldr	r2, [r3, #16]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	695b      	ldr	r3, [r3, #20]
 800e222:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	699b      	ldr	r3, [r3, #24]
 800e22a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	430a      	orrs	r2, r1
 800e232:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	69d9      	ldr	r1, [r3, #28]
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6a1a      	ldr	r2, [r3, #32]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	430a      	orrs	r2, r1
 800e242:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	681a      	ldr	r2, [r3, #0]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f042 0201 	orr.w	r2, r2, #1
 800e252:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2200      	movs	r2, #0
 800e258:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2220      	movs	r2, #32
 800e25e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2200      	movs	r2, #0
 800e266:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2200      	movs	r2, #0
 800e26c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800e270:	2300      	movs	r3, #0
}
 800e272:	4618      	mov	r0, r3
 800e274:	3708      	adds	r7, #8
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}

0800e27a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800e27a:	b580      	push	{r7, lr}
 800e27c:	b082      	sub	sp, #8
 800e27e:	af00      	add	r7, sp, #0
 800e280:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d101      	bne.n	800e28c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800e288:	2301      	movs	r3, #1
 800e28a:	e021      	b.n	800e2d0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2224      	movs	r2, #36	; 0x24
 800e290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	681a      	ldr	r2, [r3, #0]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	f022 0201 	bic.w	r2, r2, #1
 800e2a2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f7f3 fd7d 	bl	8001da4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800e2ce:	2300      	movs	r3, #0
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3708      	adds	r7, #8
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}

0800e2d8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b088      	sub	sp, #32
 800e2dc:	af02      	add	r7, sp, #8
 800e2de:	60f8      	str	r0, [r7, #12]
 800e2e0:	607a      	str	r2, [r7, #4]
 800e2e2:	461a      	mov	r2, r3
 800e2e4:	460b      	mov	r3, r1
 800e2e6:	817b      	strh	r3, [r7, #10]
 800e2e8:	4613      	mov	r3, r2
 800e2ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e2f2:	b2db      	uxtb	r3, r3
 800e2f4:	2b20      	cmp	r3, #32
 800e2f6:	f040 80da 	bne.w	800e4ae <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e300:	2b01      	cmp	r3, #1
 800e302:	d101      	bne.n	800e308 <HAL_I2C_Master_Transmit+0x30>
 800e304:	2302      	movs	r3, #2
 800e306:	e0d3      	b.n	800e4b0 <HAL_I2C_Master_Transmit+0x1d8>
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	2201      	movs	r2, #1
 800e30c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e310:	f7fd feec 	bl	800c0ec <HAL_GetTick>
 800e314:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e316:	697b      	ldr	r3, [r7, #20]
 800e318:	9300      	str	r3, [sp, #0]
 800e31a:	2319      	movs	r3, #25
 800e31c:	2201      	movs	r2, #1
 800e31e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e322:	68f8      	ldr	r0, [r7, #12]
 800e324:	f000 fdd2 	bl	800eecc <I2C_WaitOnFlagUntilTimeout>
 800e328:	4603      	mov	r3, r0
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d001      	beq.n	800e332 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800e32e:	2301      	movs	r3, #1
 800e330:	e0be      	b.n	800e4b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2221      	movs	r2, #33	; 0x21
 800e336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2210      	movs	r2, #16
 800e33e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	2200      	movs	r2, #0
 800e346:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	687a      	ldr	r2, [r7, #4]
 800e34c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	893a      	ldrh	r2, [r7, #8]
 800e352:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	2200      	movs	r2, #0
 800e358:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e35e:	b29b      	uxth	r3, r3
 800e360:	2bff      	cmp	r3, #255	; 0xff
 800e362:	d90e      	bls.n	800e382 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	22ff      	movs	r2, #255	; 0xff
 800e368:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e36e:	b2da      	uxtb	r2, r3
 800e370:	8979      	ldrh	r1, [r7, #10]
 800e372:	4b51      	ldr	r3, [pc, #324]	; (800e4b8 <HAL_I2C_Master_Transmit+0x1e0>)
 800e374:	9300      	str	r3, [sp, #0]
 800e376:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e37a:	68f8      	ldr	r0, [r7, #12]
 800e37c:	f000 ffc8 	bl	800f310 <I2C_TransferConfig>
 800e380:	e06c      	b.n	800e45c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e386:	b29a      	uxth	r2, r3
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e390:	b2da      	uxtb	r2, r3
 800e392:	8979      	ldrh	r1, [r7, #10]
 800e394:	4b48      	ldr	r3, [pc, #288]	; (800e4b8 <HAL_I2C_Master_Transmit+0x1e0>)
 800e396:	9300      	str	r3, [sp, #0]
 800e398:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e39c:	68f8      	ldr	r0, [r7, #12]
 800e39e:	f000 ffb7 	bl	800f310 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800e3a2:	e05b      	b.n	800e45c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e3a4:	697a      	ldr	r2, [r7, #20]
 800e3a6:	6a39      	ldr	r1, [r7, #32]
 800e3a8:	68f8      	ldr	r0, [r7, #12]
 800e3aa:	f000 fdcf 	bl	800ef4c <I2C_WaitOnTXISFlagUntilTimeout>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d001      	beq.n	800e3b8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	e07b      	b.n	800e4b0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3bc:	781a      	ldrb	r2, [r3, #0]
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3c8:	1c5a      	adds	r2, r3, #1
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e3d2:	b29b      	uxth	r3, r3
 800e3d4:	3b01      	subs	r3, #1
 800e3d6:	b29a      	uxth	r2, r3
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3e0:	3b01      	subs	r3, #1
 800e3e2:	b29a      	uxth	r2, r3
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e3ec:	b29b      	uxth	r3, r3
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d034      	beq.n	800e45c <HAL_I2C_Master_Transmit+0x184>
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d130      	bne.n	800e45c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	9300      	str	r3, [sp, #0]
 800e3fe:	6a3b      	ldr	r3, [r7, #32]
 800e400:	2200      	movs	r2, #0
 800e402:	2180      	movs	r1, #128	; 0x80
 800e404:	68f8      	ldr	r0, [r7, #12]
 800e406:	f000 fd61 	bl	800eecc <I2C_WaitOnFlagUntilTimeout>
 800e40a:	4603      	mov	r3, r0
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d001      	beq.n	800e414 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800e410:	2301      	movs	r3, #1
 800e412:	e04d      	b.n	800e4b0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e418:	b29b      	uxth	r3, r3
 800e41a:	2bff      	cmp	r3, #255	; 0xff
 800e41c:	d90e      	bls.n	800e43c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	22ff      	movs	r2, #255	; 0xff
 800e422:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e428:	b2da      	uxtb	r2, r3
 800e42a:	8979      	ldrh	r1, [r7, #10]
 800e42c:	2300      	movs	r3, #0
 800e42e:	9300      	str	r3, [sp, #0]
 800e430:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e434:	68f8      	ldr	r0, [r7, #12]
 800e436:	f000 ff6b 	bl	800f310 <I2C_TransferConfig>
 800e43a:	e00f      	b.n	800e45c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e440:	b29a      	uxth	r2, r3
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e44a:	b2da      	uxtb	r2, r3
 800e44c:	8979      	ldrh	r1, [r7, #10]
 800e44e:	2300      	movs	r3, #0
 800e450:	9300      	str	r3, [sp, #0]
 800e452:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e456:	68f8      	ldr	r0, [r7, #12]
 800e458:	f000 ff5a 	bl	800f310 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e460:	b29b      	uxth	r3, r3
 800e462:	2b00      	cmp	r3, #0
 800e464:	d19e      	bne.n	800e3a4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e466:	697a      	ldr	r2, [r7, #20]
 800e468:	6a39      	ldr	r1, [r7, #32]
 800e46a:	68f8      	ldr	r0, [r7, #12]
 800e46c:	f000 fdae 	bl	800efcc <I2C_WaitOnSTOPFlagUntilTimeout>
 800e470:	4603      	mov	r3, r0
 800e472:	2b00      	cmp	r3, #0
 800e474:	d001      	beq.n	800e47a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800e476:	2301      	movs	r3, #1
 800e478:	e01a      	b.n	800e4b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	2220      	movs	r2, #32
 800e480:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	6859      	ldr	r1, [r3, #4]
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	681a      	ldr	r2, [r3, #0]
 800e48c:	4b0b      	ldr	r3, [pc, #44]	; (800e4bc <HAL_I2C_Master_Transmit+0x1e4>)
 800e48e:	400b      	ands	r3, r1
 800e490:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	2220      	movs	r2, #32
 800e496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	2200      	movs	r2, #0
 800e49e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	e000      	b.n	800e4b0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800e4ae:	2302      	movs	r3, #2
  }
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3718      	adds	r7, #24
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}
 800e4b8:	80002000 	.word	0x80002000
 800e4bc:	fe00e800 	.word	0xfe00e800

0800e4c0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b088      	sub	sp, #32
 800e4c4:	af02      	add	r7, sp, #8
 800e4c6:	60f8      	str	r0, [r7, #12]
 800e4c8:	607a      	str	r2, [r7, #4]
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	460b      	mov	r3, r1
 800e4ce:	817b      	strh	r3, [r7, #10]
 800e4d0:	4613      	mov	r3, r2
 800e4d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e4da:	b2db      	uxtb	r3, r3
 800e4dc:	2b20      	cmp	r3, #32
 800e4de:	f040 80db 	bne.w	800e698 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	d101      	bne.n	800e4f0 <HAL_I2C_Master_Receive+0x30>
 800e4ec:	2302      	movs	r3, #2
 800e4ee:	e0d4      	b.n	800e69a <HAL_I2C_Master_Receive+0x1da>
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2201      	movs	r2, #1
 800e4f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e4f8:	f7fd fdf8 	bl	800c0ec <HAL_GetTick>
 800e4fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	9300      	str	r3, [sp, #0]
 800e502:	2319      	movs	r3, #25
 800e504:	2201      	movs	r2, #1
 800e506:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e50a:	68f8      	ldr	r0, [r7, #12]
 800e50c:	f000 fcde 	bl	800eecc <I2C_WaitOnFlagUntilTimeout>
 800e510:	4603      	mov	r3, r0
 800e512:	2b00      	cmp	r3, #0
 800e514:	d001      	beq.n	800e51a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800e516:	2301      	movs	r3, #1
 800e518:	e0bf      	b.n	800e69a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	2222      	movs	r2, #34	; 0x22
 800e51e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2210      	movs	r2, #16
 800e526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	2200      	movs	r2, #0
 800e52e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	687a      	ldr	r2, [r7, #4]
 800e534:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	893a      	ldrh	r2, [r7, #8]
 800e53a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	2200      	movs	r2, #0
 800e540:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e546:	b29b      	uxth	r3, r3
 800e548:	2bff      	cmp	r3, #255	; 0xff
 800e54a:	d90e      	bls.n	800e56a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	22ff      	movs	r2, #255	; 0xff
 800e550:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e556:	b2da      	uxtb	r2, r3
 800e558:	8979      	ldrh	r1, [r7, #10]
 800e55a:	4b52      	ldr	r3, [pc, #328]	; (800e6a4 <HAL_I2C_Master_Receive+0x1e4>)
 800e55c:	9300      	str	r3, [sp, #0]
 800e55e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e562:	68f8      	ldr	r0, [r7, #12]
 800e564:	f000 fed4 	bl	800f310 <I2C_TransferConfig>
 800e568:	e06d      	b.n	800e646 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e56e:	b29a      	uxth	r2, r3
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e578:	b2da      	uxtb	r2, r3
 800e57a:	8979      	ldrh	r1, [r7, #10]
 800e57c:	4b49      	ldr	r3, [pc, #292]	; (800e6a4 <HAL_I2C_Master_Receive+0x1e4>)
 800e57e:	9300      	str	r3, [sp, #0]
 800e580:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e584:	68f8      	ldr	r0, [r7, #12]
 800e586:	f000 fec3 	bl	800f310 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800e58a:	e05c      	b.n	800e646 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e58c:	697a      	ldr	r2, [r7, #20]
 800e58e:	6a39      	ldr	r1, [r7, #32]
 800e590:	68f8      	ldr	r0, [r7, #12]
 800e592:	f000 fd57 	bl	800f044 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e596:	4603      	mov	r3, r0
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d001      	beq.n	800e5a0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800e59c:	2301      	movs	r3, #1
 800e59e:	e07c      	b.n	800e69a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5aa:	b2d2      	uxtb	r2, r2
 800e5ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5b2:	1c5a      	adds	r2, r3, #1
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e5bc:	3b01      	subs	r3, #1
 800e5be:	b29a      	uxth	r2, r3
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e5c8:	b29b      	uxth	r3, r3
 800e5ca:	3b01      	subs	r3, #1
 800e5cc:	b29a      	uxth	r2, r3
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e5d6:	b29b      	uxth	r3, r3
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d034      	beq.n	800e646 <HAL_I2C_Master_Receive+0x186>
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d130      	bne.n	800e646 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e5e4:	697b      	ldr	r3, [r7, #20]
 800e5e6:	9300      	str	r3, [sp, #0]
 800e5e8:	6a3b      	ldr	r3, [r7, #32]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	2180      	movs	r1, #128	; 0x80
 800e5ee:	68f8      	ldr	r0, [r7, #12]
 800e5f0:	f000 fc6c 	bl	800eecc <I2C_WaitOnFlagUntilTimeout>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d001      	beq.n	800e5fe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	e04d      	b.n	800e69a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e602:	b29b      	uxth	r3, r3
 800e604:	2bff      	cmp	r3, #255	; 0xff
 800e606:	d90e      	bls.n	800e626 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	22ff      	movs	r2, #255	; 0xff
 800e60c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e612:	b2da      	uxtb	r2, r3
 800e614:	8979      	ldrh	r1, [r7, #10]
 800e616:	2300      	movs	r3, #0
 800e618:	9300      	str	r3, [sp, #0]
 800e61a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e61e:	68f8      	ldr	r0, [r7, #12]
 800e620:	f000 fe76 	bl	800f310 <I2C_TransferConfig>
 800e624:	e00f      	b.n	800e646 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e62a:	b29a      	uxth	r2, r3
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e634:	b2da      	uxtb	r2, r3
 800e636:	8979      	ldrh	r1, [r7, #10]
 800e638:	2300      	movs	r3, #0
 800e63a:	9300      	str	r3, [sp, #0]
 800e63c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e640:	68f8      	ldr	r0, [r7, #12]
 800e642:	f000 fe65 	bl	800f310 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e64a:	b29b      	uxth	r3, r3
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d19d      	bne.n	800e58c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e650:	697a      	ldr	r2, [r7, #20]
 800e652:	6a39      	ldr	r1, [r7, #32]
 800e654:	68f8      	ldr	r0, [r7, #12]
 800e656:	f000 fcb9 	bl	800efcc <I2C_WaitOnSTOPFlagUntilTimeout>
 800e65a:	4603      	mov	r3, r0
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d001      	beq.n	800e664 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800e660:	2301      	movs	r3, #1
 800e662:	e01a      	b.n	800e69a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	2220      	movs	r2, #32
 800e66a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	6859      	ldr	r1, [r3, #4]
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	681a      	ldr	r2, [r3, #0]
 800e676:	4b0c      	ldr	r3, [pc, #48]	; (800e6a8 <HAL_I2C_Master_Receive+0x1e8>)
 800e678:	400b      	ands	r3, r1
 800e67a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2220      	movs	r2, #32
 800e680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	2200      	movs	r2, #0
 800e688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	2200      	movs	r2, #0
 800e690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e694:	2300      	movs	r3, #0
 800e696:	e000      	b.n	800e69a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800e698:	2302      	movs	r3, #2
  }
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3718      	adds	r7, #24
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	80002400 	.word	0x80002400
 800e6a8:	fe00e800 	.word	0xfe00e800

0800e6ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b088      	sub	sp, #32
 800e6b0:	af02      	add	r7, sp, #8
 800e6b2:	60f8      	str	r0, [r7, #12]
 800e6b4:	4608      	mov	r0, r1
 800e6b6:	4611      	mov	r1, r2
 800e6b8:	461a      	mov	r2, r3
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	817b      	strh	r3, [r7, #10]
 800e6be:	460b      	mov	r3, r1
 800e6c0:	813b      	strh	r3, [r7, #8]
 800e6c2:	4613      	mov	r3, r2
 800e6c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e6cc:	b2db      	uxtb	r3, r3
 800e6ce:	2b20      	cmp	r3, #32
 800e6d0:	f040 80f9 	bne.w	800e8c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e6d4:	6a3b      	ldr	r3, [r7, #32]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d002      	beq.n	800e6e0 <HAL_I2C_Mem_Write+0x34>
 800e6da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d105      	bne.n	800e6ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e6e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	e0ed      	b.n	800e8c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d101      	bne.n	800e6fa <HAL_I2C_Mem_Write+0x4e>
 800e6f6:	2302      	movs	r3, #2
 800e6f8:	e0e6      	b.n	800e8c8 <HAL_I2C_Mem_Write+0x21c>
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2201      	movs	r2, #1
 800e6fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e702:	f7fd fcf3 	bl	800c0ec <HAL_GetTick>
 800e706:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	9300      	str	r3, [sp, #0]
 800e70c:	2319      	movs	r3, #25
 800e70e:	2201      	movs	r2, #1
 800e710:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e714:	68f8      	ldr	r0, [r7, #12]
 800e716:	f000 fbd9 	bl	800eecc <I2C_WaitOnFlagUntilTimeout>
 800e71a:	4603      	mov	r3, r0
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d001      	beq.n	800e724 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800e720:	2301      	movs	r3, #1
 800e722:	e0d1      	b.n	800e8c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	2221      	movs	r2, #33	; 0x21
 800e728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2240      	movs	r2, #64	; 0x40
 800e730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2200      	movs	r2, #0
 800e738:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	6a3a      	ldr	r2, [r7, #32]
 800e73e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e744:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2200      	movs	r2, #0
 800e74a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e74c:	88f8      	ldrh	r0, [r7, #6]
 800e74e:	893a      	ldrh	r2, [r7, #8]
 800e750:	8979      	ldrh	r1, [r7, #10]
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	9301      	str	r3, [sp, #4]
 800e756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e758:	9300      	str	r3, [sp, #0]
 800e75a:	4603      	mov	r3, r0
 800e75c:	68f8      	ldr	r0, [r7, #12]
 800e75e:	f000 fae9 	bl	800ed34 <I2C_RequestMemoryWrite>
 800e762:	4603      	mov	r3, r0
 800e764:	2b00      	cmp	r3, #0
 800e766:	d005      	beq.n	800e774 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	2200      	movs	r2, #0
 800e76c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800e770:	2301      	movs	r3, #1
 800e772:	e0a9      	b.n	800e8c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e778:	b29b      	uxth	r3, r3
 800e77a:	2bff      	cmp	r3, #255	; 0xff
 800e77c:	d90e      	bls.n	800e79c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	22ff      	movs	r2, #255	; 0xff
 800e782:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e788:	b2da      	uxtb	r2, r3
 800e78a:	8979      	ldrh	r1, [r7, #10]
 800e78c:	2300      	movs	r3, #0
 800e78e:	9300      	str	r3, [sp, #0]
 800e790:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e794:	68f8      	ldr	r0, [r7, #12]
 800e796:	f000 fdbb 	bl	800f310 <I2C_TransferConfig>
 800e79a:	e00f      	b.n	800e7bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e7a0:	b29a      	uxth	r2, r3
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e7aa:	b2da      	uxtb	r2, r3
 800e7ac:	8979      	ldrh	r1, [r7, #10]
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	9300      	str	r3, [sp, #0]
 800e7b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e7b6:	68f8      	ldr	r0, [r7, #12]
 800e7b8:	f000 fdaa 	bl	800f310 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e7bc:	697a      	ldr	r2, [r7, #20]
 800e7be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e7c0:	68f8      	ldr	r0, [r7, #12]
 800e7c2:	f000 fbc3 	bl	800ef4c <I2C_WaitOnTXISFlagUntilTimeout>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d001      	beq.n	800e7d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	e07b      	b.n	800e8c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7d4:	781a      	ldrb	r2, [r3, #0]
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7e0:	1c5a      	adds	r2, r3, #1
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	3b01      	subs	r3, #1
 800e7ee:	b29a      	uxth	r2, r3
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e7f8:	3b01      	subs	r3, #1
 800e7fa:	b29a      	uxth	r2, r3
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e804:	b29b      	uxth	r3, r3
 800e806:	2b00      	cmp	r3, #0
 800e808:	d034      	beq.n	800e874 <HAL_I2C_Mem_Write+0x1c8>
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d130      	bne.n	800e874 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	9300      	str	r3, [sp, #0]
 800e816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e818:	2200      	movs	r2, #0
 800e81a:	2180      	movs	r1, #128	; 0x80
 800e81c:	68f8      	ldr	r0, [r7, #12]
 800e81e:	f000 fb55 	bl	800eecc <I2C_WaitOnFlagUntilTimeout>
 800e822:	4603      	mov	r3, r0
 800e824:	2b00      	cmp	r3, #0
 800e826:	d001      	beq.n	800e82c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800e828:	2301      	movs	r3, #1
 800e82a:	e04d      	b.n	800e8c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e830:	b29b      	uxth	r3, r3
 800e832:	2bff      	cmp	r3, #255	; 0xff
 800e834:	d90e      	bls.n	800e854 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	22ff      	movs	r2, #255	; 0xff
 800e83a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e840:	b2da      	uxtb	r2, r3
 800e842:	8979      	ldrh	r1, [r7, #10]
 800e844:	2300      	movs	r3, #0
 800e846:	9300      	str	r3, [sp, #0]
 800e848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e84c:	68f8      	ldr	r0, [r7, #12]
 800e84e:	f000 fd5f 	bl	800f310 <I2C_TransferConfig>
 800e852:	e00f      	b.n	800e874 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e858:	b29a      	uxth	r2, r3
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e862:	b2da      	uxtb	r2, r3
 800e864:	8979      	ldrh	r1, [r7, #10]
 800e866:	2300      	movs	r3, #0
 800e868:	9300      	str	r3, [sp, #0]
 800e86a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e86e:	68f8      	ldr	r0, [r7, #12]
 800e870:	f000 fd4e 	bl	800f310 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e878:	b29b      	uxth	r3, r3
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d19e      	bne.n	800e7bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e87e:	697a      	ldr	r2, [r7, #20]
 800e880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e882:	68f8      	ldr	r0, [r7, #12]
 800e884:	f000 fba2 	bl	800efcc <I2C_WaitOnSTOPFlagUntilTimeout>
 800e888:	4603      	mov	r3, r0
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d001      	beq.n	800e892 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800e88e:	2301      	movs	r3, #1
 800e890:	e01a      	b.n	800e8c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	2220      	movs	r2, #32
 800e898:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	6859      	ldr	r1, [r3, #4]
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	681a      	ldr	r2, [r3, #0]
 800e8a4:	4b0a      	ldr	r3, [pc, #40]	; (800e8d0 <HAL_I2C_Mem_Write+0x224>)
 800e8a6:	400b      	ands	r3, r1
 800e8a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	2220      	movs	r2, #32
 800e8ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	2200      	movs	r2, #0
 800e8be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	e000      	b.n	800e8c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800e8c6:	2302      	movs	r3, #2
  }
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3718      	adds	r7, #24
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}
 800e8d0:	fe00e800 	.word	0xfe00e800

0800e8d4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b088      	sub	sp, #32
 800e8d8:	af02      	add	r7, sp, #8
 800e8da:	60f8      	str	r0, [r7, #12]
 800e8dc:	4608      	mov	r0, r1
 800e8de:	4611      	mov	r1, r2
 800e8e0:	461a      	mov	r2, r3
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	817b      	strh	r3, [r7, #10]
 800e8e6:	460b      	mov	r3, r1
 800e8e8:	813b      	strh	r3, [r7, #8]
 800e8ea:	4613      	mov	r3, r2
 800e8ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e8f4:	b2db      	uxtb	r3, r3
 800e8f6:	2b20      	cmp	r3, #32
 800e8f8:	f040 80fd 	bne.w	800eaf6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800e8fc:	6a3b      	ldr	r3, [r7, #32]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d002      	beq.n	800e908 <HAL_I2C_Mem_Read+0x34>
 800e902:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e904:	2b00      	cmp	r3, #0
 800e906:	d105      	bne.n	800e914 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e90e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800e910:	2301      	movs	r3, #1
 800e912:	e0f1      	b.n	800eaf8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e91a:	2b01      	cmp	r3, #1
 800e91c:	d101      	bne.n	800e922 <HAL_I2C_Mem_Read+0x4e>
 800e91e:	2302      	movs	r3, #2
 800e920:	e0ea      	b.n	800eaf8 <HAL_I2C_Mem_Read+0x224>
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	2201      	movs	r2, #1
 800e926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e92a:	f7fd fbdf 	bl	800c0ec <HAL_GetTick>
 800e92e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	9300      	str	r3, [sp, #0]
 800e934:	2319      	movs	r3, #25
 800e936:	2201      	movs	r2, #1
 800e938:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e93c:	68f8      	ldr	r0, [r7, #12]
 800e93e:	f000 fac5 	bl	800eecc <I2C_WaitOnFlagUntilTimeout>
 800e942:	4603      	mov	r3, r0
 800e944:	2b00      	cmp	r3, #0
 800e946:	d001      	beq.n	800e94c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800e948:	2301      	movs	r3, #1
 800e94a:	e0d5      	b.n	800eaf8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	2222      	movs	r2, #34	; 0x22
 800e950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2240      	movs	r2, #64	; 0x40
 800e958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	2200      	movs	r2, #0
 800e960:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	6a3a      	ldr	r2, [r7, #32]
 800e966:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e96c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2200      	movs	r2, #0
 800e972:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e974:	88f8      	ldrh	r0, [r7, #6]
 800e976:	893a      	ldrh	r2, [r7, #8]
 800e978:	8979      	ldrh	r1, [r7, #10]
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	9301      	str	r3, [sp, #4]
 800e97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e980:	9300      	str	r3, [sp, #0]
 800e982:	4603      	mov	r3, r0
 800e984:	68f8      	ldr	r0, [r7, #12]
 800e986:	f000 fa29 	bl	800eddc <I2C_RequestMemoryRead>
 800e98a:	4603      	mov	r3, r0
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d005      	beq.n	800e99c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2200      	movs	r2, #0
 800e994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800e998:	2301      	movs	r3, #1
 800e99a:	e0ad      	b.n	800eaf8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e9a0:	b29b      	uxth	r3, r3
 800e9a2:	2bff      	cmp	r3, #255	; 0xff
 800e9a4:	d90e      	bls.n	800e9c4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	22ff      	movs	r2, #255	; 0xff
 800e9aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e9b0:	b2da      	uxtb	r2, r3
 800e9b2:	8979      	ldrh	r1, [r7, #10]
 800e9b4:	4b52      	ldr	r3, [pc, #328]	; (800eb00 <HAL_I2C_Mem_Read+0x22c>)
 800e9b6:	9300      	str	r3, [sp, #0]
 800e9b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e9bc:	68f8      	ldr	r0, [r7, #12]
 800e9be:	f000 fca7 	bl	800f310 <I2C_TransferConfig>
 800e9c2:	e00f      	b.n	800e9e4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e9c8:	b29a      	uxth	r2, r3
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e9d2:	b2da      	uxtb	r2, r3
 800e9d4:	8979      	ldrh	r1, [r7, #10]
 800e9d6:	4b4a      	ldr	r3, [pc, #296]	; (800eb00 <HAL_I2C_Mem_Read+0x22c>)
 800e9d8:	9300      	str	r3, [sp, #0]
 800e9da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e9de:	68f8      	ldr	r0, [r7, #12]
 800e9e0:	f000 fc96 	bl	800f310 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	9300      	str	r3, [sp, #0]
 800e9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	2104      	movs	r1, #4
 800e9ee:	68f8      	ldr	r0, [r7, #12]
 800e9f0:	f000 fa6c 	bl	800eecc <I2C_WaitOnFlagUntilTimeout>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d001      	beq.n	800e9fe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	e07c      	b.n	800eaf8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea08:	b2d2      	uxtb	r2, r2
 800ea0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea10:	1c5a      	adds	r2, r3, #1
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea1a:	3b01      	subs	r3, #1
 800ea1c:	b29a      	uxth	r2, r3
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea26:	b29b      	uxth	r3, r3
 800ea28:	3b01      	subs	r3, #1
 800ea2a:	b29a      	uxth	r2, r3
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea34:	b29b      	uxth	r3, r3
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d034      	beq.n	800eaa4 <HAL_I2C_Mem_Read+0x1d0>
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d130      	bne.n	800eaa4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	9300      	str	r3, [sp, #0]
 800ea46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea48:	2200      	movs	r2, #0
 800ea4a:	2180      	movs	r1, #128	; 0x80
 800ea4c:	68f8      	ldr	r0, [r7, #12]
 800ea4e:	f000 fa3d 	bl	800eecc <I2C_WaitOnFlagUntilTimeout>
 800ea52:	4603      	mov	r3, r0
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d001      	beq.n	800ea5c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ea58:	2301      	movs	r3, #1
 800ea5a:	e04d      	b.n	800eaf8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea60:	b29b      	uxth	r3, r3
 800ea62:	2bff      	cmp	r3, #255	; 0xff
 800ea64:	d90e      	bls.n	800ea84 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	22ff      	movs	r2, #255	; 0xff
 800ea6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea70:	b2da      	uxtb	r2, r3
 800ea72:	8979      	ldrh	r1, [r7, #10]
 800ea74:	2300      	movs	r3, #0
 800ea76:	9300      	str	r3, [sp, #0]
 800ea78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ea7c:	68f8      	ldr	r0, [r7, #12]
 800ea7e:	f000 fc47 	bl	800f310 <I2C_TransferConfig>
 800ea82:	e00f      	b.n	800eaa4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea88:	b29a      	uxth	r2, r3
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea92:	b2da      	uxtb	r2, r3
 800ea94:	8979      	ldrh	r1, [r7, #10]
 800ea96:	2300      	movs	r3, #0
 800ea98:	9300      	str	r3, [sp, #0]
 800ea9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ea9e:	68f8      	ldr	r0, [r7, #12]
 800eaa0:	f000 fc36 	bl	800f310 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eaa8:	b29b      	uxth	r3, r3
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d19a      	bne.n	800e9e4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eaae:	697a      	ldr	r2, [r7, #20]
 800eab0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eab2:	68f8      	ldr	r0, [r7, #12]
 800eab4:	f000 fa8a 	bl	800efcc <I2C_WaitOnSTOPFlagUntilTimeout>
 800eab8:	4603      	mov	r3, r0
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d001      	beq.n	800eac2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800eabe:	2301      	movs	r3, #1
 800eac0:	e01a      	b.n	800eaf8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	2220      	movs	r2, #32
 800eac8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	6859      	ldr	r1, [r3, #4]
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	681a      	ldr	r2, [r3, #0]
 800ead4:	4b0b      	ldr	r3, [pc, #44]	; (800eb04 <HAL_I2C_Mem_Read+0x230>)
 800ead6:	400b      	ands	r3, r1
 800ead8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	2220      	movs	r2, #32
 800eade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	2200      	movs	r2, #0
 800eae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	2200      	movs	r2, #0
 800eaee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	e000      	b.n	800eaf8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800eaf6:	2302      	movs	r3, #2
  }
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3718      	adds	r7, #24
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}
 800eb00:	80002400 	.word	0x80002400
 800eb04:	fe00e800 	.word	0xfe00e800

0800eb08 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b08a      	sub	sp, #40	; 0x28
 800eb0c:	af02      	add	r7, sp, #8
 800eb0e:	60f8      	str	r0, [r7, #12]
 800eb10:	607a      	str	r2, [r7, #4]
 800eb12:	603b      	str	r3, [r7, #0]
 800eb14:	460b      	mov	r3, r1
 800eb16:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	2b20      	cmp	r3, #32
 800eb26:	f040 80f1 	bne.w	800ed0c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	699b      	ldr	r3, [r3, #24]
 800eb30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eb34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb38:	d101      	bne.n	800eb3e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800eb3a:	2302      	movs	r3, #2
 800eb3c:	e0e7      	b.n	800ed0e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eb44:	2b01      	cmp	r3, #1
 800eb46:	d101      	bne.n	800eb4c <HAL_I2C_IsDeviceReady+0x44>
 800eb48:	2302      	movs	r3, #2
 800eb4a:	e0e0      	b.n	800ed0e <HAL_I2C_IsDeviceReady+0x206>
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2201      	movs	r2, #1
 800eb50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2224      	movs	r2, #36	; 0x24
 800eb58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	68db      	ldr	r3, [r3, #12]
 800eb66:	2b01      	cmp	r3, #1
 800eb68:	d107      	bne.n	800eb7a <HAL_I2C_IsDeviceReady+0x72>
 800eb6a:	897b      	ldrh	r3, [r7, #10]
 800eb6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800eb70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800eb74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800eb78:	e004      	b.n	800eb84 <HAL_I2C_IsDeviceReady+0x7c>
 800eb7a:	897b      	ldrh	r3, [r7, #10]
 800eb7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800eb80:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800eb84:	68fa      	ldr	r2, [r7, #12]
 800eb86:	6812      	ldr	r2, [r2, #0]
 800eb88:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800eb8a:	f7fd faaf 	bl	800c0ec <HAL_GetTick>
 800eb8e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	699b      	ldr	r3, [r3, #24]
 800eb96:	f003 0320 	and.w	r3, r3, #32
 800eb9a:	2b20      	cmp	r3, #32
 800eb9c:	bf0c      	ite	eq
 800eb9e:	2301      	moveq	r3, #1
 800eba0:	2300      	movne	r3, #0
 800eba2:	b2db      	uxtb	r3, r3
 800eba4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	699b      	ldr	r3, [r3, #24]
 800ebac:	f003 0310 	and.w	r3, r3, #16
 800ebb0:	2b10      	cmp	r3, #16
 800ebb2:	bf0c      	ite	eq
 800ebb4:	2301      	moveq	r3, #1
 800ebb6:	2300      	movne	r3, #0
 800ebb8:	b2db      	uxtb	r3, r3
 800ebba:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800ebbc:	e034      	b.n	800ec28 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ebc4:	d01a      	beq.n	800ebfc <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ebc6:	f7fd fa91 	bl	800c0ec <HAL_GetTick>
 800ebca:	4602      	mov	r2, r0
 800ebcc:	69bb      	ldr	r3, [r7, #24]
 800ebce:	1ad3      	subs	r3, r2, r3
 800ebd0:	683a      	ldr	r2, [r7, #0]
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d302      	bcc.n	800ebdc <HAL_I2C_IsDeviceReady+0xd4>
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d10f      	bne.n	800ebfc <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	2220      	movs	r2, #32
 800ebe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebe8:	f043 0220 	orr.w	r2, r3, #32
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	e088      	b.n	800ed0e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	699b      	ldr	r3, [r3, #24]
 800ec02:	f003 0320 	and.w	r3, r3, #32
 800ec06:	2b20      	cmp	r3, #32
 800ec08:	bf0c      	ite	eq
 800ec0a:	2301      	moveq	r3, #1
 800ec0c:	2300      	movne	r3, #0
 800ec0e:	b2db      	uxtb	r3, r3
 800ec10:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	699b      	ldr	r3, [r3, #24]
 800ec18:	f003 0310 	and.w	r3, r3, #16
 800ec1c:	2b10      	cmp	r3, #16
 800ec1e:	bf0c      	ite	eq
 800ec20:	2301      	moveq	r3, #1
 800ec22:	2300      	movne	r3, #0
 800ec24:	b2db      	uxtb	r3, r3
 800ec26:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800ec28:	7ffb      	ldrb	r3, [r7, #31]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d102      	bne.n	800ec34 <HAL_I2C_IsDeviceReady+0x12c>
 800ec2e:	7fbb      	ldrb	r3, [r7, #30]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d0c4      	beq.n	800ebbe <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	699b      	ldr	r3, [r3, #24]
 800ec3a:	f003 0310 	and.w	r3, r3, #16
 800ec3e:	2b10      	cmp	r3, #16
 800ec40:	d01a      	beq.n	800ec78 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800ec42:	69bb      	ldr	r3, [r7, #24]
 800ec44:	9300      	str	r3, [sp, #0]
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	2200      	movs	r2, #0
 800ec4a:	2120      	movs	r1, #32
 800ec4c:	68f8      	ldr	r0, [r7, #12]
 800ec4e:	f000 f93d 	bl	800eecc <I2C_WaitOnFlagUntilTimeout>
 800ec52:	4603      	mov	r3, r0
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d001      	beq.n	800ec5c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800ec58:	2301      	movs	r3, #1
 800ec5a:	e058      	b.n	800ed0e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	2220      	movs	r2, #32
 800ec62:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2220      	movs	r2, #32
 800ec68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	2200      	movs	r2, #0
 800ec70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800ec74:	2300      	movs	r3, #0
 800ec76:	e04a      	b.n	800ed0e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800ec78:	69bb      	ldr	r3, [r7, #24]
 800ec7a:	9300      	str	r3, [sp, #0]
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	2120      	movs	r1, #32
 800ec82:	68f8      	ldr	r0, [r7, #12]
 800ec84:	f000 f922 	bl	800eecc <I2C_WaitOnFlagUntilTimeout>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d001      	beq.n	800ec92 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800ec8e:	2301      	movs	r3, #1
 800ec90:	e03d      	b.n	800ed0e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	2210      	movs	r2, #16
 800ec98:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	2220      	movs	r2, #32
 800eca0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	687a      	ldr	r2, [r7, #4]
 800eca6:	429a      	cmp	r2, r3
 800eca8:	d118      	bne.n	800ecdc <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	685a      	ldr	r2, [r3, #4]
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ecb8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800ecba:	69bb      	ldr	r3, [r7, #24]
 800ecbc:	9300      	str	r3, [sp, #0]
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	2120      	movs	r1, #32
 800ecc4:	68f8      	ldr	r0, [r7, #12]
 800ecc6:	f000 f901 	bl	800eecc <I2C_WaitOnFlagUntilTimeout>
 800ecca:	4603      	mov	r3, r0
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d001      	beq.n	800ecd4 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	e01c      	b.n	800ed0e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	2220      	movs	r2, #32
 800ecda:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	3301      	adds	r3, #1
 800ece0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800ece2:	697b      	ldr	r3, [r7, #20]
 800ece4:	687a      	ldr	r2, [r7, #4]
 800ece6:	429a      	cmp	r2, r3
 800ece8:	f63f af3b 	bhi.w	800eb62 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	2220      	movs	r2, #32
 800ecf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecf8:	f043 0220 	orr.w	r2, r3, #32
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	2200      	movs	r2, #0
 800ed04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800ed08:	2301      	movs	r3, #1
 800ed0a:	e000      	b.n	800ed0e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800ed0c:	2302      	movs	r3, #2
  }
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	3720      	adds	r7, #32
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}

0800ed16 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800ed16:	b480      	push	{r7}
 800ed18:	b083      	sub	sp, #12
 800ed1a:	af00      	add	r7, sp, #0
 800ed1c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ed24:	b2db      	uxtb	r3, r3
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	370c      	adds	r7, #12
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed30:	4770      	bx	lr
	...

0800ed34 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b086      	sub	sp, #24
 800ed38:	af02      	add	r7, sp, #8
 800ed3a:	60f8      	str	r0, [r7, #12]
 800ed3c:	4608      	mov	r0, r1
 800ed3e:	4611      	mov	r1, r2
 800ed40:	461a      	mov	r2, r3
 800ed42:	4603      	mov	r3, r0
 800ed44:	817b      	strh	r3, [r7, #10]
 800ed46:	460b      	mov	r3, r1
 800ed48:	813b      	strh	r3, [r7, #8]
 800ed4a:	4613      	mov	r3, r2
 800ed4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ed4e:	88fb      	ldrh	r3, [r7, #6]
 800ed50:	b2da      	uxtb	r2, r3
 800ed52:	8979      	ldrh	r1, [r7, #10]
 800ed54:	4b20      	ldr	r3, [pc, #128]	; (800edd8 <I2C_RequestMemoryWrite+0xa4>)
 800ed56:	9300      	str	r3, [sp, #0]
 800ed58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ed5c:	68f8      	ldr	r0, [r7, #12]
 800ed5e:	f000 fad7 	bl	800f310 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ed62:	69fa      	ldr	r2, [r7, #28]
 800ed64:	69b9      	ldr	r1, [r7, #24]
 800ed66:	68f8      	ldr	r0, [r7, #12]
 800ed68:	f000 f8f0 	bl	800ef4c <I2C_WaitOnTXISFlagUntilTimeout>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d001      	beq.n	800ed76 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800ed72:	2301      	movs	r3, #1
 800ed74:	e02c      	b.n	800edd0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ed76:	88fb      	ldrh	r3, [r7, #6]
 800ed78:	2b01      	cmp	r3, #1
 800ed7a:	d105      	bne.n	800ed88 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ed7c:	893b      	ldrh	r3, [r7, #8]
 800ed7e:	b2da      	uxtb	r2, r3
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	629a      	str	r2, [r3, #40]	; 0x28
 800ed86:	e015      	b.n	800edb4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ed88:	893b      	ldrh	r3, [r7, #8]
 800ed8a:	0a1b      	lsrs	r3, r3, #8
 800ed8c:	b29b      	uxth	r3, r3
 800ed8e:	b2da      	uxtb	r2, r3
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ed96:	69fa      	ldr	r2, [r7, #28]
 800ed98:	69b9      	ldr	r1, [r7, #24]
 800ed9a:	68f8      	ldr	r0, [r7, #12]
 800ed9c:	f000 f8d6 	bl	800ef4c <I2C_WaitOnTXISFlagUntilTimeout>
 800eda0:	4603      	mov	r3, r0
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d001      	beq.n	800edaa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800eda6:	2301      	movs	r3, #1
 800eda8:	e012      	b.n	800edd0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800edaa:	893b      	ldrh	r3, [r7, #8]
 800edac:	b2da      	uxtb	r2, r3
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800edb4:	69fb      	ldr	r3, [r7, #28]
 800edb6:	9300      	str	r3, [sp, #0]
 800edb8:	69bb      	ldr	r3, [r7, #24]
 800edba:	2200      	movs	r2, #0
 800edbc:	2180      	movs	r1, #128	; 0x80
 800edbe:	68f8      	ldr	r0, [r7, #12]
 800edc0:	f000 f884 	bl	800eecc <I2C_WaitOnFlagUntilTimeout>
 800edc4:	4603      	mov	r3, r0
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d001      	beq.n	800edce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800edca:	2301      	movs	r3, #1
 800edcc:	e000      	b.n	800edd0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800edce:	2300      	movs	r3, #0
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3710      	adds	r7, #16
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}
 800edd8:	80002000 	.word	0x80002000

0800eddc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b086      	sub	sp, #24
 800ede0:	af02      	add	r7, sp, #8
 800ede2:	60f8      	str	r0, [r7, #12]
 800ede4:	4608      	mov	r0, r1
 800ede6:	4611      	mov	r1, r2
 800ede8:	461a      	mov	r2, r3
 800edea:	4603      	mov	r3, r0
 800edec:	817b      	strh	r3, [r7, #10]
 800edee:	460b      	mov	r3, r1
 800edf0:	813b      	strh	r3, [r7, #8]
 800edf2:	4613      	mov	r3, r2
 800edf4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800edf6:	88fb      	ldrh	r3, [r7, #6]
 800edf8:	b2da      	uxtb	r2, r3
 800edfa:	8979      	ldrh	r1, [r7, #10]
 800edfc:	4b20      	ldr	r3, [pc, #128]	; (800ee80 <I2C_RequestMemoryRead+0xa4>)
 800edfe:	9300      	str	r3, [sp, #0]
 800ee00:	2300      	movs	r3, #0
 800ee02:	68f8      	ldr	r0, [r7, #12]
 800ee04:	f000 fa84 	bl	800f310 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ee08:	69fa      	ldr	r2, [r7, #28]
 800ee0a:	69b9      	ldr	r1, [r7, #24]
 800ee0c:	68f8      	ldr	r0, [r7, #12]
 800ee0e:	f000 f89d 	bl	800ef4c <I2C_WaitOnTXISFlagUntilTimeout>
 800ee12:	4603      	mov	r3, r0
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d001      	beq.n	800ee1c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	e02c      	b.n	800ee76 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ee1c:	88fb      	ldrh	r3, [r7, #6]
 800ee1e:	2b01      	cmp	r3, #1
 800ee20:	d105      	bne.n	800ee2e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ee22:	893b      	ldrh	r3, [r7, #8]
 800ee24:	b2da      	uxtb	r2, r3
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	629a      	str	r2, [r3, #40]	; 0x28
 800ee2c:	e015      	b.n	800ee5a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ee2e:	893b      	ldrh	r3, [r7, #8]
 800ee30:	0a1b      	lsrs	r3, r3, #8
 800ee32:	b29b      	uxth	r3, r3
 800ee34:	b2da      	uxtb	r2, r3
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ee3c:	69fa      	ldr	r2, [r7, #28]
 800ee3e:	69b9      	ldr	r1, [r7, #24]
 800ee40:	68f8      	ldr	r0, [r7, #12]
 800ee42:	f000 f883 	bl	800ef4c <I2C_WaitOnTXISFlagUntilTimeout>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d001      	beq.n	800ee50 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	e012      	b.n	800ee76 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ee50:	893b      	ldrh	r3, [r7, #8]
 800ee52:	b2da      	uxtb	r2, r3
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800ee5a:	69fb      	ldr	r3, [r7, #28]
 800ee5c:	9300      	str	r3, [sp, #0]
 800ee5e:	69bb      	ldr	r3, [r7, #24]
 800ee60:	2200      	movs	r2, #0
 800ee62:	2140      	movs	r1, #64	; 0x40
 800ee64:	68f8      	ldr	r0, [r7, #12]
 800ee66:	f000 f831 	bl	800eecc <I2C_WaitOnFlagUntilTimeout>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d001      	beq.n	800ee74 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800ee70:	2301      	movs	r3, #1
 800ee72:	e000      	b.n	800ee76 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800ee74:	2300      	movs	r3, #0
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	3710      	adds	r7, #16
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}
 800ee7e:	bf00      	nop
 800ee80:	80002000 	.word	0x80002000

0800ee84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ee84:	b480      	push	{r7}
 800ee86:	b083      	sub	sp, #12
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	699b      	ldr	r3, [r3, #24]
 800ee92:	f003 0302 	and.w	r3, r3, #2
 800ee96:	2b02      	cmp	r3, #2
 800ee98:	d103      	bne.n	800eea2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	699b      	ldr	r3, [r3, #24]
 800eea8:	f003 0301 	and.w	r3, r3, #1
 800eeac:	2b01      	cmp	r3, #1
 800eeae:	d007      	beq.n	800eec0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	699a      	ldr	r2, [r3, #24]
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	f042 0201 	orr.w	r2, r2, #1
 800eebe:	619a      	str	r2, [r3, #24]
  }
}
 800eec0:	bf00      	nop
 800eec2:	370c      	adds	r7, #12
 800eec4:	46bd      	mov	sp, r7
 800eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeca:	4770      	bx	lr

0800eecc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b084      	sub	sp, #16
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	60f8      	str	r0, [r7, #12]
 800eed4:	60b9      	str	r1, [r7, #8]
 800eed6:	603b      	str	r3, [r7, #0]
 800eed8:	4613      	mov	r3, r2
 800eeda:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800eedc:	e022      	b.n	800ef24 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eee4:	d01e      	beq.n	800ef24 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eee6:	f7fd f901 	bl	800c0ec <HAL_GetTick>
 800eeea:	4602      	mov	r2, r0
 800eeec:	69bb      	ldr	r3, [r7, #24]
 800eeee:	1ad3      	subs	r3, r2, r3
 800eef0:	683a      	ldr	r2, [r7, #0]
 800eef2:	429a      	cmp	r2, r3
 800eef4:	d302      	bcc.n	800eefc <I2C_WaitOnFlagUntilTimeout+0x30>
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d113      	bne.n	800ef24 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef00:	f043 0220 	orr.w	r2, r3, #32
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	2220      	movs	r2, #32
 800ef0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	2200      	movs	r2, #0
 800ef14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800ef20:	2301      	movs	r3, #1
 800ef22:	e00f      	b.n	800ef44 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	699a      	ldr	r2, [r3, #24]
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	4013      	ands	r3, r2
 800ef2e:	68ba      	ldr	r2, [r7, #8]
 800ef30:	429a      	cmp	r2, r3
 800ef32:	bf0c      	ite	eq
 800ef34:	2301      	moveq	r3, #1
 800ef36:	2300      	movne	r3, #0
 800ef38:	b2db      	uxtb	r3, r3
 800ef3a:	461a      	mov	r2, r3
 800ef3c:	79fb      	ldrb	r3, [r7, #7]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d0cd      	beq.n	800eede <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ef42:	2300      	movs	r3, #0
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3710      	adds	r7, #16
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b084      	sub	sp, #16
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	60f8      	str	r0, [r7, #12]
 800ef54:	60b9      	str	r1, [r7, #8]
 800ef56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ef58:	e02c      	b.n	800efb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ef5a:	687a      	ldr	r2, [r7, #4]
 800ef5c:	68b9      	ldr	r1, [r7, #8]
 800ef5e:	68f8      	ldr	r0, [r7, #12]
 800ef60:	f000 f8ea 	bl	800f138 <I2C_IsErrorOccurred>
 800ef64:	4603      	mov	r3, r0
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d001      	beq.n	800ef6e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	e02a      	b.n	800efc4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef74:	d01e      	beq.n	800efb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ef76:	f7fd f8b9 	bl	800c0ec <HAL_GetTick>
 800ef7a:	4602      	mov	r2, r0
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	1ad3      	subs	r3, r2, r3
 800ef80:	68ba      	ldr	r2, [r7, #8]
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d302      	bcc.n	800ef8c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d113      	bne.n	800efb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef90:	f043 0220 	orr.w	r2, r3, #32
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	2220      	movs	r2, #32
 800ef9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	2200      	movs	r2, #0
 800efa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	2200      	movs	r2, #0
 800efac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800efb0:	2301      	movs	r3, #1
 800efb2:	e007      	b.n	800efc4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	699b      	ldr	r3, [r3, #24]
 800efba:	f003 0302 	and.w	r3, r3, #2
 800efbe:	2b02      	cmp	r3, #2
 800efc0:	d1cb      	bne.n	800ef5a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800efc2:	2300      	movs	r3, #0
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	3710      	adds	r7, #16
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}

0800efcc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b084      	sub	sp, #16
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	60f8      	str	r0, [r7, #12]
 800efd4:	60b9      	str	r1, [r7, #8]
 800efd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800efd8:	e028      	b.n	800f02c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800efda:	687a      	ldr	r2, [r7, #4]
 800efdc:	68b9      	ldr	r1, [r7, #8]
 800efde:	68f8      	ldr	r0, [r7, #12]
 800efe0:	f000 f8aa 	bl	800f138 <I2C_IsErrorOccurred>
 800efe4:	4603      	mov	r3, r0
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d001      	beq.n	800efee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800efea:	2301      	movs	r3, #1
 800efec:	e026      	b.n	800f03c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800efee:	f7fd f87d 	bl	800c0ec <HAL_GetTick>
 800eff2:	4602      	mov	r2, r0
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	1ad3      	subs	r3, r2, r3
 800eff8:	68ba      	ldr	r2, [r7, #8]
 800effa:	429a      	cmp	r2, r3
 800effc:	d302      	bcc.n	800f004 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d113      	bne.n	800f02c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f008:	f043 0220 	orr.w	r2, r3, #32
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	2220      	movs	r2, #32
 800f014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	2200      	movs	r2, #0
 800f01c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	2200      	movs	r2, #0
 800f024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800f028:	2301      	movs	r3, #1
 800f02a:	e007      	b.n	800f03c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	699b      	ldr	r3, [r3, #24]
 800f032:	f003 0320 	and.w	r3, r3, #32
 800f036:	2b20      	cmp	r3, #32
 800f038:	d1cf      	bne.n	800efda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800f03a:	2300      	movs	r3, #0
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3710      	adds	r7, #16
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b084      	sub	sp, #16
 800f048:	af00      	add	r7, sp, #0
 800f04a:	60f8      	str	r0, [r7, #12]
 800f04c:	60b9      	str	r1, [r7, #8]
 800f04e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f050:	e064      	b.n	800f11c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800f052:	687a      	ldr	r2, [r7, #4]
 800f054:	68b9      	ldr	r1, [r7, #8]
 800f056:	68f8      	ldr	r0, [r7, #12]
 800f058:	f000 f86e 	bl	800f138 <I2C_IsErrorOccurred>
 800f05c:	4603      	mov	r3, r0
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d001      	beq.n	800f066 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800f062:	2301      	movs	r3, #1
 800f064:	e062      	b.n	800f12c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	699b      	ldr	r3, [r3, #24]
 800f06c:	f003 0320 	and.w	r3, r3, #32
 800f070:	2b20      	cmp	r3, #32
 800f072:	d138      	bne.n	800f0e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	699b      	ldr	r3, [r3, #24]
 800f07a:	f003 0304 	and.w	r3, r3, #4
 800f07e:	2b04      	cmp	r3, #4
 800f080:	d105      	bne.n	800f08e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f086:	2b00      	cmp	r3, #0
 800f088:	d001      	beq.n	800f08e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800f08a:	2300      	movs	r3, #0
 800f08c:	e04e      	b.n	800f12c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	699b      	ldr	r3, [r3, #24]
 800f094:	f003 0310 	and.w	r3, r3, #16
 800f098:	2b10      	cmp	r3, #16
 800f09a:	d107      	bne.n	800f0ac <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	2210      	movs	r2, #16
 800f0a2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	2204      	movs	r2, #4
 800f0a8:	645a      	str	r2, [r3, #68]	; 0x44
 800f0aa:	e002      	b.n	800f0b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	2220      	movs	r2, #32
 800f0b8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	6859      	ldr	r1, [r3, #4]
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	681a      	ldr	r2, [r3, #0]
 800f0c4:	4b1b      	ldr	r3, [pc, #108]	; (800f134 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800f0c6:	400b      	ands	r3, r1
 800f0c8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	2220      	movs	r2, #32
 800f0ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	2200      	movs	r2, #0
 800f0de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	e022      	b.n	800f12c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f0e6:	f7fd f801 	bl	800c0ec <HAL_GetTick>
 800f0ea:	4602      	mov	r2, r0
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	1ad3      	subs	r3, r2, r3
 800f0f0:	68ba      	ldr	r2, [r7, #8]
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	d302      	bcc.n	800f0fc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d10f      	bne.n	800f11c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f100:	f043 0220 	orr.w	r2, r3, #32
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	2220      	movs	r2, #32
 800f10c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	2200      	movs	r2, #0
 800f114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800f118:	2301      	movs	r3, #1
 800f11a:	e007      	b.n	800f12c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	699b      	ldr	r3, [r3, #24]
 800f122:	f003 0304 	and.w	r3, r3, #4
 800f126:	2b04      	cmp	r3, #4
 800f128:	d193      	bne.n	800f052 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800f12a:	2300      	movs	r3, #0
}
 800f12c:	4618      	mov	r0, r3
 800f12e:	3710      	adds	r7, #16
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}
 800f134:	fe00e800 	.word	0xfe00e800

0800f138 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b08a      	sub	sp, #40	; 0x28
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	60f8      	str	r0, [r7, #12]
 800f140:	60b9      	str	r1, [r7, #8]
 800f142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f144:	2300      	movs	r3, #0
 800f146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	699b      	ldr	r3, [r3, #24]
 800f150:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800f152:	2300      	movs	r3, #0
 800f154:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800f15a:	69bb      	ldr	r3, [r7, #24]
 800f15c:	f003 0310 	and.w	r3, r3, #16
 800f160:	2b00      	cmp	r3, #0
 800f162:	d075      	beq.n	800f250 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	2210      	movs	r2, #16
 800f16a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800f16c:	e056      	b.n	800f21c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800f16e:	68bb      	ldr	r3, [r7, #8]
 800f170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f174:	d052      	beq.n	800f21c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800f176:	f7fc ffb9 	bl	800c0ec <HAL_GetTick>
 800f17a:	4602      	mov	r2, r0
 800f17c:	69fb      	ldr	r3, [r7, #28]
 800f17e:	1ad3      	subs	r3, r2, r3
 800f180:	68ba      	ldr	r2, [r7, #8]
 800f182:	429a      	cmp	r2, r3
 800f184:	d302      	bcc.n	800f18c <I2C_IsErrorOccurred+0x54>
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d147      	bne.n	800f21c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	685b      	ldr	r3, [r3, #4]
 800f192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f196:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f19e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	699b      	ldr	r3, [r3, #24]
 800f1a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f1aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f1ae:	d12e      	bne.n	800f20e <I2C_IsErrorOccurred+0xd6>
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f1b6:	d02a      	beq.n	800f20e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800f1b8:	7cfb      	ldrb	r3, [r7, #19]
 800f1ba:	2b20      	cmp	r3, #32
 800f1bc:	d027      	beq.n	800f20e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	685a      	ldr	r2, [r3, #4]
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f1cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800f1ce:	f7fc ff8d 	bl	800c0ec <HAL_GetTick>
 800f1d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800f1d4:	e01b      	b.n	800f20e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800f1d6:	f7fc ff89 	bl	800c0ec <HAL_GetTick>
 800f1da:	4602      	mov	r2, r0
 800f1dc:	69fb      	ldr	r3, [r7, #28]
 800f1de:	1ad3      	subs	r3, r2, r3
 800f1e0:	2b19      	cmp	r3, #25
 800f1e2:	d914      	bls.n	800f20e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1e8:	f043 0220 	orr.w	r2, r3, #32
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	2220      	movs	r2, #32
 800f1f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	2200      	movs	r2, #0
 800f204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800f208:	2301      	movs	r3, #1
 800f20a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	699b      	ldr	r3, [r3, #24]
 800f214:	f003 0320 	and.w	r3, r3, #32
 800f218:	2b20      	cmp	r3, #32
 800f21a:	d1dc      	bne.n	800f1d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	699b      	ldr	r3, [r3, #24]
 800f222:	f003 0320 	and.w	r3, r3, #32
 800f226:	2b20      	cmp	r3, #32
 800f228:	d003      	beq.n	800f232 <I2C_IsErrorOccurred+0xfa>
 800f22a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d09d      	beq.n	800f16e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800f232:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f236:	2b00      	cmp	r3, #0
 800f238:	d103      	bne.n	800f242 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	2220      	movs	r2, #32
 800f240:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800f242:	6a3b      	ldr	r3, [r7, #32]
 800f244:	f043 0304 	orr.w	r3, r3, #4
 800f248:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800f24a:	2301      	movs	r3, #1
 800f24c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	699b      	ldr	r3, [r3, #24]
 800f256:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800f258:	69bb      	ldr	r3, [r7, #24]
 800f25a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d00b      	beq.n	800f27a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800f262:	6a3b      	ldr	r3, [r7, #32]
 800f264:	f043 0301 	orr.w	r3, r3, #1
 800f268:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f272:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800f274:	2301      	movs	r3, #1
 800f276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800f27a:	69bb      	ldr	r3, [r7, #24]
 800f27c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f280:	2b00      	cmp	r3, #0
 800f282:	d00b      	beq.n	800f29c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800f284:	6a3b      	ldr	r3, [r7, #32]
 800f286:	f043 0308 	orr.w	r3, r3, #8
 800f28a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f294:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800f296:	2301      	movs	r3, #1
 800f298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800f29c:	69bb      	ldr	r3, [r7, #24]
 800f29e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d00b      	beq.n	800f2be <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800f2a6:	6a3b      	ldr	r3, [r7, #32]
 800f2a8:	f043 0302 	orr.w	r3, r3, #2
 800f2ac:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f2b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800f2b8:	2301      	movs	r3, #1
 800f2ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800f2be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d01c      	beq.n	800f300 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f2c6:	68f8      	ldr	r0, [r7, #12]
 800f2c8:	f7ff fddc 	bl	800ee84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	6859      	ldr	r1, [r3, #4]
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	681a      	ldr	r2, [r3, #0]
 800f2d6:	4b0d      	ldr	r3, [pc, #52]	; (800f30c <I2C_IsErrorOccurred+0x1d4>)
 800f2d8:	400b      	ands	r3, r1
 800f2da:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f2e0:	6a3b      	ldr	r3, [r7, #32]
 800f2e2:	431a      	orrs	r2, r3
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	2220      	movs	r2, #32
 800f2ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800f300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800f304:	4618      	mov	r0, r3
 800f306:	3728      	adds	r7, #40	; 0x28
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}
 800f30c:	fe00e800 	.word	0xfe00e800

0800f310 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800f310:	b480      	push	{r7}
 800f312:	b087      	sub	sp, #28
 800f314:	af00      	add	r7, sp, #0
 800f316:	60f8      	str	r0, [r7, #12]
 800f318:	607b      	str	r3, [r7, #4]
 800f31a:	460b      	mov	r3, r1
 800f31c:	817b      	strh	r3, [r7, #10]
 800f31e:	4613      	mov	r3, r2
 800f320:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f322:	897b      	ldrh	r3, [r7, #10]
 800f324:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800f328:	7a7b      	ldrb	r3, [r7, #9]
 800f32a:	041b      	lsls	r3, r3, #16
 800f32c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f330:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f336:	6a3b      	ldr	r3, [r7, #32]
 800f338:	4313      	orrs	r3, r2
 800f33a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f33e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	685a      	ldr	r2, [r3, #4]
 800f346:	6a3b      	ldr	r3, [r7, #32]
 800f348:	0d5b      	lsrs	r3, r3, #21
 800f34a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800f34e:	4b08      	ldr	r3, [pc, #32]	; (800f370 <I2C_TransferConfig+0x60>)
 800f350:	430b      	orrs	r3, r1
 800f352:	43db      	mvns	r3, r3
 800f354:	ea02 0103 	and.w	r1, r2, r3
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	697a      	ldr	r2, [r7, #20]
 800f35e:	430a      	orrs	r2, r1
 800f360:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800f362:	bf00      	nop
 800f364:	371c      	adds	r7, #28
 800f366:	46bd      	mov	sp, r7
 800f368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36c:	4770      	bx	lr
 800f36e:	bf00      	nop
 800f370:	03ff63ff 	.word	0x03ff63ff

0800f374 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800f374:	b480      	push	{r7}
 800f376:	b083      	sub	sp, #12
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
 800f37c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f384:	b2db      	uxtb	r3, r3
 800f386:	2b20      	cmp	r3, #32
 800f388:	d138      	bne.n	800f3fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f390:	2b01      	cmp	r3, #1
 800f392:	d101      	bne.n	800f398 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800f394:	2302      	movs	r3, #2
 800f396:	e032      	b.n	800f3fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2201      	movs	r2, #1
 800f39c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2224      	movs	r2, #36	; 0x24
 800f3a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	681a      	ldr	r2, [r3, #0]
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	f022 0201 	bic.w	r2, r2, #1
 800f3b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	681a      	ldr	r2, [r3, #0]
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f3c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	6819      	ldr	r1, [r3, #0]
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	683a      	ldr	r2, [r7, #0]
 800f3d4:	430a      	orrs	r2, r1
 800f3d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	681a      	ldr	r2, [r3, #0]
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	f042 0201 	orr.w	r2, r2, #1
 800f3e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2220      	movs	r2, #32
 800f3ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	e000      	b.n	800f3fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f3fc:	2302      	movs	r3, #2
  }
}
 800f3fe:	4618      	mov	r0, r3
 800f400:	370c      	adds	r7, #12
 800f402:	46bd      	mov	sp, r7
 800f404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f408:	4770      	bx	lr

0800f40a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800f40a:	b480      	push	{r7}
 800f40c:	b085      	sub	sp, #20
 800f40e:	af00      	add	r7, sp, #0
 800f410:	6078      	str	r0, [r7, #4]
 800f412:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f41a:	b2db      	uxtb	r3, r3
 800f41c:	2b20      	cmp	r3, #32
 800f41e:	d139      	bne.n	800f494 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f426:	2b01      	cmp	r3, #1
 800f428:	d101      	bne.n	800f42e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800f42a:	2302      	movs	r3, #2
 800f42c:	e033      	b.n	800f496 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2201      	movs	r2, #1
 800f432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	2224      	movs	r2, #36	; 0x24
 800f43a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	681a      	ldr	r2, [r3, #0]
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	f022 0201 	bic.w	r2, r2, #1
 800f44c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800f45c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	021b      	lsls	r3, r3, #8
 800f462:	68fa      	ldr	r2, [r7, #12]
 800f464:	4313      	orrs	r3, r2
 800f466:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	68fa      	ldr	r2, [r7, #12]
 800f46e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	681a      	ldr	r2, [r3, #0]
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f042 0201 	orr.w	r2, r2, #1
 800f47e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2220      	movs	r2, #32
 800f484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2200      	movs	r2, #0
 800f48c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800f490:	2300      	movs	r3, #0
 800f492:	e000      	b.n	800f496 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800f494:	2302      	movs	r3, #2
  }
}
 800f496:	4618      	mov	r0, r3
 800f498:	3714      	adds	r7, #20
 800f49a:	46bd      	mov	sp, r7
 800f49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a0:	4770      	bx	lr

0800f4a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800f4a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4a4:	b08f      	sub	sp, #60	; 0x3c
 800f4a6:	af0a      	add	r7, sp, #40	; 0x28
 800f4a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d101      	bne.n	800f4b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	e116      	b.n	800f6e2 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800f4c0:	b2db      	uxtb	r3, r3
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d106      	bne.n	800f4d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f00a fbda 	bl	8019c88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2203      	movs	r2, #3
 800f4d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d102      	bne.n	800f4ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f007 fae9 	bl	8016aca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	603b      	str	r3, [r7, #0]
 800f4fe:	687e      	ldr	r6, [r7, #4]
 800f500:	466d      	mov	r5, sp
 800f502:	f106 0410 	add.w	r4, r6, #16
 800f506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f508:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f50a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f50c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f50e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f512:	e885 0003 	stmia.w	r5, {r0, r1}
 800f516:	1d33      	adds	r3, r6, #4
 800f518:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f51a:	6838      	ldr	r0, [r7, #0]
 800f51c:	f007 f9fc 	bl	8016918 <USB_CoreInit>
 800f520:	4603      	mov	r3, r0
 800f522:	2b00      	cmp	r3, #0
 800f524:	d005      	beq.n	800f532 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	2202      	movs	r2, #2
 800f52a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800f52e:	2301      	movs	r3, #1
 800f530:	e0d7      	b.n	800f6e2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	2100      	movs	r1, #0
 800f538:	4618      	mov	r0, r3
 800f53a:	f007 fad7 	bl	8016aec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f53e:	2300      	movs	r3, #0
 800f540:	73fb      	strb	r3, [r7, #15]
 800f542:	e04a      	b.n	800f5da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800f544:	7bfa      	ldrb	r2, [r7, #15]
 800f546:	6879      	ldr	r1, [r7, #4]
 800f548:	4613      	mov	r3, r2
 800f54a:	00db      	lsls	r3, r3, #3
 800f54c:	4413      	add	r3, r2
 800f54e:	009b      	lsls	r3, r3, #2
 800f550:	440b      	add	r3, r1
 800f552:	333d      	adds	r3, #61	; 0x3d
 800f554:	2201      	movs	r2, #1
 800f556:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800f558:	7bfa      	ldrb	r2, [r7, #15]
 800f55a:	6879      	ldr	r1, [r7, #4]
 800f55c:	4613      	mov	r3, r2
 800f55e:	00db      	lsls	r3, r3, #3
 800f560:	4413      	add	r3, r2
 800f562:	009b      	lsls	r3, r3, #2
 800f564:	440b      	add	r3, r1
 800f566:	333c      	adds	r3, #60	; 0x3c
 800f568:	7bfa      	ldrb	r2, [r7, #15]
 800f56a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800f56c:	7bfa      	ldrb	r2, [r7, #15]
 800f56e:	7bfb      	ldrb	r3, [r7, #15]
 800f570:	b298      	uxth	r0, r3
 800f572:	6879      	ldr	r1, [r7, #4]
 800f574:	4613      	mov	r3, r2
 800f576:	00db      	lsls	r3, r3, #3
 800f578:	4413      	add	r3, r2
 800f57a:	009b      	lsls	r3, r3, #2
 800f57c:	440b      	add	r3, r1
 800f57e:	3344      	adds	r3, #68	; 0x44
 800f580:	4602      	mov	r2, r0
 800f582:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800f584:	7bfa      	ldrb	r2, [r7, #15]
 800f586:	6879      	ldr	r1, [r7, #4]
 800f588:	4613      	mov	r3, r2
 800f58a:	00db      	lsls	r3, r3, #3
 800f58c:	4413      	add	r3, r2
 800f58e:	009b      	lsls	r3, r3, #2
 800f590:	440b      	add	r3, r1
 800f592:	3340      	adds	r3, #64	; 0x40
 800f594:	2200      	movs	r2, #0
 800f596:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800f598:	7bfa      	ldrb	r2, [r7, #15]
 800f59a:	6879      	ldr	r1, [r7, #4]
 800f59c:	4613      	mov	r3, r2
 800f59e:	00db      	lsls	r3, r3, #3
 800f5a0:	4413      	add	r3, r2
 800f5a2:	009b      	lsls	r3, r3, #2
 800f5a4:	440b      	add	r3, r1
 800f5a6:	3348      	adds	r3, #72	; 0x48
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800f5ac:	7bfa      	ldrb	r2, [r7, #15]
 800f5ae:	6879      	ldr	r1, [r7, #4]
 800f5b0:	4613      	mov	r3, r2
 800f5b2:	00db      	lsls	r3, r3, #3
 800f5b4:	4413      	add	r3, r2
 800f5b6:	009b      	lsls	r3, r3, #2
 800f5b8:	440b      	add	r3, r1
 800f5ba:	334c      	adds	r3, #76	; 0x4c
 800f5bc:	2200      	movs	r2, #0
 800f5be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800f5c0:	7bfa      	ldrb	r2, [r7, #15]
 800f5c2:	6879      	ldr	r1, [r7, #4]
 800f5c4:	4613      	mov	r3, r2
 800f5c6:	00db      	lsls	r3, r3, #3
 800f5c8:	4413      	add	r3, r2
 800f5ca:	009b      	lsls	r3, r3, #2
 800f5cc:	440b      	add	r3, r1
 800f5ce:	3354      	adds	r3, #84	; 0x54
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f5d4:	7bfb      	ldrb	r3, [r7, #15]
 800f5d6:	3301      	adds	r3, #1
 800f5d8:	73fb      	strb	r3, [r7, #15]
 800f5da:	7bfa      	ldrb	r2, [r7, #15]
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	685b      	ldr	r3, [r3, #4]
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d3af      	bcc.n	800f544 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	73fb      	strb	r3, [r7, #15]
 800f5e8:	e044      	b.n	800f674 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800f5ea:	7bfa      	ldrb	r2, [r7, #15]
 800f5ec:	6879      	ldr	r1, [r7, #4]
 800f5ee:	4613      	mov	r3, r2
 800f5f0:	00db      	lsls	r3, r3, #3
 800f5f2:	4413      	add	r3, r2
 800f5f4:	009b      	lsls	r3, r3, #2
 800f5f6:	440b      	add	r3, r1
 800f5f8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800f600:	7bfa      	ldrb	r2, [r7, #15]
 800f602:	6879      	ldr	r1, [r7, #4]
 800f604:	4613      	mov	r3, r2
 800f606:	00db      	lsls	r3, r3, #3
 800f608:	4413      	add	r3, r2
 800f60a:	009b      	lsls	r3, r3, #2
 800f60c:	440b      	add	r3, r1
 800f60e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800f612:	7bfa      	ldrb	r2, [r7, #15]
 800f614:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800f616:	7bfa      	ldrb	r2, [r7, #15]
 800f618:	6879      	ldr	r1, [r7, #4]
 800f61a:	4613      	mov	r3, r2
 800f61c:	00db      	lsls	r3, r3, #3
 800f61e:	4413      	add	r3, r2
 800f620:	009b      	lsls	r3, r3, #2
 800f622:	440b      	add	r3, r1
 800f624:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f628:	2200      	movs	r2, #0
 800f62a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800f62c:	7bfa      	ldrb	r2, [r7, #15]
 800f62e:	6879      	ldr	r1, [r7, #4]
 800f630:	4613      	mov	r3, r2
 800f632:	00db      	lsls	r3, r3, #3
 800f634:	4413      	add	r3, r2
 800f636:	009b      	lsls	r3, r3, #2
 800f638:	440b      	add	r3, r1
 800f63a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800f63e:	2200      	movs	r2, #0
 800f640:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800f642:	7bfa      	ldrb	r2, [r7, #15]
 800f644:	6879      	ldr	r1, [r7, #4]
 800f646:	4613      	mov	r3, r2
 800f648:	00db      	lsls	r3, r3, #3
 800f64a:	4413      	add	r3, r2
 800f64c:	009b      	lsls	r3, r3, #2
 800f64e:	440b      	add	r3, r1
 800f650:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f654:	2200      	movs	r2, #0
 800f656:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800f658:	7bfa      	ldrb	r2, [r7, #15]
 800f65a:	6879      	ldr	r1, [r7, #4]
 800f65c:	4613      	mov	r3, r2
 800f65e:	00db      	lsls	r3, r3, #3
 800f660:	4413      	add	r3, r2
 800f662:	009b      	lsls	r3, r3, #2
 800f664:	440b      	add	r3, r1
 800f666:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800f66a:	2200      	movs	r2, #0
 800f66c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f66e:	7bfb      	ldrb	r3, [r7, #15]
 800f670:	3301      	adds	r3, #1
 800f672:	73fb      	strb	r3, [r7, #15]
 800f674:	7bfa      	ldrb	r2, [r7, #15]
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	685b      	ldr	r3, [r3, #4]
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d3b5      	bcc.n	800f5ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	603b      	str	r3, [r7, #0]
 800f684:	687e      	ldr	r6, [r7, #4]
 800f686:	466d      	mov	r5, sp
 800f688:	f106 0410 	add.w	r4, r6, #16
 800f68c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f68e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f692:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f694:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f698:	e885 0003 	stmia.w	r5, {r0, r1}
 800f69c:	1d33      	adds	r3, r6, #4
 800f69e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f6a0:	6838      	ldr	r0, [r7, #0]
 800f6a2:	f007 fa6f 	bl	8016b84 <USB_DevInit>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d005      	beq.n	800f6b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2202      	movs	r2, #2
 800f6b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	e014      	b.n	800f6e2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2201      	movs	r2, #1
 800f6c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6cc:	2b01      	cmp	r3, #1
 800f6ce:	d102      	bne.n	800f6d6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800f6d0:	6878      	ldr	r0, [r7, #4]
 800f6d2:	f001 f881 	bl	80107d8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f008 faf7 	bl	8017cce <USB_DevDisconnect>

  return HAL_OK;
 800f6e0:	2300      	movs	r3, #0
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3714      	adds	r7, #20
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f6ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800f6ea:	b580      	push	{r7, lr}
 800f6ec:	b084      	sub	sp, #16
 800f6ee:	af00      	add	r7, sp, #0
 800f6f0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800f6fe:	2b01      	cmp	r3, #1
 800f700:	d101      	bne.n	800f706 <HAL_PCD_Start+0x1c>
 800f702:	2302      	movs	r3, #2
 800f704:	e01c      	b.n	800f740 <HAL_PCD_Start+0x56>
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2201      	movs	r2, #1
 800f70a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f712:	2b01      	cmp	r3, #1
 800f714:	d105      	bne.n	800f722 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f71a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	4618      	mov	r0, r3
 800f728:	f007 f9be 	bl	8016aa8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	4618      	mov	r0, r3
 800f732:	f008 faab 	bl	8017c8c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	2200      	movs	r2, #0
 800f73a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800f73e:	2300      	movs	r3, #0
}
 800f740:	4618      	mov	r0, r3
 800f742:	3710      	adds	r7, #16
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}

0800f748 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800f748:	b590      	push	{r4, r7, lr}
 800f74a:	b08d      	sub	sp, #52	; 0x34
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f756:	6a3b      	ldr	r3, [r7, #32]
 800f758:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	4618      	mov	r0, r3
 800f760:	f008 fb69 	bl	8017e36 <USB_GetMode>
 800f764:	4603      	mov	r3, r0
 800f766:	2b00      	cmp	r3, #0
 800f768:	f040 847e 	bne.w	8010068 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	4618      	mov	r0, r3
 800f772:	f008 facd 	bl	8017d10 <USB_ReadInterrupts>
 800f776:	4603      	mov	r3, r0
 800f778:	2b00      	cmp	r3, #0
 800f77a:	f000 8474 	beq.w	8010066 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800f77e:	69fb      	ldr	r3, [r7, #28]
 800f780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f784:	689b      	ldr	r3, [r3, #8]
 800f786:	0a1b      	lsrs	r3, r3, #8
 800f788:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	4618      	mov	r0, r3
 800f798:	f008 faba 	bl	8017d10 <USB_ReadInterrupts>
 800f79c:	4603      	mov	r3, r0
 800f79e:	f003 0302 	and.w	r3, r3, #2
 800f7a2:	2b02      	cmp	r3, #2
 800f7a4:	d107      	bne.n	800f7b6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	695a      	ldr	r2, [r3, #20]
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	f002 0202 	and.w	r2, r2, #2
 800f7b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f008 faa8 	bl	8017d10 <USB_ReadInterrupts>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	f003 0310 	and.w	r3, r3, #16
 800f7c6:	2b10      	cmp	r3, #16
 800f7c8:	d161      	bne.n	800f88e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	699a      	ldr	r2, [r3, #24]
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	f022 0210 	bic.w	r2, r2, #16
 800f7d8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800f7da:	6a3b      	ldr	r3, [r7, #32]
 800f7dc:	6a1b      	ldr	r3, [r3, #32]
 800f7de:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800f7e0:	69bb      	ldr	r3, [r7, #24]
 800f7e2:	f003 020f 	and.w	r2, r3, #15
 800f7e6:	4613      	mov	r3, r2
 800f7e8:	00db      	lsls	r3, r3, #3
 800f7ea:	4413      	add	r3, r2
 800f7ec:	009b      	lsls	r3, r3, #2
 800f7ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f7f2:	687a      	ldr	r2, [r7, #4]
 800f7f4:	4413      	add	r3, r2
 800f7f6:	3304      	adds	r3, #4
 800f7f8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800f7fa:	69bb      	ldr	r3, [r7, #24]
 800f7fc:	0c5b      	lsrs	r3, r3, #17
 800f7fe:	f003 030f 	and.w	r3, r3, #15
 800f802:	2b02      	cmp	r3, #2
 800f804:	d124      	bne.n	800f850 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800f806:	69ba      	ldr	r2, [r7, #24]
 800f808:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800f80c:	4013      	ands	r3, r2
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d035      	beq.n	800f87e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800f816:	69bb      	ldr	r3, [r7, #24]
 800f818:	091b      	lsrs	r3, r3, #4
 800f81a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800f81c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f820:	b29b      	uxth	r3, r3
 800f822:	461a      	mov	r2, r3
 800f824:	6a38      	ldr	r0, [r7, #32]
 800f826:	f008 f8df 	bl	80179e8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	691a      	ldr	r2, [r3, #16]
 800f82e:	69bb      	ldr	r3, [r7, #24]
 800f830:	091b      	lsrs	r3, r3, #4
 800f832:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f836:	441a      	add	r2, r3
 800f838:	697b      	ldr	r3, [r7, #20]
 800f83a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800f83c:	697b      	ldr	r3, [r7, #20]
 800f83e:	6a1a      	ldr	r2, [r3, #32]
 800f840:	69bb      	ldr	r3, [r7, #24]
 800f842:	091b      	lsrs	r3, r3, #4
 800f844:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f848:	441a      	add	r2, r3
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	621a      	str	r2, [r3, #32]
 800f84e:	e016      	b.n	800f87e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800f850:	69bb      	ldr	r3, [r7, #24]
 800f852:	0c5b      	lsrs	r3, r3, #17
 800f854:	f003 030f 	and.w	r3, r3, #15
 800f858:	2b06      	cmp	r3, #6
 800f85a:	d110      	bne.n	800f87e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f862:	2208      	movs	r2, #8
 800f864:	4619      	mov	r1, r3
 800f866:	6a38      	ldr	r0, [r7, #32]
 800f868:	f008 f8be 	bl	80179e8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800f86c:	697b      	ldr	r3, [r7, #20]
 800f86e:	6a1a      	ldr	r2, [r3, #32]
 800f870:	69bb      	ldr	r3, [r7, #24]
 800f872:	091b      	lsrs	r3, r3, #4
 800f874:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f878:	441a      	add	r2, r3
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	699a      	ldr	r2, [r3, #24]
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	f042 0210 	orr.w	r2, r2, #16
 800f88c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	4618      	mov	r0, r3
 800f894:	f008 fa3c 	bl	8017d10 <USB_ReadInterrupts>
 800f898:	4603      	mov	r3, r0
 800f89a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f89e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f8a2:	f040 80a7 	bne.w	800f9f4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f008 fa41 	bl	8017d36 <USB_ReadDevAllOutEpInterrupt>
 800f8b4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800f8b6:	e099      	b.n	800f9ec <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800f8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ba:	f003 0301 	and.w	r3, r3, #1
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	f000 808e 	beq.w	800f9e0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8ca:	b2d2      	uxtb	r2, r2
 800f8cc:	4611      	mov	r1, r2
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f008 fa65 	bl	8017d9e <USB_ReadDevOutEPInterrupt>
 800f8d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	f003 0301 	and.w	r3, r3, #1
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d00c      	beq.n	800f8fa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800f8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e2:	015a      	lsls	r2, r3, #5
 800f8e4:	69fb      	ldr	r3, [r7, #28]
 800f8e6:	4413      	add	r3, r2
 800f8e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8ec:	461a      	mov	r2, r3
 800f8ee:	2301      	movs	r3, #1
 800f8f0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800f8f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f8f4:	6878      	ldr	r0, [r7, #4]
 800f8f6:	f000 fe95 	bl	8010624 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800f8fa:	693b      	ldr	r3, [r7, #16]
 800f8fc:	f003 0308 	and.w	r3, r3, #8
 800f900:	2b00      	cmp	r3, #0
 800f902:	d00c      	beq.n	800f91e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800f904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f906:	015a      	lsls	r2, r3, #5
 800f908:	69fb      	ldr	r3, [r7, #28]
 800f90a:	4413      	add	r3, r2
 800f90c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f910:	461a      	mov	r2, r3
 800f912:	2308      	movs	r3, #8
 800f914:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800f916:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f000 fed1 	bl	80106c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800f91e:	693b      	ldr	r3, [r7, #16]
 800f920:	f003 0310 	and.w	r3, r3, #16
 800f924:	2b00      	cmp	r3, #0
 800f926:	d008      	beq.n	800f93a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800f928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f92a:	015a      	lsls	r2, r3, #5
 800f92c:	69fb      	ldr	r3, [r7, #28]
 800f92e:	4413      	add	r3, r2
 800f930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f934:	461a      	mov	r2, r3
 800f936:	2310      	movs	r3, #16
 800f938:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800f93a:	693b      	ldr	r3, [r7, #16]
 800f93c:	f003 0302 	and.w	r3, r3, #2
 800f940:	2b00      	cmp	r3, #0
 800f942:	d030      	beq.n	800f9a6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800f944:	6a3b      	ldr	r3, [r7, #32]
 800f946:	695b      	ldr	r3, [r3, #20]
 800f948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f94c:	2b80      	cmp	r3, #128	; 0x80
 800f94e:	d109      	bne.n	800f964 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800f950:	69fb      	ldr	r3, [r7, #28]
 800f952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f956:	685b      	ldr	r3, [r3, #4]
 800f958:	69fa      	ldr	r2, [r7, #28]
 800f95a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f95e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f962:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800f964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f966:	4613      	mov	r3, r2
 800f968:	00db      	lsls	r3, r3, #3
 800f96a:	4413      	add	r3, r2
 800f96c:	009b      	lsls	r3, r3, #2
 800f96e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f972:	687a      	ldr	r2, [r7, #4]
 800f974:	4413      	add	r3, r2
 800f976:	3304      	adds	r3, #4
 800f978:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800f97a:	697b      	ldr	r3, [r7, #20]
 800f97c:	78db      	ldrb	r3, [r3, #3]
 800f97e:	2b01      	cmp	r3, #1
 800f980:	d108      	bne.n	800f994 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800f982:	697b      	ldr	r3, [r7, #20]
 800f984:	2200      	movs	r2, #0
 800f986:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800f988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f98a:	b2db      	uxtb	r3, r3
 800f98c:	4619      	mov	r1, r3
 800f98e:	6878      	ldr	r0, [r7, #4]
 800f990:	f00a faa2 	bl	8019ed8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800f994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f996:	015a      	lsls	r2, r3, #5
 800f998:	69fb      	ldr	r3, [r7, #28]
 800f99a:	4413      	add	r3, r2
 800f99c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	2302      	movs	r3, #2
 800f9a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800f9a6:	693b      	ldr	r3, [r7, #16]
 800f9a8:	f003 0320 	and.w	r3, r3, #32
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d008      	beq.n	800f9c2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800f9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b2:	015a      	lsls	r2, r3, #5
 800f9b4:	69fb      	ldr	r3, [r7, #28]
 800f9b6:	4413      	add	r3, r2
 800f9b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9bc:	461a      	mov	r2, r3
 800f9be:	2320      	movs	r3, #32
 800f9c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800f9c2:	693b      	ldr	r3, [r7, #16]
 800f9c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d009      	beq.n	800f9e0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800f9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ce:	015a      	lsls	r2, r3, #5
 800f9d0:	69fb      	ldr	r3, [r7, #28]
 800f9d2:	4413      	add	r3, r2
 800f9d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9d8:	461a      	mov	r2, r3
 800f9da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f9de:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800f9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e2:	3301      	adds	r3, #1
 800f9e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800f9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9e8:	085b      	lsrs	r3, r3, #1
 800f9ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800f9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	f47f af62 	bne.w	800f8b8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f008 f989 	bl	8017d10 <USB_ReadInterrupts>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fa04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800fa08:	f040 80a4 	bne.w	800fb54 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	4618      	mov	r0, r3
 800fa12:	f008 f9aa 	bl	8017d6a <USB_ReadDevAllInEpInterrupt>
 800fa16:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800fa1c:	e096      	b.n	800fb4c <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800fa1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa20:	f003 0301 	and.w	r3, r3, #1
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	f000 808b 	beq.w	800fb40 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa30:	b2d2      	uxtb	r2, r2
 800fa32:	4611      	mov	r1, r2
 800fa34:	4618      	mov	r0, r3
 800fa36:	f008 f9d0 	bl	8017dda <USB_ReadDevInEPInterrupt>
 800fa3a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	f003 0301 	and.w	r3, r3, #1
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d020      	beq.n	800fa88 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800fa46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa48:	f003 030f 	and.w	r3, r3, #15
 800fa4c:	2201      	movs	r2, #1
 800fa4e:	fa02 f303 	lsl.w	r3, r2, r3
 800fa52:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800fa54:	69fb      	ldr	r3, [r7, #28]
 800fa56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	43db      	mvns	r3, r3
 800fa60:	69f9      	ldr	r1, [r7, #28]
 800fa62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fa66:	4013      	ands	r3, r2
 800fa68:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800fa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6c:	015a      	lsls	r2, r3, #5
 800fa6e:	69fb      	ldr	r3, [r7, #28]
 800fa70:	4413      	add	r3, r2
 800fa72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa76:	461a      	mov	r2, r3
 800fa78:	2301      	movs	r3, #1
 800fa7a:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800fa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa7e:	b2db      	uxtb	r3, r3
 800fa80:	4619      	mov	r1, r3
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f00a f993 	bl	8019dae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800fa88:	693b      	ldr	r3, [r7, #16]
 800fa8a:	f003 0308 	and.w	r3, r3, #8
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d008      	beq.n	800faa4 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800fa92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa94:	015a      	lsls	r2, r3, #5
 800fa96:	69fb      	ldr	r3, [r7, #28]
 800fa98:	4413      	add	r3, r2
 800fa9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa9e:	461a      	mov	r2, r3
 800faa0:	2308      	movs	r3, #8
 800faa2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800faa4:	693b      	ldr	r3, [r7, #16]
 800faa6:	f003 0310 	and.w	r3, r3, #16
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d008      	beq.n	800fac0 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800faae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab0:	015a      	lsls	r2, r3, #5
 800fab2:	69fb      	ldr	r3, [r7, #28]
 800fab4:	4413      	add	r3, r2
 800fab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faba:	461a      	mov	r2, r3
 800fabc:	2310      	movs	r3, #16
 800fabe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800fac0:	693b      	ldr	r3, [r7, #16]
 800fac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d008      	beq.n	800fadc <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800faca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800facc:	015a      	lsls	r2, r3, #5
 800face:	69fb      	ldr	r3, [r7, #28]
 800fad0:	4413      	add	r3, r2
 800fad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fad6:	461a      	mov	r2, r3
 800fad8:	2340      	movs	r3, #64	; 0x40
 800fada:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800fadc:	693b      	ldr	r3, [r7, #16]
 800fade:	f003 0302 	and.w	r3, r3, #2
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d023      	beq.n	800fb2e <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800fae6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fae8:	6a38      	ldr	r0, [r7, #32]
 800faea:	f007 f997 	bl	8016e1c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800faee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faf0:	4613      	mov	r3, r2
 800faf2:	00db      	lsls	r3, r3, #3
 800faf4:	4413      	add	r3, r2
 800faf6:	009b      	lsls	r3, r3, #2
 800faf8:	3338      	adds	r3, #56	; 0x38
 800fafa:	687a      	ldr	r2, [r7, #4]
 800fafc:	4413      	add	r3, r2
 800fafe:	3304      	adds	r3, #4
 800fb00:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800fb02:	697b      	ldr	r3, [r7, #20]
 800fb04:	78db      	ldrb	r3, [r3, #3]
 800fb06:	2b01      	cmp	r3, #1
 800fb08:	d108      	bne.n	800fb1c <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800fb0a:	697b      	ldr	r3, [r7, #20]
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800fb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb12:	b2db      	uxtb	r3, r3
 800fb14:	4619      	mov	r1, r3
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f00a f9f0 	bl	8019efc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800fb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb1e:	015a      	lsls	r2, r3, #5
 800fb20:	69fb      	ldr	r3, [r7, #28]
 800fb22:	4413      	add	r3, r2
 800fb24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb28:	461a      	mov	r2, r3
 800fb2a:	2302      	movs	r3, #2
 800fb2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800fb2e:	693b      	ldr	r3, [r7, #16]
 800fb30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d003      	beq.n	800fb40 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800fb38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	f000 fcea 	bl	8010514 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800fb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb42:	3301      	adds	r3, #1
 800fb44:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800fb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb48:	085b      	lsrs	r3, r3, #1
 800fb4a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800fb4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	f47f af65 	bne.w	800fa1e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f008 f8d9 	bl	8017d10 <USB_ReadInterrupts>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fb64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fb68:	d122      	bne.n	800fbb0 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800fb6a:	69fb      	ldr	r3, [r7, #28]
 800fb6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb70:	685b      	ldr	r3, [r3, #4]
 800fb72:	69fa      	ldr	r2, [r7, #28]
 800fb74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fb78:	f023 0301 	bic.w	r3, r3, #1
 800fb7c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800fb84:	2b01      	cmp	r3, #1
 800fb86:	d108      	bne.n	800fb9a <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800fb90:	2100      	movs	r1, #0
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f00a fc24 	bl	801a3e0 <HAL_PCDEx_LPM_Callback>
 800fb98:	e002      	b.n	800fba0 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f00a f974 	bl	8019e88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	695a      	ldr	r2, [r3, #20]
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800fbae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f008 f8ab 	bl	8017d10 <USB_ReadInterrupts>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fbc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fbc4:	d112      	bne.n	800fbec <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800fbc6:	69fb      	ldr	r3, [r7, #28]
 800fbc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbcc:	689b      	ldr	r3, [r3, #8]
 800fbce:	f003 0301 	and.w	r3, r3, #1
 800fbd2:	2b01      	cmp	r3, #1
 800fbd4:	d102      	bne.n	800fbdc <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800fbd6:	6878      	ldr	r0, [r7, #4]
 800fbd8:	f00a f930 	bl	8019e3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	695a      	ldr	r2, [r3, #20]
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800fbea:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f008 f88d 	bl	8017d10 <USB_ReadInterrupts>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fbfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fc00:	d121      	bne.n	800fc46 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	695a      	ldr	r2, [r3, #20]
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800fc10:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d111      	bne.n	800fc40 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2201      	movs	r2, #1
 800fc20:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc2a:	089b      	lsrs	r3, r3, #2
 800fc2c:	f003 020f 	and.w	r2, r3, #15
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800fc36:	2101      	movs	r1, #1
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f00a fbd1 	bl	801a3e0 <HAL_PCDEx_LPM_Callback>
 800fc3e:	e002      	b.n	800fc46 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f00a f8fb 	bl	8019e3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f008 f860 	bl	8017d10 <USB_ReadInterrupts>
 800fc50:	4603      	mov	r3, r0
 800fc52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fc56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc5a:	f040 80b5 	bne.w	800fdc8 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800fc5e:	69fb      	ldr	r3, [r7, #28]
 800fc60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc64:	685b      	ldr	r3, [r3, #4]
 800fc66:	69fa      	ldr	r2, [r7, #28]
 800fc68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fc6c:	f023 0301 	bic.w	r3, r3, #1
 800fc70:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	2110      	movs	r1, #16
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f007 f8cf 	bl	8016e1c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fc7e:	2300      	movs	r3, #0
 800fc80:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc82:	e046      	b.n	800fd12 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800fc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc86:	015a      	lsls	r2, r3, #5
 800fc88:	69fb      	ldr	r3, [r7, #28]
 800fc8a:	4413      	add	r3, r2
 800fc8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc90:	461a      	mov	r2, r3
 800fc92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fc96:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800fc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc9a:	015a      	lsls	r2, r3, #5
 800fc9c:	69fb      	ldr	r3, [r7, #28]
 800fc9e:	4413      	add	r3, r2
 800fca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fca8:	0151      	lsls	r1, r2, #5
 800fcaa:	69fa      	ldr	r2, [r7, #28]
 800fcac:	440a      	add	r2, r1
 800fcae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fcb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fcb6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800fcb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcba:	015a      	lsls	r2, r3, #5
 800fcbc:	69fb      	ldr	r3, [r7, #28]
 800fcbe:	4413      	add	r3, r2
 800fcc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcc4:	461a      	mov	r2, r3
 800fcc6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fcca:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcce:	015a      	lsls	r2, r3, #5
 800fcd0:	69fb      	ldr	r3, [r7, #28]
 800fcd2:	4413      	add	r3, r2
 800fcd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcdc:	0151      	lsls	r1, r2, #5
 800fcde:	69fa      	ldr	r2, [r7, #28]
 800fce0:	440a      	add	r2, r1
 800fce2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fce6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fcea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fcec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcee:	015a      	lsls	r2, r3, #5
 800fcf0:	69fb      	ldr	r3, [r7, #28]
 800fcf2:	4413      	add	r3, r2
 800fcf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcfc:	0151      	lsls	r1, r2, #5
 800fcfe:	69fa      	ldr	r2, [r7, #28]
 800fd00:	440a      	add	r2, r1
 800fd02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fd0a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd0e:	3301      	adds	r3, #1
 800fd10:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	685b      	ldr	r3, [r3, #4]
 800fd16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd18:	429a      	cmp	r2, r3
 800fd1a:	d3b3      	bcc.n	800fc84 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800fd1c:	69fb      	ldr	r3, [r7, #28]
 800fd1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd22:	69db      	ldr	r3, [r3, #28]
 800fd24:	69fa      	ldr	r2, [r7, #28]
 800fd26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fd2a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800fd2e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d016      	beq.n	800fd66 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800fd38:	69fb      	ldr	r3, [r7, #28]
 800fd3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd42:	69fa      	ldr	r2, [r7, #28]
 800fd44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fd48:	f043 030b 	orr.w	r3, r3, #11
 800fd4c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800fd50:	69fb      	ldr	r3, [r7, #28]
 800fd52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd58:	69fa      	ldr	r2, [r7, #28]
 800fd5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fd5e:	f043 030b 	orr.w	r3, r3, #11
 800fd62:	6453      	str	r3, [r2, #68]	; 0x44
 800fd64:	e015      	b.n	800fd92 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800fd66:	69fb      	ldr	r3, [r7, #28]
 800fd68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd6c:	695b      	ldr	r3, [r3, #20]
 800fd6e:	69fa      	ldr	r2, [r7, #28]
 800fd70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fd74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fd78:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800fd7c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800fd7e:	69fb      	ldr	r3, [r7, #28]
 800fd80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd84:	691b      	ldr	r3, [r3, #16]
 800fd86:	69fa      	ldr	r2, [r7, #28]
 800fd88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fd8c:	f043 030b 	orr.w	r3, r3, #11
 800fd90:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800fd92:	69fb      	ldr	r3, [r7, #28]
 800fd94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	69fa      	ldr	r2, [r7, #28]
 800fd9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fda0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800fda4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681a      	ldr	r2, [r3, #0]
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800fdb0:	4619      	mov	r1, r3
 800fdb2:	4610      	mov	r0, r2
 800fdb4:	f008 f870 	bl	8017e98 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	695a      	ldr	r2, [r3, #20]
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800fdc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f007 ff9f 	bl	8017d10 <USB_ReadInterrupts>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fdd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fddc:	d124      	bne.n	800fe28 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	4618      	mov	r0, r3
 800fde4:	f008 f835 	bl	8017e52 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	4618      	mov	r0, r3
 800fdee:	f007 f892 	bl	8016f16 <USB_GetDevSpeed>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	461a      	mov	r2, r3
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681c      	ldr	r4, [r3, #0]
 800fdfe:	f001 fc87 	bl	8011710 <HAL_RCC_GetHCLKFreq>
 800fe02:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800fe08:	b2db      	uxtb	r3, r3
 800fe0a:	461a      	mov	r2, r3
 800fe0c:	4620      	mov	r0, r4
 800fe0e:	f006 fdaf 	bl	8016970 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800fe12:	6878      	ldr	r0, [r7, #4]
 800fe14:	f009 fff3 	bl	8019dfe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	695a      	ldr	r2, [r3, #20]
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800fe26:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f007 ff6f 	bl	8017d10 <USB_ReadInterrupts>
 800fe32:	4603      	mov	r3, r0
 800fe34:	f003 0308 	and.w	r3, r3, #8
 800fe38:	2b08      	cmp	r3, #8
 800fe3a:	d10a      	bne.n	800fe52 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f009 ffd0 	bl	8019de2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	695a      	ldr	r2, [r3, #20]
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	f002 0208 	and.w	r2, r2, #8
 800fe50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	4618      	mov	r0, r3
 800fe58:	f007 ff5a 	bl	8017d10 <USB_ReadInterrupts>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe62:	2b80      	cmp	r3, #128	; 0x80
 800fe64:	d122      	bne.n	800feac <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800fe66:	6a3b      	ldr	r3, [r7, #32]
 800fe68:	699b      	ldr	r3, [r3, #24]
 800fe6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fe6e:	6a3b      	ldr	r3, [r7, #32]
 800fe70:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800fe72:	2301      	movs	r3, #1
 800fe74:	627b      	str	r3, [r7, #36]	; 0x24
 800fe76:	e014      	b.n	800fea2 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800fe78:	6879      	ldr	r1, [r7, #4]
 800fe7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe7c:	4613      	mov	r3, r2
 800fe7e:	00db      	lsls	r3, r3, #3
 800fe80:	4413      	add	r3, r2
 800fe82:	009b      	lsls	r3, r3, #2
 800fe84:	440b      	add	r3, r1
 800fe86:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	2b01      	cmp	r3, #1
 800fe8e:	d105      	bne.n	800fe9c <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800fe90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe92:	b2db      	uxtb	r3, r3
 800fe94:	4619      	mov	r1, r3
 800fe96:	6878      	ldr	r0, [r7, #4]
 800fe98:	f000 fb0b 	bl	80104b2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800fe9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe9e:	3301      	adds	r3, #1
 800fea0:	627b      	str	r3, [r7, #36]	; 0x24
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	685b      	ldr	r3, [r3, #4]
 800fea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fea8:	429a      	cmp	r2, r3
 800feaa:	d3e5      	bcc.n	800fe78 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	4618      	mov	r0, r3
 800feb2:	f007 ff2d 	bl	8017d10 <USB_ReadInterrupts>
 800feb6:	4603      	mov	r3, r0
 800feb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800febc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fec0:	d13b      	bne.n	800ff3a <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800fec2:	2301      	movs	r3, #1
 800fec4:	627b      	str	r3, [r7, #36]	; 0x24
 800fec6:	e02b      	b.n	800ff20 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800fec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feca:	015a      	lsls	r2, r3, #5
 800fecc:	69fb      	ldr	r3, [r7, #28]
 800fece:	4413      	add	r3, r2
 800fed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800fed8:	6879      	ldr	r1, [r7, #4]
 800feda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fedc:	4613      	mov	r3, r2
 800fede:	00db      	lsls	r3, r3, #3
 800fee0:	4413      	add	r3, r2
 800fee2:	009b      	lsls	r3, r3, #2
 800fee4:	440b      	add	r3, r1
 800fee6:	3340      	adds	r3, #64	; 0x40
 800fee8:	781b      	ldrb	r3, [r3, #0]
 800feea:	2b01      	cmp	r3, #1
 800feec:	d115      	bne.n	800ff1a <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800feee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	da12      	bge.n	800ff1a <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800fef4:	6879      	ldr	r1, [r7, #4]
 800fef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fef8:	4613      	mov	r3, r2
 800fefa:	00db      	lsls	r3, r3, #3
 800fefc:	4413      	add	r3, r2
 800fefe:	009b      	lsls	r3, r3, #2
 800ff00:	440b      	add	r3, r1
 800ff02:	333f      	adds	r3, #63	; 0x3f
 800ff04:	2201      	movs	r2, #1
 800ff06:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800ff08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff0a:	b2db      	uxtb	r3, r3
 800ff0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ff10:	b2db      	uxtb	r3, r3
 800ff12:	4619      	mov	r1, r3
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f000 facc 	bl	80104b2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ff1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff1c:	3301      	adds	r3, #1
 800ff1e:	627b      	str	r3, [r7, #36]	; 0x24
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	685b      	ldr	r3, [r3, #4]
 800ff24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff26:	429a      	cmp	r2, r3
 800ff28:	d3ce      	bcc.n	800fec8 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	695a      	ldr	r2, [r3, #20]
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800ff38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f007 fee6 	bl	8017d10 <USB_ReadInterrupts>
 800ff44:	4603      	mov	r3, r0
 800ff46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ff4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ff4e:	d155      	bne.n	800fffc <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ff50:	2301      	movs	r3, #1
 800ff52:	627b      	str	r3, [r7, #36]	; 0x24
 800ff54:	e045      	b.n	800ffe2 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800ff56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff58:	015a      	lsls	r2, r3, #5
 800ff5a:	69fb      	ldr	r3, [r7, #28]
 800ff5c:	4413      	add	r3, r2
 800ff5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ff66:	6879      	ldr	r1, [r7, #4]
 800ff68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff6a:	4613      	mov	r3, r2
 800ff6c:	00db      	lsls	r3, r3, #3
 800ff6e:	4413      	add	r3, r2
 800ff70:	009b      	lsls	r3, r3, #2
 800ff72:	440b      	add	r3, r1
 800ff74:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ff78:	781b      	ldrb	r3, [r3, #0]
 800ff7a:	2b01      	cmp	r3, #1
 800ff7c:	d12e      	bne.n	800ffdc <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ff7e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	da2b      	bge.n	800ffdc <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800ff84:	69bb      	ldr	r3, [r7, #24]
 800ff86:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800ff90:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ff94:	429a      	cmp	r2, r3
 800ff96:	d121      	bne.n	800ffdc <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800ff98:	6879      	ldr	r1, [r7, #4]
 800ff9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff9c:	4613      	mov	r3, r2
 800ff9e:	00db      	lsls	r3, r3, #3
 800ffa0:	4413      	add	r3, r2
 800ffa2:	009b      	lsls	r3, r3, #2
 800ffa4:	440b      	add	r3, r1
 800ffa6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800ffaa:	2201      	movs	r2, #1
 800ffac:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800ffae:	6a3b      	ldr	r3, [r7, #32]
 800ffb0:	699b      	ldr	r3, [r3, #24]
 800ffb2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ffb6:	6a3b      	ldr	r3, [r7, #32]
 800ffb8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800ffba:	6a3b      	ldr	r3, [r7, #32]
 800ffbc:	695b      	ldr	r3, [r3, #20]
 800ffbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d10a      	bne.n	800ffdc <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800ffc6:	69fb      	ldr	r3, [r7, #28]
 800ffc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffcc:	685b      	ldr	r3, [r3, #4]
 800ffce:	69fa      	ldr	r2, [r7, #28]
 800ffd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ffd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ffd8:	6053      	str	r3, [r2, #4]
            break;
 800ffda:	e007      	b.n	800ffec <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ffdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffde:	3301      	adds	r3, #1
 800ffe0:	627b      	str	r3, [r7, #36]	; 0x24
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	685b      	ldr	r3, [r3, #4]
 800ffe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	d3b4      	bcc.n	800ff56 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	695a      	ldr	r2, [r3, #20]
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800fffa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	4618      	mov	r0, r3
 8010002:	f007 fe85 	bl	8017d10 <USB_ReadInterrupts>
 8010006:	4603      	mov	r3, r0
 8010008:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801000c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010010:	d10a      	bne.n	8010028 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	f009 ff84 	bl	8019f20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	695a      	ldr	r2, [r3, #20]
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8010026:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	4618      	mov	r0, r3
 801002e:	f007 fe6f 	bl	8017d10 <USB_ReadInterrupts>
 8010032:	4603      	mov	r3, r0
 8010034:	f003 0304 	and.w	r3, r3, #4
 8010038:	2b04      	cmp	r3, #4
 801003a:	d115      	bne.n	8010068 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	685b      	ldr	r3, [r3, #4]
 8010042:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8010044:	69bb      	ldr	r3, [r7, #24]
 8010046:	f003 0304 	and.w	r3, r3, #4
 801004a:	2b00      	cmp	r3, #0
 801004c:	d002      	beq.n	8010054 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f009 ff74 	bl	8019f3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	6859      	ldr	r1, [r3, #4]
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	69ba      	ldr	r2, [r7, #24]
 8010060:	430a      	orrs	r2, r1
 8010062:	605a      	str	r2, [r3, #4]
 8010064:	e000      	b.n	8010068 <HAL_PCD_IRQHandler+0x920>
      return;
 8010066:	bf00      	nop
    }
  }
}
 8010068:	3734      	adds	r7, #52	; 0x34
 801006a:	46bd      	mov	sp, r7
 801006c:	bd90      	pop	{r4, r7, pc}

0801006e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801006e:	b580      	push	{r7, lr}
 8010070:	b082      	sub	sp, #8
 8010072:	af00      	add	r7, sp, #0
 8010074:	6078      	str	r0, [r7, #4]
 8010076:	460b      	mov	r3, r1
 8010078:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8010080:	2b01      	cmp	r3, #1
 8010082:	d101      	bne.n	8010088 <HAL_PCD_SetAddress+0x1a>
 8010084:	2302      	movs	r3, #2
 8010086:	e013      	b.n	80100b0 <HAL_PCD_SetAddress+0x42>
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2201      	movs	r2, #1
 801008c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	78fa      	ldrb	r2, [r7, #3]
 8010094:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	78fa      	ldrb	r2, [r7, #3]
 801009e:	4611      	mov	r1, r2
 80100a0:	4618      	mov	r0, r3
 80100a2:	f007 fdcd 	bl	8017c40 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2200      	movs	r2, #0
 80100aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80100ae:	2300      	movs	r3, #0
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	3708      	adds	r7, #8
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}

080100b8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b084      	sub	sp, #16
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
 80100c0:	4608      	mov	r0, r1
 80100c2:	4611      	mov	r1, r2
 80100c4:	461a      	mov	r2, r3
 80100c6:	4603      	mov	r3, r0
 80100c8:	70fb      	strb	r3, [r7, #3]
 80100ca:	460b      	mov	r3, r1
 80100cc:	803b      	strh	r3, [r7, #0]
 80100ce:	4613      	mov	r3, r2
 80100d0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80100d2:	2300      	movs	r3, #0
 80100d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80100d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	da0f      	bge.n	80100fe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80100de:	78fb      	ldrb	r3, [r7, #3]
 80100e0:	f003 020f 	and.w	r2, r3, #15
 80100e4:	4613      	mov	r3, r2
 80100e6:	00db      	lsls	r3, r3, #3
 80100e8:	4413      	add	r3, r2
 80100ea:	009b      	lsls	r3, r3, #2
 80100ec:	3338      	adds	r3, #56	; 0x38
 80100ee:	687a      	ldr	r2, [r7, #4]
 80100f0:	4413      	add	r3, r2
 80100f2:	3304      	adds	r3, #4
 80100f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	2201      	movs	r2, #1
 80100fa:	705a      	strb	r2, [r3, #1]
 80100fc:	e00f      	b.n	801011e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80100fe:	78fb      	ldrb	r3, [r7, #3]
 8010100:	f003 020f 	and.w	r2, r3, #15
 8010104:	4613      	mov	r3, r2
 8010106:	00db      	lsls	r3, r3, #3
 8010108:	4413      	add	r3, r2
 801010a:	009b      	lsls	r3, r3, #2
 801010c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8010110:	687a      	ldr	r2, [r7, #4]
 8010112:	4413      	add	r3, r2
 8010114:	3304      	adds	r3, #4
 8010116:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	2200      	movs	r2, #0
 801011c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 801011e:	78fb      	ldrb	r3, [r7, #3]
 8010120:	f003 030f 	and.w	r3, r3, #15
 8010124:	b2da      	uxtb	r2, r3
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 801012a:	883a      	ldrh	r2, [r7, #0]
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	78ba      	ldrb	r2, [r7, #2]
 8010134:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	785b      	ldrb	r3, [r3, #1]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d004      	beq.n	8010148 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	781b      	ldrb	r3, [r3, #0]
 8010142:	b29a      	uxth	r2, r3
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8010148:	78bb      	ldrb	r3, [r7, #2]
 801014a:	2b02      	cmp	r3, #2
 801014c:	d102      	bne.n	8010154 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	2200      	movs	r2, #0
 8010152:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801015a:	2b01      	cmp	r3, #1
 801015c:	d101      	bne.n	8010162 <HAL_PCD_EP_Open+0xaa>
 801015e:	2302      	movs	r3, #2
 8010160:	e00e      	b.n	8010180 <HAL_PCD_EP_Open+0xc8>
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	2201      	movs	r2, #1
 8010166:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	68f9      	ldr	r1, [r7, #12]
 8010170:	4618      	mov	r0, r3
 8010172:	f006 feef 	bl	8016f54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2200      	movs	r2, #0
 801017a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 801017e:	7afb      	ldrb	r3, [r7, #11]
}
 8010180:	4618      	mov	r0, r3
 8010182:	3710      	adds	r7, #16
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}

08010188 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b084      	sub	sp, #16
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
 8010190:	460b      	mov	r3, r1
 8010192:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8010194:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010198:	2b00      	cmp	r3, #0
 801019a:	da0f      	bge.n	80101bc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801019c:	78fb      	ldrb	r3, [r7, #3]
 801019e:	f003 020f 	and.w	r2, r3, #15
 80101a2:	4613      	mov	r3, r2
 80101a4:	00db      	lsls	r3, r3, #3
 80101a6:	4413      	add	r3, r2
 80101a8:	009b      	lsls	r3, r3, #2
 80101aa:	3338      	adds	r3, #56	; 0x38
 80101ac:	687a      	ldr	r2, [r7, #4]
 80101ae:	4413      	add	r3, r2
 80101b0:	3304      	adds	r3, #4
 80101b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	2201      	movs	r2, #1
 80101b8:	705a      	strb	r2, [r3, #1]
 80101ba:	e00f      	b.n	80101dc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80101bc:	78fb      	ldrb	r3, [r7, #3]
 80101be:	f003 020f 	and.w	r2, r3, #15
 80101c2:	4613      	mov	r3, r2
 80101c4:	00db      	lsls	r3, r3, #3
 80101c6:	4413      	add	r3, r2
 80101c8:	009b      	lsls	r3, r3, #2
 80101ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80101ce:	687a      	ldr	r2, [r7, #4]
 80101d0:	4413      	add	r3, r2
 80101d2:	3304      	adds	r3, #4
 80101d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	2200      	movs	r2, #0
 80101da:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80101dc:	78fb      	ldrb	r3, [r7, #3]
 80101de:	f003 030f 	and.w	r3, r3, #15
 80101e2:	b2da      	uxtb	r2, r3
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80101ee:	2b01      	cmp	r3, #1
 80101f0:	d101      	bne.n	80101f6 <HAL_PCD_EP_Close+0x6e>
 80101f2:	2302      	movs	r3, #2
 80101f4:	e00e      	b.n	8010214 <HAL_PCD_EP_Close+0x8c>
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2201      	movs	r2, #1
 80101fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	68f9      	ldr	r1, [r7, #12]
 8010204:	4618      	mov	r0, r3
 8010206:	f006 ff2d 	bl	8017064 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	2200      	movs	r2, #0
 801020e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8010212:	2300      	movs	r3, #0
}
 8010214:	4618      	mov	r0, r3
 8010216:	3710      	adds	r7, #16
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}

0801021c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b086      	sub	sp, #24
 8010220:	af00      	add	r7, sp, #0
 8010222:	60f8      	str	r0, [r7, #12]
 8010224:	607a      	str	r2, [r7, #4]
 8010226:	603b      	str	r3, [r7, #0]
 8010228:	460b      	mov	r3, r1
 801022a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801022c:	7afb      	ldrb	r3, [r7, #11]
 801022e:	f003 020f 	and.w	r2, r3, #15
 8010232:	4613      	mov	r3, r2
 8010234:	00db      	lsls	r3, r3, #3
 8010236:	4413      	add	r3, r2
 8010238:	009b      	lsls	r3, r3, #2
 801023a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801023e:	68fa      	ldr	r2, [r7, #12]
 8010240:	4413      	add	r3, r2
 8010242:	3304      	adds	r3, #4
 8010244:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8010246:	697b      	ldr	r3, [r7, #20]
 8010248:	687a      	ldr	r2, [r7, #4]
 801024a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 801024c:	697b      	ldr	r3, [r7, #20]
 801024e:	683a      	ldr	r2, [r7, #0]
 8010250:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	2200      	movs	r2, #0
 8010256:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	2200      	movs	r2, #0
 801025c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801025e:	7afb      	ldrb	r3, [r7, #11]
 8010260:	f003 030f 	and.w	r3, r3, #15
 8010264:	b2da      	uxtb	r2, r3
 8010266:	697b      	ldr	r3, [r7, #20]
 8010268:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801026a:	7afb      	ldrb	r3, [r7, #11]
 801026c:	f003 030f 	and.w	r3, r3, #15
 8010270:	2b00      	cmp	r3, #0
 8010272:	d106      	bne.n	8010282 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	6979      	ldr	r1, [r7, #20]
 801027a:	4618      	mov	r0, r3
 801027c:	f007 f9ae 	bl	80175dc <USB_EP0StartXfer>
 8010280:	e005      	b.n	801028e <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	6979      	ldr	r1, [r7, #20]
 8010288:	4618      	mov	r0, r3
 801028a:	f006 ffc7 	bl	801721c <USB_EPStartXfer>
  }

  return HAL_OK;
 801028e:	2300      	movs	r3, #0
}
 8010290:	4618      	mov	r0, r3
 8010292:	3718      	adds	r7, #24
 8010294:	46bd      	mov	sp, r7
 8010296:	bd80      	pop	{r7, pc}

08010298 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8010298:	b480      	push	{r7}
 801029a:	b083      	sub	sp, #12
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
 80102a0:	460b      	mov	r3, r1
 80102a2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80102a4:	78fb      	ldrb	r3, [r7, #3]
 80102a6:	f003 020f 	and.w	r2, r3, #15
 80102aa:	6879      	ldr	r1, [r7, #4]
 80102ac:	4613      	mov	r3, r2
 80102ae:	00db      	lsls	r3, r3, #3
 80102b0:	4413      	add	r3, r2
 80102b2:	009b      	lsls	r3, r3, #2
 80102b4:	440b      	add	r3, r1
 80102b6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80102ba:	681b      	ldr	r3, [r3, #0]
}
 80102bc:	4618      	mov	r0, r3
 80102be:	370c      	adds	r7, #12
 80102c0:	46bd      	mov	sp, r7
 80102c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c6:	4770      	bx	lr

080102c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b086      	sub	sp, #24
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	60f8      	str	r0, [r7, #12]
 80102d0:	607a      	str	r2, [r7, #4]
 80102d2:	603b      	str	r3, [r7, #0]
 80102d4:	460b      	mov	r3, r1
 80102d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80102d8:	7afb      	ldrb	r3, [r7, #11]
 80102da:	f003 020f 	and.w	r2, r3, #15
 80102de:	4613      	mov	r3, r2
 80102e0:	00db      	lsls	r3, r3, #3
 80102e2:	4413      	add	r3, r2
 80102e4:	009b      	lsls	r3, r3, #2
 80102e6:	3338      	adds	r3, #56	; 0x38
 80102e8:	68fa      	ldr	r2, [r7, #12]
 80102ea:	4413      	add	r3, r2
 80102ec:	3304      	adds	r3, #4
 80102ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80102f0:	697b      	ldr	r3, [r7, #20]
 80102f2:	687a      	ldr	r2, [r7, #4]
 80102f4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80102f6:	697b      	ldr	r3, [r7, #20]
 80102f8:	683a      	ldr	r2, [r7, #0]
 80102fa:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80102fc:	697b      	ldr	r3, [r7, #20]
 80102fe:	2200      	movs	r2, #0
 8010300:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	2201      	movs	r2, #1
 8010306:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010308:	7afb      	ldrb	r3, [r7, #11]
 801030a:	f003 030f 	and.w	r3, r3, #15
 801030e:	b2da      	uxtb	r2, r3
 8010310:	697b      	ldr	r3, [r7, #20]
 8010312:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8010314:	7afb      	ldrb	r3, [r7, #11]
 8010316:	f003 030f 	and.w	r3, r3, #15
 801031a:	2b00      	cmp	r3, #0
 801031c:	d106      	bne.n	801032c <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	6979      	ldr	r1, [r7, #20]
 8010324:	4618      	mov	r0, r3
 8010326:	f007 f959 	bl	80175dc <USB_EP0StartXfer>
 801032a:	e005      	b.n	8010338 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	6979      	ldr	r1, [r7, #20]
 8010332:	4618      	mov	r0, r3
 8010334:	f006 ff72 	bl	801721c <USB_EPStartXfer>
  }

  return HAL_OK;
 8010338:	2300      	movs	r3, #0
}
 801033a:	4618      	mov	r0, r3
 801033c:	3718      	adds	r7, #24
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}

08010342 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8010342:	b580      	push	{r7, lr}
 8010344:	b084      	sub	sp, #16
 8010346:	af00      	add	r7, sp, #0
 8010348:	6078      	str	r0, [r7, #4]
 801034a:	460b      	mov	r3, r1
 801034c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801034e:	78fb      	ldrb	r3, [r7, #3]
 8010350:	f003 020f 	and.w	r2, r3, #15
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	685b      	ldr	r3, [r3, #4]
 8010358:	429a      	cmp	r2, r3
 801035a:	d901      	bls.n	8010360 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 801035c:	2301      	movs	r3, #1
 801035e:	e04e      	b.n	80103fe <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8010360:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010364:	2b00      	cmp	r3, #0
 8010366:	da0f      	bge.n	8010388 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010368:	78fb      	ldrb	r3, [r7, #3]
 801036a:	f003 020f 	and.w	r2, r3, #15
 801036e:	4613      	mov	r3, r2
 8010370:	00db      	lsls	r3, r3, #3
 8010372:	4413      	add	r3, r2
 8010374:	009b      	lsls	r3, r3, #2
 8010376:	3338      	adds	r3, #56	; 0x38
 8010378:	687a      	ldr	r2, [r7, #4]
 801037a:	4413      	add	r3, r2
 801037c:	3304      	adds	r3, #4
 801037e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	2201      	movs	r2, #1
 8010384:	705a      	strb	r2, [r3, #1]
 8010386:	e00d      	b.n	80103a4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8010388:	78fa      	ldrb	r2, [r7, #3]
 801038a:	4613      	mov	r3, r2
 801038c:	00db      	lsls	r3, r3, #3
 801038e:	4413      	add	r3, r2
 8010390:	009b      	lsls	r3, r3, #2
 8010392:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8010396:	687a      	ldr	r2, [r7, #4]
 8010398:	4413      	add	r3, r2
 801039a:	3304      	adds	r3, #4
 801039c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	2200      	movs	r2, #0
 80103a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	2201      	movs	r2, #1
 80103a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80103aa:	78fb      	ldrb	r3, [r7, #3]
 80103ac:	f003 030f 	and.w	r3, r3, #15
 80103b0:	b2da      	uxtb	r2, r3
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80103bc:	2b01      	cmp	r3, #1
 80103be:	d101      	bne.n	80103c4 <HAL_PCD_EP_SetStall+0x82>
 80103c0:	2302      	movs	r3, #2
 80103c2:	e01c      	b.n	80103fe <HAL_PCD_EP_SetStall+0xbc>
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2201      	movs	r2, #1
 80103c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	68f9      	ldr	r1, [r7, #12]
 80103d2:	4618      	mov	r0, r3
 80103d4:	f007 fb60 	bl	8017a98 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80103d8:	78fb      	ldrb	r3, [r7, #3]
 80103da:	f003 030f 	and.w	r3, r3, #15
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d108      	bne.n	80103f4 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681a      	ldr	r2, [r3, #0]
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80103ec:	4619      	mov	r1, r3
 80103ee:	4610      	mov	r0, r2
 80103f0:	f007 fd52 	bl	8017e98 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	2200      	movs	r2, #0
 80103f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80103fc:	2300      	movs	r3, #0
}
 80103fe:	4618      	mov	r0, r3
 8010400:	3710      	adds	r7, #16
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}

08010406 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8010406:	b580      	push	{r7, lr}
 8010408:	b084      	sub	sp, #16
 801040a:	af00      	add	r7, sp, #0
 801040c:	6078      	str	r0, [r7, #4]
 801040e:	460b      	mov	r3, r1
 8010410:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8010412:	78fb      	ldrb	r3, [r7, #3]
 8010414:	f003 020f 	and.w	r2, r3, #15
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	685b      	ldr	r3, [r3, #4]
 801041c:	429a      	cmp	r2, r3
 801041e:	d901      	bls.n	8010424 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8010420:	2301      	movs	r3, #1
 8010422:	e042      	b.n	80104aa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8010424:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010428:	2b00      	cmp	r3, #0
 801042a:	da0f      	bge.n	801044c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801042c:	78fb      	ldrb	r3, [r7, #3]
 801042e:	f003 020f 	and.w	r2, r3, #15
 8010432:	4613      	mov	r3, r2
 8010434:	00db      	lsls	r3, r3, #3
 8010436:	4413      	add	r3, r2
 8010438:	009b      	lsls	r3, r3, #2
 801043a:	3338      	adds	r3, #56	; 0x38
 801043c:	687a      	ldr	r2, [r7, #4]
 801043e:	4413      	add	r3, r2
 8010440:	3304      	adds	r3, #4
 8010442:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	2201      	movs	r2, #1
 8010448:	705a      	strb	r2, [r3, #1]
 801044a:	e00f      	b.n	801046c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801044c:	78fb      	ldrb	r3, [r7, #3]
 801044e:	f003 020f 	and.w	r2, r3, #15
 8010452:	4613      	mov	r3, r2
 8010454:	00db      	lsls	r3, r3, #3
 8010456:	4413      	add	r3, r2
 8010458:	009b      	lsls	r3, r3, #2
 801045a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801045e:	687a      	ldr	r2, [r7, #4]
 8010460:	4413      	add	r3, r2
 8010462:	3304      	adds	r3, #4
 8010464:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	2200      	movs	r2, #0
 801046a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	2200      	movs	r2, #0
 8010470:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010472:	78fb      	ldrb	r3, [r7, #3]
 8010474:	f003 030f 	and.w	r3, r3, #15
 8010478:	b2da      	uxtb	r2, r3
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8010484:	2b01      	cmp	r3, #1
 8010486:	d101      	bne.n	801048c <HAL_PCD_EP_ClrStall+0x86>
 8010488:	2302      	movs	r3, #2
 801048a:	e00e      	b.n	80104aa <HAL_PCD_EP_ClrStall+0xa4>
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2201      	movs	r2, #1
 8010490:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	68f9      	ldr	r1, [r7, #12]
 801049a:	4618      	mov	r0, r3
 801049c:	f007 fb6a 	bl	8017b74 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2200      	movs	r2, #0
 80104a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80104a8:	2300      	movs	r3, #0
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	3710      	adds	r7, #16
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}

080104b2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80104b2:	b580      	push	{r7, lr}
 80104b4:	b084      	sub	sp, #16
 80104b6:	af00      	add	r7, sp, #0
 80104b8:	6078      	str	r0, [r7, #4]
 80104ba:	460b      	mov	r3, r1
 80104bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80104be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	da0c      	bge.n	80104e0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80104c6:	78fb      	ldrb	r3, [r7, #3]
 80104c8:	f003 020f 	and.w	r2, r3, #15
 80104cc:	4613      	mov	r3, r2
 80104ce:	00db      	lsls	r3, r3, #3
 80104d0:	4413      	add	r3, r2
 80104d2:	009b      	lsls	r3, r3, #2
 80104d4:	3338      	adds	r3, #56	; 0x38
 80104d6:	687a      	ldr	r2, [r7, #4]
 80104d8:	4413      	add	r3, r2
 80104da:	3304      	adds	r3, #4
 80104dc:	60fb      	str	r3, [r7, #12]
 80104de:	e00c      	b.n	80104fa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80104e0:	78fb      	ldrb	r3, [r7, #3]
 80104e2:	f003 020f 	and.w	r2, r3, #15
 80104e6:	4613      	mov	r3, r2
 80104e8:	00db      	lsls	r3, r3, #3
 80104ea:	4413      	add	r3, r2
 80104ec:	009b      	lsls	r3, r3, #2
 80104ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80104f2:	687a      	ldr	r2, [r7, #4]
 80104f4:	4413      	add	r3, r2
 80104f6:	3304      	adds	r3, #4
 80104f8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	68f9      	ldr	r1, [r7, #12]
 8010500:	4618      	mov	r0, r3
 8010502:	f007 f98d 	bl	8017820 <USB_EPStopXfer>
 8010506:	4603      	mov	r3, r0
 8010508:	72fb      	strb	r3, [r7, #11]

  return ret;
 801050a:	7afb      	ldrb	r3, [r7, #11]
}
 801050c:	4618      	mov	r0, r3
 801050e:	3710      	adds	r7, #16
 8010510:	46bd      	mov	sp, r7
 8010512:	bd80      	pop	{r7, pc}

08010514 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b088      	sub	sp, #32
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
 801051c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010524:	697b      	ldr	r3, [r7, #20]
 8010526:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8010528:	683a      	ldr	r2, [r7, #0]
 801052a:	4613      	mov	r3, r2
 801052c:	00db      	lsls	r3, r3, #3
 801052e:	4413      	add	r3, r2
 8010530:	009b      	lsls	r3, r3, #2
 8010532:	3338      	adds	r3, #56	; 0x38
 8010534:	687a      	ldr	r2, [r7, #4]
 8010536:	4413      	add	r3, r2
 8010538:	3304      	adds	r3, #4
 801053a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	6a1a      	ldr	r2, [r3, #32]
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	699b      	ldr	r3, [r3, #24]
 8010544:	429a      	cmp	r2, r3
 8010546:	d901      	bls.n	801054c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8010548:	2301      	movs	r3, #1
 801054a:	e067      	b.n	801061c <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	699a      	ldr	r2, [r3, #24]
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	6a1b      	ldr	r3, [r3, #32]
 8010554:	1ad3      	subs	r3, r2, r3
 8010556:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	68db      	ldr	r3, [r3, #12]
 801055c:	69fa      	ldr	r2, [r7, #28]
 801055e:	429a      	cmp	r2, r3
 8010560:	d902      	bls.n	8010568 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	68db      	ldr	r3, [r3, #12]
 8010566:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8010568:	69fb      	ldr	r3, [r7, #28]
 801056a:	3303      	adds	r3, #3
 801056c:	089b      	lsrs	r3, r3, #2
 801056e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8010570:	e026      	b.n	80105c0 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	699a      	ldr	r2, [r3, #24]
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	6a1b      	ldr	r3, [r3, #32]
 801057a:	1ad3      	subs	r3, r2, r3
 801057c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	68db      	ldr	r3, [r3, #12]
 8010582:	69fa      	ldr	r2, [r7, #28]
 8010584:	429a      	cmp	r2, r3
 8010586:	d902      	bls.n	801058e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	68db      	ldr	r3, [r3, #12]
 801058c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 801058e:	69fb      	ldr	r3, [r7, #28]
 8010590:	3303      	adds	r3, #3
 8010592:	089b      	lsrs	r3, r3, #2
 8010594:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	6919      	ldr	r1, [r3, #16]
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	b2da      	uxtb	r2, r3
 801059e:	69fb      	ldr	r3, [r7, #28]
 80105a0:	b29b      	uxth	r3, r3
 80105a2:	6978      	ldr	r0, [r7, #20]
 80105a4:	f007 f9e6 	bl	8017974 <USB_WritePacket>

    ep->xfer_buff  += len;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	691a      	ldr	r2, [r3, #16]
 80105ac:	69fb      	ldr	r3, [r7, #28]
 80105ae:	441a      	add	r2, r3
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	6a1a      	ldr	r2, [r3, #32]
 80105b8:	69fb      	ldr	r3, [r7, #28]
 80105ba:	441a      	add	r2, r3
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	015a      	lsls	r2, r3, #5
 80105c4:	693b      	ldr	r3, [r7, #16]
 80105c6:	4413      	add	r3, r2
 80105c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105cc:	699b      	ldr	r3, [r3, #24]
 80105ce:	b29b      	uxth	r3, r3
 80105d0:	69ba      	ldr	r2, [r7, #24]
 80105d2:	429a      	cmp	r2, r3
 80105d4:	d809      	bhi.n	80105ea <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	6a1a      	ldr	r2, [r3, #32]
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80105de:	429a      	cmp	r2, r3
 80105e0:	d203      	bcs.n	80105ea <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	699b      	ldr	r3, [r3, #24]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d1c3      	bne.n	8010572 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	699a      	ldr	r2, [r3, #24]
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	6a1b      	ldr	r3, [r3, #32]
 80105f2:	429a      	cmp	r2, r3
 80105f4:	d811      	bhi.n	801061a <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	f003 030f 	and.w	r3, r3, #15
 80105fc:	2201      	movs	r2, #1
 80105fe:	fa02 f303 	lsl.w	r3, r2, r3
 8010602:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8010604:	693b      	ldr	r3, [r7, #16]
 8010606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801060a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	43db      	mvns	r3, r3
 8010610:	6939      	ldr	r1, [r7, #16]
 8010612:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010616:	4013      	ands	r3, r2
 8010618:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 801061a:	2300      	movs	r3, #0
}
 801061c:	4618      	mov	r0, r3
 801061e:	3720      	adds	r7, #32
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}

08010624 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b086      	sub	sp, #24
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
 801062c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010638:	697b      	ldr	r3, [r7, #20]
 801063a:	333c      	adds	r3, #60	; 0x3c
 801063c:	3304      	adds	r3, #4
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8010642:	683b      	ldr	r3, [r7, #0]
 8010644:	015a      	lsls	r2, r3, #5
 8010646:	693b      	ldr	r3, [r7, #16]
 8010648:	4413      	add	r3, r2
 801064a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801064e:	689b      	ldr	r3, [r3, #8]
 8010650:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	4a19      	ldr	r2, [pc, #100]	; (80106bc <PCD_EP_OutXfrComplete_int+0x98>)
 8010656:	4293      	cmp	r3, r2
 8010658:	d124      	bne.n	80106a4 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010660:	2b00      	cmp	r3, #0
 8010662:	d00a      	beq.n	801067a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	015a      	lsls	r2, r3, #5
 8010668:	693b      	ldr	r3, [r7, #16]
 801066a:	4413      	add	r3, r2
 801066c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010670:	461a      	mov	r2, r3
 8010672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010676:	6093      	str	r3, [r2, #8]
 8010678:	e01a      	b.n	80106b0 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	f003 0320 	and.w	r3, r3, #32
 8010680:	2b00      	cmp	r3, #0
 8010682:	d008      	beq.n	8010696 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	015a      	lsls	r2, r3, #5
 8010688:	693b      	ldr	r3, [r7, #16]
 801068a:	4413      	add	r3, r2
 801068c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010690:	461a      	mov	r2, r3
 8010692:	2320      	movs	r3, #32
 8010694:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	b2db      	uxtb	r3, r3
 801069a:	4619      	mov	r1, r3
 801069c:	6878      	ldr	r0, [r7, #4]
 801069e:	f009 fb6b 	bl	8019d78 <HAL_PCD_DataOutStageCallback>
 80106a2:	e005      	b.n	80106b0 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	b2db      	uxtb	r3, r3
 80106a8:	4619      	mov	r1, r3
 80106aa:	6878      	ldr	r0, [r7, #4]
 80106ac:	f009 fb64 	bl	8019d78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80106b0:	2300      	movs	r3, #0
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	3718      	adds	r7, #24
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
 80106ba:	bf00      	nop
 80106bc:	4f54310a 	.word	0x4f54310a

080106c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b086      	sub	sp, #24
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
 80106c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106d0:	697b      	ldr	r3, [r7, #20]
 80106d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80106d4:	697b      	ldr	r3, [r7, #20]
 80106d6:	333c      	adds	r3, #60	; 0x3c
 80106d8:	3304      	adds	r3, #4
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	015a      	lsls	r2, r3, #5
 80106e2:	693b      	ldr	r3, [r7, #16]
 80106e4:	4413      	add	r3, r2
 80106e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106ea:	689b      	ldr	r3, [r3, #8]
 80106ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	4a0c      	ldr	r2, [pc, #48]	; (8010724 <PCD_EP_OutSetupPacket_int+0x64>)
 80106f2:	4293      	cmp	r3, r2
 80106f4:	d90e      	bls.n	8010714 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80106f6:	68bb      	ldr	r3, [r7, #8]
 80106f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d009      	beq.n	8010714 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	015a      	lsls	r2, r3, #5
 8010704:	693b      	ldr	r3, [r7, #16]
 8010706:	4413      	add	r3, r2
 8010708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801070c:	461a      	mov	r2, r3
 801070e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010712:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f009 fb1d 	bl	8019d54 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 801071a:	2300      	movs	r3, #0
}
 801071c:	4618      	mov	r0, r3
 801071e:	3718      	adds	r7, #24
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}
 8010724:	4f54300a 	.word	0x4f54300a

08010728 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8010728:	b480      	push	{r7}
 801072a:	b085      	sub	sp, #20
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
 8010730:	460b      	mov	r3, r1
 8010732:	70fb      	strb	r3, [r7, #3]
 8010734:	4613      	mov	r3, r2
 8010736:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801073e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8010740:	78fb      	ldrb	r3, [r7, #3]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d107      	bne.n	8010756 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8010746:	883b      	ldrh	r3, [r7, #0]
 8010748:	0419      	lsls	r1, r3, #16
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	68ba      	ldr	r2, [r7, #8]
 8010750:	430a      	orrs	r2, r1
 8010752:	629a      	str	r2, [r3, #40]	; 0x28
 8010754:	e028      	b.n	80107a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801075c:	0c1b      	lsrs	r3, r3, #16
 801075e:	68ba      	ldr	r2, [r7, #8]
 8010760:	4413      	add	r3, r2
 8010762:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8010764:	2300      	movs	r3, #0
 8010766:	73fb      	strb	r3, [r7, #15]
 8010768:	e00d      	b.n	8010786 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681a      	ldr	r2, [r3, #0]
 801076e:	7bfb      	ldrb	r3, [r7, #15]
 8010770:	3340      	adds	r3, #64	; 0x40
 8010772:	009b      	lsls	r3, r3, #2
 8010774:	4413      	add	r3, r2
 8010776:	685b      	ldr	r3, [r3, #4]
 8010778:	0c1b      	lsrs	r3, r3, #16
 801077a:	68ba      	ldr	r2, [r7, #8]
 801077c:	4413      	add	r3, r2
 801077e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8010780:	7bfb      	ldrb	r3, [r7, #15]
 8010782:	3301      	adds	r3, #1
 8010784:	73fb      	strb	r3, [r7, #15]
 8010786:	7bfa      	ldrb	r2, [r7, #15]
 8010788:	78fb      	ldrb	r3, [r7, #3]
 801078a:	3b01      	subs	r3, #1
 801078c:	429a      	cmp	r2, r3
 801078e:	d3ec      	bcc.n	801076a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8010790:	883b      	ldrh	r3, [r7, #0]
 8010792:	0418      	lsls	r0, r3, #16
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6819      	ldr	r1, [r3, #0]
 8010798:	78fb      	ldrb	r3, [r7, #3]
 801079a:	3b01      	subs	r3, #1
 801079c:	68ba      	ldr	r2, [r7, #8]
 801079e:	4302      	orrs	r2, r0
 80107a0:	3340      	adds	r3, #64	; 0x40
 80107a2:	009b      	lsls	r3, r3, #2
 80107a4:	440b      	add	r3, r1
 80107a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80107a8:	2300      	movs	r3, #0
}
 80107aa:	4618      	mov	r0, r3
 80107ac:	3714      	adds	r7, #20
 80107ae:	46bd      	mov	sp, r7
 80107b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b4:	4770      	bx	lr

080107b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80107b6:	b480      	push	{r7}
 80107b8:	b083      	sub	sp, #12
 80107ba:	af00      	add	r7, sp, #0
 80107bc:	6078      	str	r0, [r7, #4]
 80107be:	460b      	mov	r3, r1
 80107c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	887a      	ldrh	r2, [r7, #2]
 80107c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80107ca:	2300      	movs	r3, #0
}
 80107cc:	4618      	mov	r0, r3
 80107ce:	370c      	adds	r7, #12
 80107d0:	46bd      	mov	sp, r7
 80107d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d6:	4770      	bx	lr

080107d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80107d8:	b480      	push	{r7}
 80107da:	b085      	sub	sp, #20
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	2201      	movs	r2, #1
 80107ea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	2200      	movs	r2, #0
 80107f2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	699b      	ldr	r3, [r3, #24]
 80107fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801080a:	f043 0303 	orr.w	r3, r3, #3
 801080e:	68fa      	ldr	r2, [r7, #12]
 8010810:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8010812:	2300      	movs	r3, #0
}
 8010814:	4618      	mov	r0, r3
 8010816:	3714      	adds	r7, #20
 8010818:	46bd      	mov	sp, r7
 801081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081e:	4770      	bx	lr

08010820 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8010820:	b480      	push	{r7}
 8010822:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010824:	4b05      	ldr	r3, [pc, #20]	; (801083c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	4a04      	ldr	r2, [pc, #16]	; (801083c <HAL_PWR_EnableBkUpAccess+0x1c>)
 801082a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801082e:	6013      	str	r3, [r2, #0]
}
 8010830:	bf00      	nop
 8010832:	46bd      	mov	sp, r7
 8010834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010838:	4770      	bx	lr
 801083a:	bf00      	nop
 801083c:	40007000 	.word	0x40007000

08010840 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b082      	sub	sp, #8
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
 8010848:	460b      	mov	r3, r1
 801084a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d10c      	bne.n	801086c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8010852:	4b13      	ldr	r3, [pc, #76]	; (80108a0 <HAL_PWR_EnterSLEEPMode+0x60>)
 8010854:	695b      	ldr	r3, [r3, #20]
 8010856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801085a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801085e:	d10e      	bne.n	801087e <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8010860:	f000 f8b6 	bl	80109d0 <HAL_PWREx_DisableLowPowerRunMode>
 8010864:	4603      	mov	r3, r0
 8010866:	2b00      	cmp	r3, #0
 8010868:	d009      	beq.n	801087e <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 801086a:	e016      	b.n	801089a <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 801086c:	4b0c      	ldr	r3, [pc, #48]	; (80108a0 <HAL_PWR_EnterSLEEPMode+0x60>)
 801086e:	695b      	ldr	r3, [r3, #20]
 8010870:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010878:	d001      	beq.n	801087e <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 801087a:	f000 f899 	bl	80109b0 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 801087e:	4b09      	ldr	r3, [pc, #36]	; (80108a4 <HAL_PWR_EnterSLEEPMode+0x64>)
 8010880:	691b      	ldr	r3, [r3, #16]
 8010882:	4a08      	ldr	r2, [pc, #32]	; (80108a4 <HAL_PWR_EnterSLEEPMode+0x64>)
 8010884:	f023 0304 	bic.w	r3, r3, #4
 8010888:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 801088a:	78fb      	ldrb	r3, [r7, #3]
 801088c:	2b01      	cmp	r3, #1
 801088e:	d101      	bne.n	8010894 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8010890:	bf30      	wfi
 8010892:	e002      	b.n	801089a <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8010894:	bf40      	sev
    __WFE();
 8010896:	bf20      	wfe
    __WFE();
 8010898:	bf20      	wfe
  }

}
 801089a:	3708      	adds	r7, #8
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}
 80108a0:	40007000 	.word	0x40007000
 80108a4:	e000ed00 	.word	0xe000ed00

080108a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80108a8:	b480      	push	{r7}
 80108aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80108ac:	4b04      	ldr	r3, [pc, #16]	; (80108c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	46bd      	mov	sp, r7
 80108b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108bc:	4770      	bx	lr
 80108be:	bf00      	nop
 80108c0:	40007000 	.word	0x40007000

080108c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80108c4:	b480      	push	{r7}
 80108c6:	b085      	sub	sp, #20
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80108d2:	d130      	bne.n	8010936 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80108d4:	4b23      	ldr	r3, [pc, #140]	; (8010964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80108dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80108e0:	d038      	beq.n	8010954 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80108e2:	4b20      	ldr	r3, [pc, #128]	; (8010964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80108ea:	4a1e      	ldr	r2, [pc, #120]	; (8010964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80108ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80108f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80108f2:	4b1d      	ldr	r3, [pc, #116]	; (8010968 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	2232      	movs	r2, #50	; 0x32
 80108f8:	fb02 f303 	mul.w	r3, r2, r3
 80108fc:	4a1b      	ldr	r2, [pc, #108]	; (801096c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80108fe:	fba2 2303 	umull	r2, r3, r2, r3
 8010902:	0c9b      	lsrs	r3, r3, #18
 8010904:	3301      	adds	r3, #1
 8010906:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8010908:	e002      	b.n	8010910 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	3b01      	subs	r3, #1
 801090e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8010910:	4b14      	ldr	r3, [pc, #80]	; (8010964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8010912:	695b      	ldr	r3, [r3, #20]
 8010914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801091c:	d102      	bne.n	8010924 <HAL_PWREx_ControlVoltageScaling+0x60>
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d1f2      	bne.n	801090a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8010924:	4b0f      	ldr	r3, [pc, #60]	; (8010964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8010926:	695b      	ldr	r3, [r3, #20]
 8010928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801092c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010930:	d110      	bne.n	8010954 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8010932:	2303      	movs	r3, #3
 8010934:	e00f      	b.n	8010956 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8010936:	4b0b      	ldr	r3, [pc, #44]	; (8010964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801093e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010942:	d007      	beq.n	8010954 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8010944:	4b07      	ldr	r3, [pc, #28]	; (8010964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801094c:	4a05      	ldr	r2, [pc, #20]	; (8010964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801094e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010952:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8010954:	2300      	movs	r3, #0
}
 8010956:	4618      	mov	r0, r3
 8010958:	3714      	adds	r7, #20
 801095a:	46bd      	mov	sp, r7
 801095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010960:	4770      	bx	lr
 8010962:	bf00      	nop
 8010964:	40007000 	.word	0x40007000
 8010968:	200001a0 	.word	0x200001a0
 801096c:	431bde83 	.word	0x431bde83

08010970 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8010970:	b480      	push	{r7}
 8010972:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8010974:	4b05      	ldr	r3, [pc, #20]	; (801098c <HAL_PWREx_EnableVddUSB+0x1c>)
 8010976:	685b      	ldr	r3, [r3, #4]
 8010978:	4a04      	ldr	r2, [pc, #16]	; (801098c <HAL_PWREx_EnableVddUSB+0x1c>)
 801097a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801097e:	6053      	str	r3, [r2, #4]
}
 8010980:	bf00      	nop
 8010982:	46bd      	mov	sp, r7
 8010984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010988:	4770      	bx	lr
 801098a:	bf00      	nop
 801098c:	40007000 	.word	0x40007000

08010990 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8010990:	b480      	push	{r7}
 8010992:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8010994:	4b05      	ldr	r3, [pc, #20]	; (80109ac <HAL_PWREx_EnableVddIO2+0x1c>)
 8010996:	685b      	ldr	r3, [r3, #4]
 8010998:	4a04      	ldr	r2, [pc, #16]	; (80109ac <HAL_PWREx_EnableVddIO2+0x1c>)
 801099a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801099e:	6053      	str	r3, [r2, #4]
}
 80109a0:	bf00      	nop
 80109a2:	46bd      	mov	sp, r7
 80109a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a8:	4770      	bx	lr
 80109aa:	bf00      	nop
 80109ac:	40007000 	.word	0x40007000

080109b0 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80109b0:	b480      	push	{r7}
 80109b2:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80109b4:	4b05      	ldr	r3, [pc, #20]	; (80109cc <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	4a04      	ldr	r2, [pc, #16]	; (80109cc <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80109ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80109be:	6013      	str	r3, [r2, #0]
}
 80109c0:	bf00      	nop
 80109c2:	46bd      	mov	sp, r7
 80109c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c8:	4770      	bx	lr
 80109ca:	bf00      	nop
 80109cc:	40007000 	.word	0x40007000

080109d0 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80109d0:	b480      	push	{r7}
 80109d2:	b083      	sub	sp, #12
 80109d4:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80109d6:	4b17      	ldr	r3, [pc, #92]	; (8010a34 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	4a16      	ldr	r2, [pc, #88]	; (8010a34 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80109dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80109e0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80109e2:	4b15      	ldr	r3, [pc, #84]	; (8010a38 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	2232      	movs	r2, #50	; 0x32
 80109e8:	fb02 f303 	mul.w	r3, r2, r3
 80109ec:	4a13      	ldr	r2, [pc, #76]	; (8010a3c <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 80109ee:	fba2 2303 	umull	r2, r3, r2, r3
 80109f2:	0c9b      	lsrs	r3, r3, #18
 80109f4:	3301      	adds	r3, #1
 80109f6:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80109f8:	e002      	b.n	8010a00 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	3b01      	subs	r3, #1
 80109fe:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8010a00:	4b0c      	ldr	r3, [pc, #48]	; (8010a34 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8010a02:	695b      	ldr	r3, [r3, #20]
 8010a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a0c:	d102      	bne.n	8010a14 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d1f2      	bne.n	80109fa <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8010a14:	4b07      	ldr	r3, [pc, #28]	; (8010a34 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8010a16:	695b      	ldr	r3, [r3, #20]
 8010a18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a20:	d101      	bne.n	8010a26 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8010a22:	2303      	movs	r3, #3
 8010a24:	e000      	b.n	8010a28 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8010a26:	2300      	movs	r3, #0
}
 8010a28:	4618      	mov	r0, r3
 8010a2a:	370c      	adds	r7, #12
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a32:	4770      	bx	lr
 8010a34:	40007000 	.word	0x40007000
 8010a38:	200001a0 	.word	0x200001a0
 8010a3c:	431bde83 	.word	0x431bde83

08010a40 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b086      	sub	sp, #24
 8010a44:	af02      	add	r7, sp, #8
 8010a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8010a48:	f7fb fb50 	bl	800c0ec <HAL_GetTick>
 8010a4c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d101      	bne.n	8010a58 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8010a54:	2301      	movs	r3, #1
 8010a56:	e069      	b.n	8010b2c <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010a5e:	b2db      	uxtb	r3, r3
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d10b      	bne.n	8010a7c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	2200      	movs	r2, #0
 8010a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8010a6c:	6878      	ldr	r0, [r7, #4]
 8010a6e:	f7f2 fa0b 	bl	8002e88 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8010a72:	f241 3188 	movw	r1, #5000	; 0x1388
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	f000 f85e 	bl	8010b38 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	689b      	ldr	r3, [r3, #8]
 8010a8a:	3b01      	subs	r3, #1
 8010a8c:	021a      	lsls	r2, r3, #8
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	430a      	orrs	r2, r1
 8010a94:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a9a:	9300      	str	r3, [sp, #0]
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	2120      	movs	r1, #32
 8010aa2:	6878      	ldr	r0, [r7, #4]
 8010aa4:	f000 f856 	bl	8010b54 <QSPI_WaitFlagStateUntilTimeout>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8010aac:	7afb      	ldrb	r3, [r7, #11]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d137      	bne.n	8010b22 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010abc:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8010ac0:	687a      	ldr	r2, [r7, #4]
 8010ac2:	6852      	ldr	r2, [r2, #4]
 8010ac4:	0611      	lsls	r1, r2, #24
 8010ac6:	687a      	ldr	r2, [r7, #4]
 8010ac8:	68d2      	ldr	r2, [r2, #12]
 8010aca:	4311      	orrs	r1, r2
 8010acc:	687a      	ldr	r2, [r7, #4]
 8010ace:	69d2      	ldr	r2, [r2, #28]
 8010ad0:	4311      	orrs	r1, r2
 8010ad2:	687a      	ldr	r2, [r7, #4]
 8010ad4:	6a12      	ldr	r2, [r2, #32]
 8010ad6:	4311      	orrs	r1, r2
 8010ad8:	687a      	ldr	r2, [r7, #4]
 8010ada:	6812      	ldr	r2, [r2, #0]
 8010adc:	430b      	orrs	r3, r1
 8010ade:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	685a      	ldr	r2, [r3, #4]
 8010ae6:	4b13      	ldr	r3, [pc, #76]	; (8010b34 <HAL_QSPI_Init+0xf4>)
 8010ae8:	4013      	ands	r3, r2
 8010aea:	687a      	ldr	r2, [r7, #4]
 8010aec:	6912      	ldr	r2, [r2, #16]
 8010aee:	0411      	lsls	r1, r2, #16
 8010af0:	687a      	ldr	r2, [r7, #4]
 8010af2:	6952      	ldr	r2, [r2, #20]
 8010af4:	4311      	orrs	r1, r2
 8010af6:	687a      	ldr	r2, [r7, #4]
 8010af8:	6992      	ldr	r2, [r2, #24]
 8010afa:	4311      	orrs	r1, r2
 8010afc:	687a      	ldr	r2, [r7, #4]
 8010afe:	6812      	ldr	r2, [r2, #0]
 8010b00:	430b      	orrs	r3, r1
 8010b02:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	681a      	ldr	r2, [r3, #0]
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	f042 0201 	orr.w	r2, r2, #1
 8010b12:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	2200      	movs	r2, #0
 8010b18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2201      	movs	r2, #1
 8010b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2200      	movs	r2, #0
 8010b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8010b2a:	7afb      	ldrb	r3, [r7, #11]
}
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	3710      	adds	r7, #16
 8010b30:	46bd      	mov	sp, r7
 8010b32:	bd80      	pop	{r7, pc}
 8010b34:	ffe0f8fe 	.word	0xffe0f8fe

08010b38 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8010b38:	b480      	push	{r7}
 8010b3a:	b083      	sub	sp, #12
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
 8010b40:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	683a      	ldr	r2, [r7, #0]
 8010b46:	649a      	str	r2, [r3, #72]	; 0x48
}
 8010b48:	bf00      	nop
 8010b4a:	370c      	adds	r7, #12
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b52:	4770      	bx	lr

08010b54 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b084      	sub	sp, #16
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	60f8      	str	r0, [r7, #12]
 8010b5c:	60b9      	str	r1, [r7, #8]
 8010b5e:	603b      	str	r3, [r7, #0]
 8010b60:	4613      	mov	r3, r2
 8010b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8010b64:	e01a      	b.n	8010b9c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010b66:	69bb      	ldr	r3, [r7, #24]
 8010b68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b6c:	d016      	beq.n	8010b9c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010b6e:	f7fb fabd 	bl	800c0ec <HAL_GetTick>
 8010b72:	4602      	mov	r2, r0
 8010b74:	683b      	ldr	r3, [r7, #0]
 8010b76:	1ad3      	subs	r3, r2, r3
 8010b78:	69ba      	ldr	r2, [r7, #24]
 8010b7a:	429a      	cmp	r2, r3
 8010b7c:	d302      	bcc.n	8010b84 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8010b7e:	69bb      	ldr	r3, [r7, #24]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d10b      	bne.n	8010b9c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	2204      	movs	r2, #4
 8010b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b90:	f043 0201 	orr.w	r2, r3, #1
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8010b98:	2301      	movs	r3, #1
 8010b9a:	e00e      	b.n	8010bba <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	689a      	ldr	r2, [r3, #8]
 8010ba2:	68bb      	ldr	r3, [r7, #8]
 8010ba4:	4013      	ands	r3, r2
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	bf14      	ite	ne
 8010baa:	2301      	movne	r3, #1
 8010bac:	2300      	moveq	r3, #0
 8010bae:	b2db      	uxtb	r3, r3
 8010bb0:	461a      	mov	r2, r3
 8010bb2:	79fb      	ldrb	r3, [r7, #7]
 8010bb4:	429a      	cmp	r2, r3
 8010bb6:	d1d6      	bne.n	8010b66 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010bb8:	2300      	movs	r3, #0
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	3710      	adds	r7, #16
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}
	...

08010bc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b088      	sub	sp, #32
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d102      	bne.n	8010bd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	f000 bc08 	b.w	80113e8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010bd8:	4b96      	ldr	r3, [pc, #600]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010bda:	689b      	ldr	r3, [r3, #8]
 8010bdc:	f003 030c 	and.w	r3, r3, #12
 8010be0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010be2:	4b94      	ldr	r3, [pc, #592]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010be4:	68db      	ldr	r3, [r3, #12]
 8010be6:	f003 0303 	and.w	r3, r3, #3
 8010bea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	f003 0310 	and.w	r3, r3, #16
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	f000 80e4 	beq.w	8010dc2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8010bfa:	69bb      	ldr	r3, [r7, #24]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d007      	beq.n	8010c10 <HAL_RCC_OscConfig+0x4c>
 8010c00:	69bb      	ldr	r3, [r7, #24]
 8010c02:	2b0c      	cmp	r3, #12
 8010c04:	f040 808b 	bne.w	8010d1e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8010c08:	697b      	ldr	r3, [r7, #20]
 8010c0a:	2b01      	cmp	r3, #1
 8010c0c:	f040 8087 	bne.w	8010d1e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8010c10:	4b88      	ldr	r3, [pc, #544]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	f003 0302 	and.w	r3, r3, #2
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d005      	beq.n	8010c28 <HAL_RCC_OscConfig+0x64>
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	699b      	ldr	r3, [r3, #24]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d101      	bne.n	8010c28 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8010c24:	2301      	movs	r3, #1
 8010c26:	e3df      	b.n	80113e8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	6a1a      	ldr	r2, [r3, #32]
 8010c2c:	4b81      	ldr	r3, [pc, #516]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	f003 0308 	and.w	r3, r3, #8
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d004      	beq.n	8010c42 <HAL_RCC_OscConfig+0x7e>
 8010c38:	4b7e      	ldr	r3, [pc, #504]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010c40:	e005      	b.n	8010c4e <HAL_RCC_OscConfig+0x8a>
 8010c42:	4b7c      	ldr	r3, [pc, #496]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010c48:	091b      	lsrs	r3, r3, #4
 8010c4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010c4e:	4293      	cmp	r3, r2
 8010c50:	d223      	bcs.n	8010c9a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	6a1b      	ldr	r3, [r3, #32]
 8010c56:	4618      	mov	r0, r3
 8010c58:	f000 fd92 	bl	8011780 <RCC_SetFlashLatencyFromMSIRange>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d001      	beq.n	8010c66 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8010c62:	2301      	movs	r3, #1
 8010c64:	e3c0      	b.n	80113e8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010c66:	4b73      	ldr	r3, [pc, #460]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	4a72      	ldr	r2, [pc, #456]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010c6c:	f043 0308 	orr.w	r3, r3, #8
 8010c70:	6013      	str	r3, [r2, #0]
 8010c72:	4b70      	ldr	r3, [pc, #448]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	6a1b      	ldr	r3, [r3, #32]
 8010c7e:	496d      	ldr	r1, [pc, #436]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010c80:	4313      	orrs	r3, r2
 8010c82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010c84:	4b6b      	ldr	r3, [pc, #428]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010c86:	685b      	ldr	r3, [r3, #4]
 8010c88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	69db      	ldr	r3, [r3, #28]
 8010c90:	021b      	lsls	r3, r3, #8
 8010c92:	4968      	ldr	r1, [pc, #416]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010c94:	4313      	orrs	r3, r2
 8010c96:	604b      	str	r3, [r1, #4]
 8010c98:	e025      	b.n	8010ce6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010c9a:	4b66      	ldr	r3, [pc, #408]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	4a65      	ldr	r2, [pc, #404]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010ca0:	f043 0308 	orr.w	r3, r3, #8
 8010ca4:	6013      	str	r3, [r2, #0]
 8010ca6:	4b63      	ldr	r3, [pc, #396]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	6a1b      	ldr	r3, [r3, #32]
 8010cb2:	4960      	ldr	r1, [pc, #384]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010cb4:	4313      	orrs	r3, r2
 8010cb6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010cb8:	4b5e      	ldr	r3, [pc, #376]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010cba:	685b      	ldr	r3, [r3, #4]
 8010cbc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	69db      	ldr	r3, [r3, #28]
 8010cc4:	021b      	lsls	r3, r3, #8
 8010cc6:	495b      	ldr	r1, [pc, #364]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010cc8:	4313      	orrs	r3, r2
 8010cca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8010ccc:	69bb      	ldr	r3, [r7, #24]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d109      	bne.n	8010ce6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6a1b      	ldr	r3, [r3, #32]
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f000 fd52 	bl	8011780 <RCC_SetFlashLatencyFromMSIRange>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d001      	beq.n	8010ce6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	e380      	b.n	80113e8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8010ce6:	f000 fc87 	bl	80115f8 <HAL_RCC_GetSysClockFreq>
 8010cea:	4602      	mov	r2, r0
 8010cec:	4b51      	ldr	r3, [pc, #324]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010cee:	689b      	ldr	r3, [r3, #8]
 8010cf0:	091b      	lsrs	r3, r3, #4
 8010cf2:	f003 030f 	and.w	r3, r3, #15
 8010cf6:	4950      	ldr	r1, [pc, #320]	; (8010e38 <HAL_RCC_OscConfig+0x274>)
 8010cf8:	5ccb      	ldrb	r3, [r1, r3]
 8010cfa:	f003 031f 	and.w	r3, r3, #31
 8010cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8010d02:	4a4e      	ldr	r2, [pc, #312]	; (8010e3c <HAL_RCC_OscConfig+0x278>)
 8010d04:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8010d06:	4b4e      	ldr	r3, [pc, #312]	; (8010e40 <HAL_RCC_OscConfig+0x27c>)
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	f7fb f99e 	bl	800c04c <HAL_InitTick>
 8010d10:	4603      	mov	r3, r0
 8010d12:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8010d14:	7bfb      	ldrb	r3, [r7, #15]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d052      	beq.n	8010dc0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8010d1a:	7bfb      	ldrb	r3, [r7, #15]
 8010d1c:	e364      	b.n	80113e8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	699b      	ldr	r3, [r3, #24]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d032      	beq.n	8010d8c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8010d26:	4b43      	ldr	r3, [pc, #268]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	4a42      	ldr	r2, [pc, #264]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010d2c:	f043 0301 	orr.w	r3, r3, #1
 8010d30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8010d32:	f7fb f9db 	bl	800c0ec <HAL_GetTick>
 8010d36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010d38:	e008      	b.n	8010d4c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8010d3a:	f7fb f9d7 	bl	800c0ec <HAL_GetTick>
 8010d3e:	4602      	mov	r2, r0
 8010d40:	693b      	ldr	r3, [r7, #16]
 8010d42:	1ad3      	subs	r3, r2, r3
 8010d44:	2b02      	cmp	r3, #2
 8010d46:	d901      	bls.n	8010d4c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8010d48:	2303      	movs	r3, #3
 8010d4a:	e34d      	b.n	80113e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010d4c:	4b39      	ldr	r3, [pc, #228]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	f003 0302 	and.w	r3, r3, #2
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d0f0      	beq.n	8010d3a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010d58:	4b36      	ldr	r3, [pc, #216]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	4a35      	ldr	r2, [pc, #212]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010d5e:	f043 0308 	orr.w	r3, r3, #8
 8010d62:	6013      	str	r3, [r2, #0]
 8010d64:	4b33      	ldr	r3, [pc, #204]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	6a1b      	ldr	r3, [r3, #32]
 8010d70:	4930      	ldr	r1, [pc, #192]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010d72:	4313      	orrs	r3, r2
 8010d74:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010d76:	4b2f      	ldr	r3, [pc, #188]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010d78:	685b      	ldr	r3, [r3, #4]
 8010d7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	69db      	ldr	r3, [r3, #28]
 8010d82:	021b      	lsls	r3, r3, #8
 8010d84:	492b      	ldr	r1, [pc, #172]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010d86:	4313      	orrs	r3, r2
 8010d88:	604b      	str	r3, [r1, #4]
 8010d8a:	e01a      	b.n	8010dc2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8010d8c:	4b29      	ldr	r3, [pc, #164]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	4a28      	ldr	r2, [pc, #160]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010d92:	f023 0301 	bic.w	r3, r3, #1
 8010d96:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8010d98:	f7fb f9a8 	bl	800c0ec <HAL_GetTick>
 8010d9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8010d9e:	e008      	b.n	8010db2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8010da0:	f7fb f9a4 	bl	800c0ec <HAL_GetTick>
 8010da4:	4602      	mov	r2, r0
 8010da6:	693b      	ldr	r3, [r7, #16]
 8010da8:	1ad3      	subs	r3, r2, r3
 8010daa:	2b02      	cmp	r3, #2
 8010dac:	d901      	bls.n	8010db2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8010dae:	2303      	movs	r3, #3
 8010db0:	e31a      	b.n	80113e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8010db2:	4b20      	ldr	r3, [pc, #128]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	f003 0302 	and.w	r3, r3, #2
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d1f0      	bne.n	8010da0 <HAL_RCC_OscConfig+0x1dc>
 8010dbe:	e000      	b.n	8010dc2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8010dc0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	f003 0301 	and.w	r3, r3, #1
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d073      	beq.n	8010eb6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8010dce:	69bb      	ldr	r3, [r7, #24]
 8010dd0:	2b08      	cmp	r3, #8
 8010dd2:	d005      	beq.n	8010de0 <HAL_RCC_OscConfig+0x21c>
 8010dd4:	69bb      	ldr	r3, [r7, #24]
 8010dd6:	2b0c      	cmp	r3, #12
 8010dd8:	d10e      	bne.n	8010df8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8010dda:	697b      	ldr	r3, [r7, #20]
 8010ddc:	2b03      	cmp	r3, #3
 8010dde:	d10b      	bne.n	8010df8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010de0:	4b14      	ldr	r3, [pc, #80]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d063      	beq.n	8010eb4 <HAL_RCC_OscConfig+0x2f0>
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	685b      	ldr	r3, [r3, #4]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d15f      	bne.n	8010eb4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8010df4:	2301      	movs	r3, #1
 8010df6:	e2f7      	b.n	80113e8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	685b      	ldr	r3, [r3, #4]
 8010dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e00:	d106      	bne.n	8010e10 <HAL_RCC_OscConfig+0x24c>
 8010e02:	4b0c      	ldr	r3, [pc, #48]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	4a0b      	ldr	r2, [pc, #44]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010e0c:	6013      	str	r3, [r2, #0]
 8010e0e:	e025      	b.n	8010e5c <HAL_RCC_OscConfig+0x298>
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	685b      	ldr	r3, [r3, #4]
 8010e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010e18:	d114      	bne.n	8010e44 <HAL_RCC_OscConfig+0x280>
 8010e1a:	4b06      	ldr	r3, [pc, #24]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	4a05      	ldr	r2, [pc, #20]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010e24:	6013      	str	r3, [r2, #0]
 8010e26:	4b03      	ldr	r3, [pc, #12]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	4a02      	ldr	r2, [pc, #8]	; (8010e34 <HAL_RCC_OscConfig+0x270>)
 8010e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010e30:	6013      	str	r3, [r2, #0]
 8010e32:	e013      	b.n	8010e5c <HAL_RCC_OscConfig+0x298>
 8010e34:	40021000 	.word	0x40021000
 8010e38:	0801b9b4 	.word	0x0801b9b4
 8010e3c:	200001a0 	.word	0x200001a0
 8010e40:	2000055c 	.word	0x2000055c
 8010e44:	4ba0      	ldr	r3, [pc, #640]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	4a9f      	ldr	r2, [pc, #636]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 8010e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010e4e:	6013      	str	r3, [r2, #0]
 8010e50:	4b9d      	ldr	r3, [pc, #628]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	4a9c      	ldr	r2, [pc, #624]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 8010e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010e5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	685b      	ldr	r3, [r3, #4]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d013      	beq.n	8010e8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010e64:	f7fb f942 	bl	800c0ec <HAL_GetTick>
 8010e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8010e6a:	e008      	b.n	8010e7e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010e6c:	f7fb f93e 	bl	800c0ec <HAL_GetTick>
 8010e70:	4602      	mov	r2, r0
 8010e72:	693b      	ldr	r3, [r7, #16]
 8010e74:	1ad3      	subs	r3, r2, r3
 8010e76:	2b64      	cmp	r3, #100	; 0x64
 8010e78:	d901      	bls.n	8010e7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8010e7a:	2303      	movs	r3, #3
 8010e7c:	e2b4      	b.n	80113e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8010e7e:	4b92      	ldr	r3, [pc, #584]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d0f0      	beq.n	8010e6c <HAL_RCC_OscConfig+0x2a8>
 8010e8a:	e014      	b.n	8010eb6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010e8c:	f7fb f92e 	bl	800c0ec <HAL_GetTick>
 8010e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8010e92:	e008      	b.n	8010ea6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010e94:	f7fb f92a 	bl	800c0ec <HAL_GetTick>
 8010e98:	4602      	mov	r2, r0
 8010e9a:	693b      	ldr	r3, [r7, #16]
 8010e9c:	1ad3      	subs	r3, r2, r3
 8010e9e:	2b64      	cmp	r3, #100	; 0x64
 8010ea0:	d901      	bls.n	8010ea6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8010ea2:	2303      	movs	r3, #3
 8010ea4:	e2a0      	b.n	80113e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8010ea6:	4b88      	ldr	r3, [pc, #544]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d1f0      	bne.n	8010e94 <HAL_RCC_OscConfig+0x2d0>
 8010eb2:	e000      	b.n	8010eb6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	f003 0302 	and.w	r3, r3, #2
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d060      	beq.n	8010f84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8010ec2:	69bb      	ldr	r3, [r7, #24]
 8010ec4:	2b04      	cmp	r3, #4
 8010ec6:	d005      	beq.n	8010ed4 <HAL_RCC_OscConfig+0x310>
 8010ec8:	69bb      	ldr	r3, [r7, #24]
 8010eca:	2b0c      	cmp	r3, #12
 8010ecc:	d119      	bne.n	8010f02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8010ece:	697b      	ldr	r3, [r7, #20]
 8010ed0:	2b02      	cmp	r3, #2
 8010ed2:	d116      	bne.n	8010f02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010ed4:	4b7c      	ldr	r3, [pc, #496]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d005      	beq.n	8010eec <HAL_RCC_OscConfig+0x328>
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	68db      	ldr	r3, [r3, #12]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d101      	bne.n	8010eec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8010ee8:	2301      	movs	r3, #1
 8010eea:	e27d      	b.n	80113e8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010eec:	4b76      	ldr	r3, [pc, #472]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 8010eee:	685b      	ldr	r3, [r3, #4]
 8010ef0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	691b      	ldr	r3, [r3, #16]
 8010ef8:	061b      	lsls	r3, r3, #24
 8010efa:	4973      	ldr	r1, [pc, #460]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 8010efc:	4313      	orrs	r3, r2
 8010efe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010f00:	e040      	b.n	8010f84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	68db      	ldr	r3, [r3, #12]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d023      	beq.n	8010f52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010f0a:	4b6f      	ldr	r3, [pc, #444]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	4a6e      	ldr	r2, [pc, #440]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 8010f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f16:	f7fb f8e9 	bl	800c0ec <HAL_GetTick>
 8010f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010f1c:	e008      	b.n	8010f30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010f1e:	f7fb f8e5 	bl	800c0ec <HAL_GetTick>
 8010f22:	4602      	mov	r2, r0
 8010f24:	693b      	ldr	r3, [r7, #16]
 8010f26:	1ad3      	subs	r3, r2, r3
 8010f28:	2b02      	cmp	r3, #2
 8010f2a:	d901      	bls.n	8010f30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8010f2c:	2303      	movs	r3, #3
 8010f2e:	e25b      	b.n	80113e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010f30:	4b65      	ldr	r3, [pc, #404]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d0f0      	beq.n	8010f1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010f3c:	4b62      	ldr	r3, [pc, #392]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 8010f3e:	685b      	ldr	r3, [r3, #4]
 8010f40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	691b      	ldr	r3, [r3, #16]
 8010f48:	061b      	lsls	r3, r3, #24
 8010f4a:	495f      	ldr	r1, [pc, #380]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 8010f4c:	4313      	orrs	r3, r2
 8010f4e:	604b      	str	r3, [r1, #4]
 8010f50:	e018      	b.n	8010f84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010f52:	4b5d      	ldr	r3, [pc, #372]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	4a5c      	ldr	r2, [pc, #368]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 8010f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f5e:	f7fb f8c5 	bl	800c0ec <HAL_GetTick>
 8010f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8010f64:	e008      	b.n	8010f78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010f66:	f7fb f8c1 	bl	800c0ec <HAL_GetTick>
 8010f6a:	4602      	mov	r2, r0
 8010f6c:	693b      	ldr	r3, [r7, #16]
 8010f6e:	1ad3      	subs	r3, r2, r3
 8010f70:	2b02      	cmp	r3, #2
 8010f72:	d901      	bls.n	8010f78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8010f74:	2303      	movs	r3, #3
 8010f76:	e237      	b.n	80113e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8010f78:	4b53      	ldr	r3, [pc, #332]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d1f0      	bne.n	8010f66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	f003 0308 	and.w	r3, r3, #8
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d03c      	beq.n	801100a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	695b      	ldr	r3, [r3, #20]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d01c      	beq.n	8010fd2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010f98:	4b4b      	ldr	r3, [pc, #300]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 8010f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010f9e:	4a4a      	ldr	r2, [pc, #296]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 8010fa0:	f043 0301 	orr.w	r3, r3, #1
 8010fa4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010fa8:	f7fb f8a0 	bl	800c0ec <HAL_GetTick>
 8010fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8010fae:	e008      	b.n	8010fc2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010fb0:	f7fb f89c 	bl	800c0ec <HAL_GetTick>
 8010fb4:	4602      	mov	r2, r0
 8010fb6:	693b      	ldr	r3, [r7, #16]
 8010fb8:	1ad3      	subs	r3, r2, r3
 8010fba:	2b02      	cmp	r3, #2
 8010fbc:	d901      	bls.n	8010fc2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8010fbe:	2303      	movs	r3, #3
 8010fc0:	e212      	b.n	80113e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8010fc2:	4b41      	ldr	r3, [pc, #260]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 8010fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010fc8:	f003 0302 	and.w	r3, r3, #2
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d0ef      	beq.n	8010fb0 <HAL_RCC_OscConfig+0x3ec>
 8010fd0:	e01b      	b.n	801100a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010fd2:	4b3d      	ldr	r3, [pc, #244]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 8010fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010fd8:	4a3b      	ldr	r2, [pc, #236]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 8010fda:	f023 0301 	bic.w	r3, r3, #1
 8010fde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010fe2:	f7fb f883 	bl	800c0ec <HAL_GetTick>
 8010fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8010fe8:	e008      	b.n	8010ffc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010fea:	f7fb f87f 	bl	800c0ec <HAL_GetTick>
 8010fee:	4602      	mov	r2, r0
 8010ff0:	693b      	ldr	r3, [r7, #16]
 8010ff2:	1ad3      	subs	r3, r2, r3
 8010ff4:	2b02      	cmp	r3, #2
 8010ff6:	d901      	bls.n	8010ffc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8010ff8:	2303      	movs	r3, #3
 8010ffa:	e1f5      	b.n	80113e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8010ffc:	4b32      	ldr	r3, [pc, #200]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 8010ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011002:	f003 0302 	and.w	r3, r3, #2
 8011006:	2b00      	cmp	r3, #0
 8011008:	d1ef      	bne.n	8010fea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	f003 0304 	and.w	r3, r3, #4
 8011012:	2b00      	cmp	r3, #0
 8011014:	f000 80a6 	beq.w	8011164 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011018:	2300      	movs	r3, #0
 801101a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 801101c:	4b2a      	ldr	r3, [pc, #168]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 801101e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011024:	2b00      	cmp	r3, #0
 8011026:	d10d      	bne.n	8011044 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011028:	4b27      	ldr	r3, [pc, #156]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 801102a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801102c:	4a26      	ldr	r2, [pc, #152]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 801102e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011032:	6593      	str	r3, [r2, #88]	; 0x58
 8011034:	4b24      	ldr	r3, [pc, #144]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 8011036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801103c:	60bb      	str	r3, [r7, #8]
 801103e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011040:	2301      	movs	r3, #1
 8011042:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011044:	4b21      	ldr	r3, [pc, #132]	; (80110cc <HAL_RCC_OscConfig+0x508>)
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801104c:	2b00      	cmp	r3, #0
 801104e:	d118      	bne.n	8011082 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011050:	4b1e      	ldr	r3, [pc, #120]	; (80110cc <HAL_RCC_OscConfig+0x508>)
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	4a1d      	ldr	r2, [pc, #116]	; (80110cc <HAL_RCC_OscConfig+0x508>)
 8011056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801105a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801105c:	f7fb f846 	bl	800c0ec <HAL_GetTick>
 8011060:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011062:	e008      	b.n	8011076 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011064:	f7fb f842 	bl	800c0ec <HAL_GetTick>
 8011068:	4602      	mov	r2, r0
 801106a:	693b      	ldr	r3, [r7, #16]
 801106c:	1ad3      	subs	r3, r2, r3
 801106e:	2b02      	cmp	r3, #2
 8011070:	d901      	bls.n	8011076 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8011072:	2303      	movs	r3, #3
 8011074:	e1b8      	b.n	80113e8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011076:	4b15      	ldr	r3, [pc, #84]	; (80110cc <HAL_RCC_OscConfig+0x508>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801107e:	2b00      	cmp	r3, #0
 8011080:	d0f0      	beq.n	8011064 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	689b      	ldr	r3, [r3, #8]
 8011086:	2b01      	cmp	r3, #1
 8011088:	d108      	bne.n	801109c <HAL_RCC_OscConfig+0x4d8>
 801108a:	4b0f      	ldr	r3, [pc, #60]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 801108c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011090:	4a0d      	ldr	r2, [pc, #52]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 8011092:	f043 0301 	orr.w	r3, r3, #1
 8011096:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801109a:	e029      	b.n	80110f0 <HAL_RCC_OscConfig+0x52c>
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	689b      	ldr	r3, [r3, #8]
 80110a0:	2b05      	cmp	r3, #5
 80110a2:	d115      	bne.n	80110d0 <HAL_RCC_OscConfig+0x50c>
 80110a4:	4b08      	ldr	r3, [pc, #32]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 80110a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110aa:	4a07      	ldr	r2, [pc, #28]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 80110ac:	f043 0304 	orr.w	r3, r3, #4
 80110b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80110b4:	4b04      	ldr	r3, [pc, #16]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 80110b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110ba:	4a03      	ldr	r2, [pc, #12]	; (80110c8 <HAL_RCC_OscConfig+0x504>)
 80110bc:	f043 0301 	orr.w	r3, r3, #1
 80110c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80110c4:	e014      	b.n	80110f0 <HAL_RCC_OscConfig+0x52c>
 80110c6:	bf00      	nop
 80110c8:	40021000 	.word	0x40021000
 80110cc:	40007000 	.word	0x40007000
 80110d0:	4b9d      	ldr	r3, [pc, #628]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 80110d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110d6:	4a9c      	ldr	r2, [pc, #624]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 80110d8:	f023 0301 	bic.w	r3, r3, #1
 80110dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80110e0:	4b99      	ldr	r3, [pc, #612]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 80110e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110e6:	4a98      	ldr	r2, [pc, #608]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 80110e8:	f023 0304 	bic.w	r3, r3, #4
 80110ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	689b      	ldr	r3, [r3, #8]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d016      	beq.n	8011126 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80110f8:	f7fa fff8 	bl	800c0ec <HAL_GetTick>
 80110fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80110fe:	e00a      	b.n	8011116 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011100:	f7fa fff4 	bl	800c0ec <HAL_GetTick>
 8011104:	4602      	mov	r2, r0
 8011106:	693b      	ldr	r3, [r7, #16]
 8011108:	1ad3      	subs	r3, r2, r3
 801110a:	f241 3288 	movw	r2, #5000	; 0x1388
 801110e:	4293      	cmp	r3, r2
 8011110:	d901      	bls.n	8011116 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8011112:	2303      	movs	r3, #3
 8011114:	e168      	b.n	80113e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011116:	4b8c      	ldr	r3, [pc, #560]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 8011118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801111c:	f003 0302 	and.w	r3, r3, #2
 8011120:	2b00      	cmp	r3, #0
 8011122:	d0ed      	beq.n	8011100 <HAL_RCC_OscConfig+0x53c>
 8011124:	e015      	b.n	8011152 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011126:	f7fa ffe1 	bl	800c0ec <HAL_GetTick>
 801112a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801112c:	e00a      	b.n	8011144 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801112e:	f7fa ffdd 	bl	800c0ec <HAL_GetTick>
 8011132:	4602      	mov	r2, r0
 8011134:	693b      	ldr	r3, [r7, #16]
 8011136:	1ad3      	subs	r3, r2, r3
 8011138:	f241 3288 	movw	r2, #5000	; 0x1388
 801113c:	4293      	cmp	r3, r2
 801113e:	d901      	bls.n	8011144 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8011140:	2303      	movs	r3, #3
 8011142:	e151      	b.n	80113e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8011144:	4b80      	ldr	r3, [pc, #512]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 8011146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801114a:	f003 0302 	and.w	r3, r3, #2
 801114e:	2b00      	cmp	r3, #0
 8011150:	d1ed      	bne.n	801112e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011152:	7ffb      	ldrb	r3, [r7, #31]
 8011154:	2b01      	cmp	r3, #1
 8011156:	d105      	bne.n	8011164 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011158:	4b7b      	ldr	r3, [pc, #492]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 801115a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801115c:	4a7a      	ldr	r2, [pc, #488]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 801115e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011162:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	f003 0320 	and.w	r3, r3, #32
 801116c:	2b00      	cmp	r3, #0
 801116e:	d03c      	beq.n	80111ea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011174:	2b00      	cmp	r3, #0
 8011176:	d01c      	beq.n	80111b2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8011178:	4b73      	ldr	r3, [pc, #460]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 801117a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801117e:	4a72      	ldr	r2, [pc, #456]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 8011180:	f043 0301 	orr.w	r3, r3, #1
 8011184:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011188:	f7fa ffb0 	bl	800c0ec <HAL_GetTick>
 801118c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801118e:	e008      	b.n	80111a2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011190:	f7fa ffac 	bl	800c0ec <HAL_GetTick>
 8011194:	4602      	mov	r2, r0
 8011196:	693b      	ldr	r3, [r7, #16]
 8011198:	1ad3      	subs	r3, r2, r3
 801119a:	2b02      	cmp	r3, #2
 801119c:	d901      	bls.n	80111a2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 801119e:	2303      	movs	r3, #3
 80111a0:	e122      	b.n	80113e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80111a2:	4b69      	ldr	r3, [pc, #420]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 80111a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80111a8:	f003 0302 	and.w	r3, r3, #2
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d0ef      	beq.n	8011190 <HAL_RCC_OscConfig+0x5cc>
 80111b0:	e01b      	b.n	80111ea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80111b2:	4b65      	ldr	r3, [pc, #404]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 80111b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80111b8:	4a63      	ldr	r2, [pc, #396]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 80111ba:	f023 0301 	bic.w	r3, r3, #1
 80111be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80111c2:	f7fa ff93 	bl	800c0ec <HAL_GetTick>
 80111c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80111c8:	e008      	b.n	80111dc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80111ca:	f7fa ff8f 	bl	800c0ec <HAL_GetTick>
 80111ce:	4602      	mov	r2, r0
 80111d0:	693b      	ldr	r3, [r7, #16]
 80111d2:	1ad3      	subs	r3, r2, r3
 80111d4:	2b02      	cmp	r3, #2
 80111d6:	d901      	bls.n	80111dc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80111d8:	2303      	movs	r3, #3
 80111da:	e105      	b.n	80113e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80111dc:	4b5a      	ldr	r3, [pc, #360]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 80111de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80111e2:	f003 0302 	and.w	r3, r3, #2
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d1ef      	bne.n	80111ca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	f000 80f9 	beq.w	80113e6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111f8:	2b02      	cmp	r3, #2
 80111fa:	f040 80cf 	bne.w	801139c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80111fe:	4b52      	ldr	r3, [pc, #328]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 8011200:	68db      	ldr	r3, [r3, #12]
 8011202:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8011204:	697b      	ldr	r3, [r7, #20]
 8011206:	f003 0203 	and.w	r2, r3, #3
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801120e:	429a      	cmp	r2, r3
 8011210:	d12c      	bne.n	801126c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8011212:	697b      	ldr	r3, [r7, #20]
 8011214:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801121c:	3b01      	subs	r3, #1
 801121e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8011220:	429a      	cmp	r2, r3
 8011222:	d123      	bne.n	801126c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8011224:	697b      	ldr	r3, [r7, #20]
 8011226:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801122e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8011230:	429a      	cmp	r2, r3
 8011232:	d11b      	bne.n	801126c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8011234:	697b      	ldr	r3, [r7, #20]
 8011236:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801123e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8011240:	429a      	cmp	r2, r3
 8011242:	d113      	bne.n	801126c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8011244:	697b      	ldr	r3, [r7, #20]
 8011246:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801124e:	085b      	lsrs	r3, r3, #1
 8011250:	3b01      	subs	r3, #1
 8011252:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8011254:	429a      	cmp	r2, r3
 8011256:	d109      	bne.n	801126c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8011258:	697b      	ldr	r3, [r7, #20]
 801125a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011262:	085b      	lsrs	r3, r3, #1
 8011264:	3b01      	subs	r3, #1
 8011266:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8011268:	429a      	cmp	r2, r3
 801126a:	d071      	beq.n	8011350 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 801126c:	69bb      	ldr	r3, [r7, #24]
 801126e:	2b0c      	cmp	r3, #12
 8011270:	d068      	beq.n	8011344 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8011272:	4b35      	ldr	r3, [pc, #212]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801127a:	2b00      	cmp	r3, #0
 801127c:	d105      	bne.n	801128a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 801127e:	4b32      	ldr	r3, [pc, #200]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011286:	2b00      	cmp	r3, #0
 8011288:	d001      	beq.n	801128e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 801128a:	2301      	movs	r3, #1
 801128c:	e0ac      	b.n	80113e8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 801128e:	4b2e      	ldr	r3, [pc, #184]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	4a2d      	ldr	r2, [pc, #180]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 8011294:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011298:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801129a:	f7fa ff27 	bl	800c0ec <HAL_GetTick>
 801129e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80112a0:	e008      	b.n	80112b4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80112a2:	f7fa ff23 	bl	800c0ec <HAL_GetTick>
 80112a6:	4602      	mov	r2, r0
 80112a8:	693b      	ldr	r3, [r7, #16]
 80112aa:	1ad3      	subs	r3, r2, r3
 80112ac:	2b02      	cmp	r3, #2
 80112ae:	d901      	bls.n	80112b4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80112b0:	2303      	movs	r3, #3
 80112b2:	e099      	b.n	80113e8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80112b4:	4b24      	ldr	r3, [pc, #144]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d1f0      	bne.n	80112a2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80112c0:	4b21      	ldr	r3, [pc, #132]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 80112c2:	68da      	ldr	r2, [r3, #12]
 80112c4:	4b21      	ldr	r3, [pc, #132]	; (801134c <HAL_RCC_OscConfig+0x788>)
 80112c6:	4013      	ands	r3, r2
 80112c8:	687a      	ldr	r2, [r7, #4]
 80112ca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80112cc:	687a      	ldr	r2, [r7, #4]
 80112ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80112d0:	3a01      	subs	r2, #1
 80112d2:	0112      	lsls	r2, r2, #4
 80112d4:	4311      	orrs	r1, r2
 80112d6:	687a      	ldr	r2, [r7, #4]
 80112d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80112da:	0212      	lsls	r2, r2, #8
 80112dc:	4311      	orrs	r1, r2
 80112de:	687a      	ldr	r2, [r7, #4]
 80112e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80112e2:	0852      	lsrs	r2, r2, #1
 80112e4:	3a01      	subs	r2, #1
 80112e6:	0552      	lsls	r2, r2, #21
 80112e8:	4311      	orrs	r1, r2
 80112ea:	687a      	ldr	r2, [r7, #4]
 80112ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80112ee:	0852      	lsrs	r2, r2, #1
 80112f0:	3a01      	subs	r2, #1
 80112f2:	0652      	lsls	r2, r2, #25
 80112f4:	4311      	orrs	r1, r2
 80112f6:	687a      	ldr	r2, [r7, #4]
 80112f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80112fa:	06d2      	lsls	r2, r2, #27
 80112fc:	430a      	orrs	r2, r1
 80112fe:	4912      	ldr	r1, [pc, #72]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 8011300:	4313      	orrs	r3, r2
 8011302:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8011304:	4b10      	ldr	r3, [pc, #64]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	4a0f      	ldr	r2, [pc, #60]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 801130a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801130e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8011310:	4b0d      	ldr	r3, [pc, #52]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 8011312:	68db      	ldr	r3, [r3, #12]
 8011314:	4a0c      	ldr	r2, [pc, #48]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 8011316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801131a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801131c:	f7fa fee6 	bl	800c0ec <HAL_GetTick>
 8011320:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011322:	e008      	b.n	8011336 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011324:	f7fa fee2 	bl	800c0ec <HAL_GetTick>
 8011328:	4602      	mov	r2, r0
 801132a:	693b      	ldr	r3, [r7, #16]
 801132c:	1ad3      	subs	r3, r2, r3
 801132e:	2b02      	cmp	r3, #2
 8011330:	d901      	bls.n	8011336 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8011332:	2303      	movs	r3, #3
 8011334:	e058      	b.n	80113e8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011336:	4b04      	ldr	r3, [pc, #16]	; (8011348 <HAL_RCC_OscConfig+0x784>)
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801133e:	2b00      	cmp	r3, #0
 8011340:	d0f0      	beq.n	8011324 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8011342:	e050      	b.n	80113e6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8011344:	2301      	movs	r3, #1
 8011346:	e04f      	b.n	80113e8 <HAL_RCC_OscConfig+0x824>
 8011348:	40021000 	.word	0x40021000
 801134c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011350:	4b27      	ldr	r3, [pc, #156]	; (80113f0 <HAL_RCC_OscConfig+0x82c>)
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011358:	2b00      	cmp	r3, #0
 801135a:	d144      	bne.n	80113e6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 801135c:	4b24      	ldr	r3, [pc, #144]	; (80113f0 <HAL_RCC_OscConfig+0x82c>)
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	4a23      	ldr	r2, [pc, #140]	; (80113f0 <HAL_RCC_OscConfig+0x82c>)
 8011362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011366:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8011368:	4b21      	ldr	r3, [pc, #132]	; (80113f0 <HAL_RCC_OscConfig+0x82c>)
 801136a:	68db      	ldr	r3, [r3, #12]
 801136c:	4a20      	ldr	r2, [pc, #128]	; (80113f0 <HAL_RCC_OscConfig+0x82c>)
 801136e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011372:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8011374:	f7fa feba 	bl	800c0ec <HAL_GetTick>
 8011378:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801137a:	e008      	b.n	801138e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801137c:	f7fa feb6 	bl	800c0ec <HAL_GetTick>
 8011380:	4602      	mov	r2, r0
 8011382:	693b      	ldr	r3, [r7, #16]
 8011384:	1ad3      	subs	r3, r2, r3
 8011386:	2b02      	cmp	r3, #2
 8011388:	d901      	bls.n	801138e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 801138a:	2303      	movs	r3, #3
 801138c:	e02c      	b.n	80113e8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801138e:	4b18      	ldr	r3, [pc, #96]	; (80113f0 <HAL_RCC_OscConfig+0x82c>)
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011396:	2b00      	cmp	r3, #0
 8011398:	d0f0      	beq.n	801137c <HAL_RCC_OscConfig+0x7b8>
 801139a:	e024      	b.n	80113e6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 801139c:	69bb      	ldr	r3, [r7, #24]
 801139e:	2b0c      	cmp	r3, #12
 80113a0:	d01f      	beq.n	80113e2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80113a2:	4b13      	ldr	r3, [pc, #76]	; (80113f0 <HAL_RCC_OscConfig+0x82c>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	4a12      	ldr	r2, [pc, #72]	; (80113f0 <HAL_RCC_OscConfig+0x82c>)
 80113a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80113ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80113ae:	f7fa fe9d 	bl	800c0ec <HAL_GetTick>
 80113b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80113b4:	e008      	b.n	80113c8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80113b6:	f7fa fe99 	bl	800c0ec <HAL_GetTick>
 80113ba:	4602      	mov	r2, r0
 80113bc:	693b      	ldr	r3, [r7, #16]
 80113be:	1ad3      	subs	r3, r2, r3
 80113c0:	2b02      	cmp	r3, #2
 80113c2:	d901      	bls.n	80113c8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80113c4:	2303      	movs	r3, #3
 80113c6:	e00f      	b.n	80113e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80113c8:	4b09      	ldr	r3, [pc, #36]	; (80113f0 <HAL_RCC_OscConfig+0x82c>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d1f0      	bne.n	80113b6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80113d4:	4b06      	ldr	r3, [pc, #24]	; (80113f0 <HAL_RCC_OscConfig+0x82c>)
 80113d6:	68da      	ldr	r2, [r3, #12]
 80113d8:	4905      	ldr	r1, [pc, #20]	; (80113f0 <HAL_RCC_OscConfig+0x82c>)
 80113da:	4b06      	ldr	r3, [pc, #24]	; (80113f4 <HAL_RCC_OscConfig+0x830>)
 80113dc:	4013      	ands	r3, r2
 80113de:	60cb      	str	r3, [r1, #12]
 80113e0:	e001      	b.n	80113e6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80113e2:	2301      	movs	r3, #1
 80113e4:	e000      	b.n	80113e8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80113e6:	2300      	movs	r3, #0
}
 80113e8:	4618      	mov	r0, r3
 80113ea:	3720      	adds	r7, #32
 80113ec:	46bd      	mov	sp, r7
 80113ee:	bd80      	pop	{r7, pc}
 80113f0:	40021000 	.word	0x40021000
 80113f4:	feeefffc 	.word	0xfeeefffc

080113f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b084      	sub	sp, #16
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
 8011400:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d101      	bne.n	801140c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011408:	2301      	movs	r3, #1
 801140a:	e0e7      	b.n	80115dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801140c:	4b75      	ldr	r3, [pc, #468]	; (80115e4 <HAL_RCC_ClockConfig+0x1ec>)
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	f003 0307 	and.w	r3, r3, #7
 8011414:	683a      	ldr	r2, [r7, #0]
 8011416:	429a      	cmp	r2, r3
 8011418:	d910      	bls.n	801143c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801141a:	4b72      	ldr	r3, [pc, #456]	; (80115e4 <HAL_RCC_ClockConfig+0x1ec>)
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	f023 0207 	bic.w	r2, r3, #7
 8011422:	4970      	ldr	r1, [pc, #448]	; (80115e4 <HAL_RCC_ClockConfig+0x1ec>)
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	4313      	orrs	r3, r2
 8011428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801142a:	4b6e      	ldr	r3, [pc, #440]	; (80115e4 <HAL_RCC_ClockConfig+0x1ec>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	f003 0307 	and.w	r3, r3, #7
 8011432:	683a      	ldr	r2, [r7, #0]
 8011434:	429a      	cmp	r2, r3
 8011436:	d001      	beq.n	801143c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8011438:	2301      	movs	r3, #1
 801143a:	e0cf      	b.n	80115dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	f003 0302 	and.w	r3, r3, #2
 8011444:	2b00      	cmp	r3, #0
 8011446:	d010      	beq.n	801146a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	689a      	ldr	r2, [r3, #8]
 801144c:	4b66      	ldr	r3, [pc, #408]	; (80115e8 <HAL_RCC_ClockConfig+0x1f0>)
 801144e:	689b      	ldr	r3, [r3, #8]
 8011450:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011454:	429a      	cmp	r2, r3
 8011456:	d908      	bls.n	801146a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011458:	4b63      	ldr	r3, [pc, #396]	; (80115e8 <HAL_RCC_ClockConfig+0x1f0>)
 801145a:	689b      	ldr	r3, [r3, #8]
 801145c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	689b      	ldr	r3, [r3, #8]
 8011464:	4960      	ldr	r1, [pc, #384]	; (80115e8 <HAL_RCC_ClockConfig+0x1f0>)
 8011466:	4313      	orrs	r3, r2
 8011468:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	f003 0301 	and.w	r3, r3, #1
 8011472:	2b00      	cmp	r3, #0
 8011474:	d04c      	beq.n	8011510 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	685b      	ldr	r3, [r3, #4]
 801147a:	2b03      	cmp	r3, #3
 801147c:	d107      	bne.n	801148e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801147e:	4b5a      	ldr	r3, [pc, #360]	; (80115e8 <HAL_RCC_ClockConfig+0x1f0>)
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011486:	2b00      	cmp	r3, #0
 8011488:	d121      	bne.n	80114ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 801148a:	2301      	movs	r3, #1
 801148c:	e0a6      	b.n	80115dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	685b      	ldr	r3, [r3, #4]
 8011492:	2b02      	cmp	r3, #2
 8011494:	d107      	bne.n	80114a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8011496:	4b54      	ldr	r3, [pc, #336]	; (80115e8 <HAL_RCC_ClockConfig+0x1f0>)
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d115      	bne.n	80114ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80114a2:	2301      	movs	r3, #1
 80114a4:	e09a      	b.n	80115dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	685b      	ldr	r3, [r3, #4]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d107      	bne.n	80114be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80114ae:	4b4e      	ldr	r3, [pc, #312]	; (80115e8 <HAL_RCC_ClockConfig+0x1f0>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	f003 0302 	and.w	r3, r3, #2
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d109      	bne.n	80114ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80114ba:	2301      	movs	r3, #1
 80114bc:	e08e      	b.n	80115dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80114be:	4b4a      	ldr	r3, [pc, #296]	; (80115e8 <HAL_RCC_ClockConfig+0x1f0>)
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d101      	bne.n	80114ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80114ca:	2301      	movs	r3, #1
 80114cc:	e086      	b.n	80115dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80114ce:	4b46      	ldr	r3, [pc, #280]	; (80115e8 <HAL_RCC_ClockConfig+0x1f0>)
 80114d0:	689b      	ldr	r3, [r3, #8]
 80114d2:	f023 0203 	bic.w	r2, r3, #3
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	685b      	ldr	r3, [r3, #4]
 80114da:	4943      	ldr	r1, [pc, #268]	; (80115e8 <HAL_RCC_ClockConfig+0x1f0>)
 80114dc:	4313      	orrs	r3, r2
 80114de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80114e0:	f7fa fe04 	bl	800c0ec <HAL_GetTick>
 80114e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80114e6:	e00a      	b.n	80114fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80114e8:	f7fa fe00 	bl	800c0ec <HAL_GetTick>
 80114ec:	4602      	mov	r2, r0
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	1ad3      	subs	r3, r2, r3
 80114f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80114f6:	4293      	cmp	r3, r2
 80114f8:	d901      	bls.n	80114fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80114fa:	2303      	movs	r3, #3
 80114fc:	e06e      	b.n	80115dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80114fe:	4b3a      	ldr	r3, [pc, #232]	; (80115e8 <HAL_RCC_ClockConfig+0x1f0>)
 8011500:	689b      	ldr	r3, [r3, #8]
 8011502:	f003 020c 	and.w	r2, r3, #12
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	685b      	ldr	r3, [r3, #4]
 801150a:	009b      	lsls	r3, r3, #2
 801150c:	429a      	cmp	r2, r3
 801150e:	d1eb      	bne.n	80114e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	f003 0302 	and.w	r3, r3, #2
 8011518:	2b00      	cmp	r3, #0
 801151a:	d010      	beq.n	801153e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	689a      	ldr	r2, [r3, #8]
 8011520:	4b31      	ldr	r3, [pc, #196]	; (80115e8 <HAL_RCC_ClockConfig+0x1f0>)
 8011522:	689b      	ldr	r3, [r3, #8]
 8011524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011528:	429a      	cmp	r2, r3
 801152a:	d208      	bcs.n	801153e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801152c:	4b2e      	ldr	r3, [pc, #184]	; (80115e8 <HAL_RCC_ClockConfig+0x1f0>)
 801152e:	689b      	ldr	r3, [r3, #8]
 8011530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	689b      	ldr	r3, [r3, #8]
 8011538:	492b      	ldr	r1, [pc, #172]	; (80115e8 <HAL_RCC_ClockConfig+0x1f0>)
 801153a:	4313      	orrs	r3, r2
 801153c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801153e:	4b29      	ldr	r3, [pc, #164]	; (80115e4 <HAL_RCC_ClockConfig+0x1ec>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	f003 0307 	and.w	r3, r3, #7
 8011546:	683a      	ldr	r2, [r7, #0]
 8011548:	429a      	cmp	r2, r3
 801154a:	d210      	bcs.n	801156e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801154c:	4b25      	ldr	r3, [pc, #148]	; (80115e4 <HAL_RCC_ClockConfig+0x1ec>)
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	f023 0207 	bic.w	r2, r3, #7
 8011554:	4923      	ldr	r1, [pc, #140]	; (80115e4 <HAL_RCC_ClockConfig+0x1ec>)
 8011556:	683b      	ldr	r3, [r7, #0]
 8011558:	4313      	orrs	r3, r2
 801155a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801155c:	4b21      	ldr	r3, [pc, #132]	; (80115e4 <HAL_RCC_ClockConfig+0x1ec>)
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	f003 0307 	and.w	r3, r3, #7
 8011564:	683a      	ldr	r2, [r7, #0]
 8011566:	429a      	cmp	r2, r3
 8011568:	d001      	beq.n	801156e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 801156a:	2301      	movs	r3, #1
 801156c:	e036      	b.n	80115dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	f003 0304 	and.w	r3, r3, #4
 8011576:	2b00      	cmp	r3, #0
 8011578:	d008      	beq.n	801158c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801157a:	4b1b      	ldr	r3, [pc, #108]	; (80115e8 <HAL_RCC_ClockConfig+0x1f0>)
 801157c:	689b      	ldr	r3, [r3, #8]
 801157e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	68db      	ldr	r3, [r3, #12]
 8011586:	4918      	ldr	r1, [pc, #96]	; (80115e8 <HAL_RCC_ClockConfig+0x1f0>)
 8011588:	4313      	orrs	r3, r2
 801158a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	f003 0308 	and.w	r3, r3, #8
 8011594:	2b00      	cmp	r3, #0
 8011596:	d009      	beq.n	80115ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011598:	4b13      	ldr	r3, [pc, #76]	; (80115e8 <HAL_RCC_ClockConfig+0x1f0>)
 801159a:	689b      	ldr	r3, [r3, #8]
 801159c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	691b      	ldr	r3, [r3, #16]
 80115a4:	00db      	lsls	r3, r3, #3
 80115a6:	4910      	ldr	r1, [pc, #64]	; (80115e8 <HAL_RCC_ClockConfig+0x1f0>)
 80115a8:	4313      	orrs	r3, r2
 80115aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80115ac:	f000 f824 	bl	80115f8 <HAL_RCC_GetSysClockFreq>
 80115b0:	4602      	mov	r2, r0
 80115b2:	4b0d      	ldr	r3, [pc, #52]	; (80115e8 <HAL_RCC_ClockConfig+0x1f0>)
 80115b4:	689b      	ldr	r3, [r3, #8]
 80115b6:	091b      	lsrs	r3, r3, #4
 80115b8:	f003 030f 	and.w	r3, r3, #15
 80115bc:	490b      	ldr	r1, [pc, #44]	; (80115ec <HAL_RCC_ClockConfig+0x1f4>)
 80115be:	5ccb      	ldrb	r3, [r1, r3]
 80115c0:	f003 031f 	and.w	r3, r3, #31
 80115c4:	fa22 f303 	lsr.w	r3, r2, r3
 80115c8:	4a09      	ldr	r2, [pc, #36]	; (80115f0 <HAL_RCC_ClockConfig+0x1f8>)
 80115ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80115cc:	4b09      	ldr	r3, [pc, #36]	; (80115f4 <HAL_RCC_ClockConfig+0x1fc>)
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	4618      	mov	r0, r3
 80115d2:	f7fa fd3b 	bl	800c04c <HAL_InitTick>
 80115d6:	4603      	mov	r3, r0
 80115d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80115da:	7afb      	ldrb	r3, [r7, #11]
}
 80115dc:	4618      	mov	r0, r3
 80115de:	3710      	adds	r7, #16
 80115e0:	46bd      	mov	sp, r7
 80115e2:	bd80      	pop	{r7, pc}
 80115e4:	40022000 	.word	0x40022000
 80115e8:	40021000 	.word	0x40021000
 80115ec:	0801b9b4 	.word	0x0801b9b4
 80115f0:	200001a0 	.word	0x200001a0
 80115f4:	2000055c 	.word	0x2000055c

080115f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80115f8:	b480      	push	{r7}
 80115fa:	b089      	sub	sp, #36	; 0x24
 80115fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80115fe:	2300      	movs	r3, #0
 8011600:	61fb      	str	r3, [r7, #28]
 8011602:	2300      	movs	r3, #0
 8011604:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011606:	4b3e      	ldr	r3, [pc, #248]	; (8011700 <HAL_RCC_GetSysClockFreq+0x108>)
 8011608:	689b      	ldr	r3, [r3, #8]
 801160a:	f003 030c 	and.w	r3, r3, #12
 801160e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8011610:	4b3b      	ldr	r3, [pc, #236]	; (8011700 <HAL_RCC_GetSysClockFreq+0x108>)
 8011612:	68db      	ldr	r3, [r3, #12]
 8011614:	f003 0303 	and.w	r3, r3, #3
 8011618:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801161a:	693b      	ldr	r3, [r7, #16]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d005      	beq.n	801162c <HAL_RCC_GetSysClockFreq+0x34>
 8011620:	693b      	ldr	r3, [r7, #16]
 8011622:	2b0c      	cmp	r3, #12
 8011624:	d121      	bne.n	801166a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	2b01      	cmp	r3, #1
 801162a:	d11e      	bne.n	801166a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 801162c:	4b34      	ldr	r3, [pc, #208]	; (8011700 <HAL_RCC_GetSysClockFreq+0x108>)
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	f003 0308 	and.w	r3, r3, #8
 8011634:	2b00      	cmp	r3, #0
 8011636:	d107      	bne.n	8011648 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8011638:	4b31      	ldr	r3, [pc, #196]	; (8011700 <HAL_RCC_GetSysClockFreq+0x108>)
 801163a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801163e:	0a1b      	lsrs	r3, r3, #8
 8011640:	f003 030f 	and.w	r3, r3, #15
 8011644:	61fb      	str	r3, [r7, #28]
 8011646:	e005      	b.n	8011654 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8011648:	4b2d      	ldr	r3, [pc, #180]	; (8011700 <HAL_RCC_GetSysClockFreq+0x108>)
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	091b      	lsrs	r3, r3, #4
 801164e:	f003 030f 	and.w	r3, r3, #15
 8011652:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8011654:	4a2b      	ldr	r2, [pc, #172]	; (8011704 <HAL_RCC_GetSysClockFreq+0x10c>)
 8011656:	69fb      	ldr	r3, [r7, #28]
 8011658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801165c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801165e:	693b      	ldr	r3, [r7, #16]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d10d      	bne.n	8011680 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8011664:	69fb      	ldr	r3, [r7, #28]
 8011666:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8011668:	e00a      	b.n	8011680 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 801166a:	693b      	ldr	r3, [r7, #16]
 801166c:	2b04      	cmp	r3, #4
 801166e:	d102      	bne.n	8011676 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8011670:	4b25      	ldr	r3, [pc, #148]	; (8011708 <HAL_RCC_GetSysClockFreq+0x110>)
 8011672:	61bb      	str	r3, [r7, #24]
 8011674:	e004      	b.n	8011680 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8011676:	693b      	ldr	r3, [r7, #16]
 8011678:	2b08      	cmp	r3, #8
 801167a:	d101      	bne.n	8011680 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801167c:	4b23      	ldr	r3, [pc, #140]	; (801170c <HAL_RCC_GetSysClockFreq+0x114>)
 801167e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8011680:	693b      	ldr	r3, [r7, #16]
 8011682:	2b0c      	cmp	r3, #12
 8011684:	d134      	bne.n	80116f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8011686:	4b1e      	ldr	r3, [pc, #120]	; (8011700 <HAL_RCC_GetSysClockFreq+0x108>)
 8011688:	68db      	ldr	r3, [r3, #12]
 801168a:	f003 0303 	and.w	r3, r3, #3
 801168e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8011690:	68bb      	ldr	r3, [r7, #8]
 8011692:	2b02      	cmp	r3, #2
 8011694:	d003      	beq.n	801169e <HAL_RCC_GetSysClockFreq+0xa6>
 8011696:	68bb      	ldr	r3, [r7, #8]
 8011698:	2b03      	cmp	r3, #3
 801169a:	d003      	beq.n	80116a4 <HAL_RCC_GetSysClockFreq+0xac>
 801169c:	e005      	b.n	80116aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 801169e:	4b1a      	ldr	r3, [pc, #104]	; (8011708 <HAL_RCC_GetSysClockFreq+0x110>)
 80116a0:	617b      	str	r3, [r7, #20]
      break;
 80116a2:	e005      	b.n	80116b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80116a4:	4b19      	ldr	r3, [pc, #100]	; (801170c <HAL_RCC_GetSysClockFreq+0x114>)
 80116a6:	617b      	str	r3, [r7, #20]
      break;
 80116a8:	e002      	b.n	80116b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80116aa:	69fb      	ldr	r3, [r7, #28]
 80116ac:	617b      	str	r3, [r7, #20]
      break;
 80116ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80116b0:	4b13      	ldr	r3, [pc, #76]	; (8011700 <HAL_RCC_GetSysClockFreq+0x108>)
 80116b2:	68db      	ldr	r3, [r3, #12]
 80116b4:	091b      	lsrs	r3, r3, #4
 80116b6:	f003 0307 	and.w	r3, r3, #7
 80116ba:	3301      	adds	r3, #1
 80116bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80116be:	4b10      	ldr	r3, [pc, #64]	; (8011700 <HAL_RCC_GetSysClockFreq+0x108>)
 80116c0:	68db      	ldr	r3, [r3, #12]
 80116c2:	0a1b      	lsrs	r3, r3, #8
 80116c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80116c8:	697a      	ldr	r2, [r7, #20]
 80116ca:	fb03 f202 	mul.w	r2, r3, r2
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80116d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80116d6:	4b0a      	ldr	r3, [pc, #40]	; (8011700 <HAL_RCC_GetSysClockFreq+0x108>)
 80116d8:	68db      	ldr	r3, [r3, #12]
 80116da:	0e5b      	lsrs	r3, r3, #25
 80116dc:	f003 0303 	and.w	r3, r3, #3
 80116e0:	3301      	adds	r3, #1
 80116e2:	005b      	lsls	r3, r3, #1
 80116e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80116e6:	697a      	ldr	r2, [r7, #20]
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80116ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80116f0:	69bb      	ldr	r3, [r7, #24]
}
 80116f2:	4618      	mov	r0, r3
 80116f4:	3724      	adds	r7, #36	; 0x24
 80116f6:	46bd      	mov	sp, r7
 80116f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fc:	4770      	bx	lr
 80116fe:	bf00      	nop
 8011700:	40021000 	.word	0x40021000
 8011704:	0801b9cc 	.word	0x0801b9cc
 8011708:	00f42400 	.word	0x00f42400
 801170c:	007a1200 	.word	0x007a1200

08011710 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011710:	b480      	push	{r7}
 8011712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8011714:	4b03      	ldr	r3, [pc, #12]	; (8011724 <HAL_RCC_GetHCLKFreq+0x14>)
 8011716:	681b      	ldr	r3, [r3, #0]
}
 8011718:	4618      	mov	r0, r3
 801171a:	46bd      	mov	sp, r7
 801171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011720:	4770      	bx	lr
 8011722:	bf00      	nop
 8011724:	200001a0 	.word	0x200001a0

08011728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801172c:	f7ff fff0 	bl	8011710 <HAL_RCC_GetHCLKFreq>
 8011730:	4602      	mov	r2, r0
 8011732:	4b06      	ldr	r3, [pc, #24]	; (801174c <HAL_RCC_GetPCLK1Freq+0x24>)
 8011734:	689b      	ldr	r3, [r3, #8]
 8011736:	0a1b      	lsrs	r3, r3, #8
 8011738:	f003 0307 	and.w	r3, r3, #7
 801173c:	4904      	ldr	r1, [pc, #16]	; (8011750 <HAL_RCC_GetPCLK1Freq+0x28>)
 801173e:	5ccb      	ldrb	r3, [r1, r3]
 8011740:	f003 031f 	and.w	r3, r3, #31
 8011744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011748:	4618      	mov	r0, r3
 801174a:	bd80      	pop	{r7, pc}
 801174c:	40021000 	.word	0x40021000
 8011750:	0801b9c4 	.word	0x0801b9c4

08011754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8011758:	f7ff ffda 	bl	8011710 <HAL_RCC_GetHCLKFreq>
 801175c:	4602      	mov	r2, r0
 801175e:	4b06      	ldr	r3, [pc, #24]	; (8011778 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011760:	689b      	ldr	r3, [r3, #8]
 8011762:	0adb      	lsrs	r3, r3, #11
 8011764:	f003 0307 	and.w	r3, r3, #7
 8011768:	4904      	ldr	r1, [pc, #16]	; (801177c <HAL_RCC_GetPCLK2Freq+0x28>)
 801176a:	5ccb      	ldrb	r3, [r1, r3]
 801176c:	f003 031f 	and.w	r3, r3, #31
 8011770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011774:	4618      	mov	r0, r3
 8011776:	bd80      	pop	{r7, pc}
 8011778:	40021000 	.word	0x40021000
 801177c:	0801b9c4 	.word	0x0801b9c4

08011780 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b086      	sub	sp, #24
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8011788:	2300      	movs	r3, #0
 801178a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 801178c:	4b2a      	ldr	r3, [pc, #168]	; (8011838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801178e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011794:	2b00      	cmp	r3, #0
 8011796:	d003      	beq.n	80117a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8011798:	f7ff f886 	bl	80108a8 <HAL_PWREx_GetVoltageRange>
 801179c:	6178      	str	r0, [r7, #20]
 801179e:	e014      	b.n	80117ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80117a0:	4b25      	ldr	r3, [pc, #148]	; (8011838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80117a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80117a4:	4a24      	ldr	r2, [pc, #144]	; (8011838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80117a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80117aa:	6593      	str	r3, [r2, #88]	; 0x58
 80117ac:	4b22      	ldr	r3, [pc, #136]	; (8011838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80117ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80117b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80117b4:	60fb      	str	r3, [r7, #12]
 80117b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80117b8:	f7ff f876 	bl	80108a8 <HAL_PWREx_GetVoltageRange>
 80117bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80117be:	4b1e      	ldr	r3, [pc, #120]	; (8011838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80117c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80117c2:	4a1d      	ldr	r2, [pc, #116]	; (8011838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80117c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80117c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80117ca:	697b      	ldr	r3, [r7, #20]
 80117cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80117d0:	d10b      	bne.n	80117ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2b80      	cmp	r3, #128	; 0x80
 80117d6:	d919      	bls.n	801180c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	2ba0      	cmp	r3, #160	; 0xa0
 80117dc:	d902      	bls.n	80117e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80117de:	2302      	movs	r3, #2
 80117e0:	613b      	str	r3, [r7, #16]
 80117e2:	e013      	b.n	801180c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80117e4:	2301      	movs	r3, #1
 80117e6:	613b      	str	r3, [r7, #16]
 80117e8:	e010      	b.n	801180c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	2b80      	cmp	r3, #128	; 0x80
 80117ee:	d902      	bls.n	80117f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80117f0:	2303      	movs	r3, #3
 80117f2:	613b      	str	r3, [r7, #16]
 80117f4:	e00a      	b.n	801180c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	2b80      	cmp	r3, #128	; 0x80
 80117fa:	d102      	bne.n	8011802 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80117fc:	2302      	movs	r3, #2
 80117fe:	613b      	str	r3, [r7, #16]
 8011800:	e004      	b.n	801180c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2b70      	cmp	r3, #112	; 0x70
 8011806:	d101      	bne.n	801180c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8011808:	2301      	movs	r3, #1
 801180a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 801180c:	4b0b      	ldr	r3, [pc, #44]	; (801183c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	f023 0207 	bic.w	r2, r3, #7
 8011814:	4909      	ldr	r1, [pc, #36]	; (801183c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8011816:	693b      	ldr	r3, [r7, #16]
 8011818:	4313      	orrs	r3, r2
 801181a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 801181c:	4b07      	ldr	r3, [pc, #28]	; (801183c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	f003 0307 	and.w	r3, r3, #7
 8011824:	693a      	ldr	r2, [r7, #16]
 8011826:	429a      	cmp	r2, r3
 8011828:	d001      	beq.n	801182e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 801182a:	2301      	movs	r3, #1
 801182c:	e000      	b.n	8011830 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 801182e:	2300      	movs	r3, #0
}
 8011830:	4618      	mov	r0, r3
 8011832:	3718      	adds	r7, #24
 8011834:	46bd      	mov	sp, r7
 8011836:	bd80      	pop	{r7, pc}
 8011838:	40021000 	.word	0x40021000
 801183c:	40022000 	.word	0x40022000

08011840 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011840:	b580      	push	{r7, lr}
 8011842:	b086      	sub	sp, #24
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8011848:	2300      	movs	r3, #0
 801184a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801184c:	2300      	movs	r3, #0
 801184e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011858:	2b00      	cmp	r3, #0
 801185a:	d041      	beq.n	80118e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011860:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8011864:	d02a      	beq.n	80118bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8011866:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801186a:	d824      	bhi.n	80118b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 801186c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011870:	d008      	beq.n	8011884 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8011872:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011876:	d81e      	bhi.n	80118b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8011878:	2b00      	cmp	r3, #0
 801187a:	d00a      	beq.n	8011892 <HAL_RCCEx_PeriphCLKConfig+0x52>
 801187c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011880:	d010      	beq.n	80118a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8011882:	e018      	b.n	80118b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8011884:	4b86      	ldr	r3, [pc, #536]	; (8011aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011886:	68db      	ldr	r3, [r3, #12]
 8011888:	4a85      	ldr	r2, [pc, #532]	; (8011aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801188a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801188e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8011890:	e015      	b.n	80118be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	3304      	adds	r3, #4
 8011896:	2100      	movs	r1, #0
 8011898:	4618      	mov	r0, r3
 801189a:	f001 f895 	bl	80129c8 <RCCEx_PLLSAI1_Config>
 801189e:	4603      	mov	r3, r0
 80118a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80118a2:	e00c      	b.n	80118be <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	3320      	adds	r3, #32
 80118a8:	2100      	movs	r1, #0
 80118aa:	4618      	mov	r0, r3
 80118ac:	f001 f97e 	bl	8012bac <RCCEx_PLLSAI2_Config>
 80118b0:	4603      	mov	r3, r0
 80118b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80118b4:	e003      	b.n	80118be <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80118b6:	2301      	movs	r3, #1
 80118b8:	74fb      	strb	r3, [r7, #19]
      break;
 80118ba:	e000      	b.n	80118be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80118bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80118be:	7cfb      	ldrb	r3, [r7, #19]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d10b      	bne.n	80118dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80118c4:	4b76      	ldr	r3, [pc, #472]	; (8011aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80118c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80118ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80118d2:	4973      	ldr	r1, [pc, #460]	; (8011aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80118d4:	4313      	orrs	r3, r2
 80118d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80118da:	e001      	b.n	80118e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80118dc:	7cfb      	ldrb	r3, [r7, #19]
 80118de:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d041      	beq.n	8011970 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80118f4:	d02a      	beq.n	801194c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80118f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80118fa:	d824      	bhi.n	8011946 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80118fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011900:	d008      	beq.n	8011914 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8011902:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011906:	d81e      	bhi.n	8011946 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8011908:	2b00      	cmp	r3, #0
 801190a:	d00a      	beq.n	8011922 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 801190c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011910:	d010      	beq.n	8011934 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8011912:	e018      	b.n	8011946 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8011914:	4b62      	ldr	r3, [pc, #392]	; (8011aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011916:	68db      	ldr	r3, [r3, #12]
 8011918:	4a61      	ldr	r2, [pc, #388]	; (8011aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801191a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801191e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8011920:	e015      	b.n	801194e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	3304      	adds	r3, #4
 8011926:	2100      	movs	r1, #0
 8011928:	4618      	mov	r0, r3
 801192a:	f001 f84d 	bl	80129c8 <RCCEx_PLLSAI1_Config>
 801192e:	4603      	mov	r3, r0
 8011930:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8011932:	e00c      	b.n	801194e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	3320      	adds	r3, #32
 8011938:	2100      	movs	r1, #0
 801193a:	4618      	mov	r0, r3
 801193c:	f001 f936 	bl	8012bac <RCCEx_PLLSAI2_Config>
 8011940:	4603      	mov	r3, r0
 8011942:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8011944:	e003      	b.n	801194e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011946:	2301      	movs	r3, #1
 8011948:	74fb      	strb	r3, [r7, #19]
      break;
 801194a:	e000      	b.n	801194e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 801194c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801194e:	7cfb      	ldrb	r3, [r7, #19]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d10b      	bne.n	801196c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8011954:	4b52      	ldr	r3, [pc, #328]	; (8011aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801195a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011962:	494f      	ldr	r1, [pc, #316]	; (8011aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011964:	4313      	orrs	r3, r2
 8011966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 801196a:	e001      	b.n	8011970 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801196c:	7cfb      	ldrb	r3, [r7, #19]
 801196e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011978:	2b00      	cmp	r3, #0
 801197a:	f000 80a0 	beq.w	8011abe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801197e:	2300      	movs	r3, #0
 8011980:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8011982:	4b47      	ldr	r3, [pc, #284]	; (8011aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801198a:	2b00      	cmp	r3, #0
 801198c:	d101      	bne.n	8011992 <HAL_RCCEx_PeriphCLKConfig+0x152>
 801198e:	2301      	movs	r3, #1
 8011990:	e000      	b.n	8011994 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8011992:	2300      	movs	r3, #0
 8011994:	2b00      	cmp	r3, #0
 8011996:	d00d      	beq.n	80119b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011998:	4b41      	ldr	r3, [pc, #260]	; (8011aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801199c:	4a40      	ldr	r2, [pc, #256]	; (8011aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801199e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80119a2:	6593      	str	r3, [r2, #88]	; 0x58
 80119a4:	4b3e      	ldr	r3, [pc, #248]	; (8011aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80119a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80119a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80119ac:	60bb      	str	r3, [r7, #8]
 80119ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80119b0:	2301      	movs	r3, #1
 80119b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80119b4:	4b3b      	ldr	r3, [pc, #236]	; (8011aa4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	4a3a      	ldr	r2, [pc, #232]	; (8011aa4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80119ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80119be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80119c0:	f7fa fb94 	bl	800c0ec <HAL_GetTick>
 80119c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80119c6:	e009      	b.n	80119dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80119c8:	f7fa fb90 	bl	800c0ec <HAL_GetTick>
 80119cc:	4602      	mov	r2, r0
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	1ad3      	subs	r3, r2, r3
 80119d2:	2b02      	cmp	r3, #2
 80119d4:	d902      	bls.n	80119dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80119d6:	2303      	movs	r3, #3
 80119d8:	74fb      	strb	r3, [r7, #19]
        break;
 80119da:	e005      	b.n	80119e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80119dc:	4b31      	ldr	r3, [pc, #196]	; (8011aa4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d0ef      	beq.n	80119c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80119e8:	7cfb      	ldrb	r3, [r7, #19]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d15c      	bne.n	8011aa8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80119ee:	4b2c      	ldr	r3, [pc, #176]	; (8011aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80119f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80119f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80119f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80119fa:	697b      	ldr	r3, [r7, #20]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d01f      	beq.n	8011a40 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011a06:	697a      	ldr	r2, [r7, #20]
 8011a08:	429a      	cmp	r2, r3
 8011a0a:	d019      	beq.n	8011a40 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8011a0c:	4b24      	ldr	r3, [pc, #144]	; (8011aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011a16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8011a18:	4b21      	ldr	r3, [pc, #132]	; (8011aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a1e:	4a20      	ldr	r2, [pc, #128]	; (8011aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8011a28:	4b1d      	ldr	r3, [pc, #116]	; (8011aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a2e:	4a1c      	ldr	r2, [pc, #112]	; (8011aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8011a38:	4a19      	ldr	r2, [pc, #100]	; (8011aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011a3a:	697b      	ldr	r3, [r7, #20]
 8011a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8011a40:	697b      	ldr	r3, [r7, #20]
 8011a42:	f003 0301 	and.w	r3, r3, #1
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d016      	beq.n	8011a78 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011a4a:	f7fa fb4f 	bl	800c0ec <HAL_GetTick>
 8011a4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011a50:	e00b      	b.n	8011a6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011a52:	f7fa fb4b 	bl	800c0ec <HAL_GetTick>
 8011a56:	4602      	mov	r2, r0
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	1ad3      	subs	r3, r2, r3
 8011a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a60:	4293      	cmp	r3, r2
 8011a62:	d902      	bls.n	8011a6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8011a64:	2303      	movs	r3, #3
 8011a66:	74fb      	strb	r3, [r7, #19]
            break;
 8011a68:	e006      	b.n	8011a78 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011a6a:	4b0d      	ldr	r3, [pc, #52]	; (8011aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a70:	f003 0302 	and.w	r3, r3, #2
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d0ec      	beq.n	8011a52 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8011a78:	7cfb      	ldrb	r3, [r7, #19]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d10c      	bne.n	8011a98 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011a7e:	4b08      	ldr	r3, [pc, #32]	; (8011aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011a8e:	4904      	ldr	r1, [pc, #16]	; (8011aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011a90:	4313      	orrs	r3, r2
 8011a92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8011a96:	e009      	b.n	8011aac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8011a98:	7cfb      	ldrb	r3, [r7, #19]
 8011a9a:	74bb      	strb	r3, [r7, #18]
 8011a9c:	e006      	b.n	8011aac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8011a9e:	bf00      	nop
 8011aa0:	40021000 	.word	0x40021000
 8011aa4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011aa8:	7cfb      	ldrb	r3, [r7, #19]
 8011aaa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011aac:	7c7b      	ldrb	r3, [r7, #17]
 8011aae:	2b01      	cmp	r3, #1
 8011ab0:	d105      	bne.n	8011abe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011ab2:	4ba6      	ldr	r3, [pc, #664]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ab6:	4aa5      	ldr	r2, [pc, #660]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011abc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	f003 0301 	and.w	r3, r3, #1
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d00a      	beq.n	8011ae0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011aca:	4ba0      	ldr	r3, [pc, #640]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011ad0:	f023 0203 	bic.w	r2, r3, #3
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ad8:	499c      	ldr	r1, [pc, #624]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011ada:	4313      	orrs	r3, r2
 8011adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	f003 0302 	and.w	r3, r3, #2
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d00a      	beq.n	8011b02 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011aec:	4b97      	ldr	r3, [pc, #604]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011af2:	f023 020c 	bic.w	r2, r3, #12
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011afa:	4994      	ldr	r1, [pc, #592]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011afc:	4313      	orrs	r3, r2
 8011afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	f003 0304 	and.w	r3, r3, #4
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d00a      	beq.n	8011b24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011b0e:	4b8f      	ldr	r3, [pc, #572]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b1c:	498b      	ldr	r1, [pc, #556]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011b1e:	4313      	orrs	r3, r2
 8011b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	f003 0308 	and.w	r3, r3, #8
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d00a      	beq.n	8011b46 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8011b30:	4b86      	ldr	r3, [pc, #536]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b3e:	4983      	ldr	r1, [pc, #524]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011b40:	4313      	orrs	r3, r2
 8011b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	f003 0310 	and.w	r3, r3, #16
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d00a      	beq.n	8011b68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8011b52:	4b7e      	ldr	r3, [pc, #504]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b60:	497a      	ldr	r1, [pc, #488]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011b62:	4313      	orrs	r3, r2
 8011b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	f003 0320 	and.w	r3, r3, #32
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d00a      	beq.n	8011b8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8011b74:	4b75      	ldr	r3, [pc, #468]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b82:	4972      	ldr	r1, [pc, #456]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011b84:	4313      	orrs	r3, r2
 8011b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d00a      	beq.n	8011bac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8011b96:	4b6d      	ldr	r3, [pc, #436]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011ba4:	4969      	ldr	r1, [pc, #420]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011ba6:	4313      	orrs	r3, r2
 8011ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d00a      	beq.n	8011bce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8011bb8:	4b64      	ldr	r3, [pc, #400]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011bbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011bc6:	4961      	ldr	r1, [pc, #388]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011bc8:	4313      	orrs	r3, r2
 8011bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d00a      	beq.n	8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011bda:	4b5c      	ldr	r3, [pc, #368]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011be0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011be8:	4958      	ldr	r1, [pc, #352]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011bea:	4313      	orrs	r3, r2
 8011bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d00a      	beq.n	8011c12 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8011bfc:	4b53      	ldr	r3, [pc, #332]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c0a:	4950      	ldr	r1, [pc, #320]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011c0c:	4313      	orrs	r3, r2
 8011c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d00a      	beq.n	8011c34 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8011c1e:	4b4b      	ldr	r3, [pc, #300]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c2c:	4947      	ldr	r1, [pc, #284]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011c2e:	4313      	orrs	r3, r2
 8011c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d00a      	beq.n	8011c56 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8011c40:	4b42      	ldr	r3, [pc, #264]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011c42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011c46:	f023 0203 	bic.w	r2, r3, #3
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011c4e:	493f      	ldr	r1, [pc, #252]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011c50:	4313      	orrs	r3, r2
 8011c52:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d028      	beq.n	8011cb4 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8011c62:	4b3a      	ldr	r3, [pc, #232]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c70:	4936      	ldr	r1, [pc, #216]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011c72:	4313      	orrs	r3, r2
 8011c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011c80:	d106      	bne.n	8011c90 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8011c82:	4b32      	ldr	r3, [pc, #200]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011c84:	68db      	ldr	r3, [r3, #12]
 8011c86:	4a31      	ldr	r2, [pc, #196]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011c88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011c8c:	60d3      	str	r3, [r2, #12]
 8011c8e:	e011      	b.n	8011cb4 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011c98:	d10c      	bne.n	8011cb4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	3304      	adds	r3, #4
 8011c9e:	2101      	movs	r1, #1
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f000 fe91 	bl	80129c8 <RCCEx_PLLSAI1_Config>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8011caa:	7cfb      	ldrb	r3, [r7, #19]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d001      	beq.n	8011cb4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8011cb0:	7cfb      	ldrb	r3, [r7, #19]
 8011cb2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d028      	beq.n	8011d12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8011cc0:	4b22      	ldr	r3, [pc, #136]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011cc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cce:	491f      	ldr	r1, [pc, #124]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011cd0:	4313      	orrs	r3, r2
 8011cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011cde:	d106      	bne.n	8011cee <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8011ce0:	4b1a      	ldr	r3, [pc, #104]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011ce2:	68db      	ldr	r3, [r3, #12]
 8011ce4:	4a19      	ldr	r2, [pc, #100]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011ce6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011cea:	60d3      	str	r3, [r2, #12]
 8011cec:	e011      	b.n	8011d12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cf2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011cf6:	d10c      	bne.n	8011d12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	3304      	adds	r3, #4
 8011cfc:	2101      	movs	r1, #1
 8011cfe:	4618      	mov	r0, r3
 8011d00:	f000 fe62 	bl	80129c8 <RCCEx_PLLSAI1_Config>
 8011d04:	4603      	mov	r3, r0
 8011d06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8011d08:	7cfb      	ldrb	r3, [r7, #19]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d001      	beq.n	8011d12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8011d0e:	7cfb      	ldrb	r3, [r7, #19]
 8011d10:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d02a      	beq.n	8011d74 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8011d1e:	4b0b      	ldr	r3, [pc, #44]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011d24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d2c:	4907      	ldr	r1, [pc, #28]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011d2e:	4313      	orrs	r3, r2
 8011d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011d3c:	d108      	bne.n	8011d50 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8011d3e:	4b03      	ldr	r3, [pc, #12]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011d40:	68db      	ldr	r3, [r3, #12]
 8011d42:	4a02      	ldr	r2, [pc, #8]	; (8011d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011d44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011d48:	60d3      	str	r3, [r2, #12]
 8011d4a:	e013      	b.n	8011d74 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8011d4c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011d58:	d10c      	bne.n	8011d74 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	3304      	adds	r3, #4
 8011d5e:	2101      	movs	r1, #1
 8011d60:	4618      	mov	r0, r3
 8011d62:	f000 fe31 	bl	80129c8 <RCCEx_PLLSAI1_Config>
 8011d66:	4603      	mov	r3, r0
 8011d68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8011d6a:	7cfb      	ldrb	r3, [r7, #19]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d001      	beq.n	8011d74 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8011d70:	7cfb      	ldrb	r3, [r7, #19]
 8011d72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d02f      	beq.n	8011de0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8011d80:	4b2c      	ldr	r3, [pc, #176]	; (8011e34 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8011d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011d86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d8e:	4929      	ldr	r1, [pc, #164]	; (8011e34 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8011d90:	4313      	orrs	r3, r2
 8011d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011d9e:	d10d      	bne.n	8011dbc <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	3304      	adds	r3, #4
 8011da4:	2102      	movs	r1, #2
 8011da6:	4618      	mov	r0, r3
 8011da8:	f000 fe0e 	bl	80129c8 <RCCEx_PLLSAI1_Config>
 8011dac:	4603      	mov	r3, r0
 8011dae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8011db0:	7cfb      	ldrb	r3, [r7, #19]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d014      	beq.n	8011de0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8011db6:	7cfb      	ldrb	r3, [r7, #19]
 8011db8:	74bb      	strb	r3, [r7, #18]
 8011dba:	e011      	b.n	8011de0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011dc4:	d10c      	bne.n	8011de0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	3320      	adds	r3, #32
 8011dca:	2102      	movs	r1, #2
 8011dcc:	4618      	mov	r0, r3
 8011dce:	f000 feed 	bl	8012bac <RCCEx_PLLSAI2_Config>
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8011dd6:	7cfb      	ldrb	r3, [r7, #19]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d001      	beq.n	8011de0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8011ddc:	7cfb      	ldrb	r3, [r7, #19]
 8011dde:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d00b      	beq.n	8011e04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8011dec:	4b11      	ldr	r3, [pc, #68]	; (8011e34 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8011dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011df2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011dfc:	490d      	ldr	r1, [pc, #52]	; (8011e34 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8011dfe:	4313      	orrs	r3, r2
 8011e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d00b      	beq.n	8011e28 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8011e10:	4b08      	ldr	r3, [pc, #32]	; (8011e34 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8011e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011e20:	4904      	ldr	r1, [pc, #16]	; (8011e34 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8011e22:	4313      	orrs	r3, r2
 8011e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8011e28:	7cbb      	ldrb	r3, [r7, #18]
}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	3718      	adds	r7, #24
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}
 8011e32:	bf00      	nop
 8011e34:	40021000 	.word	0x40021000

08011e38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b088      	sub	sp, #32
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8011e40:	2300      	movs	r3, #0
 8011e42:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011e4a:	d13e      	bne.n	8011eca <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8011e4c:	4bb4      	ldr	r3, [pc, #720]	; (8012120 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011e56:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8011e58:	693b      	ldr	r3, [r7, #16]
 8011e5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011e5e:	d028      	beq.n	8011eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8011e60:	693b      	ldr	r3, [r7, #16]
 8011e62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011e66:	f200 858c 	bhi.w	8012982 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8011e6a:	693b      	ldr	r3, [r7, #16]
 8011e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e70:	d005      	beq.n	8011e7e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8011e72:	693b      	ldr	r3, [r7, #16]
 8011e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e78:	d00e      	beq.n	8011e98 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8011e7a:	f000 bd82 	b.w	8012982 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011e7e:	4ba8      	ldr	r3, [pc, #672]	; (8012120 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e84:	f003 0302 	and.w	r3, r3, #2
 8011e88:	2b02      	cmp	r3, #2
 8011e8a:	f040 857c 	bne.w	8012986 <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
        frequency = LSE_VALUE;
 8011e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011e92:	61fb      	str	r3, [r7, #28]
      break;
 8011e94:	f000 bd77 	b.w	8012986 <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8011e98:	4ba1      	ldr	r3, [pc, #644]	; (8012120 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011e9e:	f003 0302 	and.w	r3, r3, #2
 8011ea2:	2b02      	cmp	r3, #2
 8011ea4:	f040 8571 	bne.w	801298a <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
          frequency = LSI_VALUE;
 8011ea8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8011eac:	61fb      	str	r3, [r7, #28]
      break;
 8011eae:	f000 bd6c 	b.w	801298a <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011eb2:	4b9b      	ldr	r3, [pc, #620]	; (8012120 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011eba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011ebe:	f040 8566 	bne.w	801298e <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
        frequency = HSE_VALUE / 32U;
 8011ec2:	4b98      	ldr	r3, [pc, #608]	; (8012124 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8011ec4:	61fb      	str	r3, [r7, #28]
      break;
 8011ec6:	f000 bd62 	b.w	801298e <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8011eca:	4b95      	ldr	r3, [pc, #596]	; (8012120 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011ecc:	68db      	ldr	r3, [r3, #12]
 8011ece:	f003 0303 	and.w	r3, r3, #3
 8011ed2:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8011ed4:	697b      	ldr	r3, [r7, #20]
 8011ed6:	2b03      	cmp	r3, #3
 8011ed8:	d036      	beq.n	8011f48 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8011eda:	697b      	ldr	r3, [r7, #20]
 8011edc:	2b03      	cmp	r3, #3
 8011ede:	d840      	bhi.n	8011f62 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8011ee0:	697b      	ldr	r3, [r7, #20]
 8011ee2:	2b01      	cmp	r3, #1
 8011ee4:	d003      	beq.n	8011eee <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8011ee6:	697b      	ldr	r3, [r7, #20]
 8011ee8:	2b02      	cmp	r3, #2
 8011eea:	d020      	beq.n	8011f2e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8011eec:	e039      	b.n	8011f62 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8011eee:	4b8c      	ldr	r3, [pc, #560]	; (8012120 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	f003 0302 	and.w	r3, r3, #2
 8011ef6:	2b02      	cmp	r3, #2
 8011ef8:	d116      	bne.n	8011f28 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8011efa:	4b89      	ldr	r3, [pc, #548]	; (8012120 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	f003 0308 	and.w	r3, r3, #8
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d005      	beq.n	8011f12 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8011f06:	4b86      	ldr	r3, [pc, #536]	; (8012120 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	091b      	lsrs	r3, r3, #4
 8011f0c:	f003 030f 	and.w	r3, r3, #15
 8011f10:	e005      	b.n	8011f1e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8011f12:	4b83      	ldr	r3, [pc, #524]	; (8012120 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011f18:	0a1b      	lsrs	r3, r3, #8
 8011f1a:	f003 030f 	and.w	r3, r3, #15
 8011f1e:	4a82      	ldr	r2, [pc, #520]	; (8012128 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8011f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f24:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8011f26:	e01f      	b.n	8011f68 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8011f28:	2300      	movs	r3, #0
 8011f2a:	61bb      	str	r3, [r7, #24]
      break;
 8011f2c:	e01c      	b.n	8011f68 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011f2e:	4b7c      	ldr	r3, [pc, #496]	; (8012120 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011f3a:	d102      	bne.n	8011f42 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8011f3c:	4b7b      	ldr	r3, [pc, #492]	; (801212c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8011f3e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8011f40:	e012      	b.n	8011f68 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8011f42:	2300      	movs	r3, #0
 8011f44:	61bb      	str	r3, [r7, #24]
      break;
 8011f46:	e00f      	b.n	8011f68 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011f48:	4b75      	ldr	r3, [pc, #468]	; (8012120 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011f50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011f54:	d102      	bne.n	8011f5c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8011f56:	4b76      	ldr	r3, [pc, #472]	; (8012130 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8011f58:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8011f5a:	e005      	b.n	8011f68 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	61bb      	str	r3, [r7, #24]
      break;
 8011f60:	e002      	b.n	8011f68 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8011f62:	2300      	movs	r3, #0
 8011f64:	61bb      	str	r3, [r7, #24]
      break;
 8011f66:	bf00      	nop
    }

    switch(PeriphClk)
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011f6e:	f000 842a 	beq.w	80127c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011f78:	f200 850b 	bhi.w	8012992 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8011f82:	f000 80df 	beq.w	8012144 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8011f8c:	f200 8501 	bhi.w	8012992 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011f96:	f000 80d5 	beq.w	8012144 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011fa0:	f200 84f7 	bhi.w	8012992 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011faa:	f000 8377 	beq.w	801269c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011fb4:	f200 84ed 	bhi.w	8012992 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011fbe:	f000 84c3 	beq.w	8012948 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011fc8:	f200 84e3 	bhi.w	8012992 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011fd2:	f000 82e6 	beq.w	80125a2 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011fdc:	f200 84d9 	bhi.w	8012992 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011fe6:	f000 80ad 	beq.w	8012144 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011ff0:	f200 84cf 	bhi.w	8012992 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011ffa:	f000 809b 	beq.w	8012134 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012004:	f200 84c5 	bhi.w	8012992 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801200e:	d07f      	beq.n	8012110 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012016:	f200 84bc 	bhi.w	8012992 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012020:	f000 8448 	beq.w	80128b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801202a:	f200 84b2 	bhi.w	8012992 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012034:	f000 83f0 	beq.w	8012818 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801203e:	f200 84a8 	bhi.w	8012992 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012048:	f000 8391 	beq.w	801276e <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012052:	f200 849e 	bhi.w	8012992 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	2b80      	cmp	r3, #128	; 0x80
 801205a:	f000 835c 	beq.w	8012716 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	2b80      	cmp	r3, #128	; 0x80
 8012062:	f200 8496 	bhi.w	8012992 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	2b20      	cmp	r3, #32
 801206a:	d84b      	bhi.n	8012104 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	2b00      	cmp	r3, #0
 8012070:	f000 848f 	beq.w	8012992 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	3b01      	subs	r3, #1
 8012078:	2b1f      	cmp	r3, #31
 801207a:	f200 848a 	bhi.w	8012992 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 801207e:	a201      	add	r2, pc, #4	; (adr r2, 8012084 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 8012080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012084:	0801229b 	.word	0x0801229b
 8012088:	0801230b 	.word	0x0801230b
 801208c:	08012993 	.word	0x08012993
 8012090:	0801239f 	.word	0x0801239f
 8012094:	08012993 	.word	0x08012993
 8012098:	08012993 	.word	0x08012993
 801209c:	08012993 	.word	0x08012993
 80120a0:	08012427 	.word	0x08012427
 80120a4:	08012993 	.word	0x08012993
 80120a8:	08012993 	.word	0x08012993
 80120ac:	08012993 	.word	0x08012993
 80120b0:	08012993 	.word	0x08012993
 80120b4:	08012993 	.word	0x08012993
 80120b8:	08012993 	.word	0x08012993
 80120bc:	08012993 	.word	0x08012993
 80120c0:	0801249f 	.word	0x0801249f
 80120c4:	08012993 	.word	0x08012993
 80120c8:	08012993 	.word	0x08012993
 80120cc:	08012993 	.word	0x08012993
 80120d0:	08012993 	.word	0x08012993
 80120d4:	08012993 	.word	0x08012993
 80120d8:	08012993 	.word	0x08012993
 80120dc:	08012993 	.word	0x08012993
 80120e0:	08012993 	.word	0x08012993
 80120e4:	08012993 	.word	0x08012993
 80120e8:	08012993 	.word	0x08012993
 80120ec:	08012993 	.word	0x08012993
 80120f0:	08012993 	.word	0x08012993
 80120f4:	08012993 	.word	0x08012993
 80120f8:	08012993 	.word	0x08012993
 80120fc:	08012993 	.word	0x08012993
 8012100:	08012521 	.word	0x08012521
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	2b40      	cmp	r3, #64	; 0x40
 8012108:	f000 82d9 	beq.w	80126be <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 801210c:	f000 bc41 	b.w	8012992 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8012110:	69b9      	ldr	r1, [r7, #24]
 8012112:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012116:	f000 fe25 	bl	8012d64 <RCCEx_GetSAIxPeriphCLKFreq>
 801211a:	61f8      	str	r0, [r7, #28]
      break;
 801211c:	f000 bc3a 	b.w	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8012120:	40021000 	.word	0x40021000
 8012124:	0003d090 	.word	0x0003d090
 8012128:	0801b9cc 	.word	0x0801b9cc
 801212c:	00f42400 	.word	0x00f42400
 8012130:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8012134:	69b9      	ldr	r1, [r7, #24]
 8012136:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801213a:	f000 fe13 	bl	8012d64 <RCCEx_GetSAIxPeriphCLKFreq>
 801213e:	61f8      	str	r0, [r7, #28]
      break;
 8012140:	f000 bc28 	b.w	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8012144:	4ba6      	ldr	r3, [pc, #664]	; (80123e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8012146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801214a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 801214e:	613b      	str	r3, [r7, #16]
 8012150:	693b      	ldr	r3, [r7, #16]
 8012152:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8012156:	d015      	beq.n	8012184 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8012158:	693b      	ldr	r3, [r7, #16]
 801215a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 801215e:	f200 8092 	bhi.w	8012286 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8012162:	693b      	ldr	r3, [r7, #16]
 8012164:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012168:	d029      	beq.n	80121be <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012170:	f200 8089 	bhi.w	8012286 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8012174:	693b      	ldr	r3, [r7, #16]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d07b      	beq.n	8012272 <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 801217a:	693b      	ldr	r3, [r7, #16]
 801217c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8012180:	d04a      	beq.n	8012218 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 8012182:	e080      	b.n	8012286 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8012184:	4b96      	ldr	r3, [pc, #600]	; (80123e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	f003 0302 	and.w	r3, r3, #2
 801218c:	2b02      	cmp	r3, #2
 801218e:	d17c      	bne.n	801228a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8012190:	4b93      	ldr	r3, [pc, #588]	; (80123e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	f003 0308 	and.w	r3, r3, #8
 8012198:	2b00      	cmp	r3, #0
 801219a:	d005      	beq.n	80121a8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 801219c:	4b90      	ldr	r3, [pc, #576]	; (80123e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	091b      	lsrs	r3, r3, #4
 80121a2:	f003 030f 	and.w	r3, r3, #15
 80121a6:	e005      	b.n	80121b4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80121a8:	4b8d      	ldr	r3, [pc, #564]	; (80123e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80121aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80121ae:	0a1b      	lsrs	r3, r3, #8
 80121b0:	f003 030f 	and.w	r3, r3, #15
 80121b4:	4a8b      	ldr	r2, [pc, #556]	; (80123e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80121b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80121ba:	61fb      	str	r3, [r7, #28]
          break;
 80121bc:	e065      	b.n	801228a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80121be:	4b88      	ldr	r3, [pc, #544]	; (80123e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80121c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80121ca:	d160      	bne.n	801228e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80121cc:	4b84      	ldr	r3, [pc, #528]	; (80123e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80121ce:	68db      	ldr	r3, [r3, #12]
 80121d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80121d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80121d8:	d159      	bne.n	801228e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80121da:	4b81      	ldr	r3, [pc, #516]	; (80123e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80121dc:	68db      	ldr	r3, [r3, #12]
 80121de:	0a1b      	lsrs	r3, r3, #8
 80121e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80121e4:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80121e6:	69bb      	ldr	r3, [r7, #24]
 80121e8:	68fa      	ldr	r2, [r7, #12]
 80121ea:	fb03 f202 	mul.w	r2, r3, r2
 80121ee:	4b7c      	ldr	r3, [pc, #496]	; (80123e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80121f0:	68db      	ldr	r3, [r3, #12]
 80121f2:	091b      	lsrs	r3, r3, #4
 80121f4:	f003 0307 	and.w	r3, r3, #7
 80121f8:	3301      	adds	r3, #1
 80121fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80121fe:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8012200:	4b77      	ldr	r3, [pc, #476]	; (80123e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8012202:	68db      	ldr	r3, [r3, #12]
 8012204:	0d5b      	lsrs	r3, r3, #21
 8012206:	f003 0303 	and.w	r3, r3, #3
 801220a:	3301      	adds	r3, #1
 801220c:	005b      	lsls	r3, r3, #1
 801220e:	69ba      	ldr	r2, [r7, #24]
 8012210:	fbb2 f3f3 	udiv	r3, r2, r3
 8012214:	61fb      	str	r3, [r7, #28]
          break;
 8012216:	e03a      	b.n	801228e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8012218:	4b71      	ldr	r3, [pc, #452]	; (80123e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012220:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012224:	d135      	bne.n	8012292 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8012226:	4b6e      	ldr	r3, [pc, #440]	; (80123e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8012228:	691b      	ldr	r3, [r3, #16]
 801222a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801222e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012232:	d12e      	bne.n	8012292 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8012234:	4b6a      	ldr	r3, [pc, #424]	; (80123e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8012236:	691b      	ldr	r3, [r3, #16]
 8012238:	0a1b      	lsrs	r3, r3, #8
 801223a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801223e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8012240:	69bb      	ldr	r3, [r7, #24]
 8012242:	68fa      	ldr	r2, [r7, #12]
 8012244:	fb03 f202 	mul.w	r2, r3, r2
 8012248:	4b65      	ldr	r3, [pc, #404]	; (80123e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 801224a:	68db      	ldr	r3, [r3, #12]
 801224c:	091b      	lsrs	r3, r3, #4
 801224e:	f003 0307 	and.w	r3, r3, #7
 8012252:	3301      	adds	r3, #1
 8012254:	fbb2 f3f3 	udiv	r3, r2, r3
 8012258:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 801225a:	4b61      	ldr	r3, [pc, #388]	; (80123e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 801225c:	691b      	ldr	r3, [r3, #16]
 801225e:	0d5b      	lsrs	r3, r3, #21
 8012260:	f003 0303 	and.w	r3, r3, #3
 8012264:	3301      	adds	r3, #1
 8012266:	005b      	lsls	r3, r3, #1
 8012268:	69ba      	ldr	r2, [r7, #24]
 801226a:	fbb2 f3f3 	udiv	r3, r2, r3
 801226e:	61fb      	str	r3, [r7, #28]
          break;
 8012270:	e00f      	b.n	8012292 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8012272:	4b5b      	ldr	r3, [pc, #364]	; (80123e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8012274:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012278:	f003 0302 	and.w	r3, r3, #2
 801227c:	2b02      	cmp	r3, #2
 801227e:	d10a      	bne.n	8012296 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 8012280:	4b59      	ldr	r3, [pc, #356]	; (80123e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8012282:	61fb      	str	r3, [r7, #28]
          break;
 8012284:	e007      	b.n	8012296 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 8012286:	bf00      	nop
 8012288:	e384      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801228a:	bf00      	nop
 801228c:	e382      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801228e:	bf00      	nop
 8012290:	e380      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012292:	bf00      	nop
 8012294:	e37e      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012296:	bf00      	nop
        break;
 8012298:	e37c      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 801229a:	4b51      	ldr	r3, [pc, #324]	; (80123e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 801229c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80122a0:	f003 0303 	and.w	r3, r3, #3
 80122a4:	613b      	str	r3, [r7, #16]
 80122a6:	693b      	ldr	r3, [r7, #16]
 80122a8:	2b03      	cmp	r3, #3
 80122aa:	d828      	bhi.n	80122fe <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 80122ac:	a201      	add	r2, pc, #4	; (adr r2, 80122b4 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80122ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122b2:	bf00      	nop
 80122b4:	080122c5 	.word	0x080122c5
 80122b8:	080122cd 	.word	0x080122cd
 80122bc:	080122d5 	.word	0x080122d5
 80122c0:	080122e9 	.word	0x080122e9
          frequency = HAL_RCC_GetPCLK2Freq();
 80122c4:	f7ff fa46 	bl	8011754 <HAL_RCC_GetPCLK2Freq>
 80122c8:	61f8      	str	r0, [r7, #28]
          break;
 80122ca:	e01d      	b.n	8012308 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 80122cc:	f7ff f994 	bl	80115f8 <HAL_RCC_GetSysClockFreq>
 80122d0:	61f8      	str	r0, [r7, #28]
          break;
 80122d2:	e019      	b.n	8012308 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80122d4:	4b42      	ldr	r3, [pc, #264]	; (80123e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80122dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80122e0:	d10f      	bne.n	8012302 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 80122e2:	4b42      	ldr	r3, [pc, #264]	; (80123ec <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 80122e4:	61fb      	str	r3, [r7, #28]
          break;
 80122e6:	e00c      	b.n	8012302 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80122e8:	4b3d      	ldr	r3, [pc, #244]	; (80123e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80122ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80122ee:	f003 0302 	and.w	r3, r3, #2
 80122f2:	2b02      	cmp	r3, #2
 80122f4:	d107      	bne.n	8012306 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 80122f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80122fa:	61fb      	str	r3, [r7, #28]
          break;
 80122fc:	e003      	b.n	8012306 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 80122fe:	bf00      	nop
 8012300:	e348      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012302:	bf00      	nop
 8012304:	e346      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012306:	bf00      	nop
        break;
 8012308:	e344      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 801230a:	4b35      	ldr	r3, [pc, #212]	; (80123e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 801230c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012310:	f003 030c 	and.w	r3, r3, #12
 8012314:	613b      	str	r3, [r7, #16]
 8012316:	693b      	ldr	r3, [r7, #16]
 8012318:	2b0c      	cmp	r3, #12
 801231a:	d83a      	bhi.n	8012392 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 801231c:	a201      	add	r2, pc, #4	; (adr r2, 8012324 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 801231e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012322:	bf00      	nop
 8012324:	08012359 	.word	0x08012359
 8012328:	08012393 	.word	0x08012393
 801232c:	08012393 	.word	0x08012393
 8012330:	08012393 	.word	0x08012393
 8012334:	08012361 	.word	0x08012361
 8012338:	08012393 	.word	0x08012393
 801233c:	08012393 	.word	0x08012393
 8012340:	08012393 	.word	0x08012393
 8012344:	08012369 	.word	0x08012369
 8012348:	08012393 	.word	0x08012393
 801234c:	08012393 	.word	0x08012393
 8012350:	08012393 	.word	0x08012393
 8012354:	0801237d 	.word	0x0801237d
          frequency = HAL_RCC_GetPCLK1Freq();
 8012358:	f7ff f9e6 	bl	8011728 <HAL_RCC_GetPCLK1Freq>
 801235c:	61f8      	str	r0, [r7, #28]
          break;
 801235e:	e01d      	b.n	801239c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 8012360:	f7ff f94a 	bl	80115f8 <HAL_RCC_GetSysClockFreq>
 8012364:	61f8      	str	r0, [r7, #28]
          break;
 8012366:	e019      	b.n	801239c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8012368:	4b1d      	ldr	r3, [pc, #116]	; (80123e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012374:	d10f      	bne.n	8012396 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 8012376:	4b1d      	ldr	r3, [pc, #116]	; (80123ec <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8012378:	61fb      	str	r3, [r7, #28]
          break;
 801237a:	e00c      	b.n	8012396 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 801237c:	4b18      	ldr	r3, [pc, #96]	; (80123e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 801237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012382:	f003 0302 	and.w	r3, r3, #2
 8012386:	2b02      	cmp	r3, #2
 8012388:	d107      	bne.n	801239a <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 801238a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801238e:	61fb      	str	r3, [r7, #28]
          break;
 8012390:	e003      	b.n	801239a <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 8012392:	bf00      	nop
 8012394:	e2fe      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012396:	bf00      	nop
 8012398:	e2fc      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801239a:	bf00      	nop
        break;
 801239c:	e2fa      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 801239e:	4b10      	ldr	r3, [pc, #64]	; (80123e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80123a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80123a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80123a8:	613b      	str	r3, [r7, #16]
 80123aa:	693b      	ldr	r3, [r7, #16]
 80123ac:	2b30      	cmp	r3, #48	; 0x30
 80123ae:	d029      	beq.n	8012404 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80123b0:	693b      	ldr	r3, [r7, #16]
 80123b2:	2b30      	cmp	r3, #48	; 0x30
 80123b4:	d831      	bhi.n	801241a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 80123b6:	693b      	ldr	r3, [r7, #16]
 80123b8:	2b20      	cmp	r3, #32
 80123ba:	d019      	beq.n	80123f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 80123bc:	693b      	ldr	r3, [r7, #16]
 80123be:	2b20      	cmp	r3, #32
 80123c0:	d82b      	bhi.n	801241a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 80123c2:	693b      	ldr	r3, [r7, #16]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d003      	beq.n	80123d0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80123c8:	693b      	ldr	r3, [r7, #16]
 80123ca:	2b10      	cmp	r3, #16
 80123cc:	d004      	beq.n	80123d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 80123ce:	e024      	b.n	801241a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 80123d0:	f7ff f9aa 	bl	8011728 <HAL_RCC_GetPCLK1Freq>
 80123d4:	61f8      	str	r0, [r7, #28]
          break;
 80123d6:	e025      	b.n	8012424 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          frequency = HAL_RCC_GetSysClockFreq();
 80123d8:	f7ff f90e 	bl	80115f8 <HAL_RCC_GetSysClockFreq>
 80123dc:	61f8      	str	r0, [r7, #28]
          break;
 80123de:	e021      	b.n	8012424 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 80123e0:	40021000 	.word	0x40021000
 80123e4:	0801b9cc 	.word	0x0801b9cc
 80123e8:	02dc6c00 	.word	0x02dc6c00
 80123ec:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80123f0:	4b8f      	ldr	r3, [pc, #572]	; (8012630 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80123f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80123fc:	d10f      	bne.n	801241e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
            frequency = HSI_VALUE;
 80123fe:	4b8d      	ldr	r3, [pc, #564]	; (8012634 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8012400:	61fb      	str	r3, [r7, #28]
          break;
 8012402:	e00c      	b.n	801241e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8012404:	4b8a      	ldr	r3, [pc, #552]	; (8012630 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8012406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801240a:	f003 0302 	and.w	r3, r3, #2
 801240e:	2b02      	cmp	r3, #2
 8012410:	d107      	bne.n	8012422 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
            frequency = LSE_VALUE;
 8012412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012416:	61fb      	str	r3, [r7, #28]
          break;
 8012418:	e003      	b.n	8012422 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          break;
 801241a:	bf00      	nop
 801241c:	e2ba      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801241e:	bf00      	nop
 8012420:	e2b8      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012422:	bf00      	nop
        break;
 8012424:	e2b6      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8012426:	4b82      	ldr	r3, [pc, #520]	; (8012630 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8012428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801242c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012430:	613b      	str	r3, [r7, #16]
 8012432:	693b      	ldr	r3, [r7, #16]
 8012434:	2bc0      	cmp	r3, #192	; 0xc0
 8012436:	d021      	beq.n	801247c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8012438:	693b      	ldr	r3, [r7, #16]
 801243a:	2bc0      	cmp	r3, #192	; 0xc0
 801243c:	d829      	bhi.n	8012492 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 801243e:	693b      	ldr	r3, [r7, #16]
 8012440:	2b80      	cmp	r3, #128	; 0x80
 8012442:	d011      	beq.n	8012468 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8012444:	693b      	ldr	r3, [r7, #16]
 8012446:	2b80      	cmp	r3, #128	; 0x80
 8012448:	d823      	bhi.n	8012492 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 801244a:	693b      	ldr	r3, [r7, #16]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d003      	beq.n	8012458 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 8012450:	693b      	ldr	r3, [r7, #16]
 8012452:	2b40      	cmp	r3, #64	; 0x40
 8012454:	d004      	beq.n	8012460 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          break;
 8012456:	e01c      	b.n	8012492 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8012458:	f7ff f966 	bl	8011728 <HAL_RCC_GetPCLK1Freq>
 801245c:	61f8      	str	r0, [r7, #28]
          break;
 801245e:	e01d      	b.n	801249c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HAL_RCC_GetSysClockFreq();
 8012460:	f7ff f8ca 	bl	80115f8 <HAL_RCC_GetSysClockFreq>
 8012464:	61f8      	str	r0, [r7, #28]
          break;
 8012466:	e019      	b.n	801249c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8012468:	4b71      	ldr	r3, [pc, #452]	; (8012630 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012474:	d10f      	bne.n	8012496 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = HSI_VALUE;
 8012476:	4b6f      	ldr	r3, [pc, #444]	; (8012634 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8012478:	61fb      	str	r3, [r7, #28]
          break;
 801247a:	e00c      	b.n	8012496 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 801247c:	4b6c      	ldr	r3, [pc, #432]	; (8012630 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 801247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012482:	f003 0302 	and.w	r3, r3, #2
 8012486:	2b02      	cmp	r3, #2
 8012488:	d107      	bne.n	801249a <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            frequency = LSE_VALUE;
 801248a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801248e:	61fb      	str	r3, [r7, #28]
          break;
 8012490:	e003      	b.n	801249a <HAL_RCCEx_GetPeriphCLKFreq+0x662>
          break;
 8012492:	bf00      	nop
 8012494:	e27e      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012496:	bf00      	nop
 8012498:	e27c      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801249a:	bf00      	nop
        break;
 801249c:	e27a      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 801249e:	4b64      	ldr	r3, [pc, #400]	; (8012630 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80124a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80124a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80124a8:	613b      	str	r3, [r7, #16]
 80124aa:	693b      	ldr	r3, [r7, #16]
 80124ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80124b0:	d025      	beq.n	80124fe <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 80124b2:	693b      	ldr	r3, [r7, #16]
 80124b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80124b8:	d82c      	bhi.n	8012514 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 80124ba:	693b      	ldr	r3, [r7, #16]
 80124bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80124c0:	d013      	beq.n	80124ea <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 80124c2:	693b      	ldr	r3, [r7, #16]
 80124c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80124c8:	d824      	bhi.n	8012514 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 80124ca:	693b      	ldr	r3, [r7, #16]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d004      	beq.n	80124da <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 80124d0:	693b      	ldr	r3, [r7, #16]
 80124d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80124d6:	d004      	beq.n	80124e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          break;
 80124d8:	e01c      	b.n	8012514 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 80124da:	f7ff f925 	bl	8011728 <HAL_RCC_GetPCLK1Freq>
 80124de:	61f8      	str	r0, [r7, #28]
          break;
 80124e0:	e01d      	b.n	801251e <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetSysClockFreq();
 80124e2:	f7ff f889 	bl	80115f8 <HAL_RCC_GetSysClockFreq>
 80124e6:	61f8      	str	r0, [r7, #28]
          break;
 80124e8:	e019      	b.n	801251e <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80124ea:	4b51      	ldr	r3, [pc, #324]	; (8012630 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80124f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80124f6:	d10f      	bne.n	8012518 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            frequency = HSI_VALUE;
 80124f8:	4b4e      	ldr	r3, [pc, #312]	; (8012634 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 80124fa:	61fb      	str	r3, [r7, #28]
          break;
 80124fc:	e00c      	b.n	8012518 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80124fe:	4b4c      	ldr	r3, [pc, #304]	; (8012630 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8012500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012504:	f003 0302 	and.w	r3, r3, #2
 8012508:	2b02      	cmp	r3, #2
 801250a:	d107      	bne.n	801251c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
            frequency = LSE_VALUE;
 801250c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012510:	61fb      	str	r3, [r7, #28]
          break;
 8012512:	e003      	b.n	801251c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          break;
 8012514:	bf00      	nop
 8012516:	e23d      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012518:	bf00      	nop
 801251a:	e23b      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801251c:	bf00      	nop
        break;
 801251e:	e239      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8012520:	4b43      	ldr	r3, [pc, #268]	; (8012630 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8012522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012526:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801252a:	613b      	str	r3, [r7, #16]
 801252c:	693b      	ldr	r3, [r7, #16]
 801252e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012532:	d025      	beq.n	8012580 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801253a:	d82c      	bhi.n	8012596 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 801253c:	693b      	ldr	r3, [r7, #16]
 801253e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012542:	d013      	beq.n	801256c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8012544:	693b      	ldr	r3, [r7, #16]
 8012546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801254a:	d824      	bhi.n	8012596 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 801254c:	693b      	ldr	r3, [r7, #16]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d004      	beq.n	801255c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8012552:	693b      	ldr	r3, [r7, #16]
 8012554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012558:	d004      	beq.n	8012564 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
          break;
 801255a:	e01c      	b.n	8012596 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = HAL_RCC_GetPCLK1Freq();
 801255c:	f7ff f8e4 	bl	8011728 <HAL_RCC_GetPCLK1Freq>
 8012560:	61f8      	str	r0, [r7, #28]
          break;
 8012562:	e01d      	b.n	80125a0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          frequency = HAL_RCC_GetSysClockFreq();
 8012564:	f7ff f848 	bl	80115f8 <HAL_RCC_GetSysClockFreq>
 8012568:	61f8      	str	r0, [r7, #28]
          break;
 801256a:	e019      	b.n	80125a0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801256c:	4b30      	ldr	r3, [pc, #192]	; (8012630 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012578:	d10f      	bne.n	801259a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
            frequency = HSI_VALUE;
 801257a:	4b2e      	ldr	r3, [pc, #184]	; (8012634 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 801257c:	61fb      	str	r3, [r7, #28]
          break;
 801257e:	e00c      	b.n	801259a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8012580:	4b2b      	ldr	r3, [pc, #172]	; (8012630 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8012582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012586:	f003 0302 	and.w	r3, r3, #2
 801258a:	2b02      	cmp	r3, #2
 801258c:	d107      	bne.n	801259e <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            frequency = LSE_VALUE;
 801258e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012592:	61fb      	str	r3, [r7, #28]
          break;
 8012594:	e003      	b.n	801259e <HAL_RCCEx_GetPeriphCLKFreq+0x766>
          break;
 8012596:	bf00      	nop
 8012598:	e1fc      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801259a:	bf00      	nop
 801259c:	e1fa      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801259e:	bf00      	nop
        break;
 80125a0:	e1f8      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80125a2:	4b23      	ldr	r3, [pc, #140]	; (8012630 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80125a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80125a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80125ac:	613b      	str	r3, [r7, #16]
 80125ae:	693b      	ldr	r3, [r7, #16]
 80125b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80125b4:	d00c      	beq.n	80125d0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 80125b6:	693b      	ldr	r3, [r7, #16]
 80125b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80125bc:	d868      	bhi.n	8012690 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 80125be:	693b      	ldr	r3, [r7, #16]
 80125c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80125c4:	d008      	beq.n	80125d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80125c6:	693b      	ldr	r3, [r7, #16]
 80125c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80125cc:	d034      	beq.n	8012638 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
          break;
 80125ce:	e05f      	b.n	8012690 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          frequency = HAL_RCC_GetSysClockFreq();
 80125d0:	f7ff f812 	bl	80115f8 <HAL_RCC_GetSysClockFreq>
 80125d4:	61f8      	str	r0, [r7, #28]
          break;
 80125d6:	e060      	b.n	801269a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80125d8:	4b15      	ldr	r3, [pc, #84]	; (8012630 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80125e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80125e4:	d156      	bne.n	8012694 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 80125e6:	4b12      	ldr	r3, [pc, #72]	; (8012630 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80125e8:	691b      	ldr	r3, [r3, #16]
 80125ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d050      	beq.n	8012694 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80125f2:	4b0f      	ldr	r3, [pc, #60]	; (8012630 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80125f4:	691b      	ldr	r3, [r3, #16]
 80125f6:	0a1b      	lsrs	r3, r3, #8
 80125f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80125fc:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80125fe:	69bb      	ldr	r3, [r7, #24]
 8012600:	68fa      	ldr	r2, [r7, #12]
 8012602:	fb03 f202 	mul.w	r2, r3, r2
 8012606:	4b0a      	ldr	r3, [pc, #40]	; (8012630 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8012608:	68db      	ldr	r3, [r3, #12]
 801260a:	091b      	lsrs	r3, r3, #4
 801260c:	f003 0307 	and.w	r3, r3, #7
 8012610:	3301      	adds	r3, #1
 8012612:	fbb2 f3f3 	udiv	r3, r2, r3
 8012616:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8012618:	4b05      	ldr	r3, [pc, #20]	; (8012630 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 801261a:	691b      	ldr	r3, [r3, #16]
 801261c:	0e5b      	lsrs	r3, r3, #25
 801261e:	f003 0303 	and.w	r3, r3, #3
 8012622:	3301      	adds	r3, #1
 8012624:	005b      	lsls	r3, r3, #1
 8012626:	69ba      	ldr	r2, [r7, #24]
 8012628:	fbb2 f3f3 	udiv	r3, r2, r3
 801262c:	61fb      	str	r3, [r7, #28]
          break;
 801262e:	e031      	b.n	8012694 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8012630:	40021000 	.word	0x40021000
 8012634:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8012638:	4b9c      	ldr	r3, [pc, #624]	; (80128ac <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012644:	d128      	bne.n	8012698 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 8012646:	4b99      	ldr	r3, [pc, #612]	; (80128ac <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8012648:	695b      	ldr	r3, [r3, #20]
 801264a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801264e:	2b00      	cmp	r3, #0
 8012650:	d022      	beq.n	8012698 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8012652:	4b96      	ldr	r3, [pc, #600]	; (80128ac <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8012654:	695b      	ldr	r3, [r3, #20]
 8012656:	0a1b      	lsrs	r3, r3, #8
 8012658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801265c:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 801265e:	69bb      	ldr	r3, [r7, #24]
 8012660:	68fa      	ldr	r2, [r7, #12]
 8012662:	fb03 f202 	mul.w	r2, r3, r2
 8012666:	4b91      	ldr	r3, [pc, #580]	; (80128ac <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8012668:	68db      	ldr	r3, [r3, #12]
 801266a:	091b      	lsrs	r3, r3, #4
 801266c:	f003 0307 	and.w	r3, r3, #7
 8012670:	3301      	adds	r3, #1
 8012672:	fbb2 f3f3 	udiv	r3, r2, r3
 8012676:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8012678:	4b8c      	ldr	r3, [pc, #560]	; (80128ac <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 801267a:	695b      	ldr	r3, [r3, #20]
 801267c:	0e5b      	lsrs	r3, r3, #25
 801267e:	f003 0303 	and.w	r3, r3, #3
 8012682:	3301      	adds	r3, #1
 8012684:	005b      	lsls	r3, r3, #1
 8012686:	69ba      	ldr	r2, [r7, #24]
 8012688:	fbb2 f3f3 	udiv	r3, r2, r3
 801268c:	61fb      	str	r3, [r7, #28]
          break;
 801268e:	e003      	b.n	8012698 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 8012690:	bf00      	nop
 8012692:	e17f      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012694:	bf00      	nop
 8012696:	e17d      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012698:	bf00      	nop
        break;
 801269a:	e17b      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 801269c:	4b83      	ldr	r3, [pc, #524]	; (80128ac <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 801269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80126a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80126a6:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80126a8:	693b      	ldr	r3, [r7, #16]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d103      	bne.n	80126b6 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          frequency = HAL_RCC_GetPCLK2Freq();
 80126ae:	f7ff f851 	bl	8011754 <HAL_RCC_GetPCLK2Freq>
 80126b2:	61f8      	str	r0, [r7, #28]
        break;
 80126b4:	e16e      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          frequency = HAL_RCC_GetSysClockFreq();
 80126b6:	f7fe ff9f 	bl	80115f8 <HAL_RCC_GetSysClockFreq>
 80126ba:	61f8      	str	r0, [r7, #28]
        break;
 80126bc:	e16a      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80126be:	4b7b      	ldr	r3, [pc, #492]	; (80128ac <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80126c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80126c4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80126c8:	613b      	str	r3, [r7, #16]
 80126ca:	693b      	ldr	r3, [r7, #16]
 80126cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80126d0:	d013      	beq.n	80126fa <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 80126d2:	693b      	ldr	r3, [r7, #16]
 80126d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80126d8:	d819      	bhi.n	801270e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80126da:	693b      	ldr	r3, [r7, #16]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d004      	beq.n	80126ea <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80126e0:	693b      	ldr	r3, [r7, #16]
 80126e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80126e6:	d004      	beq.n	80126f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 80126e8:	e011      	b.n	801270e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
          frequency = HAL_RCC_GetPCLK1Freq();
 80126ea:	f7ff f81d 	bl	8011728 <HAL_RCC_GetPCLK1Freq>
 80126ee:	61f8      	str	r0, [r7, #28]
          break;
 80126f0:	e010      	b.n	8012714 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          frequency = HAL_RCC_GetSysClockFreq();
 80126f2:	f7fe ff81 	bl	80115f8 <HAL_RCC_GetSysClockFreq>
 80126f6:	61f8      	str	r0, [r7, #28]
          break;
 80126f8:	e00c      	b.n	8012714 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80126fa:	4b6c      	ldr	r3, [pc, #432]	; (80128ac <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012706:	d104      	bne.n	8012712 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
            frequency = HSI_VALUE;
 8012708:	4b69      	ldr	r3, [pc, #420]	; (80128b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 801270a:	61fb      	str	r3, [r7, #28]
          break;
 801270c:	e001      	b.n	8012712 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
 801270e:	bf00      	nop
 8012710:	e140      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012712:	bf00      	nop
        break;
 8012714:	e13e      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8012716:	4b65      	ldr	r3, [pc, #404]	; (80128ac <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8012718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801271c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012720:	613b      	str	r3, [r7, #16]
 8012722:	693b      	ldr	r3, [r7, #16]
 8012724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012728:	d013      	beq.n	8012752 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 801272a:	693b      	ldr	r3, [r7, #16]
 801272c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012730:	d819      	bhi.n	8012766 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8012732:	693b      	ldr	r3, [r7, #16]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d004      	beq.n	8012742 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 8012738:	693b      	ldr	r3, [r7, #16]
 801273a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801273e:	d004      	beq.n	801274a <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 8012740:	e011      	b.n	8012766 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8012742:	f7fe fff1 	bl	8011728 <HAL_RCC_GetPCLK1Freq>
 8012746:	61f8      	str	r0, [r7, #28]
          break;
 8012748:	e010      	b.n	801276c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetSysClockFreq();
 801274a:	f7fe ff55 	bl	80115f8 <HAL_RCC_GetSysClockFreq>
 801274e:	61f8      	str	r0, [r7, #28]
          break;
 8012750:	e00c      	b.n	801276c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8012752:	4b56      	ldr	r3, [pc, #344]	; (80128ac <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801275a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801275e:	d104      	bne.n	801276a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = HSI_VALUE;
 8012760:	4b53      	ldr	r3, [pc, #332]	; (80128b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8012762:	61fb      	str	r3, [r7, #28]
          break;
 8012764:	e001      	b.n	801276a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 8012766:	bf00      	nop
 8012768:	e114      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801276a:	bf00      	nop
        break;
 801276c:	e112      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 801276e:	4b4f      	ldr	r3, [pc, #316]	; (80128ac <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8012770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012774:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8012778:	613b      	str	r3, [r7, #16]
 801277a:	693b      	ldr	r3, [r7, #16]
 801277c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012780:	d013      	beq.n	80127aa <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 8012782:	693b      	ldr	r3, [r7, #16]
 8012784:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012788:	d819      	bhi.n	80127be <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 801278a:	693b      	ldr	r3, [r7, #16]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d004      	beq.n	801279a <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 8012790:	693b      	ldr	r3, [r7, #16]
 8012792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012796:	d004      	beq.n	80127a2 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          break;
 8012798:	e011      	b.n	80127be <HAL_RCCEx_GetPeriphCLKFreq+0x986>
          frequency = HAL_RCC_GetPCLK1Freq();
 801279a:	f7fe ffc5 	bl	8011728 <HAL_RCC_GetPCLK1Freq>
 801279e:	61f8      	str	r0, [r7, #28]
          break;
 80127a0:	e010      	b.n	80127c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = HAL_RCC_GetSysClockFreq();
 80127a2:	f7fe ff29 	bl	80115f8 <HAL_RCC_GetSysClockFreq>
 80127a6:	61f8      	str	r0, [r7, #28]
          break;
 80127a8:	e00c      	b.n	80127c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80127aa:	4b40      	ldr	r3, [pc, #256]	; (80128ac <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80127b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80127b6:	d104      	bne.n	80127c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
            frequency = HSI_VALUE;
 80127b8:	4b3d      	ldr	r3, [pc, #244]	; (80128b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 80127ba:	61fb      	str	r3, [r7, #28]
          break;
 80127bc:	e001      	b.n	80127c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
 80127be:	bf00      	nop
 80127c0:	e0e8      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80127c2:	bf00      	nop
        break;
 80127c4:	e0e6      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80127c6:	4b39      	ldr	r3, [pc, #228]	; (80128ac <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80127c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80127cc:	f003 0303 	and.w	r3, r3, #3
 80127d0:	613b      	str	r3, [r7, #16]
 80127d2:	693b      	ldr	r3, [r7, #16]
 80127d4:	2b02      	cmp	r3, #2
 80127d6:	d011      	beq.n	80127fc <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 80127d8:	693b      	ldr	r3, [r7, #16]
 80127da:	2b02      	cmp	r3, #2
 80127dc:	d818      	bhi.n	8012810 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 80127de:	693b      	ldr	r3, [r7, #16]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d003      	beq.n	80127ec <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80127e4:	693b      	ldr	r3, [r7, #16]
 80127e6:	2b01      	cmp	r3, #1
 80127e8:	d004      	beq.n	80127f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          break;
 80127ea:	e011      	b.n	8012810 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80127ec:	f7fe ff9c 	bl	8011728 <HAL_RCC_GetPCLK1Freq>
 80127f0:	61f8      	str	r0, [r7, #28]
          break;
 80127f2:	e010      	b.n	8012816 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          frequency = HAL_RCC_GetSysClockFreq();
 80127f4:	f7fe ff00 	bl	80115f8 <HAL_RCC_GetSysClockFreq>
 80127f8:	61f8      	str	r0, [r7, #28]
          break;
 80127fa:	e00c      	b.n	8012816 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80127fc:	4b2b      	ldr	r3, [pc, #172]	; (80128ac <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012808:	d104      	bne.n	8012814 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = HSI_VALUE;
 801280a:	4b29      	ldr	r3, [pc, #164]	; (80128b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 801280c:	61fb      	str	r3, [r7, #28]
          break;
 801280e:	e001      	b.n	8012814 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 8012810:	bf00      	nop
 8012812:	e0bf      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012814:	bf00      	nop
        break;
 8012816:	e0bd      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8012818:	4b24      	ldr	r3, [pc, #144]	; (80128ac <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 801281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801281e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8012822:	613b      	str	r3, [r7, #16]
 8012824:	693b      	ldr	r3, [r7, #16]
 8012826:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 801282a:	d02c      	beq.n	8012886 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 801282c:	693b      	ldr	r3, [r7, #16]
 801282e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8012832:	d833      	bhi.n	801289c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8012834:	693b      	ldr	r3, [r7, #16]
 8012836:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 801283a:	d01a      	beq.n	8012872 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 801283c:	693b      	ldr	r3, [r7, #16]
 801283e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8012842:	d82b      	bhi.n	801289c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8012844:	693b      	ldr	r3, [r7, #16]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d004      	beq.n	8012854 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 801284a:	693b      	ldr	r3, [r7, #16]
 801284c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012850:	d004      	beq.n	801285c <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 8012852:	e023      	b.n	801289c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8012854:	f7fe ff68 	bl	8011728 <HAL_RCC_GetPCLK1Freq>
 8012858:	61f8      	str	r0, [r7, #28]
          break;
 801285a:	e026      	b.n	80128aa <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 801285c:	4b13      	ldr	r3, [pc, #76]	; (80128ac <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 801285e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012862:	f003 0302 	and.w	r3, r3, #2
 8012866:	2b02      	cmp	r3, #2
 8012868:	d11a      	bne.n	80128a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 801286a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 801286e:	61fb      	str	r3, [r7, #28]
          break;
 8012870:	e016      	b.n	80128a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8012872:	4b0e      	ldr	r3, [pc, #56]	; (80128ac <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801287a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801287e:	d111      	bne.n	80128a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 8012880:	4b0b      	ldr	r3, [pc, #44]	; (80128b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8012882:	61fb      	str	r3, [r7, #28]
          break;
 8012884:	e00e      	b.n	80128a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8012886:	4b09      	ldr	r3, [pc, #36]	; (80128ac <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8012888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801288c:	f003 0302 	and.w	r3, r3, #2
 8012890:	2b02      	cmp	r3, #2
 8012892:	d109      	bne.n	80128a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 8012894:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012898:	61fb      	str	r3, [r7, #28]
          break;
 801289a:	e005      	b.n	80128a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 801289c:	bf00      	nop
 801289e:	e079      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80128a0:	bf00      	nop
 80128a2:	e077      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80128a4:	bf00      	nop
 80128a6:	e075      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80128a8:	bf00      	nop
        break;
 80128aa:	e073      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 80128ac:	40021000 	.word	0x40021000
 80128b0:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80128b4:	4b3a      	ldr	r3, [pc, #232]	; (80129a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80128b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80128ba:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80128be:	613b      	str	r3, [r7, #16]
 80128c0:	693b      	ldr	r3, [r7, #16]
 80128c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80128c6:	d02c      	beq.n	8012922 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 80128c8:	693b      	ldr	r3, [r7, #16]
 80128ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80128ce:	d833      	bhi.n	8012938 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 80128d0:	693b      	ldr	r3, [r7, #16]
 80128d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80128d6:	d01a      	beq.n	801290e <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 80128d8:	693b      	ldr	r3, [r7, #16]
 80128da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80128de:	d82b      	bhi.n	8012938 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 80128e0:	693b      	ldr	r3, [r7, #16]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d004      	beq.n	80128f0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 80128e6:	693b      	ldr	r3, [r7, #16]
 80128e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80128ec:	d004      	beq.n	80128f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80128ee:	e023      	b.n	8012938 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = HAL_RCC_GetPCLK1Freq();
 80128f0:	f7fe ff1a 	bl	8011728 <HAL_RCC_GetPCLK1Freq>
 80128f4:	61f8      	str	r0, [r7, #28]
          break;
 80128f6:	e026      	b.n	8012946 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80128f8:	4b29      	ldr	r3, [pc, #164]	; (80129a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80128fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80128fe:	f003 0302 	and.w	r3, r3, #2
 8012902:	2b02      	cmp	r3, #2
 8012904:	d11a      	bne.n	801293c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
              frequency = LSI_VALUE;
 8012906:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 801290a:	61fb      	str	r3, [r7, #28]
          break;
 801290c:	e016      	b.n	801293c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801290e:	4b24      	ldr	r3, [pc, #144]	; (80129a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801291a:	d111      	bne.n	8012940 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
            frequency = HSI_VALUE;
 801291c:	4b21      	ldr	r3, [pc, #132]	; (80129a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 801291e:	61fb      	str	r3, [r7, #28]
          break;
 8012920:	e00e      	b.n	8012940 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8012922:	4b1f      	ldr	r3, [pc, #124]	; (80129a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8012924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012928:	f003 0302 	and.w	r3, r3, #2
 801292c:	2b02      	cmp	r3, #2
 801292e:	d109      	bne.n	8012944 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = LSE_VALUE;
 8012930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012934:	61fb      	str	r3, [r7, #28]
          break;
 8012936:	e005      	b.n	8012944 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8012938:	bf00      	nop
 801293a:	e02b      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801293c:	bf00      	nop
 801293e:	e029      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012940:	bf00      	nop
 8012942:	e027      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012944:	bf00      	nop
        break;
 8012946:	e025      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8012948:	4b15      	ldr	r3, [pc, #84]	; (80129a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 801294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801294e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012952:	613b      	str	r3, [r7, #16]
 8012954:	693b      	ldr	r3, [r7, #16]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d004      	beq.n	8012964 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 801295a:	693b      	ldr	r3, [r7, #16]
 801295c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012960:	d004      	beq.n	801296c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 8012962:	e00d      	b.n	8012980 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          frequency = HAL_RCC_GetPCLK1Freq();
 8012964:	f7fe fee0 	bl	8011728 <HAL_RCC_GetPCLK1Freq>
 8012968:	61f8      	str	r0, [r7, #28]
          break;
 801296a:	e009      	b.n	8012980 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801296c:	4b0c      	ldr	r3, [pc, #48]	; (80129a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012978:	d101      	bne.n	801297e <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
            frequency = HSI_VALUE;
 801297a:	4b0a      	ldr	r3, [pc, #40]	; (80129a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 801297c:	61fb      	str	r3, [r7, #28]
          break;
 801297e:	bf00      	nop
        break;
 8012980:	e008      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8012982:	bf00      	nop
 8012984:	e006      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8012986:	bf00      	nop
 8012988:	e004      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 801298a:	bf00      	nop
 801298c:	e002      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 801298e:	bf00      	nop
 8012990:	e000      	b.n	8012994 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8012992:	bf00      	nop
    }
  }

  return(frequency);
 8012994:	69fb      	ldr	r3, [r7, #28]
}
 8012996:	4618      	mov	r0, r3
 8012998:	3720      	adds	r7, #32
 801299a:	46bd      	mov	sp, r7
 801299c:	bd80      	pop	{r7, pc}
 801299e:	bf00      	nop
 80129a0:	40021000 	.word	0x40021000
 80129a4:	00f42400 	.word	0x00f42400

080129a8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80129a8:	b480      	push	{r7}
 80129aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80129ac:	4b05      	ldr	r3, [pc, #20]	; (80129c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	4a04      	ldr	r2, [pc, #16]	; (80129c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80129b2:	f043 0304 	orr.w	r3, r3, #4
 80129b6:	6013      	str	r3, [r2, #0]
}
 80129b8:	bf00      	nop
 80129ba:	46bd      	mov	sp, r7
 80129bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c0:	4770      	bx	lr
 80129c2:	bf00      	nop
 80129c4:	40021000 	.word	0x40021000

080129c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80129c8:	b580      	push	{r7, lr}
 80129ca:	b084      	sub	sp, #16
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
 80129d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80129d2:	2300      	movs	r3, #0
 80129d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80129d6:	4b74      	ldr	r3, [pc, #464]	; (8012ba8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80129d8:	68db      	ldr	r3, [r3, #12]
 80129da:	f003 0303 	and.w	r3, r3, #3
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d018      	beq.n	8012a14 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80129e2:	4b71      	ldr	r3, [pc, #452]	; (8012ba8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80129e4:	68db      	ldr	r3, [r3, #12]
 80129e6:	f003 0203 	and.w	r2, r3, #3
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	429a      	cmp	r2, r3
 80129f0:	d10d      	bne.n	8012a0e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	681b      	ldr	r3, [r3, #0]
       ||
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d009      	beq.n	8012a0e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80129fa:	4b6b      	ldr	r3, [pc, #428]	; (8012ba8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80129fc:	68db      	ldr	r3, [r3, #12]
 80129fe:	091b      	lsrs	r3, r3, #4
 8012a00:	f003 0307 	and.w	r3, r3, #7
 8012a04:	1c5a      	adds	r2, r3, #1
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	685b      	ldr	r3, [r3, #4]
       ||
 8012a0a:	429a      	cmp	r2, r3
 8012a0c:	d047      	beq.n	8012a9e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8012a0e:	2301      	movs	r3, #1
 8012a10:	73fb      	strb	r3, [r7, #15]
 8012a12:	e044      	b.n	8012a9e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	2b03      	cmp	r3, #3
 8012a1a:	d018      	beq.n	8012a4e <RCCEx_PLLSAI1_Config+0x86>
 8012a1c:	2b03      	cmp	r3, #3
 8012a1e:	d825      	bhi.n	8012a6c <RCCEx_PLLSAI1_Config+0xa4>
 8012a20:	2b01      	cmp	r3, #1
 8012a22:	d002      	beq.n	8012a2a <RCCEx_PLLSAI1_Config+0x62>
 8012a24:	2b02      	cmp	r3, #2
 8012a26:	d009      	beq.n	8012a3c <RCCEx_PLLSAI1_Config+0x74>
 8012a28:	e020      	b.n	8012a6c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8012a2a:	4b5f      	ldr	r3, [pc, #380]	; (8012ba8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	f003 0302 	and.w	r3, r3, #2
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d11d      	bne.n	8012a72 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8012a36:	2301      	movs	r3, #1
 8012a38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012a3a:	e01a      	b.n	8012a72 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8012a3c:	4b5a      	ldr	r3, [pc, #360]	; (8012ba8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d116      	bne.n	8012a76 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8012a48:	2301      	movs	r3, #1
 8012a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012a4c:	e013      	b.n	8012a76 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8012a4e:	4b56      	ldr	r3, [pc, #344]	; (8012ba8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d10f      	bne.n	8012a7a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8012a5a:	4b53      	ldr	r3, [pc, #332]	; (8012ba8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d109      	bne.n	8012a7a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8012a66:	2301      	movs	r3, #1
 8012a68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012a6a:	e006      	b.n	8012a7a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8012a6c:	2301      	movs	r3, #1
 8012a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8012a70:	e004      	b.n	8012a7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8012a72:	bf00      	nop
 8012a74:	e002      	b.n	8012a7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8012a76:	bf00      	nop
 8012a78:	e000      	b.n	8012a7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8012a7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8012a7c:	7bfb      	ldrb	r3, [r7, #15]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d10d      	bne.n	8012a9e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8012a82:	4b49      	ldr	r3, [pc, #292]	; (8012ba8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012a84:	68db      	ldr	r3, [r3, #12]
 8012a86:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	6819      	ldr	r1, [r3, #0]
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	685b      	ldr	r3, [r3, #4]
 8012a92:	3b01      	subs	r3, #1
 8012a94:	011b      	lsls	r3, r3, #4
 8012a96:	430b      	orrs	r3, r1
 8012a98:	4943      	ldr	r1, [pc, #268]	; (8012ba8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012a9a:	4313      	orrs	r3, r2
 8012a9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8012a9e:	7bfb      	ldrb	r3, [r7, #15]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d17c      	bne.n	8012b9e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8012aa4:	4b40      	ldr	r3, [pc, #256]	; (8012ba8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	4a3f      	ldr	r2, [pc, #252]	; (8012ba8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012aaa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012aae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012ab0:	f7f9 fb1c 	bl	800c0ec <HAL_GetTick>
 8012ab4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8012ab6:	e009      	b.n	8012acc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8012ab8:	f7f9 fb18 	bl	800c0ec <HAL_GetTick>
 8012abc:	4602      	mov	r2, r0
 8012abe:	68bb      	ldr	r3, [r7, #8]
 8012ac0:	1ad3      	subs	r3, r2, r3
 8012ac2:	2b02      	cmp	r3, #2
 8012ac4:	d902      	bls.n	8012acc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8012ac6:	2303      	movs	r3, #3
 8012ac8:	73fb      	strb	r3, [r7, #15]
        break;
 8012aca:	e005      	b.n	8012ad8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8012acc:	4b36      	ldr	r3, [pc, #216]	; (8012ba8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d1ef      	bne.n	8012ab8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8012ad8:	7bfb      	ldrb	r3, [r7, #15]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d15f      	bne.n	8012b9e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8012ade:	683b      	ldr	r3, [r7, #0]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d110      	bne.n	8012b06 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8012ae4:	4b30      	ldr	r3, [pc, #192]	; (8012ba8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012ae6:	691b      	ldr	r3, [r3, #16]
 8012ae8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8012aec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8012af0:	687a      	ldr	r2, [r7, #4]
 8012af2:	6892      	ldr	r2, [r2, #8]
 8012af4:	0211      	lsls	r1, r2, #8
 8012af6:	687a      	ldr	r2, [r7, #4]
 8012af8:	68d2      	ldr	r2, [r2, #12]
 8012afa:	06d2      	lsls	r2, r2, #27
 8012afc:	430a      	orrs	r2, r1
 8012afe:	492a      	ldr	r1, [pc, #168]	; (8012ba8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012b00:	4313      	orrs	r3, r2
 8012b02:	610b      	str	r3, [r1, #16]
 8012b04:	e027      	b.n	8012b56 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8012b06:	683b      	ldr	r3, [r7, #0]
 8012b08:	2b01      	cmp	r3, #1
 8012b0a:	d112      	bne.n	8012b32 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8012b0c:	4b26      	ldr	r3, [pc, #152]	; (8012ba8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012b0e:	691b      	ldr	r3, [r3, #16]
 8012b10:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8012b14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8012b18:	687a      	ldr	r2, [r7, #4]
 8012b1a:	6892      	ldr	r2, [r2, #8]
 8012b1c:	0211      	lsls	r1, r2, #8
 8012b1e:	687a      	ldr	r2, [r7, #4]
 8012b20:	6912      	ldr	r2, [r2, #16]
 8012b22:	0852      	lsrs	r2, r2, #1
 8012b24:	3a01      	subs	r2, #1
 8012b26:	0552      	lsls	r2, r2, #21
 8012b28:	430a      	orrs	r2, r1
 8012b2a:	491f      	ldr	r1, [pc, #124]	; (8012ba8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012b2c:	4313      	orrs	r3, r2
 8012b2e:	610b      	str	r3, [r1, #16]
 8012b30:	e011      	b.n	8012b56 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8012b32:	4b1d      	ldr	r3, [pc, #116]	; (8012ba8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012b34:	691b      	ldr	r3, [r3, #16]
 8012b36:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8012b3a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8012b3e:	687a      	ldr	r2, [r7, #4]
 8012b40:	6892      	ldr	r2, [r2, #8]
 8012b42:	0211      	lsls	r1, r2, #8
 8012b44:	687a      	ldr	r2, [r7, #4]
 8012b46:	6952      	ldr	r2, [r2, #20]
 8012b48:	0852      	lsrs	r2, r2, #1
 8012b4a:	3a01      	subs	r2, #1
 8012b4c:	0652      	lsls	r2, r2, #25
 8012b4e:	430a      	orrs	r2, r1
 8012b50:	4915      	ldr	r1, [pc, #84]	; (8012ba8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012b52:	4313      	orrs	r3, r2
 8012b54:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8012b56:	4b14      	ldr	r3, [pc, #80]	; (8012ba8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	4a13      	ldr	r2, [pc, #76]	; (8012ba8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012b5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012b60:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012b62:	f7f9 fac3 	bl	800c0ec <HAL_GetTick>
 8012b66:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8012b68:	e009      	b.n	8012b7e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8012b6a:	f7f9 fabf 	bl	800c0ec <HAL_GetTick>
 8012b6e:	4602      	mov	r2, r0
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	1ad3      	subs	r3, r2, r3
 8012b74:	2b02      	cmp	r3, #2
 8012b76:	d902      	bls.n	8012b7e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8012b78:	2303      	movs	r3, #3
 8012b7a:	73fb      	strb	r3, [r7, #15]
          break;
 8012b7c:	e005      	b.n	8012b8a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8012b7e:	4b0a      	ldr	r3, [pc, #40]	; (8012ba8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d0ef      	beq.n	8012b6a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8012b8a:	7bfb      	ldrb	r3, [r7, #15]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d106      	bne.n	8012b9e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8012b90:	4b05      	ldr	r3, [pc, #20]	; (8012ba8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012b92:	691a      	ldr	r2, [r3, #16]
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	699b      	ldr	r3, [r3, #24]
 8012b98:	4903      	ldr	r1, [pc, #12]	; (8012ba8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012b9a:	4313      	orrs	r3, r2
 8012b9c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8012b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	3710      	adds	r7, #16
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	bd80      	pop	{r7, pc}
 8012ba8:	40021000 	.word	0x40021000

08012bac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b084      	sub	sp, #16
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
 8012bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8012bba:	4b69      	ldr	r3, [pc, #420]	; (8012d60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012bbc:	68db      	ldr	r3, [r3, #12]
 8012bbe:	f003 0303 	and.w	r3, r3, #3
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d018      	beq.n	8012bf8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8012bc6:	4b66      	ldr	r3, [pc, #408]	; (8012d60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012bc8:	68db      	ldr	r3, [r3, #12]
 8012bca:	f003 0203 	and.w	r2, r3, #3
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	429a      	cmp	r2, r3
 8012bd4:	d10d      	bne.n	8012bf2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	681b      	ldr	r3, [r3, #0]
       ||
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d009      	beq.n	8012bf2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8012bde:	4b60      	ldr	r3, [pc, #384]	; (8012d60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012be0:	68db      	ldr	r3, [r3, #12]
 8012be2:	091b      	lsrs	r3, r3, #4
 8012be4:	f003 0307 	and.w	r3, r3, #7
 8012be8:	1c5a      	adds	r2, r3, #1
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	685b      	ldr	r3, [r3, #4]
       ||
 8012bee:	429a      	cmp	r2, r3
 8012bf0:	d047      	beq.n	8012c82 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8012bf2:	2301      	movs	r3, #1
 8012bf4:	73fb      	strb	r3, [r7, #15]
 8012bf6:	e044      	b.n	8012c82 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	2b03      	cmp	r3, #3
 8012bfe:	d018      	beq.n	8012c32 <RCCEx_PLLSAI2_Config+0x86>
 8012c00:	2b03      	cmp	r3, #3
 8012c02:	d825      	bhi.n	8012c50 <RCCEx_PLLSAI2_Config+0xa4>
 8012c04:	2b01      	cmp	r3, #1
 8012c06:	d002      	beq.n	8012c0e <RCCEx_PLLSAI2_Config+0x62>
 8012c08:	2b02      	cmp	r3, #2
 8012c0a:	d009      	beq.n	8012c20 <RCCEx_PLLSAI2_Config+0x74>
 8012c0c:	e020      	b.n	8012c50 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8012c0e:	4b54      	ldr	r3, [pc, #336]	; (8012d60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	f003 0302 	and.w	r3, r3, #2
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d11d      	bne.n	8012c56 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8012c1a:	2301      	movs	r3, #1
 8012c1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012c1e:	e01a      	b.n	8012c56 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8012c20:	4b4f      	ldr	r3, [pc, #316]	; (8012d60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d116      	bne.n	8012c5a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8012c2c:	2301      	movs	r3, #1
 8012c2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012c30:	e013      	b.n	8012c5a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8012c32:	4b4b      	ldr	r3, [pc, #300]	; (8012d60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d10f      	bne.n	8012c5e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8012c3e:	4b48      	ldr	r3, [pc, #288]	; (8012d60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d109      	bne.n	8012c5e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8012c4a:	2301      	movs	r3, #1
 8012c4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012c4e:	e006      	b.n	8012c5e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8012c50:	2301      	movs	r3, #1
 8012c52:	73fb      	strb	r3, [r7, #15]
      break;
 8012c54:	e004      	b.n	8012c60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8012c56:	bf00      	nop
 8012c58:	e002      	b.n	8012c60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8012c5a:	bf00      	nop
 8012c5c:	e000      	b.n	8012c60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8012c5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8012c60:	7bfb      	ldrb	r3, [r7, #15]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d10d      	bne.n	8012c82 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8012c66:	4b3e      	ldr	r3, [pc, #248]	; (8012d60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012c68:	68db      	ldr	r3, [r3, #12]
 8012c6a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	6819      	ldr	r1, [r3, #0]
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	685b      	ldr	r3, [r3, #4]
 8012c76:	3b01      	subs	r3, #1
 8012c78:	011b      	lsls	r3, r3, #4
 8012c7a:	430b      	orrs	r3, r1
 8012c7c:	4938      	ldr	r1, [pc, #224]	; (8012d60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012c7e:	4313      	orrs	r3, r2
 8012c80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8012c82:	7bfb      	ldrb	r3, [r7, #15]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d166      	bne.n	8012d56 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8012c88:	4b35      	ldr	r3, [pc, #212]	; (8012d60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	4a34      	ldr	r2, [pc, #208]	; (8012d60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012c92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012c94:	f7f9 fa2a 	bl	800c0ec <HAL_GetTick>
 8012c98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8012c9a:	e009      	b.n	8012cb0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8012c9c:	f7f9 fa26 	bl	800c0ec <HAL_GetTick>
 8012ca0:	4602      	mov	r2, r0
 8012ca2:	68bb      	ldr	r3, [r7, #8]
 8012ca4:	1ad3      	subs	r3, r2, r3
 8012ca6:	2b02      	cmp	r3, #2
 8012ca8:	d902      	bls.n	8012cb0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8012caa:	2303      	movs	r3, #3
 8012cac:	73fb      	strb	r3, [r7, #15]
        break;
 8012cae:	e005      	b.n	8012cbc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8012cb0:	4b2b      	ldr	r3, [pc, #172]	; (8012d60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d1ef      	bne.n	8012c9c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8012cbc:	7bfb      	ldrb	r3, [r7, #15]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d149      	bne.n	8012d56 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8012cc2:	683b      	ldr	r3, [r7, #0]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d110      	bne.n	8012cea <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8012cc8:	4b25      	ldr	r3, [pc, #148]	; (8012d60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012cca:	695b      	ldr	r3, [r3, #20]
 8012ccc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8012cd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8012cd4:	687a      	ldr	r2, [r7, #4]
 8012cd6:	6892      	ldr	r2, [r2, #8]
 8012cd8:	0211      	lsls	r1, r2, #8
 8012cda:	687a      	ldr	r2, [r7, #4]
 8012cdc:	68d2      	ldr	r2, [r2, #12]
 8012cde:	06d2      	lsls	r2, r2, #27
 8012ce0:	430a      	orrs	r2, r1
 8012ce2:	491f      	ldr	r1, [pc, #124]	; (8012d60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012ce4:	4313      	orrs	r3, r2
 8012ce6:	614b      	str	r3, [r1, #20]
 8012ce8:	e011      	b.n	8012d0e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8012cea:	4b1d      	ldr	r3, [pc, #116]	; (8012d60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012cec:	695b      	ldr	r3, [r3, #20]
 8012cee:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8012cf2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8012cf6:	687a      	ldr	r2, [r7, #4]
 8012cf8:	6892      	ldr	r2, [r2, #8]
 8012cfa:	0211      	lsls	r1, r2, #8
 8012cfc:	687a      	ldr	r2, [r7, #4]
 8012cfe:	6912      	ldr	r2, [r2, #16]
 8012d00:	0852      	lsrs	r2, r2, #1
 8012d02:	3a01      	subs	r2, #1
 8012d04:	0652      	lsls	r2, r2, #25
 8012d06:	430a      	orrs	r2, r1
 8012d08:	4915      	ldr	r1, [pc, #84]	; (8012d60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012d0a:	4313      	orrs	r3, r2
 8012d0c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8012d0e:	4b14      	ldr	r3, [pc, #80]	; (8012d60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	4a13      	ldr	r2, [pc, #76]	; (8012d60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012d18:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012d1a:	f7f9 f9e7 	bl	800c0ec <HAL_GetTick>
 8012d1e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8012d20:	e009      	b.n	8012d36 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8012d22:	f7f9 f9e3 	bl	800c0ec <HAL_GetTick>
 8012d26:	4602      	mov	r2, r0
 8012d28:	68bb      	ldr	r3, [r7, #8]
 8012d2a:	1ad3      	subs	r3, r2, r3
 8012d2c:	2b02      	cmp	r3, #2
 8012d2e:	d902      	bls.n	8012d36 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8012d30:	2303      	movs	r3, #3
 8012d32:	73fb      	strb	r3, [r7, #15]
          break;
 8012d34:	e005      	b.n	8012d42 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8012d36:	4b0a      	ldr	r3, [pc, #40]	; (8012d60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d0ef      	beq.n	8012d22 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8012d42:	7bfb      	ldrb	r3, [r7, #15]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d106      	bne.n	8012d56 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8012d48:	4b05      	ldr	r3, [pc, #20]	; (8012d60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012d4a:	695a      	ldr	r2, [r3, #20]
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	695b      	ldr	r3, [r3, #20]
 8012d50:	4903      	ldr	r1, [pc, #12]	; (8012d60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012d52:	4313      	orrs	r3, r2
 8012d54:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8012d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d58:	4618      	mov	r0, r3
 8012d5a:	3710      	adds	r7, #16
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd80      	pop	{r7, pc}
 8012d60:	40021000 	.word	0x40021000

08012d64 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8012d64:	b480      	push	{r7}
 8012d66:	b089      	sub	sp, #36	; 0x24
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8012d6e:	2300      	movs	r3, #0
 8012d70:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8012d72:	2300      	movs	r3, #0
 8012d74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8012d76:	2300      	movs	r3, #0
 8012d78:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012d80:	d10c      	bne.n	8012d9c <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8012d82:	4b77      	ldr	r3, [pc, #476]	; (8012f60 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012d88:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8012d8c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8012d8e:	69bb      	ldr	r3, [r7, #24]
 8012d90:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8012d94:	d112      	bne.n	8012dbc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8012d96:	4b73      	ldr	r3, [pc, #460]	; (8012f64 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8012d98:	61fb      	str	r3, [r7, #28]
 8012d9a:	e00f      	b.n	8012dbc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012da2:	d10b      	bne.n	8012dbc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8012da4:	4b6e      	ldr	r3, [pc, #440]	; (8012f60 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012daa:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8012dae:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8012db0:	69bb      	ldr	r3, [r7, #24]
 8012db2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8012db6:	d101      	bne.n	8012dbc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8012db8:	4b6a      	ldr	r3, [pc, #424]	; (8012f64 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8012dba:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8012dbc:	69fb      	ldr	r3, [r7, #28]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	f040 80c6 	bne.w	8012f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 8012dc4:	683b      	ldr	r3, [r7, #0]
 8012dc6:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8012dc8:	69bb      	ldr	r3, [r7, #24]
 8012dca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012dce:	d003      	beq.n	8012dd8 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8012dd0:	69bb      	ldr	r3, [r7, #24]
 8012dd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012dd6:	d13b      	bne.n	8012e50 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8012dd8:	4b61      	ldr	r3, [pc, #388]	; (8012f60 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012de0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012de4:	f040 80b3 	bne.w	8012f4e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 8012de8:	4b5d      	ldr	r3, [pc, #372]	; (8012f60 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012dea:	68db      	ldr	r3, [r3, #12]
 8012dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	f000 80ac 	beq.w	8012f4e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8012df6:	4b5a      	ldr	r3, [pc, #360]	; (8012f60 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012df8:	68db      	ldr	r3, [r3, #12]
 8012dfa:	091b      	lsrs	r3, r3, #4
 8012dfc:	f003 0307 	and.w	r3, r3, #7
 8012e00:	3301      	adds	r3, #1
 8012e02:	693a      	ldr	r2, [r7, #16]
 8012e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8012e08:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8012e0a:	4b55      	ldr	r3, [pc, #340]	; (8012f60 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012e0c:	68db      	ldr	r3, [r3, #12]
 8012e0e:	0a1b      	lsrs	r3, r3, #8
 8012e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e14:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8012e16:	4b52      	ldr	r3, [pc, #328]	; (8012f60 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012e18:	68db      	ldr	r3, [r3, #12]
 8012e1a:	0edb      	lsrs	r3, r3, #27
 8012e1c:	f003 031f 	and.w	r3, r3, #31
 8012e20:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8012e22:	697b      	ldr	r3, [r7, #20]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d10a      	bne.n	8012e3e <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8012e28:	4b4d      	ldr	r3, [pc, #308]	; (8012f60 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012e2a:	68db      	ldr	r3, [r3, #12]
 8012e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d002      	beq.n	8012e3a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 8012e34:	2311      	movs	r3, #17
 8012e36:	617b      	str	r3, [r7, #20]
 8012e38:	e001      	b.n	8012e3e <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 8012e3a:	2307      	movs	r3, #7
 8012e3c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8012e3e:	693b      	ldr	r3, [r7, #16]
 8012e40:	68fa      	ldr	r2, [r7, #12]
 8012e42:	fb03 f202 	mul.w	r2, r3, r2
 8012e46:	697b      	ldr	r3, [r7, #20]
 8012e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8012e4c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8012e4e:	e07e      	b.n	8012f4e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8012e50:	69bb      	ldr	r3, [r7, #24]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d139      	bne.n	8012eca <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8012e56:	4b42      	ldr	r3, [pc, #264]	; (8012f60 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012e62:	d175      	bne.n	8012f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8012e64:	4b3e      	ldr	r3, [pc, #248]	; (8012f60 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012e66:	691b      	ldr	r3, [r3, #16]
 8012e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d06f      	beq.n	8012f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8012e70:	4b3b      	ldr	r3, [pc, #236]	; (8012f60 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012e72:	68db      	ldr	r3, [r3, #12]
 8012e74:	091b      	lsrs	r3, r3, #4
 8012e76:	f003 0307 	and.w	r3, r3, #7
 8012e7a:	3301      	adds	r3, #1
 8012e7c:	693a      	ldr	r2, [r7, #16]
 8012e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012e82:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8012e84:	4b36      	ldr	r3, [pc, #216]	; (8012f60 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012e86:	691b      	ldr	r3, [r3, #16]
 8012e88:	0a1b      	lsrs	r3, r3, #8
 8012e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e8e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8012e90:	4b33      	ldr	r3, [pc, #204]	; (8012f60 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012e92:	691b      	ldr	r3, [r3, #16]
 8012e94:	0edb      	lsrs	r3, r3, #27
 8012e96:	f003 031f 	and.w	r3, r3, #31
 8012e9a:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8012e9c:	697b      	ldr	r3, [r7, #20]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d10a      	bne.n	8012eb8 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8012ea2:	4b2f      	ldr	r3, [pc, #188]	; (8012f60 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012ea4:	691b      	ldr	r3, [r3, #16]
 8012ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d002      	beq.n	8012eb4 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 8012eae:	2311      	movs	r3, #17
 8012eb0:	617b      	str	r3, [r7, #20]
 8012eb2:	e001      	b.n	8012eb8 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 8012eb4:	2307      	movs	r3, #7
 8012eb6:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8012eb8:	693b      	ldr	r3, [r7, #16]
 8012eba:	68fa      	ldr	r2, [r7, #12]
 8012ebc:	fb03 f202 	mul.w	r2, r3, r2
 8012ec0:	697b      	ldr	r3, [r7, #20]
 8012ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ec6:	61fb      	str	r3, [r7, #28]
 8012ec8:	e042      	b.n	8012f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8012eca:	69bb      	ldr	r3, [r7, #24]
 8012ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012ed0:	d003      	beq.n	8012eda <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 8012ed2:	69bb      	ldr	r3, [r7, #24]
 8012ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012ed8:	d13a      	bne.n	8012f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8012eda:	4b21      	ldr	r3, [pc, #132]	; (8012f60 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012ee2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012ee6:	d133      	bne.n	8012f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8012ee8:	4b1d      	ldr	r3, [pc, #116]	; (8012f60 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012eea:	695b      	ldr	r3, [r3, #20]
 8012eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d02d      	beq.n	8012f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8012ef4:	4b1a      	ldr	r3, [pc, #104]	; (8012f60 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012ef6:	68db      	ldr	r3, [r3, #12]
 8012ef8:	091b      	lsrs	r3, r3, #4
 8012efa:	f003 0307 	and.w	r3, r3, #7
 8012efe:	3301      	adds	r3, #1
 8012f00:	693a      	ldr	r2, [r7, #16]
 8012f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8012f06:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8012f08:	4b15      	ldr	r3, [pc, #84]	; (8012f60 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012f0a:	695b      	ldr	r3, [r3, #20]
 8012f0c:	0a1b      	lsrs	r3, r3, #8
 8012f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012f12:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8012f14:	4b12      	ldr	r3, [pc, #72]	; (8012f60 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012f16:	695b      	ldr	r3, [r3, #20]
 8012f18:	0edb      	lsrs	r3, r3, #27
 8012f1a:	f003 031f 	and.w	r3, r3, #31
 8012f1e:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8012f20:	697b      	ldr	r3, [r7, #20]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d10a      	bne.n	8012f3c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8012f26:	4b0e      	ldr	r3, [pc, #56]	; (8012f60 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012f28:	695b      	ldr	r3, [r3, #20]
 8012f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d002      	beq.n	8012f38 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 8012f32:	2311      	movs	r3, #17
 8012f34:	617b      	str	r3, [r7, #20]
 8012f36:	e001      	b.n	8012f3c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8012f38:	2307      	movs	r3, #7
 8012f3a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8012f3c:	693b      	ldr	r3, [r7, #16]
 8012f3e:	68fa      	ldr	r2, [r7, #12]
 8012f40:	fb03 f202 	mul.w	r2, r3, r2
 8012f44:	697b      	ldr	r3, [r7, #20]
 8012f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8012f4a:	61fb      	str	r3, [r7, #28]
 8012f4c:	e000      	b.n	8012f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8012f4e:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8012f50:	69fb      	ldr	r3, [r7, #28]
}
 8012f52:	4618      	mov	r0, r3
 8012f54:	3724      	adds	r7, #36	; 0x24
 8012f56:	46bd      	mov	sp, r7
 8012f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f5c:	4770      	bx	lr
 8012f5e:	bf00      	nop
 8012f60:	40021000 	.word	0x40021000
 8012f64:	001fff68 	.word	0x001fff68

08012f68 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b088      	sub	sp, #32
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d101      	bne.n	8012f7a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8012f76:	2301      	movs	r3, #1
 8012f78:	e155      	b.n	8013226 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8012f80:	b2db      	uxtb	r3, r3
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d106      	bne.n	8012f94 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	2200      	movs	r2, #0
 8012f8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8012f8e:	6878      	ldr	r0, [r7, #4]
 8012f90:	f7f0 f884 	bl	800309c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8012f94:	6878      	ldr	r0, [r7, #4]
 8012f96:	f000 f959 	bl	801324c <SAI_Disable>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d001      	beq.n	8012fa4 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8012fa0:	2301      	movs	r3, #1
 8012fa2:	e140      	b.n	8013226 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	2202      	movs	r2, #2
 8012fa8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	68db      	ldr	r3, [r3, #12]
 8012fb0:	2b02      	cmp	r3, #2
 8012fb2:	d00c      	beq.n	8012fce <HAL_SAI_Init+0x66>
 8012fb4:	2b02      	cmp	r3, #2
 8012fb6:	d80d      	bhi.n	8012fd4 <HAL_SAI_Init+0x6c>
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d002      	beq.n	8012fc2 <HAL_SAI_Init+0x5a>
 8012fbc:	2b01      	cmp	r3, #1
 8012fbe:	d003      	beq.n	8012fc8 <HAL_SAI_Init+0x60>
 8012fc0:	e008      	b.n	8012fd4 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	61fb      	str	r3, [r7, #28]
      break;
 8012fc6:	e008      	b.n	8012fda <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8012fc8:	2310      	movs	r3, #16
 8012fca:	61fb      	str	r3, [r7, #28]
      break;
 8012fcc:	e005      	b.n	8012fda <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8012fce:	2320      	movs	r3, #32
 8012fd0:	61fb      	str	r3, [r7, #28]
      break;
 8012fd2:	e002      	b.n	8012fda <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	61fb      	str	r3, [r7, #28]
      break;
 8012fd8:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	689b      	ldr	r3, [r3, #8]
 8012fde:	2b03      	cmp	r3, #3
 8012fe0:	d81d      	bhi.n	801301e <HAL_SAI_Init+0xb6>
 8012fe2:	a201      	add	r2, pc, #4	; (adr r2, 8012fe8 <HAL_SAI_Init+0x80>)
 8012fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fe8:	08012ff9 	.word	0x08012ff9
 8012fec:	08012fff 	.word	0x08012fff
 8012ff0:	08013007 	.word	0x08013007
 8012ff4:	0801300f 	.word	0x0801300f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	617b      	str	r3, [r7, #20]
      break;
 8012ffc:	e012      	b.n	8013024 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8012ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013002:	617b      	str	r3, [r7, #20]
      break;
 8013004:	e00e      	b.n	8013024 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8013006:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801300a:	617b      	str	r3, [r7, #20]
      break;
 801300c:	e00a      	b.n	8013024 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 801300e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013012:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8013014:	69fb      	ldr	r3, [r7, #28]
 8013016:	f043 0301 	orr.w	r3, r3, #1
 801301a:	61fb      	str	r3, [r7, #28]
      break;
 801301c:	e002      	b.n	8013024 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 801301e:	2300      	movs	r3, #0
 8013020:	617b      	str	r3, [r7, #20]
      break;
 8013022:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	4a81      	ldr	r2, [pc, #516]	; (8013230 <HAL_SAI_Init+0x2c8>)
 801302a:	4293      	cmp	r3, r2
 801302c:	d004      	beq.n	8013038 <HAL_SAI_Init+0xd0>
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	4a80      	ldr	r2, [pc, #512]	; (8013234 <HAL_SAI_Init+0x2cc>)
 8013034:	4293      	cmp	r3, r2
 8013036:	d103      	bne.n	8013040 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8013038:	4a7f      	ldr	r2, [pc, #508]	; (8013238 <HAL_SAI_Init+0x2d0>)
 801303a:	69fb      	ldr	r3, [r7, #28]
 801303c:	6013      	str	r3, [r2, #0]
 801303e:	e002      	b.n	8013046 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8013040:	4a7e      	ldr	r2, [pc, #504]	; (801323c <HAL_SAI_Init+0x2d4>)
 8013042:	69fb      	ldr	r3, [r7, #28]
 8013044:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	69db      	ldr	r3, [r3, #28]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d041      	beq.n	80130d2 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	4a77      	ldr	r2, [pc, #476]	; (8013230 <HAL_SAI_Init+0x2c8>)
 8013054:	4293      	cmp	r3, r2
 8013056:	d004      	beq.n	8013062 <HAL_SAI_Init+0xfa>
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	4a75      	ldr	r2, [pc, #468]	; (8013234 <HAL_SAI_Init+0x2cc>)
 801305e:	4293      	cmp	r3, r2
 8013060:	d105      	bne.n	801306e <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8013062:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8013066:	f7fe fee7 	bl	8011e38 <HAL_RCCEx_GetPeriphCLKFreq>
 801306a:	6138      	str	r0, [r7, #16]
 801306c:	e004      	b.n	8013078 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 801306e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8013072:	f7fe fee1 	bl	8011e38 <HAL_RCCEx_GetPeriphCLKFreq>
 8013076:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8013078:	693a      	ldr	r2, [r7, #16]
 801307a:	4613      	mov	r3, r2
 801307c:	009b      	lsls	r3, r3, #2
 801307e:	4413      	add	r3, r2
 8013080:	005b      	lsls	r3, r3, #1
 8013082:	461a      	mov	r2, r3
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	69db      	ldr	r3, [r3, #28]
 8013088:	025b      	lsls	r3, r3, #9
 801308a:	fbb2 f3f3 	udiv	r3, r2, r3
 801308e:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	4a6b      	ldr	r2, [pc, #428]	; (8013240 <HAL_SAI_Init+0x2d8>)
 8013094:	fba2 2303 	umull	r2, r3, r2, r3
 8013098:	08da      	lsrs	r2, r3, #3
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 801309e:	68f9      	ldr	r1, [r7, #12]
 80130a0:	4b67      	ldr	r3, [pc, #412]	; (8013240 <HAL_SAI_Init+0x2d8>)
 80130a2:	fba3 2301 	umull	r2, r3, r3, r1
 80130a6:	08da      	lsrs	r2, r3, #3
 80130a8:	4613      	mov	r3, r2
 80130aa:	009b      	lsls	r3, r3, #2
 80130ac:	4413      	add	r3, r2
 80130ae:	005b      	lsls	r3, r3, #1
 80130b0:	1aca      	subs	r2, r1, r3
 80130b2:	2a08      	cmp	r2, #8
 80130b4:	d904      	bls.n	80130c0 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	6a1b      	ldr	r3, [r3, #32]
 80130ba:	1c5a      	adds	r2, r3, #1
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130c4:	2b04      	cmp	r3, #4
 80130c6:	d104      	bne.n	80130d2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	6a1b      	ldr	r3, [r3, #32]
 80130cc:	085a      	lsrs	r2, r3, #1
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	685b      	ldr	r3, [r3, #4]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d003      	beq.n	80130e2 <HAL_SAI_Init+0x17a>
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	685b      	ldr	r3, [r3, #4]
 80130de:	2b02      	cmp	r3, #2
 80130e0:	d109      	bne.n	80130f6 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130e6:	2b01      	cmp	r3, #1
 80130e8:	d101      	bne.n	80130ee <HAL_SAI_Init+0x186>
 80130ea:	2300      	movs	r3, #0
 80130ec:	e001      	b.n	80130f2 <HAL_SAI_Init+0x18a>
 80130ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80130f2:	61bb      	str	r3, [r7, #24]
 80130f4:	e008      	b.n	8013108 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130fa:	2b01      	cmp	r3, #1
 80130fc:	d102      	bne.n	8013104 <HAL_SAI_Init+0x19c>
 80130fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013102:	e000      	b.n	8013106 <HAL_SAI_Init+0x19e>
 8013104:	2300      	movs	r3, #0
 8013106:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	6819      	ldr	r1, [r3, #0]
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	681a      	ldr	r2, [r3, #0]
 8013112:	4b4c      	ldr	r3, [pc, #304]	; (8013244 <HAL_SAI_Init+0x2dc>)
 8013114:	400b      	ands	r3, r1
 8013116:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	6819      	ldr	r1, [r3, #0]
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	685a      	ldr	r2, [r3, #4]
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013126:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 801312c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013132:	431a      	orrs	r2, r3
 8013134:	69bb      	ldr	r3, [r7, #24]
 8013136:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8013138:	697b      	ldr	r3, [r7, #20]
 801313a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8013140:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	691b      	ldr	r3, [r3, #16]
 8013146:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 801314c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	6a1b      	ldr	r3, [r3, #32]
 8013152:	051b      	lsls	r3, r3, #20
 8013154:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	430a      	orrs	r2, r1
 801315c:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	685b      	ldr	r3, [r3, #4]
 8013164:	687a      	ldr	r2, [r7, #4]
 8013166:	6812      	ldr	r2, [r2, #0]
 8013168:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 801316c:	f023 030f 	bic.w	r3, r3, #15
 8013170:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	6859      	ldr	r1, [r3, #4]
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	699a      	ldr	r2, [r3, #24]
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013180:	431a      	orrs	r2, r3
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013186:	431a      	orrs	r2, r3
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	430a      	orrs	r2, r1
 801318e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	6899      	ldr	r1, [r3, #8]
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	681a      	ldr	r2, [r3, #0]
 801319a:	4b2b      	ldr	r3, [pc, #172]	; (8013248 <HAL_SAI_Init+0x2e0>)
 801319c:	400b      	ands	r3, r1
 801319e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	6899      	ldr	r1, [r3, #8]
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131aa:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80131b0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80131b6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 80131bc:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80131c2:	3b01      	subs	r3, #1
 80131c4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80131c6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	430a      	orrs	r2, r1
 80131ce:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	68d9      	ldr	r1, [r3, #12]
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	681a      	ldr	r2, [r3, #0]
 80131da:	f24f 0320 	movw	r3, #61472	; 0xf020
 80131de:	400b      	ands	r3, r1
 80131e0:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	68d9      	ldr	r1, [r3, #12]
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80131f0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80131f6:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80131f8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80131fe:	3b01      	subs	r3, #1
 8013200:	021b      	lsls	r3, r3, #8
 8013202:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	430a      	orrs	r2, r1
 801320a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	2200      	movs	r2, #0
 8013210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	2201      	movs	r2, #1
 8013218:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	2200      	movs	r2, #0
 8013220:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8013224:	2300      	movs	r3, #0
}
 8013226:	4618      	mov	r0, r3
 8013228:	3720      	adds	r7, #32
 801322a:	46bd      	mov	sp, r7
 801322c:	bd80      	pop	{r7, pc}
 801322e:	bf00      	nop
 8013230:	40015404 	.word	0x40015404
 8013234:	40015424 	.word	0x40015424
 8013238:	40015400 	.word	0x40015400
 801323c:	40015800 	.word	0x40015800
 8013240:	cccccccd 	.word	0xcccccccd
 8013244:	ff05c010 	.word	0xff05c010
 8013248:	fff88000 	.word	0xfff88000

0801324c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 801324c:	b480      	push	{r7}
 801324e:	b085      	sub	sp, #20
 8013250:	af00      	add	r7, sp, #0
 8013252:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8013254:	4b18      	ldr	r3, [pc, #96]	; (80132b8 <SAI_Disable+0x6c>)
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	4a18      	ldr	r2, [pc, #96]	; (80132bc <SAI_Disable+0x70>)
 801325a:	fba2 2303 	umull	r2, r3, r2, r3
 801325e:	0b1b      	lsrs	r3, r3, #12
 8013260:	009b      	lsls	r3, r3, #2
 8013262:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8013264:	2300      	movs	r3, #0
 8013266:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	681a      	ldr	r2, [r3, #0]
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8013276:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d10a      	bne.n	8013294 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013284:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 801328e:	2303      	movs	r3, #3
 8013290:	72fb      	strb	r3, [r7, #11]
      break;
 8013292:	e009      	b.n	80132a8 <SAI_Disable+0x5c>
    }
    count--;
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	3b01      	subs	r3, #1
 8013298:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d1e7      	bne.n	8013278 <SAI_Disable+0x2c>

  return status;
 80132a8:	7afb      	ldrb	r3, [r7, #11]
}
 80132aa:	4618      	mov	r0, r3
 80132ac:	3714      	adds	r7, #20
 80132ae:	46bd      	mov	sp, r7
 80132b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b4:	4770      	bx	lr
 80132b6:	bf00      	nop
 80132b8:	200001a0 	.word	0x200001a0
 80132bc:	95cbec1b 	.word	0x95cbec1b

080132c0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b082      	sub	sp, #8
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d101      	bne.n	80132d2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80132ce:	2301      	movs	r3, #1
 80132d0:	e022      	b.n	8013318 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80132d8:	b2db      	uxtb	r3, r3
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d105      	bne.n	80132ea <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	2200      	movs	r2, #0
 80132e2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80132e4:	6878      	ldr	r0, [r7, #4]
 80132e6:	f7ef ff83 	bl	80031f0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	2203      	movs	r2, #3
 80132ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80132f2:	6878      	ldr	r0, [r7, #4]
 80132f4:	f000 f814 	bl	8013320 <HAL_SD_InitCard>
 80132f8:	4603      	mov	r3, r0
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d001      	beq.n	8013302 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80132fe:	2301      	movs	r3, #1
 8013300:	e00a      	b.n	8013318 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	2200      	movs	r2, #0
 8013306:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	2200      	movs	r2, #0
 801330c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	2201      	movs	r2, #1
 8013312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8013316:	2300      	movs	r3, #0
}
 8013318:	4618      	mov	r0, r3
 801331a:	3708      	adds	r7, #8
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}

08013320 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8013320:	b5b0      	push	{r4, r5, r7, lr}
 8013322:	b08e      	sub	sp, #56	; 0x38
 8013324:	af04      	add	r7, sp, #16
 8013326:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8013328:	2300      	movs	r3, #0
 801332a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 801332c:	2300      	movs	r3, #0
 801332e:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8013330:	2300      	movs	r3, #0
 8013332:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8013334:	2300      	movs	r3, #0
 8013336:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8013338:	2300      	movs	r3, #0
 801333a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 801333c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8013340:	f7fe fd7a 	bl	8011e38 <HAL_RCCEx_GetPeriphCLKFreq>
 8013344:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8013346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013348:	2b00      	cmp	r3, #0
 801334a:	d109      	bne.n	8013360 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	2201      	movs	r2, #1
 8013350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801335a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 801335c:	2301      	movs	r3, #1
 801335e:	e07b      	b.n	8013458 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8013360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013362:	09db      	lsrs	r3, r3, #7
 8013364:	4a3e      	ldr	r2, [pc, #248]	; (8013460 <HAL_SD_InitCard+0x140>)
 8013366:	fba2 2303 	umull	r2, r3, r2, r3
 801336a:	091b      	lsrs	r3, r3, #4
 801336c:	3b02      	subs	r3, #2
 801336e:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	681d      	ldr	r5, [r3, #0]
 8013374:	466c      	mov	r4, sp
 8013376:	f107 0314 	add.w	r3, r7, #20
 801337a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801337e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013382:	f107 0308 	add.w	r3, r7, #8
 8013386:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013388:	4628      	mov	r0, r5
 801338a:	f002 fe2b 	bl	8015fe4 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	685a      	ldr	r2, [r3, #4]
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801339c:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	4618      	mov	r0, r3
 80133a4:	f002 fe58 	bl	8016058 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	685a      	ldr	r2, [r3, #4]
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80133b6:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 80133b8:	69fb      	ldr	r3, [r7, #28]
 80133ba:	3302      	adds	r3, #2
 80133bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80133be:	fbb2 f3f3 	udiv	r3, r2, r3
 80133c2:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80133c4:	4a27      	ldr	r2, [pc, #156]	; (8013464 <HAL_SD_InitCard+0x144>)
 80133c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80133cc:	3301      	adds	r3, #1
 80133ce:	4618      	mov	r0, r3
 80133d0:	f7f8 fe98 	bl	800c104 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80133d4:	6878      	ldr	r0, [r7, #4]
 80133d6:	f000 fb77 	bl	8013ac8 <SD_PowerON>
 80133da:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80133dc:	6a3b      	ldr	r3, [r7, #32]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d00b      	beq.n	80133fa <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	2201      	movs	r2, #1
 80133e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80133ee:	6a3b      	ldr	r3, [r7, #32]
 80133f0:	431a      	orrs	r2, r3
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80133f6:	2301      	movs	r3, #1
 80133f8:	e02e      	b.n	8013458 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80133fa:	6878      	ldr	r0, [r7, #4]
 80133fc:	f000 fa96 	bl	801392c <SD_InitCard>
 8013400:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8013402:	6a3b      	ldr	r3, [r7, #32]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d00b      	beq.n	8013420 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	2201      	movs	r2, #1
 801340c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013414:	6a3b      	ldr	r3, [r7, #32]
 8013416:	431a      	orrs	r2, r3
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 801341c:	2301      	movs	r3, #1
 801341e:	e01b      	b.n	8013458 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	f44f 7100 	mov.w	r1, #512	; 0x200
 8013428:	4618      	mov	r0, r3
 801342a:	f002 fea8 	bl	801617e <SDMMC_CmdBlockLength>
 801342e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8013430:	6a3b      	ldr	r3, [r7, #32]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d00f      	beq.n	8013456 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	4a0b      	ldr	r2, [pc, #44]	; (8013468 <HAL_SD_InitCard+0x148>)
 801343c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013442:	6a3b      	ldr	r3, [r7, #32]
 8013444:	431a      	orrs	r2, r3
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	2201      	movs	r2, #1
 801344e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8013452:	2301      	movs	r3, #1
 8013454:	e000      	b.n	8013458 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8013456:	2300      	movs	r3, #0
}
 8013458:	4618      	mov	r0, r3
 801345a:	3728      	adds	r7, #40	; 0x28
 801345c:	46bd      	mov	sp, r7
 801345e:	bdb0      	pop	{r4, r5, r7, pc}
 8013460:	014f8b59 	.word	0x014f8b59
 8013464:	00012110 	.word	0x00012110
 8013468:	004005ff 	.word	0x004005ff

0801346c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 801346c:	b480      	push	{r7}
 801346e:	b083      	sub	sp, #12
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
 8013474:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801347a:	0f9b      	lsrs	r3, r3, #30
 801347c:	b2da      	uxtb	r2, r3
 801347e:	683b      	ldr	r3, [r7, #0]
 8013480:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013486:	0e9b      	lsrs	r3, r3, #26
 8013488:	b2db      	uxtb	r3, r3
 801348a:	f003 030f 	and.w	r3, r3, #15
 801348e:	b2da      	uxtb	r2, r3
 8013490:	683b      	ldr	r3, [r7, #0]
 8013492:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013498:	0e1b      	lsrs	r3, r3, #24
 801349a:	b2db      	uxtb	r3, r3
 801349c:	f003 0303 	and.w	r3, r3, #3
 80134a0:	b2da      	uxtb	r2, r3
 80134a2:	683b      	ldr	r3, [r7, #0]
 80134a4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80134aa:	0c1b      	lsrs	r3, r3, #16
 80134ac:	b2da      	uxtb	r2, r3
 80134ae:	683b      	ldr	r3, [r7, #0]
 80134b0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80134b6:	0a1b      	lsrs	r3, r3, #8
 80134b8:	b2da      	uxtb	r2, r3
 80134ba:	683b      	ldr	r3, [r7, #0]
 80134bc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80134c2:	b2da      	uxtb	r2, r3
 80134c4:	683b      	ldr	r3, [r7, #0]
 80134c6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80134cc:	0d1b      	lsrs	r3, r3, #20
 80134ce:	b29a      	uxth	r2, r3
 80134d0:	683b      	ldr	r3, [r7, #0]
 80134d2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80134d8:	0c1b      	lsrs	r3, r3, #16
 80134da:	b2db      	uxtb	r3, r3
 80134dc:	f003 030f 	and.w	r3, r3, #15
 80134e0:	b2da      	uxtb	r2, r3
 80134e2:	683b      	ldr	r3, [r7, #0]
 80134e4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80134ea:	0bdb      	lsrs	r3, r3, #15
 80134ec:	b2db      	uxtb	r3, r3
 80134ee:	f003 0301 	and.w	r3, r3, #1
 80134f2:	b2da      	uxtb	r2, r3
 80134f4:	683b      	ldr	r3, [r7, #0]
 80134f6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80134fc:	0b9b      	lsrs	r3, r3, #14
 80134fe:	b2db      	uxtb	r3, r3
 8013500:	f003 0301 	and.w	r3, r3, #1
 8013504:	b2da      	uxtb	r2, r3
 8013506:	683b      	ldr	r3, [r7, #0]
 8013508:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801350e:	0b5b      	lsrs	r3, r3, #13
 8013510:	b2db      	uxtb	r3, r3
 8013512:	f003 0301 	and.w	r3, r3, #1
 8013516:	b2da      	uxtb	r2, r3
 8013518:	683b      	ldr	r3, [r7, #0]
 801351a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013520:	0b1b      	lsrs	r3, r3, #12
 8013522:	b2db      	uxtb	r3, r3
 8013524:	f003 0301 	and.w	r3, r3, #1
 8013528:	b2da      	uxtb	r2, r3
 801352a:	683b      	ldr	r3, [r7, #0]
 801352c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 801352e:	683b      	ldr	r3, [r7, #0]
 8013530:	2200      	movs	r2, #0
 8013532:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013538:	2b00      	cmp	r3, #0
 801353a:	d163      	bne.n	8013604 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013540:	009a      	lsls	r2, r3, #2
 8013542:	f640 73fc 	movw	r3, #4092	; 0xffc
 8013546:	4013      	ands	r3, r2
 8013548:	687a      	ldr	r2, [r7, #4]
 801354a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 801354c:	0f92      	lsrs	r2, r2, #30
 801354e:	431a      	orrs	r2, r3
 8013550:	683b      	ldr	r3, [r7, #0]
 8013552:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013558:	0edb      	lsrs	r3, r3, #27
 801355a:	b2db      	uxtb	r3, r3
 801355c:	f003 0307 	and.w	r3, r3, #7
 8013560:	b2da      	uxtb	r2, r3
 8013562:	683b      	ldr	r3, [r7, #0]
 8013564:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801356a:	0e1b      	lsrs	r3, r3, #24
 801356c:	b2db      	uxtb	r3, r3
 801356e:	f003 0307 	and.w	r3, r3, #7
 8013572:	b2da      	uxtb	r2, r3
 8013574:	683b      	ldr	r3, [r7, #0]
 8013576:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801357c:	0d5b      	lsrs	r3, r3, #21
 801357e:	b2db      	uxtb	r3, r3
 8013580:	f003 0307 	and.w	r3, r3, #7
 8013584:	b2da      	uxtb	r2, r3
 8013586:	683b      	ldr	r3, [r7, #0]
 8013588:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801358e:	0c9b      	lsrs	r3, r3, #18
 8013590:	b2db      	uxtb	r3, r3
 8013592:	f003 0307 	and.w	r3, r3, #7
 8013596:	b2da      	uxtb	r2, r3
 8013598:	683b      	ldr	r3, [r7, #0]
 801359a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135a0:	0bdb      	lsrs	r3, r3, #15
 80135a2:	b2db      	uxtb	r3, r3
 80135a4:	f003 0307 	and.w	r3, r3, #7
 80135a8:	b2da      	uxtb	r2, r3
 80135aa:	683b      	ldr	r3, [r7, #0]
 80135ac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80135ae:	683b      	ldr	r3, [r7, #0]
 80135b0:	691b      	ldr	r3, [r3, #16]
 80135b2:	1c5a      	adds	r2, r3, #1
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80135b8:	683b      	ldr	r3, [r7, #0]
 80135ba:	7e1b      	ldrb	r3, [r3, #24]
 80135bc:	b2db      	uxtb	r3, r3
 80135be:	f003 0307 	and.w	r3, r3, #7
 80135c2:	3302      	adds	r3, #2
 80135c4:	2201      	movs	r2, #1
 80135c6:	fa02 f303 	lsl.w	r3, r2, r3
 80135ca:	687a      	ldr	r2, [r7, #4]
 80135cc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80135ce:	fb03 f202 	mul.w	r2, r3, r2
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80135d6:	683b      	ldr	r3, [r7, #0]
 80135d8:	7a1b      	ldrb	r3, [r3, #8]
 80135da:	b2db      	uxtb	r3, r3
 80135dc:	f003 030f 	and.w	r3, r3, #15
 80135e0:	2201      	movs	r2, #1
 80135e2:	409a      	lsls	r2, r3
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135ec:	687a      	ldr	r2, [r7, #4]
 80135ee:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80135f0:	0a52      	lsrs	r2, r2, #9
 80135f2:	fb03 f202 	mul.w	r2, r3, r2
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013600:	661a      	str	r2, [r3, #96]	; 0x60
 8013602:	e031      	b.n	8013668 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013608:	2b01      	cmp	r3, #1
 801360a:	d11d      	bne.n	8013648 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013610:	041b      	lsls	r3, r3, #16
 8013612:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801361a:	0c1b      	lsrs	r3, r3, #16
 801361c:	431a      	orrs	r2, r3
 801361e:	683b      	ldr	r3, [r7, #0]
 8013620:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8013622:	683b      	ldr	r3, [r7, #0]
 8013624:	691b      	ldr	r3, [r3, #16]
 8013626:	3301      	adds	r3, #1
 8013628:	029a      	lsls	r2, r3, #10
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	f44f 7200 	mov.w	r2, #512	; 0x200
 801363c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	661a      	str	r2, [r3, #96]	; 0x60
 8013646:	e00f      	b.n	8013668 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	4a58      	ldr	r2, [pc, #352]	; (80137b0 <HAL_SD_GetCardCSD+0x344>)
 801364e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013654:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	2201      	movs	r2, #1
 8013660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8013664:	2301      	movs	r3, #1
 8013666:	e09d      	b.n	80137a4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801366c:	0b9b      	lsrs	r3, r3, #14
 801366e:	b2db      	uxtb	r3, r3
 8013670:	f003 0301 	and.w	r3, r3, #1
 8013674:	b2da      	uxtb	r2, r3
 8013676:	683b      	ldr	r3, [r7, #0]
 8013678:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801367e:	09db      	lsrs	r3, r3, #7
 8013680:	b2db      	uxtb	r3, r3
 8013682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013686:	b2da      	uxtb	r2, r3
 8013688:	683b      	ldr	r3, [r7, #0]
 801368a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013690:	b2db      	uxtb	r3, r3
 8013692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013696:	b2da      	uxtb	r2, r3
 8013698:	683b      	ldr	r3, [r7, #0]
 801369a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136a0:	0fdb      	lsrs	r3, r3, #31
 80136a2:	b2da      	uxtb	r2, r3
 80136a4:	683b      	ldr	r3, [r7, #0]
 80136a6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136ac:	0f5b      	lsrs	r3, r3, #29
 80136ae:	b2db      	uxtb	r3, r3
 80136b0:	f003 0303 	and.w	r3, r3, #3
 80136b4:	b2da      	uxtb	r2, r3
 80136b6:	683b      	ldr	r3, [r7, #0]
 80136b8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136be:	0e9b      	lsrs	r3, r3, #26
 80136c0:	b2db      	uxtb	r3, r3
 80136c2:	f003 0307 	and.w	r3, r3, #7
 80136c6:	b2da      	uxtb	r2, r3
 80136c8:	683b      	ldr	r3, [r7, #0]
 80136ca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136d0:	0d9b      	lsrs	r3, r3, #22
 80136d2:	b2db      	uxtb	r3, r3
 80136d4:	f003 030f 	and.w	r3, r3, #15
 80136d8:	b2da      	uxtb	r2, r3
 80136da:	683b      	ldr	r3, [r7, #0]
 80136dc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136e2:	0d5b      	lsrs	r3, r3, #21
 80136e4:	b2db      	uxtb	r3, r3
 80136e6:	f003 0301 	and.w	r3, r3, #1
 80136ea:	b2da      	uxtb	r2, r3
 80136ec:	683b      	ldr	r3, [r7, #0]
 80136ee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80136f2:	683b      	ldr	r3, [r7, #0]
 80136f4:	2200      	movs	r2, #0
 80136f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136fe:	0c1b      	lsrs	r3, r3, #16
 8013700:	b2db      	uxtb	r3, r3
 8013702:	f003 0301 	and.w	r3, r3, #1
 8013706:	b2da      	uxtb	r2, r3
 8013708:	683b      	ldr	r3, [r7, #0]
 801370a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013712:	0bdb      	lsrs	r3, r3, #15
 8013714:	b2db      	uxtb	r3, r3
 8013716:	f003 0301 	and.w	r3, r3, #1
 801371a:	b2da      	uxtb	r2, r3
 801371c:	683b      	ldr	r3, [r7, #0]
 801371e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013726:	0b9b      	lsrs	r3, r3, #14
 8013728:	b2db      	uxtb	r3, r3
 801372a:	f003 0301 	and.w	r3, r3, #1
 801372e:	b2da      	uxtb	r2, r3
 8013730:	683b      	ldr	r3, [r7, #0]
 8013732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801373a:	0b5b      	lsrs	r3, r3, #13
 801373c:	b2db      	uxtb	r3, r3
 801373e:	f003 0301 	and.w	r3, r3, #1
 8013742:	b2da      	uxtb	r2, r3
 8013744:	683b      	ldr	r3, [r7, #0]
 8013746:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801374e:	0b1b      	lsrs	r3, r3, #12
 8013750:	b2db      	uxtb	r3, r3
 8013752:	f003 0301 	and.w	r3, r3, #1
 8013756:	b2da      	uxtb	r2, r3
 8013758:	683b      	ldr	r3, [r7, #0]
 801375a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013762:	0a9b      	lsrs	r3, r3, #10
 8013764:	b2db      	uxtb	r3, r3
 8013766:	f003 0303 	and.w	r3, r3, #3
 801376a:	b2da      	uxtb	r2, r3
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013776:	0a1b      	lsrs	r3, r3, #8
 8013778:	b2db      	uxtb	r3, r3
 801377a:	f003 0303 	and.w	r3, r3, #3
 801377e:	b2da      	uxtb	r2, r3
 8013780:	683b      	ldr	r3, [r7, #0]
 8013782:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801378a:	085b      	lsrs	r3, r3, #1
 801378c:	b2db      	uxtb	r3, r3
 801378e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013792:	b2da      	uxtb	r2, r3
 8013794:	683b      	ldr	r3, [r7, #0]
 8013796:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 801379a:	683b      	ldr	r3, [r7, #0]
 801379c:	2201      	movs	r2, #1
 801379e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80137a2:	2300      	movs	r3, #0
}
 80137a4:	4618      	mov	r0, r3
 80137a6:	370c      	adds	r7, #12
 80137a8:	46bd      	mov	sp, r7
 80137aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ae:	4770      	bx	lr
 80137b0:	004005ff 	.word	0x004005ff

080137b4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80137b4:	b5b0      	push	{r4, r5, r7, lr}
 80137b6:	b090      	sub	sp, #64	; 0x40
 80137b8:	af04      	add	r7, sp, #16
 80137ba:	6078      	str	r0, [r7, #4]
 80137bc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80137be:	2300      	movs	r3, #0
 80137c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	2203      	movs	r2, #3
 80137c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137d0:	2b03      	cmp	r3, #3
 80137d2:	d02e      	beq.n	8013832 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80137d4:	683b      	ldr	r3, [r7, #0]
 80137d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80137da:	d106      	bne.n	80137ea <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	639a      	str	r2, [r3, #56]	; 0x38
 80137e8:	e029      	b.n	801383e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80137ea:	683b      	ldr	r3, [r7, #0]
 80137ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80137f0:	d10a      	bne.n	8013808 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80137f2:	6878      	ldr	r0, [r7, #4]
 80137f4:	f000 f9f6 	bl	8013be4 <SD_WideBus_Enable>
 80137f8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80137fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013800:	431a      	orrs	r2, r3
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	639a      	str	r2, [r3, #56]	; 0x38
 8013806:	e01a      	b.n	801383e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8013808:	683b      	ldr	r3, [r7, #0]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d10a      	bne.n	8013824 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 801380e:	6878      	ldr	r0, [r7, #4]
 8013810:	f000 fa33 	bl	8013c7a <SD_WideBus_Disable>
 8013814:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801381a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801381c:	431a      	orrs	r2, r3
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	639a      	str	r2, [r3, #56]	; 0x38
 8013822:	e00c      	b.n	801383e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013828:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	639a      	str	r2, [r3, #56]	; 0x38
 8013830:	e005      	b.n	801383e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013836:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013842:	2b00      	cmp	r3, #0
 8013844:	d007      	beq.n	8013856 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	4a35      	ldr	r2, [pc, #212]	; (8013920 <HAL_SD_ConfigWideBusOperation+0x16c>)
 801384c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 801384e:	2301      	movs	r3, #1
 8013850:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013854:	e042      	b.n	80138dc <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8013856:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 801385a:	f7fe faed 	bl	8011e38 <HAL_RCCEx_GetPeriphCLKFreq>
 801385e:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8013860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013862:	2b00      	cmp	r3, #0
 8013864:	d031      	beq.n	80138ca <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	685b      	ldr	r3, [r3, #4]
 801386a:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	689b      	ldr	r3, [r3, #8]
 8013870:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	68db      	ldr	r3, [r3, #12]
 8013876:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8013878:	683b      	ldr	r3, [r7, #0]
 801387a:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	695b      	ldr	r3, [r3, #20]
 8013880:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	699b      	ldr	r3, [r3, #24]
 8013886:	3302      	adds	r3, #2
 8013888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801388a:	fbb2 f3f3 	udiv	r3, r2, r3
 801388e:	4a25      	ldr	r2, [pc, #148]	; (8013924 <HAL_SD_ConfigWideBusOperation+0x170>)
 8013890:	4293      	cmp	r3, r2
 8013892:	d907      	bls.n	80138a4 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8013894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013896:	4a24      	ldr	r2, [pc, #144]	; (8013928 <HAL_SD_ConfigWideBusOperation+0x174>)
 8013898:	fba2 2303 	umull	r2, r3, r2, r3
 801389c:	0ddb      	lsrs	r3, r3, #23
 801389e:	3b02      	subs	r3, #2
 80138a0:	623b      	str	r3, [r7, #32]
 80138a2:	e002      	b.n	80138aa <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	699b      	ldr	r3, [r3, #24]
 80138a8:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	681d      	ldr	r5, [r3, #0]
 80138ae:	466c      	mov	r4, sp
 80138b0:	f107 0318 	add.w	r3, r7, #24
 80138b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80138b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80138bc:	f107 030c 	add.w	r3, r7, #12
 80138c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80138c2:	4628      	mov	r0, r5
 80138c4:	f002 fb8e 	bl	8015fe4 <SDMMC_Init>
 80138c8:	e008      	b.n	80138dc <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80138d6:	2301      	movs	r3, #1
 80138d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80138e4:	4618      	mov	r0, r3
 80138e6:	f002 fc4a 	bl	801617e <SDMMC_CmdBlockLength>
 80138ea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80138ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d00c      	beq.n	801390c <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	4a0a      	ldr	r2, [pc, #40]	; (8013920 <HAL_SD_ConfigWideBusOperation+0x16c>)
 80138f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80138fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013900:	431a      	orrs	r2, r3
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8013906:	2301      	movs	r3, #1
 8013908:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	2201      	movs	r2, #1
 8013910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8013914:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013918:	4618      	mov	r0, r3
 801391a:	3730      	adds	r7, #48	; 0x30
 801391c:	46bd      	mov	sp, r7
 801391e:	bdb0      	pop	{r4, r5, r7, pc}
 8013920:	004005ff 	.word	0x004005ff
 8013924:	017d7840 	.word	0x017d7840
 8013928:	55e63b89 	.word	0x55e63b89

0801392c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 801392c:	b5b0      	push	{r4, r5, r7, lr}
 801392e:	b094      	sub	sp, #80	; 0x50
 8013930:	af04      	add	r7, sp, #16
 8013932:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8013934:	2301      	movs	r3, #1
 8013936:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	4618      	mov	r0, r3
 801393e:	f002 fb9a 	bl	8016076 <SDMMC_GetPowerState>
 8013942:	4603      	mov	r3, r0
 8013944:	2b00      	cmp	r3, #0
 8013946:	d102      	bne.n	801394e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8013948:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 801394c:	e0b8      	b.n	8013ac0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013952:	2b03      	cmp	r3, #3
 8013954:	d02f      	beq.n	80139b6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	4618      	mov	r0, r3
 801395c:	f002 fd19 	bl	8016392 <SDMMC_CmdSendCID>
 8013960:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8013962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013964:	2b00      	cmp	r3, #0
 8013966:	d001      	beq.n	801396c <SD_InitCard+0x40>
    {
      return errorstate;
 8013968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801396a:	e0a9      	b.n	8013ac0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	2100      	movs	r1, #0
 8013972:	4618      	mov	r0, r3
 8013974:	f002 fbc4 	bl	8016100 <SDMMC_GetResponse>
 8013978:	4602      	mov	r2, r0
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	2104      	movs	r1, #4
 8013984:	4618      	mov	r0, r3
 8013986:	f002 fbbb 	bl	8016100 <SDMMC_GetResponse>
 801398a:	4602      	mov	r2, r0
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	2108      	movs	r1, #8
 8013996:	4618      	mov	r0, r3
 8013998:	f002 fbb2 	bl	8016100 <SDMMC_GetResponse>
 801399c:	4602      	mov	r2, r0
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	210c      	movs	r1, #12
 80139a8:	4618      	mov	r0, r3
 80139aa:	f002 fba9 	bl	8016100 <SDMMC_GetResponse>
 80139ae:	4602      	mov	r2, r0
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139ba:	2b03      	cmp	r3, #3
 80139bc:	d00d      	beq.n	80139da <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	f107 020e 	add.w	r2, r7, #14
 80139c6:	4611      	mov	r1, r2
 80139c8:	4618      	mov	r0, r3
 80139ca:	f002 fd1f 	bl	801640c <SDMMC_CmdSetRelAdd>
 80139ce:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80139d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d001      	beq.n	80139da <SD_InitCard+0xae>
    {
      return errorstate;
 80139d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139d8:	e072      	b.n	8013ac0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139de:	2b03      	cmp	r3, #3
 80139e0:	d036      	beq.n	8013a50 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80139e2:	89fb      	ldrh	r3, [r7, #14]
 80139e4:	461a      	mov	r2, r3
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	681a      	ldr	r2, [r3, #0]
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80139f2:	041b      	lsls	r3, r3, #16
 80139f4:	4619      	mov	r1, r3
 80139f6:	4610      	mov	r0, r2
 80139f8:	f002 fce9 	bl	80163ce <SDMMC_CmdSendCSD>
 80139fc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80139fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d001      	beq.n	8013a08 <SD_InitCard+0xdc>
    {
      return errorstate;
 8013a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a06:	e05b      	b.n	8013ac0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	2100      	movs	r1, #0
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f002 fb76 	bl	8016100 <SDMMC_GetResponse>
 8013a14:	4602      	mov	r2, r0
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	2104      	movs	r1, #4
 8013a20:	4618      	mov	r0, r3
 8013a22:	f002 fb6d 	bl	8016100 <SDMMC_GetResponse>
 8013a26:	4602      	mov	r2, r0
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	2108      	movs	r1, #8
 8013a32:	4618      	mov	r0, r3
 8013a34:	f002 fb64 	bl	8016100 <SDMMC_GetResponse>
 8013a38:	4602      	mov	r2, r0
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	210c      	movs	r1, #12
 8013a44:	4618      	mov	r0, r3
 8013a46:	f002 fb5b 	bl	8016100 <SDMMC_GetResponse>
 8013a4a:	4602      	mov	r2, r0
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	2104      	movs	r1, #4
 8013a56:	4618      	mov	r0, r3
 8013a58:	f002 fb52 	bl	8016100 <SDMMC_GetResponse>
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	0d1a      	lsrs	r2, r3, #20
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8013a64:	f107 0310 	add.w	r3, r7, #16
 8013a68:	4619      	mov	r1, r3
 8013a6a:	6878      	ldr	r0, [r7, #4]
 8013a6c:	f7ff fcfe 	bl	801346c <HAL_SD_GetCardCSD>
 8013a70:	4603      	mov	r3, r0
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d002      	beq.n	8013a7c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8013a76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013a7a:	e021      	b.n	8013ac0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	6819      	ldr	r1, [r3, #0]
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013a84:	041b      	lsls	r3, r3, #16
 8013a86:	2200      	movs	r2, #0
 8013a88:	461c      	mov	r4, r3
 8013a8a:	4615      	mov	r5, r2
 8013a8c:	4622      	mov	r2, r4
 8013a8e:	462b      	mov	r3, r5
 8013a90:	4608      	mov	r0, r1
 8013a92:	f002 fb96 	bl	80161c2 <SDMMC_CmdSelDesel>
 8013a96:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8013a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d001      	beq.n	8013aa2 <SD_InitCard+0x176>
  {
    return errorstate;
 8013a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013aa0:	e00e      	b.n	8013ac0 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	681d      	ldr	r5, [r3, #0]
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	466c      	mov	r4, sp
 8013aaa:	f103 0210 	add.w	r2, r3, #16
 8013aae:	ca07      	ldmia	r2, {r0, r1, r2}
 8013ab0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013ab4:	3304      	adds	r3, #4
 8013ab6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013ab8:	4628      	mov	r0, r5
 8013aba:	f002 fa93 	bl	8015fe4 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8013abe:	2300      	movs	r3, #0
}
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	3740      	adds	r7, #64	; 0x40
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bdb0      	pop	{r4, r5, r7, pc}

08013ac8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b086      	sub	sp, #24
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	617b      	str	r3, [r7, #20]
 8013ad8:	2300      	movs	r3, #0
 8013ada:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	f002 fb91 	bl	8016208 <SDMMC_CmdGoIdleState>
 8013ae6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d001      	beq.n	8013af2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	e072      	b.n	8013bd8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	4618      	mov	r0, r3
 8013af8:	f002 fba4 	bl	8016244 <SDMMC_CmdOperCond>
 8013afc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d00d      	beq.n	8013b20 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	2200      	movs	r2, #0
 8013b08:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	4618      	mov	r0, r3
 8013b10:	f002 fb7a 	bl	8016208 <SDMMC_CmdGoIdleState>
 8013b14:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d004      	beq.n	8013b26 <SD_PowerON+0x5e>
    {
      return errorstate;
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	e05b      	b.n	8013bd8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	2201      	movs	r2, #1
 8013b24:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013b2a:	2b01      	cmp	r3, #1
 8013b2c:	d137      	bne.n	8013b9e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	2100      	movs	r1, #0
 8013b34:	4618      	mov	r0, r3
 8013b36:	f002 fba4 	bl	8016282 <SDMMC_CmdAppCommand>
 8013b3a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d02d      	beq.n	8013b9e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8013b42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013b46:	e047      	b.n	8013bd8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	2100      	movs	r1, #0
 8013b4e:	4618      	mov	r0, r3
 8013b50:	f002 fb97 	bl	8016282 <SDMMC_CmdAppCommand>
 8013b54:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d001      	beq.n	8013b60 <SD_PowerON+0x98>
    {
      return errorstate;
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	e03b      	b.n	8013bd8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	491e      	ldr	r1, [pc, #120]	; (8013be0 <SD_PowerON+0x118>)
 8013b66:	4618      	mov	r0, r3
 8013b68:	f002 fbad 	bl	80162c6 <SDMMC_CmdAppOperCommand>
 8013b6c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d002      	beq.n	8013b7a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8013b74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013b78:	e02e      	b.n	8013bd8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	2100      	movs	r1, #0
 8013b80:	4618      	mov	r0, r3
 8013b82:	f002 fabd 	bl	8016100 <SDMMC_GetResponse>
 8013b86:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8013b88:	697b      	ldr	r3, [r7, #20]
 8013b8a:	0fdb      	lsrs	r3, r3, #31
 8013b8c:	2b01      	cmp	r3, #1
 8013b8e:	d101      	bne.n	8013b94 <SD_PowerON+0xcc>
 8013b90:	2301      	movs	r3, #1
 8013b92:	e000      	b.n	8013b96 <SD_PowerON+0xce>
 8013b94:	2300      	movs	r3, #0
 8013b96:	613b      	str	r3, [r7, #16]

    count++;
 8013b98:	68bb      	ldr	r3, [r7, #8]
 8013b9a:	3301      	adds	r3, #1
 8013b9c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8013b9e:	68bb      	ldr	r3, [r7, #8]
 8013ba0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013ba4:	4293      	cmp	r3, r2
 8013ba6:	d802      	bhi.n	8013bae <SD_PowerON+0xe6>
 8013ba8:	693b      	ldr	r3, [r7, #16]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d0cc      	beq.n	8013b48 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8013bae:	68bb      	ldr	r3, [r7, #8]
 8013bb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013bb4:	4293      	cmp	r3, r2
 8013bb6:	d902      	bls.n	8013bbe <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8013bb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8013bbc:	e00c      	b.n	8013bd8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8013bbe:	697b      	ldr	r3, [r7, #20]
 8013bc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d003      	beq.n	8013bd0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	2201      	movs	r2, #1
 8013bcc:	645a      	str	r2, [r3, #68]	; 0x44
 8013bce:	e002      	b.n	8013bd6 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	2200      	movs	r2, #0
 8013bd4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8013bd6:	2300      	movs	r3, #0
}
 8013bd8:	4618      	mov	r0, r3
 8013bda:	3718      	adds	r7, #24
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	bd80      	pop	{r7, pc}
 8013be0:	c1100000 	.word	0xc1100000

08013be4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b086      	sub	sp, #24
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8013bec:	2300      	movs	r3, #0
 8013bee:	60fb      	str	r3, [r7, #12]
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	2100      	movs	r1, #0
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	f002 fa80 	bl	8016100 <SDMMC_GetResponse>
 8013c00:	4603      	mov	r3, r0
 8013c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013c06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8013c0a:	d102      	bne.n	8013c12 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8013c0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013c10:	e02f      	b.n	8013c72 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8013c12:	f107 030c 	add.w	r3, r7, #12
 8013c16:	4619      	mov	r1, r3
 8013c18:	6878      	ldr	r0, [r7, #4]
 8013c1a:	f000 f879 	bl	8013d10 <SD_FindSCR>
 8013c1e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8013c20:	697b      	ldr	r3, [r7, #20]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d001      	beq.n	8013c2a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8013c26:	697b      	ldr	r3, [r7, #20]
 8013c28:	e023      	b.n	8013c72 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8013c2a:	693b      	ldr	r3, [r7, #16]
 8013c2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d01c      	beq.n	8013c6e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	681a      	ldr	r2, [r3, #0]
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c3c:	041b      	lsls	r3, r3, #16
 8013c3e:	4619      	mov	r1, r3
 8013c40:	4610      	mov	r0, r2
 8013c42:	f002 fb1e 	bl	8016282 <SDMMC_CmdAppCommand>
 8013c46:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013c48:	697b      	ldr	r3, [r7, #20]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d001      	beq.n	8013c52 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8013c4e:	697b      	ldr	r3, [r7, #20]
 8013c50:	e00f      	b.n	8013c72 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	2102      	movs	r1, #2
 8013c58:	4618      	mov	r0, r3
 8013c5a:	f002 fb57 	bl	801630c <SDMMC_CmdBusWidth>
 8013c5e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013c60:	697b      	ldr	r3, [r7, #20]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d001      	beq.n	8013c6a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8013c66:	697b      	ldr	r3, [r7, #20]
 8013c68:	e003      	b.n	8013c72 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	e001      	b.n	8013c72 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8013c6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8013c72:	4618      	mov	r0, r3
 8013c74:	3718      	adds	r7, #24
 8013c76:	46bd      	mov	sp, r7
 8013c78:	bd80      	pop	{r7, pc}

08013c7a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8013c7a:	b580      	push	{r7, lr}
 8013c7c:	b086      	sub	sp, #24
 8013c7e:	af00      	add	r7, sp, #0
 8013c80:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8013c82:	2300      	movs	r3, #0
 8013c84:	60fb      	str	r3, [r7, #12]
 8013c86:	2300      	movs	r3, #0
 8013c88:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	2100      	movs	r1, #0
 8013c90:	4618      	mov	r0, r3
 8013c92:	f002 fa35 	bl	8016100 <SDMMC_GetResponse>
 8013c96:	4603      	mov	r3, r0
 8013c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013c9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8013ca0:	d102      	bne.n	8013ca8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8013ca2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013ca6:	e02f      	b.n	8013d08 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8013ca8:	f107 030c 	add.w	r3, r7, #12
 8013cac:	4619      	mov	r1, r3
 8013cae:	6878      	ldr	r0, [r7, #4]
 8013cb0:	f000 f82e 	bl	8013d10 <SD_FindSCR>
 8013cb4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8013cb6:	697b      	ldr	r3, [r7, #20]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d001      	beq.n	8013cc0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8013cbc:	697b      	ldr	r3, [r7, #20]
 8013cbe:	e023      	b.n	8013d08 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8013cc0:	693b      	ldr	r3, [r7, #16]
 8013cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d01c      	beq.n	8013d04 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	681a      	ldr	r2, [r3, #0]
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013cd2:	041b      	lsls	r3, r3, #16
 8013cd4:	4619      	mov	r1, r3
 8013cd6:	4610      	mov	r0, r2
 8013cd8:	f002 fad3 	bl	8016282 <SDMMC_CmdAppCommand>
 8013cdc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013cde:	697b      	ldr	r3, [r7, #20]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d001      	beq.n	8013ce8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8013ce4:	697b      	ldr	r3, [r7, #20]
 8013ce6:	e00f      	b.n	8013d08 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	2100      	movs	r1, #0
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f002 fb0c 	bl	801630c <SDMMC_CmdBusWidth>
 8013cf4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013cf6:	697b      	ldr	r3, [r7, #20]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d001      	beq.n	8013d00 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8013cfc:	697b      	ldr	r3, [r7, #20]
 8013cfe:	e003      	b.n	8013d08 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8013d00:	2300      	movs	r3, #0
 8013d02:	e001      	b.n	8013d08 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8013d04:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8013d08:	4618      	mov	r0, r3
 8013d0a:	3718      	adds	r7, #24
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bd80      	pop	{r7, pc}

08013d10 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8013d10:	b590      	push	{r4, r7, lr}
 8013d12:	b08f      	sub	sp, #60	; 0x3c
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	6078      	str	r0, [r7, #4]
 8013d18:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8013d1a:	f7f8 f9e7 	bl	800c0ec <HAL_GetTick>
 8013d1e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8013d20:	2300      	movs	r3, #0
 8013d22:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8013d24:	2300      	movs	r3, #0
 8013d26:	60bb      	str	r3, [r7, #8]
 8013d28:	2300      	movs	r3, #0
 8013d2a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8013d2c:	683b      	ldr	r3, [r7, #0]
 8013d2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	2108      	movs	r1, #8
 8013d36:	4618      	mov	r0, r3
 8013d38:	f002 fa21 	bl	801617e <SDMMC_CmdBlockLength>
 8013d3c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8013d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d001      	beq.n	8013d48 <SD_FindSCR+0x38>
  {
    return errorstate;
 8013d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d46:	e0a9      	b.n	8013e9c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	681a      	ldr	r2, [r3, #0]
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d50:	041b      	lsls	r3, r3, #16
 8013d52:	4619      	mov	r1, r3
 8013d54:	4610      	mov	r0, r2
 8013d56:	f002 fa94 	bl	8016282 <SDMMC_CmdAppCommand>
 8013d5a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8013d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d001      	beq.n	8013d66 <SD_FindSCR+0x56>
  {
    return errorstate;
 8013d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d64:	e09a      	b.n	8013e9c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8013d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d6a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8013d6c:	2308      	movs	r3, #8
 8013d6e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8013d70:	2330      	movs	r3, #48	; 0x30
 8013d72:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8013d74:	2302      	movs	r3, #2
 8013d76:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8013d78:	2300      	movs	r3, #0
 8013d7a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	f107 0210 	add.w	r2, r7, #16
 8013d88:	4611      	mov	r1, r2
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	f002 f9cb 	bl	8016126 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	4618      	mov	r0, r3
 8013d96:	f002 fadb 	bl	8016350 <SDMMC_CmdSendSCR>
 8013d9a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8013d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d022      	beq.n	8013de8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8013da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013da4:	e07a      	b.n	8013e9c <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d00e      	beq.n	8013dd2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	6819      	ldr	r1, [r3, #0]
 8013db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dba:	009b      	lsls	r3, r3, #2
 8013dbc:	f107 0208 	add.w	r2, r7, #8
 8013dc0:	18d4      	adds	r4, r2, r3
 8013dc2:	4608      	mov	r0, r1
 8013dc4:	f002 f93b 	bl	801603e <SDMMC_ReadFIFO>
 8013dc8:	4603      	mov	r3, r0
 8013dca:	6023      	str	r3, [r4, #0]
      index++;
 8013dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dce:	3301      	adds	r3, #1
 8013dd0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8013dd2:	f7f8 f98b 	bl	800c0ec <HAL_GetTick>
 8013dd6:	4602      	mov	r2, r0
 8013dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dda:	1ad3      	subs	r3, r2, r3
 8013ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013de0:	d102      	bne.n	8013de8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8013de2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013de6:	e059      	b.n	8013e9c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013dee:	f240 432a 	movw	r3, #1066	; 0x42a
 8013df2:	4013      	ands	r3, r2
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d0d6      	beq.n	8013da6 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013dfe:	f003 0308 	and.w	r3, r3, #8
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d005      	beq.n	8013e12 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	2208      	movs	r2, #8
 8013e0c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8013e0e:	2308      	movs	r3, #8
 8013e10:	e044      	b.n	8013e9c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e18:	f003 0302 	and.w	r3, r3, #2
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d005      	beq.n	8013e2c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	2202      	movs	r2, #2
 8013e26:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8013e28:	2302      	movs	r3, #2
 8013e2a:	e037      	b.n	8013e9c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e32:	f003 0320 	and.w	r3, r3, #32
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d005      	beq.n	8013e46 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	2220      	movs	r2, #32
 8013e40:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8013e42:	2320      	movs	r3, #32
 8013e44:	e02a      	b.n	8013e9c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	f240 523a 	movw	r2, #1338	; 0x53a
 8013e4e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	061a      	lsls	r2, r3, #24
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	021b      	lsls	r3, r3, #8
 8013e58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013e5c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	0a1b      	lsrs	r3, r3, #8
 8013e62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8013e66:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	0e1b      	lsrs	r3, r3, #24
 8013e6c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8013e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e70:	601a      	str	r2, [r3, #0]
    scr++;
 8013e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e74:	3304      	adds	r3, #4
 8013e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8013e78:	68bb      	ldr	r3, [r7, #8]
 8013e7a:	061a      	lsls	r2, r3, #24
 8013e7c:	68bb      	ldr	r3, [r7, #8]
 8013e7e:	021b      	lsls	r3, r3, #8
 8013e80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013e84:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8013e86:	68bb      	ldr	r3, [r7, #8]
 8013e88:	0a1b      	lsrs	r3, r3, #8
 8013e8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8013e8e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8013e90:	68bb      	ldr	r3, [r7, #8]
 8013e92:	0e1b      	lsrs	r3, r3, #24
 8013e94:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8013e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e98:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8013e9a:	2300      	movs	r3, #0
}
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	373c      	adds	r7, #60	; 0x3c
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	bd90      	pop	{r4, r7, pc}

08013ea4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b084      	sub	sp, #16
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d101      	bne.n	8013eb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8013eb2:	2301      	movs	r3, #1
 8013eb4:	e095      	b.n	8013fe2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d108      	bne.n	8013ed0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	685b      	ldr	r3, [r3, #4]
 8013ec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013ec6:	d009      	beq.n	8013edc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	2200      	movs	r2, #0
 8013ecc:	61da      	str	r2, [r3, #28]
 8013ece:	e005      	b.n	8013edc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	2200      	movs	r2, #0
 8013ed4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	2200      	movs	r2, #0
 8013eda:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	2200      	movs	r2, #0
 8013ee0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013ee8:	b2db      	uxtb	r3, r3
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d106      	bne.n	8013efc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	2200      	movs	r2, #0
 8013ef2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8013ef6:	6878      	ldr	r0, [r7, #4]
 8013ef8:	f7ef fa58 	bl	80033ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	2202      	movs	r2, #2
 8013f00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	681a      	ldr	r2, [r3, #0]
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013f12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	68db      	ldr	r3, [r3, #12]
 8013f18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013f1c:	d902      	bls.n	8013f24 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8013f1e:	2300      	movs	r3, #0
 8013f20:	60fb      	str	r3, [r7, #12]
 8013f22:	e002      	b.n	8013f2a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8013f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013f28:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	68db      	ldr	r3, [r3, #12]
 8013f2e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8013f32:	d007      	beq.n	8013f44 <HAL_SPI_Init+0xa0>
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	68db      	ldr	r3, [r3, #12]
 8013f38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013f3c:	d002      	beq.n	8013f44 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	2200      	movs	r2, #0
 8013f42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	685b      	ldr	r3, [r3, #4]
 8013f48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	689b      	ldr	r3, [r3, #8]
 8013f50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8013f54:	431a      	orrs	r2, r3
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	691b      	ldr	r3, [r3, #16]
 8013f5a:	f003 0302 	and.w	r3, r3, #2
 8013f5e:	431a      	orrs	r2, r3
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	695b      	ldr	r3, [r3, #20]
 8013f64:	f003 0301 	and.w	r3, r3, #1
 8013f68:	431a      	orrs	r2, r3
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	699b      	ldr	r3, [r3, #24]
 8013f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013f72:	431a      	orrs	r2, r3
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	69db      	ldr	r3, [r3, #28]
 8013f78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013f7c:	431a      	orrs	r2, r3
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	6a1b      	ldr	r3, [r3, #32]
 8013f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013f86:	ea42 0103 	orr.w	r1, r2, r3
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f8e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	430a      	orrs	r2, r1
 8013f98:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	699b      	ldr	r3, [r3, #24]
 8013f9e:	0c1b      	lsrs	r3, r3, #16
 8013fa0:	f003 0204 	and.w	r2, r3, #4
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fa8:	f003 0310 	and.w	r3, r3, #16
 8013fac:	431a      	orrs	r2, r3
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013fb2:	f003 0308 	and.w	r3, r3, #8
 8013fb6:	431a      	orrs	r2, r3
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	68db      	ldr	r3, [r3, #12]
 8013fbc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8013fc0:	ea42 0103 	orr.w	r1, r2, r3
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	430a      	orrs	r2, r1
 8013fd0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	2201      	movs	r2, #1
 8013fdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8013fe0:	2300      	movs	r3, #0
}
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	3710      	adds	r7, #16
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	bd80      	pop	{r7, pc}

08013fea <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8013fea:	b580      	push	{r7, lr}
 8013fec:	b084      	sub	sp, #16
 8013fee:	af00      	add	r7, sp, #0
 8013ff0:	60f8      	str	r0, [r7, #12]
 8013ff2:	60b9      	str	r1, [r7, #8]
 8013ff4:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d101      	bne.n	8014000 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8013ffc:	2301      	movs	r3, #1
 8013ffe:	e038      	b.n	8014072 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8014006:	b2db      	uxtb	r3, r3
 8014008:	2b00      	cmp	r3, #0
 801400a:	d106      	bne.n	801401a <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	2200      	movs	r2, #0
 8014010:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8014014:	68f8      	ldr	r0, [r7, #12]
 8014016:	f7ed fbb5 	bl	8001784 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	681a      	ldr	r2, [r3, #0]
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	3308      	adds	r3, #8
 8014022:	4619      	mov	r1, r3
 8014024:	4610      	mov	r0, r2
 8014026:	f001 fec5 	bl	8015db4 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	6818      	ldr	r0, [r3, #0]
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	689b      	ldr	r3, [r3, #8]
 8014032:	461a      	mov	r2, r3
 8014034:	68b9      	ldr	r1, [r7, #8]
 8014036:	f001 ff4d 	bl	8015ed4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	6858      	ldr	r0, [r3, #4]
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	689a      	ldr	r2, [r3, #8]
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014046:	6879      	ldr	r1, [r7, #4]
 8014048:	f001 ff94 	bl	8015f74 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	68fa      	ldr	r2, [r7, #12]
 8014052:	6892      	ldr	r2, [r2, #8]
 8014054:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	68fa      	ldr	r2, [r7, #12]
 801405e:	6892      	ldr	r2, [r2, #8]
 8014060:	f041 0101 	orr.w	r1, r1, #1
 8014064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	2201      	movs	r2, #1
 801406c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8014070:	2300      	movs	r3, #0
}
 8014072:	4618      	mov	r0, r3
 8014074:	3710      	adds	r7, #16
 8014076:	46bd      	mov	sp, r7
 8014078:	bd80      	pop	{r7, pc}

0801407a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801407a:	b580      	push	{r7, lr}
 801407c:	b082      	sub	sp, #8
 801407e:	af00      	add	r7, sp, #0
 8014080:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d101      	bne.n	801408c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8014088:	2301      	movs	r3, #1
 801408a:	e049      	b.n	8014120 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014092:	b2db      	uxtb	r3, r3
 8014094:	2b00      	cmp	r3, #0
 8014096:	d106      	bne.n	80140a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	2200      	movs	r2, #0
 801409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80140a0:	6878      	ldr	r0, [r7, #4]
 80140a2:	f7ef fb9b 	bl	80037dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	2202      	movs	r2, #2
 80140aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	681a      	ldr	r2, [r3, #0]
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	3304      	adds	r3, #4
 80140b6:	4619      	mov	r1, r3
 80140b8:	4610      	mov	r0, r2
 80140ba:	f000 fcf5 	bl	8014aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	2201      	movs	r2, #1
 80140c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	2201      	movs	r2, #1
 80140ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	2201      	movs	r2, #1
 80140d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	2201      	movs	r2, #1
 80140da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	2201      	movs	r2, #1
 80140e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	2201      	movs	r2, #1
 80140ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	2201      	movs	r2, #1
 80140f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	2201      	movs	r2, #1
 80140fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	2201      	movs	r2, #1
 8014102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	2201      	movs	r2, #1
 801410a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	2201      	movs	r2, #1
 8014112:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	2201      	movs	r2, #1
 801411a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801411e:	2300      	movs	r3, #0
}
 8014120:	4618      	mov	r0, r3
 8014122:	3708      	adds	r7, #8
 8014124:	46bd      	mov	sp, r7
 8014126:	bd80      	pop	{r7, pc}

08014128 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8014128:	b480      	push	{r7}
 801412a:	b085      	sub	sp, #20
 801412c:	af00      	add	r7, sp, #0
 801412e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014136:	b2db      	uxtb	r3, r3
 8014138:	2b01      	cmp	r3, #1
 801413a:	d001      	beq.n	8014140 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801413c:	2301      	movs	r3, #1
 801413e:	e04f      	b.n	80141e0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	2202      	movs	r2, #2
 8014144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	68da      	ldr	r2, [r3, #12]
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	f042 0201 	orr.w	r2, r2, #1
 8014156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	4a23      	ldr	r2, [pc, #140]	; (80141ec <HAL_TIM_Base_Start_IT+0xc4>)
 801415e:	4293      	cmp	r3, r2
 8014160:	d01d      	beq.n	801419e <HAL_TIM_Base_Start_IT+0x76>
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801416a:	d018      	beq.n	801419e <HAL_TIM_Base_Start_IT+0x76>
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	4a1f      	ldr	r2, [pc, #124]	; (80141f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8014172:	4293      	cmp	r3, r2
 8014174:	d013      	beq.n	801419e <HAL_TIM_Base_Start_IT+0x76>
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	4a1e      	ldr	r2, [pc, #120]	; (80141f4 <HAL_TIM_Base_Start_IT+0xcc>)
 801417c:	4293      	cmp	r3, r2
 801417e:	d00e      	beq.n	801419e <HAL_TIM_Base_Start_IT+0x76>
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	4a1c      	ldr	r2, [pc, #112]	; (80141f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8014186:	4293      	cmp	r3, r2
 8014188:	d009      	beq.n	801419e <HAL_TIM_Base_Start_IT+0x76>
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	4a1b      	ldr	r2, [pc, #108]	; (80141fc <HAL_TIM_Base_Start_IT+0xd4>)
 8014190:	4293      	cmp	r3, r2
 8014192:	d004      	beq.n	801419e <HAL_TIM_Base_Start_IT+0x76>
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	4a19      	ldr	r2, [pc, #100]	; (8014200 <HAL_TIM_Base_Start_IT+0xd8>)
 801419a:	4293      	cmp	r3, r2
 801419c:	d115      	bne.n	80141ca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	689a      	ldr	r2, [r3, #8]
 80141a4:	4b17      	ldr	r3, [pc, #92]	; (8014204 <HAL_TIM_Base_Start_IT+0xdc>)
 80141a6:	4013      	ands	r3, r2
 80141a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	2b06      	cmp	r3, #6
 80141ae:	d015      	beq.n	80141dc <HAL_TIM_Base_Start_IT+0xb4>
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80141b6:	d011      	beq.n	80141dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	681a      	ldr	r2, [r3, #0]
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	f042 0201 	orr.w	r2, r2, #1
 80141c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80141c8:	e008      	b.n	80141dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	681a      	ldr	r2, [r3, #0]
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	f042 0201 	orr.w	r2, r2, #1
 80141d8:	601a      	str	r2, [r3, #0]
 80141da:	e000      	b.n	80141de <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80141dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80141de:	2300      	movs	r3, #0
}
 80141e0:	4618      	mov	r0, r3
 80141e2:	3714      	adds	r7, #20
 80141e4:	46bd      	mov	sp, r7
 80141e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ea:	4770      	bx	lr
 80141ec:	40012c00 	.word	0x40012c00
 80141f0:	40000400 	.word	0x40000400
 80141f4:	40000800 	.word	0x40000800
 80141f8:	40000c00 	.word	0x40000c00
 80141fc:	40013400 	.word	0x40013400
 8014200:	40014000 	.word	0x40014000
 8014204:	00010007 	.word	0x00010007

08014208 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8014208:	b580      	push	{r7, lr}
 801420a:	b082      	sub	sp, #8
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d101      	bne.n	801421a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8014216:	2301      	movs	r3, #1
 8014218:	e049      	b.n	80142ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014220:	b2db      	uxtb	r3, r3
 8014222:	2b00      	cmp	r3, #0
 8014224:	d106      	bne.n	8014234 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	2200      	movs	r2, #0
 801422a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801422e:	6878      	ldr	r0, [r7, #4]
 8014230:	f7f7 fbb8 	bl	800b9a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2202      	movs	r2, #2
 8014238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	681a      	ldr	r2, [r3, #0]
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	3304      	adds	r3, #4
 8014244:	4619      	mov	r1, r3
 8014246:	4610      	mov	r0, r2
 8014248:	f000 fc2e 	bl	8014aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	2201      	movs	r2, #1
 8014250:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	2201      	movs	r2, #1
 8014258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	2201      	movs	r2, #1
 8014260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	2201      	movs	r2, #1
 8014268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	2201      	movs	r2, #1
 8014270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	2201      	movs	r2, #1
 8014278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	2201      	movs	r2, #1
 8014280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	2201      	movs	r2, #1
 8014288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	2201      	movs	r2, #1
 8014290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	2201      	movs	r2, #1
 8014298:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	2201      	movs	r2, #1
 80142a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	2201      	movs	r2, #1
 80142a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80142ac:	2300      	movs	r3, #0
}
 80142ae:	4618      	mov	r0, r3
 80142b0:	3708      	adds	r7, #8
 80142b2:	46bd      	mov	sp, r7
 80142b4:	bd80      	pop	{r7, pc}
	...

080142b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80142b8:	b580      	push	{r7, lr}
 80142ba:	b084      	sub	sp, #16
 80142bc:	af00      	add	r7, sp, #0
 80142be:	6078      	str	r0, [r7, #4]
 80142c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80142c2:	683b      	ldr	r3, [r7, #0]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d109      	bne.n	80142dc <HAL_TIM_PWM_Start+0x24>
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80142ce:	b2db      	uxtb	r3, r3
 80142d0:	2b01      	cmp	r3, #1
 80142d2:	bf14      	ite	ne
 80142d4:	2301      	movne	r3, #1
 80142d6:	2300      	moveq	r3, #0
 80142d8:	b2db      	uxtb	r3, r3
 80142da:	e03c      	b.n	8014356 <HAL_TIM_PWM_Start+0x9e>
 80142dc:	683b      	ldr	r3, [r7, #0]
 80142de:	2b04      	cmp	r3, #4
 80142e0:	d109      	bne.n	80142f6 <HAL_TIM_PWM_Start+0x3e>
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80142e8:	b2db      	uxtb	r3, r3
 80142ea:	2b01      	cmp	r3, #1
 80142ec:	bf14      	ite	ne
 80142ee:	2301      	movne	r3, #1
 80142f0:	2300      	moveq	r3, #0
 80142f2:	b2db      	uxtb	r3, r3
 80142f4:	e02f      	b.n	8014356 <HAL_TIM_PWM_Start+0x9e>
 80142f6:	683b      	ldr	r3, [r7, #0]
 80142f8:	2b08      	cmp	r3, #8
 80142fa:	d109      	bne.n	8014310 <HAL_TIM_PWM_Start+0x58>
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014302:	b2db      	uxtb	r3, r3
 8014304:	2b01      	cmp	r3, #1
 8014306:	bf14      	ite	ne
 8014308:	2301      	movne	r3, #1
 801430a:	2300      	moveq	r3, #0
 801430c:	b2db      	uxtb	r3, r3
 801430e:	e022      	b.n	8014356 <HAL_TIM_PWM_Start+0x9e>
 8014310:	683b      	ldr	r3, [r7, #0]
 8014312:	2b0c      	cmp	r3, #12
 8014314:	d109      	bne.n	801432a <HAL_TIM_PWM_Start+0x72>
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801431c:	b2db      	uxtb	r3, r3
 801431e:	2b01      	cmp	r3, #1
 8014320:	bf14      	ite	ne
 8014322:	2301      	movne	r3, #1
 8014324:	2300      	moveq	r3, #0
 8014326:	b2db      	uxtb	r3, r3
 8014328:	e015      	b.n	8014356 <HAL_TIM_PWM_Start+0x9e>
 801432a:	683b      	ldr	r3, [r7, #0]
 801432c:	2b10      	cmp	r3, #16
 801432e:	d109      	bne.n	8014344 <HAL_TIM_PWM_Start+0x8c>
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014336:	b2db      	uxtb	r3, r3
 8014338:	2b01      	cmp	r3, #1
 801433a:	bf14      	ite	ne
 801433c:	2301      	movne	r3, #1
 801433e:	2300      	moveq	r3, #0
 8014340:	b2db      	uxtb	r3, r3
 8014342:	e008      	b.n	8014356 <HAL_TIM_PWM_Start+0x9e>
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801434a:	b2db      	uxtb	r3, r3
 801434c:	2b01      	cmp	r3, #1
 801434e:	bf14      	ite	ne
 8014350:	2301      	movne	r3, #1
 8014352:	2300      	moveq	r3, #0
 8014354:	b2db      	uxtb	r3, r3
 8014356:	2b00      	cmp	r3, #0
 8014358:	d001      	beq.n	801435e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801435a:	2301      	movs	r3, #1
 801435c:	e09c      	b.n	8014498 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801435e:	683b      	ldr	r3, [r7, #0]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d104      	bne.n	801436e <HAL_TIM_PWM_Start+0xb6>
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	2202      	movs	r2, #2
 8014368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801436c:	e023      	b.n	80143b6 <HAL_TIM_PWM_Start+0xfe>
 801436e:	683b      	ldr	r3, [r7, #0]
 8014370:	2b04      	cmp	r3, #4
 8014372:	d104      	bne.n	801437e <HAL_TIM_PWM_Start+0xc6>
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	2202      	movs	r2, #2
 8014378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801437c:	e01b      	b.n	80143b6 <HAL_TIM_PWM_Start+0xfe>
 801437e:	683b      	ldr	r3, [r7, #0]
 8014380:	2b08      	cmp	r3, #8
 8014382:	d104      	bne.n	801438e <HAL_TIM_PWM_Start+0xd6>
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	2202      	movs	r2, #2
 8014388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801438c:	e013      	b.n	80143b6 <HAL_TIM_PWM_Start+0xfe>
 801438e:	683b      	ldr	r3, [r7, #0]
 8014390:	2b0c      	cmp	r3, #12
 8014392:	d104      	bne.n	801439e <HAL_TIM_PWM_Start+0xe6>
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	2202      	movs	r2, #2
 8014398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801439c:	e00b      	b.n	80143b6 <HAL_TIM_PWM_Start+0xfe>
 801439e:	683b      	ldr	r3, [r7, #0]
 80143a0:	2b10      	cmp	r3, #16
 80143a2:	d104      	bne.n	80143ae <HAL_TIM_PWM_Start+0xf6>
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	2202      	movs	r2, #2
 80143a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80143ac:	e003      	b.n	80143b6 <HAL_TIM_PWM_Start+0xfe>
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	2202      	movs	r2, #2
 80143b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	2201      	movs	r2, #1
 80143bc:	6839      	ldr	r1, [r7, #0]
 80143be:	4618      	mov	r0, r3
 80143c0:	f000 fee2 	bl	8015188 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	4a35      	ldr	r2, [pc, #212]	; (80144a0 <HAL_TIM_PWM_Start+0x1e8>)
 80143ca:	4293      	cmp	r3, r2
 80143cc:	d013      	beq.n	80143f6 <HAL_TIM_PWM_Start+0x13e>
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	4a34      	ldr	r2, [pc, #208]	; (80144a4 <HAL_TIM_PWM_Start+0x1ec>)
 80143d4:	4293      	cmp	r3, r2
 80143d6:	d00e      	beq.n	80143f6 <HAL_TIM_PWM_Start+0x13e>
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	4a32      	ldr	r2, [pc, #200]	; (80144a8 <HAL_TIM_PWM_Start+0x1f0>)
 80143de:	4293      	cmp	r3, r2
 80143e0:	d009      	beq.n	80143f6 <HAL_TIM_PWM_Start+0x13e>
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	4a31      	ldr	r2, [pc, #196]	; (80144ac <HAL_TIM_PWM_Start+0x1f4>)
 80143e8:	4293      	cmp	r3, r2
 80143ea:	d004      	beq.n	80143f6 <HAL_TIM_PWM_Start+0x13e>
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	4a2f      	ldr	r2, [pc, #188]	; (80144b0 <HAL_TIM_PWM_Start+0x1f8>)
 80143f2:	4293      	cmp	r3, r2
 80143f4:	d101      	bne.n	80143fa <HAL_TIM_PWM_Start+0x142>
 80143f6:	2301      	movs	r3, #1
 80143f8:	e000      	b.n	80143fc <HAL_TIM_PWM_Start+0x144>
 80143fa:	2300      	movs	r3, #0
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d007      	beq.n	8014410 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801440e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	4a22      	ldr	r2, [pc, #136]	; (80144a0 <HAL_TIM_PWM_Start+0x1e8>)
 8014416:	4293      	cmp	r3, r2
 8014418:	d01d      	beq.n	8014456 <HAL_TIM_PWM_Start+0x19e>
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014422:	d018      	beq.n	8014456 <HAL_TIM_PWM_Start+0x19e>
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	4a22      	ldr	r2, [pc, #136]	; (80144b4 <HAL_TIM_PWM_Start+0x1fc>)
 801442a:	4293      	cmp	r3, r2
 801442c:	d013      	beq.n	8014456 <HAL_TIM_PWM_Start+0x19e>
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	4a21      	ldr	r2, [pc, #132]	; (80144b8 <HAL_TIM_PWM_Start+0x200>)
 8014434:	4293      	cmp	r3, r2
 8014436:	d00e      	beq.n	8014456 <HAL_TIM_PWM_Start+0x19e>
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	4a1f      	ldr	r2, [pc, #124]	; (80144bc <HAL_TIM_PWM_Start+0x204>)
 801443e:	4293      	cmp	r3, r2
 8014440:	d009      	beq.n	8014456 <HAL_TIM_PWM_Start+0x19e>
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	4a17      	ldr	r2, [pc, #92]	; (80144a4 <HAL_TIM_PWM_Start+0x1ec>)
 8014448:	4293      	cmp	r3, r2
 801444a:	d004      	beq.n	8014456 <HAL_TIM_PWM_Start+0x19e>
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	4a15      	ldr	r2, [pc, #84]	; (80144a8 <HAL_TIM_PWM_Start+0x1f0>)
 8014452:	4293      	cmp	r3, r2
 8014454:	d115      	bne.n	8014482 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	689a      	ldr	r2, [r3, #8]
 801445c:	4b18      	ldr	r3, [pc, #96]	; (80144c0 <HAL_TIM_PWM_Start+0x208>)
 801445e:	4013      	ands	r3, r2
 8014460:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	2b06      	cmp	r3, #6
 8014466:	d015      	beq.n	8014494 <HAL_TIM_PWM_Start+0x1dc>
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801446e:	d011      	beq.n	8014494 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	681a      	ldr	r2, [r3, #0]
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	f042 0201 	orr.w	r2, r2, #1
 801447e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014480:	e008      	b.n	8014494 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	681a      	ldr	r2, [r3, #0]
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	f042 0201 	orr.w	r2, r2, #1
 8014490:	601a      	str	r2, [r3, #0]
 8014492:	e000      	b.n	8014496 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014494:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8014496:	2300      	movs	r3, #0
}
 8014498:	4618      	mov	r0, r3
 801449a:	3710      	adds	r7, #16
 801449c:	46bd      	mov	sp, r7
 801449e:	bd80      	pop	{r7, pc}
 80144a0:	40012c00 	.word	0x40012c00
 80144a4:	40013400 	.word	0x40013400
 80144a8:	40014000 	.word	0x40014000
 80144ac:	40014400 	.word	0x40014400
 80144b0:	40014800 	.word	0x40014800
 80144b4:	40000400 	.word	0x40000400
 80144b8:	40000800 	.word	0x40000800
 80144bc:	40000c00 	.word	0x40000c00
 80144c0:	00010007 	.word	0x00010007

080144c4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b082      	sub	sp, #8
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
 80144cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	2200      	movs	r2, #0
 80144d4:	6839      	ldr	r1, [r7, #0]
 80144d6:	4618      	mov	r0, r3
 80144d8:	f000 fe56 	bl	8015188 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	4a3e      	ldr	r2, [pc, #248]	; (80145dc <HAL_TIM_PWM_Stop+0x118>)
 80144e2:	4293      	cmp	r3, r2
 80144e4:	d013      	beq.n	801450e <HAL_TIM_PWM_Stop+0x4a>
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	4a3d      	ldr	r2, [pc, #244]	; (80145e0 <HAL_TIM_PWM_Stop+0x11c>)
 80144ec:	4293      	cmp	r3, r2
 80144ee:	d00e      	beq.n	801450e <HAL_TIM_PWM_Stop+0x4a>
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	4a3b      	ldr	r2, [pc, #236]	; (80145e4 <HAL_TIM_PWM_Stop+0x120>)
 80144f6:	4293      	cmp	r3, r2
 80144f8:	d009      	beq.n	801450e <HAL_TIM_PWM_Stop+0x4a>
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	4a3a      	ldr	r2, [pc, #232]	; (80145e8 <HAL_TIM_PWM_Stop+0x124>)
 8014500:	4293      	cmp	r3, r2
 8014502:	d004      	beq.n	801450e <HAL_TIM_PWM_Stop+0x4a>
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	4a38      	ldr	r2, [pc, #224]	; (80145ec <HAL_TIM_PWM_Stop+0x128>)
 801450a:	4293      	cmp	r3, r2
 801450c:	d101      	bne.n	8014512 <HAL_TIM_PWM_Stop+0x4e>
 801450e:	2301      	movs	r3, #1
 8014510:	e000      	b.n	8014514 <HAL_TIM_PWM_Stop+0x50>
 8014512:	2300      	movs	r3, #0
 8014514:	2b00      	cmp	r3, #0
 8014516:	d017      	beq.n	8014548 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	6a1a      	ldr	r2, [r3, #32]
 801451e:	f241 1311 	movw	r3, #4369	; 0x1111
 8014522:	4013      	ands	r3, r2
 8014524:	2b00      	cmp	r3, #0
 8014526:	d10f      	bne.n	8014548 <HAL_TIM_PWM_Stop+0x84>
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	6a1a      	ldr	r2, [r3, #32]
 801452e:	f240 4344 	movw	r3, #1092	; 0x444
 8014532:	4013      	ands	r3, r2
 8014534:	2b00      	cmp	r3, #0
 8014536:	d107      	bne.n	8014548 <HAL_TIM_PWM_Stop+0x84>
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8014546:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	6a1a      	ldr	r2, [r3, #32]
 801454e:	f241 1311 	movw	r3, #4369	; 0x1111
 8014552:	4013      	ands	r3, r2
 8014554:	2b00      	cmp	r3, #0
 8014556:	d10f      	bne.n	8014578 <HAL_TIM_PWM_Stop+0xb4>
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	6a1a      	ldr	r2, [r3, #32]
 801455e:	f240 4344 	movw	r3, #1092	; 0x444
 8014562:	4013      	ands	r3, r2
 8014564:	2b00      	cmp	r3, #0
 8014566:	d107      	bne.n	8014578 <HAL_TIM_PWM_Stop+0xb4>
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	681a      	ldr	r2, [r3, #0]
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	f022 0201 	bic.w	r2, r2, #1
 8014576:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8014578:	683b      	ldr	r3, [r7, #0]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d104      	bne.n	8014588 <HAL_TIM_PWM_Stop+0xc4>
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	2201      	movs	r2, #1
 8014582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014586:	e023      	b.n	80145d0 <HAL_TIM_PWM_Stop+0x10c>
 8014588:	683b      	ldr	r3, [r7, #0]
 801458a:	2b04      	cmp	r3, #4
 801458c:	d104      	bne.n	8014598 <HAL_TIM_PWM_Stop+0xd4>
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	2201      	movs	r2, #1
 8014592:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014596:	e01b      	b.n	80145d0 <HAL_TIM_PWM_Stop+0x10c>
 8014598:	683b      	ldr	r3, [r7, #0]
 801459a:	2b08      	cmp	r3, #8
 801459c:	d104      	bne.n	80145a8 <HAL_TIM_PWM_Stop+0xe4>
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	2201      	movs	r2, #1
 80145a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80145a6:	e013      	b.n	80145d0 <HAL_TIM_PWM_Stop+0x10c>
 80145a8:	683b      	ldr	r3, [r7, #0]
 80145aa:	2b0c      	cmp	r3, #12
 80145ac:	d104      	bne.n	80145b8 <HAL_TIM_PWM_Stop+0xf4>
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	2201      	movs	r2, #1
 80145b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80145b6:	e00b      	b.n	80145d0 <HAL_TIM_PWM_Stop+0x10c>
 80145b8:	683b      	ldr	r3, [r7, #0]
 80145ba:	2b10      	cmp	r3, #16
 80145bc:	d104      	bne.n	80145c8 <HAL_TIM_PWM_Stop+0x104>
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	2201      	movs	r2, #1
 80145c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80145c6:	e003      	b.n	80145d0 <HAL_TIM_PWM_Stop+0x10c>
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	2201      	movs	r2, #1
 80145cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80145d0:	2300      	movs	r3, #0
}
 80145d2:	4618      	mov	r0, r3
 80145d4:	3708      	adds	r7, #8
 80145d6:	46bd      	mov	sp, r7
 80145d8:	bd80      	pop	{r7, pc}
 80145da:	bf00      	nop
 80145dc:	40012c00 	.word	0x40012c00
 80145e0:	40013400 	.word	0x40013400
 80145e4:	40014000 	.word	0x40014000
 80145e8:	40014400 	.word	0x40014400
 80145ec:	40014800 	.word	0x40014800

080145f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b082      	sub	sp, #8
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	691b      	ldr	r3, [r3, #16]
 80145fe:	f003 0302 	and.w	r3, r3, #2
 8014602:	2b02      	cmp	r3, #2
 8014604:	d122      	bne.n	801464c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	68db      	ldr	r3, [r3, #12]
 801460c:	f003 0302 	and.w	r3, r3, #2
 8014610:	2b02      	cmp	r3, #2
 8014612:	d11b      	bne.n	801464c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	f06f 0202 	mvn.w	r2, #2
 801461c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	2201      	movs	r2, #1
 8014622:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	699b      	ldr	r3, [r3, #24]
 801462a:	f003 0303 	and.w	r3, r3, #3
 801462e:	2b00      	cmp	r3, #0
 8014630:	d003      	beq.n	801463a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8014632:	6878      	ldr	r0, [r7, #4]
 8014634:	f000 fa1a 	bl	8014a6c <HAL_TIM_IC_CaptureCallback>
 8014638:	e005      	b.n	8014646 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801463a:	6878      	ldr	r0, [r7, #4]
 801463c:	f000 fa0c 	bl	8014a58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014640:	6878      	ldr	r0, [r7, #4]
 8014642:	f000 fa1d 	bl	8014a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	2200      	movs	r2, #0
 801464a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	691b      	ldr	r3, [r3, #16]
 8014652:	f003 0304 	and.w	r3, r3, #4
 8014656:	2b04      	cmp	r3, #4
 8014658:	d122      	bne.n	80146a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	68db      	ldr	r3, [r3, #12]
 8014660:	f003 0304 	and.w	r3, r3, #4
 8014664:	2b04      	cmp	r3, #4
 8014666:	d11b      	bne.n	80146a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	f06f 0204 	mvn.w	r2, #4
 8014670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	2202      	movs	r2, #2
 8014676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	699b      	ldr	r3, [r3, #24]
 801467e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014682:	2b00      	cmp	r3, #0
 8014684:	d003      	beq.n	801468e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014686:	6878      	ldr	r0, [r7, #4]
 8014688:	f000 f9f0 	bl	8014a6c <HAL_TIM_IC_CaptureCallback>
 801468c:	e005      	b.n	801469a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801468e:	6878      	ldr	r0, [r7, #4]
 8014690:	f000 f9e2 	bl	8014a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014694:	6878      	ldr	r0, [r7, #4]
 8014696:	f000 f9f3 	bl	8014a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	2200      	movs	r2, #0
 801469e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	691b      	ldr	r3, [r3, #16]
 80146a6:	f003 0308 	and.w	r3, r3, #8
 80146aa:	2b08      	cmp	r3, #8
 80146ac:	d122      	bne.n	80146f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	68db      	ldr	r3, [r3, #12]
 80146b4:	f003 0308 	and.w	r3, r3, #8
 80146b8:	2b08      	cmp	r3, #8
 80146ba:	d11b      	bne.n	80146f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	f06f 0208 	mvn.w	r2, #8
 80146c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	2204      	movs	r2, #4
 80146ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	69db      	ldr	r3, [r3, #28]
 80146d2:	f003 0303 	and.w	r3, r3, #3
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d003      	beq.n	80146e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80146da:	6878      	ldr	r0, [r7, #4]
 80146dc:	f000 f9c6 	bl	8014a6c <HAL_TIM_IC_CaptureCallback>
 80146e0:	e005      	b.n	80146ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80146e2:	6878      	ldr	r0, [r7, #4]
 80146e4:	f000 f9b8 	bl	8014a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80146e8:	6878      	ldr	r0, [r7, #4]
 80146ea:	f000 f9c9 	bl	8014a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	2200      	movs	r2, #0
 80146f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	691b      	ldr	r3, [r3, #16]
 80146fa:	f003 0310 	and.w	r3, r3, #16
 80146fe:	2b10      	cmp	r3, #16
 8014700:	d122      	bne.n	8014748 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	68db      	ldr	r3, [r3, #12]
 8014708:	f003 0310 	and.w	r3, r3, #16
 801470c:	2b10      	cmp	r3, #16
 801470e:	d11b      	bne.n	8014748 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	f06f 0210 	mvn.w	r2, #16
 8014718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	2208      	movs	r2, #8
 801471e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	69db      	ldr	r3, [r3, #28]
 8014726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801472a:	2b00      	cmp	r3, #0
 801472c:	d003      	beq.n	8014736 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801472e:	6878      	ldr	r0, [r7, #4]
 8014730:	f000 f99c 	bl	8014a6c <HAL_TIM_IC_CaptureCallback>
 8014734:	e005      	b.n	8014742 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014736:	6878      	ldr	r0, [r7, #4]
 8014738:	f000 f98e 	bl	8014a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801473c:	6878      	ldr	r0, [r7, #4]
 801473e:	f000 f99f 	bl	8014a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	2200      	movs	r2, #0
 8014746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	691b      	ldr	r3, [r3, #16]
 801474e:	f003 0301 	and.w	r3, r3, #1
 8014752:	2b01      	cmp	r3, #1
 8014754:	d10e      	bne.n	8014774 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	68db      	ldr	r3, [r3, #12]
 801475c:	f003 0301 	and.w	r3, r3, #1
 8014760:	2b01      	cmp	r3, #1
 8014762:	d107      	bne.n	8014774 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	f06f 0201 	mvn.w	r2, #1
 801476c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801476e:	6878      	ldr	r0, [r7, #4]
 8014770:	f7ed fb54 	bl	8001e1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	691b      	ldr	r3, [r3, #16]
 801477a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801477e:	2b80      	cmp	r3, #128	; 0x80
 8014780:	d10e      	bne.n	80147a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	68db      	ldr	r3, [r3, #12]
 8014788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801478c:	2b80      	cmp	r3, #128	; 0x80
 801478e:	d107      	bne.n	80147a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8014798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801479a:	6878      	ldr	r0, [r7, #4]
 801479c:	f000 fdac 	bl	80152f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	691b      	ldr	r3, [r3, #16]
 80147a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80147aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80147ae:	d10e      	bne.n	80147ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	68db      	ldr	r3, [r3, #12]
 80147b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80147ba:	2b80      	cmp	r3, #128	; 0x80
 80147bc:	d107      	bne.n	80147ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80147c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80147c8:	6878      	ldr	r0, [r7, #4]
 80147ca:	f000 fd9f 	bl	801530c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	691b      	ldr	r3, [r3, #16]
 80147d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80147d8:	2b40      	cmp	r3, #64	; 0x40
 80147da:	d10e      	bne.n	80147fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	68db      	ldr	r3, [r3, #12]
 80147e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80147e6:	2b40      	cmp	r3, #64	; 0x40
 80147e8:	d107      	bne.n	80147fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80147f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80147f4:	6878      	ldr	r0, [r7, #4]
 80147f6:	f000 f94d 	bl	8014a94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	691b      	ldr	r3, [r3, #16]
 8014800:	f003 0320 	and.w	r3, r3, #32
 8014804:	2b20      	cmp	r3, #32
 8014806:	d10e      	bne.n	8014826 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	68db      	ldr	r3, [r3, #12]
 801480e:	f003 0320 	and.w	r3, r3, #32
 8014812:	2b20      	cmp	r3, #32
 8014814:	d107      	bne.n	8014826 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	f06f 0220 	mvn.w	r2, #32
 801481e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8014820:	6878      	ldr	r0, [r7, #4]
 8014822:	f000 fd5f 	bl	80152e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8014826:	bf00      	nop
 8014828:	3708      	adds	r7, #8
 801482a:	46bd      	mov	sp, r7
 801482c:	bd80      	pop	{r7, pc}
	...

08014830 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8014830:	b580      	push	{r7, lr}
 8014832:	b086      	sub	sp, #24
 8014834:	af00      	add	r7, sp, #0
 8014836:	60f8      	str	r0, [r7, #12]
 8014838:	60b9      	str	r1, [r7, #8]
 801483a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801483c:	2300      	movs	r3, #0
 801483e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014846:	2b01      	cmp	r3, #1
 8014848:	d101      	bne.n	801484e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801484a:	2302      	movs	r3, #2
 801484c:	e0ff      	b.n	8014a4e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	2201      	movs	r2, #1
 8014852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	2b14      	cmp	r3, #20
 801485a:	f200 80f0 	bhi.w	8014a3e <HAL_TIM_PWM_ConfigChannel+0x20e>
 801485e:	a201      	add	r2, pc, #4	; (adr r2, 8014864 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8014860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014864:	080148b9 	.word	0x080148b9
 8014868:	08014a3f 	.word	0x08014a3f
 801486c:	08014a3f 	.word	0x08014a3f
 8014870:	08014a3f 	.word	0x08014a3f
 8014874:	080148f9 	.word	0x080148f9
 8014878:	08014a3f 	.word	0x08014a3f
 801487c:	08014a3f 	.word	0x08014a3f
 8014880:	08014a3f 	.word	0x08014a3f
 8014884:	0801493b 	.word	0x0801493b
 8014888:	08014a3f 	.word	0x08014a3f
 801488c:	08014a3f 	.word	0x08014a3f
 8014890:	08014a3f 	.word	0x08014a3f
 8014894:	0801497b 	.word	0x0801497b
 8014898:	08014a3f 	.word	0x08014a3f
 801489c:	08014a3f 	.word	0x08014a3f
 80148a0:	08014a3f 	.word	0x08014a3f
 80148a4:	080149bd 	.word	0x080149bd
 80148a8:	08014a3f 	.word	0x08014a3f
 80148ac:	08014a3f 	.word	0x08014a3f
 80148b0:	08014a3f 	.word	0x08014a3f
 80148b4:	080149fd 	.word	0x080149fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	68b9      	ldr	r1, [r7, #8]
 80148be:	4618      	mov	r0, r3
 80148c0:	f000 f98c 	bl	8014bdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	699a      	ldr	r2, [r3, #24]
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	f042 0208 	orr.w	r2, r2, #8
 80148d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	699a      	ldr	r2, [r3, #24]
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	f022 0204 	bic.w	r2, r2, #4
 80148e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	6999      	ldr	r1, [r3, #24]
 80148ea:	68bb      	ldr	r3, [r7, #8]
 80148ec:	691a      	ldr	r2, [r3, #16]
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	430a      	orrs	r2, r1
 80148f4:	619a      	str	r2, [r3, #24]
      break;
 80148f6:	e0a5      	b.n	8014a44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	68b9      	ldr	r1, [r7, #8]
 80148fe:	4618      	mov	r0, r3
 8014900:	f000 f9fc 	bl	8014cfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	699a      	ldr	r2, [r3, #24]
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014912:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	699a      	ldr	r2, [r3, #24]
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	6999      	ldr	r1, [r3, #24]
 801492a:	68bb      	ldr	r3, [r7, #8]
 801492c:	691b      	ldr	r3, [r3, #16]
 801492e:	021a      	lsls	r2, r3, #8
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	430a      	orrs	r2, r1
 8014936:	619a      	str	r2, [r3, #24]
      break;
 8014938:	e084      	b.n	8014a44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	68b9      	ldr	r1, [r7, #8]
 8014940:	4618      	mov	r0, r3
 8014942:	f000 fa65 	bl	8014e10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	69da      	ldr	r2, [r3, #28]
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	f042 0208 	orr.w	r2, r2, #8
 8014954:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	69da      	ldr	r2, [r3, #28]
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	f022 0204 	bic.w	r2, r2, #4
 8014964:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	69d9      	ldr	r1, [r3, #28]
 801496c:	68bb      	ldr	r3, [r7, #8]
 801496e:	691a      	ldr	r2, [r3, #16]
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	430a      	orrs	r2, r1
 8014976:	61da      	str	r2, [r3, #28]
      break;
 8014978:	e064      	b.n	8014a44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	68b9      	ldr	r1, [r7, #8]
 8014980:	4618      	mov	r0, r3
 8014982:	f000 facd 	bl	8014f20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	69da      	ldr	r2, [r3, #28]
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014994:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	69da      	ldr	r2, [r3, #28]
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80149a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	69d9      	ldr	r1, [r3, #28]
 80149ac:	68bb      	ldr	r3, [r7, #8]
 80149ae:	691b      	ldr	r3, [r3, #16]
 80149b0:	021a      	lsls	r2, r3, #8
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	430a      	orrs	r2, r1
 80149b8:	61da      	str	r2, [r3, #28]
      break;
 80149ba:	e043      	b.n	8014a44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	68b9      	ldr	r1, [r7, #8]
 80149c2:	4618      	mov	r0, r3
 80149c4:	f000 fb16 	bl	8014ff4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	f042 0208 	orr.w	r2, r2, #8
 80149d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	f022 0204 	bic.w	r2, r2, #4
 80149e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80149ee:	68bb      	ldr	r3, [r7, #8]
 80149f0:	691a      	ldr	r2, [r3, #16]
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	430a      	orrs	r2, r1
 80149f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80149fa:	e023      	b.n	8014a44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	68b9      	ldr	r1, [r7, #8]
 8014a02:	4618      	mov	r0, r3
 8014a04:	f000 fb5a 	bl	80150bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014a16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014a26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8014a2e:	68bb      	ldr	r3, [r7, #8]
 8014a30:	691b      	ldr	r3, [r3, #16]
 8014a32:	021a      	lsls	r2, r3, #8
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	430a      	orrs	r2, r1
 8014a3a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014a3c:	e002      	b.n	8014a44 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8014a3e:	2301      	movs	r3, #1
 8014a40:	75fb      	strb	r3, [r7, #23]
      break;
 8014a42:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	2200      	movs	r2, #0
 8014a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a4e:	4618      	mov	r0, r3
 8014a50:	3718      	adds	r7, #24
 8014a52:	46bd      	mov	sp, r7
 8014a54:	bd80      	pop	{r7, pc}
 8014a56:	bf00      	nop

08014a58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014a58:	b480      	push	{r7}
 8014a5a:	b083      	sub	sp, #12
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8014a60:	bf00      	nop
 8014a62:	370c      	adds	r7, #12
 8014a64:	46bd      	mov	sp, r7
 8014a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a6a:	4770      	bx	lr

08014a6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8014a6c:	b480      	push	{r7}
 8014a6e:	b083      	sub	sp, #12
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8014a74:	bf00      	nop
 8014a76:	370c      	adds	r7, #12
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a7e:	4770      	bx	lr

08014a80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014a80:	b480      	push	{r7}
 8014a82:	b083      	sub	sp, #12
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014a88:	bf00      	nop
 8014a8a:	370c      	adds	r7, #12
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a92:	4770      	bx	lr

08014a94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014a94:	b480      	push	{r7}
 8014a96:	b083      	sub	sp, #12
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8014a9c:	bf00      	nop
 8014a9e:	370c      	adds	r7, #12
 8014aa0:	46bd      	mov	sp, r7
 8014aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa6:	4770      	bx	lr

08014aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8014aa8:	b480      	push	{r7}
 8014aaa:	b085      	sub	sp, #20
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
 8014ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	4a40      	ldr	r2, [pc, #256]	; (8014bbc <TIM_Base_SetConfig+0x114>)
 8014abc:	4293      	cmp	r3, r2
 8014abe:	d013      	beq.n	8014ae8 <TIM_Base_SetConfig+0x40>
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014ac6:	d00f      	beq.n	8014ae8 <TIM_Base_SetConfig+0x40>
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	4a3d      	ldr	r2, [pc, #244]	; (8014bc0 <TIM_Base_SetConfig+0x118>)
 8014acc:	4293      	cmp	r3, r2
 8014ace:	d00b      	beq.n	8014ae8 <TIM_Base_SetConfig+0x40>
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	4a3c      	ldr	r2, [pc, #240]	; (8014bc4 <TIM_Base_SetConfig+0x11c>)
 8014ad4:	4293      	cmp	r3, r2
 8014ad6:	d007      	beq.n	8014ae8 <TIM_Base_SetConfig+0x40>
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	4a3b      	ldr	r2, [pc, #236]	; (8014bc8 <TIM_Base_SetConfig+0x120>)
 8014adc:	4293      	cmp	r3, r2
 8014ade:	d003      	beq.n	8014ae8 <TIM_Base_SetConfig+0x40>
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	4a3a      	ldr	r2, [pc, #232]	; (8014bcc <TIM_Base_SetConfig+0x124>)
 8014ae4:	4293      	cmp	r3, r2
 8014ae6:	d108      	bne.n	8014afa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014aee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014af0:	683b      	ldr	r3, [r7, #0]
 8014af2:	685b      	ldr	r3, [r3, #4]
 8014af4:	68fa      	ldr	r2, [r7, #12]
 8014af6:	4313      	orrs	r3, r2
 8014af8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	4a2f      	ldr	r2, [pc, #188]	; (8014bbc <TIM_Base_SetConfig+0x114>)
 8014afe:	4293      	cmp	r3, r2
 8014b00:	d01f      	beq.n	8014b42 <TIM_Base_SetConfig+0x9a>
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014b08:	d01b      	beq.n	8014b42 <TIM_Base_SetConfig+0x9a>
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	4a2c      	ldr	r2, [pc, #176]	; (8014bc0 <TIM_Base_SetConfig+0x118>)
 8014b0e:	4293      	cmp	r3, r2
 8014b10:	d017      	beq.n	8014b42 <TIM_Base_SetConfig+0x9a>
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	4a2b      	ldr	r2, [pc, #172]	; (8014bc4 <TIM_Base_SetConfig+0x11c>)
 8014b16:	4293      	cmp	r3, r2
 8014b18:	d013      	beq.n	8014b42 <TIM_Base_SetConfig+0x9a>
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	4a2a      	ldr	r2, [pc, #168]	; (8014bc8 <TIM_Base_SetConfig+0x120>)
 8014b1e:	4293      	cmp	r3, r2
 8014b20:	d00f      	beq.n	8014b42 <TIM_Base_SetConfig+0x9a>
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	4a29      	ldr	r2, [pc, #164]	; (8014bcc <TIM_Base_SetConfig+0x124>)
 8014b26:	4293      	cmp	r3, r2
 8014b28:	d00b      	beq.n	8014b42 <TIM_Base_SetConfig+0x9a>
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	4a28      	ldr	r2, [pc, #160]	; (8014bd0 <TIM_Base_SetConfig+0x128>)
 8014b2e:	4293      	cmp	r3, r2
 8014b30:	d007      	beq.n	8014b42 <TIM_Base_SetConfig+0x9a>
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	4a27      	ldr	r2, [pc, #156]	; (8014bd4 <TIM_Base_SetConfig+0x12c>)
 8014b36:	4293      	cmp	r3, r2
 8014b38:	d003      	beq.n	8014b42 <TIM_Base_SetConfig+0x9a>
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	4a26      	ldr	r2, [pc, #152]	; (8014bd8 <TIM_Base_SetConfig+0x130>)
 8014b3e:	4293      	cmp	r3, r2
 8014b40:	d108      	bne.n	8014b54 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014b4a:	683b      	ldr	r3, [r7, #0]
 8014b4c:	68db      	ldr	r3, [r3, #12]
 8014b4e:	68fa      	ldr	r2, [r7, #12]
 8014b50:	4313      	orrs	r3, r2
 8014b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014b5a:	683b      	ldr	r3, [r7, #0]
 8014b5c:	695b      	ldr	r3, [r3, #20]
 8014b5e:	4313      	orrs	r3, r2
 8014b60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	68fa      	ldr	r2, [r7, #12]
 8014b66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014b68:	683b      	ldr	r3, [r7, #0]
 8014b6a:	689a      	ldr	r2, [r3, #8]
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014b70:	683b      	ldr	r3, [r7, #0]
 8014b72:	681a      	ldr	r2, [r3, #0]
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	4a10      	ldr	r2, [pc, #64]	; (8014bbc <TIM_Base_SetConfig+0x114>)
 8014b7c:	4293      	cmp	r3, r2
 8014b7e:	d00f      	beq.n	8014ba0 <TIM_Base_SetConfig+0xf8>
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	4a12      	ldr	r2, [pc, #72]	; (8014bcc <TIM_Base_SetConfig+0x124>)
 8014b84:	4293      	cmp	r3, r2
 8014b86:	d00b      	beq.n	8014ba0 <TIM_Base_SetConfig+0xf8>
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	4a11      	ldr	r2, [pc, #68]	; (8014bd0 <TIM_Base_SetConfig+0x128>)
 8014b8c:	4293      	cmp	r3, r2
 8014b8e:	d007      	beq.n	8014ba0 <TIM_Base_SetConfig+0xf8>
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	4a10      	ldr	r2, [pc, #64]	; (8014bd4 <TIM_Base_SetConfig+0x12c>)
 8014b94:	4293      	cmp	r3, r2
 8014b96:	d003      	beq.n	8014ba0 <TIM_Base_SetConfig+0xf8>
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	4a0f      	ldr	r2, [pc, #60]	; (8014bd8 <TIM_Base_SetConfig+0x130>)
 8014b9c:	4293      	cmp	r3, r2
 8014b9e:	d103      	bne.n	8014ba8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014ba0:	683b      	ldr	r3, [r7, #0]
 8014ba2:	691a      	ldr	r2, [r3, #16]
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	2201      	movs	r2, #1
 8014bac:	615a      	str	r2, [r3, #20]
}
 8014bae:	bf00      	nop
 8014bb0:	3714      	adds	r7, #20
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb8:	4770      	bx	lr
 8014bba:	bf00      	nop
 8014bbc:	40012c00 	.word	0x40012c00
 8014bc0:	40000400 	.word	0x40000400
 8014bc4:	40000800 	.word	0x40000800
 8014bc8:	40000c00 	.word	0x40000c00
 8014bcc:	40013400 	.word	0x40013400
 8014bd0:	40014000 	.word	0x40014000
 8014bd4:	40014400 	.word	0x40014400
 8014bd8:	40014800 	.word	0x40014800

08014bdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014bdc:	b480      	push	{r7}
 8014bde:	b087      	sub	sp, #28
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
 8014be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	6a1b      	ldr	r3, [r3, #32]
 8014bea:	f023 0201 	bic.w	r2, r3, #1
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	6a1b      	ldr	r3, [r3, #32]
 8014bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	685b      	ldr	r3, [r3, #4]
 8014bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	699b      	ldr	r3, [r3, #24]
 8014c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	f023 0303 	bic.w	r3, r3, #3
 8014c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014c18:	683b      	ldr	r3, [r7, #0]
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	68fa      	ldr	r2, [r7, #12]
 8014c1e:	4313      	orrs	r3, r2
 8014c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014c22:	697b      	ldr	r3, [r7, #20]
 8014c24:	f023 0302 	bic.w	r3, r3, #2
 8014c28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014c2a:	683b      	ldr	r3, [r7, #0]
 8014c2c:	689b      	ldr	r3, [r3, #8]
 8014c2e:	697a      	ldr	r2, [r7, #20]
 8014c30:	4313      	orrs	r3, r2
 8014c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	4a2c      	ldr	r2, [pc, #176]	; (8014ce8 <TIM_OC1_SetConfig+0x10c>)
 8014c38:	4293      	cmp	r3, r2
 8014c3a:	d00f      	beq.n	8014c5c <TIM_OC1_SetConfig+0x80>
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	4a2b      	ldr	r2, [pc, #172]	; (8014cec <TIM_OC1_SetConfig+0x110>)
 8014c40:	4293      	cmp	r3, r2
 8014c42:	d00b      	beq.n	8014c5c <TIM_OC1_SetConfig+0x80>
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	4a2a      	ldr	r2, [pc, #168]	; (8014cf0 <TIM_OC1_SetConfig+0x114>)
 8014c48:	4293      	cmp	r3, r2
 8014c4a:	d007      	beq.n	8014c5c <TIM_OC1_SetConfig+0x80>
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	4a29      	ldr	r2, [pc, #164]	; (8014cf4 <TIM_OC1_SetConfig+0x118>)
 8014c50:	4293      	cmp	r3, r2
 8014c52:	d003      	beq.n	8014c5c <TIM_OC1_SetConfig+0x80>
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	4a28      	ldr	r2, [pc, #160]	; (8014cf8 <TIM_OC1_SetConfig+0x11c>)
 8014c58:	4293      	cmp	r3, r2
 8014c5a:	d10c      	bne.n	8014c76 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8014c5c:	697b      	ldr	r3, [r7, #20]
 8014c5e:	f023 0308 	bic.w	r3, r3, #8
 8014c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014c64:	683b      	ldr	r3, [r7, #0]
 8014c66:	68db      	ldr	r3, [r3, #12]
 8014c68:	697a      	ldr	r2, [r7, #20]
 8014c6a:	4313      	orrs	r3, r2
 8014c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8014c6e:	697b      	ldr	r3, [r7, #20]
 8014c70:	f023 0304 	bic.w	r3, r3, #4
 8014c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	4a1b      	ldr	r2, [pc, #108]	; (8014ce8 <TIM_OC1_SetConfig+0x10c>)
 8014c7a:	4293      	cmp	r3, r2
 8014c7c:	d00f      	beq.n	8014c9e <TIM_OC1_SetConfig+0xc2>
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	4a1a      	ldr	r2, [pc, #104]	; (8014cec <TIM_OC1_SetConfig+0x110>)
 8014c82:	4293      	cmp	r3, r2
 8014c84:	d00b      	beq.n	8014c9e <TIM_OC1_SetConfig+0xc2>
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	4a19      	ldr	r2, [pc, #100]	; (8014cf0 <TIM_OC1_SetConfig+0x114>)
 8014c8a:	4293      	cmp	r3, r2
 8014c8c:	d007      	beq.n	8014c9e <TIM_OC1_SetConfig+0xc2>
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	4a18      	ldr	r2, [pc, #96]	; (8014cf4 <TIM_OC1_SetConfig+0x118>)
 8014c92:	4293      	cmp	r3, r2
 8014c94:	d003      	beq.n	8014c9e <TIM_OC1_SetConfig+0xc2>
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	4a17      	ldr	r2, [pc, #92]	; (8014cf8 <TIM_OC1_SetConfig+0x11c>)
 8014c9a:	4293      	cmp	r3, r2
 8014c9c:	d111      	bne.n	8014cc2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8014c9e:	693b      	ldr	r3, [r7, #16]
 8014ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014ca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8014ca6:	693b      	ldr	r3, [r7, #16]
 8014ca8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014cac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8014cae:	683b      	ldr	r3, [r7, #0]
 8014cb0:	695b      	ldr	r3, [r3, #20]
 8014cb2:	693a      	ldr	r2, [r7, #16]
 8014cb4:	4313      	orrs	r3, r2
 8014cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8014cb8:	683b      	ldr	r3, [r7, #0]
 8014cba:	699b      	ldr	r3, [r3, #24]
 8014cbc:	693a      	ldr	r2, [r7, #16]
 8014cbe:	4313      	orrs	r3, r2
 8014cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	693a      	ldr	r2, [r7, #16]
 8014cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	68fa      	ldr	r2, [r7, #12]
 8014ccc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014cce:	683b      	ldr	r3, [r7, #0]
 8014cd0:	685a      	ldr	r2, [r3, #4]
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	697a      	ldr	r2, [r7, #20]
 8014cda:	621a      	str	r2, [r3, #32]
}
 8014cdc:	bf00      	nop
 8014cde:	371c      	adds	r7, #28
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce6:	4770      	bx	lr
 8014ce8:	40012c00 	.word	0x40012c00
 8014cec:	40013400 	.word	0x40013400
 8014cf0:	40014000 	.word	0x40014000
 8014cf4:	40014400 	.word	0x40014400
 8014cf8:	40014800 	.word	0x40014800

08014cfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014cfc:	b480      	push	{r7}
 8014cfe:	b087      	sub	sp, #28
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
 8014d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	6a1b      	ldr	r3, [r3, #32]
 8014d0a:	f023 0210 	bic.w	r2, r3, #16
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	6a1b      	ldr	r3, [r3, #32]
 8014d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	685b      	ldr	r3, [r3, #4]
 8014d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	699b      	ldr	r3, [r3, #24]
 8014d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014d38:	683b      	ldr	r3, [r7, #0]
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	021b      	lsls	r3, r3, #8
 8014d3e:	68fa      	ldr	r2, [r7, #12]
 8014d40:	4313      	orrs	r3, r2
 8014d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014d44:	697b      	ldr	r3, [r7, #20]
 8014d46:	f023 0320 	bic.w	r3, r3, #32
 8014d4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014d4c:	683b      	ldr	r3, [r7, #0]
 8014d4e:	689b      	ldr	r3, [r3, #8]
 8014d50:	011b      	lsls	r3, r3, #4
 8014d52:	697a      	ldr	r2, [r7, #20]
 8014d54:	4313      	orrs	r3, r2
 8014d56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	4a28      	ldr	r2, [pc, #160]	; (8014dfc <TIM_OC2_SetConfig+0x100>)
 8014d5c:	4293      	cmp	r3, r2
 8014d5e:	d003      	beq.n	8014d68 <TIM_OC2_SetConfig+0x6c>
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	4a27      	ldr	r2, [pc, #156]	; (8014e00 <TIM_OC2_SetConfig+0x104>)
 8014d64:	4293      	cmp	r3, r2
 8014d66:	d10d      	bne.n	8014d84 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014d68:	697b      	ldr	r3, [r7, #20]
 8014d6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014d6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014d70:	683b      	ldr	r3, [r7, #0]
 8014d72:	68db      	ldr	r3, [r3, #12]
 8014d74:	011b      	lsls	r3, r3, #4
 8014d76:	697a      	ldr	r2, [r7, #20]
 8014d78:	4313      	orrs	r3, r2
 8014d7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014d7c:	697b      	ldr	r3, [r7, #20]
 8014d7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014d82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	4a1d      	ldr	r2, [pc, #116]	; (8014dfc <TIM_OC2_SetConfig+0x100>)
 8014d88:	4293      	cmp	r3, r2
 8014d8a:	d00f      	beq.n	8014dac <TIM_OC2_SetConfig+0xb0>
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	4a1c      	ldr	r2, [pc, #112]	; (8014e00 <TIM_OC2_SetConfig+0x104>)
 8014d90:	4293      	cmp	r3, r2
 8014d92:	d00b      	beq.n	8014dac <TIM_OC2_SetConfig+0xb0>
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	4a1b      	ldr	r2, [pc, #108]	; (8014e04 <TIM_OC2_SetConfig+0x108>)
 8014d98:	4293      	cmp	r3, r2
 8014d9a:	d007      	beq.n	8014dac <TIM_OC2_SetConfig+0xb0>
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	4a1a      	ldr	r2, [pc, #104]	; (8014e08 <TIM_OC2_SetConfig+0x10c>)
 8014da0:	4293      	cmp	r3, r2
 8014da2:	d003      	beq.n	8014dac <TIM_OC2_SetConfig+0xb0>
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	4a19      	ldr	r2, [pc, #100]	; (8014e0c <TIM_OC2_SetConfig+0x110>)
 8014da8:	4293      	cmp	r3, r2
 8014daa:	d113      	bne.n	8014dd4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8014dac:	693b      	ldr	r3, [r7, #16]
 8014dae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014db2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014db4:	693b      	ldr	r3, [r7, #16]
 8014db6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014dba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014dbc:	683b      	ldr	r3, [r7, #0]
 8014dbe:	695b      	ldr	r3, [r3, #20]
 8014dc0:	009b      	lsls	r3, r3, #2
 8014dc2:	693a      	ldr	r2, [r7, #16]
 8014dc4:	4313      	orrs	r3, r2
 8014dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014dc8:	683b      	ldr	r3, [r7, #0]
 8014dca:	699b      	ldr	r3, [r3, #24]
 8014dcc:	009b      	lsls	r3, r3, #2
 8014dce:	693a      	ldr	r2, [r7, #16]
 8014dd0:	4313      	orrs	r3, r2
 8014dd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	693a      	ldr	r2, [r7, #16]
 8014dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	68fa      	ldr	r2, [r7, #12]
 8014dde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014de0:	683b      	ldr	r3, [r7, #0]
 8014de2:	685a      	ldr	r2, [r3, #4]
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	697a      	ldr	r2, [r7, #20]
 8014dec:	621a      	str	r2, [r3, #32]
}
 8014dee:	bf00      	nop
 8014df0:	371c      	adds	r7, #28
 8014df2:	46bd      	mov	sp, r7
 8014df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df8:	4770      	bx	lr
 8014dfa:	bf00      	nop
 8014dfc:	40012c00 	.word	0x40012c00
 8014e00:	40013400 	.word	0x40013400
 8014e04:	40014000 	.word	0x40014000
 8014e08:	40014400 	.word	0x40014400
 8014e0c:	40014800 	.word	0x40014800

08014e10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014e10:	b480      	push	{r7}
 8014e12:	b087      	sub	sp, #28
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	6078      	str	r0, [r7, #4]
 8014e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	6a1b      	ldr	r3, [r3, #32]
 8014e1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	6a1b      	ldr	r3, [r3, #32]
 8014e2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	685b      	ldr	r3, [r3, #4]
 8014e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	69db      	ldr	r3, [r3, #28]
 8014e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	f023 0303 	bic.w	r3, r3, #3
 8014e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014e4c:	683b      	ldr	r3, [r7, #0]
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	68fa      	ldr	r2, [r7, #12]
 8014e52:	4313      	orrs	r3, r2
 8014e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8014e56:	697b      	ldr	r3, [r7, #20]
 8014e58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014e5e:	683b      	ldr	r3, [r7, #0]
 8014e60:	689b      	ldr	r3, [r3, #8]
 8014e62:	021b      	lsls	r3, r3, #8
 8014e64:	697a      	ldr	r2, [r7, #20]
 8014e66:	4313      	orrs	r3, r2
 8014e68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	4a27      	ldr	r2, [pc, #156]	; (8014f0c <TIM_OC3_SetConfig+0xfc>)
 8014e6e:	4293      	cmp	r3, r2
 8014e70:	d003      	beq.n	8014e7a <TIM_OC3_SetConfig+0x6a>
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	4a26      	ldr	r2, [pc, #152]	; (8014f10 <TIM_OC3_SetConfig+0x100>)
 8014e76:	4293      	cmp	r3, r2
 8014e78:	d10d      	bne.n	8014e96 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8014e7a:	697b      	ldr	r3, [r7, #20]
 8014e7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014e80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014e82:	683b      	ldr	r3, [r7, #0]
 8014e84:	68db      	ldr	r3, [r3, #12]
 8014e86:	021b      	lsls	r3, r3, #8
 8014e88:	697a      	ldr	r2, [r7, #20]
 8014e8a:	4313      	orrs	r3, r2
 8014e8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8014e8e:	697b      	ldr	r3, [r7, #20]
 8014e90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014e94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	4a1c      	ldr	r2, [pc, #112]	; (8014f0c <TIM_OC3_SetConfig+0xfc>)
 8014e9a:	4293      	cmp	r3, r2
 8014e9c:	d00f      	beq.n	8014ebe <TIM_OC3_SetConfig+0xae>
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	4a1b      	ldr	r2, [pc, #108]	; (8014f10 <TIM_OC3_SetConfig+0x100>)
 8014ea2:	4293      	cmp	r3, r2
 8014ea4:	d00b      	beq.n	8014ebe <TIM_OC3_SetConfig+0xae>
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	4a1a      	ldr	r2, [pc, #104]	; (8014f14 <TIM_OC3_SetConfig+0x104>)
 8014eaa:	4293      	cmp	r3, r2
 8014eac:	d007      	beq.n	8014ebe <TIM_OC3_SetConfig+0xae>
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	4a19      	ldr	r2, [pc, #100]	; (8014f18 <TIM_OC3_SetConfig+0x108>)
 8014eb2:	4293      	cmp	r3, r2
 8014eb4:	d003      	beq.n	8014ebe <TIM_OC3_SetConfig+0xae>
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	4a18      	ldr	r2, [pc, #96]	; (8014f1c <TIM_OC3_SetConfig+0x10c>)
 8014eba:	4293      	cmp	r3, r2
 8014ebc:	d113      	bne.n	8014ee6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8014ebe:	693b      	ldr	r3, [r7, #16]
 8014ec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8014ec6:	693b      	ldr	r3, [r7, #16]
 8014ec8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8014ece:	683b      	ldr	r3, [r7, #0]
 8014ed0:	695b      	ldr	r3, [r3, #20]
 8014ed2:	011b      	lsls	r3, r3, #4
 8014ed4:	693a      	ldr	r2, [r7, #16]
 8014ed6:	4313      	orrs	r3, r2
 8014ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8014eda:	683b      	ldr	r3, [r7, #0]
 8014edc:	699b      	ldr	r3, [r3, #24]
 8014ede:	011b      	lsls	r3, r3, #4
 8014ee0:	693a      	ldr	r2, [r7, #16]
 8014ee2:	4313      	orrs	r3, r2
 8014ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	693a      	ldr	r2, [r7, #16]
 8014eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	68fa      	ldr	r2, [r7, #12]
 8014ef0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8014ef2:	683b      	ldr	r3, [r7, #0]
 8014ef4:	685a      	ldr	r2, [r3, #4]
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	697a      	ldr	r2, [r7, #20]
 8014efe:	621a      	str	r2, [r3, #32]
}
 8014f00:	bf00      	nop
 8014f02:	371c      	adds	r7, #28
 8014f04:	46bd      	mov	sp, r7
 8014f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f0a:	4770      	bx	lr
 8014f0c:	40012c00 	.word	0x40012c00
 8014f10:	40013400 	.word	0x40013400
 8014f14:	40014000 	.word	0x40014000
 8014f18:	40014400 	.word	0x40014400
 8014f1c:	40014800 	.word	0x40014800

08014f20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014f20:	b480      	push	{r7}
 8014f22:	b087      	sub	sp, #28
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	6078      	str	r0, [r7, #4]
 8014f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	6a1b      	ldr	r3, [r3, #32]
 8014f2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	6a1b      	ldr	r3, [r3, #32]
 8014f3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	685b      	ldr	r3, [r3, #4]
 8014f40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	69db      	ldr	r3, [r3, #28]
 8014f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014f5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	021b      	lsls	r3, r3, #8
 8014f62:	68fa      	ldr	r2, [r7, #12]
 8014f64:	4313      	orrs	r3, r2
 8014f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014f68:	693b      	ldr	r3, [r7, #16]
 8014f6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014f6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014f70:	683b      	ldr	r3, [r7, #0]
 8014f72:	689b      	ldr	r3, [r3, #8]
 8014f74:	031b      	lsls	r3, r3, #12
 8014f76:	693a      	ldr	r2, [r7, #16]
 8014f78:	4313      	orrs	r3, r2
 8014f7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	4a18      	ldr	r2, [pc, #96]	; (8014fe0 <TIM_OC4_SetConfig+0xc0>)
 8014f80:	4293      	cmp	r3, r2
 8014f82:	d00f      	beq.n	8014fa4 <TIM_OC4_SetConfig+0x84>
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	4a17      	ldr	r2, [pc, #92]	; (8014fe4 <TIM_OC4_SetConfig+0xc4>)
 8014f88:	4293      	cmp	r3, r2
 8014f8a:	d00b      	beq.n	8014fa4 <TIM_OC4_SetConfig+0x84>
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	4a16      	ldr	r2, [pc, #88]	; (8014fe8 <TIM_OC4_SetConfig+0xc8>)
 8014f90:	4293      	cmp	r3, r2
 8014f92:	d007      	beq.n	8014fa4 <TIM_OC4_SetConfig+0x84>
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	4a15      	ldr	r2, [pc, #84]	; (8014fec <TIM_OC4_SetConfig+0xcc>)
 8014f98:	4293      	cmp	r3, r2
 8014f9a:	d003      	beq.n	8014fa4 <TIM_OC4_SetConfig+0x84>
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	4a14      	ldr	r2, [pc, #80]	; (8014ff0 <TIM_OC4_SetConfig+0xd0>)
 8014fa0:	4293      	cmp	r3, r2
 8014fa2:	d109      	bne.n	8014fb8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014fa4:	697b      	ldr	r3, [r7, #20]
 8014fa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014faa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014fac:	683b      	ldr	r3, [r7, #0]
 8014fae:	695b      	ldr	r3, [r3, #20]
 8014fb0:	019b      	lsls	r3, r3, #6
 8014fb2:	697a      	ldr	r2, [r7, #20]
 8014fb4:	4313      	orrs	r3, r2
 8014fb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	697a      	ldr	r2, [r7, #20]
 8014fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	68fa      	ldr	r2, [r7, #12]
 8014fc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014fc4:	683b      	ldr	r3, [r7, #0]
 8014fc6:	685a      	ldr	r2, [r3, #4]
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	693a      	ldr	r2, [r7, #16]
 8014fd0:	621a      	str	r2, [r3, #32]
}
 8014fd2:	bf00      	nop
 8014fd4:	371c      	adds	r7, #28
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fdc:	4770      	bx	lr
 8014fde:	bf00      	nop
 8014fe0:	40012c00 	.word	0x40012c00
 8014fe4:	40013400 	.word	0x40013400
 8014fe8:	40014000 	.word	0x40014000
 8014fec:	40014400 	.word	0x40014400
 8014ff0:	40014800 	.word	0x40014800

08014ff4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8014ff4:	b480      	push	{r7}
 8014ff6:	b087      	sub	sp, #28
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
 8014ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	6a1b      	ldr	r3, [r3, #32]
 8015002:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	6a1b      	ldr	r3, [r3, #32]
 801500e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	685b      	ldr	r3, [r3, #4]
 8015014:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801501a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015028:	683b      	ldr	r3, [r7, #0]
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	68fa      	ldr	r2, [r7, #12]
 801502e:	4313      	orrs	r3, r2
 8015030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8015032:	693b      	ldr	r3, [r7, #16]
 8015034:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8015038:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801503a:	683b      	ldr	r3, [r7, #0]
 801503c:	689b      	ldr	r3, [r3, #8]
 801503e:	041b      	lsls	r3, r3, #16
 8015040:	693a      	ldr	r2, [r7, #16]
 8015042:	4313      	orrs	r3, r2
 8015044:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	4a17      	ldr	r2, [pc, #92]	; (80150a8 <TIM_OC5_SetConfig+0xb4>)
 801504a:	4293      	cmp	r3, r2
 801504c:	d00f      	beq.n	801506e <TIM_OC5_SetConfig+0x7a>
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	4a16      	ldr	r2, [pc, #88]	; (80150ac <TIM_OC5_SetConfig+0xb8>)
 8015052:	4293      	cmp	r3, r2
 8015054:	d00b      	beq.n	801506e <TIM_OC5_SetConfig+0x7a>
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	4a15      	ldr	r2, [pc, #84]	; (80150b0 <TIM_OC5_SetConfig+0xbc>)
 801505a:	4293      	cmp	r3, r2
 801505c:	d007      	beq.n	801506e <TIM_OC5_SetConfig+0x7a>
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	4a14      	ldr	r2, [pc, #80]	; (80150b4 <TIM_OC5_SetConfig+0xc0>)
 8015062:	4293      	cmp	r3, r2
 8015064:	d003      	beq.n	801506e <TIM_OC5_SetConfig+0x7a>
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	4a13      	ldr	r2, [pc, #76]	; (80150b8 <TIM_OC5_SetConfig+0xc4>)
 801506a:	4293      	cmp	r3, r2
 801506c:	d109      	bne.n	8015082 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801506e:	697b      	ldr	r3, [r7, #20]
 8015070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015074:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8015076:	683b      	ldr	r3, [r7, #0]
 8015078:	695b      	ldr	r3, [r3, #20]
 801507a:	021b      	lsls	r3, r3, #8
 801507c:	697a      	ldr	r2, [r7, #20]
 801507e:	4313      	orrs	r3, r2
 8015080:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	697a      	ldr	r2, [r7, #20]
 8015086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	68fa      	ldr	r2, [r7, #12]
 801508c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801508e:	683b      	ldr	r3, [r7, #0]
 8015090:	685a      	ldr	r2, [r3, #4]
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	693a      	ldr	r2, [r7, #16]
 801509a:	621a      	str	r2, [r3, #32]
}
 801509c:	bf00      	nop
 801509e:	371c      	adds	r7, #28
 80150a0:	46bd      	mov	sp, r7
 80150a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a6:	4770      	bx	lr
 80150a8:	40012c00 	.word	0x40012c00
 80150ac:	40013400 	.word	0x40013400
 80150b0:	40014000 	.word	0x40014000
 80150b4:	40014400 	.word	0x40014400
 80150b8:	40014800 	.word	0x40014800

080150bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80150bc:	b480      	push	{r7}
 80150be:	b087      	sub	sp, #28
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
 80150c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	6a1b      	ldr	r3, [r3, #32]
 80150ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	6a1b      	ldr	r3, [r3, #32]
 80150d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	685b      	ldr	r3, [r3, #4]
 80150dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80150e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80150ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80150ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80150f0:	683b      	ldr	r3, [r7, #0]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	021b      	lsls	r3, r3, #8
 80150f6:	68fa      	ldr	r2, [r7, #12]
 80150f8:	4313      	orrs	r3, r2
 80150fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80150fc:	693b      	ldr	r3, [r7, #16]
 80150fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8015102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8015104:	683b      	ldr	r3, [r7, #0]
 8015106:	689b      	ldr	r3, [r3, #8]
 8015108:	051b      	lsls	r3, r3, #20
 801510a:	693a      	ldr	r2, [r7, #16]
 801510c:	4313      	orrs	r3, r2
 801510e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	4a18      	ldr	r2, [pc, #96]	; (8015174 <TIM_OC6_SetConfig+0xb8>)
 8015114:	4293      	cmp	r3, r2
 8015116:	d00f      	beq.n	8015138 <TIM_OC6_SetConfig+0x7c>
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	4a17      	ldr	r2, [pc, #92]	; (8015178 <TIM_OC6_SetConfig+0xbc>)
 801511c:	4293      	cmp	r3, r2
 801511e:	d00b      	beq.n	8015138 <TIM_OC6_SetConfig+0x7c>
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	4a16      	ldr	r2, [pc, #88]	; (801517c <TIM_OC6_SetConfig+0xc0>)
 8015124:	4293      	cmp	r3, r2
 8015126:	d007      	beq.n	8015138 <TIM_OC6_SetConfig+0x7c>
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	4a15      	ldr	r2, [pc, #84]	; (8015180 <TIM_OC6_SetConfig+0xc4>)
 801512c:	4293      	cmp	r3, r2
 801512e:	d003      	beq.n	8015138 <TIM_OC6_SetConfig+0x7c>
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	4a14      	ldr	r2, [pc, #80]	; (8015184 <TIM_OC6_SetConfig+0xc8>)
 8015134:	4293      	cmp	r3, r2
 8015136:	d109      	bne.n	801514c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8015138:	697b      	ldr	r3, [r7, #20]
 801513a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801513e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8015140:	683b      	ldr	r3, [r7, #0]
 8015142:	695b      	ldr	r3, [r3, #20]
 8015144:	029b      	lsls	r3, r3, #10
 8015146:	697a      	ldr	r2, [r7, #20]
 8015148:	4313      	orrs	r3, r2
 801514a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	697a      	ldr	r2, [r7, #20]
 8015150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	68fa      	ldr	r2, [r7, #12]
 8015156:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8015158:	683b      	ldr	r3, [r7, #0]
 801515a:	685a      	ldr	r2, [r3, #4]
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	693a      	ldr	r2, [r7, #16]
 8015164:	621a      	str	r2, [r3, #32]
}
 8015166:	bf00      	nop
 8015168:	371c      	adds	r7, #28
 801516a:	46bd      	mov	sp, r7
 801516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015170:	4770      	bx	lr
 8015172:	bf00      	nop
 8015174:	40012c00 	.word	0x40012c00
 8015178:	40013400 	.word	0x40013400
 801517c:	40014000 	.word	0x40014000
 8015180:	40014400 	.word	0x40014400
 8015184:	40014800 	.word	0x40014800

08015188 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8015188:	b480      	push	{r7}
 801518a:	b087      	sub	sp, #28
 801518c:	af00      	add	r7, sp, #0
 801518e:	60f8      	str	r0, [r7, #12]
 8015190:	60b9      	str	r1, [r7, #8]
 8015192:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8015194:	68bb      	ldr	r3, [r7, #8]
 8015196:	f003 031f 	and.w	r3, r3, #31
 801519a:	2201      	movs	r2, #1
 801519c:	fa02 f303 	lsl.w	r3, r2, r3
 80151a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	6a1a      	ldr	r2, [r3, #32]
 80151a6:	697b      	ldr	r3, [r7, #20]
 80151a8:	43db      	mvns	r3, r3
 80151aa:	401a      	ands	r2, r3
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	6a1a      	ldr	r2, [r3, #32]
 80151b4:	68bb      	ldr	r3, [r7, #8]
 80151b6:	f003 031f 	and.w	r3, r3, #31
 80151ba:	6879      	ldr	r1, [r7, #4]
 80151bc:	fa01 f303 	lsl.w	r3, r1, r3
 80151c0:	431a      	orrs	r2, r3
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	621a      	str	r2, [r3, #32]
}
 80151c6:	bf00      	nop
 80151c8:	371c      	adds	r7, #28
 80151ca:	46bd      	mov	sp, r7
 80151cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151d0:	4770      	bx	lr
	...

080151d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80151d4:	b480      	push	{r7}
 80151d6:	b085      	sub	sp, #20
 80151d8:	af00      	add	r7, sp, #0
 80151da:	6078      	str	r0, [r7, #4]
 80151dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80151e4:	2b01      	cmp	r3, #1
 80151e6:	d101      	bne.n	80151ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80151e8:	2302      	movs	r3, #2
 80151ea:	e068      	b.n	80152be <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	2201      	movs	r2, #1
 80151f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	2202      	movs	r2, #2
 80151f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	685b      	ldr	r3, [r3, #4]
 8015202:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	689b      	ldr	r3, [r3, #8]
 801520a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	4a2e      	ldr	r2, [pc, #184]	; (80152cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8015212:	4293      	cmp	r3, r2
 8015214:	d004      	beq.n	8015220 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	4a2d      	ldr	r2, [pc, #180]	; (80152d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801521c:	4293      	cmp	r3, r2
 801521e:	d108      	bne.n	8015232 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8015226:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8015228:	683b      	ldr	r3, [r7, #0]
 801522a:	685b      	ldr	r3, [r3, #4]
 801522c:	68fa      	ldr	r2, [r7, #12]
 801522e:	4313      	orrs	r3, r2
 8015230:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015238:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801523a:	683b      	ldr	r3, [r7, #0]
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	68fa      	ldr	r2, [r7, #12]
 8015240:	4313      	orrs	r3, r2
 8015242:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	68fa      	ldr	r2, [r7, #12]
 801524a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	4a1e      	ldr	r2, [pc, #120]	; (80152cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8015252:	4293      	cmp	r3, r2
 8015254:	d01d      	beq.n	8015292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801525e:	d018      	beq.n	8015292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	4a1b      	ldr	r2, [pc, #108]	; (80152d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8015266:	4293      	cmp	r3, r2
 8015268:	d013      	beq.n	8015292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	4a1a      	ldr	r2, [pc, #104]	; (80152d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8015270:	4293      	cmp	r3, r2
 8015272:	d00e      	beq.n	8015292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	4a18      	ldr	r2, [pc, #96]	; (80152dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801527a:	4293      	cmp	r3, r2
 801527c:	d009      	beq.n	8015292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	4a13      	ldr	r2, [pc, #76]	; (80152d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8015284:	4293      	cmp	r3, r2
 8015286:	d004      	beq.n	8015292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	4a14      	ldr	r2, [pc, #80]	; (80152e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801528e:	4293      	cmp	r3, r2
 8015290:	d10c      	bne.n	80152ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8015292:	68bb      	ldr	r3, [r7, #8]
 8015294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015298:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801529a:	683b      	ldr	r3, [r7, #0]
 801529c:	689b      	ldr	r3, [r3, #8]
 801529e:	68ba      	ldr	r2, [r7, #8]
 80152a0:	4313      	orrs	r3, r2
 80152a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	68ba      	ldr	r2, [r7, #8]
 80152aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	2201      	movs	r2, #1
 80152b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	2200      	movs	r2, #0
 80152b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80152bc:	2300      	movs	r3, #0
}
 80152be:	4618      	mov	r0, r3
 80152c0:	3714      	adds	r7, #20
 80152c2:	46bd      	mov	sp, r7
 80152c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c8:	4770      	bx	lr
 80152ca:	bf00      	nop
 80152cc:	40012c00 	.word	0x40012c00
 80152d0:	40013400 	.word	0x40013400
 80152d4:	40000400 	.word	0x40000400
 80152d8:	40000800 	.word	0x40000800
 80152dc:	40000c00 	.word	0x40000c00
 80152e0:	40014000 	.word	0x40014000

080152e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80152e4:	b480      	push	{r7}
 80152e6:	b083      	sub	sp, #12
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80152ec:	bf00      	nop
 80152ee:	370c      	adds	r7, #12
 80152f0:	46bd      	mov	sp, r7
 80152f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f6:	4770      	bx	lr

080152f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80152f8:	b480      	push	{r7}
 80152fa:	b083      	sub	sp, #12
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015300:	bf00      	nop
 8015302:	370c      	adds	r7, #12
 8015304:	46bd      	mov	sp, r7
 8015306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801530a:	4770      	bx	lr

0801530c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801530c:	b480      	push	{r7}
 801530e:	b083      	sub	sp, #12
 8015310:	af00      	add	r7, sp, #0
 8015312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8015314:	bf00      	nop
 8015316:	370c      	adds	r7, #12
 8015318:	46bd      	mov	sp, r7
 801531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801531e:	4770      	bx	lr

08015320 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015320:	b580      	push	{r7, lr}
 8015322:	b082      	sub	sp, #8
 8015324:	af00      	add	r7, sp, #0
 8015326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d101      	bne.n	8015332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801532e:	2301      	movs	r3, #1
 8015330:	e040      	b.n	80153b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015336:	2b00      	cmp	r3, #0
 8015338:	d106      	bne.n	8015348 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	2200      	movs	r2, #0
 801533e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015342:	6878      	ldr	r0, [r7, #4]
 8015344:	f7ee fafe 	bl	8003944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	2224      	movs	r2, #36	; 0x24
 801534c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	681a      	ldr	r2, [r3, #0]
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	f022 0201 	bic.w	r2, r2, #1
 801535c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801535e:	6878      	ldr	r0, [r7, #4]
 8015360:	f000 f8c0 	bl	80154e4 <UART_SetConfig>
 8015364:	4603      	mov	r3, r0
 8015366:	2b01      	cmp	r3, #1
 8015368:	d101      	bne.n	801536e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 801536a:	2301      	movs	r3, #1
 801536c:	e022      	b.n	80153b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015372:	2b00      	cmp	r3, #0
 8015374:	d002      	beq.n	801537c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8015376:	6878      	ldr	r0, [r7, #4]
 8015378:	f000 fb6c 	bl	8015a54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	685a      	ldr	r2, [r3, #4]
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801538a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	681b      	ldr	r3, [r3, #0]
 8015390:	689a      	ldr	r2, [r3, #8]
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801539a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	681a      	ldr	r2, [r3, #0]
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	f042 0201 	orr.w	r2, r2, #1
 80153aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80153ac:	6878      	ldr	r0, [r7, #4]
 80153ae:	f000 fbf3 	bl	8015b98 <UART_CheckIdleState>
 80153b2:	4603      	mov	r3, r0
}
 80153b4:	4618      	mov	r0, r3
 80153b6:	3708      	adds	r7, #8
 80153b8:	46bd      	mov	sp, r7
 80153ba:	bd80      	pop	{r7, pc}

080153bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80153bc:	b580      	push	{r7, lr}
 80153be:	b08a      	sub	sp, #40	; 0x28
 80153c0:	af02      	add	r7, sp, #8
 80153c2:	60f8      	str	r0, [r7, #12]
 80153c4:	60b9      	str	r1, [r7, #8]
 80153c6:	603b      	str	r3, [r7, #0]
 80153c8:	4613      	mov	r3, r2
 80153ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80153d0:	2b20      	cmp	r3, #32
 80153d2:	f040 8082 	bne.w	80154da <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80153d6:	68bb      	ldr	r3, [r7, #8]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d002      	beq.n	80153e2 <HAL_UART_Transmit+0x26>
 80153dc:	88fb      	ldrh	r3, [r7, #6]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d101      	bne.n	80153e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80153e2:	2301      	movs	r3, #1
 80153e4:	e07a      	b.n	80154dc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80153ec:	2b01      	cmp	r3, #1
 80153ee:	d101      	bne.n	80153f4 <HAL_UART_Transmit+0x38>
 80153f0:	2302      	movs	r3, #2
 80153f2:	e073      	b.n	80154dc <HAL_UART_Transmit+0x120>
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	2201      	movs	r2, #1
 80153f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	2200      	movs	r2, #0
 8015400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	2221      	movs	r2, #33	; 0x21
 8015408:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801540a:	f7f6 fe6f 	bl	800c0ec <HAL_GetTick>
 801540e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	88fa      	ldrh	r2, [r7, #6]
 8015414:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	88fa      	ldrh	r2, [r7, #6]
 801541c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	689b      	ldr	r3, [r3, #8]
 8015424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015428:	d108      	bne.n	801543c <HAL_UART_Transmit+0x80>
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	691b      	ldr	r3, [r3, #16]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d104      	bne.n	801543c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8015432:	2300      	movs	r3, #0
 8015434:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8015436:	68bb      	ldr	r3, [r7, #8]
 8015438:	61bb      	str	r3, [r7, #24]
 801543a:	e003      	b.n	8015444 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 801543c:	68bb      	ldr	r3, [r7, #8]
 801543e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015440:	2300      	movs	r3, #0
 8015442:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	2200      	movs	r2, #0
 8015448:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 801544c:	e02d      	b.n	80154aa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801544e:	683b      	ldr	r3, [r7, #0]
 8015450:	9300      	str	r3, [sp, #0]
 8015452:	697b      	ldr	r3, [r7, #20]
 8015454:	2200      	movs	r2, #0
 8015456:	2180      	movs	r1, #128	; 0x80
 8015458:	68f8      	ldr	r0, [r7, #12]
 801545a:	f000 fbe6 	bl	8015c2a <UART_WaitOnFlagUntilTimeout>
 801545e:	4603      	mov	r3, r0
 8015460:	2b00      	cmp	r3, #0
 8015462:	d001      	beq.n	8015468 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8015464:	2303      	movs	r3, #3
 8015466:	e039      	b.n	80154dc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8015468:	69fb      	ldr	r3, [r7, #28]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d10b      	bne.n	8015486 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801546e:	69bb      	ldr	r3, [r7, #24]
 8015470:	881a      	ldrh	r2, [r3, #0]
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801547a:	b292      	uxth	r2, r2
 801547c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801547e:	69bb      	ldr	r3, [r7, #24]
 8015480:	3302      	adds	r3, #2
 8015482:	61bb      	str	r3, [r7, #24]
 8015484:	e008      	b.n	8015498 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8015486:	69fb      	ldr	r3, [r7, #28]
 8015488:	781a      	ldrb	r2, [r3, #0]
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	b292      	uxth	r2, r2
 8015490:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8015492:	69fb      	ldr	r3, [r7, #28]
 8015494:	3301      	adds	r3, #1
 8015496:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801549e:	b29b      	uxth	r3, r3
 80154a0:	3b01      	subs	r3, #1
 80154a2:	b29a      	uxth	r2, r3
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80154b0:	b29b      	uxth	r3, r3
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d1cb      	bne.n	801544e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80154b6:	683b      	ldr	r3, [r7, #0]
 80154b8:	9300      	str	r3, [sp, #0]
 80154ba:	697b      	ldr	r3, [r7, #20]
 80154bc:	2200      	movs	r2, #0
 80154be:	2140      	movs	r1, #64	; 0x40
 80154c0:	68f8      	ldr	r0, [r7, #12]
 80154c2:	f000 fbb2 	bl	8015c2a <UART_WaitOnFlagUntilTimeout>
 80154c6:	4603      	mov	r3, r0
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d001      	beq.n	80154d0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80154cc:	2303      	movs	r3, #3
 80154ce:	e005      	b.n	80154dc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	2220      	movs	r2, #32
 80154d4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80154d6:	2300      	movs	r3, #0
 80154d8:	e000      	b.n	80154dc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80154da:	2302      	movs	r3, #2
  }
}
 80154dc:	4618      	mov	r0, r3
 80154de:	3720      	adds	r7, #32
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bd80      	pop	{r7, pc}

080154e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80154e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80154e8:	b08a      	sub	sp, #40	; 0x28
 80154ea:	af00      	add	r7, sp, #0
 80154ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80154ee:	2300      	movs	r3, #0
 80154f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	689a      	ldr	r2, [r3, #8]
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	691b      	ldr	r3, [r3, #16]
 80154fc:	431a      	orrs	r2, r3
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	695b      	ldr	r3, [r3, #20]
 8015502:	431a      	orrs	r2, r3
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	69db      	ldr	r3, [r3, #28]
 8015508:	4313      	orrs	r3, r2
 801550a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	681a      	ldr	r2, [r3, #0]
 8015512:	4ba4      	ldr	r3, [pc, #656]	; (80157a4 <UART_SetConfig+0x2c0>)
 8015514:	4013      	ands	r3, r2
 8015516:	68fa      	ldr	r2, [r7, #12]
 8015518:	6812      	ldr	r2, [r2, #0]
 801551a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801551c:	430b      	orrs	r3, r1
 801551e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	681b      	ldr	r3, [r3, #0]
 8015524:	685b      	ldr	r3, [r3, #4]
 8015526:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	68da      	ldr	r2, [r3, #12]
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	430a      	orrs	r2, r1
 8015534:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	699b      	ldr	r3, [r3, #24]
 801553a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	4a99      	ldr	r2, [pc, #612]	; (80157a8 <UART_SetConfig+0x2c4>)
 8015542:	4293      	cmp	r3, r2
 8015544:	d004      	beq.n	8015550 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	6a1b      	ldr	r3, [r3, #32]
 801554a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801554c:	4313      	orrs	r3, r2
 801554e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	689b      	ldr	r3, [r3, #8]
 8015556:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015560:	430a      	orrs	r2, r1
 8015562:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	4a90      	ldr	r2, [pc, #576]	; (80157ac <UART_SetConfig+0x2c8>)
 801556a:	4293      	cmp	r3, r2
 801556c:	d126      	bne.n	80155bc <UART_SetConfig+0xd8>
 801556e:	4b90      	ldr	r3, [pc, #576]	; (80157b0 <UART_SetConfig+0x2cc>)
 8015570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015574:	f003 0303 	and.w	r3, r3, #3
 8015578:	2b03      	cmp	r3, #3
 801557a:	d81b      	bhi.n	80155b4 <UART_SetConfig+0xd0>
 801557c:	a201      	add	r2, pc, #4	; (adr r2, 8015584 <UART_SetConfig+0xa0>)
 801557e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015582:	bf00      	nop
 8015584:	08015595 	.word	0x08015595
 8015588:	080155a5 	.word	0x080155a5
 801558c:	0801559d 	.word	0x0801559d
 8015590:	080155ad 	.word	0x080155ad
 8015594:	2301      	movs	r3, #1
 8015596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801559a:	e116      	b.n	80157ca <UART_SetConfig+0x2e6>
 801559c:	2302      	movs	r3, #2
 801559e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80155a2:	e112      	b.n	80157ca <UART_SetConfig+0x2e6>
 80155a4:	2304      	movs	r3, #4
 80155a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80155aa:	e10e      	b.n	80157ca <UART_SetConfig+0x2e6>
 80155ac:	2308      	movs	r3, #8
 80155ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80155b2:	e10a      	b.n	80157ca <UART_SetConfig+0x2e6>
 80155b4:	2310      	movs	r3, #16
 80155b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80155ba:	e106      	b.n	80157ca <UART_SetConfig+0x2e6>
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	4a7c      	ldr	r2, [pc, #496]	; (80157b4 <UART_SetConfig+0x2d0>)
 80155c2:	4293      	cmp	r3, r2
 80155c4:	d138      	bne.n	8015638 <UART_SetConfig+0x154>
 80155c6:	4b7a      	ldr	r3, [pc, #488]	; (80157b0 <UART_SetConfig+0x2cc>)
 80155c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80155cc:	f003 030c 	and.w	r3, r3, #12
 80155d0:	2b0c      	cmp	r3, #12
 80155d2:	d82d      	bhi.n	8015630 <UART_SetConfig+0x14c>
 80155d4:	a201      	add	r2, pc, #4	; (adr r2, 80155dc <UART_SetConfig+0xf8>)
 80155d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155da:	bf00      	nop
 80155dc:	08015611 	.word	0x08015611
 80155e0:	08015631 	.word	0x08015631
 80155e4:	08015631 	.word	0x08015631
 80155e8:	08015631 	.word	0x08015631
 80155ec:	08015621 	.word	0x08015621
 80155f0:	08015631 	.word	0x08015631
 80155f4:	08015631 	.word	0x08015631
 80155f8:	08015631 	.word	0x08015631
 80155fc:	08015619 	.word	0x08015619
 8015600:	08015631 	.word	0x08015631
 8015604:	08015631 	.word	0x08015631
 8015608:	08015631 	.word	0x08015631
 801560c:	08015629 	.word	0x08015629
 8015610:	2300      	movs	r3, #0
 8015612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015616:	e0d8      	b.n	80157ca <UART_SetConfig+0x2e6>
 8015618:	2302      	movs	r3, #2
 801561a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801561e:	e0d4      	b.n	80157ca <UART_SetConfig+0x2e6>
 8015620:	2304      	movs	r3, #4
 8015622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015626:	e0d0      	b.n	80157ca <UART_SetConfig+0x2e6>
 8015628:	2308      	movs	r3, #8
 801562a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801562e:	e0cc      	b.n	80157ca <UART_SetConfig+0x2e6>
 8015630:	2310      	movs	r3, #16
 8015632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015636:	e0c8      	b.n	80157ca <UART_SetConfig+0x2e6>
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	4a5e      	ldr	r2, [pc, #376]	; (80157b8 <UART_SetConfig+0x2d4>)
 801563e:	4293      	cmp	r3, r2
 8015640:	d125      	bne.n	801568e <UART_SetConfig+0x1aa>
 8015642:	4b5b      	ldr	r3, [pc, #364]	; (80157b0 <UART_SetConfig+0x2cc>)
 8015644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015648:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801564c:	2b30      	cmp	r3, #48	; 0x30
 801564e:	d016      	beq.n	801567e <UART_SetConfig+0x19a>
 8015650:	2b30      	cmp	r3, #48	; 0x30
 8015652:	d818      	bhi.n	8015686 <UART_SetConfig+0x1a2>
 8015654:	2b20      	cmp	r3, #32
 8015656:	d00a      	beq.n	801566e <UART_SetConfig+0x18a>
 8015658:	2b20      	cmp	r3, #32
 801565a:	d814      	bhi.n	8015686 <UART_SetConfig+0x1a2>
 801565c:	2b00      	cmp	r3, #0
 801565e:	d002      	beq.n	8015666 <UART_SetConfig+0x182>
 8015660:	2b10      	cmp	r3, #16
 8015662:	d008      	beq.n	8015676 <UART_SetConfig+0x192>
 8015664:	e00f      	b.n	8015686 <UART_SetConfig+0x1a2>
 8015666:	2300      	movs	r3, #0
 8015668:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801566c:	e0ad      	b.n	80157ca <UART_SetConfig+0x2e6>
 801566e:	2302      	movs	r3, #2
 8015670:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015674:	e0a9      	b.n	80157ca <UART_SetConfig+0x2e6>
 8015676:	2304      	movs	r3, #4
 8015678:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801567c:	e0a5      	b.n	80157ca <UART_SetConfig+0x2e6>
 801567e:	2308      	movs	r3, #8
 8015680:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015684:	e0a1      	b.n	80157ca <UART_SetConfig+0x2e6>
 8015686:	2310      	movs	r3, #16
 8015688:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801568c:	e09d      	b.n	80157ca <UART_SetConfig+0x2e6>
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	4a4a      	ldr	r2, [pc, #296]	; (80157bc <UART_SetConfig+0x2d8>)
 8015694:	4293      	cmp	r3, r2
 8015696:	d125      	bne.n	80156e4 <UART_SetConfig+0x200>
 8015698:	4b45      	ldr	r3, [pc, #276]	; (80157b0 <UART_SetConfig+0x2cc>)
 801569a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801569e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80156a2:	2bc0      	cmp	r3, #192	; 0xc0
 80156a4:	d016      	beq.n	80156d4 <UART_SetConfig+0x1f0>
 80156a6:	2bc0      	cmp	r3, #192	; 0xc0
 80156a8:	d818      	bhi.n	80156dc <UART_SetConfig+0x1f8>
 80156aa:	2b80      	cmp	r3, #128	; 0x80
 80156ac:	d00a      	beq.n	80156c4 <UART_SetConfig+0x1e0>
 80156ae:	2b80      	cmp	r3, #128	; 0x80
 80156b0:	d814      	bhi.n	80156dc <UART_SetConfig+0x1f8>
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d002      	beq.n	80156bc <UART_SetConfig+0x1d8>
 80156b6:	2b40      	cmp	r3, #64	; 0x40
 80156b8:	d008      	beq.n	80156cc <UART_SetConfig+0x1e8>
 80156ba:	e00f      	b.n	80156dc <UART_SetConfig+0x1f8>
 80156bc:	2300      	movs	r3, #0
 80156be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80156c2:	e082      	b.n	80157ca <UART_SetConfig+0x2e6>
 80156c4:	2302      	movs	r3, #2
 80156c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80156ca:	e07e      	b.n	80157ca <UART_SetConfig+0x2e6>
 80156cc:	2304      	movs	r3, #4
 80156ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80156d2:	e07a      	b.n	80157ca <UART_SetConfig+0x2e6>
 80156d4:	2308      	movs	r3, #8
 80156d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80156da:	e076      	b.n	80157ca <UART_SetConfig+0x2e6>
 80156dc:	2310      	movs	r3, #16
 80156de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80156e2:	e072      	b.n	80157ca <UART_SetConfig+0x2e6>
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	4a35      	ldr	r2, [pc, #212]	; (80157c0 <UART_SetConfig+0x2dc>)
 80156ea:	4293      	cmp	r3, r2
 80156ec:	d12a      	bne.n	8015744 <UART_SetConfig+0x260>
 80156ee:	4b30      	ldr	r3, [pc, #192]	; (80157b0 <UART_SetConfig+0x2cc>)
 80156f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80156f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80156f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80156fc:	d01a      	beq.n	8015734 <UART_SetConfig+0x250>
 80156fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015702:	d81b      	bhi.n	801573c <UART_SetConfig+0x258>
 8015704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015708:	d00c      	beq.n	8015724 <UART_SetConfig+0x240>
 801570a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801570e:	d815      	bhi.n	801573c <UART_SetConfig+0x258>
 8015710:	2b00      	cmp	r3, #0
 8015712:	d003      	beq.n	801571c <UART_SetConfig+0x238>
 8015714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015718:	d008      	beq.n	801572c <UART_SetConfig+0x248>
 801571a:	e00f      	b.n	801573c <UART_SetConfig+0x258>
 801571c:	2300      	movs	r3, #0
 801571e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015722:	e052      	b.n	80157ca <UART_SetConfig+0x2e6>
 8015724:	2302      	movs	r3, #2
 8015726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801572a:	e04e      	b.n	80157ca <UART_SetConfig+0x2e6>
 801572c:	2304      	movs	r3, #4
 801572e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015732:	e04a      	b.n	80157ca <UART_SetConfig+0x2e6>
 8015734:	2308      	movs	r3, #8
 8015736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801573a:	e046      	b.n	80157ca <UART_SetConfig+0x2e6>
 801573c:	2310      	movs	r3, #16
 801573e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015742:	e042      	b.n	80157ca <UART_SetConfig+0x2e6>
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	4a17      	ldr	r2, [pc, #92]	; (80157a8 <UART_SetConfig+0x2c4>)
 801574a:	4293      	cmp	r3, r2
 801574c:	d13a      	bne.n	80157c4 <UART_SetConfig+0x2e0>
 801574e:	4b18      	ldr	r3, [pc, #96]	; (80157b0 <UART_SetConfig+0x2cc>)
 8015750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015754:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8015758:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801575c:	d01a      	beq.n	8015794 <UART_SetConfig+0x2b0>
 801575e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8015762:	d81b      	bhi.n	801579c <UART_SetConfig+0x2b8>
 8015764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015768:	d00c      	beq.n	8015784 <UART_SetConfig+0x2a0>
 801576a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801576e:	d815      	bhi.n	801579c <UART_SetConfig+0x2b8>
 8015770:	2b00      	cmp	r3, #0
 8015772:	d003      	beq.n	801577c <UART_SetConfig+0x298>
 8015774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015778:	d008      	beq.n	801578c <UART_SetConfig+0x2a8>
 801577a:	e00f      	b.n	801579c <UART_SetConfig+0x2b8>
 801577c:	2300      	movs	r3, #0
 801577e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015782:	e022      	b.n	80157ca <UART_SetConfig+0x2e6>
 8015784:	2302      	movs	r3, #2
 8015786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801578a:	e01e      	b.n	80157ca <UART_SetConfig+0x2e6>
 801578c:	2304      	movs	r3, #4
 801578e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015792:	e01a      	b.n	80157ca <UART_SetConfig+0x2e6>
 8015794:	2308      	movs	r3, #8
 8015796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801579a:	e016      	b.n	80157ca <UART_SetConfig+0x2e6>
 801579c:	2310      	movs	r3, #16
 801579e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80157a2:	e012      	b.n	80157ca <UART_SetConfig+0x2e6>
 80157a4:	efff69f3 	.word	0xefff69f3
 80157a8:	40008000 	.word	0x40008000
 80157ac:	40013800 	.word	0x40013800
 80157b0:	40021000 	.word	0x40021000
 80157b4:	40004400 	.word	0x40004400
 80157b8:	40004800 	.word	0x40004800
 80157bc:	40004c00 	.word	0x40004c00
 80157c0:	40005000 	.word	0x40005000
 80157c4:	2310      	movs	r3, #16
 80157c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	4a9f      	ldr	r2, [pc, #636]	; (8015a4c <UART_SetConfig+0x568>)
 80157d0:	4293      	cmp	r3, r2
 80157d2:	d17a      	bne.n	80158ca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80157d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80157d8:	2b08      	cmp	r3, #8
 80157da:	d824      	bhi.n	8015826 <UART_SetConfig+0x342>
 80157dc:	a201      	add	r2, pc, #4	; (adr r2, 80157e4 <UART_SetConfig+0x300>)
 80157de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157e2:	bf00      	nop
 80157e4:	08015809 	.word	0x08015809
 80157e8:	08015827 	.word	0x08015827
 80157ec:	08015811 	.word	0x08015811
 80157f0:	08015827 	.word	0x08015827
 80157f4:	08015817 	.word	0x08015817
 80157f8:	08015827 	.word	0x08015827
 80157fc:	08015827 	.word	0x08015827
 8015800:	08015827 	.word	0x08015827
 8015804:	0801581f 	.word	0x0801581f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015808:	f7fb ff8e 	bl	8011728 <HAL_RCC_GetPCLK1Freq>
 801580c:	61f8      	str	r0, [r7, #28]
        break;
 801580e:	e010      	b.n	8015832 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015810:	4b8f      	ldr	r3, [pc, #572]	; (8015a50 <UART_SetConfig+0x56c>)
 8015812:	61fb      	str	r3, [r7, #28]
        break;
 8015814:	e00d      	b.n	8015832 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015816:	f7fb feef 	bl	80115f8 <HAL_RCC_GetSysClockFreq>
 801581a:	61f8      	str	r0, [r7, #28]
        break;
 801581c:	e009      	b.n	8015832 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801581e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015822:	61fb      	str	r3, [r7, #28]
        break;
 8015824:	e005      	b.n	8015832 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8015826:	2300      	movs	r3, #0
 8015828:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801582a:	2301      	movs	r3, #1
 801582c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8015830:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8015832:	69fb      	ldr	r3, [r7, #28]
 8015834:	2b00      	cmp	r3, #0
 8015836:	f000 80fb 	beq.w	8015a30 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801583a:	68fb      	ldr	r3, [r7, #12]
 801583c:	685a      	ldr	r2, [r3, #4]
 801583e:	4613      	mov	r3, r2
 8015840:	005b      	lsls	r3, r3, #1
 8015842:	4413      	add	r3, r2
 8015844:	69fa      	ldr	r2, [r7, #28]
 8015846:	429a      	cmp	r2, r3
 8015848:	d305      	bcc.n	8015856 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	685b      	ldr	r3, [r3, #4]
 801584e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8015850:	69fa      	ldr	r2, [r7, #28]
 8015852:	429a      	cmp	r2, r3
 8015854:	d903      	bls.n	801585e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8015856:	2301      	movs	r3, #1
 8015858:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801585c:	e0e8      	b.n	8015a30 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801585e:	69fb      	ldr	r3, [r7, #28]
 8015860:	2200      	movs	r2, #0
 8015862:	461c      	mov	r4, r3
 8015864:	4615      	mov	r5, r2
 8015866:	f04f 0200 	mov.w	r2, #0
 801586a:	f04f 0300 	mov.w	r3, #0
 801586e:	022b      	lsls	r3, r5, #8
 8015870:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8015874:	0222      	lsls	r2, r4, #8
 8015876:	68f9      	ldr	r1, [r7, #12]
 8015878:	6849      	ldr	r1, [r1, #4]
 801587a:	0849      	lsrs	r1, r1, #1
 801587c:	2000      	movs	r0, #0
 801587e:	4688      	mov	r8, r1
 8015880:	4681      	mov	r9, r0
 8015882:	eb12 0a08 	adds.w	sl, r2, r8
 8015886:	eb43 0b09 	adc.w	fp, r3, r9
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	685b      	ldr	r3, [r3, #4]
 801588e:	2200      	movs	r2, #0
 8015890:	603b      	str	r3, [r7, #0]
 8015892:	607a      	str	r2, [r7, #4]
 8015894:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015898:	4650      	mov	r0, sl
 801589a:	4659      	mov	r1, fp
 801589c:	f7eb f91e 	bl	8000adc <__aeabi_uldivmod>
 80158a0:	4602      	mov	r2, r0
 80158a2:	460b      	mov	r3, r1
 80158a4:	4613      	mov	r3, r2
 80158a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80158a8:	69bb      	ldr	r3, [r7, #24]
 80158aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80158ae:	d308      	bcc.n	80158c2 <UART_SetConfig+0x3de>
 80158b0:	69bb      	ldr	r3, [r7, #24]
 80158b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80158b6:	d204      	bcs.n	80158c2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	69ba      	ldr	r2, [r7, #24]
 80158be:	60da      	str	r2, [r3, #12]
 80158c0:	e0b6      	b.n	8015a30 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80158c2:	2301      	movs	r3, #1
 80158c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80158c8:	e0b2      	b.n	8015a30 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	69db      	ldr	r3, [r3, #28]
 80158ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80158d2:	d15e      	bne.n	8015992 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80158d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80158d8:	2b08      	cmp	r3, #8
 80158da:	d828      	bhi.n	801592e <UART_SetConfig+0x44a>
 80158dc:	a201      	add	r2, pc, #4	; (adr r2, 80158e4 <UART_SetConfig+0x400>)
 80158de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158e2:	bf00      	nop
 80158e4:	08015909 	.word	0x08015909
 80158e8:	08015911 	.word	0x08015911
 80158ec:	08015919 	.word	0x08015919
 80158f0:	0801592f 	.word	0x0801592f
 80158f4:	0801591f 	.word	0x0801591f
 80158f8:	0801592f 	.word	0x0801592f
 80158fc:	0801592f 	.word	0x0801592f
 8015900:	0801592f 	.word	0x0801592f
 8015904:	08015927 	.word	0x08015927
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015908:	f7fb ff0e 	bl	8011728 <HAL_RCC_GetPCLK1Freq>
 801590c:	61f8      	str	r0, [r7, #28]
        break;
 801590e:	e014      	b.n	801593a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015910:	f7fb ff20 	bl	8011754 <HAL_RCC_GetPCLK2Freq>
 8015914:	61f8      	str	r0, [r7, #28]
        break;
 8015916:	e010      	b.n	801593a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015918:	4b4d      	ldr	r3, [pc, #308]	; (8015a50 <UART_SetConfig+0x56c>)
 801591a:	61fb      	str	r3, [r7, #28]
        break;
 801591c:	e00d      	b.n	801593a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801591e:	f7fb fe6b 	bl	80115f8 <HAL_RCC_GetSysClockFreq>
 8015922:	61f8      	str	r0, [r7, #28]
        break;
 8015924:	e009      	b.n	801593a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801592a:	61fb      	str	r3, [r7, #28]
        break;
 801592c:	e005      	b.n	801593a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 801592e:	2300      	movs	r3, #0
 8015930:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8015932:	2301      	movs	r3, #1
 8015934:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8015938:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801593a:	69fb      	ldr	r3, [r7, #28]
 801593c:	2b00      	cmp	r3, #0
 801593e:	d077      	beq.n	8015a30 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8015940:	69fb      	ldr	r3, [r7, #28]
 8015942:	005a      	lsls	r2, r3, #1
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	685b      	ldr	r3, [r3, #4]
 8015948:	085b      	lsrs	r3, r3, #1
 801594a:	441a      	add	r2, r3
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	685b      	ldr	r3, [r3, #4]
 8015950:	fbb2 f3f3 	udiv	r3, r2, r3
 8015954:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015956:	69bb      	ldr	r3, [r7, #24]
 8015958:	2b0f      	cmp	r3, #15
 801595a:	d916      	bls.n	801598a <UART_SetConfig+0x4a6>
 801595c:	69bb      	ldr	r3, [r7, #24]
 801595e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015962:	d212      	bcs.n	801598a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8015964:	69bb      	ldr	r3, [r7, #24]
 8015966:	b29b      	uxth	r3, r3
 8015968:	f023 030f 	bic.w	r3, r3, #15
 801596c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801596e:	69bb      	ldr	r3, [r7, #24]
 8015970:	085b      	lsrs	r3, r3, #1
 8015972:	b29b      	uxth	r3, r3
 8015974:	f003 0307 	and.w	r3, r3, #7
 8015978:	b29a      	uxth	r2, r3
 801597a:	8afb      	ldrh	r3, [r7, #22]
 801597c:	4313      	orrs	r3, r2
 801597e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	8afa      	ldrh	r2, [r7, #22]
 8015986:	60da      	str	r2, [r3, #12]
 8015988:	e052      	b.n	8015a30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 801598a:	2301      	movs	r3, #1
 801598c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015990:	e04e      	b.n	8015a30 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8015992:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015996:	2b08      	cmp	r3, #8
 8015998:	d827      	bhi.n	80159ea <UART_SetConfig+0x506>
 801599a:	a201      	add	r2, pc, #4	; (adr r2, 80159a0 <UART_SetConfig+0x4bc>)
 801599c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159a0:	080159c5 	.word	0x080159c5
 80159a4:	080159cd 	.word	0x080159cd
 80159a8:	080159d5 	.word	0x080159d5
 80159ac:	080159eb 	.word	0x080159eb
 80159b0:	080159db 	.word	0x080159db
 80159b4:	080159eb 	.word	0x080159eb
 80159b8:	080159eb 	.word	0x080159eb
 80159bc:	080159eb 	.word	0x080159eb
 80159c0:	080159e3 	.word	0x080159e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80159c4:	f7fb feb0 	bl	8011728 <HAL_RCC_GetPCLK1Freq>
 80159c8:	61f8      	str	r0, [r7, #28]
        break;
 80159ca:	e014      	b.n	80159f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80159cc:	f7fb fec2 	bl	8011754 <HAL_RCC_GetPCLK2Freq>
 80159d0:	61f8      	str	r0, [r7, #28]
        break;
 80159d2:	e010      	b.n	80159f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80159d4:	4b1e      	ldr	r3, [pc, #120]	; (8015a50 <UART_SetConfig+0x56c>)
 80159d6:	61fb      	str	r3, [r7, #28]
        break;
 80159d8:	e00d      	b.n	80159f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80159da:	f7fb fe0d 	bl	80115f8 <HAL_RCC_GetSysClockFreq>
 80159de:	61f8      	str	r0, [r7, #28]
        break;
 80159e0:	e009      	b.n	80159f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80159e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80159e6:	61fb      	str	r3, [r7, #28]
        break;
 80159e8:	e005      	b.n	80159f6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80159ea:	2300      	movs	r3, #0
 80159ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80159ee:	2301      	movs	r3, #1
 80159f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80159f4:	bf00      	nop
    }

    if (pclk != 0U)
 80159f6:	69fb      	ldr	r3, [r7, #28]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d019      	beq.n	8015a30 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	685b      	ldr	r3, [r3, #4]
 8015a00:	085a      	lsrs	r2, r3, #1
 8015a02:	69fb      	ldr	r3, [r7, #28]
 8015a04:	441a      	add	r2, r3
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	685b      	ldr	r3, [r3, #4]
 8015a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8015a0e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015a10:	69bb      	ldr	r3, [r7, #24]
 8015a12:	2b0f      	cmp	r3, #15
 8015a14:	d909      	bls.n	8015a2a <UART_SetConfig+0x546>
 8015a16:	69bb      	ldr	r3, [r7, #24]
 8015a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015a1c:	d205      	bcs.n	8015a2a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8015a1e:	69bb      	ldr	r3, [r7, #24]
 8015a20:	b29a      	uxth	r2, r3
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	60da      	str	r2, [r3, #12]
 8015a28:	e002      	b.n	8015a30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8015a2a:	2301      	movs	r3, #1
 8015a2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	2200      	movs	r2, #0
 8015a34:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	2200      	movs	r2, #0
 8015a3a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8015a3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8015a40:	4618      	mov	r0, r3
 8015a42:	3728      	adds	r7, #40	; 0x28
 8015a44:	46bd      	mov	sp, r7
 8015a46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015a4a:	bf00      	nop
 8015a4c:	40008000 	.word	0x40008000
 8015a50:	00f42400 	.word	0x00f42400

08015a54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015a54:	b480      	push	{r7}
 8015a56:	b083      	sub	sp, #12
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a60:	f003 0301 	and.w	r3, r3, #1
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d00a      	beq.n	8015a7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	685b      	ldr	r3, [r3, #4]
 8015a6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	430a      	orrs	r2, r1
 8015a7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a82:	f003 0302 	and.w	r3, r3, #2
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d00a      	beq.n	8015aa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	685b      	ldr	r3, [r3, #4]
 8015a90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	430a      	orrs	r2, r1
 8015a9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aa4:	f003 0304 	and.w	r3, r3, #4
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d00a      	beq.n	8015ac2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	685b      	ldr	r3, [r3, #4]
 8015ab2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	430a      	orrs	r2, r1
 8015ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ac6:	f003 0308 	and.w	r3, r3, #8
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d00a      	beq.n	8015ae4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	685b      	ldr	r3, [r3, #4]
 8015ad4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	430a      	orrs	r2, r1
 8015ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ae8:	f003 0310 	and.w	r3, r3, #16
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d00a      	beq.n	8015b06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	689b      	ldr	r3, [r3, #8]
 8015af6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	430a      	orrs	r2, r1
 8015b04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b0a:	f003 0320 	and.w	r3, r3, #32
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d00a      	beq.n	8015b28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	689b      	ldr	r3, [r3, #8]
 8015b18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	430a      	orrs	r2, r1
 8015b26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d01a      	beq.n	8015b6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	685b      	ldr	r3, [r3, #4]
 8015b3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	430a      	orrs	r2, r1
 8015b48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015b52:	d10a      	bne.n	8015b6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	685b      	ldr	r3, [r3, #4]
 8015b5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	430a      	orrs	r2, r1
 8015b68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d00a      	beq.n	8015b8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	685b      	ldr	r3, [r3, #4]
 8015b7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	430a      	orrs	r2, r1
 8015b8a:	605a      	str	r2, [r3, #4]
  }
}
 8015b8c:	bf00      	nop
 8015b8e:	370c      	adds	r7, #12
 8015b90:	46bd      	mov	sp, r7
 8015b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b96:	4770      	bx	lr

08015b98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015b98:	b580      	push	{r7, lr}
 8015b9a:	b086      	sub	sp, #24
 8015b9c:	af02      	add	r7, sp, #8
 8015b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015ba8:	f7f6 faa0 	bl	800c0ec <HAL_GetTick>
 8015bac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	f003 0308 	and.w	r3, r3, #8
 8015bb8:	2b08      	cmp	r3, #8
 8015bba:	d10e      	bne.n	8015bda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015bbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015bc0:	9300      	str	r3, [sp, #0]
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	2200      	movs	r2, #0
 8015bc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015bca:	6878      	ldr	r0, [r7, #4]
 8015bcc:	f000 f82d 	bl	8015c2a <UART_WaitOnFlagUntilTimeout>
 8015bd0:	4603      	mov	r3, r0
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d001      	beq.n	8015bda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015bd6:	2303      	movs	r3, #3
 8015bd8:	e023      	b.n	8015c22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	f003 0304 	and.w	r3, r3, #4
 8015be4:	2b04      	cmp	r3, #4
 8015be6:	d10e      	bne.n	8015c06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015be8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015bec:	9300      	str	r3, [sp, #0]
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	2200      	movs	r2, #0
 8015bf2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8015bf6:	6878      	ldr	r0, [r7, #4]
 8015bf8:	f000 f817 	bl	8015c2a <UART_WaitOnFlagUntilTimeout>
 8015bfc:	4603      	mov	r3, r0
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d001      	beq.n	8015c06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015c02:	2303      	movs	r3, #3
 8015c04:	e00d      	b.n	8015c22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	2220      	movs	r2, #32
 8015c0a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	2220      	movs	r2, #32
 8015c10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	2200      	movs	r2, #0
 8015c16:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	2200      	movs	r2, #0
 8015c1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8015c20:	2300      	movs	r3, #0
}
 8015c22:	4618      	mov	r0, r3
 8015c24:	3710      	adds	r7, #16
 8015c26:	46bd      	mov	sp, r7
 8015c28:	bd80      	pop	{r7, pc}

08015c2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015c2a:	b580      	push	{r7, lr}
 8015c2c:	b09c      	sub	sp, #112	; 0x70
 8015c2e:	af00      	add	r7, sp, #0
 8015c30:	60f8      	str	r0, [r7, #12]
 8015c32:	60b9      	str	r1, [r7, #8]
 8015c34:	603b      	str	r3, [r7, #0]
 8015c36:	4613      	mov	r3, r2
 8015c38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015c3a:	e0a5      	b.n	8015d88 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015c3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015c42:	f000 80a1 	beq.w	8015d88 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015c46:	f7f6 fa51 	bl	800c0ec <HAL_GetTick>
 8015c4a:	4602      	mov	r2, r0
 8015c4c:	683b      	ldr	r3, [r7, #0]
 8015c4e:	1ad3      	subs	r3, r2, r3
 8015c50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015c52:	429a      	cmp	r2, r3
 8015c54:	d302      	bcc.n	8015c5c <UART_WaitOnFlagUntilTimeout+0x32>
 8015c56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d13e      	bne.n	8015cda <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c64:	e853 3f00 	ldrex	r3, [r3]
 8015c68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8015c70:	667b      	str	r3, [r7, #100]	; 0x64
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	461a      	mov	r2, r3
 8015c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015c7c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015c80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015c82:	e841 2300 	strex	r3, r2, [r1]
 8015c86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8015c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d1e6      	bne.n	8015c5c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	3308      	adds	r3, #8
 8015c94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c98:	e853 3f00 	ldrex	r3, [r3]
 8015c9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ca0:	f023 0301 	bic.w	r3, r3, #1
 8015ca4:	663b      	str	r3, [r7, #96]	; 0x60
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	3308      	adds	r3, #8
 8015cac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015cae:	64ba      	str	r2, [r7, #72]	; 0x48
 8015cb0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015cb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015cb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015cb6:	e841 2300 	strex	r3, r2, [r1]
 8015cba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8015cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d1e5      	bne.n	8015c8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	2220      	movs	r2, #32
 8015cc6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	2220      	movs	r2, #32
 8015ccc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	2200      	movs	r2, #0
 8015cd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8015cd6:	2303      	movs	r3, #3
 8015cd8:	e067      	b.n	8015daa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	f003 0304 	and.w	r3, r3, #4
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d04f      	beq.n	8015d88 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	69db      	ldr	r3, [r3, #28]
 8015cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015cf6:	d147      	bne.n	8015d88 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015d00:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d0a:	e853 3f00 	ldrex	r3, [r3]
 8015d0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8015d16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	461a      	mov	r2, r3
 8015d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015d20:	637b      	str	r3, [r7, #52]	; 0x34
 8015d22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015d26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015d28:	e841 2300 	strex	r3, r2, [r1]
 8015d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8015d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d1e6      	bne.n	8015d02 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	3308      	adds	r3, #8
 8015d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d3c:	697b      	ldr	r3, [r7, #20]
 8015d3e:	e853 3f00 	ldrex	r3, [r3]
 8015d42:	613b      	str	r3, [r7, #16]
   return(result);
 8015d44:	693b      	ldr	r3, [r7, #16]
 8015d46:	f023 0301 	bic.w	r3, r3, #1
 8015d4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	681b      	ldr	r3, [r3, #0]
 8015d50:	3308      	adds	r3, #8
 8015d52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015d54:	623a      	str	r2, [r7, #32]
 8015d56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d58:	69f9      	ldr	r1, [r7, #28]
 8015d5a:	6a3a      	ldr	r2, [r7, #32]
 8015d5c:	e841 2300 	strex	r3, r2, [r1]
 8015d60:	61bb      	str	r3, [r7, #24]
   return(result);
 8015d62:	69bb      	ldr	r3, [r7, #24]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d1e5      	bne.n	8015d34 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	2220      	movs	r2, #32
 8015d6c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	2220      	movs	r2, #32
 8015d72:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	2220      	movs	r2, #32
 8015d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	2200      	movs	r2, #0
 8015d80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8015d84:	2303      	movs	r3, #3
 8015d86:	e010      	b.n	8015daa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	69da      	ldr	r2, [r3, #28]
 8015d8e:	68bb      	ldr	r3, [r7, #8]
 8015d90:	4013      	ands	r3, r2
 8015d92:	68ba      	ldr	r2, [r7, #8]
 8015d94:	429a      	cmp	r2, r3
 8015d96:	bf0c      	ite	eq
 8015d98:	2301      	moveq	r3, #1
 8015d9a:	2300      	movne	r3, #0
 8015d9c:	b2db      	uxtb	r3, r3
 8015d9e:	461a      	mov	r2, r3
 8015da0:	79fb      	ldrb	r3, [r7, #7]
 8015da2:	429a      	cmp	r2, r3
 8015da4:	f43f af4a 	beq.w	8015c3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015da8:	2300      	movs	r3, #0
}
 8015daa:	4618      	mov	r0, r3
 8015dac:	3770      	adds	r7, #112	; 0x70
 8015dae:	46bd      	mov	sp, r7
 8015db0:	bd80      	pop	{r7, pc}
	...

08015db4 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8015db4:	b480      	push	{r7}
 8015db6:	b087      	sub	sp, #28
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
 8015dbc:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8015dbe:	683b      	ldr	r3, [r7, #0]
 8015dc0:	681a      	ldr	r2, [r3, #0]
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015dc8:	683a      	ldr	r2, [r7, #0]
 8015dca:	6812      	ldr	r2, [r2, #0]
 8015dcc:	f023 0101 	bic.w	r1, r3, #1
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8015dd6:	683b      	ldr	r3, [r7, #0]
 8015dd8:	689b      	ldr	r3, [r3, #8]
 8015dda:	2b08      	cmp	r3, #8
 8015ddc:	d102      	bne.n	8015de4 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8015dde:	2340      	movs	r3, #64	; 0x40
 8015de0:	617b      	str	r3, [r7, #20]
 8015de2:	e001      	b.n	8015de8 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8015de4:	2300      	movs	r3, #0
 8015de6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8015de8:	683b      	ldr	r3, [r7, #0]
 8015dea:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8015dec:	697b      	ldr	r3, [r7, #20]
 8015dee:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8015df0:	683b      	ldr	r3, [r7, #0]
 8015df2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8015df4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8015df6:	683b      	ldr	r3, [r7, #0]
 8015df8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8015dfa:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8015dfc:	683b      	ldr	r3, [r7, #0]
 8015dfe:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8015e00:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8015e02:	683b      	ldr	r3, [r7, #0]
 8015e04:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8015e06:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8015e08:	683b      	ldr	r3, [r7, #0]
 8015e0a:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8015e0c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8015e0e:	683b      	ldr	r3, [r7, #0]
 8015e10:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8015e12:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8015e14:	683b      	ldr	r3, [r7, #0]
 8015e16:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8015e18:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8015e1a:	683b      	ldr	r3, [r7, #0]
 8015e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8015e1e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8015e20:	683b      	ldr	r3, [r7, #0]
 8015e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8015e24:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8015e26:	683b      	ldr	r3, [r7, #0]
 8015e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8015e2a:	4313      	orrs	r3, r2
 8015e2c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8015e2e:	683b      	ldr	r3, [r7, #0]
 8015e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e32:	693a      	ldr	r2, [r7, #16]
 8015e34:	4313      	orrs	r3, r2
 8015e36:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8015e38:	683b      	ldr	r3, [r7, #0]
 8015e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e3c:	693a      	ldr	r2, [r7, #16]
 8015e3e:	4313      	orrs	r3, r2
 8015e40:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 8015e42:	683b      	ldr	r3, [r7, #0]
 8015e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e46:	693a      	ldr	r2, [r7, #16]
 8015e48:	4313      	orrs	r3, r2
 8015e4a:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8015e4c:	4b20      	ldr	r3, [pc, #128]	; (8015ed0 <FMC_NORSRAM_Init+0x11c>)
 8015e4e:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015e56:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015e5e:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8015e66:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8015e68:	683b      	ldr	r3, [r7, #0]
 8015e6a:	681a      	ldr	r2, [r3, #0]
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	43db      	mvns	r3, r3
 8015e76:	ea02 0103 	and.w	r1, r2, r3
 8015e7a:	683b      	ldr	r3, [r7, #0]
 8015e7c:	681a      	ldr	r2, [r3, #0]
 8015e7e:	693b      	ldr	r3, [r7, #16]
 8015e80:	4319      	orrs	r1, r3
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8015e88:	683b      	ldr	r3, [r7, #0]
 8015e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015e90:	d10c      	bne.n	8015eac <FMC_NORSRAM_Init+0xf8>
 8015e92:	683b      	ldr	r3, [r7, #0]
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d008      	beq.n	8015eac <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8015ea2:	683b      	ldr	r3, [r7, #0]
 8015ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ea6:	431a      	orrs	r2, r3
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8015eac:	683b      	ldr	r3, [r7, #0]
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d006      	beq.n	8015ec2 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	681a      	ldr	r2, [r3, #0]
 8015eb8:	683b      	ldr	r3, [r7, #0]
 8015eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ebc:	431a      	orrs	r2, r3
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8015ec2:	2300      	movs	r3, #0
}
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	371c      	adds	r7, #28
 8015ec8:	46bd      	mov	sp, r7
 8015eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ece:	4770      	bx	lr
 8015ed0:	0008fb7f 	.word	0x0008fb7f

08015ed4 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8015ed4:	b480      	push	{r7}
 8015ed6:	b087      	sub	sp, #28
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	60f8      	str	r0, [r7, #12]
 8015edc:	60b9      	str	r1, [r7, #8]
 8015ede:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	1c5a      	adds	r2, r3, #1
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015eea:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8015eee:	68bb      	ldr	r3, [r7, #8]
 8015ef0:	681a      	ldr	r2, [r3, #0]
 8015ef2:	68bb      	ldr	r3, [r7, #8]
 8015ef4:	685b      	ldr	r3, [r3, #4]
 8015ef6:	011b      	lsls	r3, r3, #4
 8015ef8:	431a      	orrs	r2, r3
 8015efa:	68bb      	ldr	r3, [r7, #8]
 8015efc:	689b      	ldr	r3, [r3, #8]
 8015efe:	021b      	lsls	r3, r3, #8
 8015f00:	431a      	orrs	r2, r3
 8015f02:	68bb      	ldr	r3, [r7, #8]
 8015f04:	691b      	ldr	r3, [r3, #16]
 8015f06:	041b      	lsls	r3, r3, #16
 8015f08:	431a      	orrs	r2, r3
 8015f0a:	68bb      	ldr	r3, [r7, #8]
 8015f0c:	695b      	ldr	r3, [r3, #20]
 8015f0e:	3b01      	subs	r3, #1
 8015f10:	051b      	lsls	r3, r3, #20
 8015f12:	431a      	orrs	r2, r3
 8015f14:	68bb      	ldr	r3, [r7, #8]
 8015f16:	699b      	ldr	r3, [r3, #24]
 8015f18:	3b02      	subs	r3, #2
 8015f1a:	061b      	lsls	r3, r3, #24
 8015f1c:	431a      	orrs	r2, r3
 8015f1e:	68bb      	ldr	r3, [r7, #8]
 8015f20:	69db      	ldr	r3, [r3, #28]
 8015f22:	4313      	orrs	r3, r2
 8015f24:	687a      	ldr	r2, [r7, #4]
 8015f26:	3201      	adds	r2, #1
 8015f28:	4319      	orrs	r1, r3
 8015f2a:	68fb      	ldr	r3, [r7, #12]
 8015f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015f38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015f3c:	d113      	bne.n	8015f66 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	685b      	ldr	r3, [r3, #4]
 8015f42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8015f46:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8015f48:	68bb      	ldr	r3, [r7, #8]
 8015f4a:	695b      	ldr	r3, [r3, #20]
 8015f4c:	3b01      	subs	r3, #1
 8015f4e:	051b      	lsls	r3, r3, #20
 8015f50:	697a      	ldr	r2, [r7, #20]
 8015f52:	4313      	orrs	r3, r2
 8015f54:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	685b      	ldr	r3, [r3, #4]
 8015f5a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8015f5e:	697b      	ldr	r3, [r7, #20]
 8015f60:	431a      	orrs	r2, r3
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8015f66:	2300      	movs	r3, #0
}
 8015f68:	4618      	mov	r0, r3
 8015f6a:	371c      	adds	r7, #28
 8015f6c:	46bd      	mov	sp, r7
 8015f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f72:	4770      	bx	lr

08015f74 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8015f74:	b480      	push	{r7}
 8015f76:	b085      	sub	sp, #20
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	60f8      	str	r0, [r7, #12]
 8015f7c:	60b9      	str	r1, [r7, #8]
 8015f7e:	607a      	str	r2, [r7, #4]
 8015f80:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8015f82:	683b      	ldr	r3, [r7, #0]
 8015f84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015f88:	d11d      	bne.n	8015fc6 <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	687a      	ldr	r2, [r7, #4]
 8015f8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015f92:	4b13      	ldr	r3, [pc, #76]	; (8015fe0 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8015f94:	4013      	ands	r3, r2
 8015f96:	68ba      	ldr	r2, [r7, #8]
 8015f98:	6811      	ldr	r1, [r2, #0]
 8015f9a:	68ba      	ldr	r2, [r7, #8]
 8015f9c:	6852      	ldr	r2, [r2, #4]
 8015f9e:	0112      	lsls	r2, r2, #4
 8015fa0:	4311      	orrs	r1, r2
 8015fa2:	68ba      	ldr	r2, [r7, #8]
 8015fa4:	6892      	ldr	r2, [r2, #8]
 8015fa6:	0212      	lsls	r2, r2, #8
 8015fa8:	4311      	orrs	r1, r2
 8015faa:	68ba      	ldr	r2, [r7, #8]
 8015fac:	69d2      	ldr	r2, [r2, #28]
 8015fae:	4311      	orrs	r1, r2
 8015fb0:	68ba      	ldr	r2, [r7, #8]
 8015fb2:	6912      	ldr	r2, [r2, #16]
 8015fb4:	0412      	lsls	r2, r2, #16
 8015fb6:	430a      	orrs	r2, r1
 8015fb8:	ea43 0102 	orr.w	r1, r3, r2
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	687a      	ldr	r2, [r7, #4]
 8015fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8015fc4:	e005      	b.n	8015fd2 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	687a      	ldr	r2, [r7, #4]
 8015fca:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8015fce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8015fd2:	2300      	movs	r3, #0
}
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	3714      	adds	r7, #20
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fde:	4770      	bx	lr
 8015fe0:	cff00000 	.word	0xcff00000

08015fe4 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8015fe4:	b084      	sub	sp, #16
 8015fe6:	b480      	push	{r7}
 8015fe8:	b085      	sub	sp, #20
 8015fea:	af00      	add	r7, sp, #0
 8015fec:	6078      	str	r0, [r7, #4]
 8015fee:	f107 001c 	add.w	r0, r7, #28
 8015ff2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8015ff6:	2300      	movs	r3, #0
 8015ff8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8015ffa:	6a3b      	ldr	r3, [r7, #32]
 8015ffc:	68fa      	ldr	r2, [r7, #12]
 8015ffe:	4313      	orrs	r3, r2
 8016000:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8016002:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8016004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8016006:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8016008:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 801600a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 801600c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 801600e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8016010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8016012:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8016014:	68fa      	ldr	r2, [r7, #12]
 8016016:	4313      	orrs	r3, r2
 8016018:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	685b      	ldr	r3, [r3, #4]
 801601e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8016022:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016026:	68fa      	ldr	r2, [r7, #12]
 8016028:	431a      	orrs	r2, r3
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801602e:	2300      	movs	r3, #0
}
 8016030:	4618      	mov	r0, r3
 8016032:	3714      	adds	r7, #20
 8016034:	46bd      	mov	sp, r7
 8016036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801603a:	b004      	add	sp, #16
 801603c:	4770      	bx	lr

0801603e <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 801603e:	b480      	push	{r7}
 8016040:	b083      	sub	sp, #12
 8016042:	af00      	add	r7, sp, #0
 8016044:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801604c:	4618      	mov	r0, r3
 801604e:	370c      	adds	r7, #12
 8016050:	46bd      	mov	sp, r7
 8016052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016056:	4770      	bx	lr

08016058 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b082      	sub	sp, #8
 801605c:	af00      	add	r7, sp, #0
 801605e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	2203      	movs	r2, #3
 8016064:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8016066:	2002      	movs	r0, #2
 8016068:	f7f6 f84c 	bl	800c104 <HAL_Delay>

  return HAL_OK;
 801606c:	2300      	movs	r3, #0
}
 801606e:	4618      	mov	r0, r3
 8016070:	3708      	adds	r7, #8
 8016072:	46bd      	mov	sp, r7
 8016074:	bd80      	pop	{r7, pc}

08016076 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8016076:	b480      	push	{r7}
 8016078:	b083      	sub	sp, #12
 801607a:	af00      	add	r7, sp, #0
 801607c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	f003 0303 	and.w	r3, r3, #3
}
 8016086:	4618      	mov	r0, r3
 8016088:	370c      	adds	r7, #12
 801608a:	46bd      	mov	sp, r7
 801608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016090:	4770      	bx	lr

08016092 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8016092:	b480      	push	{r7}
 8016094:	b085      	sub	sp, #20
 8016096:	af00      	add	r7, sp, #0
 8016098:	6078      	str	r0, [r7, #4]
 801609a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801609c:	2300      	movs	r3, #0
 801609e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80160a0:	683b      	ldr	r3, [r7, #0]
 80160a2:	681a      	ldr	r2, [r3, #0]
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80160a8:	683b      	ldr	r3, [r7, #0]
 80160aa:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80160ac:	683b      	ldr	r3, [r7, #0]
 80160ae:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80160b0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80160b2:	683b      	ldr	r3, [r7, #0]
 80160b4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80160b6:	431a      	orrs	r2, r3
                       Command->CPSM);
 80160b8:	683b      	ldr	r3, [r7, #0]
 80160ba:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80160bc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80160be:	68fa      	ldr	r2, [r7, #12]
 80160c0:	4313      	orrs	r3, r2
 80160c2:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	68db      	ldr	r3, [r3, #12]
 80160c8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80160cc:	f023 030f 	bic.w	r3, r3, #15
 80160d0:	68fa      	ldr	r2, [r7, #12]
 80160d2:	431a      	orrs	r2, r3
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80160d8:	2300      	movs	r3, #0
}
 80160da:	4618      	mov	r0, r3
 80160dc:	3714      	adds	r7, #20
 80160de:	46bd      	mov	sp, r7
 80160e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e4:	4770      	bx	lr

080160e6 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80160e6:	b480      	push	{r7}
 80160e8:	b083      	sub	sp, #12
 80160ea:	af00      	add	r7, sp, #0
 80160ec:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	691b      	ldr	r3, [r3, #16]
 80160f2:	b2db      	uxtb	r3, r3
}
 80160f4:	4618      	mov	r0, r3
 80160f6:	370c      	adds	r7, #12
 80160f8:	46bd      	mov	sp, r7
 80160fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160fe:	4770      	bx	lr

08016100 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8016100:	b480      	push	{r7}
 8016102:	b085      	sub	sp, #20
 8016104:	af00      	add	r7, sp, #0
 8016106:	6078      	str	r0, [r7, #4]
 8016108:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	3314      	adds	r3, #20
 801610e:	461a      	mov	r2, r3
 8016110:	683b      	ldr	r3, [r7, #0]
 8016112:	4413      	add	r3, r2
 8016114:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	681b      	ldr	r3, [r3, #0]
}
 801611a:	4618      	mov	r0, r3
 801611c:	3714      	adds	r7, #20
 801611e:	46bd      	mov	sp, r7
 8016120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016124:	4770      	bx	lr

08016126 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8016126:	b480      	push	{r7}
 8016128:	b085      	sub	sp, #20
 801612a:	af00      	add	r7, sp, #0
 801612c:	6078      	str	r0, [r7, #4]
 801612e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8016130:	2300      	movs	r3, #0
 8016132:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8016134:	683b      	ldr	r3, [r7, #0]
 8016136:	681a      	ldr	r2, [r3, #0]
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801613c:	683b      	ldr	r3, [r7, #0]
 801613e:	685a      	ldr	r2, [r3, #4]
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8016144:	683b      	ldr	r3, [r7, #0]
 8016146:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8016148:	683b      	ldr	r3, [r7, #0]
 801614a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801614c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 801614e:	683b      	ldr	r3, [r7, #0]
 8016150:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8016152:	431a      	orrs	r2, r3
                       Data->DPSM);
 8016154:	683b      	ldr	r3, [r7, #0]
 8016156:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8016158:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801615a:	68fa      	ldr	r2, [r7, #12]
 801615c:	4313      	orrs	r3, r2
 801615e:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016164:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	431a      	orrs	r2, r3
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8016170:	2300      	movs	r3, #0

}
 8016172:	4618      	mov	r0, r3
 8016174:	3714      	adds	r7, #20
 8016176:	46bd      	mov	sp, r7
 8016178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801617c:	4770      	bx	lr

0801617e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801617e:	b580      	push	{r7, lr}
 8016180:	b088      	sub	sp, #32
 8016182:	af00      	add	r7, sp, #0
 8016184:	6078      	str	r0, [r7, #4]
 8016186:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8016188:	683b      	ldr	r3, [r7, #0]
 801618a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801618c:	2310      	movs	r3, #16
 801618e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8016190:	2340      	movs	r3, #64	; 0x40
 8016192:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8016194:	2300      	movs	r3, #0
 8016196:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8016198:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801619c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801619e:	f107 0308 	add.w	r3, r7, #8
 80161a2:	4619      	mov	r1, r3
 80161a4:	6878      	ldr	r0, [r7, #4]
 80161a6:	f7ff ff74 	bl	8016092 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80161aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80161ae:	2110      	movs	r1, #16
 80161b0:	6878      	ldr	r0, [r7, #4]
 80161b2:	f000 f94d 	bl	8016450 <SDMMC_GetCmdResp1>
 80161b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80161b8:	69fb      	ldr	r3, [r7, #28]
}
 80161ba:	4618      	mov	r0, r3
 80161bc:	3720      	adds	r7, #32
 80161be:	46bd      	mov	sp, r7
 80161c0:	bd80      	pop	{r7, pc}

080161c2 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80161c2:	b580      	push	{r7, lr}
 80161c4:	b08a      	sub	sp, #40	; 0x28
 80161c6:	af00      	add	r7, sp, #0
 80161c8:	60f8      	str	r0, [r7, #12]
 80161ca:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80161ce:	683b      	ldr	r3, [r7, #0]
 80161d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80161d2:	2307      	movs	r3, #7
 80161d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80161d6:	2340      	movs	r3, #64	; 0x40
 80161d8:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80161da:	2300      	movs	r3, #0
 80161dc:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80161de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80161e2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80161e4:	f107 0310 	add.w	r3, r7, #16
 80161e8:	4619      	mov	r1, r3
 80161ea:	68f8      	ldr	r0, [r7, #12]
 80161ec:	f7ff ff51 	bl	8016092 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80161f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80161f4:	2107      	movs	r1, #7
 80161f6:	68f8      	ldr	r0, [r7, #12]
 80161f8:	f000 f92a 	bl	8016450 <SDMMC_GetCmdResp1>
 80161fc:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80161fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016200:	4618      	mov	r0, r3
 8016202:	3728      	adds	r7, #40	; 0x28
 8016204:	46bd      	mov	sp, r7
 8016206:	bd80      	pop	{r7, pc}

08016208 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8016208:	b580      	push	{r7, lr}
 801620a:	b088      	sub	sp, #32
 801620c:	af00      	add	r7, sp, #0
 801620e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8016210:	2300      	movs	r3, #0
 8016212:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8016214:	2300      	movs	r3, #0
 8016216:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8016218:	2300      	movs	r3, #0
 801621a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801621c:	2300      	movs	r3, #0
 801621e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8016220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016224:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8016226:	f107 0308 	add.w	r3, r7, #8
 801622a:	4619      	mov	r1, r3
 801622c:	6878      	ldr	r0, [r7, #4]
 801622e:	f7ff ff30 	bl	8016092 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8016232:	6878      	ldr	r0, [r7, #4]
 8016234:	f000 fb44 	bl	80168c0 <SDMMC_GetCmdError>
 8016238:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801623a:	69fb      	ldr	r3, [r7, #28]
}
 801623c:	4618      	mov	r0, r3
 801623e:	3720      	adds	r7, #32
 8016240:	46bd      	mov	sp, r7
 8016242:	bd80      	pop	{r7, pc}

08016244 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8016244:	b580      	push	{r7, lr}
 8016246:	b088      	sub	sp, #32
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801624c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8016250:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8016252:	2308      	movs	r3, #8
 8016254:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8016256:	2340      	movs	r3, #64	; 0x40
 8016258:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801625a:	2300      	movs	r3, #0
 801625c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801625e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016262:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8016264:	f107 0308 	add.w	r3, r7, #8
 8016268:	4619      	mov	r1, r3
 801626a:	6878      	ldr	r0, [r7, #4]
 801626c:	f7ff ff11 	bl	8016092 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8016270:	6878      	ldr	r0, [r7, #4]
 8016272:	f000 fad7 	bl	8016824 <SDMMC_GetCmdResp7>
 8016276:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8016278:	69fb      	ldr	r3, [r7, #28]
}
 801627a:	4618      	mov	r0, r3
 801627c:	3720      	adds	r7, #32
 801627e:	46bd      	mov	sp, r7
 8016280:	bd80      	pop	{r7, pc}

08016282 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8016282:	b580      	push	{r7, lr}
 8016284:	b088      	sub	sp, #32
 8016286:	af00      	add	r7, sp, #0
 8016288:	6078      	str	r0, [r7, #4]
 801628a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801628c:	683b      	ldr	r3, [r7, #0]
 801628e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8016290:	2337      	movs	r3, #55	; 0x37
 8016292:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8016294:	2340      	movs	r3, #64	; 0x40
 8016296:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8016298:	2300      	movs	r3, #0
 801629a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801629c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80162a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80162a2:	f107 0308 	add.w	r3, r7, #8
 80162a6:	4619      	mov	r1, r3
 80162a8:	6878      	ldr	r0, [r7, #4]
 80162aa:	f7ff fef2 	bl	8016092 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80162ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80162b2:	2137      	movs	r1, #55	; 0x37
 80162b4:	6878      	ldr	r0, [r7, #4]
 80162b6:	f000 f8cb 	bl	8016450 <SDMMC_GetCmdResp1>
 80162ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80162bc:	69fb      	ldr	r3, [r7, #28]
}
 80162be:	4618      	mov	r0, r3
 80162c0:	3720      	adds	r7, #32
 80162c2:	46bd      	mov	sp, r7
 80162c4:	bd80      	pop	{r7, pc}

080162c6 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80162c6:	b580      	push	{r7, lr}
 80162c8:	b088      	sub	sp, #32
 80162ca:	af00      	add	r7, sp, #0
 80162cc:	6078      	str	r0, [r7, #4]
 80162ce:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80162d0:	683b      	ldr	r3, [r7, #0]
 80162d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80162d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80162da:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80162dc:	2329      	movs	r3, #41	; 0x29
 80162de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80162e0:	2340      	movs	r3, #64	; 0x40
 80162e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80162e4:	2300      	movs	r3, #0
 80162e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80162e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80162ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80162ee:	f107 0308 	add.w	r3, r7, #8
 80162f2:	4619      	mov	r1, r3
 80162f4:	6878      	ldr	r0, [r7, #4]
 80162f6:	f7ff fecc 	bl	8016092 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80162fa:	6878      	ldr	r0, [r7, #4]
 80162fc:	f000 f9de 	bl	80166bc <SDMMC_GetCmdResp3>
 8016300:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8016302:	69fb      	ldr	r3, [r7, #28]
}
 8016304:	4618      	mov	r0, r3
 8016306:	3720      	adds	r7, #32
 8016308:	46bd      	mov	sp, r7
 801630a:	bd80      	pop	{r7, pc}

0801630c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801630c:	b580      	push	{r7, lr}
 801630e:	b088      	sub	sp, #32
 8016310:	af00      	add	r7, sp, #0
 8016312:	6078      	str	r0, [r7, #4]
 8016314:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8016316:	683b      	ldr	r3, [r7, #0]
 8016318:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801631a:	2306      	movs	r3, #6
 801631c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801631e:	2340      	movs	r3, #64	; 0x40
 8016320:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8016322:	2300      	movs	r3, #0
 8016324:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8016326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801632a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801632c:	f107 0308 	add.w	r3, r7, #8
 8016330:	4619      	mov	r1, r3
 8016332:	6878      	ldr	r0, [r7, #4]
 8016334:	f7ff fead 	bl	8016092 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8016338:	f241 3288 	movw	r2, #5000	; 0x1388
 801633c:	2106      	movs	r1, #6
 801633e:	6878      	ldr	r0, [r7, #4]
 8016340:	f000 f886 	bl	8016450 <SDMMC_GetCmdResp1>
 8016344:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8016346:	69fb      	ldr	r3, [r7, #28]
}
 8016348:	4618      	mov	r0, r3
 801634a:	3720      	adds	r7, #32
 801634c:	46bd      	mov	sp, r7
 801634e:	bd80      	pop	{r7, pc}

08016350 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8016350:	b580      	push	{r7, lr}
 8016352:	b088      	sub	sp, #32
 8016354:	af00      	add	r7, sp, #0
 8016356:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8016358:	2300      	movs	r3, #0
 801635a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801635c:	2333      	movs	r3, #51	; 0x33
 801635e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8016360:	2340      	movs	r3, #64	; 0x40
 8016362:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8016364:	2300      	movs	r3, #0
 8016366:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8016368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801636c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801636e:	f107 0308 	add.w	r3, r7, #8
 8016372:	4619      	mov	r1, r3
 8016374:	6878      	ldr	r0, [r7, #4]
 8016376:	f7ff fe8c 	bl	8016092 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801637a:	f241 3288 	movw	r2, #5000	; 0x1388
 801637e:	2133      	movs	r1, #51	; 0x33
 8016380:	6878      	ldr	r0, [r7, #4]
 8016382:	f000 f865 	bl	8016450 <SDMMC_GetCmdResp1>
 8016386:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8016388:	69fb      	ldr	r3, [r7, #28]
}
 801638a:	4618      	mov	r0, r3
 801638c:	3720      	adds	r7, #32
 801638e:	46bd      	mov	sp, r7
 8016390:	bd80      	pop	{r7, pc}

08016392 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8016392:	b580      	push	{r7, lr}
 8016394:	b088      	sub	sp, #32
 8016396:	af00      	add	r7, sp, #0
 8016398:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801639a:	2300      	movs	r3, #0
 801639c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801639e:	2302      	movs	r3, #2
 80163a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80163a2:	23c0      	movs	r3, #192	; 0xc0
 80163a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80163a6:	2300      	movs	r3, #0
 80163a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80163aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80163ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80163b0:	f107 0308 	add.w	r3, r7, #8
 80163b4:	4619      	mov	r1, r3
 80163b6:	6878      	ldr	r0, [r7, #4]
 80163b8:	f7ff fe6b 	bl	8016092 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80163bc:	6878      	ldr	r0, [r7, #4]
 80163be:	f000 f935 	bl	801662c <SDMMC_GetCmdResp2>
 80163c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80163c4:	69fb      	ldr	r3, [r7, #28]
}
 80163c6:	4618      	mov	r0, r3
 80163c8:	3720      	adds	r7, #32
 80163ca:	46bd      	mov	sp, r7
 80163cc:	bd80      	pop	{r7, pc}

080163ce <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80163ce:	b580      	push	{r7, lr}
 80163d0:	b088      	sub	sp, #32
 80163d2:	af00      	add	r7, sp, #0
 80163d4:	6078      	str	r0, [r7, #4]
 80163d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80163d8:	683b      	ldr	r3, [r7, #0]
 80163da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80163dc:	2309      	movs	r3, #9
 80163de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80163e0:	23c0      	movs	r3, #192	; 0xc0
 80163e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80163e4:	2300      	movs	r3, #0
 80163e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80163e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80163ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80163ee:	f107 0308 	add.w	r3, r7, #8
 80163f2:	4619      	mov	r1, r3
 80163f4:	6878      	ldr	r0, [r7, #4]
 80163f6:	f7ff fe4c 	bl	8016092 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80163fa:	6878      	ldr	r0, [r7, #4]
 80163fc:	f000 f916 	bl	801662c <SDMMC_GetCmdResp2>
 8016400:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8016402:	69fb      	ldr	r3, [r7, #28]
}
 8016404:	4618      	mov	r0, r3
 8016406:	3720      	adds	r7, #32
 8016408:	46bd      	mov	sp, r7
 801640a:	bd80      	pop	{r7, pc}

0801640c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801640c:	b580      	push	{r7, lr}
 801640e:	b088      	sub	sp, #32
 8016410:	af00      	add	r7, sp, #0
 8016412:	6078      	str	r0, [r7, #4]
 8016414:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8016416:	2300      	movs	r3, #0
 8016418:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801641a:	2303      	movs	r3, #3
 801641c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801641e:	2340      	movs	r3, #64	; 0x40
 8016420:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8016422:	2300      	movs	r3, #0
 8016424:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8016426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801642a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801642c:	f107 0308 	add.w	r3, r7, #8
 8016430:	4619      	mov	r1, r3
 8016432:	6878      	ldr	r0, [r7, #4]
 8016434:	f7ff fe2d 	bl	8016092 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8016438:	683a      	ldr	r2, [r7, #0]
 801643a:	2103      	movs	r1, #3
 801643c:	6878      	ldr	r0, [r7, #4]
 801643e:	f000 f97b 	bl	8016738 <SDMMC_GetCmdResp6>
 8016442:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8016444:	69fb      	ldr	r3, [r7, #28]
}
 8016446:	4618      	mov	r0, r3
 8016448:	3720      	adds	r7, #32
 801644a:	46bd      	mov	sp, r7
 801644c:	bd80      	pop	{r7, pc}
	...

08016450 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8016450:	b580      	push	{r7, lr}
 8016452:	b088      	sub	sp, #32
 8016454:	af00      	add	r7, sp, #0
 8016456:	60f8      	str	r0, [r7, #12]
 8016458:	460b      	mov	r3, r1
 801645a:	607a      	str	r2, [r7, #4]
 801645c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801645e:	4b70      	ldr	r3, [pc, #448]	; (8016620 <SDMMC_GetCmdResp1+0x1d0>)
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	4a70      	ldr	r2, [pc, #448]	; (8016624 <SDMMC_GetCmdResp1+0x1d4>)
 8016464:	fba2 2303 	umull	r2, r3, r2, r3
 8016468:	0a5a      	lsrs	r2, r3, #9
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	fb02 f303 	mul.w	r3, r2, r3
 8016470:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8016472:	69fb      	ldr	r3, [r7, #28]
 8016474:	1e5a      	subs	r2, r3, #1
 8016476:	61fa      	str	r2, [r7, #28]
 8016478:	2b00      	cmp	r3, #0
 801647a:	d102      	bne.n	8016482 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801647c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8016480:	e0c9      	b.n	8016616 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016486:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016488:	69bb      	ldr	r3, [r7, #24]
 801648a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801648e:	2b00      	cmp	r3, #0
 8016490:	d0ef      	beq.n	8016472 <SDMMC_GetCmdResp1+0x22>
 8016492:	69bb      	ldr	r3, [r7, #24]
 8016494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016498:	2b00      	cmp	r3, #0
 801649a:	d1ea      	bne.n	8016472 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80164a0:	f003 0304 	and.w	r3, r3, #4
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d004      	beq.n	80164b2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	2204      	movs	r2, #4
 80164ac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80164ae:	2304      	movs	r3, #4
 80164b0:	e0b1      	b.n	8016616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80164b6:	f003 0301 	and.w	r3, r3, #1
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d004      	beq.n	80164c8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	2201      	movs	r2, #1
 80164c2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80164c4:	2301      	movs	r3, #1
 80164c6:	e0a6      	b.n	8016616 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	22c5      	movs	r2, #197	; 0xc5
 80164cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80164ce:	68f8      	ldr	r0, [r7, #12]
 80164d0:	f7ff fe09 	bl	80160e6 <SDMMC_GetCommandResponse>
 80164d4:	4603      	mov	r3, r0
 80164d6:	461a      	mov	r2, r3
 80164d8:	7afb      	ldrb	r3, [r7, #11]
 80164da:	4293      	cmp	r3, r2
 80164dc:	d001      	beq.n	80164e2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80164de:	2301      	movs	r3, #1
 80164e0:	e099      	b.n	8016616 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80164e2:	2100      	movs	r1, #0
 80164e4:	68f8      	ldr	r0, [r7, #12]
 80164e6:	f7ff fe0b 	bl	8016100 <SDMMC_GetResponse>
 80164ea:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80164ec:	697a      	ldr	r2, [r7, #20]
 80164ee:	4b4e      	ldr	r3, [pc, #312]	; (8016628 <SDMMC_GetCmdResp1+0x1d8>)
 80164f0:	4013      	ands	r3, r2
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d101      	bne.n	80164fa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80164f6:	2300      	movs	r3, #0
 80164f8:	e08d      	b.n	8016616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80164fa:	697b      	ldr	r3, [r7, #20]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	da02      	bge.n	8016506 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8016500:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016504:	e087      	b.n	8016616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8016506:	697b      	ldr	r3, [r7, #20]
 8016508:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801650c:	2b00      	cmp	r3, #0
 801650e:	d001      	beq.n	8016514 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8016510:	2340      	movs	r3, #64	; 0x40
 8016512:	e080      	b.n	8016616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8016514:	697b      	ldr	r3, [r7, #20]
 8016516:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801651a:	2b00      	cmp	r3, #0
 801651c:	d001      	beq.n	8016522 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801651e:	2380      	movs	r3, #128	; 0x80
 8016520:	e079      	b.n	8016616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8016522:	697b      	ldr	r3, [r7, #20]
 8016524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016528:	2b00      	cmp	r3, #0
 801652a:	d002      	beq.n	8016532 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801652c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016530:	e071      	b.n	8016616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8016532:	697b      	ldr	r3, [r7, #20]
 8016534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8016538:	2b00      	cmp	r3, #0
 801653a:	d002      	beq.n	8016542 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801653c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016540:	e069      	b.n	8016616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8016542:	697b      	ldr	r3, [r7, #20]
 8016544:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8016548:	2b00      	cmp	r3, #0
 801654a:	d002      	beq.n	8016552 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801654c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016550:	e061      	b.n	8016616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8016552:	697b      	ldr	r3, [r7, #20]
 8016554:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016558:	2b00      	cmp	r3, #0
 801655a:	d002      	beq.n	8016562 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801655c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016560:	e059      	b.n	8016616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8016562:	697b      	ldr	r3, [r7, #20]
 8016564:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016568:	2b00      	cmp	r3, #0
 801656a:	d002      	beq.n	8016572 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801656c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016570:	e051      	b.n	8016616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8016572:	697b      	ldr	r3, [r7, #20]
 8016574:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016578:	2b00      	cmp	r3, #0
 801657a:	d002      	beq.n	8016582 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801657c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016580:	e049      	b.n	8016616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8016582:	697b      	ldr	r3, [r7, #20]
 8016584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016588:	2b00      	cmp	r3, #0
 801658a:	d002      	beq.n	8016592 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801658c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8016590:	e041      	b.n	8016616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8016592:	697b      	ldr	r3, [r7, #20]
 8016594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016598:	2b00      	cmp	r3, #0
 801659a:	d002      	beq.n	80165a2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801659c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80165a0:	e039      	b.n	8016616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80165a2:	697b      	ldr	r3, [r7, #20]
 80165a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d002      	beq.n	80165b2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80165ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80165b0:	e031      	b.n	8016616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80165b2:	697b      	ldr	r3, [r7, #20]
 80165b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d002      	beq.n	80165c2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80165bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80165c0:	e029      	b.n	8016616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80165c2:	697b      	ldr	r3, [r7, #20]
 80165c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d002      	beq.n	80165d2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80165cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80165d0:	e021      	b.n	8016616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80165d2:	697b      	ldr	r3, [r7, #20]
 80165d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d002      	beq.n	80165e2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80165dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80165e0:	e019      	b.n	8016616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80165e2:	697b      	ldr	r3, [r7, #20]
 80165e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d002      	beq.n	80165f2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80165ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80165f0:	e011      	b.n	8016616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80165f2:	697b      	ldr	r3, [r7, #20]
 80165f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d002      	beq.n	8016602 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80165fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8016600:	e009      	b.n	8016616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8016602:	697b      	ldr	r3, [r7, #20]
 8016604:	f003 0308 	and.w	r3, r3, #8
 8016608:	2b00      	cmp	r3, #0
 801660a:	d002      	beq.n	8016612 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801660c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8016610:	e001      	b.n	8016616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8016612:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8016616:	4618      	mov	r0, r3
 8016618:	3720      	adds	r7, #32
 801661a:	46bd      	mov	sp, r7
 801661c:	bd80      	pop	{r7, pc}
 801661e:	bf00      	nop
 8016620:	200001a0 	.word	0x200001a0
 8016624:	10624dd3 	.word	0x10624dd3
 8016628:	fdffe008 	.word	0xfdffe008

0801662c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 801662c:	b480      	push	{r7}
 801662e:	b085      	sub	sp, #20
 8016630:	af00      	add	r7, sp, #0
 8016632:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016634:	4b1f      	ldr	r3, [pc, #124]	; (80166b4 <SDMMC_GetCmdResp2+0x88>)
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	4a1f      	ldr	r2, [pc, #124]	; (80166b8 <SDMMC_GetCmdResp2+0x8c>)
 801663a:	fba2 2303 	umull	r2, r3, r2, r3
 801663e:	0a5b      	lsrs	r3, r3, #9
 8016640:	f241 3288 	movw	r2, #5000	; 0x1388
 8016644:	fb02 f303 	mul.w	r3, r2, r3
 8016648:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	1e5a      	subs	r2, r3, #1
 801664e:	60fa      	str	r2, [r7, #12]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d102      	bne.n	801665a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8016654:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8016658:	e026      	b.n	80166a8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801665e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016660:	68bb      	ldr	r3, [r7, #8]
 8016662:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8016666:	2b00      	cmp	r3, #0
 8016668:	d0ef      	beq.n	801664a <SDMMC_GetCmdResp2+0x1e>
 801666a:	68bb      	ldr	r3, [r7, #8]
 801666c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016670:	2b00      	cmp	r3, #0
 8016672:	d1ea      	bne.n	801664a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016678:	f003 0304 	and.w	r3, r3, #4
 801667c:	2b00      	cmp	r3, #0
 801667e:	d004      	beq.n	801668a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	2204      	movs	r2, #4
 8016684:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016686:	2304      	movs	r3, #4
 8016688:	e00e      	b.n	80166a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801668e:	f003 0301 	and.w	r3, r3, #1
 8016692:	2b00      	cmp	r3, #0
 8016694:	d004      	beq.n	80166a0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	2201      	movs	r2, #1
 801669a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801669c:	2301      	movs	r3, #1
 801669e:	e003      	b.n	80166a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	22c5      	movs	r2, #197	; 0xc5
 80166a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80166a6:	2300      	movs	r3, #0
}
 80166a8:	4618      	mov	r0, r3
 80166aa:	3714      	adds	r7, #20
 80166ac:	46bd      	mov	sp, r7
 80166ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b2:	4770      	bx	lr
 80166b4:	200001a0 	.word	0x200001a0
 80166b8:	10624dd3 	.word	0x10624dd3

080166bc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80166bc:	b480      	push	{r7}
 80166be:	b085      	sub	sp, #20
 80166c0:	af00      	add	r7, sp, #0
 80166c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80166c4:	4b1a      	ldr	r3, [pc, #104]	; (8016730 <SDMMC_GetCmdResp3+0x74>)
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	4a1a      	ldr	r2, [pc, #104]	; (8016734 <SDMMC_GetCmdResp3+0x78>)
 80166ca:	fba2 2303 	umull	r2, r3, r2, r3
 80166ce:	0a5b      	lsrs	r3, r3, #9
 80166d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80166d4:	fb02 f303 	mul.w	r3, r2, r3
 80166d8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	1e5a      	subs	r2, r3, #1
 80166de:	60fa      	str	r2, [r7, #12]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d102      	bne.n	80166ea <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80166e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80166e8:	e01b      	b.n	8016722 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80166ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80166f0:	68bb      	ldr	r3, [r7, #8]
 80166f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d0ef      	beq.n	80166da <SDMMC_GetCmdResp3+0x1e>
 80166fa:	68bb      	ldr	r3, [r7, #8]
 80166fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016700:	2b00      	cmp	r3, #0
 8016702:	d1ea      	bne.n	80166da <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016708:	f003 0304 	and.w	r3, r3, #4
 801670c:	2b00      	cmp	r3, #0
 801670e:	d004      	beq.n	801671a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	2204      	movs	r2, #4
 8016714:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016716:	2304      	movs	r3, #4
 8016718:	e003      	b.n	8016722 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	22c5      	movs	r2, #197	; 0xc5
 801671e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8016720:	2300      	movs	r3, #0
}
 8016722:	4618      	mov	r0, r3
 8016724:	3714      	adds	r7, #20
 8016726:	46bd      	mov	sp, r7
 8016728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801672c:	4770      	bx	lr
 801672e:	bf00      	nop
 8016730:	200001a0 	.word	0x200001a0
 8016734:	10624dd3 	.word	0x10624dd3

08016738 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8016738:	b580      	push	{r7, lr}
 801673a:	b088      	sub	sp, #32
 801673c:	af00      	add	r7, sp, #0
 801673e:	60f8      	str	r0, [r7, #12]
 8016740:	460b      	mov	r3, r1
 8016742:	607a      	str	r2, [r7, #4]
 8016744:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016746:	4b35      	ldr	r3, [pc, #212]	; (801681c <SDMMC_GetCmdResp6+0xe4>)
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	4a35      	ldr	r2, [pc, #212]	; (8016820 <SDMMC_GetCmdResp6+0xe8>)
 801674c:	fba2 2303 	umull	r2, r3, r2, r3
 8016750:	0a5b      	lsrs	r3, r3, #9
 8016752:	f241 3288 	movw	r2, #5000	; 0x1388
 8016756:	fb02 f303 	mul.w	r3, r2, r3
 801675a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801675c:	69fb      	ldr	r3, [r7, #28]
 801675e:	1e5a      	subs	r2, r3, #1
 8016760:	61fa      	str	r2, [r7, #28]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d102      	bne.n	801676c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8016766:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801676a:	e052      	b.n	8016812 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016770:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016772:	69bb      	ldr	r3, [r7, #24]
 8016774:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8016778:	2b00      	cmp	r3, #0
 801677a:	d0ef      	beq.n	801675c <SDMMC_GetCmdResp6+0x24>
 801677c:	69bb      	ldr	r3, [r7, #24]
 801677e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016782:	2b00      	cmp	r3, #0
 8016784:	d1ea      	bne.n	801675c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801678a:	f003 0304 	and.w	r3, r3, #4
 801678e:	2b00      	cmp	r3, #0
 8016790:	d004      	beq.n	801679c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	2204      	movs	r2, #4
 8016796:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016798:	2304      	movs	r3, #4
 801679a:	e03a      	b.n	8016812 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80167a0:	f003 0301 	and.w	r3, r3, #1
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d004      	beq.n	80167b2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	2201      	movs	r2, #1
 80167ac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80167ae:	2301      	movs	r3, #1
 80167b0:	e02f      	b.n	8016812 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80167b2:	68f8      	ldr	r0, [r7, #12]
 80167b4:	f7ff fc97 	bl	80160e6 <SDMMC_GetCommandResponse>
 80167b8:	4603      	mov	r3, r0
 80167ba:	461a      	mov	r2, r3
 80167bc:	7afb      	ldrb	r3, [r7, #11]
 80167be:	4293      	cmp	r3, r2
 80167c0:	d001      	beq.n	80167c6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80167c2:	2301      	movs	r3, #1
 80167c4:	e025      	b.n	8016812 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	22c5      	movs	r2, #197	; 0xc5
 80167ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80167cc:	2100      	movs	r1, #0
 80167ce:	68f8      	ldr	r0, [r7, #12]
 80167d0:	f7ff fc96 	bl	8016100 <SDMMC_GetResponse>
 80167d4:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80167d6:	697b      	ldr	r3, [r7, #20]
 80167d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d106      	bne.n	80167ee <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80167e0:	697b      	ldr	r3, [r7, #20]
 80167e2:	0c1b      	lsrs	r3, r3, #16
 80167e4:	b29a      	uxth	r2, r3
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80167ea:	2300      	movs	r3, #0
 80167ec:	e011      	b.n	8016812 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80167ee:	697b      	ldr	r3, [r7, #20]
 80167f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d002      	beq.n	80167fe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80167f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80167fc:	e009      	b.n	8016812 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80167fe:	697b      	ldr	r3, [r7, #20]
 8016800:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016804:	2b00      	cmp	r3, #0
 8016806:	d002      	beq.n	801680e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8016808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801680c:	e001      	b.n	8016812 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801680e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8016812:	4618      	mov	r0, r3
 8016814:	3720      	adds	r7, #32
 8016816:	46bd      	mov	sp, r7
 8016818:	bd80      	pop	{r7, pc}
 801681a:	bf00      	nop
 801681c:	200001a0 	.word	0x200001a0
 8016820:	10624dd3 	.word	0x10624dd3

08016824 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8016824:	b480      	push	{r7}
 8016826:	b085      	sub	sp, #20
 8016828:	af00      	add	r7, sp, #0
 801682a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801682c:	4b22      	ldr	r3, [pc, #136]	; (80168b8 <SDMMC_GetCmdResp7+0x94>)
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	4a22      	ldr	r2, [pc, #136]	; (80168bc <SDMMC_GetCmdResp7+0x98>)
 8016832:	fba2 2303 	umull	r2, r3, r2, r3
 8016836:	0a5b      	lsrs	r3, r3, #9
 8016838:	f241 3288 	movw	r2, #5000	; 0x1388
 801683c:	fb02 f303 	mul.w	r3, r2, r3
 8016840:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	1e5a      	subs	r2, r3, #1
 8016846:	60fa      	str	r2, [r7, #12]
 8016848:	2b00      	cmp	r3, #0
 801684a:	d102      	bne.n	8016852 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801684c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8016850:	e02c      	b.n	80168ac <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016856:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016858:	68bb      	ldr	r3, [r7, #8]
 801685a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801685e:	2b00      	cmp	r3, #0
 8016860:	d0ef      	beq.n	8016842 <SDMMC_GetCmdResp7+0x1e>
 8016862:	68bb      	ldr	r3, [r7, #8]
 8016864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016868:	2b00      	cmp	r3, #0
 801686a:	d1ea      	bne.n	8016842 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016870:	f003 0304 	and.w	r3, r3, #4
 8016874:	2b00      	cmp	r3, #0
 8016876:	d004      	beq.n	8016882 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	2204      	movs	r2, #4
 801687c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801687e:	2304      	movs	r3, #4
 8016880:	e014      	b.n	80168ac <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016886:	f003 0301 	and.w	r3, r3, #1
 801688a:	2b00      	cmp	r3, #0
 801688c:	d004      	beq.n	8016898 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	2201      	movs	r2, #1
 8016892:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016894:	2301      	movs	r3, #1
 8016896:	e009      	b.n	80168ac <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801689c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d002      	beq.n	80168aa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	2240      	movs	r2, #64	; 0x40
 80168a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80168aa:	2300      	movs	r3, #0

}
 80168ac:	4618      	mov	r0, r3
 80168ae:	3714      	adds	r7, #20
 80168b0:	46bd      	mov	sp, r7
 80168b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168b6:	4770      	bx	lr
 80168b8:	200001a0 	.word	0x200001a0
 80168bc:	10624dd3 	.word	0x10624dd3

080168c0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80168c0:	b480      	push	{r7}
 80168c2:	b085      	sub	sp, #20
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80168c8:	4b11      	ldr	r3, [pc, #68]	; (8016910 <SDMMC_GetCmdError+0x50>)
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	4a11      	ldr	r2, [pc, #68]	; (8016914 <SDMMC_GetCmdError+0x54>)
 80168ce:	fba2 2303 	umull	r2, r3, r2, r3
 80168d2:	0a5b      	lsrs	r3, r3, #9
 80168d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80168d8:	fb02 f303 	mul.w	r3, r2, r3
 80168dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	1e5a      	subs	r2, r3, #1
 80168e2:	60fa      	str	r2, [r7, #12]
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d102      	bne.n	80168ee <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80168e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80168ec:	e009      	b.n	8016902 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d0f1      	beq.n	80168de <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	22c5      	movs	r2, #197	; 0xc5
 80168fe:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8016900:	2300      	movs	r3, #0
}
 8016902:	4618      	mov	r0, r3
 8016904:	3714      	adds	r7, #20
 8016906:	46bd      	mov	sp, r7
 8016908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690c:	4770      	bx	lr
 801690e:	bf00      	nop
 8016910:	200001a0 	.word	0x200001a0
 8016914:	10624dd3 	.word	0x10624dd3

08016918 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8016918:	b084      	sub	sp, #16
 801691a:	b580      	push	{r7, lr}
 801691c:	b084      	sub	sp, #16
 801691e:	af00      	add	r7, sp, #0
 8016920:	6078      	str	r0, [r7, #4]
 8016922:	f107 001c 	add.w	r0, r7, #28
 8016926:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	68db      	ldr	r3, [r3, #12]
 801692e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8016936:	6878      	ldr	r0, [r7, #4]
 8016938:	f001 faf6 	bl	8017f28 <USB_CoreReset>
 801693c:	4603      	mov	r3, r0
 801693e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8016940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016942:	2b00      	cmp	r3, #0
 8016944:	d106      	bne.n	8016954 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801694a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	639a      	str	r2, [r3, #56]	; 0x38
 8016952:	e005      	b.n	8016960 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016958:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8016960:	7bfb      	ldrb	r3, [r7, #15]
}
 8016962:	4618      	mov	r0, r3
 8016964:	3710      	adds	r7, #16
 8016966:	46bd      	mov	sp, r7
 8016968:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801696c:	b004      	add	sp, #16
 801696e:	4770      	bx	lr

08016970 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8016970:	b480      	push	{r7}
 8016972:	b087      	sub	sp, #28
 8016974:	af00      	add	r7, sp, #0
 8016976:	60f8      	str	r0, [r7, #12]
 8016978:	60b9      	str	r1, [r7, #8]
 801697a:	4613      	mov	r3, r2
 801697c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801697e:	79fb      	ldrb	r3, [r7, #7]
 8016980:	2b02      	cmp	r3, #2
 8016982:	d165      	bne.n	8016a50 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8016984:	68bb      	ldr	r3, [r7, #8]
 8016986:	4a3e      	ldr	r2, [pc, #248]	; (8016a80 <USB_SetTurnaroundTime+0x110>)
 8016988:	4293      	cmp	r3, r2
 801698a:	d906      	bls.n	801699a <USB_SetTurnaroundTime+0x2a>
 801698c:	68bb      	ldr	r3, [r7, #8]
 801698e:	4a3d      	ldr	r2, [pc, #244]	; (8016a84 <USB_SetTurnaroundTime+0x114>)
 8016990:	4293      	cmp	r3, r2
 8016992:	d202      	bcs.n	801699a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8016994:	230f      	movs	r3, #15
 8016996:	617b      	str	r3, [r7, #20]
 8016998:	e05c      	b.n	8016a54 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801699a:	68bb      	ldr	r3, [r7, #8]
 801699c:	4a39      	ldr	r2, [pc, #228]	; (8016a84 <USB_SetTurnaroundTime+0x114>)
 801699e:	4293      	cmp	r3, r2
 80169a0:	d306      	bcc.n	80169b0 <USB_SetTurnaroundTime+0x40>
 80169a2:	68bb      	ldr	r3, [r7, #8]
 80169a4:	4a38      	ldr	r2, [pc, #224]	; (8016a88 <USB_SetTurnaroundTime+0x118>)
 80169a6:	4293      	cmp	r3, r2
 80169a8:	d202      	bcs.n	80169b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80169aa:	230e      	movs	r3, #14
 80169ac:	617b      	str	r3, [r7, #20]
 80169ae:	e051      	b.n	8016a54 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80169b0:	68bb      	ldr	r3, [r7, #8]
 80169b2:	4a35      	ldr	r2, [pc, #212]	; (8016a88 <USB_SetTurnaroundTime+0x118>)
 80169b4:	4293      	cmp	r3, r2
 80169b6:	d306      	bcc.n	80169c6 <USB_SetTurnaroundTime+0x56>
 80169b8:	68bb      	ldr	r3, [r7, #8]
 80169ba:	4a34      	ldr	r2, [pc, #208]	; (8016a8c <USB_SetTurnaroundTime+0x11c>)
 80169bc:	4293      	cmp	r3, r2
 80169be:	d202      	bcs.n	80169c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80169c0:	230d      	movs	r3, #13
 80169c2:	617b      	str	r3, [r7, #20]
 80169c4:	e046      	b.n	8016a54 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80169c6:	68bb      	ldr	r3, [r7, #8]
 80169c8:	4a30      	ldr	r2, [pc, #192]	; (8016a8c <USB_SetTurnaroundTime+0x11c>)
 80169ca:	4293      	cmp	r3, r2
 80169cc:	d306      	bcc.n	80169dc <USB_SetTurnaroundTime+0x6c>
 80169ce:	68bb      	ldr	r3, [r7, #8]
 80169d0:	4a2f      	ldr	r2, [pc, #188]	; (8016a90 <USB_SetTurnaroundTime+0x120>)
 80169d2:	4293      	cmp	r3, r2
 80169d4:	d802      	bhi.n	80169dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80169d6:	230c      	movs	r3, #12
 80169d8:	617b      	str	r3, [r7, #20]
 80169da:	e03b      	b.n	8016a54 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80169dc:	68bb      	ldr	r3, [r7, #8]
 80169de:	4a2c      	ldr	r2, [pc, #176]	; (8016a90 <USB_SetTurnaroundTime+0x120>)
 80169e0:	4293      	cmp	r3, r2
 80169e2:	d906      	bls.n	80169f2 <USB_SetTurnaroundTime+0x82>
 80169e4:	68bb      	ldr	r3, [r7, #8]
 80169e6:	4a2b      	ldr	r2, [pc, #172]	; (8016a94 <USB_SetTurnaroundTime+0x124>)
 80169e8:	4293      	cmp	r3, r2
 80169ea:	d802      	bhi.n	80169f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80169ec:	230b      	movs	r3, #11
 80169ee:	617b      	str	r3, [r7, #20]
 80169f0:	e030      	b.n	8016a54 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80169f2:	68bb      	ldr	r3, [r7, #8]
 80169f4:	4a27      	ldr	r2, [pc, #156]	; (8016a94 <USB_SetTurnaroundTime+0x124>)
 80169f6:	4293      	cmp	r3, r2
 80169f8:	d906      	bls.n	8016a08 <USB_SetTurnaroundTime+0x98>
 80169fa:	68bb      	ldr	r3, [r7, #8]
 80169fc:	4a26      	ldr	r2, [pc, #152]	; (8016a98 <USB_SetTurnaroundTime+0x128>)
 80169fe:	4293      	cmp	r3, r2
 8016a00:	d802      	bhi.n	8016a08 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8016a02:	230a      	movs	r3, #10
 8016a04:	617b      	str	r3, [r7, #20]
 8016a06:	e025      	b.n	8016a54 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8016a08:	68bb      	ldr	r3, [r7, #8]
 8016a0a:	4a23      	ldr	r2, [pc, #140]	; (8016a98 <USB_SetTurnaroundTime+0x128>)
 8016a0c:	4293      	cmp	r3, r2
 8016a0e:	d906      	bls.n	8016a1e <USB_SetTurnaroundTime+0xae>
 8016a10:	68bb      	ldr	r3, [r7, #8]
 8016a12:	4a22      	ldr	r2, [pc, #136]	; (8016a9c <USB_SetTurnaroundTime+0x12c>)
 8016a14:	4293      	cmp	r3, r2
 8016a16:	d202      	bcs.n	8016a1e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8016a18:	2309      	movs	r3, #9
 8016a1a:	617b      	str	r3, [r7, #20]
 8016a1c:	e01a      	b.n	8016a54 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8016a1e:	68bb      	ldr	r3, [r7, #8]
 8016a20:	4a1e      	ldr	r2, [pc, #120]	; (8016a9c <USB_SetTurnaroundTime+0x12c>)
 8016a22:	4293      	cmp	r3, r2
 8016a24:	d306      	bcc.n	8016a34 <USB_SetTurnaroundTime+0xc4>
 8016a26:	68bb      	ldr	r3, [r7, #8]
 8016a28:	4a1d      	ldr	r2, [pc, #116]	; (8016aa0 <USB_SetTurnaroundTime+0x130>)
 8016a2a:	4293      	cmp	r3, r2
 8016a2c:	d802      	bhi.n	8016a34 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8016a2e:	2308      	movs	r3, #8
 8016a30:	617b      	str	r3, [r7, #20]
 8016a32:	e00f      	b.n	8016a54 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8016a34:	68bb      	ldr	r3, [r7, #8]
 8016a36:	4a1a      	ldr	r2, [pc, #104]	; (8016aa0 <USB_SetTurnaroundTime+0x130>)
 8016a38:	4293      	cmp	r3, r2
 8016a3a:	d906      	bls.n	8016a4a <USB_SetTurnaroundTime+0xda>
 8016a3c:	68bb      	ldr	r3, [r7, #8]
 8016a3e:	4a19      	ldr	r2, [pc, #100]	; (8016aa4 <USB_SetTurnaroundTime+0x134>)
 8016a40:	4293      	cmp	r3, r2
 8016a42:	d202      	bcs.n	8016a4a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8016a44:	2307      	movs	r3, #7
 8016a46:	617b      	str	r3, [r7, #20]
 8016a48:	e004      	b.n	8016a54 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8016a4a:	2306      	movs	r3, #6
 8016a4c:	617b      	str	r3, [r7, #20]
 8016a4e:	e001      	b.n	8016a54 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8016a50:	2309      	movs	r3, #9
 8016a52:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	68db      	ldr	r3, [r3, #12]
 8016a58:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	68da      	ldr	r2, [r3, #12]
 8016a64:	697b      	ldr	r3, [r7, #20]
 8016a66:	029b      	lsls	r3, r3, #10
 8016a68:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8016a6c:	431a      	orrs	r2, r3
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8016a72:	2300      	movs	r3, #0
}
 8016a74:	4618      	mov	r0, r3
 8016a76:	371c      	adds	r7, #28
 8016a78:	46bd      	mov	sp, r7
 8016a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a7e:	4770      	bx	lr
 8016a80:	00d8acbf 	.word	0x00d8acbf
 8016a84:	00e4e1c0 	.word	0x00e4e1c0
 8016a88:	00f42400 	.word	0x00f42400
 8016a8c:	01067380 	.word	0x01067380
 8016a90:	011a499f 	.word	0x011a499f
 8016a94:	01312cff 	.word	0x01312cff
 8016a98:	014ca43f 	.word	0x014ca43f
 8016a9c:	016e3600 	.word	0x016e3600
 8016aa0:	01a6ab1f 	.word	0x01a6ab1f
 8016aa4:	01e84800 	.word	0x01e84800

08016aa8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8016aa8:	b480      	push	{r7}
 8016aaa:	b083      	sub	sp, #12
 8016aac:	af00      	add	r7, sp, #0
 8016aae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	689b      	ldr	r3, [r3, #8]
 8016ab4:	f043 0201 	orr.w	r2, r3, #1
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8016abc:	2300      	movs	r3, #0
}
 8016abe:	4618      	mov	r0, r3
 8016ac0:	370c      	adds	r7, #12
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac8:	4770      	bx	lr

08016aca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8016aca:	b480      	push	{r7}
 8016acc:	b083      	sub	sp, #12
 8016ace:	af00      	add	r7, sp, #0
 8016ad0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	689b      	ldr	r3, [r3, #8]
 8016ad6:	f023 0201 	bic.w	r2, r3, #1
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8016ade:	2300      	movs	r3, #0
}
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	370c      	adds	r7, #12
 8016ae4:	46bd      	mov	sp, r7
 8016ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aea:	4770      	bx	lr

08016aec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8016aec:	b580      	push	{r7, lr}
 8016aee:	b084      	sub	sp, #16
 8016af0:	af00      	add	r7, sp, #0
 8016af2:	6078      	str	r0, [r7, #4]
 8016af4:	460b      	mov	r3, r1
 8016af6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8016af8:	2300      	movs	r3, #0
 8016afa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	68db      	ldr	r3, [r3, #12]
 8016b00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8016b08:	78fb      	ldrb	r3, [r7, #3]
 8016b0a:	2b01      	cmp	r3, #1
 8016b0c:	d115      	bne.n	8016b3a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	68db      	ldr	r3, [r3, #12]
 8016b12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8016b1a:	2001      	movs	r0, #1
 8016b1c:	f7f5 faf2 	bl	800c104 <HAL_Delay>
      ms++;
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	3301      	adds	r3, #1
 8016b24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8016b26:	6878      	ldr	r0, [r7, #4]
 8016b28:	f001 f985 	bl	8017e36 <USB_GetMode>
 8016b2c:	4603      	mov	r3, r0
 8016b2e:	2b01      	cmp	r3, #1
 8016b30:	d01e      	beq.n	8016b70 <USB_SetCurrentMode+0x84>
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	2b31      	cmp	r3, #49	; 0x31
 8016b36:	d9f0      	bls.n	8016b1a <USB_SetCurrentMode+0x2e>
 8016b38:	e01a      	b.n	8016b70 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8016b3a:	78fb      	ldrb	r3, [r7, #3]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d115      	bne.n	8016b6c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	68db      	ldr	r3, [r3, #12]
 8016b44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8016b4c:	2001      	movs	r0, #1
 8016b4e:	f7f5 fad9 	bl	800c104 <HAL_Delay>
      ms++;
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	3301      	adds	r3, #1
 8016b56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8016b58:	6878      	ldr	r0, [r7, #4]
 8016b5a:	f001 f96c 	bl	8017e36 <USB_GetMode>
 8016b5e:	4603      	mov	r3, r0
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d005      	beq.n	8016b70 <USB_SetCurrentMode+0x84>
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	2b31      	cmp	r3, #49	; 0x31
 8016b68:	d9f0      	bls.n	8016b4c <USB_SetCurrentMode+0x60>
 8016b6a:	e001      	b.n	8016b70 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8016b6c:	2301      	movs	r3, #1
 8016b6e:	e005      	b.n	8016b7c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	2b32      	cmp	r3, #50	; 0x32
 8016b74:	d101      	bne.n	8016b7a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8016b76:	2301      	movs	r3, #1
 8016b78:	e000      	b.n	8016b7c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8016b7a:	2300      	movs	r3, #0
}
 8016b7c:	4618      	mov	r0, r3
 8016b7e:	3710      	adds	r7, #16
 8016b80:	46bd      	mov	sp, r7
 8016b82:	bd80      	pop	{r7, pc}

08016b84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8016b84:	b084      	sub	sp, #16
 8016b86:	b580      	push	{r7, lr}
 8016b88:	b086      	sub	sp, #24
 8016b8a:	af00      	add	r7, sp, #0
 8016b8c:	6078      	str	r0, [r7, #4]
 8016b8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8016b92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8016b96:	2300      	movs	r3, #0
 8016b98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8016b9e:	2300      	movs	r3, #0
 8016ba0:	613b      	str	r3, [r7, #16]
 8016ba2:	e009      	b.n	8016bb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8016ba4:	687a      	ldr	r2, [r7, #4]
 8016ba6:	693b      	ldr	r3, [r7, #16]
 8016ba8:	3340      	adds	r3, #64	; 0x40
 8016baa:	009b      	lsls	r3, r3, #2
 8016bac:	4413      	add	r3, r2
 8016bae:	2200      	movs	r2, #0
 8016bb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8016bb2:	693b      	ldr	r3, [r7, #16]
 8016bb4:	3301      	adds	r3, #1
 8016bb6:	613b      	str	r3, [r7, #16]
 8016bb8:	693b      	ldr	r3, [r7, #16]
 8016bba:	2b0e      	cmp	r3, #14
 8016bbc:	d9f2      	bls.n	8016ba4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8016bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d11c      	bne.n	8016bfe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016bca:	685b      	ldr	r3, [r3, #4]
 8016bcc:	68fa      	ldr	r2, [r7, #12]
 8016bce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016bd2:	f043 0302 	orr.w	r3, r3, #2
 8016bd6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016bdc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	601a      	str	r2, [r3, #0]
 8016bfc:	e005      	b.n	8016c0a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016c10:	461a      	mov	r2, r3
 8016c12:	2300      	movs	r3, #0
 8016c14:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016c1c:	4619      	mov	r1, r3
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016c24:	461a      	mov	r2, r3
 8016c26:	680b      	ldr	r3, [r1, #0]
 8016c28:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8016c2a:	2103      	movs	r1, #3
 8016c2c:	6878      	ldr	r0, [r7, #4]
 8016c2e:	f000 f959 	bl	8016ee4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8016c32:	2110      	movs	r1, #16
 8016c34:	6878      	ldr	r0, [r7, #4]
 8016c36:	f000 f8f1 	bl	8016e1c <USB_FlushTxFifo>
 8016c3a:	4603      	mov	r3, r0
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d001      	beq.n	8016c44 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8016c40:	2301      	movs	r3, #1
 8016c42:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8016c44:	6878      	ldr	r0, [r7, #4]
 8016c46:	f000 f91d 	bl	8016e84 <USB_FlushRxFifo>
 8016c4a:	4603      	mov	r3, r0
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d001      	beq.n	8016c54 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8016c50:	2301      	movs	r3, #1
 8016c52:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016c5a:	461a      	mov	r2, r3
 8016c5c:	2300      	movs	r3, #0
 8016c5e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016c66:	461a      	mov	r2, r3
 8016c68:	2300      	movs	r3, #0
 8016c6a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8016c6c:	68fb      	ldr	r3, [r7, #12]
 8016c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016c72:	461a      	mov	r2, r3
 8016c74:	2300      	movs	r3, #0
 8016c76:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8016c78:	2300      	movs	r3, #0
 8016c7a:	613b      	str	r3, [r7, #16]
 8016c7c:	e043      	b.n	8016d06 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8016c7e:	693b      	ldr	r3, [r7, #16]
 8016c80:	015a      	lsls	r2, r3, #5
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	4413      	add	r3, r2
 8016c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016c90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016c94:	d118      	bne.n	8016cc8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8016c96:	693b      	ldr	r3, [r7, #16]
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d10a      	bne.n	8016cb2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8016c9c:	693b      	ldr	r3, [r7, #16]
 8016c9e:	015a      	lsls	r2, r3, #5
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	4413      	add	r3, r2
 8016ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016ca8:	461a      	mov	r2, r3
 8016caa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8016cae:	6013      	str	r3, [r2, #0]
 8016cb0:	e013      	b.n	8016cda <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8016cb2:	693b      	ldr	r3, [r7, #16]
 8016cb4:	015a      	lsls	r2, r3, #5
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	4413      	add	r3, r2
 8016cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016cbe:	461a      	mov	r2, r3
 8016cc0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8016cc4:	6013      	str	r3, [r2, #0]
 8016cc6:	e008      	b.n	8016cda <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8016cc8:	693b      	ldr	r3, [r7, #16]
 8016cca:	015a      	lsls	r2, r3, #5
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	4413      	add	r3, r2
 8016cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016cd4:	461a      	mov	r2, r3
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8016cda:	693b      	ldr	r3, [r7, #16]
 8016cdc:	015a      	lsls	r2, r3, #5
 8016cde:	68fb      	ldr	r3, [r7, #12]
 8016ce0:	4413      	add	r3, r2
 8016ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016ce6:	461a      	mov	r2, r3
 8016ce8:	2300      	movs	r3, #0
 8016cea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8016cec:	693b      	ldr	r3, [r7, #16]
 8016cee:	015a      	lsls	r2, r3, #5
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	4413      	add	r3, r2
 8016cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016cf8:	461a      	mov	r2, r3
 8016cfa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8016cfe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8016d00:	693b      	ldr	r3, [r7, #16]
 8016d02:	3301      	adds	r3, #1
 8016d04:	613b      	str	r3, [r7, #16]
 8016d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d08:	693a      	ldr	r2, [r7, #16]
 8016d0a:	429a      	cmp	r2, r3
 8016d0c:	d3b7      	bcc.n	8016c7e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8016d0e:	2300      	movs	r3, #0
 8016d10:	613b      	str	r3, [r7, #16]
 8016d12:	e043      	b.n	8016d9c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016d14:	693b      	ldr	r3, [r7, #16]
 8016d16:	015a      	lsls	r2, r3, #5
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	4413      	add	r3, r2
 8016d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016d26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016d2a:	d118      	bne.n	8016d5e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8016d2c:	693b      	ldr	r3, [r7, #16]
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d10a      	bne.n	8016d48 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8016d32:	693b      	ldr	r3, [r7, #16]
 8016d34:	015a      	lsls	r2, r3, #5
 8016d36:	68fb      	ldr	r3, [r7, #12]
 8016d38:	4413      	add	r3, r2
 8016d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016d3e:	461a      	mov	r2, r3
 8016d40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8016d44:	6013      	str	r3, [r2, #0]
 8016d46:	e013      	b.n	8016d70 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8016d48:	693b      	ldr	r3, [r7, #16]
 8016d4a:	015a      	lsls	r2, r3, #5
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	4413      	add	r3, r2
 8016d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016d54:	461a      	mov	r2, r3
 8016d56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8016d5a:	6013      	str	r3, [r2, #0]
 8016d5c:	e008      	b.n	8016d70 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8016d5e:	693b      	ldr	r3, [r7, #16]
 8016d60:	015a      	lsls	r2, r3, #5
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	4413      	add	r3, r2
 8016d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016d6a:	461a      	mov	r2, r3
 8016d6c:	2300      	movs	r3, #0
 8016d6e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8016d70:	693b      	ldr	r3, [r7, #16]
 8016d72:	015a      	lsls	r2, r3, #5
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	4413      	add	r3, r2
 8016d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016d7c:	461a      	mov	r2, r3
 8016d7e:	2300      	movs	r3, #0
 8016d80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8016d82:	693b      	ldr	r3, [r7, #16]
 8016d84:	015a      	lsls	r2, r3, #5
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	4413      	add	r3, r2
 8016d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016d8e:	461a      	mov	r2, r3
 8016d90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8016d94:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8016d96:	693b      	ldr	r3, [r7, #16]
 8016d98:	3301      	adds	r3, #1
 8016d9a:	613b      	str	r3, [r7, #16]
 8016d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d9e:	693a      	ldr	r2, [r7, #16]
 8016da0:	429a      	cmp	r2, r3
 8016da2:	d3b7      	bcc.n	8016d14 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016daa:	691b      	ldr	r3, [r3, #16]
 8016dac:	68fa      	ldr	r2, [r7, #12]
 8016dae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016db2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016db6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	2200      	movs	r2, #0
 8016dbc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8016dc4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	699b      	ldr	r3, [r3, #24]
 8016dca:	f043 0210 	orr.w	r2, r3, #16
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	699a      	ldr	r2, [r3, #24]
 8016dd6:	4b10      	ldr	r3, [pc, #64]	; (8016e18 <USB_DevInit+0x294>)
 8016dd8:	4313      	orrs	r3, r2
 8016dda:	687a      	ldr	r2, [r7, #4]
 8016ddc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8016dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d005      	beq.n	8016df0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	699b      	ldr	r3, [r3, #24]
 8016de8:	f043 0208 	orr.w	r2, r3, #8
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8016df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016df2:	2b01      	cmp	r3, #1
 8016df4:	d107      	bne.n	8016e06 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	699b      	ldr	r3, [r3, #24]
 8016dfa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8016dfe:	f043 0304 	orr.w	r3, r3, #4
 8016e02:	687a      	ldr	r2, [r7, #4]
 8016e04:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8016e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8016e08:	4618      	mov	r0, r3
 8016e0a:	3718      	adds	r7, #24
 8016e0c:	46bd      	mov	sp, r7
 8016e0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016e12:	b004      	add	sp, #16
 8016e14:	4770      	bx	lr
 8016e16:	bf00      	nop
 8016e18:	803c3800 	.word	0x803c3800

08016e1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8016e1c:	b480      	push	{r7}
 8016e1e:	b085      	sub	sp, #20
 8016e20:	af00      	add	r7, sp, #0
 8016e22:	6078      	str	r0, [r7, #4]
 8016e24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8016e26:	2300      	movs	r3, #0
 8016e28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	3301      	adds	r3, #1
 8016e2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	4a13      	ldr	r2, [pc, #76]	; (8016e80 <USB_FlushTxFifo+0x64>)
 8016e34:	4293      	cmp	r3, r2
 8016e36:	d901      	bls.n	8016e3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8016e38:	2303      	movs	r3, #3
 8016e3a:	e01b      	b.n	8016e74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	691b      	ldr	r3, [r3, #16]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	daf2      	bge.n	8016e2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8016e44:	2300      	movs	r3, #0
 8016e46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8016e48:	683b      	ldr	r3, [r7, #0]
 8016e4a:	019b      	lsls	r3, r3, #6
 8016e4c:	f043 0220 	orr.w	r2, r3, #32
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	3301      	adds	r3, #1
 8016e58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	4a08      	ldr	r2, [pc, #32]	; (8016e80 <USB_FlushTxFifo+0x64>)
 8016e5e:	4293      	cmp	r3, r2
 8016e60:	d901      	bls.n	8016e66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8016e62:	2303      	movs	r3, #3
 8016e64:	e006      	b.n	8016e74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	691b      	ldr	r3, [r3, #16]
 8016e6a:	f003 0320 	and.w	r3, r3, #32
 8016e6e:	2b20      	cmp	r3, #32
 8016e70:	d0f0      	beq.n	8016e54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8016e72:	2300      	movs	r3, #0
}
 8016e74:	4618      	mov	r0, r3
 8016e76:	3714      	adds	r7, #20
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e7e:	4770      	bx	lr
 8016e80:	00030d40 	.word	0x00030d40

08016e84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8016e84:	b480      	push	{r7}
 8016e86:	b085      	sub	sp, #20
 8016e88:	af00      	add	r7, sp, #0
 8016e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8016e8c:	2300      	movs	r3, #0
 8016e8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	3301      	adds	r3, #1
 8016e94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	4a11      	ldr	r2, [pc, #68]	; (8016ee0 <USB_FlushRxFifo+0x5c>)
 8016e9a:	4293      	cmp	r3, r2
 8016e9c:	d901      	bls.n	8016ea2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8016e9e:	2303      	movs	r3, #3
 8016ea0:	e018      	b.n	8016ed4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	691b      	ldr	r3, [r3, #16]
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	daf2      	bge.n	8016e90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8016eaa:	2300      	movs	r3, #0
 8016eac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	2210      	movs	r2, #16
 8016eb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	3301      	adds	r3, #1
 8016eb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	4a08      	ldr	r2, [pc, #32]	; (8016ee0 <USB_FlushRxFifo+0x5c>)
 8016ebe:	4293      	cmp	r3, r2
 8016ec0:	d901      	bls.n	8016ec6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8016ec2:	2303      	movs	r3, #3
 8016ec4:	e006      	b.n	8016ed4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	691b      	ldr	r3, [r3, #16]
 8016eca:	f003 0310 	and.w	r3, r3, #16
 8016ece:	2b10      	cmp	r3, #16
 8016ed0:	d0f0      	beq.n	8016eb4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8016ed2:	2300      	movs	r3, #0
}
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	3714      	adds	r7, #20
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ede:	4770      	bx	lr
 8016ee0:	00030d40 	.word	0x00030d40

08016ee4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8016ee4:	b480      	push	{r7}
 8016ee6:	b085      	sub	sp, #20
 8016ee8:	af00      	add	r7, sp, #0
 8016eea:	6078      	str	r0, [r7, #4]
 8016eec:	460b      	mov	r3, r1
 8016eee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8016ef4:	68fb      	ldr	r3, [r7, #12]
 8016ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016efa:	681a      	ldr	r2, [r3, #0]
 8016efc:	78fb      	ldrb	r3, [r7, #3]
 8016efe:	68f9      	ldr	r1, [r7, #12]
 8016f00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016f04:	4313      	orrs	r3, r2
 8016f06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8016f08:	2300      	movs	r3, #0
}
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	3714      	adds	r7, #20
 8016f0e:	46bd      	mov	sp, r7
 8016f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f14:	4770      	bx	lr

08016f16 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8016f16:	b480      	push	{r7}
 8016f18:	b087      	sub	sp, #28
 8016f1a:	af00      	add	r7, sp, #0
 8016f1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8016f22:	693b      	ldr	r3, [r7, #16]
 8016f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016f28:	689b      	ldr	r3, [r3, #8]
 8016f2a:	f003 0306 	and.w	r3, r3, #6
 8016f2e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	2b02      	cmp	r3, #2
 8016f34:	d002      	beq.n	8016f3c <USB_GetDevSpeed+0x26>
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	2b06      	cmp	r3, #6
 8016f3a:	d102      	bne.n	8016f42 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8016f3c:	2302      	movs	r3, #2
 8016f3e:	75fb      	strb	r3, [r7, #23]
 8016f40:	e001      	b.n	8016f46 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8016f42:	230f      	movs	r3, #15
 8016f44:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8016f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8016f48:	4618      	mov	r0, r3
 8016f4a:	371c      	adds	r7, #28
 8016f4c:	46bd      	mov	sp, r7
 8016f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f52:	4770      	bx	lr

08016f54 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016f54:	b480      	push	{r7}
 8016f56:	b085      	sub	sp, #20
 8016f58:	af00      	add	r7, sp, #0
 8016f5a:	6078      	str	r0, [r7, #4]
 8016f5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016f62:	683b      	ldr	r3, [r7, #0]
 8016f64:	781b      	ldrb	r3, [r3, #0]
 8016f66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8016f68:	683b      	ldr	r3, [r7, #0]
 8016f6a:	785b      	ldrb	r3, [r3, #1]
 8016f6c:	2b01      	cmp	r3, #1
 8016f6e:	d13a      	bne.n	8016fe6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016f76:	69da      	ldr	r2, [r3, #28]
 8016f78:	683b      	ldr	r3, [r7, #0]
 8016f7a:	781b      	ldrb	r3, [r3, #0]
 8016f7c:	f003 030f 	and.w	r3, r3, #15
 8016f80:	2101      	movs	r1, #1
 8016f82:	fa01 f303 	lsl.w	r3, r1, r3
 8016f86:	b29b      	uxth	r3, r3
 8016f88:	68f9      	ldr	r1, [r7, #12]
 8016f8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016f8e:	4313      	orrs	r3, r2
 8016f90:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8016f92:	68bb      	ldr	r3, [r7, #8]
 8016f94:	015a      	lsls	r2, r3, #5
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	4413      	add	r3, r2
 8016f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d155      	bne.n	8017054 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8016fa8:	68bb      	ldr	r3, [r7, #8]
 8016faa:	015a      	lsls	r2, r3, #5
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	4413      	add	r3, r2
 8016fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016fb4:	681a      	ldr	r2, [r3, #0]
 8016fb6:	683b      	ldr	r3, [r7, #0]
 8016fb8:	68db      	ldr	r3, [r3, #12]
 8016fba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8016fbe:	683b      	ldr	r3, [r7, #0]
 8016fc0:	791b      	ldrb	r3, [r3, #4]
 8016fc2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8016fc4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8016fc6:	68bb      	ldr	r3, [r7, #8]
 8016fc8:	059b      	lsls	r3, r3, #22
 8016fca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8016fcc:	4313      	orrs	r3, r2
 8016fce:	68ba      	ldr	r2, [r7, #8]
 8016fd0:	0151      	lsls	r1, r2, #5
 8016fd2:	68fa      	ldr	r2, [r7, #12]
 8016fd4:	440a      	add	r2, r1
 8016fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016fe2:	6013      	str	r3, [r2, #0]
 8016fe4:	e036      	b.n	8017054 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016fec:	69da      	ldr	r2, [r3, #28]
 8016fee:	683b      	ldr	r3, [r7, #0]
 8016ff0:	781b      	ldrb	r3, [r3, #0]
 8016ff2:	f003 030f 	and.w	r3, r3, #15
 8016ff6:	2101      	movs	r1, #1
 8016ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8016ffc:	041b      	lsls	r3, r3, #16
 8016ffe:	68f9      	ldr	r1, [r7, #12]
 8017000:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8017004:	4313      	orrs	r3, r2
 8017006:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8017008:	68bb      	ldr	r3, [r7, #8]
 801700a:	015a      	lsls	r2, r3, #5
 801700c:	68fb      	ldr	r3, [r7, #12]
 801700e:	4413      	add	r3, r2
 8017010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801701a:	2b00      	cmp	r3, #0
 801701c:	d11a      	bne.n	8017054 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801701e:	68bb      	ldr	r3, [r7, #8]
 8017020:	015a      	lsls	r2, r3, #5
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	4413      	add	r3, r2
 8017026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801702a:	681a      	ldr	r2, [r3, #0]
 801702c:	683b      	ldr	r3, [r7, #0]
 801702e:	68db      	ldr	r3, [r3, #12]
 8017030:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8017034:	683b      	ldr	r3, [r7, #0]
 8017036:	791b      	ldrb	r3, [r3, #4]
 8017038:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801703a:	430b      	orrs	r3, r1
 801703c:	4313      	orrs	r3, r2
 801703e:	68ba      	ldr	r2, [r7, #8]
 8017040:	0151      	lsls	r1, r2, #5
 8017042:	68fa      	ldr	r2, [r7, #12]
 8017044:	440a      	add	r2, r1
 8017046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801704a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801704e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017052:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8017054:	2300      	movs	r3, #0
}
 8017056:	4618      	mov	r0, r3
 8017058:	3714      	adds	r7, #20
 801705a:	46bd      	mov	sp, r7
 801705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017060:	4770      	bx	lr
	...

08017064 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8017064:	b480      	push	{r7}
 8017066:	b085      	sub	sp, #20
 8017068:	af00      	add	r7, sp, #0
 801706a:	6078      	str	r0, [r7, #4]
 801706c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8017072:	683b      	ldr	r3, [r7, #0]
 8017074:	781b      	ldrb	r3, [r3, #0]
 8017076:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8017078:	683b      	ldr	r3, [r7, #0]
 801707a:	785b      	ldrb	r3, [r3, #1]
 801707c:	2b01      	cmp	r3, #1
 801707e:	d161      	bne.n	8017144 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8017080:	68bb      	ldr	r3, [r7, #8]
 8017082:	015a      	lsls	r2, r3, #5
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	4413      	add	r3, r2
 8017088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801708c:	681b      	ldr	r3, [r3, #0]
 801708e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017092:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017096:	d11f      	bne.n	80170d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8017098:	68bb      	ldr	r3, [r7, #8]
 801709a:	015a      	lsls	r2, r3, #5
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	4413      	add	r3, r2
 80170a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	68ba      	ldr	r2, [r7, #8]
 80170a8:	0151      	lsls	r1, r2, #5
 80170aa:	68fa      	ldr	r2, [r7, #12]
 80170ac:	440a      	add	r2, r1
 80170ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80170b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80170b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80170b8:	68bb      	ldr	r3, [r7, #8]
 80170ba:	015a      	lsls	r2, r3, #5
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	4413      	add	r3, r2
 80170c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80170c4:	681b      	ldr	r3, [r3, #0]
 80170c6:	68ba      	ldr	r2, [r7, #8]
 80170c8:	0151      	lsls	r1, r2, #5
 80170ca:	68fa      	ldr	r2, [r7, #12]
 80170cc:	440a      	add	r2, r1
 80170ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80170d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80170d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80170de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80170e0:	683b      	ldr	r3, [r7, #0]
 80170e2:	781b      	ldrb	r3, [r3, #0]
 80170e4:	f003 030f 	and.w	r3, r3, #15
 80170e8:	2101      	movs	r1, #1
 80170ea:	fa01 f303 	lsl.w	r3, r1, r3
 80170ee:	b29b      	uxth	r3, r3
 80170f0:	43db      	mvns	r3, r3
 80170f2:	68f9      	ldr	r1, [r7, #12]
 80170f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80170f8:	4013      	ands	r3, r2
 80170fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017102:	69da      	ldr	r2, [r3, #28]
 8017104:	683b      	ldr	r3, [r7, #0]
 8017106:	781b      	ldrb	r3, [r3, #0]
 8017108:	f003 030f 	and.w	r3, r3, #15
 801710c:	2101      	movs	r1, #1
 801710e:	fa01 f303 	lsl.w	r3, r1, r3
 8017112:	b29b      	uxth	r3, r3
 8017114:	43db      	mvns	r3, r3
 8017116:	68f9      	ldr	r1, [r7, #12]
 8017118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801711c:	4013      	ands	r3, r2
 801711e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8017120:	68bb      	ldr	r3, [r7, #8]
 8017122:	015a      	lsls	r2, r3, #5
 8017124:	68fb      	ldr	r3, [r7, #12]
 8017126:	4413      	add	r3, r2
 8017128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801712c:	681a      	ldr	r2, [r3, #0]
 801712e:	68bb      	ldr	r3, [r7, #8]
 8017130:	0159      	lsls	r1, r3, #5
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	440b      	add	r3, r1
 8017136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801713a:	4619      	mov	r1, r3
 801713c:	4b35      	ldr	r3, [pc, #212]	; (8017214 <USB_DeactivateEndpoint+0x1b0>)
 801713e:	4013      	ands	r3, r2
 8017140:	600b      	str	r3, [r1, #0]
 8017142:	e060      	b.n	8017206 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8017144:	68bb      	ldr	r3, [r7, #8]
 8017146:	015a      	lsls	r2, r3, #5
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	4413      	add	r3, r2
 801714c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017150:	681b      	ldr	r3, [r3, #0]
 8017152:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801715a:	d11f      	bne.n	801719c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801715c:	68bb      	ldr	r3, [r7, #8]
 801715e:	015a      	lsls	r2, r3, #5
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	4413      	add	r3, r2
 8017164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	68ba      	ldr	r2, [r7, #8]
 801716c:	0151      	lsls	r1, r2, #5
 801716e:	68fa      	ldr	r2, [r7, #12]
 8017170:	440a      	add	r2, r1
 8017172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017176:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801717a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801717c:	68bb      	ldr	r3, [r7, #8]
 801717e:	015a      	lsls	r2, r3, #5
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	4413      	add	r3, r2
 8017184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	68ba      	ldr	r2, [r7, #8]
 801718c:	0151      	lsls	r1, r2, #5
 801718e:	68fa      	ldr	r2, [r7, #12]
 8017190:	440a      	add	r2, r1
 8017192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017196:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801719a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80171a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80171a4:	683b      	ldr	r3, [r7, #0]
 80171a6:	781b      	ldrb	r3, [r3, #0]
 80171a8:	f003 030f 	and.w	r3, r3, #15
 80171ac:	2101      	movs	r1, #1
 80171ae:	fa01 f303 	lsl.w	r3, r1, r3
 80171b2:	041b      	lsls	r3, r3, #16
 80171b4:	43db      	mvns	r3, r3
 80171b6:	68f9      	ldr	r1, [r7, #12]
 80171b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80171bc:	4013      	ands	r3, r2
 80171be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80171c6:	69da      	ldr	r2, [r3, #28]
 80171c8:	683b      	ldr	r3, [r7, #0]
 80171ca:	781b      	ldrb	r3, [r3, #0]
 80171cc:	f003 030f 	and.w	r3, r3, #15
 80171d0:	2101      	movs	r1, #1
 80171d2:	fa01 f303 	lsl.w	r3, r1, r3
 80171d6:	041b      	lsls	r3, r3, #16
 80171d8:	43db      	mvns	r3, r3
 80171da:	68f9      	ldr	r1, [r7, #12]
 80171dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80171e0:	4013      	ands	r3, r2
 80171e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80171e4:	68bb      	ldr	r3, [r7, #8]
 80171e6:	015a      	lsls	r2, r3, #5
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	4413      	add	r3, r2
 80171ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80171f0:	681a      	ldr	r2, [r3, #0]
 80171f2:	68bb      	ldr	r3, [r7, #8]
 80171f4:	0159      	lsls	r1, r3, #5
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	440b      	add	r3, r1
 80171fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80171fe:	4619      	mov	r1, r3
 8017200:	4b05      	ldr	r3, [pc, #20]	; (8017218 <USB_DeactivateEndpoint+0x1b4>)
 8017202:	4013      	ands	r3, r2
 8017204:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8017206:	2300      	movs	r3, #0
}
 8017208:	4618      	mov	r0, r3
 801720a:	3714      	adds	r7, #20
 801720c:	46bd      	mov	sp, r7
 801720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017212:	4770      	bx	lr
 8017214:	ec337800 	.word	0xec337800
 8017218:	eff37800 	.word	0xeff37800

0801721c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801721c:	b580      	push	{r7, lr}
 801721e:	b086      	sub	sp, #24
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
 8017224:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801722a:	683b      	ldr	r3, [r7, #0]
 801722c:	781b      	ldrb	r3, [r3, #0]
 801722e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8017230:	683b      	ldr	r3, [r7, #0]
 8017232:	785b      	ldrb	r3, [r3, #1]
 8017234:	2b01      	cmp	r3, #1
 8017236:	f040 810a 	bne.w	801744e <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801723a:	683b      	ldr	r3, [r7, #0]
 801723c:	699b      	ldr	r3, [r3, #24]
 801723e:	2b00      	cmp	r3, #0
 8017240:	d132      	bne.n	80172a8 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8017242:	693b      	ldr	r3, [r7, #16]
 8017244:	015a      	lsls	r2, r3, #5
 8017246:	697b      	ldr	r3, [r7, #20]
 8017248:	4413      	add	r3, r2
 801724a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801724e:	691b      	ldr	r3, [r3, #16]
 8017250:	693a      	ldr	r2, [r7, #16]
 8017252:	0151      	lsls	r1, r2, #5
 8017254:	697a      	ldr	r2, [r7, #20]
 8017256:	440a      	add	r2, r1
 8017258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801725c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8017260:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8017264:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8017266:	693b      	ldr	r3, [r7, #16]
 8017268:	015a      	lsls	r2, r3, #5
 801726a:	697b      	ldr	r3, [r7, #20]
 801726c:	4413      	add	r3, r2
 801726e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017272:	691b      	ldr	r3, [r3, #16]
 8017274:	693a      	ldr	r2, [r7, #16]
 8017276:	0151      	lsls	r1, r2, #5
 8017278:	697a      	ldr	r2, [r7, #20]
 801727a:	440a      	add	r2, r1
 801727c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017280:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8017284:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8017286:	693b      	ldr	r3, [r7, #16]
 8017288:	015a      	lsls	r2, r3, #5
 801728a:	697b      	ldr	r3, [r7, #20]
 801728c:	4413      	add	r3, r2
 801728e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017292:	691b      	ldr	r3, [r3, #16]
 8017294:	693a      	ldr	r2, [r7, #16]
 8017296:	0151      	lsls	r1, r2, #5
 8017298:	697a      	ldr	r2, [r7, #20]
 801729a:	440a      	add	r2, r1
 801729c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80172a0:	0cdb      	lsrs	r3, r3, #19
 80172a2:	04db      	lsls	r3, r3, #19
 80172a4:	6113      	str	r3, [r2, #16]
 80172a6:	e074      	b.n	8017392 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80172a8:	693b      	ldr	r3, [r7, #16]
 80172aa:	015a      	lsls	r2, r3, #5
 80172ac:	697b      	ldr	r3, [r7, #20]
 80172ae:	4413      	add	r3, r2
 80172b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80172b4:	691b      	ldr	r3, [r3, #16]
 80172b6:	693a      	ldr	r2, [r7, #16]
 80172b8:	0151      	lsls	r1, r2, #5
 80172ba:	697a      	ldr	r2, [r7, #20]
 80172bc:	440a      	add	r2, r1
 80172be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80172c2:	0cdb      	lsrs	r3, r3, #19
 80172c4:	04db      	lsls	r3, r3, #19
 80172c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80172c8:	693b      	ldr	r3, [r7, #16]
 80172ca:	015a      	lsls	r2, r3, #5
 80172cc:	697b      	ldr	r3, [r7, #20]
 80172ce:	4413      	add	r3, r2
 80172d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80172d4:	691b      	ldr	r3, [r3, #16]
 80172d6:	693a      	ldr	r2, [r7, #16]
 80172d8:	0151      	lsls	r1, r2, #5
 80172da:	697a      	ldr	r2, [r7, #20]
 80172dc:	440a      	add	r2, r1
 80172de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80172e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80172e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80172ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80172ec:	693b      	ldr	r3, [r7, #16]
 80172ee:	015a      	lsls	r2, r3, #5
 80172f0:	697b      	ldr	r3, [r7, #20]
 80172f2:	4413      	add	r3, r2
 80172f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80172f8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80172fa:	683b      	ldr	r3, [r7, #0]
 80172fc:	6999      	ldr	r1, [r3, #24]
 80172fe:	683b      	ldr	r3, [r7, #0]
 8017300:	68db      	ldr	r3, [r3, #12]
 8017302:	440b      	add	r3, r1
 8017304:	1e59      	subs	r1, r3, #1
 8017306:	683b      	ldr	r3, [r7, #0]
 8017308:	68db      	ldr	r3, [r3, #12]
 801730a:	fbb1 f3f3 	udiv	r3, r1, r3
 801730e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8017310:	4b9e      	ldr	r3, [pc, #632]	; (801758c <USB_EPStartXfer+0x370>)
 8017312:	400b      	ands	r3, r1
 8017314:	6939      	ldr	r1, [r7, #16]
 8017316:	0148      	lsls	r0, r1, #5
 8017318:	6979      	ldr	r1, [r7, #20]
 801731a:	4401      	add	r1, r0
 801731c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8017320:	4313      	orrs	r3, r2
 8017322:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8017324:	693b      	ldr	r3, [r7, #16]
 8017326:	015a      	lsls	r2, r3, #5
 8017328:	697b      	ldr	r3, [r7, #20]
 801732a:	4413      	add	r3, r2
 801732c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017330:	691a      	ldr	r2, [r3, #16]
 8017332:	683b      	ldr	r3, [r7, #0]
 8017334:	699b      	ldr	r3, [r3, #24]
 8017336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801733a:	6939      	ldr	r1, [r7, #16]
 801733c:	0148      	lsls	r0, r1, #5
 801733e:	6979      	ldr	r1, [r7, #20]
 8017340:	4401      	add	r1, r0
 8017342:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8017346:	4313      	orrs	r3, r2
 8017348:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801734a:	683b      	ldr	r3, [r7, #0]
 801734c:	791b      	ldrb	r3, [r3, #4]
 801734e:	2b01      	cmp	r3, #1
 8017350:	d11f      	bne.n	8017392 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8017352:	693b      	ldr	r3, [r7, #16]
 8017354:	015a      	lsls	r2, r3, #5
 8017356:	697b      	ldr	r3, [r7, #20]
 8017358:	4413      	add	r3, r2
 801735a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801735e:	691b      	ldr	r3, [r3, #16]
 8017360:	693a      	ldr	r2, [r7, #16]
 8017362:	0151      	lsls	r1, r2, #5
 8017364:	697a      	ldr	r2, [r7, #20]
 8017366:	440a      	add	r2, r1
 8017368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801736c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8017370:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8017372:	693b      	ldr	r3, [r7, #16]
 8017374:	015a      	lsls	r2, r3, #5
 8017376:	697b      	ldr	r3, [r7, #20]
 8017378:	4413      	add	r3, r2
 801737a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801737e:	691b      	ldr	r3, [r3, #16]
 8017380:	693a      	ldr	r2, [r7, #16]
 8017382:	0151      	lsls	r1, r2, #5
 8017384:	697a      	ldr	r2, [r7, #20]
 8017386:	440a      	add	r2, r1
 8017388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801738c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017390:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8017392:	693b      	ldr	r3, [r7, #16]
 8017394:	015a      	lsls	r2, r3, #5
 8017396:	697b      	ldr	r3, [r7, #20]
 8017398:	4413      	add	r3, r2
 801739a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801739e:	681b      	ldr	r3, [r3, #0]
 80173a0:	693a      	ldr	r2, [r7, #16]
 80173a2:	0151      	lsls	r1, r2, #5
 80173a4:	697a      	ldr	r2, [r7, #20]
 80173a6:	440a      	add	r2, r1
 80173a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80173ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80173b0:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80173b2:	683b      	ldr	r3, [r7, #0]
 80173b4:	791b      	ldrb	r3, [r3, #4]
 80173b6:	2b01      	cmp	r3, #1
 80173b8:	d015      	beq.n	80173e6 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80173ba:	683b      	ldr	r3, [r7, #0]
 80173bc:	699b      	ldr	r3, [r3, #24]
 80173be:	2b00      	cmp	r3, #0
 80173c0:	f000 8106 	beq.w	80175d0 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80173c4:	697b      	ldr	r3, [r7, #20]
 80173c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80173ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80173cc:	683b      	ldr	r3, [r7, #0]
 80173ce:	781b      	ldrb	r3, [r3, #0]
 80173d0:	f003 030f 	and.w	r3, r3, #15
 80173d4:	2101      	movs	r1, #1
 80173d6:	fa01 f303 	lsl.w	r3, r1, r3
 80173da:	6979      	ldr	r1, [r7, #20]
 80173dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80173e0:	4313      	orrs	r3, r2
 80173e2:	634b      	str	r3, [r1, #52]	; 0x34
 80173e4:	e0f4      	b.n	80175d0 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80173e6:	697b      	ldr	r3, [r7, #20]
 80173e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80173ec:	689b      	ldr	r3, [r3, #8]
 80173ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d110      	bne.n	8017418 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80173f6:	693b      	ldr	r3, [r7, #16]
 80173f8:	015a      	lsls	r2, r3, #5
 80173fa:	697b      	ldr	r3, [r7, #20]
 80173fc:	4413      	add	r3, r2
 80173fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	693a      	ldr	r2, [r7, #16]
 8017406:	0151      	lsls	r1, r2, #5
 8017408:	697a      	ldr	r2, [r7, #20]
 801740a:	440a      	add	r2, r1
 801740c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017410:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017414:	6013      	str	r3, [r2, #0]
 8017416:	e00f      	b.n	8017438 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8017418:	693b      	ldr	r3, [r7, #16]
 801741a:	015a      	lsls	r2, r3, #5
 801741c:	697b      	ldr	r3, [r7, #20]
 801741e:	4413      	add	r3, r2
 8017420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	693a      	ldr	r2, [r7, #16]
 8017428:	0151      	lsls	r1, r2, #5
 801742a:	697a      	ldr	r2, [r7, #20]
 801742c:	440a      	add	r2, r1
 801742e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017436:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8017438:	683b      	ldr	r3, [r7, #0]
 801743a:	6919      	ldr	r1, [r3, #16]
 801743c:	683b      	ldr	r3, [r7, #0]
 801743e:	781a      	ldrb	r2, [r3, #0]
 8017440:	683b      	ldr	r3, [r7, #0]
 8017442:	699b      	ldr	r3, [r3, #24]
 8017444:	b29b      	uxth	r3, r3
 8017446:	6878      	ldr	r0, [r7, #4]
 8017448:	f000 fa94 	bl	8017974 <USB_WritePacket>
 801744c:	e0c0      	b.n	80175d0 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801744e:	693b      	ldr	r3, [r7, #16]
 8017450:	015a      	lsls	r2, r3, #5
 8017452:	697b      	ldr	r3, [r7, #20]
 8017454:	4413      	add	r3, r2
 8017456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801745a:	691b      	ldr	r3, [r3, #16]
 801745c:	693a      	ldr	r2, [r7, #16]
 801745e:	0151      	lsls	r1, r2, #5
 8017460:	697a      	ldr	r2, [r7, #20]
 8017462:	440a      	add	r2, r1
 8017464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017468:	0cdb      	lsrs	r3, r3, #19
 801746a:	04db      	lsls	r3, r3, #19
 801746c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801746e:	693b      	ldr	r3, [r7, #16]
 8017470:	015a      	lsls	r2, r3, #5
 8017472:	697b      	ldr	r3, [r7, #20]
 8017474:	4413      	add	r3, r2
 8017476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801747a:	691b      	ldr	r3, [r3, #16]
 801747c:	693a      	ldr	r2, [r7, #16]
 801747e:	0151      	lsls	r1, r2, #5
 8017480:	697a      	ldr	r2, [r7, #20]
 8017482:	440a      	add	r2, r1
 8017484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017488:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801748c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8017490:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8017492:	683b      	ldr	r3, [r7, #0]
 8017494:	699b      	ldr	r3, [r3, #24]
 8017496:	2b00      	cmp	r3, #0
 8017498:	d123      	bne.n	80174e2 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801749a:	693b      	ldr	r3, [r7, #16]
 801749c:	015a      	lsls	r2, r3, #5
 801749e:	697b      	ldr	r3, [r7, #20]
 80174a0:	4413      	add	r3, r2
 80174a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80174a6:	691a      	ldr	r2, [r3, #16]
 80174a8:	683b      	ldr	r3, [r7, #0]
 80174aa:	68db      	ldr	r3, [r3, #12]
 80174ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80174b0:	6939      	ldr	r1, [r7, #16]
 80174b2:	0148      	lsls	r0, r1, #5
 80174b4:	6979      	ldr	r1, [r7, #20]
 80174b6:	4401      	add	r1, r0
 80174b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80174bc:	4313      	orrs	r3, r2
 80174be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80174c0:	693b      	ldr	r3, [r7, #16]
 80174c2:	015a      	lsls	r2, r3, #5
 80174c4:	697b      	ldr	r3, [r7, #20]
 80174c6:	4413      	add	r3, r2
 80174c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80174cc:	691b      	ldr	r3, [r3, #16]
 80174ce:	693a      	ldr	r2, [r7, #16]
 80174d0:	0151      	lsls	r1, r2, #5
 80174d2:	697a      	ldr	r2, [r7, #20]
 80174d4:	440a      	add	r2, r1
 80174d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80174da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80174de:	6113      	str	r3, [r2, #16]
 80174e0:	e037      	b.n	8017552 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80174e2:	683b      	ldr	r3, [r7, #0]
 80174e4:	699a      	ldr	r2, [r3, #24]
 80174e6:	683b      	ldr	r3, [r7, #0]
 80174e8:	68db      	ldr	r3, [r3, #12]
 80174ea:	4413      	add	r3, r2
 80174ec:	1e5a      	subs	r2, r3, #1
 80174ee:	683b      	ldr	r3, [r7, #0]
 80174f0:	68db      	ldr	r3, [r3, #12]
 80174f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80174f6:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80174f8:	683b      	ldr	r3, [r7, #0]
 80174fa:	68db      	ldr	r3, [r3, #12]
 80174fc:	89fa      	ldrh	r2, [r7, #14]
 80174fe:	fb03 f202 	mul.w	r2, r3, r2
 8017502:	683b      	ldr	r3, [r7, #0]
 8017504:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8017506:	693b      	ldr	r3, [r7, #16]
 8017508:	015a      	lsls	r2, r3, #5
 801750a:	697b      	ldr	r3, [r7, #20]
 801750c:	4413      	add	r3, r2
 801750e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017512:	691a      	ldr	r2, [r3, #16]
 8017514:	89fb      	ldrh	r3, [r7, #14]
 8017516:	04d9      	lsls	r1, r3, #19
 8017518:	4b1c      	ldr	r3, [pc, #112]	; (801758c <USB_EPStartXfer+0x370>)
 801751a:	400b      	ands	r3, r1
 801751c:	6939      	ldr	r1, [r7, #16]
 801751e:	0148      	lsls	r0, r1, #5
 8017520:	6979      	ldr	r1, [r7, #20]
 8017522:	4401      	add	r1, r0
 8017524:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8017528:	4313      	orrs	r3, r2
 801752a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801752c:	693b      	ldr	r3, [r7, #16]
 801752e:	015a      	lsls	r2, r3, #5
 8017530:	697b      	ldr	r3, [r7, #20]
 8017532:	4413      	add	r3, r2
 8017534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017538:	691a      	ldr	r2, [r3, #16]
 801753a:	683b      	ldr	r3, [r7, #0]
 801753c:	69db      	ldr	r3, [r3, #28]
 801753e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8017542:	6939      	ldr	r1, [r7, #16]
 8017544:	0148      	lsls	r0, r1, #5
 8017546:	6979      	ldr	r1, [r7, #20]
 8017548:	4401      	add	r1, r0
 801754a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801754e:	4313      	orrs	r3, r2
 8017550:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8017552:	683b      	ldr	r3, [r7, #0]
 8017554:	791b      	ldrb	r3, [r3, #4]
 8017556:	2b01      	cmp	r3, #1
 8017558:	d12a      	bne.n	80175b0 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801755a:	697b      	ldr	r3, [r7, #20]
 801755c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017560:	689b      	ldr	r3, [r3, #8]
 8017562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017566:	2b00      	cmp	r3, #0
 8017568:	d112      	bne.n	8017590 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801756a:	693b      	ldr	r3, [r7, #16]
 801756c:	015a      	lsls	r2, r3, #5
 801756e:	697b      	ldr	r3, [r7, #20]
 8017570:	4413      	add	r3, r2
 8017572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	693a      	ldr	r2, [r7, #16]
 801757a:	0151      	lsls	r1, r2, #5
 801757c:	697a      	ldr	r2, [r7, #20]
 801757e:	440a      	add	r2, r1
 8017580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017584:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017588:	6013      	str	r3, [r2, #0]
 801758a:	e011      	b.n	80175b0 <USB_EPStartXfer+0x394>
 801758c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8017590:	693b      	ldr	r3, [r7, #16]
 8017592:	015a      	lsls	r2, r3, #5
 8017594:	697b      	ldr	r3, [r7, #20]
 8017596:	4413      	add	r3, r2
 8017598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801759c:	681b      	ldr	r3, [r3, #0]
 801759e:	693a      	ldr	r2, [r7, #16]
 80175a0:	0151      	lsls	r1, r2, #5
 80175a2:	697a      	ldr	r2, [r7, #20]
 80175a4:	440a      	add	r2, r1
 80175a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80175aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80175ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80175b0:	693b      	ldr	r3, [r7, #16]
 80175b2:	015a      	lsls	r2, r3, #5
 80175b4:	697b      	ldr	r3, [r7, #20]
 80175b6:	4413      	add	r3, r2
 80175b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	693a      	ldr	r2, [r7, #16]
 80175c0:	0151      	lsls	r1, r2, #5
 80175c2:	697a      	ldr	r2, [r7, #20]
 80175c4:	440a      	add	r2, r1
 80175c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80175ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80175ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80175d0:	2300      	movs	r3, #0
}
 80175d2:	4618      	mov	r0, r3
 80175d4:	3718      	adds	r7, #24
 80175d6:	46bd      	mov	sp, r7
 80175d8:	bd80      	pop	{r7, pc}
 80175da:	bf00      	nop

080175dc <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80175dc:	b480      	push	{r7}
 80175de:	b085      	sub	sp, #20
 80175e0:	af00      	add	r7, sp, #0
 80175e2:	6078      	str	r0, [r7, #4]
 80175e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80175ea:	683b      	ldr	r3, [r7, #0]
 80175ec:	781b      	ldrb	r3, [r3, #0]
 80175ee:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80175f0:	683b      	ldr	r3, [r7, #0]
 80175f2:	785b      	ldrb	r3, [r3, #1]
 80175f4:	2b01      	cmp	r3, #1
 80175f6:	f040 80ab 	bne.w	8017750 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80175fa:	683b      	ldr	r3, [r7, #0]
 80175fc:	699b      	ldr	r3, [r3, #24]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d132      	bne.n	8017668 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8017602:	68bb      	ldr	r3, [r7, #8]
 8017604:	015a      	lsls	r2, r3, #5
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	4413      	add	r3, r2
 801760a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801760e:	691b      	ldr	r3, [r3, #16]
 8017610:	68ba      	ldr	r2, [r7, #8]
 8017612:	0151      	lsls	r1, r2, #5
 8017614:	68fa      	ldr	r2, [r7, #12]
 8017616:	440a      	add	r2, r1
 8017618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801761c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8017620:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8017624:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8017626:	68bb      	ldr	r3, [r7, #8]
 8017628:	015a      	lsls	r2, r3, #5
 801762a:	68fb      	ldr	r3, [r7, #12]
 801762c:	4413      	add	r3, r2
 801762e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017632:	691b      	ldr	r3, [r3, #16]
 8017634:	68ba      	ldr	r2, [r7, #8]
 8017636:	0151      	lsls	r1, r2, #5
 8017638:	68fa      	ldr	r2, [r7, #12]
 801763a:	440a      	add	r2, r1
 801763c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017640:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8017644:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8017646:	68bb      	ldr	r3, [r7, #8]
 8017648:	015a      	lsls	r2, r3, #5
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	4413      	add	r3, r2
 801764e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017652:	691b      	ldr	r3, [r3, #16]
 8017654:	68ba      	ldr	r2, [r7, #8]
 8017656:	0151      	lsls	r1, r2, #5
 8017658:	68fa      	ldr	r2, [r7, #12]
 801765a:	440a      	add	r2, r1
 801765c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017660:	0cdb      	lsrs	r3, r3, #19
 8017662:	04db      	lsls	r3, r3, #19
 8017664:	6113      	str	r3, [r2, #16]
 8017666:	e04e      	b.n	8017706 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8017668:	68bb      	ldr	r3, [r7, #8]
 801766a:	015a      	lsls	r2, r3, #5
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	4413      	add	r3, r2
 8017670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017674:	691b      	ldr	r3, [r3, #16]
 8017676:	68ba      	ldr	r2, [r7, #8]
 8017678:	0151      	lsls	r1, r2, #5
 801767a:	68fa      	ldr	r2, [r7, #12]
 801767c:	440a      	add	r2, r1
 801767e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017682:	0cdb      	lsrs	r3, r3, #19
 8017684:	04db      	lsls	r3, r3, #19
 8017686:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8017688:	68bb      	ldr	r3, [r7, #8]
 801768a:	015a      	lsls	r2, r3, #5
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	4413      	add	r3, r2
 8017690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017694:	691b      	ldr	r3, [r3, #16]
 8017696:	68ba      	ldr	r2, [r7, #8]
 8017698:	0151      	lsls	r1, r2, #5
 801769a:	68fa      	ldr	r2, [r7, #12]
 801769c:	440a      	add	r2, r1
 801769e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80176a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80176a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80176aa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80176ac:	683b      	ldr	r3, [r7, #0]
 80176ae:	699a      	ldr	r2, [r3, #24]
 80176b0:	683b      	ldr	r3, [r7, #0]
 80176b2:	68db      	ldr	r3, [r3, #12]
 80176b4:	429a      	cmp	r2, r3
 80176b6:	d903      	bls.n	80176c0 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 80176b8:	683b      	ldr	r3, [r7, #0]
 80176ba:	68da      	ldr	r2, [r3, #12]
 80176bc:	683b      	ldr	r3, [r7, #0]
 80176be:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80176c0:	68bb      	ldr	r3, [r7, #8]
 80176c2:	015a      	lsls	r2, r3, #5
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	4413      	add	r3, r2
 80176c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80176cc:	691b      	ldr	r3, [r3, #16]
 80176ce:	68ba      	ldr	r2, [r7, #8]
 80176d0:	0151      	lsls	r1, r2, #5
 80176d2:	68fa      	ldr	r2, [r7, #12]
 80176d4:	440a      	add	r2, r1
 80176d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80176da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80176de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80176e0:	68bb      	ldr	r3, [r7, #8]
 80176e2:	015a      	lsls	r2, r3, #5
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	4413      	add	r3, r2
 80176e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80176ec:	691a      	ldr	r2, [r3, #16]
 80176ee:	683b      	ldr	r3, [r7, #0]
 80176f0:	699b      	ldr	r3, [r3, #24]
 80176f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80176f6:	68b9      	ldr	r1, [r7, #8]
 80176f8:	0148      	lsls	r0, r1, #5
 80176fa:	68f9      	ldr	r1, [r7, #12]
 80176fc:	4401      	add	r1, r0
 80176fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8017702:	4313      	orrs	r3, r2
 8017704:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8017706:	68bb      	ldr	r3, [r7, #8]
 8017708:	015a      	lsls	r2, r3, #5
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	4413      	add	r3, r2
 801770e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	68ba      	ldr	r2, [r7, #8]
 8017716:	0151      	lsls	r1, r2, #5
 8017718:	68fa      	ldr	r2, [r7, #12]
 801771a:	440a      	add	r2, r1
 801771c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017720:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8017724:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8017726:	683b      	ldr	r3, [r7, #0]
 8017728:	699b      	ldr	r3, [r3, #24]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d071      	beq.n	8017812 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017736:	683b      	ldr	r3, [r7, #0]
 8017738:	781b      	ldrb	r3, [r3, #0]
 801773a:	f003 030f 	and.w	r3, r3, #15
 801773e:	2101      	movs	r1, #1
 8017740:	fa01 f303 	lsl.w	r3, r1, r3
 8017744:	68f9      	ldr	r1, [r7, #12]
 8017746:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801774a:	4313      	orrs	r3, r2
 801774c:	634b      	str	r3, [r1, #52]	; 0x34
 801774e:	e060      	b.n	8017812 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8017750:	68bb      	ldr	r3, [r7, #8]
 8017752:	015a      	lsls	r2, r3, #5
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	4413      	add	r3, r2
 8017758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801775c:	691b      	ldr	r3, [r3, #16]
 801775e:	68ba      	ldr	r2, [r7, #8]
 8017760:	0151      	lsls	r1, r2, #5
 8017762:	68fa      	ldr	r2, [r7, #12]
 8017764:	440a      	add	r2, r1
 8017766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801776a:	0cdb      	lsrs	r3, r3, #19
 801776c:	04db      	lsls	r3, r3, #19
 801776e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8017770:	68bb      	ldr	r3, [r7, #8]
 8017772:	015a      	lsls	r2, r3, #5
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	4413      	add	r3, r2
 8017778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801777c:	691b      	ldr	r3, [r3, #16]
 801777e:	68ba      	ldr	r2, [r7, #8]
 8017780:	0151      	lsls	r1, r2, #5
 8017782:	68fa      	ldr	r2, [r7, #12]
 8017784:	440a      	add	r2, r1
 8017786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801778a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801778e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8017792:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8017794:	683b      	ldr	r3, [r7, #0]
 8017796:	699b      	ldr	r3, [r3, #24]
 8017798:	2b00      	cmp	r3, #0
 801779a:	d003      	beq.n	80177a4 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 801779c:	683b      	ldr	r3, [r7, #0]
 801779e:	68da      	ldr	r2, [r3, #12]
 80177a0:	683b      	ldr	r3, [r7, #0]
 80177a2:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80177a4:	683b      	ldr	r3, [r7, #0]
 80177a6:	68da      	ldr	r2, [r3, #12]
 80177a8:	683b      	ldr	r3, [r7, #0]
 80177aa:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80177ac:	68bb      	ldr	r3, [r7, #8]
 80177ae:	015a      	lsls	r2, r3, #5
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	4413      	add	r3, r2
 80177b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80177b8:	691b      	ldr	r3, [r3, #16]
 80177ba:	68ba      	ldr	r2, [r7, #8]
 80177bc:	0151      	lsls	r1, r2, #5
 80177be:	68fa      	ldr	r2, [r7, #12]
 80177c0:	440a      	add	r2, r1
 80177c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80177c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80177ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80177cc:	68bb      	ldr	r3, [r7, #8]
 80177ce:	015a      	lsls	r2, r3, #5
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	4413      	add	r3, r2
 80177d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80177d8:	691a      	ldr	r2, [r3, #16]
 80177da:	683b      	ldr	r3, [r7, #0]
 80177dc:	69db      	ldr	r3, [r3, #28]
 80177de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80177e2:	68b9      	ldr	r1, [r7, #8]
 80177e4:	0148      	lsls	r0, r1, #5
 80177e6:	68f9      	ldr	r1, [r7, #12]
 80177e8:	4401      	add	r1, r0
 80177ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80177ee:	4313      	orrs	r3, r2
 80177f0:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80177f2:	68bb      	ldr	r3, [r7, #8]
 80177f4:	015a      	lsls	r2, r3, #5
 80177f6:	68fb      	ldr	r3, [r7, #12]
 80177f8:	4413      	add	r3, r2
 80177fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	68ba      	ldr	r2, [r7, #8]
 8017802:	0151      	lsls	r1, r2, #5
 8017804:	68fa      	ldr	r2, [r7, #12]
 8017806:	440a      	add	r2, r1
 8017808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801780c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8017810:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8017812:	2300      	movs	r3, #0
}
 8017814:	4618      	mov	r0, r3
 8017816:	3714      	adds	r7, #20
 8017818:	46bd      	mov	sp, r7
 801781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801781e:	4770      	bx	lr

08017820 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8017820:	b480      	push	{r7}
 8017822:	b087      	sub	sp, #28
 8017824:	af00      	add	r7, sp, #0
 8017826:	6078      	str	r0, [r7, #4]
 8017828:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801782a:	2300      	movs	r3, #0
 801782c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801782e:	2300      	movs	r3, #0
 8017830:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8017836:	683b      	ldr	r3, [r7, #0]
 8017838:	785b      	ldrb	r3, [r3, #1]
 801783a:	2b01      	cmp	r3, #1
 801783c:	d14a      	bne.n	80178d4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801783e:	683b      	ldr	r3, [r7, #0]
 8017840:	781b      	ldrb	r3, [r3, #0]
 8017842:	015a      	lsls	r2, r3, #5
 8017844:	693b      	ldr	r3, [r7, #16]
 8017846:	4413      	add	r3, r2
 8017848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017852:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017856:	f040 8086 	bne.w	8017966 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801785a:	683b      	ldr	r3, [r7, #0]
 801785c:	781b      	ldrb	r3, [r3, #0]
 801785e:	015a      	lsls	r2, r3, #5
 8017860:	693b      	ldr	r3, [r7, #16]
 8017862:	4413      	add	r3, r2
 8017864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	683a      	ldr	r2, [r7, #0]
 801786c:	7812      	ldrb	r2, [r2, #0]
 801786e:	0151      	lsls	r1, r2, #5
 8017870:	693a      	ldr	r2, [r7, #16]
 8017872:	440a      	add	r2, r1
 8017874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017878:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801787c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801787e:	683b      	ldr	r3, [r7, #0]
 8017880:	781b      	ldrb	r3, [r3, #0]
 8017882:	015a      	lsls	r2, r3, #5
 8017884:	693b      	ldr	r3, [r7, #16]
 8017886:	4413      	add	r3, r2
 8017888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	683a      	ldr	r2, [r7, #0]
 8017890:	7812      	ldrb	r2, [r2, #0]
 8017892:	0151      	lsls	r1, r2, #5
 8017894:	693a      	ldr	r2, [r7, #16]
 8017896:	440a      	add	r2, r1
 8017898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801789c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80178a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	3301      	adds	r3, #1
 80178a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80178ae:	4293      	cmp	r3, r2
 80178b0:	d902      	bls.n	80178b8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80178b2:	2301      	movs	r3, #1
 80178b4:	75fb      	strb	r3, [r7, #23]
          break;
 80178b6:	e056      	b.n	8017966 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80178b8:	683b      	ldr	r3, [r7, #0]
 80178ba:	781b      	ldrb	r3, [r3, #0]
 80178bc:	015a      	lsls	r2, r3, #5
 80178be:	693b      	ldr	r3, [r7, #16]
 80178c0:	4413      	add	r3, r2
 80178c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80178c6:	681b      	ldr	r3, [r3, #0]
 80178c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80178cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80178d0:	d0e7      	beq.n	80178a2 <USB_EPStopXfer+0x82>
 80178d2:	e048      	b.n	8017966 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80178d4:	683b      	ldr	r3, [r7, #0]
 80178d6:	781b      	ldrb	r3, [r3, #0]
 80178d8:	015a      	lsls	r2, r3, #5
 80178da:	693b      	ldr	r3, [r7, #16]
 80178dc:	4413      	add	r3, r2
 80178de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80178e2:	681b      	ldr	r3, [r3, #0]
 80178e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80178e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80178ec:	d13b      	bne.n	8017966 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80178ee:	683b      	ldr	r3, [r7, #0]
 80178f0:	781b      	ldrb	r3, [r3, #0]
 80178f2:	015a      	lsls	r2, r3, #5
 80178f4:	693b      	ldr	r3, [r7, #16]
 80178f6:	4413      	add	r3, r2
 80178f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	683a      	ldr	r2, [r7, #0]
 8017900:	7812      	ldrb	r2, [r2, #0]
 8017902:	0151      	lsls	r1, r2, #5
 8017904:	693a      	ldr	r2, [r7, #16]
 8017906:	440a      	add	r2, r1
 8017908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801790c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8017910:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8017912:	683b      	ldr	r3, [r7, #0]
 8017914:	781b      	ldrb	r3, [r3, #0]
 8017916:	015a      	lsls	r2, r3, #5
 8017918:	693b      	ldr	r3, [r7, #16]
 801791a:	4413      	add	r3, r2
 801791c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017920:	681b      	ldr	r3, [r3, #0]
 8017922:	683a      	ldr	r2, [r7, #0]
 8017924:	7812      	ldrb	r2, [r2, #0]
 8017926:	0151      	lsls	r1, r2, #5
 8017928:	693a      	ldr	r2, [r7, #16]
 801792a:	440a      	add	r2, r1
 801792c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017930:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8017934:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8017936:	68fb      	ldr	r3, [r7, #12]
 8017938:	3301      	adds	r3, #1
 801793a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801793c:	68fb      	ldr	r3, [r7, #12]
 801793e:	f242 7210 	movw	r2, #10000	; 0x2710
 8017942:	4293      	cmp	r3, r2
 8017944:	d902      	bls.n	801794c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8017946:	2301      	movs	r3, #1
 8017948:	75fb      	strb	r3, [r7, #23]
          break;
 801794a:	e00c      	b.n	8017966 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801794c:	683b      	ldr	r3, [r7, #0]
 801794e:	781b      	ldrb	r3, [r3, #0]
 8017950:	015a      	lsls	r2, r3, #5
 8017952:	693b      	ldr	r3, [r7, #16]
 8017954:	4413      	add	r3, r2
 8017956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017960:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017964:	d0e7      	beq.n	8017936 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8017966:	7dfb      	ldrb	r3, [r7, #23]
}
 8017968:	4618      	mov	r0, r3
 801796a:	371c      	adds	r7, #28
 801796c:	46bd      	mov	sp, r7
 801796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017972:	4770      	bx	lr

08017974 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8017974:	b480      	push	{r7}
 8017976:	b089      	sub	sp, #36	; 0x24
 8017978:	af00      	add	r7, sp, #0
 801797a:	60f8      	str	r0, [r7, #12]
 801797c:	60b9      	str	r1, [r7, #8]
 801797e:	4611      	mov	r1, r2
 8017980:	461a      	mov	r2, r3
 8017982:	460b      	mov	r3, r1
 8017984:	71fb      	strb	r3, [r7, #7]
 8017986:	4613      	mov	r3, r2
 8017988:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801798e:	68bb      	ldr	r3, [r7, #8]
 8017990:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8017992:	88bb      	ldrh	r3, [r7, #4]
 8017994:	3303      	adds	r3, #3
 8017996:	089b      	lsrs	r3, r3, #2
 8017998:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 801799a:	2300      	movs	r3, #0
 801799c:	61bb      	str	r3, [r7, #24]
 801799e:	e018      	b.n	80179d2 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80179a0:	79fb      	ldrb	r3, [r7, #7]
 80179a2:	031a      	lsls	r2, r3, #12
 80179a4:	697b      	ldr	r3, [r7, #20]
 80179a6:	4413      	add	r3, r2
 80179a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80179ac:	461a      	mov	r2, r3
 80179ae:	69fb      	ldr	r3, [r7, #28]
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	6013      	str	r3, [r2, #0]
    pSrc++;
 80179b4:	69fb      	ldr	r3, [r7, #28]
 80179b6:	3301      	adds	r3, #1
 80179b8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80179ba:	69fb      	ldr	r3, [r7, #28]
 80179bc:	3301      	adds	r3, #1
 80179be:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80179c0:	69fb      	ldr	r3, [r7, #28]
 80179c2:	3301      	adds	r3, #1
 80179c4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80179c6:	69fb      	ldr	r3, [r7, #28]
 80179c8:	3301      	adds	r3, #1
 80179ca:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80179cc:	69bb      	ldr	r3, [r7, #24]
 80179ce:	3301      	adds	r3, #1
 80179d0:	61bb      	str	r3, [r7, #24]
 80179d2:	69ba      	ldr	r2, [r7, #24]
 80179d4:	693b      	ldr	r3, [r7, #16]
 80179d6:	429a      	cmp	r2, r3
 80179d8:	d3e2      	bcc.n	80179a0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80179da:	2300      	movs	r3, #0
}
 80179dc:	4618      	mov	r0, r3
 80179de:	3724      	adds	r7, #36	; 0x24
 80179e0:	46bd      	mov	sp, r7
 80179e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179e6:	4770      	bx	lr

080179e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80179e8:	b480      	push	{r7}
 80179ea:	b08b      	sub	sp, #44	; 0x2c
 80179ec:	af00      	add	r7, sp, #0
 80179ee:	60f8      	str	r0, [r7, #12]
 80179f0:	60b9      	str	r1, [r7, #8]
 80179f2:	4613      	mov	r3, r2
 80179f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80179f6:	68fb      	ldr	r3, [r7, #12]
 80179f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80179fa:	68bb      	ldr	r3, [r7, #8]
 80179fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80179fe:	88fb      	ldrh	r3, [r7, #6]
 8017a00:	089b      	lsrs	r3, r3, #2
 8017a02:	b29b      	uxth	r3, r3
 8017a04:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8017a06:	88fb      	ldrh	r3, [r7, #6]
 8017a08:	f003 0303 	and.w	r3, r3, #3
 8017a0c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8017a0e:	2300      	movs	r3, #0
 8017a10:	623b      	str	r3, [r7, #32]
 8017a12:	e014      	b.n	8017a3e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8017a14:	69bb      	ldr	r3, [r7, #24]
 8017a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017a1a:	681a      	ldr	r2, [r3, #0]
 8017a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a1e:	601a      	str	r2, [r3, #0]
    pDest++;
 8017a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a22:	3301      	adds	r3, #1
 8017a24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8017a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a28:	3301      	adds	r3, #1
 8017a2a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8017a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a2e:	3301      	adds	r3, #1
 8017a30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8017a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a34:	3301      	adds	r3, #1
 8017a36:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8017a38:	6a3b      	ldr	r3, [r7, #32]
 8017a3a:	3301      	adds	r3, #1
 8017a3c:	623b      	str	r3, [r7, #32]
 8017a3e:	6a3a      	ldr	r2, [r7, #32]
 8017a40:	697b      	ldr	r3, [r7, #20]
 8017a42:	429a      	cmp	r2, r3
 8017a44:	d3e6      	bcc.n	8017a14 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8017a46:	8bfb      	ldrh	r3, [r7, #30]
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d01e      	beq.n	8017a8a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8017a4c:	2300      	movs	r3, #0
 8017a4e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8017a50:	69bb      	ldr	r3, [r7, #24]
 8017a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017a56:	461a      	mov	r2, r3
 8017a58:	f107 0310 	add.w	r3, r7, #16
 8017a5c:	6812      	ldr	r2, [r2, #0]
 8017a5e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8017a60:	693a      	ldr	r2, [r7, #16]
 8017a62:	6a3b      	ldr	r3, [r7, #32]
 8017a64:	b2db      	uxtb	r3, r3
 8017a66:	00db      	lsls	r3, r3, #3
 8017a68:	fa22 f303 	lsr.w	r3, r2, r3
 8017a6c:	b2da      	uxtb	r2, r3
 8017a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a70:	701a      	strb	r2, [r3, #0]
      i++;
 8017a72:	6a3b      	ldr	r3, [r7, #32]
 8017a74:	3301      	adds	r3, #1
 8017a76:	623b      	str	r3, [r7, #32]
      pDest++;
 8017a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a7a:	3301      	adds	r3, #1
 8017a7c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8017a7e:	8bfb      	ldrh	r3, [r7, #30]
 8017a80:	3b01      	subs	r3, #1
 8017a82:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8017a84:	8bfb      	ldrh	r3, [r7, #30]
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d1ea      	bne.n	8017a60 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8017a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	372c      	adds	r7, #44	; 0x2c
 8017a90:	46bd      	mov	sp, r7
 8017a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a96:	4770      	bx	lr

08017a98 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8017a98:	b480      	push	{r7}
 8017a9a:	b085      	sub	sp, #20
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	6078      	str	r0, [r7, #4]
 8017aa0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8017aa6:	683b      	ldr	r3, [r7, #0]
 8017aa8:	781b      	ldrb	r3, [r3, #0]
 8017aaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8017aac:	683b      	ldr	r3, [r7, #0]
 8017aae:	785b      	ldrb	r3, [r3, #1]
 8017ab0:	2b01      	cmp	r3, #1
 8017ab2:	d12c      	bne.n	8017b0e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8017ab4:	68bb      	ldr	r3, [r7, #8]
 8017ab6:	015a      	lsls	r2, r3, #5
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	4413      	add	r3, r2
 8017abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	db12      	blt.n	8017aec <USB_EPSetStall+0x54>
 8017ac6:	68bb      	ldr	r3, [r7, #8]
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d00f      	beq.n	8017aec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8017acc:	68bb      	ldr	r3, [r7, #8]
 8017ace:	015a      	lsls	r2, r3, #5
 8017ad0:	68fb      	ldr	r3, [r7, #12]
 8017ad2:	4413      	add	r3, r2
 8017ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	68ba      	ldr	r2, [r7, #8]
 8017adc:	0151      	lsls	r1, r2, #5
 8017ade:	68fa      	ldr	r2, [r7, #12]
 8017ae0:	440a      	add	r2, r1
 8017ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017ae6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8017aea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8017aec:	68bb      	ldr	r3, [r7, #8]
 8017aee:	015a      	lsls	r2, r3, #5
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	4413      	add	r3, r2
 8017af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	68ba      	ldr	r2, [r7, #8]
 8017afc:	0151      	lsls	r1, r2, #5
 8017afe:	68fa      	ldr	r2, [r7, #12]
 8017b00:	440a      	add	r2, r1
 8017b02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017b06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8017b0a:	6013      	str	r3, [r2, #0]
 8017b0c:	e02b      	b.n	8017b66 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8017b0e:	68bb      	ldr	r3, [r7, #8]
 8017b10:	015a      	lsls	r2, r3, #5
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	4413      	add	r3, r2
 8017b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	db12      	blt.n	8017b46 <USB_EPSetStall+0xae>
 8017b20:	68bb      	ldr	r3, [r7, #8]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d00f      	beq.n	8017b46 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8017b26:	68bb      	ldr	r3, [r7, #8]
 8017b28:	015a      	lsls	r2, r3, #5
 8017b2a:	68fb      	ldr	r3, [r7, #12]
 8017b2c:	4413      	add	r3, r2
 8017b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	68ba      	ldr	r2, [r7, #8]
 8017b36:	0151      	lsls	r1, r2, #5
 8017b38:	68fa      	ldr	r2, [r7, #12]
 8017b3a:	440a      	add	r2, r1
 8017b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017b40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8017b44:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8017b46:	68bb      	ldr	r3, [r7, #8]
 8017b48:	015a      	lsls	r2, r3, #5
 8017b4a:	68fb      	ldr	r3, [r7, #12]
 8017b4c:	4413      	add	r3, r2
 8017b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	68ba      	ldr	r2, [r7, #8]
 8017b56:	0151      	lsls	r1, r2, #5
 8017b58:	68fa      	ldr	r2, [r7, #12]
 8017b5a:	440a      	add	r2, r1
 8017b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017b60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8017b64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8017b66:	2300      	movs	r3, #0
}
 8017b68:	4618      	mov	r0, r3
 8017b6a:	3714      	adds	r7, #20
 8017b6c:	46bd      	mov	sp, r7
 8017b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b72:	4770      	bx	lr

08017b74 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8017b74:	b480      	push	{r7}
 8017b76:	b085      	sub	sp, #20
 8017b78:	af00      	add	r7, sp, #0
 8017b7a:	6078      	str	r0, [r7, #4]
 8017b7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8017b82:	683b      	ldr	r3, [r7, #0]
 8017b84:	781b      	ldrb	r3, [r3, #0]
 8017b86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8017b88:	683b      	ldr	r3, [r7, #0]
 8017b8a:	785b      	ldrb	r3, [r3, #1]
 8017b8c:	2b01      	cmp	r3, #1
 8017b8e:	d128      	bne.n	8017be2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8017b90:	68bb      	ldr	r3, [r7, #8]
 8017b92:	015a      	lsls	r2, r3, #5
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	4413      	add	r3, r2
 8017b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	68ba      	ldr	r2, [r7, #8]
 8017ba0:	0151      	lsls	r1, r2, #5
 8017ba2:	68fa      	ldr	r2, [r7, #12]
 8017ba4:	440a      	add	r2, r1
 8017ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017baa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8017bae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8017bb0:	683b      	ldr	r3, [r7, #0]
 8017bb2:	791b      	ldrb	r3, [r3, #4]
 8017bb4:	2b03      	cmp	r3, #3
 8017bb6:	d003      	beq.n	8017bc0 <USB_EPClearStall+0x4c>
 8017bb8:	683b      	ldr	r3, [r7, #0]
 8017bba:	791b      	ldrb	r3, [r3, #4]
 8017bbc:	2b02      	cmp	r3, #2
 8017bbe:	d138      	bne.n	8017c32 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8017bc0:	68bb      	ldr	r3, [r7, #8]
 8017bc2:	015a      	lsls	r2, r3, #5
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	4413      	add	r3, r2
 8017bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017bcc:	681b      	ldr	r3, [r3, #0]
 8017bce:	68ba      	ldr	r2, [r7, #8]
 8017bd0:	0151      	lsls	r1, r2, #5
 8017bd2:	68fa      	ldr	r2, [r7, #12]
 8017bd4:	440a      	add	r2, r1
 8017bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017bde:	6013      	str	r3, [r2, #0]
 8017be0:	e027      	b.n	8017c32 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8017be2:	68bb      	ldr	r3, [r7, #8]
 8017be4:	015a      	lsls	r2, r3, #5
 8017be6:	68fb      	ldr	r3, [r7, #12]
 8017be8:	4413      	add	r3, r2
 8017bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	68ba      	ldr	r2, [r7, #8]
 8017bf2:	0151      	lsls	r1, r2, #5
 8017bf4:	68fa      	ldr	r2, [r7, #12]
 8017bf6:	440a      	add	r2, r1
 8017bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017bfc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8017c00:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8017c02:	683b      	ldr	r3, [r7, #0]
 8017c04:	791b      	ldrb	r3, [r3, #4]
 8017c06:	2b03      	cmp	r3, #3
 8017c08:	d003      	beq.n	8017c12 <USB_EPClearStall+0x9e>
 8017c0a:	683b      	ldr	r3, [r7, #0]
 8017c0c:	791b      	ldrb	r3, [r3, #4]
 8017c0e:	2b02      	cmp	r3, #2
 8017c10:	d10f      	bne.n	8017c32 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8017c12:	68bb      	ldr	r3, [r7, #8]
 8017c14:	015a      	lsls	r2, r3, #5
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	4413      	add	r3, r2
 8017c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	68ba      	ldr	r2, [r7, #8]
 8017c22:	0151      	lsls	r1, r2, #5
 8017c24:	68fa      	ldr	r2, [r7, #12]
 8017c26:	440a      	add	r2, r1
 8017c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017c30:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8017c32:	2300      	movs	r3, #0
}
 8017c34:	4618      	mov	r0, r3
 8017c36:	3714      	adds	r7, #20
 8017c38:	46bd      	mov	sp, r7
 8017c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c3e:	4770      	bx	lr

08017c40 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8017c40:	b480      	push	{r7}
 8017c42:	b085      	sub	sp, #20
 8017c44:	af00      	add	r7, sp, #0
 8017c46:	6078      	str	r0, [r7, #4]
 8017c48:	460b      	mov	r3, r1
 8017c4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	68fa      	ldr	r2, [r7, #12]
 8017c5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017c5e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8017c62:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017c6a:	681a      	ldr	r2, [r3, #0]
 8017c6c:	78fb      	ldrb	r3, [r7, #3]
 8017c6e:	011b      	lsls	r3, r3, #4
 8017c70:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8017c74:	68f9      	ldr	r1, [r7, #12]
 8017c76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8017c7a:	4313      	orrs	r3, r2
 8017c7c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8017c7e:	2300      	movs	r3, #0
}
 8017c80:	4618      	mov	r0, r3
 8017c82:	3714      	adds	r7, #20
 8017c84:	46bd      	mov	sp, r7
 8017c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c8a:	4770      	bx	lr

08017c8c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8017c8c:	b480      	push	{r7}
 8017c8e:	b085      	sub	sp, #20
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8017c98:	68fb      	ldr	r3, [r7, #12]
 8017c9a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	68fa      	ldr	r2, [r7, #12]
 8017ca2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017ca6:	f023 0303 	bic.w	r3, r3, #3
 8017caa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8017cac:	68fb      	ldr	r3, [r7, #12]
 8017cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017cb2:	685b      	ldr	r3, [r3, #4]
 8017cb4:	68fa      	ldr	r2, [r7, #12]
 8017cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017cba:	f023 0302 	bic.w	r3, r3, #2
 8017cbe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8017cc0:	2300      	movs	r3, #0
}
 8017cc2:	4618      	mov	r0, r3
 8017cc4:	3714      	adds	r7, #20
 8017cc6:	46bd      	mov	sp, r7
 8017cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ccc:	4770      	bx	lr

08017cce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8017cce:	b480      	push	{r7}
 8017cd0:	b085      	sub	sp, #20
 8017cd2:	af00      	add	r7, sp, #0
 8017cd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	68fa      	ldr	r2, [r7, #12]
 8017ce4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017ce8:	f023 0303 	bic.w	r3, r3, #3
 8017cec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8017cee:	68fb      	ldr	r3, [r7, #12]
 8017cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017cf4:	685b      	ldr	r3, [r3, #4]
 8017cf6:	68fa      	ldr	r2, [r7, #12]
 8017cf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017cfc:	f043 0302 	orr.w	r3, r3, #2
 8017d00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8017d02:	2300      	movs	r3, #0
}
 8017d04:	4618      	mov	r0, r3
 8017d06:	3714      	adds	r7, #20
 8017d08:	46bd      	mov	sp, r7
 8017d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d0e:	4770      	bx	lr

08017d10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8017d10:	b480      	push	{r7}
 8017d12:	b085      	sub	sp, #20
 8017d14:	af00      	add	r7, sp, #0
 8017d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	695b      	ldr	r3, [r3, #20]
 8017d1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	699b      	ldr	r3, [r3, #24]
 8017d22:	68fa      	ldr	r2, [r7, #12]
 8017d24:	4013      	ands	r3, r2
 8017d26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8017d28:	68fb      	ldr	r3, [r7, #12]
}
 8017d2a:	4618      	mov	r0, r3
 8017d2c:	3714      	adds	r7, #20
 8017d2e:	46bd      	mov	sp, r7
 8017d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d34:	4770      	bx	lr

08017d36 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8017d36:	b480      	push	{r7}
 8017d38:	b085      	sub	sp, #20
 8017d3a:	af00      	add	r7, sp, #0
 8017d3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8017d42:	68fb      	ldr	r3, [r7, #12]
 8017d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017d48:	699b      	ldr	r3, [r3, #24]
 8017d4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017d52:	69db      	ldr	r3, [r3, #28]
 8017d54:	68ba      	ldr	r2, [r7, #8]
 8017d56:	4013      	ands	r3, r2
 8017d58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8017d5a:	68bb      	ldr	r3, [r7, #8]
 8017d5c:	0c1b      	lsrs	r3, r3, #16
}
 8017d5e:	4618      	mov	r0, r3
 8017d60:	3714      	adds	r7, #20
 8017d62:	46bd      	mov	sp, r7
 8017d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d68:	4770      	bx	lr

08017d6a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8017d6a:	b480      	push	{r7}
 8017d6c:	b085      	sub	sp, #20
 8017d6e:	af00      	add	r7, sp, #0
 8017d70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017d7c:	699b      	ldr	r3, [r3, #24]
 8017d7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017d86:	69db      	ldr	r3, [r3, #28]
 8017d88:	68ba      	ldr	r2, [r7, #8]
 8017d8a:	4013      	ands	r3, r2
 8017d8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8017d8e:	68bb      	ldr	r3, [r7, #8]
 8017d90:	b29b      	uxth	r3, r3
}
 8017d92:	4618      	mov	r0, r3
 8017d94:	3714      	adds	r7, #20
 8017d96:	46bd      	mov	sp, r7
 8017d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d9c:	4770      	bx	lr

08017d9e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8017d9e:	b480      	push	{r7}
 8017da0:	b085      	sub	sp, #20
 8017da2:	af00      	add	r7, sp, #0
 8017da4:	6078      	str	r0, [r7, #4]
 8017da6:	460b      	mov	r3, r1
 8017da8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8017dae:	78fb      	ldrb	r3, [r7, #3]
 8017db0:	015a      	lsls	r2, r3, #5
 8017db2:	68fb      	ldr	r3, [r7, #12]
 8017db4:	4413      	add	r3, r2
 8017db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017dba:	689b      	ldr	r3, [r3, #8]
 8017dbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017dc4:	695b      	ldr	r3, [r3, #20]
 8017dc6:	68ba      	ldr	r2, [r7, #8]
 8017dc8:	4013      	ands	r3, r2
 8017dca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8017dcc:	68bb      	ldr	r3, [r7, #8]
}
 8017dce:	4618      	mov	r0, r3
 8017dd0:	3714      	adds	r7, #20
 8017dd2:	46bd      	mov	sp, r7
 8017dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dd8:	4770      	bx	lr

08017dda <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8017dda:	b480      	push	{r7}
 8017ddc:	b087      	sub	sp, #28
 8017dde:	af00      	add	r7, sp, #0
 8017de0:	6078      	str	r0, [r7, #4]
 8017de2:	460b      	mov	r3, r1
 8017de4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8017dea:	697b      	ldr	r3, [r7, #20]
 8017dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017df0:	691b      	ldr	r3, [r3, #16]
 8017df2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8017df4:	697b      	ldr	r3, [r7, #20]
 8017df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017dfc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8017dfe:	78fb      	ldrb	r3, [r7, #3]
 8017e00:	f003 030f 	and.w	r3, r3, #15
 8017e04:	68fa      	ldr	r2, [r7, #12]
 8017e06:	fa22 f303 	lsr.w	r3, r2, r3
 8017e0a:	01db      	lsls	r3, r3, #7
 8017e0c:	b2db      	uxtb	r3, r3
 8017e0e:	693a      	ldr	r2, [r7, #16]
 8017e10:	4313      	orrs	r3, r2
 8017e12:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8017e14:	78fb      	ldrb	r3, [r7, #3]
 8017e16:	015a      	lsls	r2, r3, #5
 8017e18:	697b      	ldr	r3, [r7, #20]
 8017e1a:	4413      	add	r3, r2
 8017e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017e20:	689b      	ldr	r3, [r3, #8]
 8017e22:	693a      	ldr	r2, [r7, #16]
 8017e24:	4013      	ands	r3, r2
 8017e26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8017e28:	68bb      	ldr	r3, [r7, #8]
}
 8017e2a:	4618      	mov	r0, r3
 8017e2c:	371c      	adds	r7, #28
 8017e2e:	46bd      	mov	sp, r7
 8017e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e34:	4770      	bx	lr

08017e36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8017e36:	b480      	push	{r7}
 8017e38:	b083      	sub	sp, #12
 8017e3a:	af00      	add	r7, sp, #0
 8017e3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	695b      	ldr	r3, [r3, #20]
 8017e42:	f003 0301 	and.w	r3, r3, #1
}
 8017e46:	4618      	mov	r0, r3
 8017e48:	370c      	adds	r7, #12
 8017e4a:	46bd      	mov	sp, r7
 8017e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e50:	4770      	bx	lr

08017e52 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8017e52:	b480      	push	{r7}
 8017e54:	b085      	sub	sp, #20
 8017e56:	af00      	add	r7, sp, #0
 8017e58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8017e5e:	68fb      	ldr	r3, [r7, #12]
 8017e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	68fa      	ldr	r2, [r7, #12]
 8017e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017e6c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8017e70:	f023 0307 	bic.w	r3, r3, #7
 8017e74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017e7c:	685b      	ldr	r3, [r3, #4]
 8017e7e:	68fa      	ldr	r2, [r7, #12]
 8017e80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017e88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8017e8a:	2300      	movs	r3, #0
}
 8017e8c:	4618      	mov	r0, r3
 8017e8e:	3714      	adds	r7, #20
 8017e90:	46bd      	mov	sp, r7
 8017e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e96:	4770      	bx	lr

08017e98 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8017e98:	b480      	push	{r7}
 8017e9a:	b085      	sub	sp, #20
 8017e9c:	af00      	add	r7, sp, #0
 8017e9e:	6078      	str	r0, [r7, #4]
 8017ea0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	333c      	adds	r3, #60	; 0x3c
 8017eaa:	3304      	adds	r3, #4
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8017eb0:	68bb      	ldr	r3, [r7, #8]
 8017eb2:	4a1c      	ldr	r2, [pc, #112]	; (8017f24 <USB_EP0_OutStart+0x8c>)
 8017eb4:	4293      	cmp	r3, r2
 8017eb6:	d90a      	bls.n	8017ece <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017ec8:	d101      	bne.n	8017ece <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8017eca:	2300      	movs	r3, #0
 8017ecc:	e024      	b.n	8017f18 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8017ece:	68fb      	ldr	r3, [r7, #12]
 8017ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017ed4:	461a      	mov	r2, r3
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017ee0:	691b      	ldr	r3, [r3, #16]
 8017ee2:	68fa      	ldr	r2, [r7, #12]
 8017ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017ee8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8017eec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017ef4:	691b      	ldr	r3, [r3, #16]
 8017ef6:	68fa      	ldr	r2, [r7, #12]
 8017ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017efc:	f043 0318 	orr.w	r3, r3, #24
 8017f00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017f08:	691b      	ldr	r3, [r3, #16]
 8017f0a:	68fa      	ldr	r2, [r7, #12]
 8017f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017f10:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8017f14:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8017f16:	2300      	movs	r3, #0
}
 8017f18:	4618      	mov	r0, r3
 8017f1a:	3714      	adds	r7, #20
 8017f1c:	46bd      	mov	sp, r7
 8017f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f22:	4770      	bx	lr
 8017f24:	4f54300a 	.word	0x4f54300a

08017f28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8017f28:	b480      	push	{r7}
 8017f2a:	b085      	sub	sp, #20
 8017f2c:	af00      	add	r7, sp, #0
 8017f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8017f30:	2300      	movs	r3, #0
 8017f32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8017f34:	68fb      	ldr	r3, [r7, #12]
 8017f36:	3301      	adds	r3, #1
 8017f38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8017f3a:	68fb      	ldr	r3, [r7, #12]
 8017f3c:	4a13      	ldr	r2, [pc, #76]	; (8017f8c <USB_CoreReset+0x64>)
 8017f3e:	4293      	cmp	r3, r2
 8017f40:	d901      	bls.n	8017f46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8017f42:	2303      	movs	r3, #3
 8017f44:	e01b      	b.n	8017f7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	691b      	ldr	r3, [r3, #16]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	daf2      	bge.n	8017f34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8017f4e:	2300      	movs	r3, #0
 8017f50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	691b      	ldr	r3, [r3, #16]
 8017f56:	f043 0201 	orr.w	r2, r3, #1
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	3301      	adds	r3, #1
 8017f62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	4a09      	ldr	r2, [pc, #36]	; (8017f8c <USB_CoreReset+0x64>)
 8017f68:	4293      	cmp	r3, r2
 8017f6a:	d901      	bls.n	8017f70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8017f6c:	2303      	movs	r3, #3
 8017f6e:	e006      	b.n	8017f7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	691b      	ldr	r3, [r3, #16]
 8017f74:	f003 0301 	and.w	r3, r3, #1
 8017f78:	2b01      	cmp	r3, #1
 8017f7a:	d0f0      	beq.n	8017f5e <USB_CoreReset+0x36>

  return HAL_OK;
 8017f7c:	2300      	movs	r3, #0
}
 8017f7e:	4618      	mov	r0, r3
 8017f80:	3714      	adds	r7, #20
 8017f82:	46bd      	mov	sp, r7
 8017f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f88:	4770      	bx	lr
 8017f8a:	bf00      	nop
 8017f8c:	00030d40 	.word	0x00030d40

08017f90 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017f90:	b580      	push	{r7, lr}
 8017f92:	b084      	sub	sp, #16
 8017f94:	af00      	add	r7, sp, #0
 8017f96:	6078      	str	r0, [r7, #4]
 8017f98:	460b      	mov	r3, r1
 8017f9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8017f9c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8017fa0:	f002 fa6c 	bl	801a47c <USBD_static_malloc>
 8017fa4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8017fa6:	68fb      	ldr	r3, [r7, #12]
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d105      	bne.n	8017fb8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	2200      	movs	r2, #0
 8017fb0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8017fb4:	2302      	movs	r3, #2
 8017fb6:	e066      	b.n	8018086 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	68fa      	ldr	r2, [r7, #12]
 8017fbc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	7c1b      	ldrb	r3, [r3, #16]
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d119      	bne.n	8017ffc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8017fc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017fcc:	2202      	movs	r2, #2
 8017fce:	2181      	movs	r1, #129	; 0x81
 8017fd0:	6878      	ldr	r0, [r7, #4]
 8017fd2:	f002 f83f 	bl	801a054 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	2201      	movs	r2, #1
 8017fda:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8017fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017fe0:	2202      	movs	r2, #2
 8017fe2:	2101      	movs	r1, #1
 8017fe4:	6878      	ldr	r0, [r7, #4]
 8017fe6:	f002 f835 	bl	801a054 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	2201      	movs	r2, #1
 8017fee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	2210      	movs	r2, #16
 8017ff6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8017ffa:	e016      	b.n	801802a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8017ffc:	2340      	movs	r3, #64	; 0x40
 8017ffe:	2202      	movs	r2, #2
 8018000:	2181      	movs	r1, #129	; 0x81
 8018002:	6878      	ldr	r0, [r7, #4]
 8018004:	f002 f826 	bl	801a054 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	2201      	movs	r2, #1
 801800c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801800e:	2340      	movs	r3, #64	; 0x40
 8018010:	2202      	movs	r2, #2
 8018012:	2101      	movs	r1, #1
 8018014:	6878      	ldr	r0, [r7, #4]
 8018016:	f002 f81d 	bl	801a054 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	2201      	movs	r2, #1
 801801e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	2210      	movs	r2, #16
 8018026:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801802a:	2308      	movs	r3, #8
 801802c:	2203      	movs	r2, #3
 801802e:	2182      	movs	r1, #130	; 0x82
 8018030:	6878      	ldr	r0, [r7, #4]
 8018032:	f002 f80f 	bl	801a054 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	2201      	movs	r2, #1
 801803a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8018048:	68fb      	ldr	r3, [r7, #12]
 801804a:	2200      	movs	r2, #0
 801804c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8018050:	68fb      	ldr	r3, [r7, #12]
 8018052:	2200      	movs	r2, #0
 8018054:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	7c1b      	ldrb	r3, [r3, #16]
 801805c:	2b00      	cmp	r3, #0
 801805e:	d109      	bne.n	8018074 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8018066:	f44f 7300 	mov.w	r3, #512	; 0x200
 801806a:	2101      	movs	r1, #1
 801806c:	6878      	ldr	r0, [r7, #4]
 801806e:	f002 f96b 	bl	801a348 <USBD_LL_PrepareReceive>
 8018072:	e007      	b.n	8018084 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8018074:	68fb      	ldr	r3, [r7, #12]
 8018076:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801807a:	2340      	movs	r3, #64	; 0x40
 801807c:	2101      	movs	r1, #1
 801807e:	6878      	ldr	r0, [r7, #4]
 8018080:	f002 f962 	bl	801a348 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8018084:	2300      	movs	r3, #0
}
 8018086:	4618      	mov	r0, r3
 8018088:	3710      	adds	r7, #16
 801808a:	46bd      	mov	sp, r7
 801808c:	bd80      	pop	{r7, pc}

0801808e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801808e:	b580      	push	{r7, lr}
 8018090:	b082      	sub	sp, #8
 8018092:	af00      	add	r7, sp, #0
 8018094:	6078      	str	r0, [r7, #4]
 8018096:	460b      	mov	r3, r1
 8018098:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801809a:	2181      	movs	r1, #129	; 0x81
 801809c:	6878      	ldr	r0, [r7, #4]
 801809e:	f002 f817 	bl	801a0d0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	2200      	movs	r2, #0
 80180a6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80180a8:	2101      	movs	r1, #1
 80180aa:	6878      	ldr	r0, [r7, #4]
 80180ac:	f002 f810 	bl	801a0d0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	2200      	movs	r2, #0
 80180b4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80180b8:	2182      	movs	r1, #130	; 0x82
 80180ba:	6878      	ldr	r0, [r7, #4]
 80180bc:	f002 f808 	bl	801a0d0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	2200      	movs	r2, #0
 80180c4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	2200      	movs	r2, #0
 80180cc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d00e      	beq.n	80180f8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80180e0:	685b      	ldr	r3, [r3, #4]
 80180e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80180ea:	4618      	mov	r0, r3
 80180ec:	f002 f9d4 	bl	801a498 <USBD_static_free>
    pdev->pClassData = NULL;
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	2200      	movs	r2, #0
 80180f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80180f8:	2300      	movs	r3, #0
}
 80180fa:	4618      	mov	r0, r3
 80180fc:	3708      	adds	r7, #8
 80180fe:	46bd      	mov	sp, r7
 8018100:	bd80      	pop	{r7, pc}
	...

08018104 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8018104:	b580      	push	{r7, lr}
 8018106:	b086      	sub	sp, #24
 8018108:	af00      	add	r7, sp, #0
 801810a:	6078      	str	r0, [r7, #4]
 801810c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018114:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8018116:	2300      	movs	r3, #0
 8018118:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801811a:	2300      	movs	r3, #0
 801811c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801811e:	2300      	movs	r3, #0
 8018120:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8018122:	693b      	ldr	r3, [r7, #16]
 8018124:	2b00      	cmp	r3, #0
 8018126:	d101      	bne.n	801812c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8018128:	2303      	movs	r3, #3
 801812a:	e0af      	b.n	801828c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801812c:	683b      	ldr	r3, [r7, #0]
 801812e:	781b      	ldrb	r3, [r3, #0]
 8018130:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018134:	2b00      	cmp	r3, #0
 8018136:	d03f      	beq.n	80181b8 <USBD_CDC_Setup+0xb4>
 8018138:	2b20      	cmp	r3, #32
 801813a:	f040 809f 	bne.w	801827c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801813e:	683b      	ldr	r3, [r7, #0]
 8018140:	88db      	ldrh	r3, [r3, #6]
 8018142:	2b00      	cmp	r3, #0
 8018144:	d02e      	beq.n	80181a4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8018146:	683b      	ldr	r3, [r7, #0]
 8018148:	781b      	ldrb	r3, [r3, #0]
 801814a:	b25b      	sxtb	r3, r3
 801814c:	2b00      	cmp	r3, #0
 801814e:	da16      	bge.n	801817e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018156:	689b      	ldr	r3, [r3, #8]
 8018158:	683a      	ldr	r2, [r7, #0]
 801815a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 801815c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801815e:	683a      	ldr	r2, [r7, #0]
 8018160:	88d2      	ldrh	r2, [r2, #6]
 8018162:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8018164:	683b      	ldr	r3, [r7, #0]
 8018166:	88db      	ldrh	r3, [r3, #6]
 8018168:	2b07      	cmp	r3, #7
 801816a:	bf28      	it	cs
 801816c:	2307      	movcs	r3, #7
 801816e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8018170:	693b      	ldr	r3, [r7, #16]
 8018172:	89fa      	ldrh	r2, [r7, #14]
 8018174:	4619      	mov	r1, r3
 8018176:	6878      	ldr	r0, [r7, #4]
 8018178:	f001 fb13 	bl	80197a2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 801817c:	e085      	b.n	801828a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 801817e:	683b      	ldr	r3, [r7, #0]
 8018180:	785a      	ldrb	r2, [r3, #1]
 8018182:	693b      	ldr	r3, [r7, #16]
 8018184:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8018188:	683b      	ldr	r3, [r7, #0]
 801818a:	88db      	ldrh	r3, [r3, #6]
 801818c:	b2da      	uxtb	r2, r3
 801818e:	693b      	ldr	r3, [r7, #16]
 8018190:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8018194:	6939      	ldr	r1, [r7, #16]
 8018196:	683b      	ldr	r3, [r7, #0]
 8018198:	88db      	ldrh	r3, [r3, #6]
 801819a:	461a      	mov	r2, r3
 801819c:	6878      	ldr	r0, [r7, #4]
 801819e:	f001 fb2c 	bl	80197fa <USBD_CtlPrepareRx>
      break;
 80181a2:	e072      	b.n	801828a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80181aa:	689b      	ldr	r3, [r3, #8]
 80181ac:	683a      	ldr	r2, [r7, #0]
 80181ae:	7850      	ldrb	r0, [r2, #1]
 80181b0:	2200      	movs	r2, #0
 80181b2:	6839      	ldr	r1, [r7, #0]
 80181b4:	4798      	blx	r3
      break;
 80181b6:	e068      	b.n	801828a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80181b8:	683b      	ldr	r3, [r7, #0]
 80181ba:	785b      	ldrb	r3, [r3, #1]
 80181bc:	2b0b      	cmp	r3, #11
 80181be:	d852      	bhi.n	8018266 <USBD_CDC_Setup+0x162>
 80181c0:	a201      	add	r2, pc, #4	; (adr r2, 80181c8 <USBD_CDC_Setup+0xc4>)
 80181c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181c6:	bf00      	nop
 80181c8:	080181f9 	.word	0x080181f9
 80181cc:	08018275 	.word	0x08018275
 80181d0:	08018267 	.word	0x08018267
 80181d4:	08018267 	.word	0x08018267
 80181d8:	08018267 	.word	0x08018267
 80181dc:	08018267 	.word	0x08018267
 80181e0:	08018267 	.word	0x08018267
 80181e4:	08018267 	.word	0x08018267
 80181e8:	08018267 	.word	0x08018267
 80181ec:	08018267 	.word	0x08018267
 80181f0:	08018223 	.word	0x08018223
 80181f4:	0801824d 	.word	0x0801824d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80181fe:	b2db      	uxtb	r3, r3
 8018200:	2b03      	cmp	r3, #3
 8018202:	d107      	bne.n	8018214 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8018204:	f107 030a 	add.w	r3, r7, #10
 8018208:	2202      	movs	r2, #2
 801820a:	4619      	mov	r1, r3
 801820c:	6878      	ldr	r0, [r7, #4]
 801820e:	f001 fac8 	bl	80197a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8018212:	e032      	b.n	801827a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8018214:	6839      	ldr	r1, [r7, #0]
 8018216:	6878      	ldr	r0, [r7, #4]
 8018218:	f001 fa52 	bl	80196c0 <USBD_CtlError>
            ret = USBD_FAIL;
 801821c:	2303      	movs	r3, #3
 801821e:	75fb      	strb	r3, [r7, #23]
          break;
 8018220:	e02b      	b.n	801827a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018228:	b2db      	uxtb	r3, r3
 801822a:	2b03      	cmp	r3, #3
 801822c:	d107      	bne.n	801823e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801822e:	f107 030d 	add.w	r3, r7, #13
 8018232:	2201      	movs	r2, #1
 8018234:	4619      	mov	r1, r3
 8018236:	6878      	ldr	r0, [r7, #4]
 8018238:	f001 fab3 	bl	80197a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801823c:	e01d      	b.n	801827a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801823e:	6839      	ldr	r1, [r7, #0]
 8018240:	6878      	ldr	r0, [r7, #4]
 8018242:	f001 fa3d 	bl	80196c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8018246:	2303      	movs	r3, #3
 8018248:	75fb      	strb	r3, [r7, #23]
          break;
 801824a:	e016      	b.n	801827a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018252:	b2db      	uxtb	r3, r3
 8018254:	2b03      	cmp	r3, #3
 8018256:	d00f      	beq.n	8018278 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8018258:	6839      	ldr	r1, [r7, #0]
 801825a:	6878      	ldr	r0, [r7, #4]
 801825c:	f001 fa30 	bl	80196c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8018260:	2303      	movs	r3, #3
 8018262:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8018264:	e008      	b.n	8018278 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8018266:	6839      	ldr	r1, [r7, #0]
 8018268:	6878      	ldr	r0, [r7, #4]
 801826a:	f001 fa29 	bl	80196c0 <USBD_CtlError>
          ret = USBD_FAIL;
 801826e:	2303      	movs	r3, #3
 8018270:	75fb      	strb	r3, [r7, #23]
          break;
 8018272:	e002      	b.n	801827a <USBD_CDC_Setup+0x176>
          break;
 8018274:	bf00      	nop
 8018276:	e008      	b.n	801828a <USBD_CDC_Setup+0x186>
          break;
 8018278:	bf00      	nop
      }
      break;
 801827a:	e006      	b.n	801828a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 801827c:	6839      	ldr	r1, [r7, #0]
 801827e:	6878      	ldr	r0, [r7, #4]
 8018280:	f001 fa1e 	bl	80196c0 <USBD_CtlError>
      ret = USBD_FAIL;
 8018284:	2303      	movs	r3, #3
 8018286:	75fb      	strb	r3, [r7, #23]
      break;
 8018288:	bf00      	nop
  }

  return (uint8_t)ret;
 801828a:	7dfb      	ldrb	r3, [r7, #23]
}
 801828c:	4618      	mov	r0, r3
 801828e:	3718      	adds	r7, #24
 8018290:	46bd      	mov	sp, r7
 8018292:	bd80      	pop	{r7, pc}

08018294 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018294:	b580      	push	{r7, lr}
 8018296:	b084      	sub	sp, #16
 8018298:	af00      	add	r7, sp, #0
 801829a:	6078      	str	r0, [r7, #4]
 801829c:	460b      	mov	r3, r1
 801829e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80182a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d101      	bne.n	80182b6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80182b2:	2303      	movs	r3, #3
 80182b4:	e04f      	b.n	8018356 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80182bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80182be:	78fa      	ldrb	r2, [r7, #3]
 80182c0:	6879      	ldr	r1, [r7, #4]
 80182c2:	4613      	mov	r3, r2
 80182c4:	009b      	lsls	r3, r3, #2
 80182c6:	4413      	add	r3, r2
 80182c8:	009b      	lsls	r3, r3, #2
 80182ca:	440b      	add	r3, r1
 80182cc:	3318      	adds	r3, #24
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d029      	beq.n	8018328 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80182d4:	78fa      	ldrb	r2, [r7, #3]
 80182d6:	6879      	ldr	r1, [r7, #4]
 80182d8:	4613      	mov	r3, r2
 80182da:	009b      	lsls	r3, r3, #2
 80182dc:	4413      	add	r3, r2
 80182de:	009b      	lsls	r3, r3, #2
 80182e0:	440b      	add	r3, r1
 80182e2:	3318      	adds	r3, #24
 80182e4:	681a      	ldr	r2, [r3, #0]
 80182e6:	78f9      	ldrb	r1, [r7, #3]
 80182e8:	68f8      	ldr	r0, [r7, #12]
 80182ea:	460b      	mov	r3, r1
 80182ec:	00db      	lsls	r3, r3, #3
 80182ee:	440b      	add	r3, r1
 80182f0:	009b      	lsls	r3, r3, #2
 80182f2:	4403      	add	r3, r0
 80182f4:	3348      	adds	r3, #72	; 0x48
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80182fc:	fb01 f303 	mul.w	r3, r1, r3
 8018300:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8018302:	2b00      	cmp	r3, #0
 8018304:	d110      	bne.n	8018328 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8018306:	78fa      	ldrb	r2, [r7, #3]
 8018308:	6879      	ldr	r1, [r7, #4]
 801830a:	4613      	mov	r3, r2
 801830c:	009b      	lsls	r3, r3, #2
 801830e:	4413      	add	r3, r2
 8018310:	009b      	lsls	r3, r3, #2
 8018312:	440b      	add	r3, r1
 8018314:	3318      	adds	r3, #24
 8018316:	2200      	movs	r2, #0
 8018318:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801831a:	78f9      	ldrb	r1, [r7, #3]
 801831c:	2300      	movs	r3, #0
 801831e:	2200      	movs	r2, #0
 8018320:	6878      	ldr	r0, [r7, #4]
 8018322:	f001 ffd9 	bl	801a2d8 <USBD_LL_Transmit>
 8018326:	e015      	b.n	8018354 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8018328:	68bb      	ldr	r3, [r7, #8]
 801832a:	2200      	movs	r2, #0
 801832c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018336:	691b      	ldr	r3, [r3, #16]
 8018338:	2b00      	cmp	r3, #0
 801833a:	d00b      	beq.n	8018354 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018342:	691b      	ldr	r3, [r3, #16]
 8018344:	68ba      	ldr	r2, [r7, #8]
 8018346:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801834a:	68ba      	ldr	r2, [r7, #8]
 801834c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8018350:	78fa      	ldrb	r2, [r7, #3]
 8018352:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8018354:	2300      	movs	r3, #0
}
 8018356:	4618      	mov	r0, r3
 8018358:	3710      	adds	r7, #16
 801835a:	46bd      	mov	sp, r7
 801835c:	bd80      	pop	{r7, pc}

0801835e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801835e:	b580      	push	{r7, lr}
 8018360:	b084      	sub	sp, #16
 8018362:	af00      	add	r7, sp, #0
 8018364:	6078      	str	r0, [r7, #4]
 8018366:	460b      	mov	r3, r1
 8018368:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018370:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018378:	2b00      	cmp	r3, #0
 801837a:	d101      	bne.n	8018380 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801837c:	2303      	movs	r3, #3
 801837e:	e015      	b.n	80183ac <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8018380:	78fb      	ldrb	r3, [r7, #3]
 8018382:	4619      	mov	r1, r3
 8018384:	6878      	ldr	r0, [r7, #4]
 8018386:	f002 f817 	bl	801a3b8 <USBD_LL_GetRxDataSize>
 801838a:	4602      	mov	r2, r0
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018398:	68db      	ldr	r3, [r3, #12]
 801839a:	68fa      	ldr	r2, [r7, #12]
 801839c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80183a0:	68fa      	ldr	r2, [r7, #12]
 80183a2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80183a6:	4611      	mov	r1, r2
 80183a8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80183aa:	2300      	movs	r3, #0
}
 80183ac:	4618      	mov	r0, r3
 80183ae:	3710      	adds	r7, #16
 80183b0:	46bd      	mov	sp, r7
 80183b2:	bd80      	pop	{r7, pc}

080183b4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80183b4:	b580      	push	{r7, lr}
 80183b6:	b084      	sub	sp, #16
 80183b8:	af00      	add	r7, sp, #0
 80183ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80183c2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	d101      	bne.n	80183ce <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80183ca:	2303      	movs	r3, #3
 80183cc:	e01b      	b.n	8018406 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	d015      	beq.n	8018404 <USBD_CDC_EP0_RxReady+0x50>
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80183de:	2bff      	cmp	r3, #255	; 0xff
 80183e0:	d010      	beq.n	8018404 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80183e8:	689b      	ldr	r3, [r3, #8]
 80183ea:	68fa      	ldr	r2, [r7, #12]
 80183ec:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80183f0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80183f2:	68fa      	ldr	r2, [r7, #12]
 80183f4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80183f8:	b292      	uxth	r2, r2
 80183fa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80183fc:	68fb      	ldr	r3, [r7, #12]
 80183fe:	22ff      	movs	r2, #255	; 0xff
 8018400:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8018404:	2300      	movs	r3, #0
}
 8018406:	4618      	mov	r0, r3
 8018408:	3710      	adds	r7, #16
 801840a:	46bd      	mov	sp, r7
 801840c:	bd80      	pop	{r7, pc}
	...

08018410 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8018410:	b480      	push	{r7}
 8018412:	b083      	sub	sp, #12
 8018414:	af00      	add	r7, sp, #0
 8018416:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	2243      	movs	r2, #67	; 0x43
 801841c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801841e:	4b03      	ldr	r3, [pc, #12]	; (801842c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8018420:	4618      	mov	r0, r3
 8018422:	370c      	adds	r7, #12
 8018424:	46bd      	mov	sp, r7
 8018426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801842a:	4770      	bx	lr
 801842c:	200005ec 	.word	0x200005ec

08018430 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8018430:	b480      	push	{r7}
 8018432:	b083      	sub	sp, #12
 8018434:	af00      	add	r7, sp, #0
 8018436:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	2243      	movs	r2, #67	; 0x43
 801843c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801843e:	4b03      	ldr	r3, [pc, #12]	; (801844c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8018440:	4618      	mov	r0, r3
 8018442:	370c      	adds	r7, #12
 8018444:	46bd      	mov	sp, r7
 8018446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801844a:	4770      	bx	lr
 801844c:	200005a8 	.word	0x200005a8

08018450 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8018450:	b480      	push	{r7}
 8018452:	b083      	sub	sp, #12
 8018454:	af00      	add	r7, sp, #0
 8018456:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	2243      	movs	r2, #67	; 0x43
 801845c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801845e:	4b03      	ldr	r3, [pc, #12]	; (801846c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8018460:	4618      	mov	r0, r3
 8018462:	370c      	adds	r7, #12
 8018464:	46bd      	mov	sp, r7
 8018466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801846a:	4770      	bx	lr
 801846c:	20000630 	.word	0x20000630

08018470 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8018470:	b480      	push	{r7}
 8018472:	b083      	sub	sp, #12
 8018474:	af00      	add	r7, sp, #0
 8018476:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	220a      	movs	r2, #10
 801847c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801847e:	4b03      	ldr	r3, [pc, #12]	; (801848c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8018480:	4618      	mov	r0, r3
 8018482:	370c      	adds	r7, #12
 8018484:	46bd      	mov	sp, r7
 8018486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801848a:	4770      	bx	lr
 801848c:	20000564 	.word	0x20000564

08018490 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8018490:	b480      	push	{r7}
 8018492:	b083      	sub	sp, #12
 8018494:	af00      	add	r7, sp, #0
 8018496:	6078      	str	r0, [r7, #4]
 8018498:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801849a:	683b      	ldr	r3, [r7, #0]
 801849c:	2b00      	cmp	r3, #0
 801849e:	d101      	bne.n	80184a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80184a0:	2303      	movs	r3, #3
 80184a2:	e004      	b.n	80184ae <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	683a      	ldr	r2, [r7, #0]
 80184a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80184ac:	2300      	movs	r3, #0
}
 80184ae:	4618      	mov	r0, r3
 80184b0:	370c      	adds	r7, #12
 80184b2:	46bd      	mov	sp, r7
 80184b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184b8:	4770      	bx	lr

080184ba <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80184ba:	b480      	push	{r7}
 80184bc:	b087      	sub	sp, #28
 80184be:	af00      	add	r7, sp, #0
 80184c0:	60f8      	str	r0, [r7, #12]
 80184c2:	60b9      	str	r1, [r7, #8]
 80184c4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80184c6:	68fb      	ldr	r3, [r7, #12]
 80184c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80184cc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80184ce:	697b      	ldr	r3, [r7, #20]
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d101      	bne.n	80184d8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80184d4:	2303      	movs	r3, #3
 80184d6:	e008      	b.n	80184ea <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80184d8:	697b      	ldr	r3, [r7, #20]
 80184da:	68ba      	ldr	r2, [r7, #8]
 80184dc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80184e0:	697b      	ldr	r3, [r7, #20]
 80184e2:	687a      	ldr	r2, [r7, #4]
 80184e4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80184e8:	2300      	movs	r3, #0
}
 80184ea:	4618      	mov	r0, r3
 80184ec:	371c      	adds	r7, #28
 80184ee:	46bd      	mov	sp, r7
 80184f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184f4:	4770      	bx	lr

080184f6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80184f6:	b480      	push	{r7}
 80184f8:	b085      	sub	sp, #20
 80184fa:	af00      	add	r7, sp, #0
 80184fc:	6078      	str	r0, [r7, #4]
 80184fe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018506:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8018508:	68fb      	ldr	r3, [r7, #12]
 801850a:	2b00      	cmp	r3, #0
 801850c:	d101      	bne.n	8018512 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801850e:	2303      	movs	r3, #3
 8018510:	e004      	b.n	801851c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8018512:	68fb      	ldr	r3, [r7, #12]
 8018514:	683a      	ldr	r2, [r7, #0]
 8018516:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801851a:	2300      	movs	r3, #0
}
 801851c:	4618      	mov	r0, r3
 801851e:	3714      	adds	r7, #20
 8018520:	46bd      	mov	sp, r7
 8018522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018526:	4770      	bx	lr

08018528 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8018528:	b580      	push	{r7, lr}
 801852a:	b084      	sub	sp, #16
 801852c:	af00      	add	r7, sp, #0
 801852e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018536:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801853e:	2b00      	cmp	r3, #0
 8018540:	d101      	bne.n	8018546 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8018542:	2303      	movs	r3, #3
 8018544:	e016      	b.n	8018574 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	7c1b      	ldrb	r3, [r3, #16]
 801854a:	2b00      	cmp	r3, #0
 801854c:	d109      	bne.n	8018562 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801854e:	68fb      	ldr	r3, [r7, #12]
 8018550:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8018554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018558:	2101      	movs	r1, #1
 801855a:	6878      	ldr	r0, [r7, #4]
 801855c:	f001 fef4 	bl	801a348 <USBD_LL_PrepareReceive>
 8018560:	e007      	b.n	8018572 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8018562:	68fb      	ldr	r3, [r7, #12]
 8018564:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8018568:	2340      	movs	r3, #64	; 0x40
 801856a:	2101      	movs	r1, #1
 801856c:	6878      	ldr	r0, [r7, #4]
 801856e:	f001 feeb 	bl	801a348 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8018572:	2300      	movs	r3, #0
}
 8018574:	4618      	mov	r0, r3
 8018576:	3710      	adds	r7, #16
 8018578:	46bd      	mov	sp, r7
 801857a:	bd80      	pop	{r7, pc}

0801857c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801857c:	b580      	push	{r7, lr}
 801857e:	b086      	sub	sp, #24
 8018580:	af00      	add	r7, sp, #0
 8018582:	60f8      	str	r0, [r7, #12]
 8018584:	60b9      	str	r1, [r7, #8]
 8018586:	4613      	mov	r3, r2
 8018588:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801858a:	68fb      	ldr	r3, [r7, #12]
 801858c:	2b00      	cmp	r3, #0
 801858e:	d101      	bne.n	8018594 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8018590:	2303      	movs	r3, #3
 8018592:	e01f      	b.n	80185d4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8018594:	68fb      	ldr	r3, [r7, #12]
 8018596:	2200      	movs	r2, #0
 8018598:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	2200      	movs	r2, #0
 80185a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80185a4:	68fb      	ldr	r3, [r7, #12]
 80185a6:	2200      	movs	r2, #0
 80185a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80185ac:	68bb      	ldr	r3, [r7, #8]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d003      	beq.n	80185ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80185b2:	68fb      	ldr	r3, [r7, #12]
 80185b4:	68ba      	ldr	r2, [r7, #8]
 80185b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80185ba:	68fb      	ldr	r3, [r7, #12]
 80185bc:	2201      	movs	r2, #1
 80185be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	79fa      	ldrb	r2, [r7, #7]
 80185c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80185c8:	68f8      	ldr	r0, [r7, #12]
 80185ca:	f001 fcc5 	bl	8019f58 <USBD_LL_Init>
 80185ce:	4603      	mov	r3, r0
 80185d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80185d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80185d4:	4618      	mov	r0, r3
 80185d6:	3718      	adds	r7, #24
 80185d8:	46bd      	mov	sp, r7
 80185da:	bd80      	pop	{r7, pc}

080185dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80185dc:	b580      	push	{r7, lr}
 80185de:	b084      	sub	sp, #16
 80185e0:	af00      	add	r7, sp, #0
 80185e2:	6078      	str	r0, [r7, #4]
 80185e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80185e6:	2300      	movs	r3, #0
 80185e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80185ea:	683b      	ldr	r3, [r7, #0]
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d101      	bne.n	80185f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80185f0:	2303      	movs	r3, #3
 80185f2:	e016      	b.n	8018622 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	683a      	ldr	r2, [r7, #0]
 80185f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018604:	2b00      	cmp	r3, #0
 8018606:	d00b      	beq.n	8018620 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801860e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018610:	f107 020e 	add.w	r2, r7, #14
 8018614:	4610      	mov	r0, r2
 8018616:	4798      	blx	r3
 8018618:	4602      	mov	r2, r0
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8018620:	2300      	movs	r3, #0
}
 8018622:	4618      	mov	r0, r3
 8018624:	3710      	adds	r7, #16
 8018626:	46bd      	mov	sp, r7
 8018628:	bd80      	pop	{r7, pc}

0801862a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801862a:	b580      	push	{r7, lr}
 801862c:	b082      	sub	sp, #8
 801862e:	af00      	add	r7, sp, #0
 8018630:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8018632:	6878      	ldr	r0, [r7, #4]
 8018634:	f001 fcdc 	bl	8019ff0 <USBD_LL_Start>
 8018638:	4603      	mov	r3, r0
}
 801863a:	4618      	mov	r0, r3
 801863c:	3708      	adds	r7, #8
 801863e:	46bd      	mov	sp, r7
 8018640:	bd80      	pop	{r7, pc}

08018642 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8018642:	b480      	push	{r7}
 8018644:	b083      	sub	sp, #12
 8018646:	af00      	add	r7, sp, #0
 8018648:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801864a:	2300      	movs	r3, #0
}
 801864c:	4618      	mov	r0, r3
 801864e:	370c      	adds	r7, #12
 8018650:	46bd      	mov	sp, r7
 8018652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018656:	4770      	bx	lr

08018658 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018658:	b580      	push	{r7, lr}
 801865a:	b084      	sub	sp, #16
 801865c:	af00      	add	r7, sp, #0
 801865e:	6078      	str	r0, [r7, #4]
 8018660:	460b      	mov	r3, r1
 8018662:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8018664:	2303      	movs	r3, #3
 8018666:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801866e:	2b00      	cmp	r3, #0
 8018670:	d009      	beq.n	8018686 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	78fa      	ldrb	r2, [r7, #3]
 801867c:	4611      	mov	r1, r2
 801867e:	6878      	ldr	r0, [r7, #4]
 8018680:	4798      	blx	r3
 8018682:	4603      	mov	r3, r0
 8018684:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8018686:	7bfb      	ldrb	r3, [r7, #15]
}
 8018688:	4618      	mov	r0, r3
 801868a:	3710      	adds	r7, #16
 801868c:	46bd      	mov	sp, r7
 801868e:	bd80      	pop	{r7, pc}

08018690 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018690:	b580      	push	{r7, lr}
 8018692:	b082      	sub	sp, #8
 8018694:	af00      	add	r7, sp, #0
 8018696:	6078      	str	r0, [r7, #4]
 8018698:	460b      	mov	r3, r1
 801869a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d007      	beq.n	80186b6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80186ac:	685b      	ldr	r3, [r3, #4]
 80186ae:	78fa      	ldrb	r2, [r7, #3]
 80186b0:	4611      	mov	r1, r2
 80186b2:	6878      	ldr	r0, [r7, #4]
 80186b4:	4798      	blx	r3
  }

  return USBD_OK;
 80186b6:	2300      	movs	r3, #0
}
 80186b8:	4618      	mov	r0, r3
 80186ba:	3708      	adds	r7, #8
 80186bc:	46bd      	mov	sp, r7
 80186be:	bd80      	pop	{r7, pc}

080186c0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80186c0:	b580      	push	{r7, lr}
 80186c2:	b084      	sub	sp, #16
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	6078      	str	r0, [r7, #4]
 80186c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80186d0:	6839      	ldr	r1, [r7, #0]
 80186d2:	4618      	mov	r0, r3
 80186d4:	f000 ffba 	bl	801964c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	2201      	movs	r2, #1
 80186dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80186e6:	461a      	mov	r2, r3
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80186f4:	f003 031f 	and.w	r3, r3, #31
 80186f8:	2b02      	cmp	r3, #2
 80186fa:	d01a      	beq.n	8018732 <USBD_LL_SetupStage+0x72>
 80186fc:	2b02      	cmp	r3, #2
 80186fe:	d822      	bhi.n	8018746 <USBD_LL_SetupStage+0x86>
 8018700:	2b00      	cmp	r3, #0
 8018702:	d002      	beq.n	801870a <USBD_LL_SetupStage+0x4a>
 8018704:	2b01      	cmp	r3, #1
 8018706:	d00a      	beq.n	801871e <USBD_LL_SetupStage+0x5e>
 8018708:	e01d      	b.n	8018746 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8018710:	4619      	mov	r1, r3
 8018712:	6878      	ldr	r0, [r7, #4]
 8018714:	f000 fa62 	bl	8018bdc <USBD_StdDevReq>
 8018718:	4603      	mov	r3, r0
 801871a:	73fb      	strb	r3, [r7, #15]
      break;
 801871c:	e020      	b.n	8018760 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8018724:	4619      	mov	r1, r3
 8018726:	6878      	ldr	r0, [r7, #4]
 8018728:	f000 fac6 	bl	8018cb8 <USBD_StdItfReq>
 801872c:	4603      	mov	r3, r0
 801872e:	73fb      	strb	r3, [r7, #15]
      break;
 8018730:	e016      	b.n	8018760 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8018738:	4619      	mov	r1, r3
 801873a:	6878      	ldr	r0, [r7, #4]
 801873c:	f000 fb05 	bl	8018d4a <USBD_StdEPReq>
 8018740:	4603      	mov	r3, r0
 8018742:	73fb      	strb	r3, [r7, #15]
      break;
 8018744:	e00c      	b.n	8018760 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801874c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8018750:	b2db      	uxtb	r3, r3
 8018752:	4619      	mov	r1, r3
 8018754:	6878      	ldr	r0, [r7, #4]
 8018756:	f001 fcf1 	bl	801a13c <USBD_LL_StallEP>
 801875a:	4603      	mov	r3, r0
 801875c:	73fb      	strb	r3, [r7, #15]
      break;
 801875e:	bf00      	nop
  }

  return ret;
 8018760:	7bfb      	ldrb	r3, [r7, #15]
}
 8018762:	4618      	mov	r0, r3
 8018764:	3710      	adds	r7, #16
 8018766:	46bd      	mov	sp, r7
 8018768:	bd80      	pop	{r7, pc}

0801876a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801876a:	b580      	push	{r7, lr}
 801876c:	b086      	sub	sp, #24
 801876e:	af00      	add	r7, sp, #0
 8018770:	60f8      	str	r0, [r7, #12]
 8018772:	460b      	mov	r3, r1
 8018774:	607a      	str	r2, [r7, #4]
 8018776:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8018778:	7afb      	ldrb	r3, [r7, #11]
 801877a:	2b00      	cmp	r3, #0
 801877c:	d138      	bne.n	80187f0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801877e:	68fb      	ldr	r3, [r7, #12]
 8018780:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8018784:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8018786:	68fb      	ldr	r3, [r7, #12]
 8018788:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801878c:	2b03      	cmp	r3, #3
 801878e:	d14a      	bne.n	8018826 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8018790:	693b      	ldr	r3, [r7, #16]
 8018792:	689a      	ldr	r2, [r3, #8]
 8018794:	693b      	ldr	r3, [r7, #16]
 8018796:	68db      	ldr	r3, [r3, #12]
 8018798:	429a      	cmp	r2, r3
 801879a:	d913      	bls.n	80187c4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801879c:	693b      	ldr	r3, [r7, #16]
 801879e:	689a      	ldr	r2, [r3, #8]
 80187a0:	693b      	ldr	r3, [r7, #16]
 80187a2:	68db      	ldr	r3, [r3, #12]
 80187a4:	1ad2      	subs	r2, r2, r3
 80187a6:	693b      	ldr	r3, [r7, #16]
 80187a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80187aa:	693b      	ldr	r3, [r7, #16]
 80187ac:	68da      	ldr	r2, [r3, #12]
 80187ae:	693b      	ldr	r3, [r7, #16]
 80187b0:	689b      	ldr	r3, [r3, #8]
 80187b2:	4293      	cmp	r3, r2
 80187b4:	bf28      	it	cs
 80187b6:	4613      	movcs	r3, r2
 80187b8:	461a      	mov	r2, r3
 80187ba:	6879      	ldr	r1, [r7, #4]
 80187bc:	68f8      	ldr	r0, [r7, #12]
 80187be:	f001 f839 	bl	8019834 <USBD_CtlContinueRx>
 80187c2:	e030      	b.n	8018826 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80187c4:	68fb      	ldr	r3, [r7, #12]
 80187c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80187ca:	b2db      	uxtb	r3, r3
 80187cc:	2b03      	cmp	r3, #3
 80187ce:	d10b      	bne.n	80187e8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80187d0:	68fb      	ldr	r3, [r7, #12]
 80187d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80187d6:	691b      	ldr	r3, [r3, #16]
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d005      	beq.n	80187e8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80187dc:	68fb      	ldr	r3, [r7, #12]
 80187de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80187e2:	691b      	ldr	r3, [r3, #16]
 80187e4:	68f8      	ldr	r0, [r7, #12]
 80187e6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80187e8:	68f8      	ldr	r0, [r7, #12]
 80187ea:	f001 f834 	bl	8019856 <USBD_CtlSendStatus>
 80187ee:	e01a      	b.n	8018826 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80187f0:	68fb      	ldr	r3, [r7, #12]
 80187f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80187f6:	b2db      	uxtb	r3, r3
 80187f8:	2b03      	cmp	r3, #3
 80187fa:	d114      	bne.n	8018826 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80187fc:	68fb      	ldr	r3, [r7, #12]
 80187fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018802:	699b      	ldr	r3, [r3, #24]
 8018804:	2b00      	cmp	r3, #0
 8018806:	d00e      	beq.n	8018826 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8018808:	68fb      	ldr	r3, [r7, #12]
 801880a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801880e:	699b      	ldr	r3, [r3, #24]
 8018810:	7afa      	ldrb	r2, [r7, #11]
 8018812:	4611      	mov	r1, r2
 8018814:	68f8      	ldr	r0, [r7, #12]
 8018816:	4798      	blx	r3
 8018818:	4603      	mov	r3, r0
 801881a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801881c:	7dfb      	ldrb	r3, [r7, #23]
 801881e:	2b00      	cmp	r3, #0
 8018820:	d001      	beq.n	8018826 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8018822:	7dfb      	ldrb	r3, [r7, #23]
 8018824:	e000      	b.n	8018828 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8018826:	2300      	movs	r3, #0
}
 8018828:	4618      	mov	r0, r3
 801882a:	3718      	adds	r7, #24
 801882c:	46bd      	mov	sp, r7
 801882e:	bd80      	pop	{r7, pc}

08018830 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8018830:	b580      	push	{r7, lr}
 8018832:	b086      	sub	sp, #24
 8018834:	af00      	add	r7, sp, #0
 8018836:	60f8      	str	r0, [r7, #12]
 8018838:	460b      	mov	r3, r1
 801883a:	607a      	str	r2, [r7, #4]
 801883c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801883e:	7afb      	ldrb	r3, [r7, #11]
 8018840:	2b00      	cmp	r3, #0
 8018842:	d16b      	bne.n	801891c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8018844:	68fb      	ldr	r3, [r7, #12]
 8018846:	3314      	adds	r3, #20
 8018848:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801884a:	68fb      	ldr	r3, [r7, #12]
 801884c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8018850:	2b02      	cmp	r3, #2
 8018852:	d156      	bne.n	8018902 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8018854:	693b      	ldr	r3, [r7, #16]
 8018856:	689a      	ldr	r2, [r3, #8]
 8018858:	693b      	ldr	r3, [r7, #16]
 801885a:	68db      	ldr	r3, [r3, #12]
 801885c:	429a      	cmp	r2, r3
 801885e:	d914      	bls.n	801888a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8018860:	693b      	ldr	r3, [r7, #16]
 8018862:	689a      	ldr	r2, [r3, #8]
 8018864:	693b      	ldr	r3, [r7, #16]
 8018866:	68db      	ldr	r3, [r3, #12]
 8018868:	1ad2      	subs	r2, r2, r3
 801886a:	693b      	ldr	r3, [r7, #16]
 801886c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801886e:	693b      	ldr	r3, [r7, #16]
 8018870:	689b      	ldr	r3, [r3, #8]
 8018872:	461a      	mov	r2, r3
 8018874:	6879      	ldr	r1, [r7, #4]
 8018876:	68f8      	ldr	r0, [r7, #12]
 8018878:	f000 ffae 	bl	80197d8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801887c:	2300      	movs	r3, #0
 801887e:	2200      	movs	r2, #0
 8018880:	2100      	movs	r1, #0
 8018882:	68f8      	ldr	r0, [r7, #12]
 8018884:	f001 fd60 	bl	801a348 <USBD_LL_PrepareReceive>
 8018888:	e03b      	b.n	8018902 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801888a:	693b      	ldr	r3, [r7, #16]
 801888c:	68da      	ldr	r2, [r3, #12]
 801888e:	693b      	ldr	r3, [r7, #16]
 8018890:	689b      	ldr	r3, [r3, #8]
 8018892:	429a      	cmp	r2, r3
 8018894:	d11c      	bne.n	80188d0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8018896:	693b      	ldr	r3, [r7, #16]
 8018898:	685a      	ldr	r2, [r3, #4]
 801889a:	693b      	ldr	r3, [r7, #16]
 801889c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801889e:	429a      	cmp	r2, r3
 80188a0:	d316      	bcc.n	80188d0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80188a2:	693b      	ldr	r3, [r7, #16]
 80188a4:	685a      	ldr	r2, [r3, #4]
 80188a6:	68fb      	ldr	r3, [r7, #12]
 80188a8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80188ac:	429a      	cmp	r2, r3
 80188ae:	d20f      	bcs.n	80188d0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80188b0:	2200      	movs	r2, #0
 80188b2:	2100      	movs	r1, #0
 80188b4:	68f8      	ldr	r0, [r7, #12]
 80188b6:	f000 ff8f 	bl	80197d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80188ba:	68fb      	ldr	r3, [r7, #12]
 80188bc:	2200      	movs	r2, #0
 80188be:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80188c2:	2300      	movs	r3, #0
 80188c4:	2200      	movs	r2, #0
 80188c6:	2100      	movs	r1, #0
 80188c8:	68f8      	ldr	r0, [r7, #12]
 80188ca:	f001 fd3d 	bl	801a348 <USBD_LL_PrepareReceive>
 80188ce:	e018      	b.n	8018902 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80188d0:	68fb      	ldr	r3, [r7, #12]
 80188d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80188d6:	b2db      	uxtb	r3, r3
 80188d8:	2b03      	cmp	r3, #3
 80188da:	d10b      	bne.n	80188f4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80188dc:	68fb      	ldr	r3, [r7, #12]
 80188de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80188e2:	68db      	ldr	r3, [r3, #12]
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	d005      	beq.n	80188f4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80188e8:	68fb      	ldr	r3, [r7, #12]
 80188ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80188ee:	68db      	ldr	r3, [r3, #12]
 80188f0:	68f8      	ldr	r0, [r7, #12]
 80188f2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80188f4:	2180      	movs	r1, #128	; 0x80
 80188f6:	68f8      	ldr	r0, [r7, #12]
 80188f8:	f001 fc20 	bl	801a13c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80188fc:	68f8      	ldr	r0, [r7, #12]
 80188fe:	f000 ffbd 	bl	801987c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8018902:	68fb      	ldr	r3, [r7, #12]
 8018904:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8018908:	2b01      	cmp	r3, #1
 801890a:	d122      	bne.n	8018952 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801890c:	68f8      	ldr	r0, [r7, #12]
 801890e:	f7ff fe98 	bl	8018642 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8018912:	68fb      	ldr	r3, [r7, #12]
 8018914:	2200      	movs	r2, #0
 8018916:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801891a:	e01a      	b.n	8018952 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801891c:	68fb      	ldr	r3, [r7, #12]
 801891e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018922:	b2db      	uxtb	r3, r3
 8018924:	2b03      	cmp	r3, #3
 8018926:	d114      	bne.n	8018952 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8018928:	68fb      	ldr	r3, [r7, #12]
 801892a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801892e:	695b      	ldr	r3, [r3, #20]
 8018930:	2b00      	cmp	r3, #0
 8018932:	d00e      	beq.n	8018952 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8018934:	68fb      	ldr	r3, [r7, #12]
 8018936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801893a:	695b      	ldr	r3, [r3, #20]
 801893c:	7afa      	ldrb	r2, [r7, #11]
 801893e:	4611      	mov	r1, r2
 8018940:	68f8      	ldr	r0, [r7, #12]
 8018942:	4798      	blx	r3
 8018944:	4603      	mov	r3, r0
 8018946:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8018948:	7dfb      	ldrb	r3, [r7, #23]
 801894a:	2b00      	cmp	r3, #0
 801894c:	d001      	beq.n	8018952 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801894e:	7dfb      	ldrb	r3, [r7, #23]
 8018950:	e000      	b.n	8018954 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8018952:	2300      	movs	r3, #0
}
 8018954:	4618      	mov	r0, r3
 8018956:	3718      	adds	r7, #24
 8018958:	46bd      	mov	sp, r7
 801895a:	bd80      	pop	{r7, pc}

0801895c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801895c:	b580      	push	{r7, lr}
 801895e:	b082      	sub	sp, #8
 8018960:	af00      	add	r7, sp, #0
 8018962:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	2201      	movs	r2, #1
 8018968:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	2200      	movs	r2, #0
 8018970:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	2200      	movs	r2, #0
 8018978:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	2200      	movs	r2, #0
 801897e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018988:	2b00      	cmp	r3, #0
 801898a:	d101      	bne.n	8018990 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 801898c:	2303      	movs	r3, #3
 801898e:	e02f      	b.n	80189f0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018996:	2b00      	cmp	r3, #0
 8018998:	d00f      	beq.n	80189ba <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80189a0:	685b      	ldr	r3, [r3, #4]
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d009      	beq.n	80189ba <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80189ac:	685b      	ldr	r3, [r3, #4]
 80189ae:	687a      	ldr	r2, [r7, #4]
 80189b0:	6852      	ldr	r2, [r2, #4]
 80189b2:	b2d2      	uxtb	r2, r2
 80189b4:	4611      	mov	r1, r2
 80189b6:	6878      	ldr	r0, [r7, #4]
 80189b8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80189ba:	2340      	movs	r3, #64	; 0x40
 80189bc:	2200      	movs	r2, #0
 80189be:	2100      	movs	r1, #0
 80189c0:	6878      	ldr	r0, [r7, #4]
 80189c2:	f001 fb47 	bl	801a054 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	2201      	movs	r2, #1
 80189ca:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	2240      	movs	r2, #64	; 0x40
 80189d2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80189d6:	2340      	movs	r3, #64	; 0x40
 80189d8:	2200      	movs	r2, #0
 80189da:	2180      	movs	r1, #128	; 0x80
 80189dc:	6878      	ldr	r0, [r7, #4]
 80189de:	f001 fb39 	bl	801a054 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	2201      	movs	r2, #1
 80189e6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	2240      	movs	r2, #64	; 0x40
 80189ec:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80189ee:	2300      	movs	r3, #0
}
 80189f0:	4618      	mov	r0, r3
 80189f2:	3708      	adds	r7, #8
 80189f4:	46bd      	mov	sp, r7
 80189f6:	bd80      	pop	{r7, pc}

080189f8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80189f8:	b480      	push	{r7}
 80189fa:	b083      	sub	sp, #12
 80189fc:	af00      	add	r7, sp, #0
 80189fe:	6078      	str	r0, [r7, #4]
 8018a00:	460b      	mov	r3, r1
 8018a02:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	78fa      	ldrb	r2, [r7, #3]
 8018a08:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8018a0a:	2300      	movs	r3, #0
}
 8018a0c:	4618      	mov	r0, r3
 8018a0e:	370c      	adds	r7, #12
 8018a10:	46bd      	mov	sp, r7
 8018a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a16:	4770      	bx	lr

08018a18 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8018a18:	b480      	push	{r7}
 8018a1a:	b083      	sub	sp, #12
 8018a1c:	af00      	add	r7, sp, #0
 8018a1e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018a26:	b2da      	uxtb	r2, r3
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	2204      	movs	r2, #4
 8018a32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8018a36:	2300      	movs	r3, #0
}
 8018a38:	4618      	mov	r0, r3
 8018a3a:	370c      	adds	r7, #12
 8018a3c:	46bd      	mov	sp, r7
 8018a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a42:	4770      	bx	lr

08018a44 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8018a44:	b480      	push	{r7}
 8018a46:	b083      	sub	sp, #12
 8018a48:	af00      	add	r7, sp, #0
 8018a4a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018a52:	b2db      	uxtb	r3, r3
 8018a54:	2b04      	cmp	r3, #4
 8018a56:	d106      	bne.n	8018a66 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8018a5e:	b2da      	uxtb	r2, r3
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8018a66:	2300      	movs	r3, #0
}
 8018a68:	4618      	mov	r0, r3
 8018a6a:	370c      	adds	r7, #12
 8018a6c:	46bd      	mov	sp, r7
 8018a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a72:	4770      	bx	lr

08018a74 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8018a74:	b580      	push	{r7, lr}
 8018a76:	b082      	sub	sp, #8
 8018a78:	af00      	add	r7, sp, #0
 8018a7a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d101      	bne.n	8018a8a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8018a86:	2303      	movs	r3, #3
 8018a88:	e012      	b.n	8018ab0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018a90:	b2db      	uxtb	r3, r3
 8018a92:	2b03      	cmp	r3, #3
 8018a94:	d10b      	bne.n	8018aae <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018a9c:	69db      	ldr	r3, [r3, #28]
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d005      	beq.n	8018aae <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018aa8:	69db      	ldr	r3, [r3, #28]
 8018aaa:	6878      	ldr	r0, [r7, #4]
 8018aac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018aae:	2300      	movs	r3, #0
}
 8018ab0:	4618      	mov	r0, r3
 8018ab2:	3708      	adds	r7, #8
 8018ab4:	46bd      	mov	sp, r7
 8018ab6:	bd80      	pop	{r7, pc}

08018ab8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8018ab8:	b580      	push	{r7, lr}
 8018aba:	b082      	sub	sp, #8
 8018abc:	af00      	add	r7, sp, #0
 8018abe:	6078      	str	r0, [r7, #4]
 8018ac0:	460b      	mov	r3, r1
 8018ac2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d101      	bne.n	8018ad2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8018ace:	2303      	movs	r3, #3
 8018ad0:	e014      	b.n	8018afc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018ad8:	b2db      	uxtb	r3, r3
 8018ada:	2b03      	cmp	r3, #3
 8018adc:	d10d      	bne.n	8018afa <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018ae4:	6a1b      	ldr	r3, [r3, #32]
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d007      	beq.n	8018afa <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018af0:	6a1b      	ldr	r3, [r3, #32]
 8018af2:	78fa      	ldrb	r2, [r7, #3]
 8018af4:	4611      	mov	r1, r2
 8018af6:	6878      	ldr	r0, [r7, #4]
 8018af8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018afa:	2300      	movs	r3, #0
}
 8018afc:	4618      	mov	r0, r3
 8018afe:	3708      	adds	r7, #8
 8018b00:	46bd      	mov	sp, r7
 8018b02:	bd80      	pop	{r7, pc}

08018b04 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8018b04:	b580      	push	{r7, lr}
 8018b06:	b082      	sub	sp, #8
 8018b08:	af00      	add	r7, sp, #0
 8018b0a:	6078      	str	r0, [r7, #4]
 8018b0c:	460b      	mov	r3, r1
 8018b0e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d101      	bne.n	8018b1e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8018b1a:	2303      	movs	r3, #3
 8018b1c:	e014      	b.n	8018b48 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018b24:	b2db      	uxtb	r3, r3
 8018b26:	2b03      	cmp	r3, #3
 8018b28:	d10d      	bne.n	8018b46 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d007      	beq.n	8018b46 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b3e:	78fa      	ldrb	r2, [r7, #3]
 8018b40:	4611      	mov	r1, r2
 8018b42:	6878      	ldr	r0, [r7, #4]
 8018b44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018b46:	2300      	movs	r3, #0
}
 8018b48:	4618      	mov	r0, r3
 8018b4a:	3708      	adds	r7, #8
 8018b4c:	46bd      	mov	sp, r7
 8018b4e:	bd80      	pop	{r7, pc}

08018b50 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8018b50:	b480      	push	{r7}
 8018b52:	b083      	sub	sp, #12
 8018b54:	af00      	add	r7, sp, #0
 8018b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8018b58:	2300      	movs	r3, #0
}
 8018b5a:	4618      	mov	r0, r3
 8018b5c:	370c      	adds	r7, #12
 8018b5e:	46bd      	mov	sp, r7
 8018b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b64:	4770      	bx	lr

08018b66 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8018b66:	b580      	push	{r7, lr}
 8018b68:	b082      	sub	sp, #8
 8018b6a:	af00      	add	r7, sp, #0
 8018b6c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	2201      	movs	r2, #1
 8018b72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	d009      	beq.n	8018b94 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018b86:	685b      	ldr	r3, [r3, #4]
 8018b88:	687a      	ldr	r2, [r7, #4]
 8018b8a:	6852      	ldr	r2, [r2, #4]
 8018b8c:	b2d2      	uxtb	r2, r2
 8018b8e:	4611      	mov	r1, r2
 8018b90:	6878      	ldr	r0, [r7, #4]
 8018b92:	4798      	blx	r3
  }

  return USBD_OK;
 8018b94:	2300      	movs	r3, #0
}
 8018b96:	4618      	mov	r0, r3
 8018b98:	3708      	adds	r7, #8
 8018b9a:	46bd      	mov	sp, r7
 8018b9c:	bd80      	pop	{r7, pc}

08018b9e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8018b9e:	b480      	push	{r7}
 8018ba0:	b087      	sub	sp, #28
 8018ba2:	af00      	add	r7, sp, #0
 8018ba4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8018baa:	697b      	ldr	r3, [r7, #20]
 8018bac:	781b      	ldrb	r3, [r3, #0]
 8018bae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8018bb0:	697b      	ldr	r3, [r7, #20]
 8018bb2:	3301      	adds	r3, #1
 8018bb4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8018bb6:	697b      	ldr	r3, [r7, #20]
 8018bb8:	781b      	ldrb	r3, [r3, #0]
 8018bba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8018bbc:	8a3b      	ldrh	r3, [r7, #16]
 8018bbe:	021b      	lsls	r3, r3, #8
 8018bc0:	b21a      	sxth	r2, r3
 8018bc2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018bc6:	4313      	orrs	r3, r2
 8018bc8:	b21b      	sxth	r3, r3
 8018bca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8018bcc:	89fb      	ldrh	r3, [r7, #14]
}
 8018bce:	4618      	mov	r0, r3
 8018bd0:	371c      	adds	r7, #28
 8018bd2:	46bd      	mov	sp, r7
 8018bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bd8:	4770      	bx	lr
	...

08018bdc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018bdc:	b580      	push	{r7, lr}
 8018bde:	b084      	sub	sp, #16
 8018be0:	af00      	add	r7, sp, #0
 8018be2:	6078      	str	r0, [r7, #4]
 8018be4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018be6:	2300      	movs	r3, #0
 8018be8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018bea:	683b      	ldr	r3, [r7, #0]
 8018bec:	781b      	ldrb	r3, [r3, #0]
 8018bee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018bf2:	2b40      	cmp	r3, #64	; 0x40
 8018bf4:	d005      	beq.n	8018c02 <USBD_StdDevReq+0x26>
 8018bf6:	2b40      	cmp	r3, #64	; 0x40
 8018bf8:	d853      	bhi.n	8018ca2 <USBD_StdDevReq+0xc6>
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d00b      	beq.n	8018c16 <USBD_StdDevReq+0x3a>
 8018bfe:	2b20      	cmp	r3, #32
 8018c00:	d14f      	bne.n	8018ca2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018c08:	689b      	ldr	r3, [r3, #8]
 8018c0a:	6839      	ldr	r1, [r7, #0]
 8018c0c:	6878      	ldr	r0, [r7, #4]
 8018c0e:	4798      	blx	r3
 8018c10:	4603      	mov	r3, r0
 8018c12:	73fb      	strb	r3, [r7, #15]
      break;
 8018c14:	e04a      	b.n	8018cac <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018c16:	683b      	ldr	r3, [r7, #0]
 8018c18:	785b      	ldrb	r3, [r3, #1]
 8018c1a:	2b09      	cmp	r3, #9
 8018c1c:	d83b      	bhi.n	8018c96 <USBD_StdDevReq+0xba>
 8018c1e:	a201      	add	r2, pc, #4	; (adr r2, 8018c24 <USBD_StdDevReq+0x48>)
 8018c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c24:	08018c79 	.word	0x08018c79
 8018c28:	08018c8d 	.word	0x08018c8d
 8018c2c:	08018c97 	.word	0x08018c97
 8018c30:	08018c83 	.word	0x08018c83
 8018c34:	08018c97 	.word	0x08018c97
 8018c38:	08018c57 	.word	0x08018c57
 8018c3c:	08018c4d 	.word	0x08018c4d
 8018c40:	08018c97 	.word	0x08018c97
 8018c44:	08018c6f 	.word	0x08018c6f
 8018c48:	08018c61 	.word	0x08018c61
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8018c4c:	6839      	ldr	r1, [r7, #0]
 8018c4e:	6878      	ldr	r0, [r7, #4]
 8018c50:	f000 f9de 	bl	8019010 <USBD_GetDescriptor>
          break;
 8018c54:	e024      	b.n	8018ca0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8018c56:	6839      	ldr	r1, [r7, #0]
 8018c58:	6878      	ldr	r0, [r7, #4]
 8018c5a:	f000 fb6d 	bl	8019338 <USBD_SetAddress>
          break;
 8018c5e:	e01f      	b.n	8018ca0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8018c60:	6839      	ldr	r1, [r7, #0]
 8018c62:	6878      	ldr	r0, [r7, #4]
 8018c64:	f000 fbac 	bl	80193c0 <USBD_SetConfig>
 8018c68:	4603      	mov	r3, r0
 8018c6a:	73fb      	strb	r3, [r7, #15]
          break;
 8018c6c:	e018      	b.n	8018ca0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8018c6e:	6839      	ldr	r1, [r7, #0]
 8018c70:	6878      	ldr	r0, [r7, #4]
 8018c72:	f000 fc4b 	bl	801950c <USBD_GetConfig>
          break;
 8018c76:	e013      	b.n	8018ca0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8018c78:	6839      	ldr	r1, [r7, #0]
 8018c7a:	6878      	ldr	r0, [r7, #4]
 8018c7c:	f000 fc7c 	bl	8019578 <USBD_GetStatus>
          break;
 8018c80:	e00e      	b.n	8018ca0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8018c82:	6839      	ldr	r1, [r7, #0]
 8018c84:	6878      	ldr	r0, [r7, #4]
 8018c86:	f000 fcab 	bl	80195e0 <USBD_SetFeature>
          break;
 8018c8a:	e009      	b.n	8018ca0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8018c8c:	6839      	ldr	r1, [r7, #0]
 8018c8e:	6878      	ldr	r0, [r7, #4]
 8018c90:	f000 fcba 	bl	8019608 <USBD_ClrFeature>
          break;
 8018c94:	e004      	b.n	8018ca0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8018c96:	6839      	ldr	r1, [r7, #0]
 8018c98:	6878      	ldr	r0, [r7, #4]
 8018c9a:	f000 fd11 	bl	80196c0 <USBD_CtlError>
          break;
 8018c9e:	bf00      	nop
      }
      break;
 8018ca0:	e004      	b.n	8018cac <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8018ca2:	6839      	ldr	r1, [r7, #0]
 8018ca4:	6878      	ldr	r0, [r7, #4]
 8018ca6:	f000 fd0b 	bl	80196c0 <USBD_CtlError>
      break;
 8018caa:	bf00      	nop
  }

  return ret;
 8018cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8018cae:	4618      	mov	r0, r3
 8018cb0:	3710      	adds	r7, #16
 8018cb2:	46bd      	mov	sp, r7
 8018cb4:	bd80      	pop	{r7, pc}
 8018cb6:	bf00      	nop

08018cb8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018cb8:	b580      	push	{r7, lr}
 8018cba:	b084      	sub	sp, #16
 8018cbc:	af00      	add	r7, sp, #0
 8018cbe:	6078      	str	r0, [r7, #4]
 8018cc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018cc2:	2300      	movs	r3, #0
 8018cc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018cc6:	683b      	ldr	r3, [r7, #0]
 8018cc8:	781b      	ldrb	r3, [r3, #0]
 8018cca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018cce:	2b40      	cmp	r3, #64	; 0x40
 8018cd0:	d005      	beq.n	8018cde <USBD_StdItfReq+0x26>
 8018cd2:	2b40      	cmp	r3, #64	; 0x40
 8018cd4:	d82f      	bhi.n	8018d36 <USBD_StdItfReq+0x7e>
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d001      	beq.n	8018cde <USBD_StdItfReq+0x26>
 8018cda:	2b20      	cmp	r3, #32
 8018cdc:	d12b      	bne.n	8018d36 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018ce4:	b2db      	uxtb	r3, r3
 8018ce6:	3b01      	subs	r3, #1
 8018ce8:	2b02      	cmp	r3, #2
 8018cea:	d81d      	bhi.n	8018d28 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8018cec:	683b      	ldr	r3, [r7, #0]
 8018cee:	889b      	ldrh	r3, [r3, #4]
 8018cf0:	b2db      	uxtb	r3, r3
 8018cf2:	2b01      	cmp	r3, #1
 8018cf4:	d813      	bhi.n	8018d1e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018cfc:	689b      	ldr	r3, [r3, #8]
 8018cfe:	6839      	ldr	r1, [r7, #0]
 8018d00:	6878      	ldr	r0, [r7, #4]
 8018d02:	4798      	blx	r3
 8018d04:	4603      	mov	r3, r0
 8018d06:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8018d08:	683b      	ldr	r3, [r7, #0]
 8018d0a:	88db      	ldrh	r3, [r3, #6]
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d110      	bne.n	8018d32 <USBD_StdItfReq+0x7a>
 8018d10:	7bfb      	ldrb	r3, [r7, #15]
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d10d      	bne.n	8018d32 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8018d16:	6878      	ldr	r0, [r7, #4]
 8018d18:	f000 fd9d 	bl	8019856 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8018d1c:	e009      	b.n	8018d32 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8018d1e:	6839      	ldr	r1, [r7, #0]
 8018d20:	6878      	ldr	r0, [r7, #4]
 8018d22:	f000 fccd 	bl	80196c0 <USBD_CtlError>
          break;
 8018d26:	e004      	b.n	8018d32 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8018d28:	6839      	ldr	r1, [r7, #0]
 8018d2a:	6878      	ldr	r0, [r7, #4]
 8018d2c:	f000 fcc8 	bl	80196c0 <USBD_CtlError>
          break;
 8018d30:	e000      	b.n	8018d34 <USBD_StdItfReq+0x7c>
          break;
 8018d32:	bf00      	nop
      }
      break;
 8018d34:	e004      	b.n	8018d40 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8018d36:	6839      	ldr	r1, [r7, #0]
 8018d38:	6878      	ldr	r0, [r7, #4]
 8018d3a:	f000 fcc1 	bl	80196c0 <USBD_CtlError>
      break;
 8018d3e:	bf00      	nop
  }

  return ret;
 8018d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8018d42:	4618      	mov	r0, r3
 8018d44:	3710      	adds	r7, #16
 8018d46:	46bd      	mov	sp, r7
 8018d48:	bd80      	pop	{r7, pc}

08018d4a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018d4a:	b580      	push	{r7, lr}
 8018d4c:	b084      	sub	sp, #16
 8018d4e:	af00      	add	r7, sp, #0
 8018d50:	6078      	str	r0, [r7, #4]
 8018d52:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8018d54:	2300      	movs	r3, #0
 8018d56:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8018d58:	683b      	ldr	r3, [r7, #0]
 8018d5a:	889b      	ldrh	r3, [r3, #4]
 8018d5c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018d5e:	683b      	ldr	r3, [r7, #0]
 8018d60:	781b      	ldrb	r3, [r3, #0]
 8018d62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018d66:	2b40      	cmp	r3, #64	; 0x40
 8018d68:	d007      	beq.n	8018d7a <USBD_StdEPReq+0x30>
 8018d6a:	2b40      	cmp	r3, #64	; 0x40
 8018d6c:	f200 8145 	bhi.w	8018ffa <USBD_StdEPReq+0x2b0>
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d00c      	beq.n	8018d8e <USBD_StdEPReq+0x44>
 8018d74:	2b20      	cmp	r3, #32
 8018d76:	f040 8140 	bne.w	8018ffa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018d80:	689b      	ldr	r3, [r3, #8]
 8018d82:	6839      	ldr	r1, [r7, #0]
 8018d84:	6878      	ldr	r0, [r7, #4]
 8018d86:	4798      	blx	r3
 8018d88:	4603      	mov	r3, r0
 8018d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8018d8c:	e13a      	b.n	8019004 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018d8e:	683b      	ldr	r3, [r7, #0]
 8018d90:	785b      	ldrb	r3, [r3, #1]
 8018d92:	2b03      	cmp	r3, #3
 8018d94:	d007      	beq.n	8018da6 <USBD_StdEPReq+0x5c>
 8018d96:	2b03      	cmp	r3, #3
 8018d98:	f300 8129 	bgt.w	8018fee <USBD_StdEPReq+0x2a4>
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d07f      	beq.n	8018ea0 <USBD_StdEPReq+0x156>
 8018da0:	2b01      	cmp	r3, #1
 8018da2:	d03c      	beq.n	8018e1e <USBD_StdEPReq+0xd4>
 8018da4:	e123      	b.n	8018fee <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018dac:	b2db      	uxtb	r3, r3
 8018dae:	2b02      	cmp	r3, #2
 8018db0:	d002      	beq.n	8018db8 <USBD_StdEPReq+0x6e>
 8018db2:	2b03      	cmp	r3, #3
 8018db4:	d016      	beq.n	8018de4 <USBD_StdEPReq+0x9a>
 8018db6:	e02c      	b.n	8018e12 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018db8:	7bbb      	ldrb	r3, [r7, #14]
 8018dba:	2b00      	cmp	r3, #0
 8018dbc:	d00d      	beq.n	8018dda <USBD_StdEPReq+0x90>
 8018dbe:	7bbb      	ldrb	r3, [r7, #14]
 8018dc0:	2b80      	cmp	r3, #128	; 0x80
 8018dc2:	d00a      	beq.n	8018dda <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8018dc4:	7bbb      	ldrb	r3, [r7, #14]
 8018dc6:	4619      	mov	r1, r3
 8018dc8:	6878      	ldr	r0, [r7, #4]
 8018dca:	f001 f9b7 	bl	801a13c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8018dce:	2180      	movs	r1, #128	; 0x80
 8018dd0:	6878      	ldr	r0, [r7, #4]
 8018dd2:	f001 f9b3 	bl	801a13c <USBD_LL_StallEP>
 8018dd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8018dd8:	e020      	b.n	8018e1c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8018dda:	6839      	ldr	r1, [r7, #0]
 8018ddc:	6878      	ldr	r0, [r7, #4]
 8018dde:	f000 fc6f 	bl	80196c0 <USBD_CtlError>
              break;
 8018de2:	e01b      	b.n	8018e1c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8018de4:	683b      	ldr	r3, [r7, #0]
 8018de6:	885b      	ldrh	r3, [r3, #2]
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	d10e      	bne.n	8018e0a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8018dec:	7bbb      	ldrb	r3, [r7, #14]
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	d00b      	beq.n	8018e0a <USBD_StdEPReq+0xc0>
 8018df2:	7bbb      	ldrb	r3, [r7, #14]
 8018df4:	2b80      	cmp	r3, #128	; 0x80
 8018df6:	d008      	beq.n	8018e0a <USBD_StdEPReq+0xc0>
 8018df8:	683b      	ldr	r3, [r7, #0]
 8018dfa:	88db      	ldrh	r3, [r3, #6]
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	d104      	bne.n	8018e0a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8018e00:	7bbb      	ldrb	r3, [r7, #14]
 8018e02:	4619      	mov	r1, r3
 8018e04:	6878      	ldr	r0, [r7, #4]
 8018e06:	f001 f999 	bl	801a13c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8018e0a:	6878      	ldr	r0, [r7, #4]
 8018e0c:	f000 fd23 	bl	8019856 <USBD_CtlSendStatus>

              break;
 8018e10:	e004      	b.n	8018e1c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8018e12:	6839      	ldr	r1, [r7, #0]
 8018e14:	6878      	ldr	r0, [r7, #4]
 8018e16:	f000 fc53 	bl	80196c0 <USBD_CtlError>
              break;
 8018e1a:	bf00      	nop
          }
          break;
 8018e1c:	e0ec      	b.n	8018ff8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018e24:	b2db      	uxtb	r3, r3
 8018e26:	2b02      	cmp	r3, #2
 8018e28:	d002      	beq.n	8018e30 <USBD_StdEPReq+0xe6>
 8018e2a:	2b03      	cmp	r3, #3
 8018e2c:	d016      	beq.n	8018e5c <USBD_StdEPReq+0x112>
 8018e2e:	e030      	b.n	8018e92 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018e30:	7bbb      	ldrb	r3, [r7, #14]
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d00d      	beq.n	8018e52 <USBD_StdEPReq+0x108>
 8018e36:	7bbb      	ldrb	r3, [r7, #14]
 8018e38:	2b80      	cmp	r3, #128	; 0x80
 8018e3a:	d00a      	beq.n	8018e52 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8018e3c:	7bbb      	ldrb	r3, [r7, #14]
 8018e3e:	4619      	mov	r1, r3
 8018e40:	6878      	ldr	r0, [r7, #4]
 8018e42:	f001 f97b 	bl	801a13c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8018e46:	2180      	movs	r1, #128	; 0x80
 8018e48:	6878      	ldr	r0, [r7, #4]
 8018e4a:	f001 f977 	bl	801a13c <USBD_LL_StallEP>
 8018e4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8018e50:	e025      	b.n	8018e9e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8018e52:	6839      	ldr	r1, [r7, #0]
 8018e54:	6878      	ldr	r0, [r7, #4]
 8018e56:	f000 fc33 	bl	80196c0 <USBD_CtlError>
              break;
 8018e5a:	e020      	b.n	8018e9e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8018e5c:	683b      	ldr	r3, [r7, #0]
 8018e5e:	885b      	ldrh	r3, [r3, #2]
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	d11b      	bne.n	8018e9c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8018e64:	7bbb      	ldrb	r3, [r7, #14]
 8018e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d004      	beq.n	8018e78 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8018e6e:	7bbb      	ldrb	r3, [r7, #14]
 8018e70:	4619      	mov	r1, r3
 8018e72:	6878      	ldr	r0, [r7, #4]
 8018e74:	f001 f998 	bl	801a1a8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8018e78:	6878      	ldr	r0, [r7, #4]
 8018e7a:	f000 fcec 	bl	8019856 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018e84:	689b      	ldr	r3, [r3, #8]
 8018e86:	6839      	ldr	r1, [r7, #0]
 8018e88:	6878      	ldr	r0, [r7, #4]
 8018e8a:	4798      	blx	r3
 8018e8c:	4603      	mov	r3, r0
 8018e8e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8018e90:	e004      	b.n	8018e9c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8018e92:	6839      	ldr	r1, [r7, #0]
 8018e94:	6878      	ldr	r0, [r7, #4]
 8018e96:	f000 fc13 	bl	80196c0 <USBD_CtlError>
              break;
 8018e9a:	e000      	b.n	8018e9e <USBD_StdEPReq+0x154>
              break;
 8018e9c:	bf00      	nop
          }
          break;
 8018e9e:	e0ab      	b.n	8018ff8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018ea6:	b2db      	uxtb	r3, r3
 8018ea8:	2b02      	cmp	r3, #2
 8018eaa:	d002      	beq.n	8018eb2 <USBD_StdEPReq+0x168>
 8018eac:	2b03      	cmp	r3, #3
 8018eae:	d032      	beq.n	8018f16 <USBD_StdEPReq+0x1cc>
 8018eb0:	e097      	b.n	8018fe2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018eb2:	7bbb      	ldrb	r3, [r7, #14]
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d007      	beq.n	8018ec8 <USBD_StdEPReq+0x17e>
 8018eb8:	7bbb      	ldrb	r3, [r7, #14]
 8018eba:	2b80      	cmp	r3, #128	; 0x80
 8018ebc:	d004      	beq.n	8018ec8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8018ebe:	6839      	ldr	r1, [r7, #0]
 8018ec0:	6878      	ldr	r0, [r7, #4]
 8018ec2:	f000 fbfd 	bl	80196c0 <USBD_CtlError>
                break;
 8018ec6:	e091      	b.n	8018fec <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018ec8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	da0b      	bge.n	8018ee8 <USBD_StdEPReq+0x19e>
 8018ed0:	7bbb      	ldrb	r3, [r7, #14]
 8018ed2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018ed6:	4613      	mov	r3, r2
 8018ed8:	009b      	lsls	r3, r3, #2
 8018eda:	4413      	add	r3, r2
 8018edc:	009b      	lsls	r3, r3, #2
 8018ede:	3310      	adds	r3, #16
 8018ee0:	687a      	ldr	r2, [r7, #4]
 8018ee2:	4413      	add	r3, r2
 8018ee4:	3304      	adds	r3, #4
 8018ee6:	e00b      	b.n	8018f00 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8018ee8:	7bbb      	ldrb	r3, [r7, #14]
 8018eea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018eee:	4613      	mov	r3, r2
 8018ef0:	009b      	lsls	r3, r3, #2
 8018ef2:	4413      	add	r3, r2
 8018ef4:	009b      	lsls	r3, r3, #2
 8018ef6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8018efa:	687a      	ldr	r2, [r7, #4]
 8018efc:	4413      	add	r3, r2
 8018efe:	3304      	adds	r3, #4
 8018f00:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8018f02:	68bb      	ldr	r3, [r7, #8]
 8018f04:	2200      	movs	r2, #0
 8018f06:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8018f08:	68bb      	ldr	r3, [r7, #8]
 8018f0a:	2202      	movs	r2, #2
 8018f0c:	4619      	mov	r1, r3
 8018f0e:	6878      	ldr	r0, [r7, #4]
 8018f10:	f000 fc47 	bl	80197a2 <USBD_CtlSendData>
              break;
 8018f14:	e06a      	b.n	8018fec <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8018f16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	da11      	bge.n	8018f42 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8018f1e:	7bbb      	ldrb	r3, [r7, #14]
 8018f20:	f003 020f 	and.w	r2, r3, #15
 8018f24:	6879      	ldr	r1, [r7, #4]
 8018f26:	4613      	mov	r3, r2
 8018f28:	009b      	lsls	r3, r3, #2
 8018f2a:	4413      	add	r3, r2
 8018f2c:	009b      	lsls	r3, r3, #2
 8018f2e:	440b      	add	r3, r1
 8018f30:	3324      	adds	r3, #36	; 0x24
 8018f32:	881b      	ldrh	r3, [r3, #0]
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	d117      	bne.n	8018f68 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8018f38:	6839      	ldr	r1, [r7, #0]
 8018f3a:	6878      	ldr	r0, [r7, #4]
 8018f3c:	f000 fbc0 	bl	80196c0 <USBD_CtlError>
                  break;
 8018f40:	e054      	b.n	8018fec <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8018f42:	7bbb      	ldrb	r3, [r7, #14]
 8018f44:	f003 020f 	and.w	r2, r3, #15
 8018f48:	6879      	ldr	r1, [r7, #4]
 8018f4a:	4613      	mov	r3, r2
 8018f4c:	009b      	lsls	r3, r3, #2
 8018f4e:	4413      	add	r3, r2
 8018f50:	009b      	lsls	r3, r3, #2
 8018f52:	440b      	add	r3, r1
 8018f54:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8018f58:	881b      	ldrh	r3, [r3, #0]
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d104      	bne.n	8018f68 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8018f5e:	6839      	ldr	r1, [r7, #0]
 8018f60:	6878      	ldr	r0, [r7, #4]
 8018f62:	f000 fbad 	bl	80196c0 <USBD_CtlError>
                  break;
 8018f66:	e041      	b.n	8018fec <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018f68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	da0b      	bge.n	8018f88 <USBD_StdEPReq+0x23e>
 8018f70:	7bbb      	ldrb	r3, [r7, #14]
 8018f72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018f76:	4613      	mov	r3, r2
 8018f78:	009b      	lsls	r3, r3, #2
 8018f7a:	4413      	add	r3, r2
 8018f7c:	009b      	lsls	r3, r3, #2
 8018f7e:	3310      	adds	r3, #16
 8018f80:	687a      	ldr	r2, [r7, #4]
 8018f82:	4413      	add	r3, r2
 8018f84:	3304      	adds	r3, #4
 8018f86:	e00b      	b.n	8018fa0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8018f88:	7bbb      	ldrb	r3, [r7, #14]
 8018f8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018f8e:	4613      	mov	r3, r2
 8018f90:	009b      	lsls	r3, r3, #2
 8018f92:	4413      	add	r3, r2
 8018f94:	009b      	lsls	r3, r3, #2
 8018f96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8018f9a:	687a      	ldr	r2, [r7, #4]
 8018f9c:	4413      	add	r3, r2
 8018f9e:	3304      	adds	r3, #4
 8018fa0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8018fa2:	7bbb      	ldrb	r3, [r7, #14]
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d002      	beq.n	8018fae <USBD_StdEPReq+0x264>
 8018fa8:	7bbb      	ldrb	r3, [r7, #14]
 8018faa:	2b80      	cmp	r3, #128	; 0x80
 8018fac:	d103      	bne.n	8018fb6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8018fae:	68bb      	ldr	r3, [r7, #8]
 8018fb0:	2200      	movs	r2, #0
 8018fb2:	601a      	str	r2, [r3, #0]
 8018fb4:	e00e      	b.n	8018fd4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8018fb6:	7bbb      	ldrb	r3, [r7, #14]
 8018fb8:	4619      	mov	r1, r3
 8018fba:	6878      	ldr	r0, [r7, #4]
 8018fbc:	f001 f92a 	bl	801a214 <USBD_LL_IsStallEP>
 8018fc0:	4603      	mov	r3, r0
 8018fc2:	2b00      	cmp	r3, #0
 8018fc4:	d003      	beq.n	8018fce <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8018fc6:	68bb      	ldr	r3, [r7, #8]
 8018fc8:	2201      	movs	r2, #1
 8018fca:	601a      	str	r2, [r3, #0]
 8018fcc:	e002      	b.n	8018fd4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8018fce:	68bb      	ldr	r3, [r7, #8]
 8018fd0:	2200      	movs	r2, #0
 8018fd2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8018fd4:	68bb      	ldr	r3, [r7, #8]
 8018fd6:	2202      	movs	r2, #2
 8018fd8:	4619      	mov	r1, r3
 8018fda:	6878      	ldr	r0, [r7, #4]
 8018fdc:	f000 fbe1 	bl	80197a2 <USBD_CtlSendData>
              break;
 8018fe0:	e004      	b.n	8018fec <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8018fe2:	6839      	ldr	r1, [r7, #0]
 8018fe4:	6878      	ldr	r0, [r7, #4]
 8018fe6:	f000 fb6b 	bl	80196c0 <USBD_CtlError>
              break;
 8018fea:	bf00      	nop
          }
          break;
 8018fec:	e004      	b.n	8018ff8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8018fee:	6839      	ldr	r1, [r7, #0]
 8018ff0:	6878      	ldr	r0, [r7, #4]
 8018ff2:	f000 fb65 	bl	80196c0 <USBD_CtlError>
          break;
 8018ff6:	bf00      	nop
      }
      break;
 8018ff8:	e004      	b.n	8019004 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8018ffa:	6839      	ldr	r1, [r7, #0]
 8018ffc:	6878      	ldr	r0, [r7, #4]
 8018ffe:	f000 fb5f 	bl	80196c0 <USBD_CtlError>
      break;
 8019002:	bf00      	nop
  }

  return ret;
 8019004:	7bfb      	ldrb	r3, [r7, #15]
}
 8019006:	4618      	mov	r0, r3
 8019008:	3710      	adds	r7, #16
 801900a:	46bd      	mov	sp, r7
 801900c:	bd80      	pop	{r7, pc}
	...

08019010 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019010:	b580      	push	{r7, lr}
 8019012:	b084      	sub	sp, #16
 8019014:	af00      	add	r7, sp, #0
 8019016:	6078      	str	r0, [r7, #4]
 8019018:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801901a:	2300      	movs	r3, #0
 801901c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801901e:	2300      	movs	r3, #0
 8019020:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8019022:	2300      	movs	r3, #0
 8019024:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8019026:	683b      	ldr	r3, [r7, #0]
 8019028:	885b      	ldrh	r3, [r3, #2]
 801902a:	0a1b      	lsrs	r3, r3, #8
 801902c:	b29b      	uxth	r3, r3
 801902e:	3b01      	subs	r3, #1
 8019030:	2b0e      	cmp	r3, #14
 8019032:	f200 8152 	bhi.w	80192da <USBD_GetDescriptor+0x2ca>
 8019036:	a201      	add	r2, pc, #4	; (adr r2, 801903c <USBD_GetDescriptor+0x2c>)
 8019038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801903c:	080190ad 	.word	0x080190ad
 8019040:	080190c5 	.word	0x080190c5
 8019044:	08019105 	.word	0x08019105
 8019048:	080192db 	.word	0x080192db
 801904c:	080192db 	.word	0x080192db
 8019050:	0801927b 	.word	0x0801927b
 8019054:	080192a7 	.word	0x080192a7
 8019058:	080192db 	.word	0x080192db
 801905c:	080192db 	.word	0x080192db
 8019060:	080192db 	.word	0x080192db
 8019064:	080192db 	.word	0x080192db
 8019068:	080192db 	.word	0x080192db
 801906c:	080192db 	.word	0x080192db
 8019070:	080192db 	.word	0x080192db
 8019074:	08019079 	.word	0x08019079
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801907e:	69db      	ldr	r3, [r3, #28]
 8019080:	2b00      	cmp	r3, #0
 8019082:	d00b      	beq.n	801909c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801908a:	69db      	ldr	r3, [r3, #28]
 801908c:	687a      	ldr	r2, [r7, #4]
 801908e:	7c12      	ldrb	r2, [r2, #16]
 8019090:	f107 0108 	add.w	r1, r7, #8
 8019094:	4610      	mov	r0, r2
 8019096:	4798      	blx	r3
 8019098:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801909a:	e126      	b.n	80192ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801909c:	6839      	ldr	r1, [r7, #0]
 801909e:	6878      	ldr	r0, [r7, #4]
 80190a0:	f000 fb0e 	bl	80196c0 <USBD_CtlError>
        err++;
 80190a4:	7afb      	ldrb	r3, [r7, #11]
 80190a6:	3301      	adds	r3, #1
 80190a8:	72fb      	strb	r3, [r7, #11]
      break;
 80190aa:	e11e      	b.n	80192ea <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80190b2:	681b      	ldr	r3, [r3, #0]
 80190b4:	687a      	ldr	r2, [r7, #4]
 80190b6:	7c12      	ldrb	r2, [r2, #16]
 80190b8:	f107 0108 	add.w	r1, r7, #8
 80190bc:	4610      	mov	r0, r2
 80190be:	4798      	blx	r3
 80190c0:	60f8      	str	r0, [r7, #12]
      break;
 80190c2:	e112      	b.n	80192ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	7c1b      	ldrb	r3, [r3, #16]
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	d10d      	bne.n	80190e8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80190d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80190d4:	f107 0208 	add.w	r2, r7, #8
 80190d8:	4610      	mov	r0, r2
 80190da:	4798      	blx	r3
 80190dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80190de:	68fb      	ldr	r3, [r7, #12]
 80190e0:	3301      	adds	r3, #1
 80190e2:	2202      	movs	r2, #2
 80190e4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80190e6:	e100      	b.n	80192ea <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80190ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190f0:	f107 0208 	add.w	r2, r7, #8
 80190f4:	4610      	mov	r0, r2
 80190f6:	4798      	blx	r3
 80190f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80190fa:	68fb      	ldr	r3, [r7, #12]
 80190fc:	3301      	adds	r3, #1
 80190fe:	2202      	movs	r2, #2
 8019100:	701a      	strb	r2, [r3, #0]
      break;
 8019102:	e0f2      	b.n	80192ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8019104:	683b      	ldr	r3, [r7, #0]
 8019106:	885b      	ldrh	r3, [r3, #2]
 8019108:	b2db      	uxtb	r3, r3
 801910a:	2b05      	cmp	r3, #5
 801910c:	f200 80ac 	bhi.w	8019268 <USBD_GetDescriptor+0x258>
 8019110:	a201      	add	r2, pc, #4	; (adr r2, 8019118 <USBD_GetDescriptor+0x108>)
 8019112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019116:	bf00      	nop
 8019118:	08019131 	.word	0x08019131
 801911c:	08019165 	.word	0x08019165
 8019120:	08019199 	.word	0x08019199
 8019124:	080191cd 	.word	0x080191cd
 8019128:	08019201 	.word	0x08019201
 801912c:	08019235 	.word	0x08019235
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019136:	685b      	ldr	r3, [r3, #4]
 8019138:	2b00      	cmp	r3, #0
 801913a:	d00b      	beq.n	8019154 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019142:	685b      	ldr	r3, [r3, #4]
 8019144:	687a      	ldr	r2, [r7, #4]
 8019146:	7c12      	ldrb	r2, [r2, #16]
 8019148:	f107 0108 	add.w	r1, r7, #8
 801914c:	4610      	mov	r0, r2
 801914e:	4798      	blx	r3
 8019150:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8019152:	e091      	b.n	8019278 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8019154:	6839      	ldr	r1, [r7, #0]
 8019156:	6878      	ldr	r0, [r7, #4]
 8019158:	f000 fab2 	bl	80196c0 <USBD_CtlError>
            err++;
 801915c:	7afb      	ldrb	r3, [r7, #11]
 801915e:	3301      	adds	r3, #1
 8019160:	72fb      	strb	r3, [r7, #11]
          break;
 8019162:	e089      	b.n	8019278 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801916a:	689b      	ldr	r3, [r3, #8]
 801916c:	2b00      	cmp	r3, #0
 801916e:	d00b      	beq.n	8019188 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019176:	689b      	ldr	r3, [r3, #8]
 8019178:	687a      	ldr	r2, [r7, #4]
 801917a:	7c12      	ldrb	r2, [r2, #16]
 801917c:	f107 0108 	add.w	r1, r7, #8
 8019180:	4610      	mov	r0, r2
 8019182:	4798      	blx	r3
 8019184:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8019186:	e077      	b.n	8019278 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8019188:	6839      	ldr	r1, [r7, #0]
 801918a:	6878      	ldr	r0, [r7, #4]
 801918c:	f000 fa98 	bl	80196c0 <USBD_CtlError>
            err++;
 8019190:	7afb      	ldrb	r3, [r7, #11]
 8019192:	3301      	adds	r3, #1
 8019194:	72fb      	strb	r3, [r7, #11]
          break;
 8019196:	e06f      	b.n	8019278 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801919e:	68db      	ldr	r3, [r3, #12]
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	d00b      	beq.n	80191bc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80191a4:	687b      	ldr	r3, [r7, #4]
 80191a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80191aa:	68db      	ldr	r3, [r3, #12]
 80191ac:	687a      	ldr	r2, [r7, #4]
 80191ae:	7c12      	ldrb	r2, [r2, #16]
 80191b0:	f107 0108 	add.w	r1, r7, #8
 80191b4:	4610      	mov	r0, r2
 80191b6:	4798      	blx	r3
 80191b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80191ba:	e05d      	b.n	8019278 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80191bc:	6839      	ldr	r1, [r7, #0]
 80191be:	6878      	ldr	r0, [r7, #4]
 80191c0:	f000 fa7e 	bl	80196c0 <USBD_CtlError>
            err++;
 80191c4:	7afb      	ldrb	r3, [r7, #11]
 80191c6:	3301      	adds	r3, #1
 80191c8:	72fb      	strb	r3, [r7, #11]
          break;
 80191ca:	e055      	b.n	8019278 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80191d2:	691b      	ldr	r3, [r3, #16]
 80191d4:	2b00      	cmp	r3, #0
 80191d6:	d00b      	beq.n	80191f0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80191de:	691b      	ldr	r3, [r3, #16]
 80191e0:	687a      	ldr	r2, [r7, #4]
 80191e2:	7c12      	ldrb	r2, [r2, #16]
 80191e4:	f107 0108 	add.w	r1, r7, #8
 80191e8:	4610      	mov	r0, r2
 80191ea:	4798      	blx	r3
 80191ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80191ee:	e043      	b.n	8019278 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80191f0:	6839      	ldr	r1, [r7, #0]
 80191f2:	6878      	ldr	r0, [r7, #4]
 80191f4:	f000 fa64 	bl	80196c0 <USBD_CtlError>
            err++;
 80191f8:	7afb      	ldrb	r3, [r7, #11]
 80191fa:	3301      	adds	r3, #1
 80191fc:	72fb      	strb	r3, [r7, #11]
          break;
 80191fe:	e03b      	b.n	8019278 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019206:	695b      	ldr	r3, [r3, #20]
 8019208:	2b00      	cmp	r3, #0
 801920a:	d00b      	beq.n	8019224 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019212:	695b      	ldr	r3, [r3, #20]
 8019214:	687a      	ldr	r2, [r7, #4]
 8019216:	7c12      	ldrb	r2, [r2, #16]
 8019218:	f107 0108 	add.w	r1, r7, #8
 801921c:	4610      	mov	r0, r2
 801921e:	4798      	blx	r3
 8019220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8019222:	e029      	b.n	8019278 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8019224:	6839      	ldr	r1, [r7, #0]
 8019226:	6878      	ldr	r0, [r7, #4]
 8019228:	f000 fa4a 	bl	80196c0 <USBD_CtlError>
            err++;
 801922c:	7afb      	ldrb	r3, [r7, #11]
 801922e:	3301      	adds	r3, #1
 8019230:	72fb      	strb	r3, [r7, #11]
          break;
 8019232:	e021      	b.n	8019278 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801923a:	699b      	ldr	r3, [r3, #24]
 801923c:	2b00      	cmp	r3, #0
 801923e:	d00b      	beq.n	8019258 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019246:	699b      	ldr	r3, [r3, #24]
 8019248:	687a      	ldr	r2, [r7, #4]
 801924a:	7c12      	ldrb	r2, [r2, #16]
 801924c:	f107 0108 	add.w	r1, r7, #8
 8019250:	4610      	mov	r0, r2
 8019252:	4798      	blx	r3
 8019254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8019256:	e00f      	b.n	8019278 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8019258:	6839      	ldr	r1, [r7, #0]
 801925a:	6878      	ldr	r0, [r7, #4]
 801925c:	f000 fa30 	bl	80196c0 <USBD_CtlError>
            err++;
 8019260:	7afb      	ldrb	r3, [r7, #11]
 8019262:	3301      	adds	r3, #1
 8019264:	72fb      	strb	r3, [r7, #11]
          break;
 8019266:	e007      	b.n	8019278 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8019268:	6839      	ldr	r1, [r7, #0]
 801926a:	6878      	ldr	r0, [r7, #4]
 801926c:	f000 fa28 	bl	80196c0 <USBD_CtlError>
          err++;
 8019270:	7afb      	ldrb	r3, [r7, #11]
 8019272:	3301      	adds	r3, #1
 8019274:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8019276:	bf00      	nop
      }
      break;
 8019278:	e037      	b.n	80192ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	7c1b      	ldrb	r3, [r3, #16]
 801927e:	2b00      	cmp	r3, #0
 8019280:	d109      	bne.n	8019296 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801928a:	f107 0208 	add.w	r2, r7, #8
 801928e:	4610      	mov	r0, r2
 8019290:	4798      	blx	r3
 8019292:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8019294:	e029      	b.n	80192ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8019296:	6839      	ldr	r1, [r7, #0]
 8019298:	6878      	ldr	r0, [r7, #4]
 801929a:	f000 fa11 	bl	80196c0 <USBD_CtlError>
        err++;
 801929e:	7afb      	ldrb	r3, [r7, #11]
 80192a0:	3301      	adds	r3, #1
 80192a2:	72fb      	strb	r3, [r7, #11]
      break;
 80192a4:	e021      	b.n	80192ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	7c1b      	ldrb	r3, [r3, #16]
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d10d      	bne.n	80192ca <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80192b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80192b6:	f107 0208 	add.w	r2, r7, #8
 80192ba:	4610      	mov	r0, r2
 80192bc:	4798      	blx	r3
 80192be:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80192c0:	68fb      	ldr	r3, [r7, #12]
 80192c2:	3301      	adds	r3, #1
 80192c4:	2207      	movs	r2, #7
 80192c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80192c8:	e00f      	b.n	80192ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80192ca:	6839      	ldr	r1, [r7, #0]
 80192cc:	6878      	ldr	r0, [r7, #4]
 80192ce:	f000 f9f7 	bl	80196c0 <USBD_CtlError>
        err++;
 80192d2:	7afb      	ldrb	r3, [r7, #11]
 80192d4:	3301      	adds	r3, #1
 80192d6:	72fb      	strb	r3, [r7, #11]
      break;
 80192d8:	e007      	b.n	80192ea <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80192da:	6839      	ldr	r1, [r7, #0]
 80192dc:	6878      	ldr	r0, [r7, #4]
 80192de:	f000 f9ef 	bl	80196c0 <USBD_CtlError>
      err++;
 80192e2:	7afb      	ldrb	r3, [r7, #11]
 80192e4:	3301      	adds	r3, #1
 80192e6:	72fb      	strb	r3, [r7, #11]
      break;
 80192e8:	bf00      	nop
  }

  if (err != 0U)
 80192ea:	7afb      	ldrb	r3, [r7, #11]
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	d11e      	bne.n	801932e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80192f0:	683b      	ldr	r3, [r7, #0]
 80192f2:	88db      	ldrh	r3, [r3, #6]
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	d016      	beq.n	8019326 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80192f8:	893b      	ldrh	r3, [r7, #8]
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d00e      	beq.n	801931c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80192fe:	683b      	ldr	r3, [r7, #0]
 8019300:	88da      	ldrh	r2, [r3, #6]
 8019302:	893b      	ldrh	r3, [r7, #8]
 8019304:	4293      	cmp	r3, r2
 8019306:	bf28      	it	cs
 8019308:	4613      	movcs	r3, r2
 801930a:	b29b      	uxth	r3, r3
 801930c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801930e:	893b      	ldrh	r3, [r7, #8]
 8019310:	461a      	mov	r2, r3
 8019312:	68f9      	ldr	r1, [r7, #12]
 8019314:	6878      	ldr	r0, [r7, #4]
 8019316:	f000 fa44 	bl	80197a2 <USBD_CtlSendData>
 801931a:	e009      	b.n	8019330 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801931c:	6839      	ldr	r1, [r7, #0]
 801931e:	6878      	ldr	r0, [r7, #4]
 8019320:	f000 f9ce 	bl	80196c0 <USBD_CtlError>
 8019324:	e004      	b.n	8019330 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8019326:	6878      	ldr	r0, [r7, #4]
 8019328:	f000 fa95 	bl	8019856 <USBD_CtlSendStatus>
 801932c:	e000      	b.n	8019330 <USBD_GetDescriptor+0x320>
    return;
 801932e:	bf00      	nop
  }
}
 8019330:	3710      	adds	r7, #16
 8019332:	46bd      	mov	sp, r7
 8019334:	bd80      	pop	{r7, pc}
 8019336:	bf00      	nop

08019338 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019338:	b580      	push	{r7, lr}
 801933a:	b084      	sub	sp, #16
 801933c:	af00      	add	r7, sp, #0
 801933e:	6078      	str	r0, [r7, #4]
 8019340:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8019342:	683b      	ldr	r3, [r7, #0]
 8019344:	889b      	ldrh	r3, [r3, #4]
 8019346:	2b00      	cmp	r3, #0
 8019348:	d131      	bne.n	80193ae <USBD_SetAddress+0x76>
 801934a:	683b      	ldr	r3, [r7, #0]
 801934c:	88db      	ldrh	r3, [r3, #6]
 801934e:	2b00      	cmp	r3, #0
 8019350:	d12d      	bne.n	80193ae <USBD_SetAddress+0x76>
 8019352:	683b      	ldr	r3, [r7, #0]
 8019354:	885b      	ldrh	r3, [r3, #2]
 8019356:	2b7f      	cmp	r3, #127	; 0x7f
 8019358:	d829      	bhi.n	80193ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801935a:	683b      	ldr	r3, [r7, #0]
 801935c:	885b      	ldrh	r3, [r3, #2]
 801935e:	b2db      	uxtb	r3, r3
 8019360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019364:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801936c:	b2db      	uxtb	r3, r3
 801936e:	2b03      	cmp	r3, #3
 8019370:	d104      	bne.n	801937c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8019372:	6839      	ldr	r1, [r7, #0]
 8019374:	6878      	ldr	r0, [r7, #4]
 8019376:	f000 f9a3 	bl	80196c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801937a:	e01d      	b.n	80193b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	7bfa      	ldrb	r2, [r7, #15]
 8019380:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8019384:	7bfb      	ldrb	r3, [r7, #15]
 8019386:	4619      	mov	r1, r3
 8019388:	6878      	ldr	r0, [r7, #4]
 801938a:	f000 ff6f 	bl	801a26c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801938e:	6878      	ldr	r0, [r7, #4]
 8019390:	f000 fa61 	bl	8019856 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8019394:	7bfb      	ldrb	r3, [r7, #15]
 8019396:	2b00      	cmp	r3, #0
 8019398:	d004      	beq.n	80193a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	2202      	movs	r2, #2
 801939e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80193a2:	e009      	b.n	80193b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	2201      	movs	r2, #1
 80193a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80193ac:	e004      	b.n	80193b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80193ae:	6839      	ldr	r1, [r7, #0]
 80193b0:	6878      	ldr	r0, [r7, #4]
 80193b2:	f000 f985 	bl	80196c0 <USBD_CtlError>
  }
}
 80193b6:	bf00      	nop
 80193b8:	bf00      	nop
 80193ba:	3710      	adds	r7, #16
 80193bc:	46bd      	mov	sp, r7
 80193be:	bd80      	pop	{r7, pc}

080193c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80193c0:	b580      	push	{r7, lr}
 80193c2:	b084      	sub	sp, #16
 80193c4:	af00      	add	r7, sp, #0
 80193c6:	6078      	str	r0, [r7, #4]
 80193c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80193ca:	2300      	movs	r3, #0
 80193cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80193ce:	683b      	ldr	r3, [r7, #0]
 80193d0:	885b      	ldrh	r3, [r3, #2]
 80193d2:	b2da      	uxtb	r2, r3
 80193d4:	4b4c      	ldr	r3, [pc, #304]	; (8019508 <USBD_SetConfig+0x148>)
 80193d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80193d8:	4b4b      	ldr	r3, [pc, #300]	; (8019508 <USBD_SetConfig+0x148>)
 80193da:	781b      	ldrb	r3, [r3, #0]
 80193dc:	2b01      	cmp	r3, #1
 80193de:	d905      	bls.n	80193ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80193e0:	6839      	ldr	r1, [r7, #0]
 80193e2:	6878      	ldr	r0, [r7, #4]
 80193e4:	f000 f96c 	bl	80196c0 <USBD_CtlError>
    return USBD_FAIL;
 80193e8:	2303      	movs	r3, #3
 80193ea:	e088      	b.n	80194fe <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80193f2:	b2db      	uxtb	r3, r3
 80193f4:	2b02      	cmp	r3, #2
 80193f6:	d002      	beq.n	80193fe <USBD_SetConfig+0x3e>
 80193f8:	2b03      	cmp	r3, #3
 80193fa:	d025      	beq.n	8019448 <USBD_SetConfig+0x88>
 80193fc:	e071      	b.n	80194e2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80193fe:	4b42      	ldr	r3, [pc, #264]	; (8019508 <USBD_SetConfig+0x148>)
 8019400:	781b      	ldrb	r3, [r3, #0]
 8019402:	2b00      	cmp	r3, #0
 8019404:	d01c      	beq.n	8019440 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8019406:	4b40      	ldr	r3, [pc, #256]	; (8019508 <USBD_SetConfig+0x148>)
 8019408:	781b      	ldrb	r3, [r3, #0]
 801940a:	461a      	mov	r2, r3
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8019410:	4b3d      	ldr	r3, [pc, #244]	; (8019508 <USBD_SetConfig+0x148>)
 8019412:	781b      	ldrb	r3, [r3, #0]
 8019414:	4619      	mov	r1, r3
 8019416:	6878      	ldr	r0, [r7, #4]
 8019418:	f7ff f91e 	bl	8018658 <USBD_SetClassConfig>
 801941c:	4603      	mov	r3, r0
 801941e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8019420:	7bfb      	ldrb	r3, [r7, #15]
 8019422:	2b00      	cmp	r3, #0
 8019424:	d004      	beq.n	8019430 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8019426:	6839      	ldr	r1, [r7, #0]
 8019428:	6878      	ldr	r0, [r7, #4]
 801942a:	f000 f949 	bl	80196c0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801942e:	e065      	b.n	80194fc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8019430:	6878      	ldr	r0, [r7, #4]
 8019432:	f000 fa10 	bl	8019856 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	2203      	movs	r2, #3
 801943a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801943e:	e05d      	b.n	80194fc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8019440:	6878      	ldr	r0, [r7, #4]
 8019442:	f000 fa08 	bl	8019856 <USBD_CtlSendStatus>
      break;
 8019446:	e059      	b.n	80194fc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8019448:	4b2f      	ldr	r3, [pc, #188]	; (8019508 <USBD_SetConfig+0x148>)
 801944a:	781b      	ldrb	r3, [r3, #0]
 801944c:	2b00      	cmp	r3, #0
 801944e:	d112      	bne.n	8019476 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	2202      	movs	r2, #2
 8019454:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8019458:	4b2b      	ldr	r3, [pc, #172]	; (8019508 <USBD_SetConfig+0x148>)
 801945a:	781b      	ldrb	r3, [r3, #0]
 801945c:	461a      	mov	r2, r3
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8019462:	4b29      	ldr	r3, [pc, #164]	; (8019508 <USBD_SetConfig+0x148>)
 8019464:	781b      	ldrb	r3, [r3, #0]
 8019466:	4619      	mov	r1, r3
 8019468:	6878      	ldr	r0, [r7, #4]
 801946a:	f7ff f911 	bl	8018690 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801946e:	6878      	ldr	r0, [r7, #4]
 8019470:	f000 f9f1 	bl	8019856 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8019474:	e042      	b.n	80194fc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8019476:	4b24      	ldr	r3, [pc, #144]	; (8019508 <USBD_SetConfig+0x148>)
 8019478:	781b      	ldrb	r3, [r3, #0]
 801947a:	461a      	mov	r2, r3
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	685b      	ldr	r3, [r3, #4]
 8019480:	429a      	cmp	r2, r3
 8019482:	d02a      	beq.n	80194da <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	685b      	ldr	r3, [r3, #4]
 8019488:	b2db      	uxtb	r3, r3
 801948a:	4619      	mov	r1, r3
 801948c:	6878      	ldr	r0, [r7, #4]
 801948e:	f7ff f8ff 	bl	8018690 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8019492:	4b1d      	ldr	r3, [pc, #116]	; (8019508 <USBD_SetConfig+0x148>)
 8019494:	781b      	ldrb	r3, [r3, #0]
 8019496:	461a      	mov	r2, r3
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801949c:	4b1a      	ldr	r3, [pc, #104]	; (8019508 <USBD_SetConfig+0x148>)
 801949e:	781b      	ldrb	r3, [r3, #0]
 80194a0:	4619      	mov	r1, r3
 80194a2:	6878      	ldr	r0, [r7, #4]
 80194a4:	f7ff f8d8 	bl	8018658 <USBD_SetClassConfig>
 80194a8:	4603      	mov	r3, r0
 80194aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80194ac:	7bfb      	ldrb	r3, [r7, #15]
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d00f      	beq.n	80194d2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80194b2:	6839      	ldr	r1, [r7, #0]
 80194b4:	6878      	ldr	r0, [r7, #4]
 80194b6:	f000 f903 	bl	80196c0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	685b      	ldr	r3, [r3, #4]
 80194be:	b2db      	uxtb	r3, r3
 80194c0:	4619      	mov	r1, r3
 80194c2:	6878      	ldr	r0, [r7, #4]
 80194c4:	f7ff f8e4 	bl	8018690 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	2202      	movs	r2, #2
 80194cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80194d0:	e014      	b.n	80194fc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80194d2:	6878      	ldr	r0, [r7, #4]
 80194d4:	f000 f9bf 	bl	8019856 <USBD_CtlSendStatus>
      break;
 80194d8:	e010      	b.n	80194fc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80194da:	6878      	ldr	r0, [r7, #4]
 80194dc:	f000 f9bb 	bl	8019856 <USBD_CtlSendStatus>
      break;
 80194e0:	e00c      	b.n	80194fc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80194e2:	6839      	ldr	r1, [r7, #0]
 80194e4:	6878      	ldr	r0, [r7, #4]
 80194e6:	f000 f8eb 	bl	80196c0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80194ea:	4b07      	ldr	r3, [pc, #28]	; (8019508 <USBD_SetConfig+0x148>)
 80194ec:	781b      	ldrb	r3, [r3, #0]
 80194ee:	4619      	mov	r1, r3
 80194f0:	6878      	ldr	r0, [r7, #4]
 80194f2:	f7ff f8cd 	bl	8018690 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80194f6:	2303      	movs	r3, #3
 80194f8:	73fb      	strb	r3, [r7, #15]
      break;
 80194fa:	bf00      	nop
  }

  return ret;
 80194fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80194fe:	4618      	mov	r0, r3
 8019500:	3710      	adds	r7, #16
 8019502:	46bd      	mov	sp, r7
 8019504:	bd80      	pop	{r7, pc}
 8019506:	bf00      	nop
 8019508:	20001c20 	.word	0x20001c20

0801950c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801950c:	b580      	push	{r7, lr}
 801950e:	b082      	sub	sp, #8
 8019510:	af00      	add	r7, sp, #0
 8019512:	6078      	str	r0, [r7, #4]
 8019514:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8019516:	683b      	ldr	r3, [r7, #0]
 8019518:	88db      	ldrh	r3, [r3, #6]
 801951a:	2b01      	cmp	r3, #1
 801951c:	d004      	beq.n	8019528 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801951e:	6839      	ldr	r1, [r7, #0]
 8019520:	6878      	ldr	r0, [r7, #4]
 8019522:	f000 f8cd 	bl	80196c0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8019526:	e023      	b.n	8019570 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801952e:	b2db      	uxtb	r3, r3
 8019530:	2b02      	cmp	r3, #2
 8019532:	dc02      	bgt.n	801953a <USBD_GetConfig+0x2e>
 8019534:	2b00      	cmp	r3, #0
 8019536:	dc03      	bgt.n	8019540 <USBD_GetConfig+0x34>
 8019538:	e015      	b.n	8019566 <USBD_GetConfig+0x5a>
 801953a:	2b03      	cmp	r3, #3
 801953c:	d00b      	beq.n	8019556 <USBD_GetConfig+0x4a>
 801953e:	e012      	b.n	8019566 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	2200      	movs	r2, #0
 8019544:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	3308      	adds	r3, #8
 801954a:	2201      	movs	r2, #1
 801954c:	4619      	mov	r1, r3
 801954e:	6878      	ldr	r0, [r7, #4]
 8019550:	f000 f927 	bl	80197a2 <USBD_CtlSendData>
        break;
 8019554:	e00c      	b.n	8019570 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	3304      	adds	r3, #4
 801955a:	2201      	movs	r2, #1
 801955c:	4619      	mov	r1, r3
 801955e:	6878      	ldr	r0, [r7, #4]
 8019560:	f000 f91f 	bl	80197a2 <USBD_CtlSendData>
        break;
 8019564:	e004      	b.n	8019570 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8019566:	6839      	ldr	r1, [r7, #0]
 8019568:	6878      	ldr	r0, [r7, #4]
 801956a:	f000 f8a9 	bl	80196c0 <USBD_CtlError>
        break;
 801956e:	bf00      	nop
}
 8019570:	bf00      	nop
 8019572:	3708      	adds	r7, #8
 8019574:	46bd      	mov	sp, r7
 8019576:	bd80      	pop	{r7, pc}

08019578 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019578:	b580      	push	{r7, lr}
 801957a:	b082      	sub	sp, #8
 801957c:	af00      	add	r7, sp, #0
 801957e:	6078      	str	r0, [r7, #4]
 8019580:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019588:	b2db      	uxtb	r3, r3
 801958a:	3b01      	subs	r3, #1
 801958c:	2b02      	cmp	r3, #2
 801958e:	d81e      	bhi.n	80195ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8019590:	683b      	ldr	r3, [r7, #0]
 8019592:	88db      	ldrh	r3, [r3, #6]
 8019594:	2b02      	cmp	r3, #2
 8019596:	d004      	beq.n	80195a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8019598:	6839      	ldr	r1, [r7, #0]
 801959a:	6878      	ldr	r0, [r7, #4]
 801959c:	f000 f890 	bl	80196c0 <USBD_CtlError>
        break;
 80195a0:	e01a      	b.n	80195d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	2201      	movs	r2, #1
 80195a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	d005      	beq.n	80195be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	68db      	ldr	r3, [r3, #12]
 80195b6:	f043 0202 	orr.w	r2, r3, #2
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	330c      	adds	r3, #12
 80195c2:	2202      	movs	r2, #2
 80195c4:	4619      	mov	r1, r3
 80195c6:	6878      	ldr	r0, [r7, #4]
 80195c8:	f000 f8eb 	bl	80197a2 <USBD_CtlSendData>
      break;
 80195cc:	e004      	b.n	80195d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80195ce:	6839      	ldr	r1, [r7, #0]
 80195d0:	6878      	ldr	r0, [r7, #4]
 80195d2:	f000 f875 	bl	80196c0 <USBD_CtlError>
      break;
 80195d6:	bf00      	nop
  }
}
 80195d8:	bf00      	nop
 80195da:	3708      	adds	r7, #8
 80195dc:	46bd      	mov	sp, r7
 80195de:	bd80      	pop	{r7, pc}

080195e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80195e0:	b580      	push	{r7, lr}
 80195e2:	b082      	sub	sp, #8
 80195e4:	af00      	add	r7, sp, #0
 80195e6:	6078      	str	r0, [r7, #4]
 80195e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80195ea:	683b      	ldr	r3, [r7, #0]
 80195ec:	885b      	ldrh	r3, [r3, #2]
 80195ee:	2b01      	cmp	r3, #1
 80195f0:	d106      	bne.n	8019600 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	2201      	movs	r2, #1
 80195f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80195fa:	6878      	ldr	r0, [r7, #4]
 80195fc:	f000 f92b 	bl	8019856 <USBD_CtlSendStatus>
  }
}
 8019600:	bf00      	nop
 8019602:	3708      	adds	r7, #8
 8019604:	46bd      	mov	sp, r7
 8019606:	bd80      	pop	{r7, pc}

08019608 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019608:	b580      	push	{r7, lr}
 801960a:	b082      	sub	sp, #8
 801960c:	af00      	add	r7, sp, #0
 801960e:	6078      	str	r0, [r7, #4]
 8019610:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019618:	b2db      	uxtb	r3, r3
 801961a:	3b01      	subs	r3, #1
 801961c:	2b02      	cmp	r3, #2
 801961e:	d80b      	bhi.n	8019638 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8019620:	683b      	ldr	r3, [r7, #0]
 8019622:	885b      	ldrh	r3, [r3, #2]
 8019624:	2b01      	cmp	r3, #1
 8019626:	d10c      	bne.n	8019642 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	2200      	movs	r2, #0
 801962c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8019630:	6878      	ldr	r0, [r7, #4]
 8019632:	f000 f910 	bl	8019856 <USBD_CtlSendStatus>
      }
      break;
 8019636:	e004      	b.n	8019642 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8019638:	6839      	ldr	r1, [r7, #0]
 801963a:	6878      	ldr	r0, [r7, #4]
 801963c:	f000 f840 	bl	80196c0 <USBD_CtlError>
      break;
 8019640:	e000      	b.n	8019644 <USBD_ClrFeature+0x3c>
      break;
 8019642:	bf00      	nop
  }
}
 8019644:	bf00      	nop
 8019646:	3708      	adds	r7, #8
 8019648:	46bd      	mov	sp, r7
 801964a:	bd80      	pop	{r7, pc}

0801964c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801964c:	b580      	push	{r7, lr}
 801964e:	b084      	sub	sp, #16
 8019650:	af00      	add	r7, sp, #0
 8019652:	6078      	str	r0, [r7, #4]
 8019654:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8019656:	683b      	ldr	r3, [r7, #0]
 8019658:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801965a:	68fb      	ldr	r3, [r7, #12]
 801965c:	781a      	ldrb	r2, [r3, #0]
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	3301      	adds	r3, #1
 8019666:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8019668:	68fb      	ldr	r3, [r7, #12]
 801966a:	781a      	ldrb	r2, [r3, #0]
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	3301      	adds	r3, #1
 8019674:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8019676:	68f8      	ldr	r0, [r7, #12]
 8019678:	f7ff fa91 	bl	8018b9e <SWAPBYTE>
 801967c:	4603      	mov	r3, r0
 801967e:	461a      	mov	r2, r3
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	3301      	adds	r3, #1
 8019688:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801968a:	68fb      	ldr	r3, [r7, #12]
 801968c:	3301      	adds	r3, #1
 801968e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8019690:	68f8      	ldr	r0, [r7, #12]
 8019692:	f7ff fa84 	bl	8018b9e <SWAPBYTE>
 8019696:	4603      	mov	r3, r0
 8019698:	461a      	mov	r2, r3
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801969e:	68fb      	ldr	r3, [r7, #12]
 80196a0:	3301      	adds	r3, #1
 80196a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80196a4:	68fb      	ldr	r3, [r7, #12]
 80196a6:	3301      	adds	r3, #1
 80196a8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80196aa:	68f8      	ldr	r0, [r7, #12]
 80196ac:	f7ff fa77 	bl	8018b9e <SWAPBYTE>
 80196b0:	4603      	mov	r3, r0
 80196b2:	461a      	mov	r2, r3
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	80da      	strh	r2, [r3, #6]
}
 80196b8:	bf00      	nop
 80196ba:	3710      	adds	r7, #16
 80196bc:	46bd      	mov	sp, r7
 80196be:	bd80      	pop	{r7, pc}

080196c0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80196c0:	b580      	push	{r7, lr}
 80196c2:	b082      	sub	sp, #8
 80196c4:	af00      	add	r7, sp, #0
 80196c6:	6078      	str	r0, [r7, #4]
 80196c8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80196ca:	2180      	movs	r1, #128	; 0x80
 80196cc:	6878      	ldr	r0, [r7, #4]
 80196ce:	f000 fd35 	bl	801a13c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80196d2:	2100      	movs	r1, #0
 80196d4:	6878      	ldr	r0, [r7, #4]
 80196d6:	f000 fd31 	bl	801a13c <USBD_LL_StallEP>
}
 80196da:	bf00      	nop
 80196dc:	3708      	adds	r7, #8
 80196de:	46bd      	mov	sp, r7
 80196e0:	bd80      	pop	{r7, pc}

080196e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80196e2:	b580      	push	{r7, lr}
 80196e4:	b086      	sub	sp, #24
 80196e6:	af00      	add	r7, sp, #0
 80196e8:	60f8      	str	r0, [r7, #12]
 80196ea:	60b9      	str	r1, [r7, #8]
 80196ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80196ee:	2300      	movs	r3, #0
 80196f0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80196f2:	68fb      	ldr	r3, [r7, #12]
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	d036      	beq.n	8019766 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80196fc:	6938      	ldr	r0, [r7, #16]
 80196fe:	f000 f836 	bl	801976e <USBD_GetLen>
 8019702:	4603      	mov	r3, r0
 8019704:	3301      	adds	r3, #1
 8019706:	b29b      	uxth	r3, r3
 8019708:	005b      	lsls	r3, r3, #1
 801970a:	b29a      	uxth	r2, r3
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8019710:	7dfb      	ldrb	r3, [r7, #23]
 8019712:	68ba      	ldr	r2, [r7, #8]
 8019714:	4413      	add	r3, r2
 8019716:	687a      	ldr	r2, [r7, #4]
 8019718:	7812      	ldrb	r2, [r2, #0]
 801971a:	701a      	strb	r2, [r3, #0]
  idx++;
 801971c:	7dfb      	ldrb	r3, [r7, #23]
 801971e:	3301      	adds	r3, #1
 8019720:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8019722:	7dfb      	ldrb	r3, [r7, #23]
 8019724:	68ba      	ldr	r2, [r7, #8]
 8019726:	4413      	add	r3, r2
 8019728:	2203      	movs	r2, #3
 801972a:	701a      	strb	r2, [r3, #0]
  idx++;
 801972c:	7dfb      	ldrb	r3, [r7, #23]
 801972e:	3301      	adds	r3, #1
 8019730:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8019732:	e013      	b.n	801975c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8019734:	7dfb      	ldrb	r3, [r7, #23]
 8019736:	68ba      	ldr	r2, [r7, #8]
 8019738:	4413      	add	r3, r2
 801973a:	693a      	ldr	r2, [r7, #16]
 801973c:	7812      	ldrb	r2, [r2, #0]
 801973e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8019740:	693b      	ldr	r3, [r7, #16]
 8019742:	3301      	adds	r3, #1
 8019744:	613b      	str	r3, [r7, #16]
    idx++;
 8019746:	7dfb      	ldrb	r3, [r7, #23]
 8019748:	3301      	adds	r3, #1
 801974a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801974c:	7dfb      	ldrb	r3, [r7, #23]
 801974e:	68ba      	ldr	r2, [r7, #8]
 8019750:	4413      	add	r3, r2
 8019752:	2200      	movs	r2, #0
 8019754:	701a      	strb	r2, [r3, #0]
    idx++;
 8019756:	7dfb      	ldrb	r3, [r7, #23]
 8019758:	3301      	adds	r3, #1
 801975a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801975c:	693b      	ldr	r3, [r7, #16]
 801975e:	781b      	ldrb	r3, [r3, #0]
 8019760:	2b00      	cmp	r3, #0
 8019762:	d1e7      	bne.n	8019734 <USBD_GetString+0x52>
 8019764:	e000      	b.n	8019768 <USBD_GetString+0x86>
    return;
 8019766:	bf00      	nop
  }
}
 8019768:	3718      	adds	r7, #24
 801976a:	46bd      	mov	sp, r7
 801976c:	bd80      	pop	{r7, pc}

0801976e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801976e:	b480      	push	{r7}
 8019770:	b085      	sub	sp, #20
 8019772:	af00      	add	r7, sp, #0
 8019774:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8019776:	2300      	movs	r3, #0
 8019778:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801977e:	e005      	b.n	801978c <USBD_GetLen+0x1e>
  {
    len++;
 8019780:	7bfb      	ldrb	r3, [r7, #15]
 8019782:	3301      	adds	r3, #1
 8019784:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8019786:	68bb      	ldr	r3, [r7, #8]
 8019788:	3301      	adds	r3, #1
 801978a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801978c:	68bb      	ldr	r3, [r7, #8]
 801978e:	781b      	ldrb	r3, [r3, #0]
 8019790:	2b00      	cmp	r3, #0
 8019792:	d1f5      	bne.n	8019780 <USBD_GetLen+0x12>
  }

  return len;
 8019794:	7bfb      	ldrb	r3, [r7, #15]
}
 8019796:	4618      	mov	r0, r3
 8019798:	3714      	adds	r7, #20
 801979a:	46bd      	mov	sp, r7
 801979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197a0:	4770      	bx	lr

080197a2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80197a2:	b580      	push	{r7, lr}
 80197a4:	b084      	sub	sp, #16
 80197a6:	af00      	add	r7, sp, #0
 80197a8:	60f8      	str	r0, [r7, #12]
 80197aa:	60b9      	str	r1, [r7, #8]
 80197ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80197ae:	68fb      	ldr	r3, [r7, #12]
 80197b0:	2202      	movs	r2, #2
 80197b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80197b6:	68fb      	ldr	r3, [r7, #12]
 80197b8:	687a      	ldr	r2, [r7, #4]
 80197ba:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80197bc:	68fb      	ldr	r3, [r7, #12]
 80197be:	687a      	ldr	r2, [r7, #4]
 80197c0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	68ba      	ldr	r2, [r7, #8]
 80197c6:	2100      	movs	r1, #0
 80197c8:	68f8      	ldr	r0, [r7, #12]
 80197ca:	f000 fd85 	bl	801a2d8 <USBD_LL_Transmit>

  return USBD_OK;
 80197ce:	2300      	movs	r3, #0
}
 80197d0:	4618      	mov	r0, r3
 80197d2:	3710      	adds	r7, #16
 80197d4:	46bd      	mov	sp, r7
 80197d6:	bd80      	pop	{r7, pc}

080197d8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80197d8:	b580      	push	{r7, lr}
 80197da:	b084      	sub	sp, #16
 80197dc:	af00      	add	r7, sp, #0
 80197de:	60f8      	str	r0, [r7, #12]
 80197e0:	60b9      	str	r1, [r7, #8]
 80197e2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	68ba      	ldr	r2, [r7, #8]
 80197e8:	2100      	movs	r1, #0
 80197ea:	68f8      	ldr	r0, [r7, #12]
 80197ec:	f000 fd74 	bl	801a2d8 <USBD_LL_Transmit>

  return USBD_OK;
 80197f0:	2300      	movs	r3, #0
}
 80197f2:	4618      	mov	r0, r3
 80197f4:	3710      	adds	r7, #16
 80197f6:	46bd      	mov	sp, r7
 80197f8:	bd80      	pop	{r7, pc}

080197fa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80197fa:	b580      	push	{r7, lr}
 80197fc:	b084      	sub	sp, #16
 80197fe:	af00      	add	r7, sp, #0
 8019800:	60f8      	str	r0, [r7, #12]
 8019802:	60b9      	str	r1, [r7, #8]
 8019804:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8019806:	68fb      	ldr	r3, [r7, #12]
 8019808:	2203      	movs	r2, #3
 801980a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801980e:	68fb      	ldr	r3, [r7, #12]
 8019810:	687a      	ldr	r2, [r7, #4]
 8019812:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8019816:	68fb      	ldr	r3, [r7, #12]
 8019818:	687a      	ldr	r2, [r7, #4]
 801981a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	68ba      	ldr	r2, [r7, #8]
 8019822:	2100      	movs	r1, #0
 8019824:	68f8      	ldr	r0, [r7, #12]
 8019826:	f000 fd8f 	bl	801a348 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801982a:	2300      	movs	r3, #0
}
 801982c:	4618      	mov	r0, r3
 801982e:	3710      	adds	r7, #16
 8019830:	46bd      	mov	sp, r7
 8019832:	bd80      	pop	{r7, pc}

08019834 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8019834:	b580      	push	{r7, lr}
 8019836:	b084      	sub	sp, #16
 8019838:	af00      	add	r7, sp, #0
 801983a:	60f8      	str	r0, [r7, #12]
 801983c:	60b9      	str	r1, [r7, #8]
 801983e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	68ba      	ldr	r2, [r7, #8]
 8019844:	2100      	movs	r1, #0
 8019846:	68f8      	ldr	r0, [r7, #12]
 8019848:	f000 fd7e 	bl	801a348 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801984c:	2300      	movs	r3, #0
}
 801984e:	4618      	mov	r0, r3
 8019850:	3710      	adds	r7, #16
 8019852:	46bd      	mov	sp, r7
 8019854:	bd80      	pop	{r7, pc}

08019856 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8019856:	b580      	push	{r7, lr}
 8019858:	b082      	sub	sp, #8
 801985a:	af00      	add	r7, sp, #0
 801985c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	2204      	movs	r2, #4
 8019862:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8019866:	2300      	movs	r3, #0
 8019868:	2200      	movs	r2, #0
 801986a:	2100      	movs	r1, #0
 801986c:	6878      	ldr	r0, [r7, #4]
 801986e:	f000 fd33 	bl	801a2d8 <USBD_LL_Transmit>

  return USBD_OK;
 8019872:	2300      	movs	r3, #0
}
 8019874:	4618      	mov	r0, r3
 8019876:	3708      	adds	r7, #8
 8019878:	46bd      	mov	sp, r7
 801987a:	bd80      	pop	{r7, pc}

0801987c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801987c:	b580      	push	{r7, lr}
 801987e:	b082      	sub	sp, #8
 8019880:	af00      	add	r7, sp, #0
 8019882:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	2205      	movs	r2, #5
 8019888:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801988c:	2300      	movs	r3, #0
 801988e:	2200      	movs	r2, #0
 8019890:	2100      	movs	r1, #0
 8019892:	6878      	ldr	r0, [r7, #4]
 8019894:	f000 fd58 	bl	801a348 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019898:	2300      	movs	r3, #0
}
 801989a:	4618      	mov	r0, r3
 801989c:	3708      	adds	r7, #8
 801989e:	46bd      	mov	sp, r7
 80198a0:	bd80      	pop	{r7, pc}
	...

080198a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80198a4:	b580      	push	{r7, lr}
 80198a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80198a8:	2200      	movs	r2, #0
 80198aa:	4912      	ldr	r1, [pc, #72]	; (80198f4 <MX_USB_DEVICE_Init+0x50>)
 80198ac:	4812      	ldr	r0, [pc, #72]	; (80198f8 <MX_USB_DEVICE_Init+0x54>)
 80198ae:	f7fe fe65 	bl	801857c <USBD_Init>
 80198b2:	4603      	mov	r3, r0
 80198b4:	2b00      	cmp	r3, #0
 80198b6:	d001      	beq.n	80198bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80198b8:	f7e9 fab4 	bl	8002e24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80198bc:	490f      	ldr	r1, [pc, #60]	; (80198fc <MX_USB_DEVICE_Init+0x58>)
 80198be:	480e      	ldr	r0, [pc, #56]	; (80198f8 <MX_USB_DEVICE_Init+0x54>)
 80198c0:	f7fe fe8c 	bl	80185dc <USBD_RegisterClass>
 80198c4:	4603      	mov	r3, r0
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d001      	beq.n	80198ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80198ca:	f7e9 faab 	bl	8002e24 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80198ce:	490c      	ldr	r1, [pc, #48]	; (8019900 <MX_USB_DEVICE_Init+0x5c>)
 80198d0:	4809      	ldr	r0, [pc, #36]	; (80198f8 <MX_USB_DEVICE_Init+0x54>)
 80198d2:	f7fe fddd 	bl	8018490 <USBD_CDC_RegisterInterface>
 80198d6:	4603      	mov	r3, r0
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d001      	beq.n	80198e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80198dc:	f7e9 faa2 	bl	8002e24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80198e0:	4805      	ldr	r0, [pc, #20]	; (80198f8 <MX_USB_DEVICE_Init+0x54>)
 80198e2:	f7fe fea2 	bl	801862a <USBD_Start>
 80198e6:	4603      	mov	r3, r0
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	d001      	beq.n	80198f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80198ec:	f7e9 fa9a 	bl	8002e24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80198f0:	bf00      	nop
 80198f2:	bd80      	pop	{r7, pc}
 80198f4:	20000688 	.word	0x20000688
 80198f8:	20001c24 	.word	0x20001c24
 80198fc:	20000570 	.word	0x20000570
 8019900:	20000674 	.word	0x20000674

08019904 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8019904:	b580      	push	{r7, lr}
 8019906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8019908:	2200      	movs	r2, #0
 801990a:	4905      	ldr	r1, [pc, #20]	; (8019920 <CDC_Init_FS+0x1c>)
 801990c:	4805      	ldr	r0, [pc, #20]	; (8019924 <CDC_Init_FS+0x20>)
 801990e:	f7fe fdd4 	bl	80184ba <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8019912:	4905      	ldr	r1, [pc, #20]	; (8019928 <CDC_Init_FS+0x24>)
 8019914:	4803      	ldr	r0, [pc, #12]	; (8019924 <CDC_Init_FS+0x20>)
 8019916:	f7fe fdee 	bl	80184f6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801991a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801991c:	4618      	mov	r0, r3
 801991e:	bd80      	pop	{r7, pc}
 8019920:	200026f4 	.word	0x200026f4
 8019924:	20001c24 	.word	0x20001c24
 8019928:	20001ef4 	.word	0x20001ef4

0801992c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801992c:	b480      	push	{r7}
 801992e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019930:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8019932:	4618      	mov	r0, r3
 8019934:	46bd      	mov	sp, r7
 8019936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801993a:	4770      	bx	lr

0801993c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801993c:	b480      	push	{r7}
 801993e:	b083      	sub	sp, #12
 8019940:	af00      	add	r7, sp, #0
 8019942:	4603      	mov	r3, r0
 8019944:	6039      	str	r1, [r7, #0]
 8019946:	71fb      	strb	r3, [r7, #7]
 8019948:	4613      	mov	r3, r2
 801994a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801994c:	79fb      	ldrb	r3, [r7, #7]
 801994e:	2b23      	cmp	r3, #35	; 0x23
 8019950:	d84a      	bhi.n	80199e8 <CDC_Control_FS+0xac>
 8019952:	a201      	add	r2, pc, #4	; (adr r2, 8019958 <CDC_Control_FS+0x1c>)
 8019954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019958:	080199e9 	.word	0x080199e9
 801995c:	080199e9 	.word	0x080199e9
 8019960:	080199e9 	.word	0x080199e9
 8019964:	080199e9 	.word	0x080199e9
 8019968:	080199e9 	.word	0x080199e9
 801996c:	080199e9 	.word	0x080199e9
 8019970:	080199e9 	.word	0x080199e9
 8019974:	080199e9 	.word	0x080199e9
 8019978:	080199e9 	.word	0x080199e9
 801997c:	080199e9 	.word	0x080199e9
 8019980:	080199e9 	.word	0x080199e9
 8019984:	080199e9 	.word	0x080199e9
 8019988:	080199e9 	.word	0x080199e9
 801998c:	080199e9 	.word	0x080199e9
 8019990:	080199e9 	.word	0x080199e9
 8019994:	080199e9 	.word	0x080199e9
 8019998:	080199e9 	.word	0x080199e9
 801999c:	080199e9 	.word	0x080199e9
 80199a0:	080199e9 	.word	0x080199e9
 80199a4:	080199e9 	.word	0x080199e9
 80199a8:	080199e9 	.word	0x080199e9
 80199ac:	080199e9 	.word	0x080199e9
 80199b0:	080199e9 	.word	0x080199e9
 80199b4:	080199e9 	.word	0x080199e9
 80199b8:	080199e9 	.word	0x080199e9
 80199bc:	080199e9 	.word	0x080199e9
 80199c0:	080199e9 	.word	0x080199e9
 80199c4:	080199e9 	.word	0x080199e9
 80199c8:	080199e9 	.word	0x080199e9
 80199cc:	080199e9 	.word	0x080199e9
 80199d0:	080199e9 	.word	0x080199e9
 80199d4:	080199e9 	.word	0x080199e9
 80199d8:	080199e9 	.word	0x080199e9
 80199dc:	080199e9 	.word	0x080199e9
 80199e0:	080199e9 	.word	0x080199e9
 80199e4:	080199e9 	.word	0x080199e9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80199e8:	bf00      	nop
  }

  return (USBD_OK);
 80199ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80199ec:	4618      	mov	r0, r3
 80199ee:	370c      	adds	r7, #12
 80199f0:	46bd      	mov	sp, r7
 80199f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199f6:	4770      	bx	lr

080199f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80199f8:	b580      	push	{r7, lr}
 80199fa:	b082      	sub	sp, #8
 80199fc:	af00      	add	r7, sp, #0
 80199fe:	6078      	str	r0, [r7, #4]
 8019a00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8019a02:	6879      	ldr	r1, [r7, #4]
 8019a04:	4805      	ldr	r0, [pc, #20]	; (8019a1c <CDC_Receive_FS+0x24>)
 8019a06:	f7fe fd76 	bl	80184f6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8019a0a:	4804      	ldr	r0, [pc, #16]	; (8019a1c <CDC_Receive_FS+0x24>)
 8019a0c:	f7fe fd8c 	bl	8018528 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8019a10:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8019a12:	4618      	mov	r0, r3
 8019a14:	3708      	adds	r7, #8
 8019a16:	46bd      	mov	sp, r7
 8019a18:	bd80      	pop	{r7, pc}
 8019a1a:	bf00      	nop
 8019a1c:	20001c24 	.word	0x20001c24

08019a20 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8019a20:	b480      	push	{r7}
 8019a22:	b087      	sub	sp, #28
 8019a24:	af00      	add	r7, sp, #0
 8019a26:	60f8      	str	r0, [r7, #12]
 8019a28:	60b9      	str	r1, [r7, #8]
 8019a2a:	4613      	mov	r3, r2
 8019a2c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8019a2e:	2300      	movs	r3, #0
 8019a30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8019a32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019a36:	4618      	mov	r0, r3
 8019a38:	371c      	adds	r7, #28
 8019a3a:	46bd      	mov	sp, r7
 8019a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a40:	4770      	bx	lr
	...

08019a44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019a44:	b480      	push	{r7}
 8019a46:	b083      	sub	sp, #12
 8019a48:	af00      	add	r7, sp, #0
 8019a4a:	4603      	mov	r3, r0
 8019a4c:	6039      	str	r1, [r7, #0]
 8019a4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8019a50:	683b      	ldr	r3, [r7, #0]
 8019a52:	2212      	movs	r2, #18
 8019a54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8019a56:	4b03      	ldr	r3, [pc, #12]	; (8019a64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8019a58:	4618      	mov	r0, r3
 8019a5a:	370c      	adds	r7, #12
 8019a5c:	46bd      	mov	sp, r7
 8019a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a62:	4770      	bx	lr
 8019a64:	200006a8 	.word	0x200006a8

08019a68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019a68:	b480      	push	{r7}
 8019a6a:	b083      	sub	sp, #12
 8019a6c:	af00      	add	r7, sp, #0
 8019a6e:	4603      	mov	r3, r0
 8019a70:	6039      	str	r1, [r7, #0]
 8019a72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8019a74:	683b      	ldr	r3, [r7, #0]
 8019a76:	2204      	movs	r2, #4
 8019a78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8019a7a:	4b03      	ldr	r3, [pc, #12]	; (8019a88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8019a7c:	4618      	mov	r0, r3
 8019a7e:	370c      	adds	r7, #12
 8019a80:	46bd      	mov	sp, r7
 8019a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a86:	4770      	bx	lr
 8019a88:	200006c8 	.word	0x200006c8

08019a8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019a8c:	b580      	push	{r7, lr}
 8019a8e:	b082      	sub	sp, #8
 8019a90:	af00      	add	r7, sp, #0
 8019a92:	4603      	mov	r3, r0
 8019a94:	6039      	str	r1, [r7, #0]
 8019a96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019a98:	79fb      	ldrb	r3, [r7, #7]
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d105      	bne.n	8019aaa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019a9e:	683a      	ldr	r2, [r7, #0]
 8019aa0:	4907      	ldr	r1, [pc, #28]	; (8019ac0 <USBD_FS_ProductStrDescriptor+0x34>)
 8019aa2:	4808      	ldr	r0, [pc, #32]	; (8019ac4 <USBD_FS_ProductStrDescriptor+0x38>)
 8019aa4:	f7ff fe1d 	bl	80196e2 <USBD_GetString>
 8019aa8:	e004      	b.n	8019ab4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019aaa:	683a      	ldr	r2, [r7, #0]
 8019aac:	4904      	ldr	r1, [pc, #16]	; (8019ac0 <USBD_FS_ProductStrDescriptor+0x34>)
 8019aae:	4805      	ldr	r0, [pc, #20]	; (8019ac4 <USBD_FS_ProductStrDescriptor+0x38>)
 8019ab0:	f7ff fe17 	bl	80196e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019ab4:	4b02      	ldr	r3, [pc, #8]	; (8019ac0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8019ab6:	4618      	mov	r0, r3
 8019ab8:	3708      	adds	r7, #8
 8019aba:	46bd      	mov	sp, r7
 8019abc:	bd80      	pop	{r7, pc}
 8019abe:	bf00      	nop
 8019ac0:	20002ef4 	.word	0x20002ef4
 8019ac4:	0801b96c 	.word	0x0801b96c

08019ac8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019ac8:	b580      	push	{r7, lr}
 8019aca:	b082      	sub	sp, #8
 8019acc:	af00      	add	r7, sp, #0
 8019ace:	4603      	mov	r3, r0
 8019ad0:	6039      	str	r1, [r7, #0]
 8019ad2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8019ad4:	683a      	ldr	r2, [r7, #0]
 8019ad6:	4904      	ldr	r1, [pc, #16]	; (8019ae8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8019ad8:	4804      	ldr	r0, [pc, #16]	; (8019aec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8019ada:	f7ff fe02 	bl	80196e2 <USBD_GetString>
  return USBD_StrDesc;
 8019ade:	4b02      	ldr	r3, [pc, #8]	; (8019ae8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8019ae0:	4618      	mov	r0, r3
 8019ae2:	3708      	adds	r7, #8
 8019ae4:	46bd      	mov	sp, r7
 8019ae6:	bd80      	pop	{r7, pc}
 8019ae8:	20002ef4 	.word	0x20002ef4
 8019aec:	0801b984 	.word	0x0801b984

08019af0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019af0:	b580      	push	{r7, lr}
 8019af2:	b082      	sub	sp, #8
 8019af4:	af00      	add	r7, sp, #0
 8019af6:	4603      	mov	r3, r0
 8019af8:	6039      	str	r1, [r7, #0]
 8019afa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019afc:	683b      	ldr	r3, [r7, #0]
 8019afe:	221a      	movs	r2, #26
 8019b00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8019b02:	f000 f855 	bl	8019bb0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8019b06:	4b02      	ldr	r3, [pc, #8]	; (8019b10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8019b08:	4618      	mov	r0, r3
 8019b0a:	3708      	adds	r7, #8
 8019b0c:	46bd      	mov	sp, r7
 8019b0e:	bd80      	pop	{r7, pc}
 8019b10:	200006cc 	.word	0x200006cc

08019b14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019b14:	b580      	push	{r7, lr}
 8019b16:	b082      	sub	sp, #8
 8019b18:	af00      	add	r7, sp, #0
 8019b1a:	4603      	mov	r3, r0
 8019b1c:	6039      	str	r1, [r7, #0]
 8019b1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019b20:	79fb      	ldrb	r3, [r7, #7]
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	d105      	bne.n	8019b32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019b26:	683a      	ldr	r2, [r7, #0]
 8019b28:	4907      	ldr	r1, [pc, #28]	; (8019b48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019b2a:	4808      	ldr	r0, [pc, #32]	; (8019b4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8019b2c:	f7ff fdd9 	bl	80196e2 <USBD_GetString>
 8019b30:	e004      	b.n	8019b3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019b32:	683a      	ldr	r2, [r7, #0]
 8019b34:	4904      	ldr	r1, [pc, #16]	; (8019b48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019b36:	4805      	ldr	r0, [pc, #20]	; (8019b4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8019b38:	f7ff fdd3 	bl	80196e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019b3c:	4b02      	ldr	r3, [pc, #8]	; (8019b48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8019b3e:	4618      	mov	r0, r3
 8019b40:	3708      	adds	r7, #8
 8019b42:	46bd      	mov	sp, r7
 8019b44:	bd80      	pop	{r7, pc}
 8019b46:	bf00      	nop
 8019b48:	20002ef4 	.word	0x20002ef4
 8019b4c:	0801b998 	.word	0x0801b998

08019b50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019b50:	b580      	push	{r7, lr}
 8019b52:	b082      	sub	sp, #8
 8019b54:	af00      	add	r7, sp, #0
 8019b56:	4603      	mov	r3, r0
 8019b58:	6039      	str	r1, [r7, #0]
 8019b5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019b5c:	79fb      	ldrb	r3, [r7, #7]
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d105      	bne.n	8019b6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019b62:	683a      	ldr	r2, [r7, #0]
 8019b64:	4907      	ldr	r1, [pc, #28]	; (8019b84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019b66:	4808      	ldr	r0, [pc, #32]	; (8019b88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019b68:	f7ff fdbb 	bl	80196e2 <USBD_GetString>
 8019b6c:	e004      	b.n	8019b78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019b6e:	683a      	ldr	r2, [r7, #0]
 8019b70:	4904      	ldr	r1, [pc, #16]	; (8019b84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019b72:	4805      	ldr	r0, [pc, #20]	; (8019b88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019b74:	f7ff fdb5 	bl	80196e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019b78:	4b02      	ldr	r3, [pc, #8]	; (8019b84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8019b7a:	4618      	mov	r0, r3
 8019b7c:	3708      	adds	r7, #8
 8019b7e:	46bd      	mov	sp, r7
 8019b80:	bd80      	pop	{r7, pc}
 8019b82:	bf00      	nop
 8019b84:	20002ef4 	.word	0x20002ef4
 8019b88:	0801b9a4 	.word	0x0801b9a4

08019b8c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019b8c:	b480      	push	{r7}
 8019b8e:	b083      	sub	sp, #12
 8019b90:	af00      	add	r7, sp, #0
 8019b92:	4603      	mov	r3, r0
 8019b94:	6039      	str	r1, [r7, #0]
 8019b96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8019b98:	683b      	ldr	r3, [r7, #0]
 8019b9a:	220c      	movs	r2, #12
 8019b9c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8019b9e:	4b03      	ldr	r3, [pc, #12]	; (8019bac <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8019ba0:	4618      	mov	r0, r3
 8019ba2:	370c      	adds	r7, #12
 8019ba4:	46bd      	mov	sp, r7
 8019ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019baa:	4770      	bx	lr
 8019bac:	200006bc 	.word	0x200006bc

08019bb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019bb0:	b580      	push	{r7, lr}
 8019bb2:	b084      	sub	sp, #16
 8019bb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8019bb6:	4b0f      	ldr	r3, [pc, #60]	; (8019bf4 <Get_SerialNum+0x44>)
 8019bb8:	681b      	ldr	r3, [r3, #0]
 8019bba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019bbc:	4b0e      	ldr	r3, [pc, #56]	; (8019bf8 <Get_SerialNum+0x48>)
 8019bbe:	681b      	ldr	r3, [r3, #0]
 8019bc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8019bc2:	4b0e      	ldr	r3, [pc, #56]	; (8019bfc <Get_SerialNum+0x4c>)
 8019bc4:	681b      	ldr	r3, [r3, #0]
 8019bc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019bc8:	68fa      	ldr	r2, [r7, #12]
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	4413      	add	r3, r2
 8019bce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019bd0:	68fb      	ldr	r3, [r7, #12]
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d009      	beq.n	8019bea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8019bd6:	2208      	movs	r2, #8
 8019bd8:	4909      	ldr	r1, [pc, #36]	; (8019c00 <Get_SerialNum+0x50>)
 8019bda:	68f8      	ldr	r0, [r7, #12]
 8019bdc:	f000 f814 	bl	8019c08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019be0:	2204      	movs	r2, #4
 8019be2:	4908      	ldr	r1, [pc, #32]	; (8019c04 <Get_SerialNum+0x54>)
 8019be4:	68b8      	ldr	r0, [r7, #8]
 8019be6:	f000 f80f 	bl	8019c08 <IntToUnicode>
  }
}
 8019bea:	bf00      	nop
 8019bec:	3710      	adds	r7, #16
 8019bee:	46bd      	mov	sp, r7
 8019bf0:	bd80      	pop	{r7, pc}
 8019bf2:	bf00      	nop
 8019bf4:	1fff7590 	.word	0x1fff7590
 8019bf8:	1fff7594 	.word	0x1fff7594
 8019bfc:	1fff7598 	.word	0x1fff7598
 8019c00:	200006ce 	.word	0x200006ce
 8019c04:	200006de 	.word	0x200006de

08019c08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019c08:	b480      	push	{r7}
 8019c0a:	b087      	sub	sp, #28
 8019c0c:	af00      	add	r7, sp, #0
 8019c0e:	60f8      	str	r0, [r7, #12]
 8019c10:	60b9      	str	r1, [r7, #8]
 8019c12:	4613      	mov	r3, r2
 8019c14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8019c16:	2300      	movs	r3, #0
 8019c18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8019c1a:	2300      	movs	r3, #0
 8019c1c:	75fb      	strb	r3, [r7, #23]
 8019c1e:	e027      	b.n	8019c70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019c20:	68fb      	ldr	r3, [r7, #12]
 8019c22:	0f1b      	lsrs	r3, r3, #28
 8019c24:	2b09      	cmp	r3, #9
 8019c26:	d80b      	bhi.n	8019c40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019c28:	68fb      	ldr	r3, [r7, #12]
 8019c2a:	0f1b      	lsrs	r3, r3, #28
 8019c2c:	b2da      	uxtb	r2, r3
 8019c2e:	7dfb      	ldrb	r3, [r7, #23]
 8019c30:	005b      	lsls	r3, r3, #1
 8019c32:	4619      	mov	r1, r3
 8019c34:	68bb      	ldr	r3, [r7, #8]
 8019c36:	440b      	add	r3, r1
 8019c38:	3230      	adds	r2, #48	; 0x30
 8019c3a:	b2d2      	uxtb	r2, r2
 8019c3c:	701a      	strb	r2, [r3, #0]
 8019c3e:	e00a      	b.n	8019c56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019c40:	68fb      	ldr	r3, [r7, #12]
 8019c42:	0f1b      	lsrs	r3, r3, #28
 8019c44:	b2da      	uxtb	r2, r3
 8019c46:	7dfb      	ldrb	r3, [r7, #23]
 8019c48:	005b      	lsls	r3, r3, #1
 8019c4a:	4619      	mov	r1, r3
 8019c4c:	68bb      	ldr	r3, [r7, #8]
 8019c4e:	440b      	add	r3, r1
 8019c50:	3237      	adds	r2, #55	; 0x37
 8019c52:	b2d2      	uxtb	r2, r2
 8019c54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8019c56:	68fb      	ldr	r3, [r7, #12]
 8019c58:	011b      	lsls	r3, r3, #4
 8019c5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019c5c:	7dfb      	ldrb	r3, [r7, #23]
 8019c5e:	005b      	lsls	r3, r3, #1
 8019c60:	3301      	adds	r3, #1
 8019c62:	68ba      	ldr	r2, [r7, #8]
 8019c64:	4413      	add	r3, r2
 8019c66:	2200      	movs	r2, #0
 8019c68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8019c6a:	7dfb      	ldrb	r3, [r7, #23]
 8019c6c:	3301      	adds	r3, #1
 8019c6e:	75fb      	strb	r3, [r7, #23]
 8019c70:	7dfa      	ldrb	r2, [r7, #23]
 8019c72:	79fb      	ldrb	r3, [r7, #7]
 8019c74:	429a      	cmp	r2, r3
 8019c76:	d3d3      	bcc.n	8019c20 <IntToUnicode+0x18>
  }
}
 8019c78:	bf00      	nop
 8019c7a:	bf00      	nop
 8019c7c:	371c      	adds	r7, #28
 8019c7e:	46bd      	mov	sp, r7
 8019c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c84:	4770      	bx	lr
	...

08019c88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019c88:	b580      	push	{r7, lr}
 8019c8a:	b08a      	sub	sp, #40	; 0x28
 8019c8c:	af00      	add	r7, sp, #0
 8019c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019c90:	f107 0314 	add.w	r3, r7, #20
 8019c94:	2200      	movs	r2, #0
 8019c96:	601a      	str	r2, [r3, #0]
 8019c98:	605a      	str	r2, [r3, #4]
 8019c9a:	609a      	str	r2, [r3, #8]
 8019c9c:	60da      	str	r2, [r3, #12]
 8019c9e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8019ca0:	687b      	ldr	r3, [r7, #4]
 8019ca2:	681b      	ldr	r3, [r3, #0]
 8019ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019ca8:	d14e      	bne.n	8019d48 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019caa:	4b29      	ldr	r3, [pc, #164]	; (8019d50 <HAL_PCD_MspInit+0xc8>)
 8019cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019cae:	4a28      	ldr	r2, [pc, #160]	; (8019d50 <HAL_PCD_MspInit+0xc8>)
 8019cb0:	f043 0301 	orr.w	r3, r3, #1
 8019cb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8019cb6:	4b26      	ldr	r3, [pc, #152]	; (8019d50 <HAL_PCD_MspInit+0xc8>)
 8019cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019cba:	f003 0301 	and.w	r3, r3, #1
 8019cbe:	613b      	str	r3, [r7, #16]
 8019cc0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 8019cc2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8019cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019cc8:	2302      	movs	r3, #2
 8019cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019ccc:	2300      	movs	r3, #0
 8019cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019cd0:	2303      	movs	r3, #3
 8019cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019cd4:	230a      	movs	r3, #10
 8019cd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019cd8:	f107 0314 	add.w	r3, r7, #20
 8019cdc:	4619      	mov	r1, r3
 8019cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019ce2:	f7f3 ff87 	bl	800dbf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019ce6:	4b1a      	ldr	r3, [pc, #104]	; (8019d50 <HAL_PCD_MspInit+0xc8>)
 8019ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019cea:	4a19      	ldr	r2, [pc, #100]	; (8019d50 <HAL_PCD_MspInit+0xc8>)
 8019cec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8019cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8019cf2:	4b17      	ldr	r3, [pc, #92]	; (8019d50 <HAL_PCD_MspInit+0xc8>)
 8019cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019cf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019cfa:	60fb      	str	r3, [r7, #12]
 8019cfc:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8019cfe:	4b14      	ldr	r3, [pc, #80]	; (8019d50 <HAL_PCD_MspInit+0xc8>)
 8019d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d114      	bne.n	8019d34 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8019d0a:	4b11      	ldr	r3, [pc, #68]	; (8019d50 <HAL_PCD_MspInit+0xc8>)
 8019d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019d0e:	4a10      	ldr	r2, [pc, #64]	; (8019d50 <HAL_PCD_MspInit+0xc8>)
 8019d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019d14:	6593      	str	r3, [r2, #88]	; 0x58
 8019d16:	4b0e      	ldr	r3, [pc, #56]	; (8019d50 <HAL_PCD_MspInit+0xc8>)
 8019d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019d1e:	60bb      	str	r3, [r7, #8]
 8019d20:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8019d22:	f7f6 fe25 	bl	8010970 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8019d26:	4b0a      	ldr	r3, [pc, #40]	; (8019d50 <HAL_PCD_MspInit+0xc8>)
 8019d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019d2a:	4a09      	ldr	r2, [pc, #36]	; (8019d50 <HAL_PCD_MspInit+0xc8>)
 8019d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8019d30:	6593      	str	r3, [r2, #88]	; 0x58
 8019d32:	e001      	b.n	8019d38 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8019d34:	f7f6 fe1c 	bl	8010970 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8019d38:	2200      	movs	r2, #0
 8019d3a:	2100      	movs	r1, #0
 8019d3c:	2043      	movs	r0, #67	; 0x43
 8019d3e:	f7f3 fd7c 	bl	800d83a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8019d42:	2043      	movs	r0, #67	; 0x43
 8019d44:	f7f3 fd95 	bl	800d872 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019d48:	bf00      	nop
 8019d4a:	3728      	adds	r7, #40	; 0x28
 8019d4c:	46bd      	mov	sp, r7
 8019d4e:	bd80      	pop	{r7, pc}
 8019d50:	40021000 	.word	0x40021000

08019d54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d54:	b580      	push	{r7, lr}
 8019d56:	b082      	sub	sp, #8
 8019d58:	af00      	add	r7, sp, #0
 8019d5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8019d68:	4619      	mov	r1, r3
 8019d6a:	4610      	mov	r0, r2
 8019d6c:	f7fe fca8 	bl	80186c0 <USBD_LL_SetupStage>
}
 8019d70:	bf00      	nop
 8019d72:	3708      	adds	r7, #8
 8019d74:	46bd      	mov	sp, r7
 8019d76:	bd80      	pop	{r7, pc}

08019d78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d78:	b580      	push	{r7, lr}
 8019d7a:	b082      	sub	sp, #8
 8019d7c:	af00      	add	r7, sp, #0
 8019d7e:	6078      	str	r0, [r7, #4]
 8019d80:	460b      	mov	r3, r1
 8019d82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8019d8a:	78fa      	ldrb	r2, [r7, #3]
 8019d8c:	6879      	ldr	r1, [r7, #4]
 8019d8e:	4613      	mov	r3, r2
 8019d90:	00db      	lsls	r3, r3, #3
 8019d92:	4413      	add	r3, r2
 8019d94:	009b      	lsls	r3, r3, #2
 8019d96:	440b      	add	r3, r1
 8019d98:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8019d9c:	681a      	ldr	r2, [r3, #0]
 8019d9e:	78fb      	ldrb	r3, [r7, #3]
 8019da0:	4619      	mov	r1, r3
 8019da2:	f7fe fce2 	bl	801876a <USBD_LL_DataOutStage>
}
 8019da6:	bf00      	nop
 8019da8:	3708      	adds	r7, #8
 8019daa:	46bd      	mov	sp, r7
 8019dac:	bd80      	pop	{r7, pc}

08019dae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019dae:	b580      	push	{r7, lr}
 8019db0:	b082      	sub	sp, #8
 8019db2:	af00      	add	r7, sp, #0
 8019db4:	6078      	str	r0, [r7, #4]
 8019db6:	460b      	mov	r3, r1
 8019db8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8019dc0:	78fa      	ldrb	r2, [r7, #3]
 8019dc2:	6879      	ldr	r1, [r7, #4]
 8019dc4:	4613      	mov	r3, r2
 8019dc6:	00db      	lsls	r3, r3, #3
 8019dc8:	4413      	add	r3, r2
 8019dca:	009b      	lsls	r3, r3, #2
 8019dcc:	440b      	add	r3, r1
 8019dce:	334c      	adds	r3, #76	; 0x4c
 8019dd0:	681a      	ldr	r2, [r3, #0]
 8019dd2:	78fb      	ldrb	r3, [r7, #3]
 8019dd4:	4619      	mov	r1, r3
 8019dd6:	f7fe fd2b 	bl	8018830 <USBD_LL_DataInStage>
}
 8019dda:	bf00      	nop
 8019ddc:	3708      	adds	r7, #8
 8019dde:	46bd      	mov	sp, r7
 8019de0:	bd80      	pop	{r7, pc}

08019de2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019de2:	b580      	push	{r7, lr}
 8019de4:	b082      	sub	sp, #8
 8019de6:	af00      	add	r7, sp, #0
 8019de8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019df0:	4618      	mov	r0, r3
 8019df2:	f7fe fe3f 	bl	8018a74 <USBD_LL_SOF>
}
 8019df6:	bf00      	nop
 8019df8:	3708      	adds	r7, #8
 8019dfa:	46bd      	mov	sp, r7
 8019dfc:	bd80      	pop	{r7, pc}

08019dfe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019dfe:	b580      	push	{r7, lr}
 8019e00:	b084      	sub	sp, #16
 8019e02:	af00      	add	r7, sp, #0
 8019e04:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019e06:	2301      	movs	r3, #1
 8019e08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	68db      	ldr	r3, [r3, #12]
 8019e0e:	2b02      	cmp	r3, #2
 8019e10:	d001      	beq.n	8019e16 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8019e12:	f7e9 f807 	bl	8002e24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019e1c:	7bfa      	ldrb	r2, [r7, #15]
 8019e1e:	4611      	mov	r1, r2
 8019e20:	4618      	mov	r0, r3
 8019e22:	f7fe fde9 	bl	80189f8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019e2c:	4618      	mov	r0, r3
 8019e2e:	f7fe fd95 	bl	801895c <USBD_LL_Reset>
}
 8019e32:	bf00      	nop
 8019e34:	3710      	adds	r7, #16
 8019e36:	46bd      	mov	sp, r7
 8019e38:	bd80      	pop	{r7, pc}
	...

08019e3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019e3c:	b580      	push	{r7, lr}
 8019e3e:	b082      	sub	sp, #8
 8019e40:	af00      	add	r7, sp, #0
 8019e42:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019e4c:	681b      	ldr	r3, [r3, #0]
 8019e4e:	687a      	ldr	r2, [r7, #4]
 8019e50:	6812      	ldr	r2, [r2, #0]
 8019e52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019e56:	f043 0301 	orr.w	r3, r3, #1
 8019e5a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019e62:	4618      	mov	r0, r3
 8019e64:	f7fe fdd8 	bl	8018a18 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	6a1b      	ldr	r3, [r3, #32]
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	d005      	beq.n	8019e7c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019e70:	4b04      	ldr	r3, [pc, #16]	; (8019e84 <HAL_PCD_SuspendCallback+0x48>)
 8019e72:	691b      	ldr	r3, [r3, #16]
 8019e74:	4a03      	ldr	r2, [pc, #12]	; (8019e84 <HAL_PCD_SuspendCallback+0x48>)
 8019e76:	f043 0306 	orr.w	r3, r3, #6
 8019e7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019e7c:	bf00      	nop
 8019e7e:	3708      	adds	r7, #8
 8019e80:	46bd      	mov	sp, r7
 8019e82:	bd80      	pop	{r7, pc}
 8019e84:	e000ed00 	.word	0xe000ed00

08019e88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019e88:	b580      	push	{r7, lr}
 8019e8a:	b082      	sub	sp, #8
 8019e8c:	af00      	add	r7, sp, #0
 8019e8e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	687a      	ldr	r2, [r7, #4]
 8019e9c:	6812      	ldr	r2, [r2, #0]
 8019e9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019ea2:	f023 0301 	bic.w	r3, r3, #1
 8019ea6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	6a1b      	ldr	r3, [r3, #32]
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d007      	beq.n	8019ec0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019eb0:	4b08      	ldr	r3, [pc, #32]	; (8019ed4 <HAL_PCD_ResumeCallback+0x4c>)
 8019eb2:	691b      	ldr	r3, [r3, #16]
 8019eb4:	4a07      	ldr	r2, [pc, #28]	; (8019ed4 <HAL_PCD_ResumeCallback+0x4c>)
 8019eb6:	f023 0306 	bic.w	r3, r3, #6
 8019eba:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8019ebc:	f000 faf6 	bl	801a4ac <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019ec6:	4618      	mov	r0, r3
 8019ec8:	f7fe fdbc 	bl	8018a44 <USBD_LL_Resume>
}
 8019ecc:	bf00      	nop
 8019ece:	3708      	adds	r7, #8
 8019ed0:	46bd      	mov	sp, r7
 8019ed2:	bd80      	pop	{r7, pc}
 8019ed4:	e000ed00 	.word	0xe000ed00

08019ed8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019ed8:	b580      	push	{r7, lr}
 8019eda:	b082      	sub	sp, #8
 8019edc:	af00      	add	r7, sp, #0
 8019ede:	6078      	str	r0, [r7, #4]
 8019ee0:	460b      	mov	r3, r1
 8019ee2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019eea:	78fa      	ldrb	r2, [r7, #3]
 8019eec:	4611      	mov	r1, r2
 8019eee:	4618      	mov	r0, r3
 8019ef0:	f7fe fe08 	bl	8018b04 <USBD_LL_IsoOUTIncomplete>
}
 8019ef4:	bf00      	nop
 8019ef6:	3708      	adds	r7, #8
 8019ef8:	46bd      	mov	sp, r7
 8019efa:	bd80      	pop	{r7, pc}

08019efc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019efc:	b580      	push	{r7, lr}
 8019efe:	b082      	sub	sp, #8
 8019f00:	af00      	add	r7, sp, #0
 8019f02:	6078      	str	r0, [r7, #4]
 8019f04:	460b      	mov	r3, r1
 8019f06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019f0e:	78fa      	ldrb	r2, [r7, #3]
 8019f10:	4611      	mov	r1, r2
 8019f12:	4618      	mov	r0, r3
 8019f14:	f7fe fdd0 	bl	8018ab8 <USBD_LL_IsoINIncomplete>
}
 8019f18:	bf00      	nop
 8019f1a:	3708      	adds	r7, #8
 8019f1c:	46bd      	mov	sp, r7
 8019f1e:	bd80      	pop	{r7, pc}

08019f20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019f20:	b580      	push	{r7, lr}
 8019f22:	b082      	sub	sp, #8
 8019f24:	af00      	add	r7, sp, #0
 8019f26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019f2e:	4618      	mov	r0, r3
 8019f30:	f7fe fe0e 	bl	8018b50 <USBD_LL_DevConnected>
}
 8019f34:	bf00      	nop
 8019f36:	3708      	adds	r7, #8
 8019f38:	46bd      	mov	sp, r7
 8019f3a:	bd80      	pop	{r7, pc}

08019f3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019f3c:	b580      	push	{r7, lr}
 8019f3e:	b082      	sub	sp, #8
 8019f40:	af00      	add	r7, sp, #0
 8019f42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019f4a:	4618      	mov	r0, r3
 8019f4c:	f7fe fe0b 	bl	8018b66 <USBD_LL_DevDisconnected>
}
 8019f50:	bf00      	nop
 8019f52:	3708      	adds	r7, #8
 8019f54:	46bd      	mov	sp, r7
 8019f56:	bd80      	pop	{r7, pc}

08019f58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019f58:	b580      	push	{r7, lr}
 8019f5a:	b082      	sub	sp, #8
 8019f5c:	af00      	add	r7, sp, #0
 8019f5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	781b      	ldrb	r3, [r3, #0]
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	d13c      	bne.n	8019fe2 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019f68:	4a20      	ldr	r2, [pc, #128]	; (8019fec <USBD_LL_Init+0x94>)
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	4a1e      	ldr	r2, [pc, #120]	; (8019fec <USBD_LL_Init+0x94>)
 8019f74:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019f78:	4b1c      	ldr	r3, [pc, #112]	; (8019fec <USBD_LL_Init+0x94>)
 8019f7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8019f7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8019f80:	4b1a      	ldr	r3, [pc, #104]	; (8019fec <USBD_LL_Init+0x94>)
 8019f82:	2206      	movs	r2, #6
 8019f84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8019f86:	4b19      	ldr	r3, [pc, #100]	; (8019fec <USBD_LL_Init+0x94>)
 8019f88:	2202      	movs	r2, #2
 8019f8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019f8c:	4b17      	ldr	r3, [pc, #92]	; (8019fec <USBD_LL_Init+0x94>)
 8019f8e:	2202      	movs	r2, #2
 8019f90:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8019f92:	4b16      	ldr	r3, [pc, #88]	; (8019fec <USBD_LL_Init+0x94>)
 8019f94:	2200      	movs	r2, #0
 8019f96:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8019f98:	4b14      	ldr	r3, [pc, #80]	; (8019fec <USBD_LL_Init+0x94>)
 8019f9a:	2200      	movs	r2, #0
 8019f9c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8019f9e:	4b13      	ldr	r3, [pc, #76]	; (8019fec <USBD_LL_Init+0x94>)
 8019fa0:	2200      	movs	r2, #0
 8019fa2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8019fa4:	4b11      	ldr	r3, [pc, #68]	; (8019fec <USBD_LL_Init+0x94>)
 8019fa6:	2200      	movs	r2, #0
 8019fa8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8019faa:	4b10      	ldr	r3, [pc, #64]	; (8019fec <USBD_LL_Init+0x94>)
 8019fac:	2200      	movs	r2, #0
 8019fae:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8019fb0:	4b0e      	ldr	r3, [pc, #56]	; (8019fec <USBD_LL_Init+0x94>)
 8019fb2:	2200      	movs	r2, #0
 8019fb4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8019fb6:	480d      	ldr	r0, [pc, #52]	; (8019fec <USBD_LL_Init+0x94>)
 8019fb8:	f7f5 fa73 	bl	800f4a2 <HAL_PCD_Init>
 8019fbc:	4603      	mov	r3, r0
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d001      	beq.n	8019fc6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8019fc2:	f7e8 ff2f 	bl	8002e24 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8019fc6:	2180      	movs	r1, #128	; 0x80
 8019fc8:	4808      	ldr	r0, [pc, #32]	; (8019fec <USBD_LL_Init+0x94>)
 8019fca:	f7f6 fbf4 	bl	80107b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8019fce:	2240      	movs	r2, #64	; 0x40
 8019fd0:	2100      	movs	r1, #0
 8019fd2:	4806      	ldr	r0, [pc, #24]	; (8019fec <USBD_LL_Init+0x94>)
 8019fd4:	f7f6 fba8 	bl	8010728 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8019fd8:	2280      	movs	r2, #128	; 0x80
 8019fda:	2101      	movs	r1, #1
 8019fdc:	4803      	ldr	r0, [pc, #12]	; (8019fec <USBD_LL_Init+0x94>)
 8019fde:	f7f6 fba3 	bl	8010728 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8019fe2:	2300      	movs	r3, #0
}
 8019fe4:	4618      	mov	r0, r3
 8019fe6:	3708      	adds	r7, #8
 8019fe8:	46bd      	mov	sp, r7
 8019fea:	bd80      	pop	{r7, pc}
 8019fec:	200030f4 	.word	0x200030f4

08019ff0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019ff0:	b580      	push	{r7, lr}
 8019ff2:	b084      	sub	sp, #16
 8019ff4:	af00      	add	r7, sp, #0
 8019ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ff8:	2300      	movs	r3, #0
 8019ffa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019ffc:	2300      	movs	r3, #0
 8019ffe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a006:	4618      	mov	r0, r3
 801a008:	f7f5 fb6f 	bl	800f6ea <HAL_PCD_Start>
 801a00c:	4603      	mov	r3, r0
 801a00e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801a010:	7bbb      	ldrb	r3, [r7, #14]
 801a012:	2b03      	cmp	r3, #3
 801a014:	d816      	bhi.n	801a044 <USBD_LL_Start+0x54>
 801a016:	a201      	add	r2, pc, #4	; (adr r2, 801a01c <USBD_LL_Start+0x2c>)
 801a018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a01c:	0801a02d 	.word	0x0801a02d
 801a020:	0801a033 	.word	0x0801a033
 801a024:	0801a039 	.word	0x0801a039
 801a028:	0801a03f 	.word	0x0801a03f
    case HAL_OK :
      usb_status = USBD_OK;
 801a02c:	2300      	movs	r3, #0
 801a02e:	73fb      	strb	r3, [r7, #15]
    break;
 801a030:	e00b      	b.n	801a04a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a032:	2303      	movs	r3, #3
 801a034:	73fb      	strb	r3, [r7, #15]
    break;
 801a036:	e008      	b.n	801a04a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a038:	2301      	movs	r3, #1
 801a03a:	73fb      	strb	r3, [r7, #15]
    break;
 801a03c:	e005      	b.n	801a04a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a03e:	2303      	movs	r3, #3
 801a040:	73fb      	strb	r3, [r7, #15]
    break;
 801a042:	e002      	b.n	801a04a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 801a044:	2303      	movs	r3, #3
 801a046:	73fb      	strb	r3, [r7, #15]
    break;
 801a048:	bf00      	nop
  }
  return usb_status;
 801a04a:	7bfb      	ldrb	r3, [r7, #15]
}
 801a04c:	4618      	mov	r0, r3
 801a04e:	3710      	adds	r7, #16
 801a050:	46bd      	mov	sp, r7
 801a052:	bd80      	pop	{r7, pc}

0801a054 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801a054:	b580      	push	{r7, lr}
 801a056:	b084      	sub	sp, #16
 801a058:	af00      	add	r7, sp, #0
 801a05a:	6078      	str	r0, [r7, #4]
 801a05c:	4608      	mov	r0, r1
 801a05e:	4611      	mov	r1, r2
 801a060:	461a      	mov	r2, r3
 801a062:	4603      	mov	r3, r0
 801a064:	70fb      	strb	r3, [r7, #3]
 801a066:	460b      	mov	r3, r1
 801a068:	70bb      	strb	r3, [r7, #2]
 801a06a:	4613      	mov	r3, r2
 801a06c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a06e:	2300      	movs	r3, #0
 801a070:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a072:	2300      	movs	r3, #0
 801a074:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a07c:	78bb      	ldrb	r3, [r7, #2]
 801a07e:	883a      	ldrh	r2, [r7, #0]
 801a080:	78f9      	ldrb	r1, [r7, #3]
 801a082:	f7f6 f819 	bl	80100b8 <HAL_PCD_EP_Open>
 801a086:	4603      	mov	r3, r0
 801a088:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801a08a:	7bbb      	ldrb	r3, [r7, #14]
 801a08c:	2b03      	cmp	r3, #3
 801a08e:	d817      	bhi.n	801a0c0 <USBD_LL_OpenEP+0x6c>
 801a090:	a201      	add	r2, pc, #4	; (adr r2, 801a098 <USBD_LL_OpenEP+0x44>)
 801a092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a096:	bf00      	nop
 801a098:	0801a0a9 	.word	0x0801a0a9
 801a09c:	0801a0af 	.word	0x0801a0af
 801a0a0:	0801a0b5 	.word	0x0801a0b5
 801a0a4:	0801a0bb 	.word	0x0801a0bb
    case HAL_OK :
      usb_status = USBD_OK;
 801a0a8:	2300      	movs	r3, #0
 801a0aa:	73fb      	strb	r3, [r7, #15]
    break;
 801a0ac:	e00b      	b.n	801a0c6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a0ae:	2303      	movs	r3, #3
 801a0b0:	73fb      	strb	r3, [r7, #15]
    break;
 801a0b2:	e008      	b.n	801a0c6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a0b4:	2301      	movs	r3, #1
 801a0b6:	73fb      	strb	r3, [r7, #15]
    break;
 801a0b8:	e005      	b.n	801a0c6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a0ba:	2303      	movs	r3, #3
 801a0bc:	73fb      	strb	r3, [r7, #15]
    break;
 801a0be:	e002      	b.n	801a0c6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 801a0c0:	2303      	movs	r3, #3
 801a0c2:	73fb      	strb	r3, [r7, #15]
    break;
 801a0c4:	bf00      	nop
  }
  return usb_status;
 801a0c6:	7bfb      	ldrb	r3, [r7, #15]
}
 801a0c8:	4618      	mov	r0, r3
 801a0ca:	3710      	adds	r7, #16
 801a0cc:	46bd      	mov	sp, r7
 801a0ce:	bd80      	pop	{r7, pc}

0801a0d0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a0d0:	b580      	push	{r7, lr}
 801a0d2:	b084      	sub	sp, #16
 801a0d4:	af00      	add	r7, sp, #0
 801a0d6:	6078      	str	r0, [r7, #4]
 801a0d8:	460b      	mov	r3, r1
 801a0da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a0dc:	2300      	movs	r3, #0
 801a0de:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a0e0:	2300      	movs	r3, #0
 801a0e2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a0ea:	78fa      	ldrb	r2, [r7, #3]
 801a0ec:	4611      	mov	r1, r2
 801a0ee:	4618      	mov	r0, r3
 801a0f0:	f7f6 f84a 	bl	8010188 <HAL_PCD_EP_Close>
 801a0f4:	4603      	mov	r3, r0
 801a0f6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801a0f8:	7bbb      	ldrb	r3, [r7, #14]
 801a0fa:	2b03      	cmp	r3, #3
 801a0fc:	d816      	bhi.n	801a12c <USBD_LL_CloseEP+0x5c>
 801a0fe:	a201      	add	r2, pc, #4	; (adr r2, 801a104 <USBD_LL_CloseEP+0x34>)
 801a100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a104:	0801a115 	.word	0x0801a115
 801a108:	0801a11b 	.word	0x0801a11b
 801a10c:	0801a121 	.word	0x0801a121
 801a110:	0801a127 	.word	0x0801a127
    case HAL_OK :
      usb_status = USBD_OK;
 801a114:	2300      	movs	r3, #0
 801a116:	73fb      	strb	r3, [r7, #15]
    break;
 801a118:	e00b      	b.n	801a132 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a11a:	2303      	movs	r3, #3
 801a11c:	73fb      	strb	r3, [r7, #15]
    break;
 801a11e:	e008      	b.n	801a132 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a120:	2301      	movs	r3, #1
 801a122:	73fb      	strb	r3, [r7, #15]
    break;
 801a124:	e005      	b.n	801a132 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a126:	2303      	movs	r3, #3
 801a128:	73fb      	strb	r3, [r7, #15]
    break;
 801a12a:	e002      	b.n	801a132 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801a12c:	2303      	movs	r3, #3
 801a12e:	73fb      	strb	r3, [r7, #15]
    break;
 801a130:	bf00      	nop
  }
  return usb_status;
 801a132:	7bfb      	ldrb	r3, [r7, #15]
}
 801a134:	4618      	mov	r0, r3
 801a136:	3710      	adds	r7, #16
 801a138:	46bd      	mov	sp, r7
 801a13a:	bd80      	pop	{r7, pc}

0801a13c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a13c:	b580      	push	{r7, lr}
 801a13e:	b084      	sub	sp, #16
 801a140:	af00      	add	r7, sp, #0
 801a142:	6078      	str	r0, [r7, #4]
 801a144:	460b      	mov	r3, r1
 801a146:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a148:	2300      	movs	r3, #0
 801a14a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a14c:	2300      	movs	r3, #0
 801a14e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a156:	78fa      	ldrb	r2, [r7, #3]
 801a158:	4611      	mov	r1, r2
 801a15a:	4618      	mov	r0, r3
 801a15c:	f7f6 f8f1 	bl	8010342 <HAL_PCD_EP_SetStall>
 801a160:	4603      	mov	r3, r0
 801a162:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801a164:	7bbb      	ldrb	r3, [r7, #14]
 801a166:	2b03      	cmp	r3, #3
 801a168:	d816      	bhi.n	801a198 <USBD_LL_StallEP+0x5c>
 801a16a:	a201      	add	r2, pc, #4	; (adr r2, 801a170 <USBD_LL_StallEP+0x34>)
 801a16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a170:	0801a181 	.word	0x0801a181
 801a174:	0801a187 	.word	0x0801a187
 801a178:	0801a18d 	.word	0x0801a18d
 801a17c:	0801a193 	.word	0x0801a193
    case HAL_OK :
      usb_status = USBD_OK;
 801a180:	2300      	movs	r3, #0
 801a182:	73fb      	strb	r3, [r7, #15]
    break;
 801a184:	e00b      	b.n	801a19e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a186:	2303      	movs	r3, #3
 801a188:	73fb      	strb	r3, [r7, #15]
    break;
 801a18a:	e008      	b.n	801a19e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a18c:	2301      	movs	r3, #1
 801a18e:	73fb      	strb	r3, [r7, #15]
    break;
 801a190:	e005      	b.n	801a19e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a192:	2303      	movs	r3, #3
 801a194:	73fb      	strb	r3, [r7, #15]
    break;
 801a196:	e002      	b.n	801a19e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801a198:	2303      	movs	r3, #3
 801a19a:	73fb      	strb	r3, [r7, #15]
    break;
 801a19c:	bf00      	nop
  }
  return usb_status;
 801a19e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a1a0:	4618      	mov	r0, r3
 801a1a2:	3710      	adds	r7, #16
 801a1a4:	46bd      	mov	sp, r7
 801a1a6:	bd80      	pop	{r7, pc}

0801a1a8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a1a8:	b580      	push	{r7, lr}
 801a1aa:	b084      	sub	sp, #16
 801a1ac:	af00      	add	r7, sp, #0
 801a1ae:	6078      	str	r0, [r7, #4]
 801a1b0:	460b      	mov	r3, r1
 801a1b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a1b4:	2300      	movs	r3, #0
 801a1b6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a1b8:	2300      	movs	r3, #0
 801a1ba:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a1c2:	78fa      	ldrb	r2, [r7, #3]
 801a1c4:	4611      	mov	r1, r2
 801a1c6:	4618      	mov	r0, r3
 801a1c8:	f7f6 f91d 	bl	8010406 <HAL_PCD_EP_ClrStall>
 801a1cc:	4603      	mov	r3, r0
 801a1ce:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801a1d0:	7bbb      	ldrb	r3, [r7, #14]
 801a1d2:	2b03      	cmp	r3, #3
 801a1d4:	d816      	bhi.n	801a204 <USBD_LL_ClearStallEP+0x5c>
 801a1d6:	a201      	add	r2, pc, #4	; (adr r2, 801a1dc <USBD_LL_ClearStallEP+0x34>)
 801a1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a1dc:	0801a1ed 	.word	0x0801a1ed
 801a1e0:	0801a1f3 	.word	0x0801a1f3
 801a1e4:	0801a1f9 	.word	0x0801a1f9
 801a1e8:	0801a1ff 	.word	0x0801a1ff
    case HAL_OK :
      usb_status = USBD_OK;
 801a1ec:	2300      	movs	r3, #0
 801a1ee:	73fb      	strb	r3, [r7, #15]
    break;
 801a1f0:	e00b      	b.n	801a20a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a1f2:	2303      	movs	r3, #3
 801a1f4:	73fb      	strb	r3, [r7, #15]
    break;
 801a1f6:	e008      	b.n	801a20a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a1f8:	2301      	movs	r3, #1
 801a1fa:	73fb      	strb	r3, [r7, #15]
    break;
 801a1fc:	e005      	b.n	801a20a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a1fe:	2303      	movs	r3, #3
 801a200:	73fb      	strb	r3, [r7, #15]
    break;
 801a202:	e002      	b.n	801a20a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801a204:	2303      	movs	r3, #3
 801a206:	73fb      	strb	r3, [r7, #15]
    break;
 801a208:	bf00      	nop
  }
  return usb_status;
 801a20a:	7bfb      	ldrb	r3, [r7, #15]
}
 801a20c:	4618      	mov	r0, r3
 801a20e:	3710      	adds	r7, #16
 801a210:	46bd      	mov	sp, r7
 801a212:	bd80      	pop	{r7, pc}

0801a214 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a214:	b480      	push	{r7}
 801a216:	b085      	sub	sp, #20
 801a218:	af00      	add	r7, sp, #0
 801a21a:	6078      	str	r0, [r7, #4]
 801a21c:	460b      	mov	r3, r1
 801a21e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801a220:	687b      	ldr	r3, [r7, #4]
 801a222:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a226:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801a228:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a22c:	2b00      	cmp	r3, #0
 801a22e:	da0b      	bge.n	801a248 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801a230:	78fb      	ldrb	r3, [r7, #3]
 801a232:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a236:	68f9      	ldr	r1, [r7, #12]
 801a238:	4613      	mov	r3, r2
 801a23a:	00db      	lsls	r3, r3, #3
 801a23c:	4413      	add	r3, r2
 801a23e:	009b      	lsls	r3, r3, #2
 801a240:	440b      	add	r3, r1
 801a242:	333e      	adds	r3, #62	; 0x3e
 801a244:	781b      	ldrb	r3, [r3, #0]
 801a246:	e00b      	b.n	801a260 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801a248:	78fb      	ldrb	r3, [r7, #3]
 801a24a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a24e:	68f9      	ldr	r1, [r7, #12]
 801a250:	4613      	mov	r3, r2
 801a252:	00db      	lsls	r3, r3, #3
 801a254:	4413      	add	r3, r2
 801a256:	009b      	lsls	r3, r3, #2
 801a258:	440b      	add	r3, r1
 801a25a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801a25e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a260:	4618      	mov	r0, r3
 801a262:	3714      	adds	r7, #20
 801a264:	46bd      	mov	sp, r7
 801a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a26a:	4770      	bx	lr

0801a26c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801a26c:	b580      	push	{r7, lr}
 801a26e:	b084      	sub	sp, #16
 801a270:	af00      	add	r7, sp, #0
 801a272:	6078      	str	r0, [r7, #4]
 801a274:	460b      	mov	r3, r1
 801a276:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a278:	2300      	movs	r3, #0
 801a27a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a27c:	2300      	movs	r3, #0
 801a27e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a286:	78fa      	ldrb	r2, [r7, #3]
 801a288:	4611      	mov	r1, r2
 801a28a:	4618      	mov	r0, r3
 801a28c:	f7f5 feef 	bl	801006e <HAL_PCD_SetAddress>
 801a290:	4603      	mov	r3, r0
 801a292:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801a294:	7bbb      	ldrb	r3, [r7, #14]
 801a296:	2b03      	cmp	r3, #3
 801a298:	d816      	bhi.n	801a2c8 <USBD_LL_SetUSBAddress+0x5c>
 801a29a:	a201      	add	r2, pc, #4	; (adr r2, 801a2a0 <USBD_LL_SetUSBAddress+0x34>)
 801a29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a2a0:	0801a2b1 	.word	0x0801a2b1
 801a2a4:	0801a2b7 	.word	0x0801a2b7
 801a2a8:	0801a2bd 	.word	0x0801a2bd
 801a2ac:	0801a2c3 	.word	0x0801a2c3
    case HAL_OK :
      usb_status = USBD_OK;
 801a2b0:	2300      	movs	r3, #0
 801a2b2:	73fb      	strb	r3, [r7, #15]
    break;
 801a2b4:	e00b      	b.n	801a2ce <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a2b6:	2303      	movs	r3, #3
 801a2b8:	73fb      	strb	r3, [r7, #15]
    break;
 801a2ba:	e008      	b.n	801a2ce <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a2bc:	2301      	movs	r3, #1
 801a2be:	73fb      	strb	r3, [r7, #15]
    break;
 801a2c0:	e005      	b.n	801a2ce <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a2c2:	2303      	movs	r3, #3
 801a2c4:	73fb      	strb	r3, [r7, #15]
    break;
 801a2c6:	e002      	b.n	801a2ce <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 801a2c8:	2303      	movs	r3, #3
 801a2ca:	73fb      	strb	r3, [r7, #15]
    break;
 801a2cc:	bf00      	nop
  }
  return usb_status;
 801a2ce:	7bfb      	ldrb	r3, [r7, #15]
}
 801a2d0:	4618      	mov	r0, r3
 801a2d2:	3710      	adds	r7, #16
 801a2d4:	46bd      	mov	sp, r7
 801a2d6:	bd80      	pop	{r7, pc}

0801a2d8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a2d8:	b580      	push	{r7, lr}
 801a2da:	b086      	sub	sp, #24
 801a2dc:	af00      	add	r7, sp, #0
 801a2de:	60f8      	str	r0, [r7, #12]
 801a2e0:	607a      	str	r2, [r7, #4]
 801a2e2:	603b      	str	r3, [r7, #0]
 801a2e4:	460b      	mov	r3, r1
 801a2e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a2e8:	2300      	movs	r3, #0
 801a2ea:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a2ec:	2300      	movs	r3, #0
 801a2ee:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801a2f0:	68fb      	ldr	r3, [r7, #12]
 801a2f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a2f6:	7af9      	ldrb	r1, [r7, #11]
 801a2f8:	683b      	ldr	r3, [r7, #0]
 801a2fa:	687a      	ldr	r2, [r7, #4]
 801a2fc:	f7f5 ffe4 	bl	80102c8 <HAL_PCD_EP_Transmit>
 801a300:	4603      	mov	r3, r0
 801a302:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 801a304:	7dbb      	ldrb	r3, [r7, #22]
 801a306:	2b03      	cmp	r3, #3
 801a308:	d816      	bhi.n	801a338 <USBD_LL_Transmit+0x60>
 801a30a:	a201      	add	r2, pc, #4	; (adr r2, 801a310 <USBD_LL_Transmit+0x38>)
 801a30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a310:	0801a321 	.word	0x0801a321
 801a314:	0801a327 	.word	0x0801a327
 801a318:	0801a32d 	.word	0x0801a32d
 801a31c:	0801a333 	.word	0x0801a333
    case HAL_OK :
      usb_status = USBD_OK;
 801a320:	2300      	movs	r3, #0
 801a322:	75fb      	strb	r3, [r7, #23]
    break;
 801a324:	e00b      	b.n	801a33e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a326:	2303      	movs	r3, #3
 801a328:	75fb      	strb	r3, [r7, #23]
    break;
 801a32a:	e008      	b.n	801a33e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a32c:	2301      	movs	r3, #1
 801a32e:	75fb      	strb	r3, [r7, #23]
    break;
 801a330:	e005      	b.n	801a33e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a332:	2303      	movs	r3, #3
 801a334:	75fb      	strb	r3, [r7, #23]
    break;
 801a336:	e002      	b.n	801a33e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 801a338:	2303      	movs	r3, #3
 801a33a:	75fb      	strb	r3, [r7, #23]
    break;
 801a33c:	bf00      	nop
  }
  return usb_status;
 801a33e:	7dfb      	ldrb	r3, [r7, #23]
}
 801a340:	4618      	mov	r0, r3
 801a342:	3718      	adds	r7, #24
 801a344:	46bd      	mov	sp, r7
 801a346:	bd80      	pop	{r7, pc}

0801a348 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a348:	b580      	push	{r7, lr}
 801a34a:	b086      	sub	sp, #24
 801a34c:	af00      	add	r7, sp, #0
 801a34e:	60f8      	str	r0, [r7, #12]
 801a350:	607a      	str	r2, [r7, #4]
 801a352:	603b      	str	r3, [r7, #0]
 801a354:	460b      	mov	r3, r1
 801a356:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a358:	2300      	movs	r3, #0
 801a35a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a35c:	2300      	movs	r3, #0
 801a35e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801a360:	68fb      	ldr	r3, [r7, #12]
 801a362:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a366:	7af9      	ldrb	r1, [r7, #11]
 801a368:	683b      	ldr	r3, [r7, #0]
 801a36a:	687a      	ldr	r2, [r7, #4]
 801a36c:	f7f5 ff56 	bl	801021c <HAL_PCD_EP_Receive>
 801a370:	4603      	mov	r3, r0
 801a372:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 801a374:	7dbb      	ldrb	r3, [r7, #22]
 801a376:	2b03      	cmp	r3, #3
 801a378:	d816      	bhi.n	801a3a8 <USBD_LL_PrepareReceive+0x60>
 801a37a:	a201      	add	r2, pc, #4	; (adr r2, 801a380 <USBD_LL_PrepareReceive+0x38>)
 801a37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a380:	0801a391 	.word	0x0801a391
 801a384:	0801a397 	.word	0x0801a397
 801a388:	0801a39d 	.word	0x0801a39d
 801a38c:	0801a3a3 	.word	0x0801a3a3
    case HAL_OK :
      usb_status = USBD_OK;
 801a390:	2300      	movs	r3, #0
 801a392:	75fb      	strb	r3, [r7, #23]
    break;
 801a394:	e00b      	b.n	801a3ae <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a396:	2303      	movs	r3, #3
 801a398:	75fb      	strb	r3, [r7, #23]
    break;
 801a39a:	e008      	b.n	801a3ae <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a39c:	2301      	movs	r3, #1
 801a39e:	75fb      	strb	r3, [r7, #23]
    break;
 801a3a0:	e005      	b.n	801a3ae <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a3a2:	2303      	movs	r3, #3
 801a3a4:	75fb      	strb	r3, [r7, #23]
    break;
 801a3a6:	e002      	b.n	801a3ae <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 801a3a8:	2303      	movs	r3, #3
 801a3aa:	75fb      	strb	r3, [r7, #23]
    break;
 801a3ac:	bf00      	nop
  }
  return usb_status;
 801a3ae:	7dfb      	ldrb	r3, [r7, #23]
}
 801a3b0:	4618      	mov	r0, r3
 801a3b2:	3718      	adds	r7, #24
 801a3b4:	46bd      	mov	sp, r7
 801a3b6:	bd80      	pop	{r7, pc}

0801a3b8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a3b8:	b580      	push	{r7, lr}
 801a3ba:	b082      	sub	sp, #8
 801a3bc:	af00      	add	r7, sp, #0
 801a3be:	6078      	str	r0, [r7, #4]
 801a3c0:	460b      	mov	r3, r1
 801a3c2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a3ca:	78fa      	ldrb	r2, [r7, #3]
 801a3cc:	4611      	mov	r1, r2
 801a3ce:	4618      	mov	r0, r3
 801a3d0:	f7f5 ff62 	bl	8010298 <HAL_PCD_EP_GetRxCount>
 801a3d4:	4603      	mov	r3, r0
}
 801a3d6:	4618      	mov	r0, r3
 801a3d8:	3708      	adds	r7, #8
 801a3da:	46bd      	mov	sp, r7
 801a3dc:	bd80      	pop	{r7, pc}
	...

0801a3e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801a3e0:	b580      	push	{r7, lr}
 801a3e2:	b082      	sub	sp, #8
 801a3e4:	af00      	add	r7, sp, #0
 801a3e6:	6078      	str	r0, [r7, #4]
 801a3e8:	460b      	mov	r3, r1
 801a3ea:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801a3ec:	78fb      	ldrb	r3, [r7, #3]
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	d002      	beq.n	801a3f8 <HAL_PCDEx_LPM_Callback+0x18>
 801a3f2:	2b01      	cmp	r3, #1
 801a3f4:	d01f      	beq.n	801a436 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801a3f6:	e03b      	b.n	801a470 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	6a1b      	ldr	r3, [r3, #32]
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	d007      	beq.n	801a410 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801a400:	f000 f854 	bl	801a4ac <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a404:	4b1c      	ldr	r3, [pc, #112]	; (801a478 <HAL_PCDEx_LPM_Callback+0x98>)
 801a406:	691b      	ldr	r3, [r3, #16]
 801a408:	4a1b      	ldr	r2, [pc, #108]	; (801a478 <HAL_PCDEx_LPM_Callback+0x98>)
 801a40a:	f023 0306 	bic.w	r3, r3, #6
 801a40e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	681b      	ldr	r3, [r3, #0]
 801a414:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a418:	681b      	ldr	r3, [r3, #0]
 801a41a:	687a      	ldr	r2, [r7, #4]
 801a41c:	6812      	ldr	r2, [r2, #0]
 801a41e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a422:	f023 0301 	bic.w	r3, r3, #1
 801a426:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a42e:	4618      	mov	r0, r3
 801a430:	f7fe fb08 	bl	8018a44 <USBD_LL_Resume>
    break;
 801a434:	e01c      	b.n	801a470 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	687a      	ldr	r2, [r7, #4]
 801a442:	6812      	ldr	r2, [r2, #0]
 801a444:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a448:	f043 0301 	orr.w	r3, r3, #1
 801a44c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a454:	4618      	mov	r0, r3
 801a456:	f7fe fadf 	bl	8018a18 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	6a1b      	ldr	r3, [r3, #32]
 801a45e:	2b00      	cmp	r3, #0
 801a460:	d005      	beq.n	801a46e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a462:	4b05      	ldr	r3, [pc, #20]	; (801a478 <HAL_PCDEx_LPM_Callback+0x98>)
 801a464:	691b      	ldr	r3, [r3, #16]
 801a466:	4a04      	ldr	r2, [pc, #16]	; (801a478 <HAL_PCDEx_LPM_Callback+0x98>)
 801a468:	f043 0306 	orr.w	r3, r3, #6
 801a46c:	6113      	str	r3, [r2, #16]
    break;
 801a46e:	bf00      	nop
}
 801a470:	bf00      	nop
 801a472:	3708      	adds	r7, #8
 801a474:	46bd      	mov	sp, r7
 801a476:	bd80      	pop	{r7, pc}
 801a478:	e000ed00 	.word	0xe000ed00

0801a47c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801a47c:	b480      	push	{r7}
 801a47e:	b083      	sub	sp, #12
 801a480:	af00      	add	r7, sp, #0
 801a482:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801a484:	4b03      	ldr	r3, [pc, #12]	; (801a494 <USBD_static_malloc+0x18>)
}
 801a486:	4618      	mov	r0, r3
 801a488:	370c      	adds	r7, #12
 801a48a:	46bd      	mov	sp, r7
 801a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a490:	4770      	bx	lr
 801a492:	bf00      	nop
 801a494:	20003600 	.word	0x20003600

0801a498 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801a498:	b480      	push	{r7}
 801a49a:	b083      	sub	sp, #12
 801a49c:	af00      	add	r7, sp, #0
 801a49e:	6078      	str	r0, [r7, #4]

}
 801a4a0:	bf00      	nop
 801a4a2:	370c      	adds	r7, #12
 801a4a4:	46bd      	mov	sp, r7
 801a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4aa:	4770      	bx	lr

0801a4ac <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801a4ac:	b580      	push	{r7, lr}
 801a4ae:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801a4b0:	f7e8 f9e6 	bl	8002880 <SystemClock_Config>
}
 801a4b4:	bf00      	nop
 801a4b6:	bd80      	pop	{r7, pc}

0801a4b8 <__errno>:
 801a4b8:	4b01      	ldr	r3, [pc, #4]	; (801a4c0 <__errno+0x8>)
 801a4ba:	6818      	ldr	r0, [r3, #0]
 801a4bc:	4770      	bx	lr
 801a4be:	bf00      	nop
 801a4c0:	200006e8 	.word	0x200006e8

0801a4c4 <__libc_init_array>:
 801a4c4:	b570      	push	{r4, r5, r6, lr}
 801a4c6:	4d0d      	ldr	r5, [pc, #52]	; (801a4fc <__libc_init_array+0x38>)
 801a4c8:	4c0d      	ldr	r4, [pc, #52]	; (801a500 <__libc_init_array+0x3c>)
 801a4ca:	1b64      	subs	r4, r4, r5
 801a4cc:	10a4      	asrs	r4, r4, #2
 801a4ce:	2600      	movs	r6, #0
 801a4d0:	42a6      	cmp	r6, r4
 801a4d2:	d109      	bne.n	801a4e8 <__libc_init_array+0x24>
 801a4d4:	4d0b      	ldr	r5, [pc, #44]	; (801a504 <__libc_init_array+0x40>)
 801a4d6:	4c0c      	ldr	r4, [pc, #48]	; (801a508 <__libc_init_array+0x44>)
 801a4d8:	f001 fa08 	bl	801b8ec <_init>
 801a4dc:	1b64      	subs	r4, r4, r5
 801a4de:	10a4      	asrs	r4, r4, #2
 801a4e0:	2600      	movs	r6, #0
 801a4e2:	42a6      	cmp	r6, r4
 801a4e4:	d105      	bne.n	801a4f2 <__libc_init_array+0x2e>
 801a4e6:	bd70      	pop	{r4, r5, r6, pc}
 801a4e8:	f855 3b04 	ldr.w	r3, [r5], #4
 801a4ec:	4798      	blx	r3
 801a4ee:	3601      	adds	r6, #1
 801a4f0:	e7ee      	b.n	801a4d0 <__libc_init_array+0xc>
 801a4f2:	f855 3b04 	ldr.w	r3, [r5], #4
 801a4f6:	4798      	blx	r3
 801a4f8:	3601      	adds	r6, #1
 801a4fa:	e7f2      	b.n	801a4e2 <__libc_init_array+0x1e>
 801a4fc:	0801d9cc 	.word	0x0801d9cc
 801a500:	0801d9cc 	.word	0x0801d9cc
 801a504:	0801d9cc 	.word	0x0801d9cc
 801a508:	0801d9d0 	.word	0x0801d9d0

0801a50c <memcpy>:
 801a50c:	440a      	add	r2, r1
 801a50e:	4291      	cmp	r1, r2
 801a510:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a514:	d100      	bne.n	801a518 <memcpy+0xc>
 801a516:	4770      	bx	lr
 801a518:	b510      	push	{r4, lr}
 801a51a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a51e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a522:	4291      	cmp	r1, r2
 801a524:	d1f9      	bne.n	801a51a <memcpy+0xe>
 801a526:	bd10      	pop	{r4, pc}

0801a528 <memset>:
 801a528:	4402      	add	r2, r0
 801a52a:	4603      	mov	r3, r0
 801a52c:	4293      	cmp	r3, r2
 801a52e:	d100      	bne.n	801a532 <memset+0xa>
 801a530:	4770      	bx	lr
 801a532:	f803 1b01 	strb.w	r1, [r3], #1
 801a536:	e7f9      	b.n	801a52c <memset+0x4>

0801a538 <_free_r>:
 801a538:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a53a:	2900      	cmp	r1, #0
 801a53c:	d044      	beq.n	801a5c8 <_free_r+0x90>
 801a53e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a542:	9001      	str	r0, [sp, #4]
 801a544:	2b00      	cmp	r3, #0
 801a546:	f1a1 0404 	sub.w	r4, r1, #4
 801a54a:	bfb8      	it	lt
 801a54c:	18e4      	addlt	r4, r4, r3
 801a54e:	f000 fc79 	bl	801ae44 <__malloc_lock>
 801a552:	4a1e      	ldr	r2, [pc, #120]	; (801a5cc <_free_r+0x94>)
 801a554:	9801      	ldr	r0, [sp, #4]
 801a556:	6813      	ldr	r3, [r2, #0]
 801a558:	b933      	cbnz	r3, 801a568 <_free_r+0x30>
 801a55a:	6063      	str	r3, [r4, #4]
 801a55c:	6014      	str	r4, [r2, #0]
 801a55e:	b003      	add	sp, #12
 801a560:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a564:	f000 bc74 	b.w	801ae50 <__malloc_unlock>
 801a568:	42a3      	cmp	r3, r4
 801a56a:	d908      	bls.n	801a57e <_free_r+0x46>
 801a56c:	6825      	ldr	r5, [r4, #0]
 801a56e:	1961      	adds	r1, r4, r5
 801a570:	428b      	cmp	r3, r1
 801a572:	bf01      	itttt	eq
 801a574:	6819      	ldreq	r1, [r3, #0]
 801a576:	685b      	ldreq	r3, [r3, #4]
 801a578:	1949      	addeq	r1, r1, r5
 801a57a:	6021      	streq	r1, [r4, #0]
 801a57c:	e7ed      	b.n	801a55a <_free_r+0x22>
 801a57e:	461a      	mov	r2, r3
 801a580:	685b      	ldr	r3, [r3, #4]
 801a582:	b10b      	cbz	r3, 801a588 <_free_r+0x50>
 801a584:	42a3      	cmp	r3, r4
 801a586:	d9fa      	bls.n	801a57e <_free_r+0x46>
 801a588:	6811      	ldr	r1, [r2, #0]
 801a58a:	1855      	adds	r5, r2, r1
 801a58c:	42a5      	cmp	r5, r4
 801a58e:	d10b      	bne.n	801a5a8 <_free_r+0x70>
 801a590:	6824      	ldr	r4, [r4, #0]
 801a592:	4421      	add	r1, r4
 801a594:	1854      	adds	r4, r2, r1
 801a596:	42a3      	cmp	r3, r4
 801a598:	6011      	str	r1, [r2, #0]
 801a59a:	d1e0      	bne.n	801a55e <_free_r+0x26>
 801a59c:	681c      	ldr	r4, [r3, #0]
 801a59e:	685b      	ldr	r3, [r3, #4]
 801a5a0:	6053      	str	r3, [r2, #4]
 801a5a2:	4421      	add	r1, r4
 801a5a4:	6011      	str	r1, [r2, #0]
 801a5a6:	e7da      	b.n	801a55e <_free_r+0x26>
 801a5a8:	d902      	bls.n	801a5b0 <_free_r+0x78>
 801a5aa:	230c      	movs	r3, #12
 801a5ac:	6003      	str	r3, [r0, #0]
 801a5ae:	e7d6      	b.n	801a55e <_free_r+0x26>
 801a5b0:	6825      	ldr	r5, [r4, #0]
 801a5b2:	1961      	adds	r1, r4, r5
 801a5b4:	428b      	cmp	r3, r1
 801a5b6:	bf04      	itt	eq
 801a5b8:	6819      	ldreq	r1, [r3, #0]
 801a5ba:	685b      	ldreq	r3, [r3, #4]
 801a5bc:	6063      	str	r3, [r4, #4]
 801a5be:	bf04      	itt	eq
 801a5c0:	1949      	addeq	r1, r1, r5
 801a5c2:	6021      	streq	r1, [r4, #0]
 801a5c4:	6054      	str	r4, [r2, #4]
 801a5c6:	e7ca      	b.n	801a55e <_free_r+0x26>
 801a5c8:	b003      	add	sp, #12
 801a5ca:	bd30      	pop	{r4, r5, pc}
 801a5cc:	20003820 	.word	0x20003820

0801a5d0 <sbrk_aligned>:
 801a5d0:	b570      	push	{r4, r5, r6, lr}
 801a5d2:	4e0e      	ldr	r6, [pc, #56]	; (801a60c <sbrk_aligned+0x3c>)
 801a5d4:	460c      	mov	r4, r1
 801a5d6:	6831      	ldr	r1, [r6, #0]
 801a5d8:	4605      	mov	r5, r0
 801a5da:	b911      	cbnz	r1, 801a5e2 <sbrk_aligned+0x12>
 801a5dc:	f000 f91a 	bl	801a814 <_sbrk_r>
 801a5e0:	6030      	str	r0, [r6, #0]
 801a5e2:	4621      	mov	r1, r4
 801a5e4:	4628      	mov	r0, r5
 801a5e6:	f000 f915 	bl	801a814 <_sbrk_r>
 801a5ea:	1c43      	adds	r3, r0, #1
 801a5ec:	d00a      	beq.n	801a604 <sbrk_aligned+0x34>
 801a5ee:	1cc4      	adds	r4, r0, #3
 801a5f0:	f024 0403 	bic.w	r4, r4, #3
 801a5f4:	42a0      	cmp	r0, r4
 801a5f6:	d007      	beq.n	801a608 <sbrk_aligned+0x38>
 801a5f8:	1a21      	subs	r1, r4, r0
 801a5fa:	4628      	mov	r0, r5
 801a5fc:	f000 f90a 	bl	801a814 <_sbrk_r>
 801a600:	3001      	adds	r0, #1
 801a602:	d101      	bne.n	801a608 <sbrk_aligned+0x38>
 801a604:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801a608:	4620      	mov	r0, r4
 801a60a:	bd70      	pop	{r4, r5, r6, pc}
 801a60c:	20003824 	.word	0x20003824

0801a610 <_malloc_r>:
 801a610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a614:	1ccd      	adds	r5, r1, #3
 801a616:	f025 0503 	bic.w	r5, r5, #3
 801a61a:	3508      	adds	r5, #8
 801a61c:	2d0c      	cmp	r5, #12
 801a61e:	bf38      	it	cc
 801a620:	250c      	movcc	r5, #12
 801a622:	2d00      	cmp	r5, #0
 801a624:	4607      	mov	r7, r0
 801a626:	db01      	blt.n	801a62c <_malloc_r+0x1c>
 801a628:	42a9      	cmp	r1, r5
 801a62a:	d905      	bls.n	801a638 <_malloc_r+0x28>
 801a62c:	230c      	movs	r3, #12
 801a62e:	603b      	str	r3, [r7, #0]
 801a630:	2600      	movs	r6, #0
 801a632:	4630      	mov	r0, r6
 801a634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a638:	4e2e      	ldr	r6, [pc, #184]	; (801a6f4 <_malloc_r+0xe4>)
 801a63a:	f000 fc03 	bl	801ae44 <__malloc_lock>
 801a63e:	6833      	ldr	r3, [r6, #0]
 801a640:	461c      	mov	r4, r3
 801a642:	bb34      	cbnz	r4, 801a692 <_malloc_r+0x82>
 801a644:	4629      	mov	r1, r5
 801a646:	4638      	mov	r0, r7
 801a648:	f7ff ffc2 	bl	801a5d0 <sbrk_aligned>
 801a64c:	1c43      	adds	r3, r0, #1
 801a64e:	4604      	mov	r4, r0
 801a650:	d14d      	bne.n	801a6ee <_malloc_r+0xde>
 801a652:	6834      	ldr	r4, [r6, #0]
 801a654:	4626      	mov	r6, r4
 801a656:	2e00      	cmp	r6, #0
 801a658:	d140      	bne.n	801a6dc <_malloc_r+0xcc>
 801a65a:	6823      	ldr	r3, [r4, #0]
 801a65c:	4631      	mov	r1, r6
 801a65e:	4638      	mov	r0, r7
 801a660:	eb04 0803 	add.w	r8, r4, r3
 801a664:	f000 f8d6 	bl	801a814 <_sbrk_r>
 801a668:	4580      	cmp	r8, r0
 801a66a:	d13a      	bne.n	801a6e2 <_malloc_r+0xd2>
 801a66c:	6821      	ldr	r1, [r4, #0]
 801a66e:	3503      	adds	r5, #3
 801a670:	1a6d      	subs	r5, r5, r1
 801a672:	f025 0503 	bic.w	r5, r5, #3
 801a676:	3508      	adds	r5, #8
 801a678:	2d0c      	cmp	r5, #12
 801a67a:	bf38      	it	cc
 801a67c:	250c      	movcc	r5, #12
 801a67e:	4629      	mov	r1, r5
 801a680:	4638      	mov	r0, r7
 801a682:	f7ff ffa5 	bl	801a5d0 <sbrk_aligned>
 801a686:	3001      	adds	r0, #1
 801a688:	d02b      	beq.n	801a6e2 <_malloc_r+0xd2>
 801a68a:	6823      	ldr	r3, [r4, #0]
 801a68c:	442b      	add	r3, r5
 801a68e:	6023      	str	r3, [r4, #0]
 801a690:	e00e      	b.n	801a6b0 <_malloc_r+0xa0>
 801a692:	6822      	ldr	r2, [r4, #0]
 801a694:	1b52      	subs	r2, r2, r5
 801a696:	d41e      	bmi.n	801a6d6 <_malloc_r+0xc6>
 801a698:	2a0b      	cmp	r2, #11
 801a69a:	d916      	bls.n	801a6ca <_malloc_r+0xba>
 801a69c:	1961      	adds	r1, r4, r5
 801a69e:	42a3      	cmp	r3, r4
 801a6a0:	6025      	str	r5, [r4, #0]
 801a6a2:	bf18      	it	ne
 801a6a4:	6059      	strne	r1, [r3, #4]
 801a6a6:	6863      	ldr	r3, [r4, #4]
 801a6a8:	bf08      	it	eq
 801a6aa:	6031      	streq	r1, [r6, #0]
 801a6ac:	5162      	str	r2, [r4, r5]
 801a6ae:	604b      	str	r3, [r1, #4]
 801a6b0:	4638      	mov	r0, r7
 801a6b2:	f104 060b 	add.w	r6, r4, #11
 801a6b6:	f000 fbcb 	bl	801ae50 <__malloc_unlock>
 801a6ba:	f026 0607 	bic.w	r6, r6, #7
 801a6be:	1d23      	adds	r3, r4, #4
 801a6c0:	1af2      	subs	r2, r6, r3
 801a6c2:	d0b6      	beq.n	801a632 <_malloc_r+0x22>
 801a6c4:	1b9b      	subs	r3, r3, r6
 801a6c6:	50a3      	str	r3, [r4, r2]
 801a6c8:	e7b3      	b.n	801a632 <_malloc_r+0x22>
 801a6ca:	6862      	ldr	r2, [r4, #4]
 801a6cc:	42a3      	cmp	r3, r4
 801a6ce:	bf0c      	ite	eq
 801a6d0:	6032      	streq	r2, [r6, #0]
 801a6d2:	605a      	strne	r2, [r3, #4]
 801a6d4:	e7ec      	b.n	801a6b0 <_malloc_r+0xa0>
 801a6d6:	4623      	mov	r3, r4
 801a6d8:	6864      	ldr	r4, [r4, #4]
 801a6da:	e7b2      	b.n	801a642 <_malloc_r+0x32>
 801a6dc:	4634      	mov	r4, r6
 801a6de:	6876      	ldr	r6, [r6, #4]
 801a6e0:	e7b9      	b.n	801a656 <_malloc_r+0x46>
 801a6e2:	230c      	movs	r3, #12
 801a6e4:	603b      	str	r3, [r7, #0]
 801a6e6:	4638      	mov	r0, r7
 801a6e8:	f000 fbb2 	bl	801ae50 <__malloc_unlock>
 801a6ec:	e7a1      	b.n	801a632 <_malloc_r+0x22>
 801a6ee:	6025      	str	r5, [r4, #0]
 801a6f0:	e7de      	b.n	801a6b0 <_malloc_r+0xa0>
 801a6f2:	bf00      	nop
 801a6f4:	20003820 	.word	0x20003820

0801a6f8 <iprintf>:
 801a6f8:	b40f      	push	{r0, r1, r2, r3}
 801a6fa:	4b0a      	ldr	r3, [pc, #40]	; (801a724 <iprintf+0x2c>)
 801a6fc:	b513      	push	{r0, r1, r4, lr}
 801a6fe:	681c      	ldr	r4, [r3, #0]
 801a700:	b124      	cbz	r4, 801a70c <iprintf+0x14>
 801a702:	69a3      	ldr	r3, [r4, #24]
 801a704:	b913      	cbnz	r3, 801a70c <iprintf+0x14>
 801a706:	4620      	mov	r0, r4
 801a708:	f000 fa96 	bl	801ac38 <__sinit>
 801a70c:	ab05      	add	r3, sp, #20
 801a70e:	9a04      	ldr	r2, [sp, #16]
 801a710:	68a1      	ldr	r1, [r4, #8]
 801a712:	9301      	str	r3, [sp, #4]
 801a714:	4620      	mov	r0, r4
 801a716:	f000 fd27 	bl	801b168 <_vfiprintf_r>
 801a71a:	b002      	add	sp, #8
 801a71c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a720:	b004      	add	sp, #16
 801a722:	4770      	bx	lr
 801a724:	200006e8 	.word	0x200006e8

0801a728 <_puts_r>:
 801a728:	b570      	push	{r4, r5, r6, lr}
 801a72a:	460e      	mov	r6, r1
 801a72c:	4605      	mov	r5, r0
 801a72e:	b118      	cbz	r0, 801a738 <_puts_r+0x10>
 801a730:	6983      	ldr	r3, [r0, #24]
 801a732:	b90b      	cbnz	r3, 801a738 <_puts_r+0x10>
 801a734:	f000 fa80 	bl	801ac38 <__sinit>
 801a738:	69ab      	ldr	r3, [r5, #24]
 801a73a:	68ac      	ldr	r4, [r5, #8]
 801a73c:	b913      	cbnz	r3, 801a744 <_puts_r+0x1c>
 801a73e:	4628      	mov	r0, r5
 801a740:	f000 fa7a 	bl	801ac38 <__sinit>
 801a744:	4b2c      	ldr	r3, [pc, #176]	; (801a7f8 <_puts_r+0xd0>)
 801a746:	429c      	cmp	r4, r3
 801a748:	d120      	bne.n	801a78c <_puts_r+0x64>
 801a74a:	686c      	ldr	r4, [r5, #4]
 801a74c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a74e:	07db      	lsls	r3, r3, #31
 801a750:	d405      	bmi.n	801a75e <_puts_r+0x36>
 801a752:	89a3      	ldrh	r3, [r4, #12]
 801a754:	0598      	lsls	r0, r3, #22
 801a756:	d402      	bmi.n	801a75e <_puts_r+0x36>
 801a758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a75a:	f000 fb0b 	bl	801ad74 <__retarget_lock_acquire_recursive>
 801a75e:	89a3      	ldrh	r3, [r4, #12]
 801a760:	0719      	lsls	r1, r3, #28
 801a762:	d51d      	bpl.n	801a7a0 <_puts_r+0x78>
 801a764:	6923      	ldr	r3, [r4, #16]
 801a766:	b1db      	cbz	r3, 801a7a0 <_puts_r+0x78>
 801a768:	3e01      	subs	r6, #1
 801a76a:	68a3      	ldr	r3, [r4, #8]
 801a76c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a770:	3b01      	subs	r3, #1
 801a772:	60a3      	str	r3, [r4, #8]
 801a774:	bb39      	cbnz	r1, 801a7c6 <_puts_r+0x9e>
 801a776:	2b00      	cmp	r3, #0
 801a778:	da38      	bge.n	801a7ec <_puts_r+0xc4>
 801a77a:	4622      	mov	r2, r4
 801a77c:	210a      	movs	r1, #10
 801a77e:	4628      	mov	r0, r5
 801a780:	f000 f880 	bl	801a884 <__swbuf_r>
 801a784:	3001      	adds	r0, #1
 801a786:	d011      	beq.n	801a7ac <_puts_r+0x84>
 801a788:	250a      	movs	r5, #10
 801a78a:	e011      	b.n	801a7b0 <_puts_r+0x88>
 801a78c:	4b1b      	ldr	r3, [pc, #108]	; (801a7fc <_puts_r+0xd4>)
 801a78e:	429c      	cmp	r4, r3
 801a790:	d101      	bne.n	801a796 <_puts_r+0x6e>
 801a792:	68ac      	ldr	r4, [r5, #8]
 801a794:	e7da      	b.n	801a74c <_puts_r+0x24>
 801a796:	4b1a      	ldr	r3, [pc, #104]	; (801a800 <_puts_r+0xd8>)
 801a798:	429c      	cmp	r4, r3
 801a79a:	bf08      	it	eq
 801a79c:	68ec      	ldreq	r4, [r5, #12]
 801a79e:	e7d5      	b.n	801a74c <_puts_r+0x24>
 801a7a0:	4621      	mov	r1, r4
 801a7a2:	4628      	mov	r0, r5
 801a7a4:	f000 f8c0 	bl	801a928 <__swsetup_r>
 801a7a8:	2800      	cmp	r0, #0
 801a7aa:	d0dd      	beq.n	801a768 <_puts_r+0x40>
 801a7ac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801a7b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a7b2:	07da      	lsls	r2, r3, #31
 801a7b4:	d405      	bmi.n	801a7c2 <_puts_r+0x9a>
 801a7b6:	89a3      	ldrh	r3, [r4, #12]
 801a7b8:	059b      	lsls	r3, r3, #22
 801a7ba:	d402      	bmi.n	801a7c2 <_puts_r+0x9a>
 801a7bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a7be:	f000 fada 	bl	801ad76 <__retarget_lock_release_recursive>
 801a7c2:	4628      	mov	r0, r5
 801a7c4:	bd70      	pop	{r4, r5, r6, pc}
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	da04      	bge.n	801a7d4 <_puts_r+0xac>
 801a7ca:	69a2      	ldr	r2, [r4, #24]
 801a7cc:	429a      	cmp	r2, r3
 801a7ce:	dc06      	bgt.n	801a7de <_puts_r+0xb6>
 801a7d0:	290a      	cmp	r1, #10
 801a7d2:	d004      	beq.n	801a7de <_puts_r+0xb6>
 801a7d4:	6823      	ldr	r3, [r4, #0]
 801a7d6:	1c5a      	adds	r2, r3, #1
 801a7d8:	6022      	str	r2, [r4, #0]
 801a7da:	7019      	strb	r1, [r3, #0]
 801a7dc:	e7c5      	b.n	801a76a <_puts_r+0x42>
 801a7de:	4622      	mov	r2, r4
 801a7e0:	4628      	mov	r0, r5
 801a7e2:	f000 f84f 	bl	801a884 <__swbuf_r>
 801a7e6:	3001      	adds	r0, #1
 801a7e8:	d1bf      	bne.n	801a76a <_puts_r+0x42>
 801a7ea:	e7df      	b.n	801a7ac <_puts_r+0x84>
 801a7ec:	6823      	ldr	r3, [r4, #0]
 801a7ee:	250a      	movs	r5, #10
 801a7f0:	1c5a      	adds	r2, r3, #1
 801a7f2:	6022      	str	r2, [r4, #0]
 801a7f4:	701d      	strb	r5, [r3, #0]
 801a7f6:	e7db      	b.n	801a7b0 <_puts_r+0x88>
 801a7f8:	0801d950 	.word	0x0801d950
 801a7fc:	0801d970 	.word	0x0801d970
 801a800:	0801d930 	.word	0x0801d930

0801a804 <puts>:
 801a804:	4b02      	ldr	r3, [pc, #8]	; (801a810 <puts+0xc>)
 801a806:	4601      	mov	r1, r0
 801a808:	6818      	ldr	r0, [r3, #0]
 801a80a:	f7ff bf8d 	b.w	801a728 <_puts_r>
 801a80e:	bf00      	nop
 801a810:	200006e8 	.word	0x200006e8

0801a814 <_sbrk_r>:
 801a814:	b538      	push	{r3, r4, r5, lr}
 801a816:	4d06      	ldr	r5, [pc, #24]	; (801a830 <_sbrk_r+0x1c>)
 801a818:	2300      	movs	r3, #0
 801a81a:	4604      	mov	r4, r0
 801a81c:	4608      	mov	r0, r1
 801a81e:	602b      	str	r3, [r5, #0]
 801a820:	f7e8 ff5e 	bl	80036e0 <_sbrk>
 801a824:	1c43      	adds	r3, r0, #1
 801a826:	d102      	bne.n	801a82e <_sbrk_r+0x1a>
 801a828:	682b      	ldr	r3, [r5, #0]
 801a82a:	b103      	cbz	r3, 801a82e <_sbrk_r+0x1a>
 801a82c:	6023      	str	r3, [r4, #0]
 801a82e:	bd38      	pop	{r3, r4, r5, pc}
 801a830:	2000382c 	.word	0x2000382c

0801a834 <siprintf>:
 801a834:	b40e      	push	{r1, r2, r3}
 801a836:	b500      	push	{lr}
 801a838:	b09c      	sub	sp, #112	; 0x70
 801a83a:	ab1d      	add	r3, sp, #116	; 0x74
 801a83c:	9002      	str	r0, [sp, #8]
 801a83e:	9006      	str	r0, [sp, #24]
 801a840:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a844:	4809      	ldr	r0, [pc, #36]	; (801a86c <siprintf+0x38>)
 801a846:	9107      	str	r1, [sp, #28]
 801a848:	9104      	str	r1, [sp, #16]
 801a84a:	4909      	ldr	r1, [pc, #36]	; (801a870 <siprintf+0x3c>)
 801a84c:	f853 2b04 	ldr.w	r2, [r3], #4
 801a850:	9105      	str	r1, [sp, #20]
 801a852:	6800      	ldr	r0, [r0, #0]
 801a854:	9301      	str	r3, [sp, #4]
 801a856:	a902      	add	r1, sp, #8
 801a858:	f000 fb5c 	bl	801af14 <_svfiprintf_r>
 801a85c:	9b02      	ldr	r3, [sp, #8]
 801a85e:	2200      	movs	r2, #0
 801a860:	701a      	strb	r2, [r3, #0]
 801a862:	b01c      	add	sp, #112	; 0x70
 801a864:	f85d eb04 	ldr.w	lr, [sp], #4
 801a868:	b003      	add	sp, #12
 801a86a:	4770      	bx	lr
 801a86c:	200006e8 	.word	0x200006e8
 801a870:	ffff0208 	.word	0xffff0208

0801a874 <strcpy>:
 801a874:	4603      	mov	r3, r0
 801a876:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a87a:	f803 2b01 	strb.w	r2, [r3], #1
 801a87e:	2a00      	cmp	r2, #0
 801a880:	d1f9      	bne.n	801a876 <strcpy+0x2>
 801a882:	4770      	bx	lr

0801a884 <__swbuf_r>:
 801a884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a886:	460e      	mov	r6, r1
 801a888:	4614      	mov	r4, r2
 801a88a:	4605      	mov	r5, r0
 801a88c:	b118      	cbz	r0, 801a896 <__swbuf_r+0x12>
 801a88e:	6983      	ldr	r3, [r0, #24]
 801a890:	b90b      	cbnz	r3, 801a896 <__swbuf_r+0x12>
 801a892:	f000 f9d1 	bl	801ac38 <__sinit>
 801a896:	4b21      	ldr	r3, [pc, #132]	; (801a91c <__swbuf_r+0x98>)
 801a898:	429c      	cmp	r4, r3
 801a89a:	d12b      	bne.n	801a8f4 <__swbuf_r+0x70>
 801a89c:	686c      	ldr	r4, [r5, #4]
 801a89e:	69a3      	ldr	r3, [r4, #24]
 801a8a0:	60a3      	str	r3, [r4, #8]
 801a8a2:	89a3      	ldrh	r3, [r4, #12]
 801a8a4:	071a      	lsls	r2, r3, #28
 801a8a6:	d52f      	bpl.n	801a908 <__swbuf_r+0x84>
 801a8a8:	6923      	ldr	r3, [r4, #16]
 801a8aa:	b36b      	cbz	r3, 801a908 <__swbuf_r+0x84>
 801a8ac:	6923      	ldr	r3, [r4, #16]
 801a8ae:	6820      	ldr	r0, [r4, #0]
 801a8b0:	1ac0      	subs	r0, r0, r3
 801a8b2:	6963      	ldr	r3, [r4, #20]
 801a8b4:	b2f6      	uxtb	r6, r6
 801a8b6:	4283      	cmp	r3, r0
 801a8b8:	4637      	mov	r7, r6
 801a8ba:	dc04      	bgt.n	801a8c6 <__swbuf_r+0x42>
 801a8bc:	4621      	mov	r1, r4
 801a8be:	4628      	mov	r0, r5
 801a8c0:	f000 f926 	bl	801ab10 <_fflush_r>
 801a8c4:	bb30      	cbnz	r0, 801a914 <__swbuf_r+0x90>
 801a8c6:	68a3      	ldr	r3, [r4, #8]
 801a8c8:	3b01      	subs	r3, #1
 801a8ca:	60a3      	str	r3, [r4, #8]
 801a8cc:	6823      	ldr	r3, [r4, #0]
 801a8ce:	1c5a      	adds	r2, r3, #1
 801a8d0:	6022      	str	r2, [r4, #0]
 801a8d2:	701e      	strb	r6, [r3, #0]
 801a8d4:	6963      	ldr	r3, [r4, #20]
 801a8d6:	3001      	adds	r0, #1
 801a8d8:	4283      	cmp	r3, r0
 801a8da:	d004      	beq.n	801a8e6 <__swbuf_r+0x62>
 801a8dc:	89a3      	ldrh	r3, [r4, #12]
 801a8de:	07db      	lsls	r3, r3, #31
 801a8e0:	d506      	bpl.n	801a8f0 <__swbuf_r+0x6c>
 801a8e2:	2e0a      	cmp	r6, #10
 801a8e4:	d104      	bne.n	801a8f0 <__swbuf_r+0x6c>
 801a8e6:	4621      	mov	r1, r4
 801a8e8:	4628      	mov	r0, r5
 801a8ea:	f000 f911 	bl	801ab10 <_fflush_r>
 801a8ee:	b988      	cbnz	r0, 801a914 <__swbuf_r+0x90>
 801a8f0:	4638      	mov	r0, r7
 801a8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8f4:	4b0a      	ldr	r3, [pc, #40]	; (801a920 <__swbuf_r+0x9c>)
 801a8f6:	429c      	cmp	r4, r3
 801a8f8:	d101      	bne.n	801a8fe <__swbuf_r+0x7a>
 801a8fa:	68ac      	ldr	r4, [r5, #8]
 801a8fc:	e7cf      	b.n	801a89e <__swbuf_r+0x1a>
 801a8fe:	4b09      	ldr	r3, [pc, #36]	; (801a924 <__swbuf_r+0xa0>)
 801a900:	429c      	cmp	r4, r3
 801a902:	bf08      	it	eq
 801a904:	68ec      	ldreq	r4, [r5, #12]
 801a906:	e7ca      	b.n	801a89e <__swbuf_r+0x1a>
 801a908:	4621      	mov	r1, r4
 801a90a:	4628      	mov	r0, r5
 801a90c:	f000 f80c 	bl	801a928 <__swsetup_r>
 801a910:	2800      	cmp	r0, #0
 801a912:	d0cb      	beq.n	801a8ac <__swbuf_r+0x28>
 801a914:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a918:	e7ea      	b.n	801a8f0 <__swbuf_r+0x6c>
 801a91a:	bf00      	nop
 801a91c:	0801d950 	.word	0x0801d950
 801a920:	0801d970 	.word	0x0801d970
 801a924:	0801d930 	.word	0x0801d930

0801a928 <__swsetup_r>:
 801a928:	4b32      	ldr	r3, [pc, #200]	; (801a9f4 <__swsetup_r+0xcc>)
 801a92a:	b570      	push	{r4, r5, r6, lr}
 801a92c:	681d      	ldr	r5, [r3, #0]
 801a92e:	4606      	mov	r6, r0
 801a930:	460c      	mov	r4, r1
 801a932:	b125      	cbz	r5, 801a93e <__swsetup_r+0x16>
 801a934:	69ab      	ldr	r3, [r5, #24]
 801a936:	b913      	cbnz	r3, 801a93e <__swsetup_r+0x16>
 801a938:	4628      	mov	r0, r5
 801a93a:	f000 f97d 	bl	801ac38 <__sinit>
 801a93e:	4b2e      	ldr	r3, [pc, #184]	; (801a9f8 <__swsetup_r+0xd0>)
 801a940:	429c      	cmp	r4, r3
 801a942:	d10f      	bne.n	801a964 <__swsetup_r+0x3c>
 801a944:	686c      	ldr	r4, [r5, #4]
 801a946:	89a3      	ldrh	r3, [r4, #12]
 801a948:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a94c:	0719      	lsls	r1, r3, #28
 801a94e:	d42c      	bmi.n	801a9aa <__swsetup_r+0x82>
 801a950:	06dd      	lsls	r5, r3, #27
 801a952:	d411      	bmi.n	801a978 <__swsetup_r+0x50>
 801a954:	2309      	movs	r3, #9
 801a956:	6033      	str	r3, [r6, #0]
 801a958:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a95c:	81a3      	strh	r3, [r4, #12]
 801a95e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a962:	e03e      	b.n	801a9e2 <__swsetup_r+0xba>
 801a964:	4b25      	ldr	r3, [pc, #148]	; (801a9fc <__swsetup_r+0xd4>)
 801a966:	429c      	cmp	r4, r3
 801a968:	d101      	bne.n	801a96e <__swsetup_r+0x46>
 801a96a:	68ac      	ldr	r4, [r5, #8]
 801a96c:	e7eb      	b.n	801a946 <__swsetup_r+0x1e>
 801a96e:	4b24      	ldr	r3, [pc, #144]	; (801aa00 <__swsetup_r+0xd8>)
 801a970:	429c      	cmp	r4, r3
 801a972:	bf08      	it	eq
 801a974:	68ec      	ldreq	r4, [r5, #12]
 801a976:	e7e6      	b.n	801a946 <__swsetup_r+0x1e>
 801a978:	0758      	lsls	r0, r3, #29
 801a97a:	d512      	bpl.n	801a9a2 <__swsetup_r+0x7a>
 801a97c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a97e:	b141      	cbz	r1, 801a992 <__swsetup_r+0x6a>
 801a980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a984:	4299      	cmp	r1, r3
 801a986:	d002      	beq.n	801a98e <__swsetup_r+0x66>
 801a988:	4630      	mov	r0, r6
 801a98a:	f7ff fdd5 	bl	801a538 <_free_r>
 801a98e:	2300      	movs	r3, #0
 801a990:	6363      	str	r3, [r4, #52]	; 0x34
 801a992:	89a3      	ldrh	r3, [r4, #12]
 801a994:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a998:	81a3      	strh	r3, [r4, #12]
 801a99a:	2300      	movs	r3, #0
 801a99c:	6063      	str	r3, [r4, #4]
 801a99e:	6923      	ldr	r3, [r4, #16]
 801a9a0:	6023      	str	r3, [r4, #0]
 801a9a2:	89a3      	ldrh	r3, [r4, #12]
 801a9a4:	f043 0308 	orr.w	r3, r3, #8
 801a9a8:	81a3      	strh	r3, [r4, #12]
 801a9aa:	6923      	ldr	r3, [r4, #16]
 801a9ac:	b94b      	cbnz	r3, 801a9c2 <__swsetup_r+0x9a>
 801a9ae:	89a3      	ldrh	r3, [r4, #12]
 801a9b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a9b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a9b8:	d003      	beq.n	801a9c2 <__swsetup_r+0x9a>
 801a9ba:	4621      	mov	r1, r4
 801a9bc:	4630      	mov	r0, r6
 801a9be:	f000 fa01 	bl	801adc4 <__smakebuf_r>
 801a9c2:	89a0      	ldrh	r0, [r4, #12]
 801a9c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a9c8:	f010 0301 	ands.w	r3, r0, #1
 801a9cc:	d00a      	beq.n	801a9e4 <__swsetup_r+0xbc>
 801a9ce:	2300      	movs	r3, #0
 801a9d0:	60a3      	str	r3, [r4, #8]
 801a9d2:	6963      	ldr	r3, [r4, #20]
 801a9d4:	425b      	negs	r3, r3
 801a9d6:	61a3      	str	r3, [r4, #24]
 801a9d8:	6923      	ldr	r3, [r4, #16]
 801a9da:	b943      	cbnz	r3, 801a9ee <__swsetup_r+0xc6>
 801a9dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a9e0:	d1ba      	bne.n	801a958 <__swsetup_r+0x30>
 801a9e2:	bd70      	pop	{r4, r5, r6, pc}
 801a9e4:	0781      	lsls	r1, r0, #30
 801a9e6:	bf58      	it	pl
 801a9e8:	6963      	ldrpl	r3, [r4, #20]
 801a9ea:	60a3      	str	r3, [r4, #8]
 801a9ec:	e7f4      	b.n	801a9d8 <__swsetup_r+0xb0>
 801a9ee:	2000      	movs	r0, #0
 801a9f0:	e7f7      	b.n	801a9e2 <__swsetup_r+0xba>
 801a9f2:	bf00      	nop
 801a9f4:	200006e8 	.word	0x200006e8
 801a9f8:	0801d950 	.word	0x0801d950
 801a9fc:	0801d970 	.word	0x0801d970
 801aa00:	0801d930 	.word	0x0801d930

0801aa04 <__sflush_r>:
 801aa04:	898a      	ldrh	r2, [r1, #12]
 801aa06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa0a:	4605      	mov	r5, r0
 801aa0c:	0710      	lsls	r0, r2, #28
 801aa0e:	460c      	mov	r4, r1
 801aa10:	d458      	bmi.n	801aac4 <__sflush_r+0xc0>
 801aa12:	684b      	ldr	r3, [r1, #4]
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	dc05      	bgt.n	801aa24 <__sflush_r+0x20>
 801aa18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	dc02      	bgt.n	801aa24 <__sflush_r+0x20>
 801aa1e:	2000      	movs	r0, #0
 801aa20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801aa26:	2e00      	cmp	r6, #0
 801aa28:	d0f9      	beq.n	801aa1e <__sflush_r+0x1a>
 801aa2a:	2300      	movs	r3, #0
 801aa2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801aa30:	682f      	ldr	r7, [r5, #0]
 801aa32:	602b      	str	r3, [r5, #0]
 801aa34:	d032      	beq.n	801aa9c <__sflush_r+0x98>
 801aa36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801aa38:	89a3      	ldrh	r3, [r4, #12]
 801aa3a:	075a      	lsls	r2, r3, #29
 801aa3c:	d505      	bpl.n	801aa4a <__sflush_r+0x46>
 801aa3e:	6863      	ldr	r3, [r4, #4]
 801aa40:	1ac0      	subs	r0, r0, r3
 801aa42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801aa44:	b10b      	cbz	r3, 801aa4a <__sflush_r+0x46>
 801aa46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801aa48:	1ac0      	subs	r0, r0, r3
 801aa4a:	2300      	movs	r3, #0
 801aa4c:	4602      	mov	r2, r0
 801aa4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801aa50:	6a21      	ldr	r1, [r4, #32]
 801aa52:	4628      	mov	r0, r5
 801aa54:	47b0      	blx	r6
 801aa56:	1c43      	adds	r3, r0, #1
 801aa58:	89a3      	ldrh	r3, [r4, #12]
 801aa5a:	d106      	bne.n	801aa6a <__sflush_r+0x66>
 801aa5c:	6829      	ldr	r1, [r5, #0]
 801aa5e:	291d      	cmp	r1, #29
 801aa60:	d82c      	bhi.n	801aabc <__sflush_r+0xb8>
 801aa62:	4a2a      	ldr	r2, [pc, #168]	; (801ab0c <__sflush_r+0x108>)
 801aa64:	40ca      	lsrs	r2, r1
 801aa66:	07d6      	lsls	r6, r2, #31
 801aa68:	d528      	bpl.n	801aabc <__sflush_r+0xb8>
 801aa6a:	2200      	movs	r2, #0
 801aa6c:	6062      	str	r2, [r4, #4]
 801aa6e:	04d9      	lsls	r1, r3, #19
 801aa70:	6922      	ldr	r2, [r4, #16]
 801aa72:	6022      	str	r2, [r4, #0]
 801aa74:	d504      	bpl.n	801aa80 <__sflush_r+0x7c>
 801aa76:	1c42      	adds	r2, r0, #1
 801aa78:	d101      	bne.n	801aa7e <__sflush_r+0x7a>
 801aa7a:	682b      	ldr	r3, [r5, #0]
 801aa7c:	b903      	cbnz	r3, 801aa80 <__sflush_r+0x7c>
 801aa7e:	6560      	str	r0, [r4, #84]	; 0x54
 801aa80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801aa82:	602f      	str	r7, [r5, #0]
 801aa84:	2900      	cmp	r1, #0
 801aa86:	d0ca      	beq.n	801aa1e <__sflush_r+0x1a>
 801aa88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801aa8c:	4299      	cmp	r1, r3
 801aa8e:	d002      	beq.n	801aa96 <__sflush_r+0x92>
 801aa90:	4628      	mov	r0, r5
 801aa92:	f7ff fd51 	bl	801a538 <_free_r>
 801aa96:	2000      	movs	r0, #0
 801aa98:	6360      	str	r0, [r4, #52]	; 0x34
 801aa9a:	e7c1      	b.n	801aa20 <__sflush_r+0x1c>
 801aa9c:	6a21      	ldr	r1, [r4, #32]
 801aa9e:	2301      	movs	r3, #1
 801aaa0:	4628      	mov	r0, r5
 801aaa2:	47b0      	blx	r6
 801aaa4:	1c41      	adds	r1, r0, #1
 801aaa6:	d1c7      	bne.n	801aa38 <__sflush_r+0x34>
 801aaa8:	682b      	ldr	r3, [r5, #0]
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	d0c4      	beq.n	801aa38 <__sflush_r+0x34>
 801aaae:	2b1d      	cmp	r3, #29
 801aab0:	d001      	beq.n	801aab6 <__sflush_r+0xb2>
 801aab2:	2b16      	cmp	r3, #22
 801aab4:	d101      	bne.n	801aaba <__sflush_r+0xb6>
 801aab6:	602f      	str	r7, [r5, #0]
 801aab8:	e7b1      	b.n	801aa1e <__sflush_r+0x1a>
 801aaba:	89a3      	ldrh	r3, [r4, #12]
 801aabc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aac0:	81a3      	strh	r3, [r4, #12]
 801aac2:	e7ad      	b.n	801aa20 <__sflush_r+0x1c>
 801aac4:	690f      	ldr	r7, [r1, #16]
 801aac6:	2f00      	cmp	r7, #0
 801aac8:	d0a9      	beq.n	801aa1e <__sflush_r+0x1a>
 801aaca:	0793      	lsls	r3, r2, #30
 801aacc:	680e      	ldr	r6, [r1, #0]
 801aace:	bf08      	it	eq
 801aad0:	694b      	ldreq	r3, [r1, #20]
 801aad2:	600f      	str	r7, [r1, #0]
 801aad4:	bf18      	it	ne
 801aad6:	2300      	movne	r3, #0
 801aad8:	eba6 0807 	sub.w	r8, r6, r7
 801aadc:	608b      	str	r3, [r1, #8]
 801aade:	f1b8 0f00 	cmp.w	r8, #0
 801aae2:	dd9c      	ble.n	801aa1e <__sflush_r+0x1a>
 801aae4:	6a21      	ldr	r1, [r4, #32]
 801aae6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801aae8:	4643      	mov	r3, r8
 801aaea:	463a      	mov	r2, r7
 801aaec:	4628      	mov	r0, r5
 801aaee:	47b0      	blx	r6
 801aaf0:	2800      	cmp	r0, #0
 801aaf2:	dc06      	bgt.n	801ab02 <__sflush_r+0xfe>
 801aaf4:	89a3      	ldrh	r3, [r4, #12]
 801aaf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aafa:	81a3      	strh	r3, [r4, #12]
 801aafc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ab00:	e78e      	b.n	801aa20 <__sflush_r+0x1c>
 801ab02:	4407      	add	r7, r0
 801ab04:	eba8 0800 	sub.w	r8, r8, r0
 801ab08:	e7e9      	b.n	801aade <__sflush_r+0xda>
 801ab0a:	bf00      	nop
 801ab0c:	20400001 	.word	0x20400001

0801ab10 <_fflush_r>:
 801ab10:	b538      	push	{r3, r4, r5, lr}
 801ab12:	690b      	ldr	r3, [r1, #16]
 801ab14:	4605      	mov	r5, r0
 801ab16:	460c      	mov	r4, r1
 801ab18:	b913      	cbnz	r3, 801ab20 <_fflush_r+0x10>
 801ab1a:	2500      	movs	r5, #0
 801ab1c:	4628      	mov	r0, r5
 801ab1e:	bd38      	pop	{r3, r4, r5, pc}
 801ab20:	b118      	cbz	r0, 801ab2a <_fflush_r+0x1a>
 801ab22:	6983      	ldr	r3, [r0, #24]
 801ab24:	b90b      	cbnz	r3, 801ab2a <_fflush_r+0x1a>
 801ab26:	f000 f887 	bl	801ac38 <__sinit>
 801ab2a:	4b14      	ldr	r3, [pc, #80]	; (801ab7c <_fflush_r+0x6c>)
 801ab2c:	429c      	cmp	r4, r3
 801ab2e:	d11b      	bne.n	801ab68 <_fflush_r+0x58>
 801ab30:	686c      	ldr	r4, [r5, #4]
 801ab32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	d0ef      	beq.n	801ab1a <_fflush_r+0xa>
 801ab3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ab3c:	07d0      	lsls	r0, r2, #31
 801ab3e:	d404      	bmi.n	801ab4a <_fflush_r+0x3a>
 801ab40:	0599      	lsls	r1, r3, #22
 801ab42:	d402      	bmi.n	801ab4a <_fflush_r+0x3a>
 801ab44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ab46:	f000 f915 	bl	801ad74 <__retarget_lock_acquire_recursive>
 801ab4a:	4628      	mov	r0, r5
 801ab4c:	4621      	mov	r1, r4
 801ab4e:	f7ff ff59 	bl	801aa04 <__sflush_r>
 801ab52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ab54:	07da      	lsls	r2, r3, #31
 801ab56:	4605      	mov	r5, r0
 801ab58:	d4e0      	bmi.n	801ab1c <_fflush_r+0xc>
 801ab5a:	89a3      	ldrh	r3, [r4, #12]
 801ab5c:	059b      	lsls	r3, r3, #22
 801ab5e:	d4dd      	bmi.n	801ab1c <_fflush_r+0xc>
 801ab60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ab62:	f000 f908 	bl	801ad76 <__retarget_lock_release_recursive>
 801ab66:	e7d9      	b.n	801ab1c <_fflush_r+0xc>
 801ab68:	4b05      	ldr	r3, [pc, #20]	; (801ab80 <_fflush_r+0x70>)
 801ab6a:	429c      	cmp	r4, r3
 801ab6c:	d101      	bne.n	801ab72 <_fflush_r+0x62>
 801ab6e:	68ac      	ldr	r4, [r5, #8]
 801ab70:	e7df      	b.n	801ab32 <_fflush_r+0x22>
 801ab72:	4b04      	ldr	r3, [pc, #16]	; (801ab84 <_fflush_r+0x74>)
 801ab74:	429c      	cmp	r4, r3
 801ab76:	bf08      	it	eq
 801ab78:	68ec      	ldreq	r4, [r5, #12]
 801ab7a:	e7da      	b.n	801ab32 <_fflush_r+0x22>
 801ab7c:	0801d950 	.word	0x0801d950
 801ab80:	0801d970 	.word	0x0801d970
 801ab84:	0801d930 	.word	0x0801d930

0801ab88 <std>:
 801ab88:	2300      	movs	r3, #0
 801ab8a:	b510      	push	{r4, lr}
 801ab8c:	4604      	mov	r4, r0
 801ab8e:	e9c0 3300 	strd	r3, r3, [r0]
 801ab92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ab96:	6083      	str	r3, [r0, #8]
 801ab98:	8181      	strh	r1, [r0, #12]
 801ab9a:	6643      	str	r3, [r0, #100]	; 0x64
 801ab9c:	81c2      	strh	r2, [r0, #14]
 801ab9e:	6183      	str	r3, [r0, #24]
 801aba0:	4619      	mov	r1, r3
 801aba2:	2208      	movs	r2, #8
 801aba4:	305c      	adds	r0, #92	; 0x5c
 801aba6:	f7ff fcbf 	bl	801a528 <memset>
 801abaa:	4b05      	ldr	r3, [pc, #20]	; (801abc0 <std+0x38>)
 801abac:	6263      	str	r3, [r4, #36]	; 0x24
 801abae:	4b05      	ldr	r3, [pc, #20]	; (801abc4 <std+0x3c>)
 801abb0:	62a3      	str	r3, [r4, #40]	; 0x28
 801abb2:	4b05      	ldr	r3, [pc, #20]	; (801abc8 <std+0x40>)
 801abb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801abb6:	4b05      	ldr	r3, [pc, #20]	; (801abcc <std+0x44>)
 801abb8:	6224      	str	r4, [r4, #32]
 801abba:	6323      	str	r3, [r4, #48]	; 0x30
 801abbc:	bd10      	pop	{r4, pc}
 801abbe:	bf00      	nop
 801abc0:	0801b6f1 	.word	0x0801b6f1
 801abc4:	0801b713 	.word	0x0801b713
 801abc8:	0801b74b 	.word	0x0801b74b
 801abcc:	0801b76f 	.word	0x0801b76f

0801abd0 <_cleanup_r>:
 801abd0:	4901      	ldr	r1, [pc, #4]	; (801abd8 <_cleanup_r+0x8>)
 801abd2:	f000 b8af 	b.w	801ad34 <_fwalk_reent>
 801abd6:	bf00      	nop
 801abd8:	0801ab11 	.word	0x0801ab11

0801abdc <__sfmoreglue>:
 801abdc:	b570      	push	{r4, r5, r6, lr}
 801abde:	2268      	movs	r2, #104	; 0x68
 801abe0:	1e4d      	subs	r5, r1, #1
 801abe2:	4355      	muls	r5, r2
 801abe4:	460e      	mov	r6, r1
 801abe6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801abea:	f7ff fd11 	bl	801a610 <_malloc_r>
 801abee:	4604      	mov	r4, r0
 801abf0:	b140      	cbz	r0, 801ac04 <__sfmoreglue+0x28>
 801abf2:	2100      	movs	r1, #0
 801abf4:	e9c0 1600 	strd	r1, r6, [r0]
 801abf8:	300c      	adds	r0, #12
 801abfa:	60a0      	str	r0, [r4, #8]
 801abfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ac00:	f7ff fc92 	bl	801a528 <memset>
 801ac04:	4620      	mov	r0, r4
 801ac06:	bd70      	pop	{r4, r5, r6, pc}

0801ac08 <__sfp_lock_acquire>:
 801ac08:	4801      	ldr	r0, [pc, #4]	; (801ac10 <__sfp_lock_acquire+0x8>)
 801ac0a:	f000 b8b3 	b.w	801ad74 <__retarget_lock_acquire_recursive>
 801ac0e:	bf00      	nop
 801ac10:	20003829 	.word	0x20003829

0801ac14 <__sfp_lock_release>:
 801ac14:	4801      	ldr	r0, [pc, #4]	; (801ac1c <__sfp_lock_release+0x8>)
 801ac16:	f000 b8ae 	b.w	801ad76 <__retarget_lock_release_recursive>
 801ac1a:	bf00      	nop
 801ac1c:	20003829 	.word	0x20003829

0801ac20 <__sinit_lock_acquire>:
 801ac20:	4801      	ldr	r0, [pc, #4]	; (801ac28 <__sinit_lock_acquire+0x8>)
 801ac22:	f000 b8a7 	b.w	801ad74 <__retarget_lock_acquire_recursive>
 801ac26:	bf00      	nop
 801ac28:	2000382a 	.word	0x2000382a

0801ac2c <__sinit_lock_release>:
 801ac2c:	4801      	ldr	r0, [pc, #4]	; (801ac34 <__sinit_lock_release+0x8>)
 801ac2e:	f000 b8a2 	b.w	801ad76 <__retarget_lock_release_recursive>
 801ac32:	bf00      	nop
 801ac34:	2000382a 	.word	0x2000382a

0801ac38 <__sinit>:
 801ac38:	b510      	push	{r4, lr}
 801ac3a:	4604      	mov	r4, r0
 801ac3c:	f7ff fff0 	bl	801ac20 <__sinit_lock_acquire>
 801ac40:	69a3      	ldr	r3, [r4, #24]
 801ac42:	b11b      	cbz	r3, 801ac4c <__sinit+0x14>
 801ac44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ac48:	f7ff bff0 	b.w	801ac2c <__sinit_lock_release>
 801ac4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ac50:	6523      	str	r3, [r4, #80]	; 0x50
 801ac52:	4b13      	ldr	r3, [pc, #76]	; (801aca0 <__sinit+0x68>)
 801ac54:	4a13      	ldr	r2, [pc, #76]	; (801aca4 <__sinit+0x6c>)
 801ac56:	681b      	ldr	r3, [r3, #0]
 801ac58:	62a2      	str	r2, [r4, #40]	; 0x28
 801ac5a:	42a3      	cmp	r3, r4
 801ac5c:	bf04      	itt	eq
 801ac5e:	2301      	moveq	r3, #1
 801ac60:	61a3      	streq	r3, [r4, #24]
 801ac62:	4620      	mov	r0, r4
 801ac64:	f000 f820 	bl	801aca8 <__sfp>
 801ac68:	6060      	str	r0, [r4, #4]
 801ac6a:	4620      	mov	r0, r4
 801ac6c:	f000 f81c 	bl	801aca8 <__sfp>
 801ac70:	60a0      	str	r0, [r4, #8]
 801ac72:	4620      	mov	r0, r4
 801ac74:	f000 f818 	bl	801aca8 <__sfp>
 801ac78:	2200      	movs	r2, #0
 801ac7a:	60e0      	str	r0, [r4, #12]
 801ac7c:	2104      	movs	r1, #4
 801ac7e:	6860      	ldr	r0, [r4, #4]
 801ac80:	f7ff ff82 	bl	801ab88 <std>
 801ac84:	68a0      	ldr	r0, [r4, #8]
 801ac86:	2201      	movs	r2, #1
 801ac88:	2109      	movs	r1, #9
 801ac8a:	f7ff ff7d 	bl	801ab88 <std>
 801ac8e:	68e0      	ldr	r0, [r4, #12]
 801ac90:	2202      	movs	r2, #2
 801ac92:	2112      	movs	r1, #18
 801ac94:	f7ff ff78 	bl	801ab88 <std>
 801ac98:	2301      	movs	r3, #1
 801ac9a:	61a3      	str	r3, [r4, #24]
 801ac9c:	e7d2      	b.n	801ac44 <__sinit+0xc>
 801ac9e:	bf00      	nop
 801aca0:	0801d92c 	.word	0x0801d92c
 801aca4:	0801abd1 	.word	0x0801abd1

0801aca8 <__sfp>:
 801aca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801acaa:	4607      	mov	r7, r0
 801acac:	f7ff ffac 	bl	801ac08 <__sfp_lock_acquire>
 801acb0:	4b1e      	ldr	r3, [pc, #120]	; (801ad2c <__sfp+0x84>)
 801acb2:	681e      	ldr	r6, [r3, #0]
 801acb4:	69b3      	ldr	r3, [r6, #24]
 801acb6:	b913      	cbnz	r3, 801acbe <__sfp+0x16>
 801acb8:	4630      	mov	r0, r6
 801acba:	f7ff ffbd 	bl	801ac38 <__sinit>
 801acbe:	3648      	adds	r6, #72	; 0x48
 801acc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801acc4:	3b01      	subs	r3, #1
 801acc6:	d503      	bpl.n	801acd0 <__sfp+0x28>
 801acc8:	6833      	ldr	r3, [r6, #0]
 801acca:	b30b      	cbz	r3, 801ad10 <__sfp+0x68>
 801accc:	6836      	ldr	r6, [r6, #0]
 801acce:	e7f7      	b.n	801acc0 <__sfp+0x18>
 801acd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801acd4:	b9d5      	cbnz	r5, 801ad0c <__sfp+0x64>
 801acd6:	4b16      	ldr	r3, [pc, #88]	; (801ad30 <__sfp+0x88>)
 801acd8:	60e3      	str	r3, [r4, #12]
 801acda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801acde:	6665      	str	r5, [r4, #100]	; 0x64
 801ace0:	f000 f847 	bl	801ad72 <__retarget_lock_init_recursive>
 801ace4:	f7ff ff96 	bl	801ac14 <__sfp_lock_release>
 801ace8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801acec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801acf0:	6025      	str	r5, [r4, #0]
 801acf2:	61a5      	str	r5, [r4, #24]
 801acf4:	2208      	movs	r2, #8
 801acf6:	4629      	mov	r1, r5
 801acf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801acfc:	f7ff fc14 	bl	801a528 <memset>
 801ad00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ad04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ad08:	4620      	mov	r0, r4
 801ad0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad0c:	3468      	adds	r4, #104	; 0x68
 801ad0e:	e7d9      	b.n	801acc4 <__sfp+0x1c>
 801ad10:	2104      	movs	r1, #4
 801ad12:	4638      	mov	r0, r7
 801ad14:	f7ff ff62 	bl	801abdc <__sfmoreglue>
 801ad18:	4604      	mov	r4, r0
 801ad1a:	6030      	str	r0, [r6, #0]
 801ad1c:	2800      	cmp	r0, #0
 801ad1e:	d1d5      	bne.n	801accc <__sfp+0x24>
 801ad20:	f7ff ff78 	bl	801ac14 <__sfp_lock_release>
 801ad24:	230c      	movs	r3, #12
 801ad26:	603b      	str	r3, [r7, #0]
 801ad28:	e7ee      	b.n	801ad08 <__sfp+0x60>
 801ad2a:	bf00      	nop
 801ad2c:	0801d92c 	.word	0x0801d92c
 801ad30:	ffff0001 	.word	0xffff0001

0801ad34 <_fwalk_reent>:
 801ad34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad38:	4606      	mov	r6, r0
 801ad3a:	4688      	mov	r8, r1
 801ad3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ad40:	2700      	movs	r7, #0
 801ad42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ad46:	f1b9 0901 	subs.w	r9, r9, #1
 801ad4a:	d505      	bpl.n	801ad58 <_fwalk_reent+0x24>
 801ad4c:	6824      	ldr	r4, [r4, #0]
 801ad4e:	2c00      	cmp	r4, #0
 801ad50:	d1f7      	bne.n	801ad42 <_fwalk_reent+0xe>
 801ad52:	4638      	mov	r0, r7
 801ad54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad58:	89ab      	ldrh	r3, [r5, #12]
 801ad5a:	2b01      	cmp	r3, #1
 801ad5c:	d907      	bls.n	801ad6e <_fwalk_reent+0x3a>
 801ad5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ad62:	3301      	adds	r3, #1
 801ad64:	d003      	beq.n	801ad6e <_fwalk_reent+0x3a>
 801ad66:	4629      	mov	r1, r5
 801ad68:	4630      	mov	r0, r6
 801ad6a:	47c0      	blx	r8
 801ad6c:	4307      	orrs	r7, r0
 801ad6e:	3568      	adds	r5, #104	; 0x68
 801ad70:	e7e9      	b.n	801ad46 <_fwalk_reent+0x12>

0801ad72 <__retarget_lock_init_recursive>:
 801ad72:	4770      	bx	lr

0801ad74 <__retarget_lock_acquire_recursive>:
 801ad74:	4770      	bx	lr

0801ad76 <__retarget_lock_release_recursive>:
 801ad76:	4770      	bx	lr

0801ad78 <__swhatbuf_r>:
 801ad78:	b570      	push	{r4, r5, r6, lr}
 801ad7a:	460e      	mov	r6, r1
 801ad7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad80:	2900      	cmp	r1, #0
 801ad82:	b096      	sub	sp, #88	; 0x58
 801ad84:	4614      	mov	r4, r2
 801ad86:	461d      	mov	r5, r3
 801ad88:	da08      	bge.n	801ad9c <__swhatbuf_r+0x24>
 801ad8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801ad8e:	2200      	movs	r2, #0
 801ad90:	602a      	str	r2, [r5, #0]
 801ad92:	061a      	lsls	r2, r3, #24
 801ad94:	d410      	bmi.n	801adb8 <__swhatbuf_r+0x40>
 801ad96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ad9a:	e00e      	b.n	801adba <__swhatbuf_r+0x42>
 801ad9c:	466a      	mov	r2, sp
 801ad9e:	f000 fd0d 	bl	801b7bc <_fstat_r>
 801ada2:	2800      	cmp	r0, #0
 801ada4:	dbf1      	blt.n	801ad8a <__swhatbuf_r+0x12>
 801ada6:	9a01      	ldr	r2, [sp, #4]
 801ada8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801adac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801adb0:	425a      	negs	r2, r3
 801adb2:	415a      	adcs	r2, r3
 801adb4:	602a      	str	r2, [r5, #0]
 801adb6:	e7ee      	b.n	801ad96 <__swhatbuf_r+0x1e>
 801adb8:	2340      	movs	r3, #64	; 0x40
 801adba:	2000      	movs	r0, #0
 801adbc:	6023      	str	r3, [r4, #0]
 801adbe:	b016      	add	sp, #88	; 0x58
 801adc0:	bd70      	pop	{r4, r5, r6, pc}
	...

0801adc4 <__smakebuf_r>:
 801adc4:	898b      	ldrh	r3, [r1, #12]
 801adc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801adc8:	079d      	lsls	r5, r3, #30
 801adca:	4606      	mov	r6, r0
 801adcc:	460c      	mov	r4, r1
 801adce:	d507      	bpl.n	801ade0 <__smakebuf_r+0x1c>
 801add0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801add4:	6023      	str	r3, [r4, #0]
 801add6:	6123      	str	r3, [r4, #16]
 801add8:	2301      	movs	r3, #1
 801adda:	6163      	str	r3, [r4, #20]
 801addc:	b002      	add	sp, #8
 801adde:	bd70      	pop	{r4, r5, r6, pc}
 801ade0:	ab01      	add	r3, sp, #4
 801ade2:	466a      	mov	r2, sp
 801ade4:	f7ff ffc8 	bl	801ad78 <__swhatbuf_r>
 801ade8:	9900      	ldr	r1, [sp, #0]
 801adea:	4605      	mov	r5, r0
 801adec:	4630      	mov	r0, r6
 801adee:	f7ff fc0f 	bl	801a610 <_malloc_r>
 801adf2:	b948      	cbnz	r0, 801ae08 <__smakebuf_r+0x44>
 801adf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801adf8:	059a      	lsls	r2, r3, #22
 801adfa:	d4ef      	bmi.n	801addc <__smakebuf_r+0x18>
 801adfc:	f023 0303 	bic.w	r3, r3, #3
 801ae00:	f043 0302 	orr.w	r3, r3, #2
 801ae04:	81a3      	strh	r3, [r4, #12]
 801ae06:	e7e3      	b.n	801add0 <__smakebuf_r+0xc>
 801ae08:	4b0d      	ldr	r3, [pc, #52]	; (801ae40 <__smakebuf_r+0x7c>)
 801ae0a:	62b3      	str	r3, [r6, #40]	; 0x28
 801ae0c:	89a3      	ldrh	r3, [r4, #12]
 801ae0e:	6020      	str	r0, [r4, #0]
 801ae10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ae14:	81a3      	strh	r3, [r4, #12]
 801ae16:	9b00      	ldr	r3, [sp, #0]
 801ae18:	6163      	str	r3, [r4, #20]
 801ae1a:	9b01      	ldr	r3, [sp, #4]
 801ae1c:	6120      	str	r0, [r4, #16]
 801ae1e:	b15b      	cbz	r3, 801ae38 <__smakebuf_r+0x74>
 801ae20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ae24:	4630      	mov	r0, r6
 801ae26:	f000 fcdb 	bl	801b7e0 <_isatty_r>
 801ae2a:	b128      	cbz	r0, 801ae38 <__smakebuf_r+0x74>
 801ae2c:	89a3      	ldrh	r3, [r4, #12]
 801ae2e:	f023 0303 	bic.w	r3, r3, #3
 801ae32:	f043 0301 	orr.w	r3, r3, #1
 801ae36:	81a3      	strh	r3, [r4, #12]
 801ae38:	89a0      	ldrh	r0, [r4, #12]
 801ae3a:	4305      	orrs	r5, r0
 801ae3c:	81a5      	strh	r5, [r4, #12]
 801ae3e:	e7cd      	b.n	801addc <__smakebuf_r+0x18>
 801ae40:	0801abd1 	.word	0x0801abd1

0801ae44 <__malloc_lock>:
 801ae44:	4801      	ldr	r0, [pc, #4]	; (801ae4c <__malloc_lock+0x8>)
 801ae46:	f7ff bf95 	b.w	801ad74 <__retarget_lock_acquire_recursive>
 801ae4a:	bf00      	nop
 801ae4c:	20003828 	.word	0x20003828

0801ae50 <__malloc_unlock>:
 801ae50:	4801      	ldr	r0, [pc, #4]	; (801ae58 <__malloc_unlock+0x8>)
 801ae52:	f7ff bf90 	b.w	801ad76 <__retarget_lock_release_recursive>
 801ae56:	bf00      	nop
 801ae58:	20003828 	.word	0x20003828

0801ae5c <__ssputs_r>:
 801ae5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae60:	688e      	ldr	r6, [r1, #8]
 801ae62:	429e      	cmp	r6, r3
 801ae64:	4682      	mov	sl, r0
 801ae66:	460c      	mov	r4, r1
 801ae68:	4690      	mov	r8, r2
 801ae6a:	461f      	mov	r7, r3
 801ae6c:	d838      	bhi.n	801aee0 <__ssputs_r+0x84>
 801ae6e:	898a      	ldrh	r2, [r1, #12]
 801ae70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ae74:	d032      	beq.n	801aedc <__ssputs_r+0x80>
 801ae76:	6825      	ldr	r5, [r4, #0]
 801ae78:	6909      	ldr	r1, [r1, #16]
 801ae7a:	eba5 0901 	sub.w	r9, r5, r1
 801ae7e:	6965      	ldr	r5, [r4, #20]
 801ae80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ae84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ae88:	3301      	adds	r3, #1
 801ae8a:	444b      	add	r3, r9
 801ae8c:	106d      	asrs	r5, r5, #1
 801ae8e:	429d      	cmp	r5, r3
 801ae90:	bf38      	it	cc
 801ae92:	461d      	movcc	r5, r3
 801ae94:	0553      	lsls	r3, r2, #21
 801ae96:	d531      	bpl.n	801aefc <__ssputs_r+0xa0>
 801ae98:	4629      	mov	r1, r5
 801ae9a:	f7ff fbb9 	bl	801a610 <_malloc_r>
 801ae9e:	4606      	mov	r6, r0
 801aea0:	b950      	cbnz	r0, 801aeb8 <__ssputs_r+0x5c>
 801aea2:	230c      	movs	r3, #12
 801aea4:	f8ca 3000 	str.w	r3, [sl]
 801aea8:	89a3      	ldrh	r3, [r4, #12]
 801aeaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aeae:	81a3      	strh	r3, [r4, #12]
 801aeb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aeb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aeb8:	6921      	ldr	r1, [r4, #16]
 801aeba:	464a      	mov	r2, r9
 801aebc:	f7ff fb26 	bl	801a50c <memcpy>
 801aec0:	89a3      	ldrh	r3, [r4, #12]
 801aec2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801aec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aeca:	81a3      	strh	r3, [r4, #12]
 801aecc:	6126      	str	r6, [r4, #16]
 801aece:	6165      	str	r5, [r4, #20]
 801aed0:	444e      	add	r6, r9
 801aed2:	eba5 0509 	sub.w	r5, r5, r9
 801aed6:	6026      	str	r6, [r4, #0]
 801aed8:	60a5      	str	r5, [r4, #8]
 801aeda:	463e      	mov	r6, r7
 801aedc:	42be      	cmp	r6, r7
 801aede:	d900      	bls.n	801aee2 <__ssputs_r+0x86>
 801aee0:	463e      	mov	r6, r7
 801aee2:	6820      	ldr	r0, [r4, #0]
 801aee4:	4632      	mov	r2, r6
 801aee6:	4641      	mov	r1, r8
 801aee8:	f000 fc9c 	bl	801b824 <memmove>
 801aeec:	68a3      	ldr	r3, [r4, #8]
 801aeee:	1b9b      	subs	r3, r3, r6
 801aef0:	60a3      	str	r3, [r4, #8]
 801aef2:	6823      	ldr	r3, [r4, #0]
 801aef4:	4433      	add	r3, r6
 801aef6:	6023      	str	r3, [r4, #0]
 801aef8:	2000      	movs	r0, #0
 801aefa:	e7db      	b.n	801aeb4 <__ssputs_r+0x58>
 801aefc:	462a      	mov	r2, r5
 801aefe:	f000 fcab 	bl	801b858 <_realloc_r>
 801af02:	4606      	mov	r6, r0
 801af04:	2800      	cmp	r0, #0
 801af06:	d1e1      	bne.n	801aecc <__ssputs_r+0x70>
 801af08:	6921      	ldr	r1, [r4, #16]
 801af0a:	4650      	mov	r0, sl
 801af0c:	f7ff fb14 	bl	801a538 <_free_r>
 801af10:	e7c7      	b.n	801aea2 <__ssputs_r+0x46>
	...

0801af14 <_svfiprintf_r>:
 801af14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af18:	4698      	mov	r8, r3
 801af1a:	898b      	ldrh	r3, [r1, #12]
 801af1c:	061b      	lsls	r3, r3, #24
 801af1e:	b09d      	sub	sp, #116	; 0x74
 801af20:	4607      	mov	r7, r0
 801af22:	460d      	mov	r5, r1
 801af24:	4614      	mov	r4, r2
 801af26:	d50e      	bpl.n	801af46 <_svfiprintf_r+0x32>
 801af28:	690b      	ldr	r3, [r1, #16]
 801af2a:	b963      	cbnz	r3, 801af46 <_svfiprintf_r+0x32>
 801af2c:	2140      	movs	r1, #64	; 0x40
 801af2e:	f7ff fb6f 	bl	801a610 <_malloc_r>
 801af32:	6028      	str	r0, [r5, #0]
 801af34:	6128      	str	r0, [r5, #16]
 801af36:	b920      	cbnz	r0, 801af42 <_svfiprintf_r+0x2e>
 801af38:	230c      	movs	r3, #12
 801af3a:	603b      	str	r3, [r7, #0]
 801af3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801af40:	e0d1      	b.n	801b0e6 <_svfiprintf_r+0x1d2>
 801af42:	2340      	movs	r3, #64	; 0x40
 801af44:	616b      	str	r3, [r5, #20]
 801af46:	2300      	movs	r3, #0
 801af48:	9309      	str	r3, [sp, #36]	; 0x24
 801af4a:	2320      	movs	r3, #32
 801af4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801af50:	f8cd 800c 	str.w	r8, [sp, #12]
 801af54:	2330      	movs	r3, #48	; 0x30
 801af56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801b100 <_svfiprintf_r+0x1ec>
 801af5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801af5e:	f04f 0901 	mov.w	r9, #1
 801af62:	4623      	mov	r3, r4
 801af64:	469a      	mov	sl, r3
 801af66:	f813 2b01 	ldrb.w	r2, [r3], #1
 801af6a:	b10a      	cbz	r2, 801af70 <_svfiprintf_r+0x5c>
 801af6c:	2a25      	cmp	r2, #37	; 0x25
 801af6e:	d1f9      	bne.n	801af64 <_svfiprintf_r+0x50>
 801af70:	ebba 0b04 	subs.w	fp, sl, r4
 801af74:	d00b      	beq.n	801af8e <_svfiprintf_r+0x7a>
 801af76:	465b      	mov	r3, fp
 801af78:	4622      	mov	r2, r4
 801af7a:	4629      	mov	r1, r5
 801af7c:	4638      	mov	r0, r7
 801af7e:	f7ff ff6d 	bl	801ae5c <__ssputs_r>
 801af82:	3001      	adds	r0, #1
 801af84:	f000 80aa 	beq.w	801b0dc <_svfiprintf_r+0x1c8>
 801af88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801af8a:	445a      	add	r2, fp
 801af8c:	9209      	str	r2, [sp, #36]	; 0x24
 801af8e:	f89a 3000 	ldrb.w	r3, [sl]
 801af92:	2b00      	cmp	r3, #0
 801af94:	f000 80a2 	beq.w	801b0dc <_svfiprintf_r+0x1c8>
 801af98:	2300      	movs	r3, #0
 801af9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801af9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801afa2:	f10a 0a01 	add.w	sl, sl, #1
 801afa6:	9304      	str	r3, [sp, #16]
 801afa8:	9307      	str	r3, [sp, #28]
 801afaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801afae:	931a      	str	r3, [sp, #104]	; 0x68
 801afb0:	4654      	mov	r4, sl
 801afb2:	2205      	movs	r2, #5
 801afb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801afb8:	4851      	ldr	r0, [pc, #324]	; (801b100 <_svfiprintf_r+0x1ec>)
 801afba:	f7e5 f921 	bl	8000200 <memchr>
 801afbe:	9a04      	ldr	r2, [sp, #16]
 801afc0:	b9d8      	cbnz	r0, 801affa <_svfiprintf_r+0xe6>
 801afc2:	06d0      	lsls	r0, r2, #27
 801afc4:	bf44      	itt	mi
 801afc6:	2320      	movmi	r3, #32
 801afc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801afcc:	0711      	lsls	r1, r2, #28
 801afce:	bf44      	itt	mi
 801afd0:	232b      	movmi	r3, #43	; 0x2b
 801afd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801afd6:	f89a 3000 	ldrb.w	r3, [sl]
 801afda:	2b2a      	cmp	r3, #42	; 0x2a
 801afdc:	d015      	beq.n	801b00a <_svfiprintf_r+0xf6>
 801afde:	9a07      	ldr	r2, [sp, #28]
 801afe0:	4654      	mov	r4, sl
 801afe2:	2000      	movs	r0, #0
 801afe4:	f04f 0c0a 	mov.w	ip, #10
 801afe8:	4621      	mov	r1, r4
 801afea:	f811 3b01 	ldrb.w	r3, [r1], #1
 801afee:	3b30      	subs	r3, #48	; 0x30
 801aff0:	2b09      	cmp	r3, #9
 801aff2:	d94e      	bls.n	801b092 <_svfiprintf_r+0x17e>
 801aff4:	b1b0      	cbz	r0, 801b024 <_svfiprintf_r+0x110>
 801aff6:	9207      	str	r2, [sp, #28]
 801aff8:	e014      	b.n	801b024 <_svfiprintf_r+0x110>
 801affa:	eba0 0308 	sub.w	r3, r0, r8
 801affe:	fa09 f303 	lsl.w	r3, r9, r3
 801b002:	4313      	orrs	r3, r2
 801b004:	9304      	str	r3, [sp, #16]
 801b006:	46a2      	mov	sl, r4
 801b008:	e7d2      	b.n	801afb0 <_svfiprintf_r+0x9c>
 801b00a:	9b03      	ldr	r3, [sp, #12]
 801b00c:	1d19      	adds	r1, r3, #4
 801b00e:	681b      	ldr	r3, [r3, #0]
 801b010:	9103      	str	r1, [sp, #12]
 801b012:	2b00      	cmp	r3, #0
 801b014:	bfbb      	ittet	lt
 801b016:	425b      	neglt	r3, r3
 801b018:	f042 0202 	orrlt.w	r2, r2, #2
 801b01c:	9307      	strge	r3, [sp, #28]
 801b01e:	9307      	strlt	r3, [sp, #28]
 801b020:	bfb8      	it	lt
 801b022:	9204      	strlt	r2, [sp, #16]
 801b024:	7823      	ldrb	r3, [r4, #0]
 801b026:	2b2e      	cmp	r3, #46	; 0x2e
 801b028:	d10c      	bne.n	801b044 <_svfiprintf_r+0x130>
 801b02a:	7863      	ldrb	r3, [r4, #1]
 801b02c:	2b2a      	cmp	r3, #42	; 0x2a
 801b02e:	d135      	bne.n	801b09c <_svfiprintf_r+0x188>
 801b030:	9b03      	ldr	r3, [sp, #12]
 801b032:	1d1a      	adds	r2, r3, #4
 801b034:	681b      	ldr	r3, [r3, #0]
 801b036:	9203      	str	r2, [sp, #12]
 801b038:	2b00      	cmp	r3, #0
 801b03a:	bfb8      	it	lt
 801b03c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b040:	3402      	adds	r4, #2
 801b042:	9305      	str	r3, [sp, #20]
 801b044:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801b110 <_svfiprintf_r+0x1fc>
 801b048:	7821      	ldrb	r1, [r4, #0]
 801b04a:	2203      	movs	r2, #3
 801b04c:	4650      	mov	r0, sl
 801b04e:	f7e5 f8d7 	bl	8000200 <memchr>
 801b052:	b140      	cbz	r0, 801b066 <_svfiprintf_r+0x152>
 801b054:	2340      	movs	r3, #64	; 0x40
 801b056:	eba0 000a 	sub.w	r0, r0, sl
 801b05a:	fa03 f000 	lsl.w	r0, r3, r0
 801b05e:	9b04      	ldr	r3, [sp, #16]
 801b060:	4303      	orrs	r3, r0
 801b062:	3401      	adds	r4, #1
 801b064:	9304      	str	r3, [sp, #16]
 801b066:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b06a:	4826      	ldr	r0, [pc, #152]	; (801b104 <_svfiprintf_r+0x1f0>)
 801b06c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b070:	2206      	movs	r2, #6
 801b072:	f7e5 f8c5 	bl	8000200 <memchr>
 801b076:	2800      	cmp	r0, #0
 801b078:	d038      	beq.n	801b0ec <_svfiprintf_r+0x1d8>
 801b07a:	4b23      	ldr	r3, [pc, #140]	; (801b108 <_svfiprintf_r+0x1f4>)
 801b07c:	bb1b      	cbnz	r3, 801b0c6 <_svfiprintf_r+0x1b2>
 801b07e:	9b03      	ldr	r3, [sp, #12]
 801b080:	3307      	adds	r3, #7
 801b082:	f023 0307 	bic.w	r3, r3, #7
 801b086:	3308      	adds	r3, #8
 801b088:	9303      	str	r3, [sp, #12]
 801b08a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b08c:	4433      	add	r3, r6
 801b08e:	9309      	str	r3, [sp, #36]	; 0x24
 801b090:	e767      	b.n	801af62 <_svfiprintf_r+0x4e>
 801b092:	fb0c 3202 	mla	r2, ip, r2, r3
 801b096:	460c      	mov	r4, r1
 801b098:	2001      	movs	r0, #1
 801b09a:	e7a5      	b.n	801afe8 <_svfiprintf_r+0xd4>
 801b09c:	2300      	movs	r3, #0
 801b09e:	3401      	adds	r4, #1
 801b0a0:	9305      	str	r3, [sp, #20]
 801b0a2:	4619      	mov	r1, r3
 801b0a4:	f04f 0c0a 	mov.w	ip, #10
 801b0a8:	4620      	mov	r0, r4
 801b0aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b0ae:	3a30      	subs	r2, #48	; 0x30
 801b0b0:	2a09      	cmp	r2, #9
 801b0b2:	d903      	bls.n	801b0bc <_svfiprintf_r+0x1a8>
 801b0b4:	2b00      	cmp	r3, #0
 801b0b6:	d0c5      	beq.n	801b044 <_svfiprintf_r+0x130>
 801b0b8:	9105      	str	r1, [sp, #20]
 801b0ba:	e7c3      	b.n	801b044 <_svfiprintf_r+0x130>
 801b0bc:	fb0c 2101 	mla	r1, ip, r1, r2
 801b0c0:	4604      	mov	r4, r0
 801b0c2:	2301      	movs	r3, #1
 801b0c4:	e7f0      	b.n	801b0a8 <_svfiprintf_r+0x194>
 801b0c6:	ab03      	add	r3, sp, #12
 801b0c8:	9300      	str	r3, [sp, #0]
 801b0ca:	462a      	mov	r2, r5
 801b0cc:	4b0f      	ldr	r3, [pc, #60]	; (801b10c <_svfiprintf_r+0x1f8>)
 801b0ce:	a904      	add	r1, sp, #16
 801b0d0:	4638      	mov	r0, r7
 801b0d2:	f3af 8000 	nop.w
 801b0d6:	1c42      	adds	r2, r0, #1
 801b0d8:	4606      	mov	r6, r0
 801b0da:	d1d6      	bne.n	801b08a <_svfiprintf_r+0x176>
 801b0dc:	89ab      	ldrh	r3, [r5, #12]
 801b0de:	065b      	lsls	r3, r3, #25
 801b0e0:	f53f af2c 	bmi.w	801af3c <_svfiprintf_r+0x28>
 801b0e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b0e6:	b01d      	add	sp, #116	; 0x74
 801b0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0ec:	ab03      	add	r3, sp, #12
 801b0ee:	9300      	str	r3, [sp, #0]
 801b0f0:	462a      	mov	r2, r5
 801b0f2:	4b06      	ldr	r3, [pc, #24]	; (801b10c <_svfiprintf_r+0x1f8>)
 801b0f4:	a904      	add	r1, sp, #16
 801b0f6:	4638      	mov	r0, r7
 801b0f8:	f000 f9d4 	bl	801b4a4 <_printf_i>
 801b0fc:	e7eb      	b.n	801b0d6 <_svfiprintf_r+0x1c2>
 801b0fe:	bf00      	nop
 801b100:	0801d990 	.word	0x0801d990
 801b104:	0801d99a 	.word	0x0801d99a
 801b108:	00000000 	.word	0x00000000
 801b10c:	0801ae5d 	.word	0x0801ae5d
 801b110:	0801d996 	.word	0x0801d996

0801b114 <__sfputc_r>:
 801b114:	6893      	ldr	r3, [r2, #8]
 801b116:	3b01      	subs	r3, #1
 801b118:	2b00      	cmp	r3, #0
 801b11a:	b410      	push	{r4}
 801b11c:	6093      	str	r3, [r2, #8]
 801b11e:	da08      	bge.n	801b132 <__sfputc_r+0x1e>
 801b120:	6994      	ldr	r4, [r2, #24]
 801b122:	42a3      	cmp	r3, r4
 801b124:	db01      	blt.n	801b12a <__sfputc_r+0x16>
 801b126:	290a      	cmp	r1, #10
 801b128:	d103      	bne.n	801b132 <__sfputc_r+0x1e>
 801b12a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b12e:	f7ff bba9 	b.w	801a884 <__swbuf_r>
 801b132:	6813      	ldr	r3, [r2, #0]
 801b134:	1c58      	adds	r0, r3, #1
 801b136:	6010      	str	r0, [r2, #0]
 801b138:	7019      	strb	r1, [r3, #0]
 801b13a:	4608      	mov	r0, r1
 801b13c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b140:	4770      	bx	lr

0801b142 <__sfputs_r>:
 801b142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b144:	4606      	mov	r6, r0
 801b146:	460f      	mov	r7, r1
 801b148:	4614      	mov	r4, r2
 801b14a:	18d5      	adds	r5, r2, r3
 801b14c:	42ac      	cmp	r4, r5
 801b14e:	d101      	bne.n	801b154 <__sfputs_r+0x12>
 801b150:	2000      	movs	r0, #0
 801b152:	e007      	b.n	801b164 <__sfputs_r+0x22>
 801b154:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b158:	463a      	mov	r2, r7
 801b15a:	4630      	mov	r0, r6
 801b15c:	f7ff ffda 	bl	801b114 <__sfputc_r>
 801b160:	1c43      	adds	r3, r0, #1
 801b162:	d1f3      	bne.n	801b14c <__sfputs_r+0xa>
 801b164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b168 <_vfiprintf_r>:
 801b168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b16c:	460d      	mov	r5, r1
 801b16e:	b09d      	sub	sp, #116	; 0x74
 801b170:	4614      	mov	r4, r2
 801b172:	4698      	mov	r8, r3
 801b174:	4606      	mov	r6, r0
 801b176:	b118      	cbz	r0, 801b180 <_vfiprintf_r+0x18>
 801b178:	6983      	ldr	r3, [r0, #24]
 801b17a:	b90b      	cbnz	r3, 801b180 <_vfiprintf_r+0x18>
 801b17c:	f7ff fd5c 	bl	801ac38 <__sinit>
 801b180:	4b89      	ldr	r3, [pc, #548]	; (801b3a8 <_vfiprintf_r+0x240>)
 801b182:	429d      	cmp	r5, r3
 801b184:	d11b      	bne.n	801b1be <_vfiprintf_r+0x56>
 801b186:	6875      	ldr	r5, [r6, #4]
 801b188:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b18a:	07d9      	lsls	r1, r3, #31
 801b18c:	d405      	bmi.n	801b19a <_vfiprintf_r+0x32>
 801b18e:	89ab      	ldrh	r3, [r5, #12]
 801b190:	059a      	lsls	r2, r3, #22
 801b192:	d402      	bmi.n	801b19a <_vfiprintf_r+0x32>
 801b194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b196:	f7ff fded 	bl	801ad74 <__retarget_lock_acquire_recursive>
 801b19a:	89ab      	ldrh	r3, [r5, #12]
 801b19c:	071b      	lsls	r3, r3, #28
 801b19e:	d501      	bpl.n	801b1a4 <_vfiprintf_r+0x3c>
 801b1a0:	692b      	ldr	r3, [r5, #16]
 801b1a2:	b9eb      	cbnz	r3, 801b1e0 <_vfiprintf_r+0x78>
 801b1a4:	4629      	mov	r1, r5
 801b1a6:	4630      	mov	r0, r6
 801b1a8:	f7ff fbbe 	bl	801a928 <__swsetup_r>
 801b1ac:	b1c0      	cbz	r0, 801b1e0 <_vfiprintf_r+0x78>
 801b1ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b1b0:	07dc      	lsls	r4, r3, #31
 801b1b2:	d50e      	bpl.n	801b1d2 <_vfiprintf_r+0x6a>
 801b1b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b1b8:	b01d      	add	sp, #116	; 0x74
 801b1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1be:	4b7b      	ldr	r3, [pc, #492]	; (801b3ac <_vfiprintf_r+0x244>)
 801b1c0:	429d      	cmp	r5, r3
 801b1c2:	d101      	bne.n	801b1c8 <_vfiprintf_r+0x60>
 801b1c4:	68b5      	ldr	r5, [r6, #8]
 801b1c6:	e7df      	b.n	801b188 <_vfiprintf_r+0x20>
 801b1c8:	4b79      	ldr	r3, [pc, #484]	; (801b3b0 <_vfiprintf_r+0x248>)
 801b1ca:	429d      	cmp	r5, r3
 801b1cc:	bf08      	it	eq
 801b1ce:	68f5      	ldreq	r5, [r6, #12]
 801b1d0:	e7da      	b.n	801b188 <_vfiprintf_r+0x20>
 801b1d2:	89ab      	ldrh	r3, [r5, #12]
 801b1d4:	0598      	lsls	r0, r3, #22
 801b1d6:	d4ed      	bmi.n	801b1b4 <_vfiprintf_r+0x4c>
 801b1d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b1da:	f7ff fdcc 	bl	801ad76 <__retarget_lock_release_recursive>
 801b1de:	e7e9      	b.n	801b1b4 <_vfiprintf_r+0x4c>
 801b1e0:	2300      	movs	r3, #0
 801b1e2:	9309      	str	r3, [sp, #36]	; 0x24
 801b1e4:	2320      	movs	r3, #32
 801b1e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b1ea:	f8cd 800c 	str.w	r8, [sp, #12]
 801b1ee:	2330      	movs	r3, #48	; 0x30
 801b1f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b3b4 <_vfiprintf_r+0x24c>
 801b1f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b1f8:	f04f 0901 	mov.w	r9, #1
 801b1fc:	4623      	mov	r3, r4
 801b1fe:	469a      	mov	sl, r3
 801b200:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b204:	b10a      	cbz	r2, 801b20a <_vfiprintf_r+0xa2>
 801b206:	2a25      	cmp	r2, #37	; 0x25
 801b208:	d1f9      	bne.n	801b1fe <_vfiprintf_r+0x96>
 801b20a:	ebba 0b04 	subs.w	fp, sl, r4
 801b20e:	d00b      	beq.n	801b228 <_vfiprintf_r+0xc0>
 801b210:	465b      	mov	r3, fp
 801b212:	4622      	mov	r2, r4
 801b214:	4629      	mov	r1, r5
 801b216:	4630      	mov	r0, r6
 801b218:	f7ff ff93 	bl	801b142 <__sfputs_r>
 801b21c:	3001      	adds	r0, #1
 801b21e:	f000 80aa 	beq.w	801b376 <_vfiprintf_r+0x20e>
 801b222:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b224:	445a      	add	r2, fp
 801b226:	9209      	str	r2, [sp, #36]	; 0x24
 801b228:	f89a 3000 	ldrb.w	r3, [sl]
 801b22c:	2b00      	cmp	r3, #0
 801b22e:	f000 80a2 	beq.w	801b376 <_vfiprintf_r+0x20e>
 801b232:	2300      	movs	r3, #0
 801b234:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b238:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b23c:	f10a 0a01 	add.w	sl, sl, #1
 801b240:	9304      	str	r3, [sp, #16]
 801b242:	9307      	str	r3, [sp, #28]
 801b244:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b248:	931a      	str	r3, [sp, #104]	; 0x68
 801b24a:	4654      	mov	r4, sl
 801b24c:	2205      	movs	r2, #5
 801b24e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b252:	4858      	ldr	r0, [pc, #352]	; (801b3b4 <_vfiprintf_r+0x24c>)
 801b254:	f7e4 ffd4 	bl	8000200 <memchr>
 801b258:	9a04      	ldr	r2, [sp, #16]
 801b25a:	b9d8      	cbnz	r0, 801b294 <_vfiprintf_r+0x12c>
 801b25c:	06d1      	lsls	r1, r2, #27
 801b25e:	bf44      	itt	mi
 801b260:	2320      	movmi	r3, #32
 801b262:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b266:	0713      	lsls	r3, r2, #28
 801b268:	bf44      	itt	mi
 801b26a:	232b      	movmi	r3, #43	; 0x2b
 801b26c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b270:	f89a 3000 	ldrb.w	r3, [sl]
 801b274:	2b2a      	cmp	r3, #42	; 0x2a
 801b276:	d015      	beq.n	801b2a4 <_vfiprintf_r+0x13c>
 801b278:	9a07      	ldr	r2, [sp, #28]
 801b27a:	4654      	mov	r4, sl
 801b27c:	2000      	movs	r0, #0
 801b27e:	f04f 0c0a 	mov.w	ip, #10
 801b282:	4621      	mov	r1, r4
 801b284:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b288:	3b30      	subs	r3, #48	; 0x30
 801b28a:	2b09      	cmp	r3, #9
 801b28c:	d94e      	bls.n	801b32c <_vfiprintf_r+0x1c4>
 801b28e:	b1b0      	cbz	r0, 801b2be <_vfiprintf_r+0x156>
 801b290:	9207      	str	r2, [sp, #28]
 801b292:	e014      	b.n	801b2be <_vfiprintf_r+0x156>
 801b294:	eba0 0308 	sub.w	r3, r0, r8
 801b298:	fa09 f303 	lsl.w	r3, r9, r3
 801b29c:	4313      	orrs	r3, r2
 801b29e:	9304      	str	r3, [sp, #16]
 801b2a0:	46a2      	mov	sl, r4
 801b2a2:	e7d2      	b.n	801b24a <_vfiprintf_r+0xe2>
 801b2a4:	9b03      	ldr	r3, [sp, #12]
 801b2a6:	1d19      	adds	r1, r3, #4
 801b2a8:	681b      	ldr	r3, [r3, #0]
 801b2aa:	9103      	str	r1, [sp, #12]
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	bfbb      	ittet	lt
 801b2b0:	425b      	neglt	r3, r3
 801b2b2:	f042 0202 	orrlt.w	r2, r2, #2
 801b2b6:	9307      	strge	r3, [sp, #28]
 801b2b8:	9307      	strlt	r3, [sp, #28]
 801b2ba:	bfb8      	it	lt
 801b2bc:	9204      	strlt	r2, [sp, #16]
 801b2be:	7823      	ldrb	r3, [r4, #0]
 801b2c0:	2b2e      	cmp	r3, #46	; 0x2e
 801b2c2:	d10c      	bne.n	801b2de <_vfiprintf_r+0x176>
 801b2c4:	7863      	ldrb	r3, [r4, #1]
 801b2c6:	2b2a      	cmp	r3, #42	; 0x2a
 801b2c8:	d135      	bne.n	801b336 <_vfiprintf_r+0x1ce>
 801b2ca:	9b03      	ldr	r3, [sp, #12]
 801b2cc:	1d1a      	adds	r2, r3, #4
 801b2ce:	681b      	ldr	r3, [r3, #0]
 801b2d0:	9203      	str	r2, [sp, #12]
 801b2d2:	2b00      	cmp	r3, #0
 801b2d4:	bfb8      	it	lt
 801b2d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b2da:	3402      	adds	r4, #2
 801b2dc:	9305      	str	r3, [sp, #20]
 801b2de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b3c4 <_vfiprintf_r+0x25c>
 801b2e2:	7821      	ldrb	r1, [r4, #0]
 801b2e4:	2203      	movs	r2, #3
 801b2e6:	4650      	mov	r0, sl
 801b2e8:	f7e4 ff8a 	bl	8000200 <memchr>
 801b2ec:	b140      	cbz	r0, 801b300 <_vfiprintf_r+0x198>
 801b2ee:	2340      	movs	r3, #64	; 0x40
 801b2f0:	eba0 000a 	sub.w	r0, r0, sl
 801b2f4:	fa03 f000 	lsl.w	r0, r3, r0
 801b2f8:	9b04      	ldr	r3, [sp, #16]
 801b2fa:	4303      	orrs	r3, r0
 801b2fc:	3401      	adds	r4, #1
 801b2fe:	9304      	str	r3, [sp, #16]
 801b300:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b304:	482c      	ldr	r0, [pc, #176]	; (801b3b8 <_vfiprintf_r+0x250>)
 801b306:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b30a:	2206      	movs	r2, #6
 801b30c:	f7e4 ff78 	bl	8000200 <memchr>
 801b310:	2800      	cmp	r0, #0
 801b312:	d03f      	beq.n	801b394 <_vfiprintf_r+0x22c>
 801b314:	4b29      	ldr	r3, [pc, #164]	; (801b3bc <_vfiprintf_r+0x254>)
 801b316:	bb1b      	cbnz	r3, 801b360 <_vfiprintf_r+0x1f8>
 801b318:	9b03      	ldr	r3, [sp, #12]
 801b31a:	3307      	adds	r3, #7
 801b31c:	f023 0307 	bic.w	r3, r3, #7
 801b320:	3308      	adds	r3, #8
 801b322:	9303      	str	r3, [sp, #12]
 801b324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b326:	443b      	add	r3, r7
 801b328:	9309      	str	r3, [sp, #36]	; 0x24
 801b32a:	e767      	b.n	801b1fc <_vfiprintf_r+0x94>
 801b32c:	fb0c 3202 	mla	r2, ip, r2, r3
 801b330:	460c      	mov	r4, r1
 801b332:	2001      	movs	r0, #1
 801b334:	e7a5      	b.n	801b282 <_vfiprintf_r+0x11a>
 801b336:	2300      	movs	r3, #0
 801b338:	3401      	adds	r4, #1
 801b33a:	9305      	str	r3, [sp, #20]
 801b33c:	4619      	mov	r1, r3
 801b33e:	f04f 0c0a 	mov.w	ip, #10
 801b342:	4620      	mov	r0, r4
 801b344:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b348:	3a30      	subs	r2, #48	; 0x30
 801b34a:	2a09      	cmp	r2, #9
 801b34c:	d903      	bls.n	801b356 <_vfiprintf_r+0x1ee>
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d0c5      	beq.n	801b2de <_vfiprintf_r+0x176>
 801b352:	9105      	str	r1, [sp, #20]
 801b354:	e7c3      	b.n	801b2de <_vfiprintf_r+0x176>
 801b356:	fb0c 2101 	mla	r1, ip, r1, r2
 801b35a:	4604      	mov	r4, r0
 801b35c:	2301      	movs	r3, #1
 801b35e:	e7f0      	b.n	801b342 <_vfiprintf_r+0x1da>
 801b360:	ab03      	add	r3, sp, #12
 801b362:	9300      	str	r3, [sp, #0]
 801b364:	462a      	mov	r2, r5
 801b366:	4b16      	ldr	r3, [pc, #88]	; (801b3c0 <_vfiprintf_r+0x258>)
 801b368:	a904      	add	r1, sp, #16
 801b36a:	4630      	mov	r0, r6
 801b36c:	f3af 8000 	nop.w
 801b370:	4607      	mov	r7, r0
 801b372:	1c78      	adds	r0, r7, #1
 801b374:	d1d6      	bne.n	801b324 <_vfiprintf_r+0x1bc>
 801b376:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b378:	07d9      	lsls	r1, r3, #31
 801b37a:	d405      	bmi.n	801b388 <_vfiprintf_r+0x220>
 801b37c:	89ab      	ldrh	r3, [r5, #12]
 801b37e:	059a      	lsls	r2, r3, #22
 801b380:	d402      	bmi.n	801b388 <_vfiprintf_r+0x220>
 801b382:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b384:	f7ff fcf7 	bl	801ad76 <__retarget_lock_release_recursive>
 801b388:	89ab      	ldrh	r3, [r5, #12]
 801b38a:	065b      	lsls	r3, r3, #25
 801b38c:	f53f af12 	bmi.w	801b1b4 <_vfiprintf_r+0x4c>
 801b390:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b392:	e711      	b.n	801b1b8 <_vfiprintf_r+0x50>
 801b394:	ab03      	add	r3, sp, #12
 801b396:	9300      	str	r3, [sp, #0]
 801b398:	462a      	mov	r2, r5
 801b39a:	4b09      	ldr	r3, [pc, #36]	; (801b3c0 <_vfiprintf_r+0x258>)
 801b39c:	a904      	add	r1, sp, #16
 801b39e:	4630      	mov	r0, r6
 801b3a0:	f000 f880 	bl	801b4a4 <_printf_i>
 801b3a4:	e7e4      	b.n	801b370 <_vfiprintf_r+0x208>
 801b3a6:	bf00      	nop
 801b3a8:	0801d950 	.word	0x0801d950
 801b3ac:	0801d970 	.word	0x0801d970
 801b3b0:	0801d930 	.word	0x0801d930
 801b3b4:	0801d990 	.word	0x0801d990
 801b3b8:	0801d99a 	.word	0x0801d99a
 801b3bc:	00000000 	.word	0x00000000
 801b3c0:	0801b143 	.word	0x0801b143
 801b3c4:	0801d996 	.word	0x0801d996

0801b3c8 <_printf_common>:
 801b3c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b3cc:	4616      	mov	r6, r2
 801b3ce:	4699      	mov	r9, r3
 801b3d0:	688a      	ldr	r2, [r1, #8]
 801b3d2:	690b      	ldr	r3, [r1, #16]
 801b3d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b3d8:	4293      	cmp	r3, r2
 801b3da:	bfb8      	it	lt
 801b3dc:	4613      	movlt	r3, r2
 801b3de:	6033      	str	r3, [r6, #0]
 801b3e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b3e4:	4607      	mov	r7, r0
 801b3e6:	460c      	mov	r4, r1
 801b3e8:	b10a      	cbz	r2, 801b3ee <_printf_common+0x26>
 801b3ea:	3301      	adds	r3, #1
 801b3ec:	6033      	str	r3, [r6, #0]
 801b3ee:	6823      	ldr	r3, [r4, #0]
 801b3f0:	0699      	lsls	r1, r3, #26
 801b3f2:	bf42      	ittt	mi
 801b3f4:	6833      	ldrmi	r3, [r6, #0]
 801b3f6:	3302      	addmi	r3, #2
 801b3f8:	6033      	strmi	r3, [r6, #0]
 801b3fa:	6825      	ldr	r5, [r4, #0]
 801b3fc:	f015 0506 	ands.w	r5, r5, #6
 801b400:	d106      	bne.n	801b410 <_printf_common+0x48>
 801b402:	f104 0a19 	add.w	sl, r4, #25
 801b406:	68e3      	ldr	r3, [r4, #12]
 801b408:	6832      	ldr	r2, [r6, #0]
 801b40a:	1a9b      	subs	r3, r3, r2
 801b40c:	42ab      	cmp	r3, r5
 801b40e:	dc26      	bgt.n	801b45e <_printf_common+0x96>
 801b410:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b414:	1e13      	subs	r3, r2, #0
 801b416:	6822      	ldr	r2, [r4, #0]
 801b418:	bf18      	it	ne
 801b41a:	2301      	movne	r3, #1
 801b41c:	0692      	lsls	r2, r2, #26
 801b41e:	d42b      	bmi.n	801b478 <_printf_common+0xb0>
 801b420:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b424:	4649      	mov	r1, r9
 801b426:	4638      	mov	r0, r7
 801b428:	47c0      	blx	r8
 801b42a:	3001      	adds	r0, #1
 801b42c:	d01e      	beq.n	801b46c <_printf_common+0xa4>
 801b42e:	6823      	ldr	r3, [r4, #0]
 801b430:	68e5      	ldr	r5, [r4, #12]
 801b432:	6832      	ldr	r2, [r6, #0]
 801b434:	f003 0306 	and.w	r3, r3, #6
 801b438:	2b04      	cmp	r3, #4
 801b43a:	bf08      	it	eq
 801b43c:	1aad      	subeq	r5, r5, r2
 801b43e:	68a3      	ldr	r3, [r4, #8]
 801b440:	6922      	ldr	r2, [r4, #16]
 801b442:	bf0c      	ite	eq
 801b444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b448:	2500      	movne	r5, #0
 801b44a:	4293      	cmp	r3, r2
 801b44c:	bfc4      	itt	gt
 801b44e:	1a9b      	subgt	r3, r3, r2
 801b450:	18ed      	addgt	r5, r5, r3
 801b452:	2600      	movs	r6, #0
 801b454:	341a      	adds	r4, #26
 801b456:	42b5      	cmp	r5, r6
 801b458:	d11a      	bne.n	801b490 <_printf_common+0xc8>
 801b45a:	2000      	movs	r0, #0
 801b45c:	e008      	b.n	801b470 <_printf_common+0xa8>
 801b45e:	2301      	movs	r3, #1
 801b460:	4652      	mov	r2, sl
 801b462:	4649      	mov	r1, r9
 801b464:	4638      	mov	r0, r7
 801b466:	47c0      	blx	r8
 801b468:	3001      	adds	r0, #1
 801b46a:	d103      	bne.n	801b474 <_printf_common+0xac>
 801b46c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b474:	3501      	adds	r5, #1
 801b476:	e7c6      	b.n	801b406 <_printf_common+0x3e>
 801b478:	18e1      	adds	r1, r4, r3
 801b47a:	1c5a      	adds	r2, r3, #1
 801b47c:	2030      	movs	r0, #48	; 0x30
 801b47e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b482:	4422      	add	r2, r4
 801b484:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b488:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b48c:	3302      	adds	r3, #2
 801b48e:	e7c7      	b.n	801b420 <_printf_common+0x58>
 801b490:	2301      	movs	r3, #1
 801b492:	4622      	mov	r2, r4
 801b494:	4649      	mov	r1, r9
 801b496:	4638      	mov	r0, r7
 801b498:	47c0      	blx	r8
 801b49a:	3001      	adds	r0, #1
 801b49c:	d0e6      	beq.n	801b46c <_printf_common+0xa4>
 801b49e:	3601      	adds	r6, #1
 801b4a0:	e7d9      	b.n	801b456 <_printf_common+0x8e>
	...

0801b4a4 <_printf_i>:
 801b4a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b4a8:	7e0f      	ldrb	r7, [r1, #24]
 801b4aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b4ac:	2f78      	cmp	r7, #120	; 0x78
 801b4ae:	4691      	mov	r9, r2
 801b4b0:	4680      	mov	r8, r0
 801b4b2:	460c      	mov	r4, r1
 801b4b4:	469a      	mov	sl, r3
 801b4b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b4ba:	d807      	bhi.n	801b4cc <_printf_i+0x28>
 801b4bc:	2f62      	cmp	r7, #98	; 0x62
 801b4be:	d80a      	bhi.n	801b4d6 <_printf_i+0x32>
 801b4c0:	2f00      	cmp	r7, #0
 801b4c2:	f000 80d8 	beq.w	801b676 <_printf_i+0x1d2>
 801b4c6:	2f58      	cmp	r7, #88	; 0x58
 801b4c8:	f000 80a3 	beq.w	801b612 <_printf_i+0x16e>
 801b4cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b4d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b4d4:	e03a      	b.n	801b54c <_printf_i+0xa8>
 801b4d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b4da:	2b15      	cmp	r3, #21
 801b4dc:	d8f6      	bhi.n	801b4cc <_printf_i+0x28>
 801b4de:	a101      	add	r1, pc, #4	; (adr r1, 801b4e4 <_printf_i+0x40>)
 801b4e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b4e4:	0801b53d 	.word	0x0801b53d
 801b4e8:	0801b551 	.word	0x0801b551
 801b4ec:	0801b4cd 	.word	0x0801b4cd
 801b4f0:	0801b4cd 	.word	0x0801b4cd
 801b4f4:	0801b4cd 	.word	0x0801b4cd
 801b4f8:	0801b4cd 	.word	0x0801b4cd
 801b4fc:	0801b551 	.word	0x0801b551
 801b500:	0801b4cd 	.word	0x0801b4cd
 801b504:	0801b4cd 	.word	0x0801b4cd
 801b508:	0801b4cd 	.word	0x0801b4cd
 801b50c:	0801b4cd 	.word	0x0801b4cd
 801b510:	0801b65d 	.word	0x0801b65d
 801b514:	0801b581 	.word	0x0801b581
 801b518:	0801b63f 	.word	0x0801b63f
 801b51c:	0801b4cd 	.word	0x0801b4cd
 801b520:	0801b4cd 	.word	0x0801b4cd
 801b524:	0801b67f 	.word	0x0801b67f
 801b528:	0801b4cd 	.word	0x0801b4cd
 801b52c:	0801b581 	.word	0x0801b581
 801b530:	0801b4cd 	.word	0x0801b4cd
 801b534:	0801b4cd 	.word	0x0801b4cd
 801b538:	0801b647 	.word	0x0801b647
 801b53c:	682b      	ldr	r3, [r5, #0]
 801b53e:	1d1a      	adds	r2, r3, #4
 801b540:	681b      	ldr	r3, [r3, #0]
 801b542:	602a      	str	r2, [r5, #0]
 801b544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b54c:	2301      	movs	r3, #1
 801b54e:	e0a3      	b.n	801b698 <_printf_i+0x1f4>
 801b550:	6820      	ldr	r0, [r4, #0]
 801b552:	6829      	ldr	r1, [r5, #0]
 801b554:	0606      	lsls	r6, r0, #24
 801b556:	f101 0304 	add.w	r3, r1, #4
 801b55a:	d50a      	bpl.n	801b572 <_printf_i+0xce>
 801b55c:	680e      	ldr	r6, [r1, #0]
 801b55e:	602b      	str	r3, [r5, #0]
 801b560:	2e00      	cmp	r6, #0
 801b562:	da03      	bge.n	801b56c <_printf_i+0xc8>
 801b564:	232d      	movs	r3, #45	; 0x2d
 801b566:	4276      	negs	r6, r6
 801b568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b56c:	485e      	ldr	r0, [pc, #376]	; (801b6e8 <_printf_i+0x244>)
 801b56e:	230a      	movs	r3, #10
 801b570:	e019      	b.n	801b5a6 <_printf_i+0x102>
 801b572:	680e      	ldr	r6, [r1, #0]
 801b574:	602b      	str	r3, [r5, #0]
 801b576:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b57a:	bf18      	it	ne
 801b57c:	b236      	sxthne	r6, r6
 801b57e:	e7ef      	b.n	801b560 <_printf_i+0xbc>
 801b580:	682b      	ldr	r3, [r5, #0]
 801b582:	6820      	ldr	r0, [r4, #0]
 801b584:	1d19      	adds	r1, r3, #4
 801b586:	6029      	str	r1, [r5, #0]
 801b588:	0601      	lsls	r1, r0, #24
 801b58a:	d501      	bpl.n	801b590 <_printf_i+0xec>
 801b58c:	681e      	ldr	r6, [r3, #0]
 801b58e:	e002      	b.n	801b596 <_printf_i+0xf2>
 801b590:	0646      	lsls	r6, r0, #25
 801b592:	d5fb      	bpl.n	801b58c <_printf_i+0xe8>
 801b594:	881e      	ldrh	r6, [r3, #0]
 801b596:	4854      	ldr	r0, [pc, #336]	; (801b6e8 <_printf_i+0x244>)
 801b598:	2f6f      	cmp	r7, #111	; 0x6f
 801b59a:	bf0c      	ite	eq
 801b59c:	2308      	moveq	r3, #8
 801b59e:	230a      	movne	r3, #10
 801b5a0:	2100      	movs	r1, #0
 801b5a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b5a6:	6865      	ldr	r5, [r4, #4]
 801b5a8:	60a5      	str	r5, [r4, #8]
 801b5aa:	2d00      	cmp	r5, #0
 801b5ac:	bfa2      	ittt	ge
 801b5ae:	6821      	ldrge	r1, [r4, #0]
 801b5b0:	f021 0104 	bicge.w	r1, r1, #4
 801b5b4:	6021      	strge	r1, [r4, #0]
 801b5b6:	b90e      	cbnz	r6, 801b5bc <_printf_i+0x118>
 801b5b8:	2d00      	cmp	r5, #0
 801b5ba:	d04d      	beq.n	801b658 <_printf_i+0x1b4>
 801b5bc:	4615      	mov	r5, r2
 801b5be:	fbb6 f1f3 	udiv	r1, r6, r3
 801b5c2:	fb03 6711 	mls	r7, r3, r1, r6
 801b5c6:	5dc7      	ldrb	r7, [r0, r7]
 801b5c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b5cc:	4637      	mov	r7, r6
 801b5ce:	42bb      	cmp	r3, r7
 801b5d0:	460e      	mov	r6, r1
 801b5d2:	d9f4      	bls.n	801b5be <_printf_i+0x11a>
 801b5d4:	2b08      	cmp	r3, #8
 801b5d6:	d10b      	bne.n	801b5f0 <_printf_i+0x14c>
 801b5d8:	6823      	ldr	r3, [r4, #0]
 801b5da:	07de      	lsls	r6, r3, #31
 801b5dc:	d508      	bpl.n	801b5f0 <_printf_i+0x14c>
 801b5de:	6923      	ldr	r3, [r4, #16]
 801b5e0:	6861      	ldr	r1, [r4, #4]
 801b5e2:	4299      	cmp	r1, r3
 801b5e4:	bfde      	ittt	le
 801b5e6:	2330      	movle	r3, #48	; 0x30
 801b5e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b5ec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801b5f0:	1b52      	subs	r2, r2, r5
 801b5f2:	6122      	str	r2, [r4, #16]
 801b5f4:	f8cd a000 	str.w	sl, [sp]
 801b5f8:	464b      	mov	r3, r9
 801b5fa:	aa03      	add	r2, sp, #12
 801b5fc:	4621      	mov	r1, r4
 801b5fe:	4640      	mov	r0, r8
 801b600:	f7ff fee2 	bl	801b3c8 <_printf_common>
 801b604:	3001      	adds	r0, #1
 801b606:	d14c      	bne.n	801b6a2 <_printf_i+0x1fe>
 801b608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b60c:	b004      	add	sp, #16
 801b60e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b612:	4835      	ldr	r0, [pc, #212]	; (801b6e8 <_printf_i+0x244>)
 801b614:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b618:	6829      	ldr	r1, [r5, #0]
 801b61a:	6823      	ldr	r3, [r4, #0]
 801b61c:	f851 6b04 	ldr.w	r6, [r1], #4
 801b620:	6029      	str	r1, [r5, #0]
 801b622:	061d      	lsls	r5, r3, #24
 801b624:	d514      	bpl.n	801b650 <_printf_i+0x1ac>
 801b626:	07df      	lsls	r7, r3, #31
 801b628:	bf44      	itt	mi
 801b62a:	f043 0320 	orrmi.w	r3, r3, #32
 801b62e:	6023      	strmi	r3, [r4, #0]
 801b630:	b91e      	cbnz	r6, 801b63a <_printf_i+0x196>
 801b632:	6823      	ldr	r3, [r4, #0]
 801b634:	f023 0320 	bic.w	r3, r3, #32
 801b638:	6023      	str	r3, [r4, #0]
 801b63a:	2310      	movs	r3, #16
 801b63c:	e7b0      	b.n	801b5a0 <_printf_i+0xfc>
 801b63e:	6823      	ldr	r3, [r4, #0]
 801b640:	f043 0320 	orr.w	r3, r3, #32
 801b644:	6023      	str	r3, [r4, #0]
 801b646:	2378      	movs	r3, #120	; 0x78
 801b648:	4828      	ldr	r0, [pc, #160]	; (801b6ec <_printf_i+0x248>)
 801b64a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b64e:	e7e3      	b.n	801b618 <_printf_i+0x174>
 801b650:	0659      	lsls	r1, r3, #25
 801b652:	bf48      	it	mi
 801b654:	b2b6      	uxthmi	r6, r6
 801b656:	e7e6      	b.n	801b626 <_printf_i+0x182>
 801b658:	4615      	mov	r5, r2
 801b65a:	e7bb      	b.n	801b5d4 <_printf_i+0x130>
 801b65c:	682b      	ldr	r3, [r5, #0]
 801b65e:	6826      	ldr	r6, [r4, #0]
 801b660:	6961      	ldr	r1, [r4, #20]
 801b662:	1d18      	adds	r0, r3, #4
 801b664:	6028      	str	r0, [r5, #0]
 801b666:	0635      	lsls	r5, r6, #24
 801b668:	681b      	ldr	r3, [r3, #0]
 801b66a:	d501      	bpl.n	801b670 <_printf_i+0x1cc>
 801b66c:	6019      	str	r1, [r3, #0]
 801b66e:	e002      	b.n	801b676 <_printf_i+0x1d2>
 801b670:	0670      	lsls	r0, r6, #25
 801b672:	d5fb      	bpl.n	801b66c <_printf_i+0x1c8>
 801b674:	8019      	strh	r1, [r3, #0]
 801b676:	2300      	movs	r3, #0
 801b678:	6123      	str	r3, [r4, #16]
 801b67a:	4615      	mov	r5, r2
 801b67c:	e7ba      	b.n	801b5f4 <_printf_i+0x150>
 801b67e:	682b      	ldr	r3, [r5, #0]
 801b680:	1d1a      	adds	r2, r3, #4
 801b682:	602a      	str	r2, [r5, #0]
 801b684:	681d      	ldr	r5, [r3, #0]
 801b686:	6862      	ldr	r2, [r4, #4]
 801b688:	2100      	movs	r1, #0
 801b68a:	4628      	mov	r0, r5
 801b68c:	f7e4 fdb8 	bl	8000200 <memchr>
 801b690:	b108      	cbz	r0, 801b696 <_printf_i+0x1f2>
 801b692:	1b40      	subs	r0, r0, r5
 801b694:	6060      	str	r0, [r4, #4]
 801b696:	6863      	ldr	r3, [r4, #4]
 801b698:	6123      	str	r3, [r4, #16]
 801b69a:	2300      	movs	r3, #0
 801b69c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b6a0:	e7a8      	b.n	801b5f4 <_printf_i+0x150>
 801b6a2:	6923      	ldr	r3, [r4, #16]
 801b6a4:	462a      	mov	r2, r5
 801b6a6:	4649      	mov	r1, r9
 801b6a8:	4640      	mov	r0, r8
 801b6aa:	47d0      	blx	sl
 801b6ac:	3001      	adds	r0, #1
 801b6ae:	d0ab      	beq.n	801b608 <_printf_i+0x164>
 801b6b0:	6823      	ldr	r3, [r4, #0]
 801b6b2:	079b      	lsls	r3, r3, #30
 801b6b4:	d413      	bmi.n	801b6de <_printf_i+0x23a>
 801b6b6:	68e0      	ldr	r0, [r4, #12]
 801b6b8:	9b03      	ldr	r3, [sp, #12]
 801b6ba:	4298      	cmp	r0, r3
 801b6bc:	bfb8      	it	lt
 801b6be:	4618      	movlt	r0, r3
 801b6c0:	e7a4      	b.n	801b60c <_printf_i+0x168>
 801b6c2:	2301      	movs	r3, #1
 801b6c4:	4632      	mov	r2, r6
 801b6c6:	4649      	mov	r1, r9
 801b6c8:	4640      	mov	r0, r8
 801b6ca:	47d0      	blx	sl
 801b6cc:	3001      	adds	r0, #1
 801b6ce:	d09b      	beq.n	801b608 <_printf_i+0x164>
 801b6d0:	3501      	adds	r5, #1
 801b6d2:	68e3      	ldr	r3, [r4, #12]
 801b6d4:	9903      	ldr	r1, [sp, #12]
 801b6d6:	1a5b      	subs	r3, r3, r1
 801b6d8:	42ab      	cmp	r3, r5
 801b6da:	dcf2      	bgt.n	801b6c2 <_printf_i+0x21e>
 801b6dc:	e7eb      	b.n	801b6b6 <_printf_i+0x212>
 801b6de:	2500      	movs	r5, #0
 801b6e0:	f104 0619 	add.w	r6, r4, #25
 801b6e4:	e7f5      	b.n	801b6d2 <_printf_i+0x22e>
 801b6e6:	bf00      	nop
 801b6e8:	0801d9a1 	.word	0x0801d9a1
 801b6ec:	0801d9b2 	.word	0x0801d9b2

0801b6f0 <__sread>:
 801b6f0:	b510      	push	{r4, lr}
 801b6f2:	460c      	mov	r4, r1
 801b6f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6f8:	f000 f8de 	bl	801b8b8 <_read_r>
 801b6fc:	2800      	cmp	r0, #0
 801b6fe:	bfab      	itete	ge
 801b700:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b702:	89a3      	ldrhlt	r3, [r4, #12]
 801b704:	181b      	addge	r3, r3, r0
 801b706:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b70a:	bfac      	ite	ge
 801b70c:	6563      	strge	r3, [r4, #84]	; 0x54
 801b70e:	81a3      	strhlt	r3, [r4, #12]
 801b710:	bd10      	pop	{r4, pc}

0801b712 <__swrite>:
 801b712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b716:	461f      	mov	r7, r3
 801b718:	898b      	ldrh	r3, [r1, #12]
 801b71a:	05db      	lsls	r3, r3, #23
 801b71c:	4605      	mov	r5, r0
 801b71e:	460c      	mov	r4, r1
 801b720:	4616      	mov	r6, r2
 801b722:	d505      	bpl.n	801b730 <__swrite+0x1e>
 801b724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b728:	2302      	movs	r3, #2
 801b72a:	2200      	movs	r2, #0
 801b72c:	f000 f868 	bl	801b800 <_lseek_r>
 801b730:	89a3      	ldrh	r3, [r4, #12]
 801b732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b736:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b73a:	81a3      	strh	r3, [r4, #12]
 801b73c:	4632      	mov	r2, r6
 801b73e:	463b      	mov	r3, r7
 801b740:	4628      	mov	r0, r5
 801b742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b746:	f000 b817 	b.w	801b778 <_write_r>

0801b74a <__sseek>:
 801b74a:	b510      	push	{r4, lr}
 801b74c:	460c      	mov	r4, r1
 801b74e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b752:	f000 f855 	bl	801b800 <_lseek_r>
 801b756:	1c43      	adds	r3, r0, #1
 801b758:	89a3      	ldrh	r3, [r4, #12]
 801b75a:	bf15      	itete	ne
 801b75c:	6560      	strne	r0, [r4, #84]	; 0x54
 801b75e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b762:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b766:	81a3      	strheq	r3, [r4, #12]
 801b768:	bf18      	it	ne
 801b76a:	81a3      	strhne	r3, [r4, #12]
 801b76c:	bd10      	pop	{r4, pc}

0801b76e <__sclose>:
 801b76e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b772:	f000 b813 	b.w	801b79c <_close_r>
	...

0801b778 <_write_r>:
 801b778:	b538      	push	{r3, r4, r5, lr}
 801b77a:	4d07      	ldr	r5, [pc, #28]	; (801b798 <_write_r+0x20>)
 801b77c:	4604      	mov	r4, r0
 801b77e:	4608      	mov	r0, r1
 801b780:	4611      	mov	r1, r2
 801b782:	2200      	movs	r2, #0
 801b784:	602a      	str	r2, [r5, #0]
 801b786:	461a      	mov	r2, r3
 801b788:	f7e7 ff59 	bl	800363e <_write>
 801b78c:	1c43      	adds	r3, r0, #1
 801b78e:	d102      	bne.n	801b796 <_write_r+0x1e>
 801b790:	682b      	ldr	r3, [r5, #0]
 801b792:	b103      	cbz	r3, 801b796 <_write_r+0x1e>
 801b794:	6023      	str	r3, [r4, #0]
 801b796:	bd38      	pop	{r3, r4, r5, pc}
 801b798:	2000382c 	.word	0x2000382c

0801b79c <_close_r>:
 801b79c:	b538      	push	{r3, r4, r5, lr}
 801b79e:	4d06      	ldr	r5, [pc, #24]	; (801b7b8 <_close_r+0x1c>)
 801b7a0:	2300      	movs	r3, #0
 801b7a2:	4604      	mov	r4, r0
 801b7a4:	4608      	mov	r0, r1
 801b7a6:	602b      	str	r3, [r5, #0]
 801b7a8:	f7e7 ff65 	bl	8003676 <_close>
 801b7ac:	1c43      	adds	r3, r0, #1
 801b7ae:	d102      	bne.n	801b7b6 <_close_r+0x1a>
 801b7b0:	682b      	ldr	r3, [r5, #0]
 801b7b2:	b103      	cbz	r3, 801b7b6 <_close_r+0x1a>
 801b7b4:	6023      	str	r3, [r4, #0]
 801b7b6:	bd38      	pop	{r3, r4, r5, pc}
 801b7b8:	2000382c 	.word	0x2000382c

0801b7bc <_fstat_r>:
 801b7bc:	b538      	push	{r3, r4, r5, lr}
 801b7be:	4d07      	ldr	r5, [pc, #28]	; (801b7dc <_fstat_r+0x20>)
 801b7c0:	2300      	movs	r3, #0
 801b7c2:	4604      	mov	r4, r0
 801b7c4:	4608      	mov	r0, r1
 801b7c6:	4611      	mov	r1, r2
 801b7c8:	602b      	str	r3, [r5, #0]
 801b7ca:	f7e7 ff60 	bl	800368e <_fstat>
 801b7ce:	1c43      	adds	r3, r0, #1
 801b7d0:	d102      	bne.n	801b7d8 <_fstat_r+0x1c>
 801b7d2:	682b      	ldr	r3, [r5, #0]
 801b7d4:	b103      	cbz	r3, 801b7d8 <_fstat_r+0x1c>
 801b7d6:	6023      	str	r3, [r4, #0]
 801b7d8:	bd38      	pop	{r3, r4, r5, pc}
 801b7da:	bf00      	nop
 801b7dc:	2000382c 	.word	0x2000382c

0801b7e0 <_isatty_r>:
 801b7e0:	b538      	push	{r3, r4, r5, lr}
 801b7e2:	4d06      	ldr	r5, [pc, #24]	; (801b7fc <_isatty_r+0x1c>)
 801b7e4:	2300      	movs	r3, #0
 801b7e6:	4604      	mov	r4, r0
 801b7e8:	4608      	mov	r0, r1
 801b7ea:	602b      	str	r3, [r5, #0]
 801b7ec:	f7e7 ff5f 	bl	80036ae <_isatty>
 801b7f0:	1c43      	adds	r3, r0, #1
 801b7f2:	d102      	bne.n	801b7fa <_isatty_r+0x1a>
 801b7f4:	682b      	ldr	r3, [r5, #0]
 801b7f6:	b103      	cbz	r3, 801b7fa <_isatty_r+0x1a>
 801b7f8:	6023      	str	r3, [r4, #0]
 801b7fa:	bd38      	pop	{r3, r4, r5, pc}
 801b7fc:	2000382c 	.word	0x2000382c

0801b800 <_lseek_r>:
 801b800:	b538      	push	{r3, r4, r5, lr}
 801b802:	4d07      	ldr	r5, [pc, #28]	; (801b820 <_lseek_r+0x20>)
 801b804:	4604      	mov	r4, r0
 801b806:	4608      	mov	r0, r1
 801b808:	4611      	mov	r1, r2
 801b80a:	2200      	movs	r2, #0
 801b80c:	602a      	str	r2, [r5, #0]
 801b80e:	461a      	mov	r2, r3
 801b810:	f7e7 ff58 	bl	80036c4 <_lseek>
 801b814:	1c43      	adds	r3, r0, #1
 801b816:	d102      	bne.n	801b81e <_lseek_r+0x1e>
 801b818:	682b      	ldr	r3, [r5, #0]
 801b81a:	b103      	cbz	r3, 801b81e <_lseek_r+0x1e>
 801b81c:	6023      	str	r3, [r4, #0]
 801b81e:	bd38      	pop	{r3, r4, r5, pc}
 801b820:	2000382c 	.word	0x2000382c

0801b824 <memmove>:
 801b824:	4288      	cmp	r0, r1
 801b826:	b510      	push	{r4, lr}
 801b828:	eb01 0402 	add.w	r4, r1, r2
 801b82c:	d902      	bls.n	801b834 <memmove+0x10>
 801b82e:	4284      	cmp	r4, r0
 801b830:	4623      	mov	r3, r4
 801b832:	d807      	bhi.n	801b844 <memmove+0x20>
 801b834:	1e43      	subs	r3, r0, #1
 801b836:	42a1      	cmp	r1, r4
 801b838:	d008      	beq.n	801b84c <memmove+0x28>
 801b83a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b83e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b842:	e7f8      	b.n	801b836 <memmove+0x12>
 801b844:	4402      	add	r2, r0
 801b846:	4601      	mov	r1, r0
 801b848:	428a      	cmp	r2, r1
 801b84a:	d100      	bne.n	801b84e <memmove+0x2a>
 801b84c:	bd10      	pop	{r4, pc}
 801b84e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b852:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b856:	e7f7      	b.n	801b848 <memmove+0x24>

0801b858 <_realloc_r>:
 801b858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b85c:	4680      	mov	r8, r0
 801b85e:	4614      	mov	r4, r2
 801b860:	460e      	mov	r6, r1
 801b862:	b921      	cbnz	r1, 801b86e <_realloc_r+0x16>
 801b864:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b868:	4611      	mov	r1, r2
 801b86a:	f7fe bed1 	b.w	801a610 <_malloc_r>
 801b86e:	b92a      	cbnz	r2, 801b87c <_realloc_r+0x24>
 801b870:	f7fe fe62 	bl	801a538 <_free_r>
 801b874:	4625      	mov	r5, r4
 801b876:	4628      	mov	r0, r5
 801b878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b87c:	f000 f82e 	bl	801b8dc <_malloc_usable_size_r>
 801b880:	4284      	cmp	r4, r0
 801b882:	4607      	mov	r7, r0
 801b884:	d802      	bhi.n	801b88c <_realloc_r+0x34>
 801b886:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b88a:	d812      	bhi.n	801b8b2 <_realloc_r+0x5a>
 801b88c:	4621      	mov	r1, r4
 801b88e:	4640      	mov	r0, r8
 801b890:	f7fe febe 	bl	801a610 <_malloc_r>
 801b894:	4605      	mov	r5, r0
 801b896:	2800      	cmp	r0, #0
 801b898:	d0ed      	beq.n	801b876 <_realloc_r+0x1e>
 801b89a:	42bc      	cmp	r4, r7
 801b89c:	4622      	mov	r2, r4
 801b89e:	4631      	mov	r1, r6
 801b8a0:	bf28      	it	cs
 801b8a2:	463a      	movcs	r2, r7
 801b8a4:	f7fe fe32 	bl	801a50c <memcpy>
 801b8a8:	4631      	mov	r1, r6
 801b8aa:	4640      	mov	r0, r8
 801b8ac:	f7fe fe44 	bl	801a538 <_free_r>
 801b8b0:	e7e1      	b.n	801b876 <_realloc_r+0x1e>
 801b8b2:	4635      	mov	r5, r6
 801b8b4:	e7df      	b.n	801b876 <_realloc_r+0x1e>
	...

0801b8b8 <_read_r>:
 801b8b8:	b538      	push	{r3, r4, r5, lr}
 801b8ba:	4d07      	ldr	r5, [pc, #28]	; (801b8d8 <_read_r+0x20>)
 801b8bc:	4604      	mov	r4, r0
 801b8be:	4608      	mov	r0, r1
 801b8c0:	4611      	mov	r1, r2
 801b8c2:	2200      	movs	r2, #0
 801b8c4:	602a      	str	r2, [r5, #0]
 801b8c6:	461a      	mov	r2, r3
 801b8c8:	f7e7 fe9c 	bl	8003604 <_read>
 801b8cc:	1c43      	adds	r3, r0, #1
 801b8ce:	d102      	bne.n	801b8d6 <_read_r+0x1e>
 801b8d0:	682b      	ldr	r3, [r5, #0]
 801b8d2:	b103      	cbz	r3, 801b8d6 <_read_r+0x1e>
 801b8d4:	6023      	str	r3, [r4, #0]
 801b8d6:	bd38      	pop	{r3, r4, r5, pc}
 801b8d8:	2000382c 	.word	0x2000382c

0801b8dc <_malloc_usable_size_r>:
 801b8dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b8e0:	1f18      	subs	r0, r3, #4
 801b8e2:	2b00      	cmp	r3, #0
 801b8e4:	bfbc      	itt	lt
 801b8e6:	580b      	ldrlt	r3, [r1, r0]
 801b8e8:	18c0      	addlt	r0, r0, r3
 801b8ea:	4770      	bx	lr

0801b8ec <_init>:
 801b8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8ee:	bf00      	nop
 801b8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b8f2:	bc08      	pop	{r3}
 801b8f4:	469e      	mov	lr, r3
 801b8f6:	4770      	bx	lr

0801b8f8 <_fini>:
 801b8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8fa:	bf00      	nop
 801b8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b8fe:	bc08      	pop	{r3}
 801b900:	469e      	mov	lr, r3
 801b902:	4770      	bx	lr
