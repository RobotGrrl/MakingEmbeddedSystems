
AccioRange_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a880  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002168  0801aa30  0801aa30  0002aa30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cb98  0801cb98  00030740  2**0
                  CONTENTS
  4 .ARM          00000008  0801cb98  0801cb98  0002cb98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cba0  0801cba0  00030740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cba0  0801cba0  0002cba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cba4  0801cba4  0002cba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000740  20000000  0801cba8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028a0  20000740  0801d2e8  00030740  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002fe0  0801d2e8  00032fe0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030740  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046bc0  00000000  00000000  00030770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008b79  00000000  00000000  00077330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000038f8  00000000  00000000  0007feb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003548  00000000  00000000  000837a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003af23  00000000  00000000  00086cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046cc3  00000000  00000000  000c1c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013fd6c  00000000  00000000  001088d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00248642  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000fc8c  00000000  00000000  00248694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000740 	.word	0x20000740
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801aa18 	.word	0x0801aa18

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000744 	.word	0x20000744
 80001ec:	0801aa18 	.word	0x0801aa18

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2f>:
 800086c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000870:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000874:	bf24      	itt	cs
 8000876:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800087a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800087e:	d90d      	bls.n	800089c <__aeabi_d2f+0x30>
 8000880:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000884:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000888:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800088c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000890:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000894:	bf08      	it	eq
 8000896:	f020 0001 	biceq.w	r0, r0, #1
 800089a:	4770      	bx	lr
 800089c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008a0:	d121      	bne.n	80008e6 <__aeabi_d2f+0x7a>
 80008a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008a6:	bfbc      	itt	lt
 80008a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008ac:	4770      	bxlt	lr
 80008ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008b6:	f1c2 0218 	rsb	r2, r2, #24
 80008ba:	f1c2 0c20 	rsb	ip, r2, #32
 80008be:	fa10 f30c 	lsls.w	r3, r0, ip
 80008c2:	fa20 f002 	lsr.w	r0, r0, r2
 80008c6:	bf18      	it	ne
 80008c8:	f040 0001 	orrne.w	r0, r0, #1
 80008cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008d8:	ea40 000c 	orr.w	r0, r0, ip
 80008dc:	fa23 f302 	lsr.w	r3, r3, r2
 80008e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008e4:	e7cc      	b.n	8000880 <__aeabi_d2f+0x14>
 80008e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ea:	d107      	bne.n	80008fc <__aeabi_d2f+0x90>
 80008ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008f0:	bf1e      	ittt	ne
 80008f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008fa:	4770      	bxne	lr
 80008fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000900:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <__aeabi_uldivmod>:
 800090c:	b953      	cbnz	r3, 8000924 <__aeabi_uldivmod+0x18>
 800090e:	b94a      	cbnz	r2, 8000924 <__aeabi_uldivmod+0x18>
 8000910:	2900      	cmp	r1, #0
 8000912:	bf08      	it	eq
 8000914:	2800      	cmpeq	r0, #0
 8000916:	bf1c      	itt	ne
 8000918:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800091c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000920:	f000 b974 	b.w	8000c0c <__aeabi_idiv0>
 8000924:	f1ad 0c08 	sub.w	ip, sp, #8
 8000928:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800092c:	f000 f806 	bl	800093c <__udivmoddi4>
 8000930:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000938:	b004      	add	sp, #16
 800093a:	4770      	bx	lr

0800093c <__udivmoddi4>:
 800093c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000940:	9d08      	ldr	r5, [sp, #32]
 8000942:	4604      	mov	r4, r0
 8000944:	468e      	mov	lr, r1
 8000946:	2b00      	cmp	r3, #0
 8000948:	d14d      	bne.n	80009e6 <__udivmoddi4+0xaa>
 800094a:	428a      	cmp	r2, r1
 800094c:	4694      	mov	ip, r2
 800094e:	d969      	bls.n	8000a24 <__udivmoddi4+0xe8>
 8000950:	fab2 f282 	clz	r2, r2
 8000954:	b152      	cbz	r2, 800096c <__udivmoddi4+0x30>
 8000956:	fa01 f302 	lsl.w	r3, r1, r2
 800095a:	f1c2 0120 	rsb	r1, r2, #32
 800095e:	fa20 f101 	lsr.w	r1, r0, r1
 8000962:	fa0c fc02 	lsl.w	ip, ip, r2
 8000966:	ea41 0e03 	orr.w	lr, r1, r3
 800096a:	4094      	lsls	r4, r2
 800096c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000970:	0c21      	lsrs	r1, r4, #16
 8000972:	fbbe f6f8 	udiv	r6, lr, r8
 8000976:	fa1f f78c 	uxth.w	r7, ip
 800097a:	fb08 e316 	mls	r3, r8, r6, lr
 800097e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000982:	fb06 f107 	mul.w	r1, r6, r7
 8000986:	4299      	cmp	r1, r3
 8000988:	d90a      	bls.n	80009a0 <__udivmoddi4+0x64>
 800098a:	eb1c 0303 	adds.w	r3, ip, r3
 800098e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000992:	f080 811f 	bcs.w	8000bd4 <__udivmoddi4+0x298>
 8000996:	4299      	cmp	r1, r3
 8000998:	f240 811c 	bls.w	8000bd4 <__udivmoddi4+0x298>
 800099c:	3e02      	subs	r6, #2
 800099e:	4463      	add	r3, ip
 80009a0:	1a5b      	subs	r3, r3, r1
 80009a2:	b2a4      	uxth	r4, r4
 80009a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009a8:	fb08 3310 	mls	r3, r8, r0, r3
 80009ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009b0:	fb00 f707 	mul.w	r7, r0, r7
 80009b4:	42a7      	cmp	r7, r4
 80009b6:	d90a      	bls.n	80009ce <__udivmoddi4+0x92>
 80009b8:	eb1c 0404 	adds.w	r4, ip, r4
 80009bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009c0:	f080 810a 	bcs.w	8000bd8 <__udivmoddi4+0x29c>
 80009c4:	42a7      	cmp	r7, r4
 80009c6:	f240 8107 	bls.w	8000bd8 <__udivmoddi4+0x29c>
 80009ca:	4464      	add	r4, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009d2:	1be4      	subs	r4, r4, r7
 80009d4:	2600      	movs	r6, #0
 80009d6:	b11d      	cbz	r5, 80009e0 <__udivmoddi4+0xa4>
 80009d8:	40d4      	lsrs	r4, r2
 80009da:	2300      	movs	r3, #0
 80009dc:	e9c5 4300 	strd	r4, r3, [r5]
 80009e0:	4631      	mov	r1, r6
 80009e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e6:	428b      	cmp	r3, r1
 80009e8:	d909      	bls.n	80009fe <__udivmoddi4+0xc2>
 80009ea:	2d00      	cmp	r5, #0
 80009ec:	f000 80ef 	beq.w	8000bce <__udivmoddi4+0x292>
 80009f0:	2600      	movs	r6, #0
 80009f2:	e9c5 0100 	strd	r0, r1, [r5]
 80009f6:	4630      	mov	r0, r6
 80009f8:	4631      	mov	r1, r6
 80009fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009fe:	fab3 f683 	clz	r6, r3
 8000a02:	2e00      	cmp	r6, #0
 8000a04:	d14a      	bne.n	8000a9c <__udivmoddi4+0x160>
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d302      	bcc.n	8000a10 <__udivmoddi4+0xd4>
 8000a0a:	4282      	cmp	r2, r0
 8000a0c:	f200 80f9 	bhi.w	8000c02 <__udivmoddi4+0x2c6>
 8000a10:	1a84      	subs	r4, r0, r2
 8000a12:	eb61 0303 	sbc.w	r3, r1, r3
 8000a16:	2001      	movs	r0, #1
 8000a18:	469e      	mov	lr, r3
 8000a1a:	2d00      	cmp	r5, #0
 8000a1c:	d0e0      	beq.n	80009e0 <__udivmoddi4+0xa4>
 8000a1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a22:	e7dd      	b.n	80009e0 <__udivmoddi4+0xa4>
 8000a24:	b902      	cbnz	r2, 8000a28 <__udivmoddi4+0xec>
 8000a26:	deff      	udf	#255	; 0xff
 8000a28:	fab2 f282 	clz	r2, r2
 8000a2c:	2a00      	cmp	r2, #0
 8000a2e:	f040 8092 	bne.w	8000b56 <__udivmoddi4+0x21a>
 8000a32:	eba1 010c 	sub.w	r1, r1, ip
 8000a36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a3a:	fa1f fe8c 	uxth.w	lr, ip
 8000a3e:	2601      	movs	r6, #1
 8000a40:	0c20      	lsrs	r0, r4, #16
 8000a42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a46:	fb07 1113 	mls	r1, r7, r3, r1
 8000a4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a4e:	fb0e f003 	mul.w	r0, lr, r3
 8000a52:	4288      	cmp	r0, r1
 8000a54:	d908      	bls.n	8000a68 <__udivmoddi4+0x12c>
 8000a56:	eb1c 0101 	adds.w	r1, ip, r1
 8000a5a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a5e:	d202      	bcs.n	8000a66 <__udivmoddi4+0x12a>
 8000a60:	4288      	cmp	r0, r1
 8000a62:	f200 80cb 	bhi.w	8000bfc <__udivmoddi4+0x2c0>
 8000a66:	4643      	mov	r3, r8
 8000a68:	1a09      	subs	r1, r1, r0
 8000a6a:	b2a4      	uxth	r4, r4
 8000a6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a70:	fb07 1110 	mls	r1, r7, r0, r1
 8000a74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a78:	fb0e fe00 	mul.w	lr, lr, r0
 8000a7c:	45a6      	cmp	lr, r4
 8000a7e:	d908      	bls.n	8000a92 <__udivmoddi4+0x156>
 8000a80:	eb1c 0404 	adds.w	r4, ip, r4
 8000a84:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000a88:	d202      	bcs.n	8000a90 <__udivmoddi4+0x154>
 8000a8a:	45a6      	cmp	lr, r4
 8000a8c:	f200 80bb 	bhi.w	8000c06 <__udivmoddi4+0x2ca>
 8000a90:	4608      	mov	r0, r1
 8000a92:	eba4 040e 	sub.w	r4, r4, lr
 8000a96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a9a:	e79c      	b.n	80009d6 <__udivmoddi4+0x9a>
 8000a9c:	f1c6 0720 	rsb	r7, r6, #32
 8000aa0:	40b3      	lsls	r3, r6
 8000aa2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aa6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aaa:	fa20 f407 	lsr.w	r4, r0, r7
 8000aae:	fa01 f306 	lsl.w	r3, r1, r6
 8000ab2:	431c      	orrs	r4, r3
 8000ab4:	40f9      	lsrs	r1, r7
 8000ab6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000aba:	fa00 f306 	lsl.w	r3, r0, r6
 8000abe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ac2:	0c20      	lsrs	r0, r4, #16
 8000ac4:	fa1f fe8c 	uxth.w	lr, ip
 8000ac8:	fb09 1118 	mls	r1, r9, r8, r1
 8000acc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ad0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ad4:	4288      	cmp	r0, r1
 8000ad6:	fa02 f206 	lsl.w	r2, r2, r6
 8000ada:	d90b      	bls.n	8000af4 <__udivmoddi4+0x1b8>
 8000adc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ae0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ae4:	f080 8088 	bcs.w	8000bf8 <__udivmoddi4+0x2bc>
 8000ae8:	4288      	cmp	r0, r1
 8000aea:	f240 8085 	bls.w	8000bf8 <__udivmoddi4+0x2bc>
 8000aee:	f1a8 0802 	sub.w	r8, r8, #2
 8000af2:	4461      	add	r1, ip
 8000af4:	1a09      	subs	r1, r1, r0
 8000af6:	b2a4      	uxth	r4, r4
 8000af8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000afc:	fb09 1110 	mls	r1, r9, r0, r1
 8000b00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b08:	458e      	cmp	lr, r1
 8000b0a:	d908      	bls.n	8000b1e <__udivmoddi4+0x1e2>
 8000b0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b10:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b14:	d26c      	bcs.n	8000bf0 <__udivmoddi4+0x2b4>
 8000b16:	458e      	cmp	lr, r1
 8000b18:	d96a      	bls.n	8000bf0 <__udivmoddi4+0x2b4>
 8000b1a:	3802      	subs	r0, #2
 8000b1c:	4461      	add	r1, ip
 8000b1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b22:	fba0 9402 	umull	r9, r4, r0, r2
 8000b26:	eba1 010e 	sub.w	r1, r1, lr
 8000b2a:	42a1      	cmp	r1, r4
 8000b2c:	46c8      	mov	r8, r9
 8000b2e:	46a6      	mov	lr, r4
 8000b30:	d356      	bcc.n	8000be0 <__udivmoddi4+0x2a4>
 8000b32:	d053      	beq.n	8000bdc <__udivmoddi4+0x2a0>
 8000b34:	b15d      	cbz	r5, 8000b4e <__udivmoddi4+0x212>
 8000b36:	ebb3 0208 	subs.w	r2, r3, r8
 8000b3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b42:	fa22 f306 	lsr.w	r3, r2, r6
 8000b46:	40f1      	lsrs	r1, r6
 8000b48:	431f      	orrs	r7, r3
 8000b4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b4e:	2600      	movs	r6, #0
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	f1c2 0320 	rsb	r3, r2, #32
 8000b5a:	40d8      	lsrs	r0, r3
 8000b5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b60:	fa21 f303 	lsr.w	r3, r1, r3
 8000b64:	4091      	lsls	r1, r2
 8000b66:	4301      	orrs	r1, r0
 8000b68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b6c:	fa1f fe8c 	uxth.w	lr, ip
 8000b70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b74:	fb07 3610 	mls	r6, r7, r0, r3
 8000b78:	0c0b      	lsrs	r3, r1, #16
 8000b7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b82:	429e      	cmp	r6, r3
 8000b84:	fa04 f402 	lsl.w	r4, r4, r2
 8000b88:	d908      	bls.n	8000b9c <__udivmoddi4+0x260>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000b92:	d22f      	bcs.n	8000bf4 <__udivmoddi4+0x2b8>
 8000b94:	429e      	cmp	r6, r3
 8000b96:	d92d      	bls.n	8000bf4 <__udivmoddi4+0x2b8>
 8000b98:	3802      	subs	r0, #2
 8000b9a:	4463      	add	r3, ip
 8000b9c:	1b9b      	subs	r3, r3, r6
 8000b9e:	b289      	uxth	r1, r1
 8000ba0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ba4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ba8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bac:	fb06 f30e 	mul.w	r3, r6, lr
 8000bb0:	428b      	cmp	r3, r1
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x28a>
 8000bb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000bbc:	d216      	bcs.n	8000bec <__udivmoddi4+0x2b0>
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d914      	bls.n	8000bec <__udivmoddi4+0x2b0>
 8000bc2:	3e02      	subs	r6, #2
 8000bc4:	4461      	add	r1, ip
 8000bc6:	1ac9      	subs	r1, r1, r3
 8000bc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bcc:	e738      	b.n	8000a40 <__udivmoddi4+0x104>
 8000bce:	462e      	mov	r6, r5
 8000bd0:	4628      	mov	r0, r5
 8000bd2:	e705      	b.n	80009e0 <__udivmoddi4+0xa4>
 8000bd4:	4606      	mov	r6, r0
 8000bd6:	e6e3      	b.n	80009a0 <__udivmoddi4+0x64>
 8000bd8:	4618      	mov	r0, r3
 8000bda:	e6f8      	b.n	80009ce <__udivmoddi4+0x92>
 8000bdc:	454b      	cmp	r3, r9
 8000bde:	d2a9      	bcs.n	8000b34 <__udivmoddi4+0x1f8>
 8000be0:	ebb9 0802 	subs.w	r8, r9, r2
 8000be4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000be8:	3801      	subs	r0, #1
 8000bea:	e7a3      	b.n	8000b34 <__udivmoddi4+0x1f8>
 8000bec:	4646      	mov	r6, r8
 8000bee:	e7ea      	b.n	8000bc6 <__udivmoddi4+0x28a>
 8000bf0:	4620      	mov	r0, r4
 8000bf2:	e794      	b.n	8000b1e <__udivmoddi4+0x1e2>
 8000bf4:	4640      	mov	r0, r8
 8000bf6:	e7d1      	b.n	8000b9c <__udivmoddi4+0x260>
 8000bf8:	46d0      	mov	r8, sl
 8000bfa:	e77b      	b.n	8000af4 <__udivmoddi4+0x1b8>
 8000bfc:	3b02      	subs	r3, #2
 8000bfe:	4461      	add	r1, ip
 8000c00:	e732      	b.n	8000a68 <__udivmoddi4+0x12c>
 8000c02:	4630      	mov	r0, r6
 8000c04:	e709      	b.n	8000a1a <__udivmoddi4+0xde>
 8000c06:	4464      	add	r4, ip
 8000c08:	3802      	subs	r0, #2
 8000c0a:	e742      	b.n	8000a92 <__udivmoddi4+0x156>

08000c0c <__aeabi_idiv0>:
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
 8000c30:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c32:	4b2f      	ldr	r3, [pc, #188]	; (8000cf0 <MX_ADC1_Init+0xe0>)
 8000c34:	4a2f      	ldr	r2, [pc, #188]	; (8000cf4 <MX_ADC1_Init+0xe4>)
 8000c36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c38:	4b2d      	ldr	r3, [pc, #180]	; (8000cf0 <MX_ADC1_Init+0xe0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000c3e:	4b2c      	ldr	r3, [pc, #176]	; (8000cf0 <MX_ADC1_Init+0xe0>)
 8000c40:	2208      	movs	r2, #8
 8000c42:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c44:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <MX_ADC1_Init+0xe0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c4a:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <MX_ADC1_Init+0xe0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c50:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <MX_ADC1_Init+0xe0>)
 8000c52:	2204      	movs	r2, #4
 8000c54:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c56:	4b26      	ldr	r3, [pc, #152]	; (8000cf0 <MX_ADC1_Init+0xe0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c5c:	4b24      	ldr	r3, [pc, #144]	; (8000cf0 <MX_ADC1_Init+0xe0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c62:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <MX_ADC1_Init+0xe0>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c68:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <MX_ADC1_Init+0xe0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <MX_ADC1_Init+0xe0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c76:	4b1e      	ldr	r3, [pc, #120]	; (8000cf0 <MX_ADC1_Init+0xe0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c7c:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <MX_ADC1_Init+0xe0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c84:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <MX_ADC1_Init+0xe0>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c8a:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <MX_ADC1_Init+0xe0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c92:	4817      	ldr	r0, [pc, #92]	; (8000cf0 <MX_ADC1_Init+0xe0>)
 8000c94:	f00a fe72 	bl	800b97c <HAL_ADC_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000c9e:	f001 fb9d 	bl	80023dc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	4619      	mov	r1, r3
 8000cac:	4810      	ldr	r0, [pc, #64]	; (8000cf0 <MX_ADC1_Init+0xe0>)
 8000cae:	f00b fe17 	bl	800c8e0 <HAL_ADCEx_MultiModeConfigChannel>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000cb8:	f001 fb90 	bl	80023dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_ADC1_Init+0xe8>)
 8000cbe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cc0:	2306      	movs	r3, #6
 8000cc2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cc8:	237f      	movs	r3, #127	; 0x7f
 8000cca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ccc:	2304      	movs	r3, #4
 8000cce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_ADC1_Init+0xe0>)
 8000cda:	f00b f949 	bl	800bf70 <HAL_ADC_ConfigChannel>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000ce4:	f001 fb7a 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ce8:	bf00      	nop
 8000cea:	3728      	adds	r7, #40	; 0x28
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	2000075c 	.word	0x2000075c
 8000cf4:	50040000 	.word	0x50040000
 8000cf8:	36902000 	.word	0x36902000

08000cfc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d02:	463b      	mov	r3, r7
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
 8000d10:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d12:	4b29      	ldr	r3, [pc, #164]	; (8000db8 <MX_ADC2_Init+0xbc>)
 8000d14:	4a29      	ldr	r2, [pc, #164]	; (8000dbc <MX_ADC2_Init+0xc0>)
 8000d16:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d18:	4b27      	ldr	r3, [pc, #156]	; (8000db8 <MX_ADC2_Init+0xbc>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d1e:	4b26      	ldr	r3, [pc, #152]	; (8000db8 <MX_ADC2_Init+0xbc>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <MX_ADC2_Init+0xbc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d2a:	4b23      	ldr	r3, [pc, #140]	; (8000db8 <MX_ADC2_Init+0xbc>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d30:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <MX_ADC2_Init+0xbc>)
 8000d32:	2204      	movs	r2, #4
 8000d34:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d36:	4b20      	ldr	r3, [pc, #128]	; (8000db8 <MX_ADC2_Init+0xbc>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <MX_ADC2_Init+0xbc>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000d42:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <MX_ADC2_Init+0xbc>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d48:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <MX_ADC2_Init+0xbc>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d50:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <MX_ADC2_Init+0xbc>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <MX_ADC2_Init+0xbc>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <MX_ADC2_Init+0xbc>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <MX_ADC2_Init+0xbc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <MX_ADC2_Init+0xbc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d72:	4811      	ldr	r0, [pc, #68]	; (8000db8 <MX_ADC2_Init+0xbc>)
 8000d74:	f00a fe02 	bl	800b97c <HAL_ADC_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000d7e:	f001 fb2d 	bl	80023dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_ADC2_Init+0xc4>)
 8000d84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d86:	2306      	movs	r3, #6
 8000d88:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d8e:	237f      	movs	r3, #127	; 0x7f
 8000d90:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d92:	2304      	movs	r3, #4
 8000d94:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4806      	ldr	r0, [pc, #24]	; (8000db8 <MX_ADC2_Init+0xbc>)
 8000da0:	f00b f8e6 	bl	800bf70 <HAL_ADC_ConfigChannel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000daa:	f001 fb17 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200007c4 	.word	0x200007c4
 8000dbc:	50040100 	.word	0x50040100
 8000dc0:	25b00200 	.word	0x25b00200

08000dc4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dca:	463b      	mov	r3, r7
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
 8000dd8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000dda:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <MX_ADC3_Init+0xbc>)
 8000ddc:	4a29      	ldr	r2, [pc, #164]	; (8000e84 <MX_ADC3_Init+0xc0>)
 8000dde:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000de0:	4b27      	ldr	r3, [pc, #156]	; (8000e80 <MX_ADC3_Init+0xbc>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <MX_ADC3_Init+0xbc>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dec:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <MX_ADC3_Init+0xbc>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000df2:	4b23      	ldr	r3, [pc, #140]	; (8000e80 <MX_ADC3_Init+0xbc>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000df8:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <MX_ADC3_Init+0xbc>)
 8000dfa:	2204      	movs	r2, #4
 8000dfc:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000dfe:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <MX_ADC3_Init+0xbc>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e04:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <MX_ADC3_Init+0xbc>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <MX_ADC3_Init+0xbc>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e10:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <MX_ADC3_Init+0xbc>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e18:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <MX_ADC3_Init+0xbc>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <MX_ADC3_Init+0xbc>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000e24:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <MX_ADC3_Init+0xbc>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <MX_ADC3_Init+0xbc>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <MX_ADC3_Init+0xbc>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e3a:	4811      	ldr	r0, [pc, #68]	; (8000e80 <MX_ADC3_Init+0xbc>)
 8000e3c:	f00a fd9e 	bl	800b97c <HAL_ADC_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000e46:	f001 fac9 	bl	80023dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_ADC3_Init+0xc4>)
 8000e4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e4e:	2306      	movs	r3, #6
 8000e50:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e56:	237f      	movs	r3, #127	; 0x7f
 8000e58:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e62:	463b      	mov	r3, r7
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	; (8000e80 <MX_ADC3_Init+0xbc>)
 8000e68:	f00b f882 	bl	800bf70 <HAL_ADC_ConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000e72:	f001 fab3 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2000082c 	.word	0x2000082c
 8000e84:	50040200 	.word	0x50040200
 8000e88:	36902000 	.word	0x36902000

08000e8c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08e      	sub	sp, #56	; 0x38
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a59      	ldr	r2, [pc, #356]	; (8001010 <HAL_ADC_MspInit+0x184>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d12d      	bne.n	8000f0a <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000eae:	4b59      	ldr	r3, [pc, #356]	; (8001014 <HAL_ADC_MspInit+0x188>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	4a57      	ldr	r2, [pc, #348]	; (8001014 <HAL_ADC_MspInit+0x188>)
 8000eb6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000eb8:	4b56      	ldr	r3, [pc, #344]	; (8001014 <HAL_ADC_MspInit+0x188>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d10b      	bne.n	8000ed8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000ec0:	4b55      	ldr	r3, [pc, #340]	; (8001018 <HAL_ADC_MspInit+0x18c>)
 8000ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec4:	4a54      	ldr	r2, [pc, #336]	; (8001018 <HAL_ADC_MspInit+0x18c>)
 8000ec6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000eca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ecc:	4b52      	ldr	r3, [pc, #328]	; (8001018 <HAL_ADC_MspInit+0x18c>)
 8000ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ed4:	623b      	str	r3, [r7, #32]
 8000ed6:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed8:	4b4f      	ldr	r3, [pc, #316]	; (8001018 <HAL_ADC_MspInit+0x18c>)
 8000eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000edc:	4a4e      	ldr	r2, [pc, #312]	; (8001018 <HAL_ADC_MspInit+0x18c>)
 8000ede:	f043 0304 	orr.w	r3, r3, #4
 8000ee2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee4:	4b4c      	ldr	r3, [pc, #304]	; (8001018 <HAL_ADC_MspInit+0x18c>)
 8000ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 8000ef0:	2318      	movs	r3, #24
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ef4:	230b      	movs	r3, #11
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f00:	4619      	mov	r1, r3
 8000f02:	4846      	ldr	r0, [pc, #280]	; (800101c <HAL_ADC_MspInit+0x190>)
 8000f04:	f00c f872 	bl	800cfec <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000f08:	e07e      	b.n	8001008 <HAL_ADC_MspInit+0x17c>
  else if(adcHandle->Instance==ADC2)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a44      	ldr	r2, [pc, #272]	; (8001020 <HAL_ADC_MspInit+0x194>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d146      	bne.n	8000fa2 <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000f14:	4b3f      	ldr	r3, [pc, #252]	; (8001014 <HAL_ADC_MspInit+0x188>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	4a3e      	ldr	r2, [pc, #248]	; (8001014 <HAL_ADC_MspInit+0x188>)
 8000f1c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000f1e:	4b3d      	ldr	r3, [pc, #244]	; (8001014 <HAL_ADC_MspInit+0x188>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d10b      	bne.n	8000f3e <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000f26:	4b3c      	ldr	r3, [pc, #240]	; (8001018 <HAL_ADC_MspInit+0x18c>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	4a3b      	ldr	r2, [pc, #236]	; (8001018 <HAL_ADC_MspInit+0x18c>)
 8000f2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f32:	4b39      	ldr	r3, [pc, #228]	; (8001018 <HAL_ADC_MspInit+0x18c>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f3a:	61bb      	str	r3, [r7, #24]
 8000f3c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3e:	4b36      	ldr	r3, [pc, #216]	; (8001018 <HAL_ADC_MspInit+0x18c>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	4a35      	ldr	r2, [pc, #212]	; (8001018 <HAL_ADC_MspInit+0x18c>)
 8000f44:	f043 0304 	orr.w	r3, r3, #4
 8000f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4a:	4b33      	ldr	r3, [pc, #204]	; (8001018 <HAL_ADC_MspInit+0x18c>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	f003 0304 	and.w	r3, r3, #4
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b30      	ldr	r3, [pc, #192]	; (8001018 <HAL_ADC_MspInit+0x18c>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	4a2f      	ldr	r2, [pc, #188]	; (8001018 <HAL_ADC_MspInit+0x18c>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f62:	4b2d      	ldr	r3, [pc, #180]	; (8001018 <HAL_ADC_MspInit+0x18c>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f72:	230b      	movs	r3, #11
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4826      	ldr	r0, [pc, #152]	; (800101c <HAL_ADC_MspInit+0x190>)
 8000f82:	f00c f833 	bl	800cfec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 8000f86:	2312      	movs	r3, #18
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f8a:	230b      	movs	r3, #11
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f96:	4619      	mov	r1, r3
 8000f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9c:	f00c f826 	bl	800cfec <HAL_GPIO_Init>
}
 8000fa0:	e032      	b.n	8001008 <HAL_ADC_MspInit+0x17c>
  else if(adcHandle->Instance==ADC3)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a1f      	ldr	r2, [pc, #124]	; (8001024 <HAL_ADC_MspInit+0x198>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d12d      	bne.n	8001008 <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <HAL_ADC_MspInit+0x188>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	4a18      	ldr	r2, [pc, #96]	; (8001014 <HAL_ADC_MspInit+0x188>)
 8000fb4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000fb6:	4b17      	ldr	r3, [pc, #92]	; (8001014 <HAL_ADC_MspInit+0x188>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d10b      	bne.n	8000fd6 <HAL_ADC_MspInit+0x14a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <HAL_ADC_MspInit+0x18c>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	4a15      	ldr	r2, [pc, #84]	; (8001018 <HAL_ADC_MspInit+0x18c>)
 8000fc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <HAL_ADC_MspInit+0x18c>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <HAL_ADC_MspInit+0x18c>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	4a0f      	ldr	r2, [pc, #60]	; (8001018 <HAL_ADC_MspInit+0x18c>)
 8000fdc:	f043 0320 	orr.w	r3, r3, #32
 8000fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <HAL_ADC_MspInit+0x18c>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	f003 0320 	and.w	r3, r3, #32
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ff4:	230b      	movs	r3, #11
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001000:	4619      	mov	r1, r3
 8001002:	4809      	ldr	r0, [pc, #36]	; (8001028 <HAL_ADC_MspInit+0x19c>)
 8001004:	f00b fff2 	bl	800cfec <HAL_GPIO_Init>
}
 8001008:	bf00      	nop
 800100a:	3738      	adds	r7, #56	; 0x38
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	50040000 	.word	0x50040000
 8001014:	20000894 	.word	0x20000894
 8001018:	40021000 	.word	0x40021000
 800101c:	48000800 	.word	0x48000800
 8001020:	50040100 	.word	0x50040100
 8001024:	50040200 	.word	0x50040200
 8001028:	48001400 	.word	0x48001400

0800102c <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001030:	4b16      	ldr	r3, [pc, #88]	; (800108c <MX_DCMI_Init+0x60>)
 8001032:	4a17      	ldr	r2, [pc, #92]	; (8001090 <MX_DCMI_Init+0x64>)
 8001034:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <MX_DCMI_Init+0x60>)
 8001038:	2200      	movs	r2, #0
 800103a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <MX_DCMI_Init+0x60>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001042:	4b12      	ldr	r3, [pc, #72]	; (800108c <MX_DCMI_Init+0x60>)
 8001044:	2200      	movs	r2, #0
 8001046:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001048:	4b10      	ldr	r3, [pc, #64]	; (800108c <MX_DCMI_Init+0x60>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_DCMI_Init+0x60>)
 8001050:	2200      	movs	r2, #0
 8001052:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001054:	4b0d      	ldr	r3, [pc, #52]	; (800108c <MX_DCMI_Init+0x60>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <MX_DCMI_Init+0x60>)
 800105c:	2200      	movs	r2, #0
 800105e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001060:	4b0a      	ldr	r3, [pc, #40]	; (800108c <MX_DCMI_Init+0x60>)
 8001062:	2200      	movs	r2, #0
 8001064:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <MX_DCMI_Init+0x60>)
 8001068:	2200      	movs	r2, #0
 800106a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800106c:	4b07      	ldr	r3, [pc, #28]	; (800108c <MX_DCMI_Init+0x60>)
 800106e:	2200      	movs	r2, #0
 8001070:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <MX_DCMI_Init+0x60>)
 8001074:	2200      	movs	r2, #0
 8001076:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <MX_DCMI_Init+0x60>)
 800107a:	f00b fe25 	bl	800ccc8 <HAL_DCMI_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001084:	f001 f9aa 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000898 	.word	0x20000898
 8001090:	50050000 	.word	0x50050000

08001094 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08c      	sub	sp, #48	; 0x30
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a33      	ldr	r2, [pc, #204]	; (8001180 <HAL_DCMI_MspInit+0xec>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d160      	bne.n	8001178 <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80010b6:	4b33      	ldr	r3, [pc, #204]	; (8001184 <HAL_DCMI_MspInit+0xf0>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	4a32      	ldr	r2, [pc, #200]	; (8001184 <HAL_DCMI_MspInit+0xf0>)
 80010bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c2:	4b30      	ldr	r3, [pc, #192]	; (8001184 <HAL_DCMI_MspInit+0xf0>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ca:	61bb      	str	r3, [r7, #24]
 80010cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ce:	4b2d      	ldr	r3, [pc, #180]	; (8001184 <HAL_DCMI_MspInit+0xf0>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	4a2c      	ldr	r2, [pc, #176]	; (8001184 <HAL_DCMI_MspInit+0xf0>)
 80010d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010da:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <HAL_DCMI_MspInit+0xf0>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80010e6:	4b27      	ldr	r3, [pc, #156]	; (8001184 <HAL_DCMI_MspInit+0xf0>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	4a26      	ldr	r2, [pc, #152]	; (8001184 <HAL_DCMI_MspInit+0xf0>)
 80010ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f2:	4b24      	ldr	r3, [pc, #144]	; (8001184 <HAL_DCMI_MspInit+0xf0>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <HAL_DCMI_MspInit+0xf0>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	4a20      	ldr	r2, [pc, #128]	; (8001184 <HAL_DCMI_MspInit+0xf0>)
 8001104:	f043 0310 	orr.w	r3, r3, #16
 8001108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110a:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <HAL_DCMI_MspInit+0xf0>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	f003 0310 	and.w	r3, r3, #16
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 8001116:	f645 7320 	movw	r3, #24352	; 0x5f20
 800111a:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001128:	230a      	movs	r3, #10
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	4619      	mov	r1, r3
 8001132:	4815      	ldr	r0, [pc, #84]	; (8001188 <HAL_DCMI_MspInit+0xf4>)
 8001134:	f00b ff5a 	bl	800cfec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8001138:	23b0      	movs	r3, #176	; 0xb0
 800113a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001148:	230a      	movs	r3, #10
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	4619      	mov	r1, r3
 8001152:	480e      	ldr	r0, [pc, #56]	; (800118c <HAL_DCMI_MspInit+0xf8>)
 8001154:	f00b ff4a 	bl	800cfec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8001158:	2320      	movs	r3, #32
 800115a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001168:	230a      	movs	r3, #10
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4619      	mov	r1, r3
 8001172:	4807      	ldr	r0, [pc, #28]	; (8001190 <HAL_DCMI_MspInit+0xfc>)
 8001174:	f00b ff3a 	bl	800cfec <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8001178:	bf00      	nop
 800117a:	3730      	adds	r7, #48	; 0x30
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	50050000 	.word	0x50050000
 8001184:	40021000 	.word	0x40021000
 8001188:	48001c00 	.word	0x48001c00
 800118c:	48002000 	.word	0x48002000
 8001190:	48001000 	.word	0x48001000

08001194 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;
DFSDM_Channel_HandleTypeDef hdfsdm1_channel2;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001198:	4b30      	ldr	r3, [pc, #192]	; (800125c <MX_DFSDM1_Init+0xc8>)
 800119a:	4a31      	ldr	r2, [pc, #196]	; (8001260 <MX_DFSDM1_Init+0xcc>)
 800119c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800119e:	4b2f      	ldr	r3, [pc, #188]	; (800125c <MX_DFSDM1_Init+0xc8>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80011a4:	4b2d      	ldr	r3, [pc, #180]	; (800125c <MX_DFSDM1_Init+0xc8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80011aa:	4b2c      	ldr	r3, [pc, #176]	; (800125c <MX_DFSDM1_Init+0xc8>)
 80011ac:	2202      	movs	r2, #2
 80011ae:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80011b0:	4b2a      	ldr	r3, [pc, #168]	; (800125c <MX_DFSDM1_Init+0xc8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80011b6:	4b29      	ldr	r3, [pc, #164]	; (800125c <MX_DFSDM1_Init+0xc8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <MX_DFSDM1_Init+0xc8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80011c2:	4b26      	ldr	r3, [pc, #152]	; (800125c <MX_DFSDM1_Init+0xc8>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80011c8:	4b24      	ldr	r3, [pc, #144]	; (800125c <MX_DFSDM1_Init+0xc8>)
 80011ca:	2204      	movs	r2, #4
 80011cc:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80011ce:	4b23      	ldr	r3, [pc, #140]	; (800125c <MX_DFSDM1_Init+0xc8>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80011d4:	4b21      	ldr	r3, [pc, #132]	; (800125c <MX_DFSDM1_Init+0xc8>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <MX_DFSDM1_Init+0xc8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80011e0:	4b1e      	ldr	r3, [pc, #120]	; (800125c <MX_DFSDM1_Init+0xc8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80011e6:	481d      	ldr	r0, [pc, #116]	; (800125c <MX_DFSDM1_Init+0xc8>)
 80011e8:	f00b fdf4 	bl	800cdd4 <HAL_DFSDM_ChannelInit>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80011f2:	f001 f8f3 	bl	80023dc <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80011f6:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <MX_DFSDM1_Init+0xd0>)
 80011f8:	4a1b      	ldr	r2, [pc, #108]	; (8001268 <MX_DFSDM1_Init+0xd4>)
 80011fa:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <MX_DFSDM1_Init+0xd0>)
 80011fe:	2201      	movs	r2, #1
 8001200:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <MX_DFSDM1_Init+0xd0>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <MX_DFSDM1_Init+0xd0>)
 800120a:	2202      	movs	r2, #2
 800120c:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <MX_DFSDM1_Init+0xd0>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <MX_DFSDM1_Init+0xd0>)
 8001216:	2200      	movs	r2, #0
 8001218:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <MX_DFSDM1_Init+0xd0>)
 800121c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001220:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <MX_DFSDM1_Init+0xd0>)
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <MX_DFSDM1_Init+0xd0>)
 800122a:	2204      	movs	r2, #4
 800122c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <MX_DFSDM1_Init+0xd0>)
 8001230:	2200      	movs	r2, #0
 8001232:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <MX_DFSDM1_Init+0xd0>)
 8001236:	2201      	movs	r2, #1
 8001238:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <MX_DFSDM1_Init+0xd0>)
 800123c:	2200      	movs	r2, #0
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <MX_DFSDM1_Init+0xd0>)
 8001242:	2200      	movs	r2, #0
 8001244:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8001246:	4807      	ldr	r0, [pc, #28]	; (8001264 <MX_DFSDM1_Init+0xd0>)
 8001248:	f00b fdc4 	bl	800cdd4 <HAL_DFSDM_ChannelInit>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 8001252:	f001 f8c3 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200008fc 	.word	0x200008fc
 8001260:	40016020 	.word	0x40016020
 8001264:	20000934 	.word	0x20000934
 8001268:	40016040 	.word	0x40016040

0800126c <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b0ae      	sub	sp, #184	; 0xb8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001284:	f107 0318 	add.w	r3, r7, #24
 8001288:	228c      	movs	r2, #140	; 0x8c
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f018 f9e1 	bl	8019654 <memset>
  if(DFSDM1_Init == 0)
 8001292:	4b36      	ldr	r3, [pc, #216]	; (800136c <HAL_DFSDM_ChannelMspInit+0x100>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d163      	bne.n	8001362 <HAL_DFSDM_ChannelMspInit+0xf6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800129a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800129e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a6:	f107 0318 	add.w	r3, r7, #24
 80012aa:	4618      	mov	r0, r3
 80012ac:	f00f fcc4 	bl	8010c38 <HAL_RCCEx_PeriphCLKConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80012b6:	f001 f891 	bl	80023dc <Error_Handler>
    }

    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80012ba:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <HAL_DFSDM_ChannelMspInit+0x104>)
 80012bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012be:	4a2c      	ldr	r2, [pc, #176]	; (8001370 <HAL_DFSDM_ChannelMspInit+0x104>)
 80012c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012c4:	6613      	str	r3, [r2, #96]	; 0x60
 80012c6:	4b2a      	ldr	r3, [pc, #168]	; (8001370 <HAL_DFSDM_ChannelMspInit+0x104>)
 80012c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	4b27      	ldr	r3, [pc, #156]	; (8001370 <HAL_DFSDM_ChannelMspInit+0x104>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	4a26      	ldr	r2, [pc, #152]	; (8001370 <HAL_DFSDM_ChannelMspInit+0x104>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012de:	4b24      	ldr	r3, [pc, #144]	; (8001370 <HAL_DFSDM_ChannelMspInit+0x104>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ea:	4b21      	ldr	r3, [pc, #132]	; (8001370 <HAL_DFSDM_ChannelMspInit+0x104>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	4a20      	ldr	r2, [pc, #128]	; (8001370 <HAL_DFSDM_ChannelMspInit+0x104>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f6:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <HAL_DFSDM_ChannelMspInit+0x104>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 8001302:	2384      	movs	r3, #132	; 0x84
 8001304:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800131a:	2306      	movs	r3, #6
 800131c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001320:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001324:	4619      	mov	r1, r3
 8001326:	4813      	ldr	r0, [pc, #76]	; (8001374 <HAL_DFSDM_ChannelMspInit+0x108>)
 8001328:	f00b fe60 	bl	800cfec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 800132c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001330:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001346:	2306      	movs	r3, #6
 8001348:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001350:	4619      	mov	r1, r3
 8001352:	4809      	ldr	r0, [pc, #36]	; (8001378 <HAL_DFSDM_ChannelMspInit+0x10c>)
 8001354:	f00b fe4a 	bl	800cfec <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <HAL_DFSDM_ChannelMspInit+0x100>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	4a03      	ldr	r2, [pc, #12]	; (800136c <HAL_DFSDM_ChannelMspInit+0x100>)
 8001360:	6013      	str	r3, [r2, #0]
  }
}
 8001362:	bf00      	nop
 8001364:	37b8      	adds	r7, #184	; 0xb8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	2000096c 	.word	0x2000096c
 8001370:	40021000 	.word	0x40021000
 8001374:	48000800 	.word	0x48000800
 8001378:	48000400 	.word	0x48000400

0800137c <MX_FMC_Init>:
SRAM_HandleTypeDef hsram1;
SRAM_HandleTypeDef hsram2;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001382:	463b      	mov	r3, r7
 8001384:	2220      	movs	r2, #32
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f018 f963 	bl	8019654 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800138e:	4b4f      	ldr	r3, [pc, #316]	; (80014cc <MX_FMC_Init+0x150>)
 8001390:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001394:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001396:	4b4d      	ldr	r3, [pc, #308]	; (80014cc <MX_FMC_Init+0x150>)
 8001398:	4a4d      	ldr	r2, [pc, #308]	; (80014d0 <MX_FMC_Init+0x154>)
 800139a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 800139c:	4b4b      	ldr	r3, [pc, #300]	; (80014cc <MX_FMC_Init+0x150>)
 800139e:	2202      	movs	r2, #2
 80013a0:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80013a2:	4b4a      	ldr	r3, [pc, #296]	; (80014cc <MX_FMC_Init+0x150>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80013a8:	4b48      	ldr	r3, [pc, #288]	; (80014cc <MX_FMC_Init+0x150>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80013ae:	4b47      	ldr	r3, [pc, #284]	; (80014cc <MX_FMC_Init+0x150>)
 80013b0:	2210      	movs	r2, #16
 80013b2:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80013b4:	4b45      	ldr	r3, [pc, #276]	; (80014cc <MX_FMC_Init+0x150>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80013ba:	4b44      	ldr	r3, [pc, #272]	; (80014cc <MX_FMC_Init+0x150>)
 80013bc:	2200      	movs	r2, #0
 80013be:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80013c0:	4b42      	ldr	r3, [pc, #264]	; (80014cc <MX_FMC_Init+0x150>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 80013c6:	4b41      	ldr	r3, [pc, #260]	; (80014cc <MX_FMC_Init+0x150>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80013cc:	4b3f      	ldr	r3, [pc, #252]	; (80014cc <MX_FMC_Init+0x150>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80013d2:	4b3e      	ldr	r3, [pc, #248]	; (80014cc <MX_FMC_Init+0x150>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80013d8:	4b3c      	ldr	r3, [pc, #240]	; (80014cc <MX_FMC_Init+0x150>)
 80013da:	2200      	movs	r2, #0
 80013dc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80013de:	4b3b      	ldr	r3, [pc, #236]	; (80014cc <MX_FMC_Init+0x150>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80013e4:	4b39      	ldr	r3, [pc, #228]	; (80014cc <MX_FMC_Init+0x150>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80013ea:	4b38      	ldr	r3, [pc, #224]	; (80014cc <MX_FMC_Init+0x150>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80013f0:	4b36      	ldr	r3, [pc, #216]	; (80014cc <MX_FMC_Init+0x150>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80013f6:	230f      	movs	r3, #15
 80013f8:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80013fa:	230f      	movs	r3, #15
 80013fc:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 80013fe:	23ff      	movs	r3, #255	; 0xff
 8001400:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8001402:	230f      	movs	r3, #15
 8001404:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001406:	2310      	movs	r3, #16
 8001408:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800140a:	2311      	movs	r3, #17
 800140c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001412:	463b      	mov	r3, r7
 8001414:	2200      	movs	r2, #0
 8001416:	4619      	mov	r1, r3
 8001418:	482c      	ldr	r0, [pc, #176]	; (80014cc <MX_FMC_Init+0x150>)
 800141a:	f011 ffe2 	bl	80133e2 <HAL_SRAM_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 8001424:	f000 ffda 	bl	80023dc <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8001428:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <MX_FMC_Init+0x158>)
 800142a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800142e:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001430:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <MX_FMC_Init+0x158>)
 8001432:	4a27      	ldr	r2, [pc, #156]	; (80014d0 <MX_FMC_Init+0x154>)
 8001434:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 8001436:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <MX_FMC_Init+0x158>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800143c:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <MX_FMC_Init+0x158>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001442:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <MX_FMC_Init+0x158>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001448:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <MX_FMC_Init+0x158>)
 800144a:	2210      	movs	r2, #16
 800144c:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800144e:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <MX_FMC_Init+0x158>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001454:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <MX_FMC_Init+0x158>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800145a:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <MX_FMC_Init+0x158>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001460:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <MX_FMC_Init+0x158>)
 8001462:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001466:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001468:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <MX_FMC_Init+0x158>)
 800146a:	2200      	movs	r2, #0
 800146c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <MX_FMC_Init+0x158>)
 8001470:	2200      	movs	r2, #0
 8001472:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001474:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <MX_FMC_Init+0x158>)
 8001476:	2200      	movs	r2, #0
 8001478:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <MX_FMC_Init+0x158>)
 800147c:	2200      	movs	r2, #0
 800147e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <MX_FMC_Init+0x158>)
 8001482:	2200      	movs	r2, #0
 8001484:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <MX_FMC_Init+0x158>)
 8001488:	2200      	movs	r2, #0
 800148a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_FMC_Init+0x158>)
 800148e:	2200      	movs	r2, #0
 8001490:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001492:	230f      	movs	r3, #15
 8001494:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8001496:	230f      	movs	r3, #15
 8001498:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 800149a:	23ff      	movs	r3, #255	; 0xff
 800149c:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 800149e:	230f      	movs	r3, #15
 80014a0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80014a2:	2310      	movs	r3, #16
 80014a4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80014a6:	2311      	movs	r3, #17
 80014a8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 80014ae:	463b      	mov	r3, r7
 80014b0:	2200      	movs	r2, #0
 80014b2:	4619      	mov	r1, r3
 80014b4:	4807      	ldr	r0, [pc, #28]	; (80014d4 <MX_FMC_Init+0x158>)
 80014b6:	f011 ff94 	bl	80133e2 <HAL_SRAM_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 80014c0:	f000 ff8c 	bl	80023dc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80014c4:	bf00      	nop
 80014c6:	3720      	adds	r7, #32
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000970 	.word	0x20000970
 80014d0:	a0000104 	.word	0xa0000104
 80014d4:	200009c0 	.word	0x200009c0

080014d8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80014ec:	4b2b      	ldr	r3, [pc, #172]	; (800159c <HAL_FMC_MspInit+0xc4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d14f      	bne.n	8001594 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 80014f4:	4b29      	ldr	r3, [pc, #164]	; (800159c <HAL_FMC_MspInit+0xc4>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80014fa:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <HAL_FMC_MspInit+0xc8>)
 80014fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014fe:	4a28      	ldr	r2, [pc, #160]	; (80015a0 <HAL_FMC_MspInit+0xc8>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6513      	str	r3, [r2, #80]	; 0x50
 8001506:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <HAL_FMC_MspInit+0xc8>)
 8001508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	603b      	str	r3, [r7, #0]
 8001510:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 8001512:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001516:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2302      	movs	r3, #2
 800151a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001520:	2303      	movs	r3, #3
 8001522:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001524:	230c      	movs	r3, #12
 8001526:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	4619      	mov	r1, r3
 800152c:	481d      	ldr	r0, [pc, #116]	; (80015a4 <HAL_FMC_MspInit+0xcc>)
 800152e:	f00b fd5d 	bl	800cfec <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 8001532:	f240 233f 	movw	r3, #575	; 0x23f
 8001536:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	2302      	movs	r3, #2
 800153a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001540:	2303      	movs	r3, #3
 8001542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001544:	230c      	movs	r3, #12
 8001546:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	4619      	mov	r1, r3
 800154c:	4816      	ldr	r0, [pc, #88]	; (80015a8 <HAL_FMC_MspInit+0xd0>)
 800154e:	f00b fd4d 	bl	800cfec <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 8001552:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8001556:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001560:	2303      	movs	r3, #3
 8001562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001564:	230c      	movs	r3, #12
 8001566:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	4619      	mov	r1, r3
 800156c:	480f      	ldr	r0, [pc, #60]	; (80015ac <HAL_FMC_MspInit+0xd4>)
 800156e:	f00b fd3d 	bl	800cfec <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8001572:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001576:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001584:	230c      	movs	r3, #12
 8001586:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	4619      	mov	r1, r3
 800158c:	4808      	ldr	r0, [pc, #32]	; (80015b0 <HAL_FMC_MspInit+0xd8>)
 800158e:	f00b fd2d 	bl	800cfec <HAL_GPIO_Init>
 8001592:	e000      	b.n	8001596 <HAL_FMC_MspInit+0xbe>
    return;
 8001594:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000a10 	.word	0x20000a10
 80015a0:	40021000 	.word	0x40021000
 80015a4:	48001000 	.word	0x48001000
 80015a8:	48001800 	.word	0x48001800
 80015ac:	48000c00 	.word	0x48000c00
 80015b0:	48001400 	.word	0x48001400

080015b4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80015bc:	f7ff ff8c 	bl	80014d8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <MX_GPIO_Init>:
     PH13   ------> TIM8_CH1N
     PB9   ------> S_TIM4_CH4
     PA8   ------> LPTIM2_OUT
*/
void MX_GPIO_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08e      	sub	sp, #56	; 0x38
 80015cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80015de:	4bb3      	ldr	r3, [pc, #716]	; (80018ac <MX_GPIO_Init+0x2e4>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	4ab2      	ldr	r2, [pc, #712]	; (80018ac <MX_GPIO_Init+0x2e4>)
 80015e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ea:	4bb0      	ldr	r3, [pc, #704]	; (80018ac <MX_GPIO_Init+0x2e4>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f2:	623b      	str	r3, [r7, #32]
 80015f4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015f6:	4bad      	ldr	r3, [pc, #692]	; (80018ac <MX_GPIO_Init+0x2e4>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	4aac      	ldr	r2, [pc, #688]	; (80018ac <MX_GPIO_Init+0x2e4>)
 80015fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001602:	4baa      	ldr	r3, [pc, #680]	; (80018ac <MX_GPIO_Init+0x2e4>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800160a:	61fb      	str	r3, [r7, #28]
 800160c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800160e:	4ba7      	ldr	r3, [pc, #668]	; (80018ac <MX_GPIO_Init+0x2e4>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	4aa6      	ldr	r2, [pc, #664]	; (80018ac <MX_GPIO_Init+0x2e4>)
 8001614:	f043 0310 	orr.w	r3, r3, #16
 8001618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800161a:	4ba4      	ldr	r3, [pc, #656]	; (80018ac <MX_GPIO_Init+0x2e4>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	f003 0310 	and.w	r3, r3, #16
 8001622:	61bb      	str	r3, [r7, #24]
 8001624:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001626:	4ba1      	ldr	r3, [pc, #644]	; (80018ac <MX_GPIO_Init+0x2e4>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	4aa0      	ldr	r2, [pc, #640]	; (80018ac <MX_GPIO_Init+0x2e4>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001632:	4b9e      	ldr	r3, [pc, #632]	; (80018ac <MX_GPIO_Init+0x2e4>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	4b9b      	ldr	r3, [pc, #620]	; (80018ac <MX_GPIO_Init+0x2e4>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	4a9a      	ldr	r2, [pc, #616]	; (80018ac <MX_GPIO_Init+0x2e4>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164a:	4b98      	ldr	r3, [pc, #608]	; (80018ac <MX_GPIO_Init+0x2e4>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001656:	4b95      	ldr	r3, [pc, #596]	; (80018ac <MX_GPIO_Init+0x2e4>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	4a94      	ldr	r2, [pc, #592]	; (80018ac <MX_GPIO_Init+0x2e4>)
 800165c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001662:	4b92      	ldr	r3, [pc, #584]	; (80018ac <MX_GPIO_Init+0x2e4>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 800166e:	f00e fb8b 	bl	800fd88 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001672:	4b8e      	ldr	r3, [pc, #568]	; (80018ac <MX_GPIO_Init+0x2e4>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	4a8d      	ldr	r2, [pc, #564]	; (80018ac <MX_GPIO_Init+0x2e4>)
 8001678:	f043 0308 	orr.w	r3, r3, #8
 800167c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167e:	4b8b      	ldr	r3, [pc, #556]	; (80018ac <MX_GPIO_Init+0x2e4>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168a:	4b88      	ldr	r3, [pc, #544]	; (80018ac <MX_GPIO_Init+0x2e4>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	4a87      	ldr	r2, [pc, #540]	; (80018ac <MX_GPIO_Init+0x2e4>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001696:	4b85      	ldr	r3, [pc, #532]	; (80018ac <MX_GPIO_Init+0x2e4>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016a2:	4b82      	ldr	r3, [pc, #520]	; (80018ac <MX_GPIO_Init+0x2e4>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	4a81      	ldr	r2, [pc, #516]	; (80018ac <MX_GPIO_Init+0x2e4>)
 80016a8:	f043 0320 	orr.w	r3, r3, #32
 80016ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ae:	4b7f      	ldr	r3, [pc, #508]	; (80018ac <MX_GPIO_Init+0x2e4>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	f003 0320 	and.w	r3, r3, #32
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LCD_BL_Pin|ARD_D4_Pin, GPIO_PIN_RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	f640 0101 	movw	r1, #2049	; 0x801
 80016c0:	487b      	ldr	r0, [pc, #492]	; (80018b0 <MX_GPIO_Init+0x2e8>)
 80016c2:	f00b ff17 	bl	800d4f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2143      	movs	r1, #67	; 0x43
 80016ca:	487a      	ldr	r0, [pc, #488]	; (80018b4 <MX_GPIO_Init+0x2ec>)
 80016cc:	f00b ff12 	bl	800d4f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2140      	movs	r1, #64	; 0x40
 80016d4:	4878      	ldr	r0, [pc, #480]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 80016d6:	f00b ff0d 	bl	800d4f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ARD_D7_GPIO_Port, ARD_D7_Pin, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	2140      	movs	r1, #64	; 0x40
 80016de:	4877      	ldr	r0, [pc, #476]	; (80018bc <MX_GPIO_Init+0x2f4>)
 80016e0:	f00b ff08 	bl	800d4f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80016e4:	2200      	movs	r2, #0
 80016e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ea:	4875      	ldr	r0, [pc, #468]	; (80018c0 <MX_GPIO_Init+0x2f8>)
 80016ec:	f00b ff02 	bl	800d4f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin;
 80016f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016fc:	2302      	movs	r3, #2
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_DOWN_GPIO_Port, &GPIO_InitStruct);
 8001700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001704:	4619      	mov	r1, r3
 8001706:	486a      	ldr	r0, [pc, #424]	; (80018b0 <MX_GPIO_Init+0x2e8>)
 8001708:	f00b fc70 	bl	800cfec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 800170c:	2304      	movs	r3, #4
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001710:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001714:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 800171a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171e:	4619      	mov	r1, r3
 8001720:	4864      	ldr	r0, [pc, #400]	; (80018b4 <MX_GPIO_Init+0x2ec>)
 8001722:	f00b fc63 	bl	800cfec <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|ARD_D4_Pin;
 8001726:	f640 0301 	movw	r3, #2049	; 0x801
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172c:	2301      	movs	r3, #1
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173c:	4619      	mov	r1, r3
 800173e:	485c      	ldr	r0, [pc, #368]	; (80018b0 <MX_GPIO_Init+0x2e8>)
 8001740:	f00b fc54 	bl	800cfec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_LEFT_Pin;
 8001744:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800174a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001750:	2302      	movs	r3, #2
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_LEFT_GPIO_Port, &GPIO_InitStruct);
 8001754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001758:	4619      	mov	r1, r3
 800175a:	4855      	ldr	r0, [pc, #340]	; (80018b0 <MX_GPIO_Init+0x2e8>)
 800175c:	f00b fc46 	bl	800cfec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001760:	2340      	movs	r3, #64	; 0x40
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001770:	2303      	movs	r3, #3
 8001772:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001778:	4619      	mov	r1, r3
 800177a:	484d      	ldr	r0, [pc, #308]	; (80018b0 <MX_GPIO_Init+0x2e8>)
 800177c:	f00b fc36 	bl	800cfec <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 8001780:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001792:	2303      	movs	r3, #3
 8001794:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179a:	4619      	mov	r1, r3
 800179c:	4845      	ldr	r0, [pc, #276]	; (80018b4 <MX_GPIO_Init+0x2ec>)
 800179e:	f00b fc25 	bl	800cfec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_UP_Pin;
 80017a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017ac:	2302      	movs	r3, #2
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_UP_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b4:	4619      	mov	r1, r3
 80017b6:	483e      	ldr	r0, [pc, #248]	; (80018b0 <MX_GPIO_Init+0x2e8>)
 80017b8:	f00b fc18 	bl	800cfec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 80017bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017ce:	2302      	movs	r3, #2
 80017d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 80017d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d6:	4619      	mov	r1, r3
 80017d8:	4839      	ldr	r0, [pc, #228]	; (80018c0 <MX_GPIO_Init+0x2f8>)
 80017da:	f00b fc07 	bl	800cfec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e2:	2300      	movs	r3, #0
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 80017ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ee:	4619      	mov	r1, r3
 80017f0:	4830      	ldr	r0, [pc, #192]	; (80018b4 <MX_GPIO_Init+0x2ec>)
 80017f2:	f00b fbfb 	bl	800cfec <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 80017f6:	2343      	movs	r3, #67	; 0x43
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fa:	2301      	movs	r3, #1
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180a:	4619      	mov	r1, r3
 800180c:	4829      	ldr	r0, [pc, #164]	; (80018b4 <MX_GPIO_Init+0x2ec>)
 800180e:	f00b fbed 	bl	800cfec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8001812:	2340      	movs	r3, #64	; 0x40
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001816:	2301      	movs	r3, #1
 8001818:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2300      	movs	r3, #0
 8001820:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8001822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001826:	4619      	mov	r1, r3
 8001828:	4823      	ldr	r0, [pc, #140]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 800182a:	f00b fbdf 	bl	800cfec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 800182e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001834:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001838:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 800183e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001842:	4619      	mov	r1, r3
 8001844:	481d      	ldr	r0, [pc, #116]	; (80018bc <MX_GPIO_Init+0x2f4>)
 8001846:	f00b fbd1 	bl	800cfec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 800184a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2302      	movs	r3, #2
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 800185c:	230e      	movs	r3, #14
 800185e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001864:	4619      	mov	r1, r3
 8001866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186a:	f00b fbbf 	bl	800cfec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800186e:	2340      	movs	r3, #64	; 0x40
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	2301      	movs	r3, #1
 8001874:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800187e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001882:	4619      	mov	r1, r3
 8001884:	480d      	ldr	r0, [pc, #52]	; (80018bc <MX_GPIO_Init+0x2f4>)
 8001886:	f00b fbb1 	bl	800cfec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 800188a:	2320      	movs	r3, #32
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800188e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001892:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8001898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189c:	4619      	mov	r1, r3
 800189e:	4806      	ldr	r0, [pc, #24]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 80018a0:	f00b fba4 	bl	800cfec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 80018a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
 80018aa:	e00b      	b.n	80018c4 <MX_GPIO_Init+0x2fc>
 80018ac:	40021000 	.word	0x40021000
 80018b0:	48002000 	.word	0x48002000
 80018b4:	48001c00 	.word	0x48001c00
 80018b8:	48000800 	.word	0x48000800
 80018bc:	48001800 	.word	0x48001800
 80018c0:	48000400 	.word	0x48000400
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018c4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018ca:	2302      	movs	r3, #2
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80018ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d2:	4619      	mov	r1, r3
 80018d4:	4818      	ldr	r0, [pc, #96]	; (8001938 <MX_GPIO_Init+0x370>)
 80018d6:	f00b fb89 	bl	800cfec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 80018da:	2304      	movs	r3, #4
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018de:	2300      	movs	r3, #0
 80018e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 80018e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ea:	4619      	mov	r1, r3
 80018ec:	4813      	ldr	r0, [pc, #76]	; (800193c <MX_GPIO_Init+0x374>)
 80018ee:	f00b fb7d 	bl	800cfec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80018f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80018f8:	2311      	movs	r3, #17
 80018fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	2300      	movs	r3, #0
 8001902:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001908:	4619      	mov	r1, r3
 800190a:	480c      	ldr	r0, [pc, #48]	; (800193c <MX_GPIO_Init+0x374>)
 800190c:	f00b fb6e 	bl	800cfec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001910:	2200      	movs	r2, #0
 8001912:	2100      	movs	r1, #0
 8001914:	2017      	movs	r0, #23
 8001916:	f00b f992 	bl	800cc3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800191a:	2017      	movs	r0, #23
 800191c:	f00b f9ab 	bl	800cc76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001920:	2200      	movs	r2, #0
 8001922:	2100      	movs	r1, #0
 8001924:	2028      	movs	r0, #40	; 0x28
 8001926:	f00b f98a 	bl	800cc3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800192a:	2028      	movs	r0, #40	; 0x28
 800192c:	f00b f9a3 	bl	800cc76 <HAL_NVIC_EnableIRQ>

}
 8001930:	bf00      	nop
 8001932:	3738      	adds	r7, #56	; 0x38
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	48001400 	.word	0x48001400
 800193c:	48000400 	.word	0x48000400

08001940 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <MX_I2C1_Init+0x74>)
 8001946:	4a1c      	ldr	r2, [pc, #112]	; (80019b8 <MX_I2C1_Init+0x78>)
 8001948:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800194a:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <MX_I2C1_Init+0x74>)
 800194c:	4a1b      	ldr	r2, [pc, #108]	; (80019bc <MX_I2C1_Init+0x7c>)
 800194e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001950:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <MX_I2C1_Init+0x74>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001956:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <MX_I2C1_Init+0x74>)
 8001958:	2201      	movs	r2, #1
 800195a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800195c:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <MX_I2C1_Init+0x74>)
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <MX_I2C1_Init+0x74>)
 8001964:	2200      	movs	r2, #0
 8001966:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <MX_I2C1_Init+0x74>)
 800196a:	2200      	movs	r2, #0
 800196c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800196e:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <MX_I2C1_Init+0x74>)
 8001970:	2200      	movs	r2, #0
 8001972:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <MX_I2C1_Init+0x74>)
 8001976:	2200      	movs	r2, #0
 8001978:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800197a:	480e      	ldr	r0, [pc, #56]	; (80019b4 <MX_I2C1_Init+0x74>)
 800197c:	f00b fdea 	bl	800d554 <HAL_I2C_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001986:	f000 fd29 	bl	80023dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800198a:	2100      	movs	r1, #0
 800198c:	4809      	ldr	r0, [pc, #36]	; (80019b4 <MX_I2C1_Init+0x74>)
 800198e:	f00c feed 	bl	800e76c <HAL_I2CEx_ConfigAnalogFilter>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001998:	f000 fd20 	bl	80023dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800199c:	2100      	movs	r1, #0
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <MX_I2C1_Init+0x74>)
 80019a0:	f00c ff2f 	bl	800e802 <HAL_I2CEx_ConfigDigitalFilter>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80019aa:	f000 fd17 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000a14 	.word	0x20000a14
 80019b8:	40005400 	.word	0x40005400
 80019bc:	20303e5d 	.word	0x20303e5d

080019c0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019c4:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <MX_I2C2_Init+0x74>)
 80019c6:	4a1c      	ldr	r2, [pc, #112]	; (8001a38 <MX_I2C2_Init+0x78>)
 80019c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80019ca:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <MX_I2C2_Init+0x74>)
 80019cc:	4a1b      	ldr	r2, [pc, #108]	; (8001a3c <MX_I2C2_Init+0x7c>)
 80019ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80019d0:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <MX_I2C2_Init+0x74>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019d6:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <MX_I2C2_Init+0x74>)
 80019d8:	2201      	movs	r2, #1
 80019da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <MX_I2C2_Init+0x74>)
 80019de:	2200      	movs	r2, #0
 80019e0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80019e2:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <MX_I2C2_Init+0x74>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <MX_I2C2_Init+0x74>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <MX_I2C2_Init+0x74>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <MX_I2C2_Init+0x74>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019fa:	480e      	ldr	r0, [pc, #56]	; (8001a34 <MX_I2C2_Init+0x74>)
 80019fc:	f00b fdaa 	bl	800d554 <HAL_I2C_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001a06:	f000 fce9 	bl	80023dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4809      	ldr	r0, [pc, #36]	; (8001a34 <MX_I2C2_Init+0x74>)
 8001a0e:	f00c fead 	bl	800e76c <HAL_I2CEx_ConfigAnalogFilter>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001a18:	f000 fce0 	bl	80023dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4805      	ldr	r0, [pc, #20]	; (8001a34 <MX_I2C2_Init+0x74>)
 8001a20:	f00c feef 	bl	800e802 <HAL_I2CEx_ConfigDigitalFilter>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001a2a:	f000 fcd7 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000a68 	.word	0x20000a68
 8001a38:	40005800 	.word	0x40005800
 8001a3c:	20303e5d 	.word	0x20303e5d

08001a40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b0b0      	sub	sp, #192	; 0xc0
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a58:	f107 0320 	add.w	r3, r7, #32
 8001a5c:	228c      	movs	r2, #140	; 0x8c
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f017 fdf7 	bl	8019654 <memset>
  if(i2cHandle->Instance==I2C1)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a53      	ldr	r2, [pc, #332]	; (8001bb8 <HAL_I2C_MspInit+0x178>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d13c      	bne.n	8001aea <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a70:	2340      	movs	r3, #64	; 0x40
 8001a72:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a74:	2300      	movs	r3, #0
 8001a76:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a78:	f107 0320 	add.w	r3, r7, #32
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f00f f8db 	bl	8010c38 <HAL_RCCEx_PeriphCLKConfig>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a88:	f000 fca8 	bl	80023dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8c:	4b4b      	ldr	r3, [pc, #300]	; (8001bbc <HAL_I2C_MspInit+0x17c>)
 8001a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a90:	4a4a      	ldr	r2, [pc, #296]	; (8001bbc <HAL_I2C_MspInit+0x17c>)
 8001a92:	f043 0302 	orr.w	r3, r3, #2
 8001a96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a98:	4b48      	ldr	r3, [pc, #288]	; (8001bbc <HAL_I2C_MspInit+0x17c>)
 8001a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001aa4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aac:	2312      	movs	r3, #18
 8001aae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001abe:	2304      	movs	r3, #4
 8001ac0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ac8:	4619      	mov	r1, r3
 8001aca:	483d      	ldr	r0, [pc, #244]	; (8001bc0 <HAL_I2C_MspInit+0x180>)
 8001acc:	f00b fa8e 	bl	800cfec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ad0:	4b3a      	ldr	r3, [pc, #232]	; (8001bbc <HAL_I2C_MspInit+0x17c>)
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad4:	4a39      	ldr	r2, [pc, #228]	; (8001bbc <HAL_I2C_MspInit+0x17c>)
 8001ad6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ada:	6593      	str	r3, [r2, #88]	; 0x58
 8001adc:	4b37      	ldr	r3, [pc, #220]	; (8001bbc <HAL_I2C_MspInit+0x17c>)
 8001ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae4:	61bb      	str	r3, [r7, #24]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001ae8:	e061      	b.n	8001bae <HAL_I2C_MspInit+0x16e>
  else if(i2cHandle->Instance==I2C2)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a35      	ldr	r2, [pc, #212]	; (8001bc4 <HAL_I2C_MspInit+0x184>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d15c      	bne.n	8001bae <HAL_I2C_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001af8:	2300      	movs	r3, #0
 8001afa:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001afc:	f107 0320 	add.w	r3, r7, #32
 8001b00:	4618      	mov	r0, r3
 8001b02:	f00f f899 	bl	8010c38 <HAL_RCCEx_PeriphCLKConfig>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001b0c:	f000 fc66 	bl	80023dc <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b10:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <HAL_I2C_MspInit+0x17c>)
 8001b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b14:	4a29      	ldr	r2, [pc, #164]	; (8001bbc <HAL_I2C_MspInit+0x17c>)
 8001b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1c:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <HAL_I2C_MspInit+0x17c>)
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b28:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <HAL_I2C_MspInit+0x17c>)
 8001b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2c:	4a23      	ldr	r2, [pc, #140]	; (8001bbc <HAL_I2C_MspInit+0x17c>)
 8001b2e:	f043 0302 	orr.w	r3, r3, #2
 8001b32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b34:	4b21      	ldr	r3, [pc, #132]	; (8001bbc <HAL_I2C_MspInit+0x17c>)
 8001b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8001b40:	2310      	movs	r3, #16
 8001b42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b46:	2312      	movs	r3, #18
 8001b48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b52:	2303      	movs	r3, #3
 8001b54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b58:	2304      	movs	r3, #4
 8001b5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8001b5e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b62:	4619      	mov	r1, r3
 8001b64:	4818      	ldr	r0, [pc, #96]	; (8001bc8 <HAL_I2C_MspInit+0x188>)
 8001b66:	f00b fa41 	bl	800cfec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8001b6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b72:	2312      	movs	r3, #18
 8001b74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b84:	2304      	movs	r3, #4
 8001b86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8001b8a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b8e:	4619      	mov	r1, r3
 8001b90:	480b      	ldr	r0, [pc, #44]	; (8001bc0 <HAL_I2C_MspInit+0x180>)
 8001b92:	f00b fa2b 	bl	800cfec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_I2C_MspInit+0x17c>)
 8001b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9a:	4a08      	ldr	r2, [pc, #32]	; (8001bbc <HAL_I2C_MspInit+0x17c>)
 8001b9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ba0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_I2C_MspInit+0x17c>)
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
}
 8001bae:	bf00      	nop
 8001bb0:	37c0      	adds	r7, #192	; 0xc0
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40005400 	.word	0x40005400
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	48000400 	.word	0x48000400
 8001bc4:	40005800 	.word	0x40005800
 8001bc8:	48001c00 	.word	0x48001c00

08001bcc <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a15      	ldr	r2, [pc, #84]	; (8001c30 <HAL_I2C_MspDeInit+0x64>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d10f      	bne.n	8001bfe <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <HAL_I2C_MspDeInit+0x68>)
 8001be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be2:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <HAL_I2C_MspDeInit+0x68>)
 8001be4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001be8:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8001bea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bee:	4812      	ldr	r0, [pc, #72]	; (8001c38 <HAL_I2C_MspDeInit+0x6c>)
 8001bf0:	f00b fb8e 	bl	800d310 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8001bf4:	2180      	movs	r1, #128	; 0x80
 8001bf6:	4810      	ldr	r0, [pc, #64]	; (8001c38 <HAL_I2C_MspDeInit+0x6c>)
 8001bf8:	f00b fb8a 	bl	800d310 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8001bfc:	e013      	b.n	8001c26 <HAL_I2C_MspDeInit+0x5a>
  else if(i2cHandle->Instance==I2C2)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a0e      	ldr	r2, [pc, #56]	; (8001c3c <HAL_I2C_MspDeInit+0x70>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d10e      	bne.n	8001c26 <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_I2C_MspDeInit+0x68>)
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0c:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <HAL_I2C_MspDeInit+0x68>)
 8001c0e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001c12:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(I2C2_SCL_GPIO_Port, I2C2_SCL_Pin);
 8001c14:	2110      	movs	r1, #16
 8001c16:	480a      	ldr	r0, [pc, #40]	; (8001c40 <HAL_I2C_MspDeInit+0x74>)
 8001c18:	f00b fb7a 	bl	800d310 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(I2C2_SDA_GPIO_Port, I2C2_SDA_Pin);
 8001c1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c20:	4805      	ldr	r0, [pc, #20]	; (8001c38 <HAL_I2C_MspDeInit+0x6c>)
 8001c22:	f00b fb75 	bl	800d310 <HAL_GPIO_DeInit>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40005400 	.word	0x40005400
 8001c34:	40021000 	.word	0x40021000
 8001c38:	48000400 	.word	0x48000400
 8001c3c:	40005800 	.word	0x40005800
 8001c40:	48001c00 	.word	0x48001c00

08001c44 <drawCircle>:
		HAL_GPIO_TogglePin(ARD_D7_GPIO_Port, ARD_D7_Pin);
	}

}

void drawCircle(uint16_t x, uint16_t y) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	460a      	mov	r2, r1
 8001c4e:	80fb      	strh	r3, [r7, #6]
 8001c50:	4613      	mov	r3, r2
 8001c52:	80bb      	strh	r3, [r7, #4]

	if(!circle_selected) {
 8001c54:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <drawCircle+0x50>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	f083 0301 	eor.w	r3, r3, #1
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00a      	beq.n	8001c78 <drawCircle+0x34>
		BSP_LCD_SetTextColor( LCD_COLOR_DARKMAGENTA );
 8001c62:	f248 0010 	movw	r0, #32784	; 0x8010
 8001c66:	f008 fd51 	bl	800a70c <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(x, y, 20);
 8001c6a:	88b9      	ldrh	r1, [r7, #4]
 8001c6c:	88fb      	ldrh	r3, [r7, #6]
 8001c6e:	2214      	movs	r2, #20
 8001c70:	4618      	mov	r0, r3
 8001c72:	f008 ff69 	bl	800ab48 <BSP_LCD_FillCircle>
	} else {
		BSP_LCD_SetTextColor( LCD_COLOR_GREEN );
		BSP_LCD_FillCircle(x, y, 40);
	}

}
 8001c76:	e009      	b.n	8001c8c <drawCircle+0x48>
		BSP_LCD_SetTextColor( LCD_COLOR_GREEN );
 8001c78:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001c7c:	f008 fd46 	bl	800a70c <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(x, y, 40);
 8001c80:	88b9      	ldrh	r1, [r7, #4]
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	2228      	movs	r2, #40	; 0x28
 8001c86:	4618      	mov	r0, r3
 8001c88:	f008 ff5e 	bl	800ab48 <BSP_LCD_FillCircle>
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000ac6 	.word	0x20000ac6

08001c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b095      	sub	sp, #84	; 0x54
 8001c9c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c9e:	f009 fbbf 	bl	800b420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ca2:	f000 fad5 	bl	8002250 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001ca6:	f000 fb35 	bl	8002314 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001caa:	f7ff fc8d 	bl	80015c8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001cae:	f7fe ffaf 	bl	8000c10 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001cb2:	f7ff f823 	bl	8000cfc <MX_ADC2_Init>
  MX_ADC3_Init();
 8001cb6:	f7ff f885 	bl	8000dc4 <MX_ADC3_Init>
  MX_DCMI_Init();
 8001cba:	f7ff f9b7 	bl	800102c <MX_DCMI_Init>
  MX_DFSDM1_Init();
 8001cbe:	f7ff fa69 	bl	8001194 <MX_DFSDM1_Init>
  MX_FMC_Init();
 8001cc2:	f7ff fb5b 	bl	800137c <MX_FMC_Init>
  MX_I2C1_Init();
 8001cc6:	f7ff fe3b 	bl	8001940 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001cca:	f7ff fe79 	bl	80019c0 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8001cce:	f001 f875 	bl	8002dbc <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8001cd2:	f001 f8a1 	bl	8002e18 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001cd6:	f001 f8cf 	bl	8002e78 <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 8001cda:	f000 fb85 	bl	80023e8 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8001cde:	f000 fc11 	bl	8002504 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8001ce2:	f000 fd31 	bl	8002748 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8001ce6:	f000 fdc1 	bl	800286c <MX_SPI1_Init>
  MX_SPI2_Init();
 8001cea:	f000 fdfd 	bl	80028e8 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8001cee:	f016 fe6f 	bl	80189d0 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 8001cf2:	f001 f80d 	bl	8002d10 <MX_TIM6_Init>
  // above: MX_SDMMC1_SD_Init(); has to be commented out to not be called



  /* LCD Init */
	if (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE) == LCD_ERROR)
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f008 fc4a 	bl	800a590 <BSP_LCD_InitEx>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <main+0x6e>
	{
		/* Initialization Error */
		Error_Handler();
 8001d02:	f000 fb6b 	bl	80023dc <Error_Handler>
	}

	// the lcd bsp includes the fontNN.c files in the Utilities directory
	// in that file, a struct is declared: FontNN
	//BSP_LCD_SetFont(&Font20);
	BSP_LCD_SetFont(&Font24);
 8001d06:	48ba      	ldr	r0, [pc, #744]	; (8001ff0 <main+0x358>)
 8001d08:	f008 fd10 	bl	800a72c <BSP_LCD_SetFont>

	// the display is 240 px tall, XYZ px wide
	BSP_LCD_DisplayStringAt(0, 240 - 65, (uint8_t *)"Purple Ball", CENTER_MODE);
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	4ab9      	ldr	r2, [pc, #740]	; (8001ff4 <main+0x35c>)
 8001d10:	21af      	movs	r1, #175	; 0xaf
 8001d12:	2000      	movs	r0, #0
 8001d14:	f008 fd7a 	bl	800a80c <BSP_LCD_DisplayStringAt>



	// touchscreen init
	if(BSP_TS_InitEx(BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), LCD_ORIENTATION_LANDSCAPE) != TS_OK) {
 8001d18:	f008 fce0 	bl	800a6dc <BSP_LCD_GetXSize>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	b29c      	uxth	r4, r3
 8001d20:	f008 fce8 	bl	800a6f4 <BSP_LCD_GetYSize>
 8001d24:	4603      	mov	r3, r0
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	2201      	movs	r2, #1
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	f009 fa0d 	bl	800b14c <BSP_TS_InitEx>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <main+0xa4>
		Error_Handler();
 8001d38:	f000 fb50 	bl	80023dc <Error_Handler>
	}

	BSP_LCD_ScreenDimmingConfig(100, 5, 1, 20);
 8001d3c:	2314      	movs	r3, #20
 8001d3e:	2201      	movs	r2, #1
 8001d40:	2105      	movs	r1, #5
 8001d42:	2064      	movs	r0, #100	; 0x64
 8001d44:	f008 ff92 	bl	800ac6c <BSP_LCD_ScreenDimmingConfig>



	// LED
	BSP_LED_Init(LED1_PIN);
 8001d48:	2010      	movs	r0, #16
 8001d4a:	f007 fdcb 	bl	80098e4 <BSP_LED_Init>
	BSP_LED_Init(LED2_PIN);
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f007 fdc8 	bl	80098e4 <BSP_LED_Init>
	BSP_LED_Off( LED1_PIN ); // orange labeled LD1
 8001d54:	2010      	movs	r0, #16
 8001d56:	f007 fe35 	bl	80099c4 <BSP_LED_Off>
	BSP_LED_Off( LED2_PIN ); // doesn't work
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f007 fe32 	bl	80099c4 <BSP_LED_Off>



	// Start timer
	HAL_TIM_Base_Start_IT(&htim6);
 8001d60:	48a5      	ldr	r0, [pc, #660]	; (8001ff8 <main+0x360>)
 8001d62:	f011 fbdd 	bl	8013520 <HAL_TIM_Base_Start_IT>
	//ResetAndDetectSensor(1); // EK TODO: the parameter SetDisplay doesn't matter

	// EK test1
	HAL_StatusTypeDef status;
	uint8_t pData;
	status = HAL_I2C_Mem_Read(&hi2c1, 0x52, 0xC0, 1, &pData, 1, HAL_TIMEOUT);
 8001d66:	2303      	movs	r3, #3
 8001d68:	9302      	str	r3, [sp, #8]
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	2301      	movs	r3, #1
 8001d76:	22c0      	movs	r2, #192	; 0xc0
 8001d78:	2152      	movs	r1, #82	; 0x52
 8001d7a:	48a0      	ldr	r0, [pc, #640]	; (8001ffc <main+0x364>)
 8001d7c:	f00b ffa6 	bl	800dccc <HAL_I2C_Mem_Read>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	// pData should be 0xEE
	if(status == HAL_OK) {
 8001d86:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d102      	bne.n	8001d94 <main+0xfc>
		printf("good");
 8001d8e:	489c      	ldr	r0, [pc, #624]	; (8002000 <main+0x368>)
 8001d90:	f017 fd48 	bl	8019824 <iprintf>
	}
	//--

	// EK test2
	VL53L0X_Dev_t *pDev;
	pDev = &VL53L0XDev;
 8001d94:	4b9b      	ldr	r3, [pc, #620]	; (8002004 <main+0x36c>)
 8001d96:	637b      	str	r3, [r7, #52]	; 0x34
	pDev->I2cDevAddr = 0x52;
 8001d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d9a:	2252      	movs	r2, #82	; 0x52
 8001d9c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	pDev->Present = 0;
 8001da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da2:	2200      	movs	r2, #0
 8001da4:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

	int status2 = VL53L0X_DataInit(pDev);
 8001da8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001daa:	f003 fa07 	bl	80051bc <VL53L0X_DataInit>
 8001dae:	4603      	mov	r3, r0
 8001db0:	633b      	str	r3, [r7, #48]	; 0x30
	if( status2 == 0 ){
 8001db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d104      	bne.n	8001dc2 <main+0x12a>
			pDev->Present = 1;
 8001db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8001dc0:	e002      	b.n	8001dc8 <main+0x130>
	}
	else{
			printf("VL53L0X_DataInit fail\n");
 8001dc2:	4891      	ldr	r0, [pc, #580]	; (8002008 <main+0x370>)
 8001dc4:	f017 fdb4 	bl	8019930 <puts>
	}
	printf("VL53L0X %d Present and initiated to final 0x%x\n", pDev->Id, pDev->I2cDevAddr);
 8001dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dca:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
 8001dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd0:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	488d      	ldr	r0, [pc, #564]	; (800200c <main+0x374>)
 8001dd8:	f017 fd24 	bl	8019824 <iprintf>
	pDev->Present = 1;
 8001ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dde:	2201      	movs	r2, #1
 8001de0:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	uint8_t isApertureSpads;
	VL53L0X_RangingMeasurementData_t RangingMeasurementData;
	//int range;

	// Initialize the device in continuous ranging mode
	VL53L0X_StaticInit(pDev);
 8001de4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001de6:	f003 fb4d 	bl	8005484 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(pDev, &VhvSettings, &PhaseCal);
 8001dea:	f107 022a 	add.w	r2, r7, #42	; 0x2a
 8001dee:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8001df2:	4619      	mov	r1, r3
 8001df4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001df6:	f004 f9f5 	bl	80061e4 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(pDev, &refSpadCount, &isApertureSpads);
 8001dfa:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8001dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e02:	4619      	mov	r1, r3
 8001e04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e06:	f004 fe7b 	bl	8006b00 <VL53L0X_PerformRefSpadManagement>
	//VL53L0X_SetInterMeasurementPeriodMilliSeconds(pDev, 250); // Program continuous mode Inter-Measurement period in milliseconds
	//VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
	VL53L0X_SetInterMeasurementPeriodMilliSeconds(pDev, TIMED_RANGING_PERIOD);
 8001e0a:	2132      	movs	r1, #50	; 0x32
 8001e0c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e0e:	f003 ff33 	bl	8005c78 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>
	VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING);
 8001e12:	2103      	movs	r1, #3
 8001e14:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e16:	f003 fd47 	bl	80058a8 <VL53L0X_SetDeviceMode>

	// Start continuous ranging
	VL53L0X_StartMeasurement(pDev);
 8001e1a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e1c:	f004 fa5e 	bl	80062dc <VL53L0X_StartMeasurement>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  	// this has to be the 1st thing in the loop
  	if(gone_sleep) {
 8001e20:	4b7b      	ldr	r3, [pc, #492]	; (8002010 <main+0x378>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <main+0x194>
			//HAL_ResumeTick();
			awakeFromSleep();
 8001e28:	f000 faaa 	bl	8002380 <awakeFromSleep>
		}

		// by changing the text, we can prove that it's resetting when pressing
		// the reset button - because the display will say Beep instead of the
		// other two possibilities
		if(TimingDelay == 0) {
 8001e2c:	4b79      	ldr	r3, [pc, #484]	; (8002014 <main+0x37c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d12d      	bne.n	8001e90 <main+0x1f8>
			/* Toggle LED1 */
			if(led_on) {
 8001e34:	4b78      	ldr	r3, [pc, #480]	; (8002018 <main+0x380>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00d      	beq.n	8001e58 <main+0x1c0>
				BSP_LED_Off(LED1);
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f007 fdc1 	bl	80099c4 <BSP_LED_Off>
				BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001e42:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e46:	f008 fc81 	bl	800a74c <BSP_LCD_Clear>
				BSP_LCD_DisplayStringAt(0, 240 - 65, (uint8_t *)"Zweep", CENTER_MODE);
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	4a73      	ldr	r2, [pc, #460]	; (800201c <main+0x384>)
 8001e4e:	21af      	movs	r1, #175	; 0xaf
 8001e50:	2000      	movs	r0, #0
 8001e52:	f008 fcdb 	bl	800a80c <BSP_LCD_DisplayStringAt>
 8001e56:	e00c      	b.n	8001e72 <main+0x1da>
			} else {
				BSP_LED_On(LED1);
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f007 fd91 	bl	8009980 <BSP_LED_On>
				BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001e5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e62:	f008 fc73 	bl	800a74c <BSP_LCD_Clear>
				BSP_LCD_DisplayStringAt(0, 240 - 65, (uint8_t *)"Fleep", CENTER_MODE);
 8001e66:	2301      	movs	r3, #1
 8001e68:	4a6d      	ldr	r2, [pc, #436]	; (8002020 <main+0x388>)
 8001e6a:	21af      	movs	r1, #175	; 0xaf
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f008 fccd 	bl	800a80c <BSP_LCD_DisplayStringAt>
			}
			led_on = !led_on;
 8001e72:	4b69      	ldr	r3, [pc, #420]	; (8002018 <main+0x380>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	bf14      	ite	ne
 8001e7a:	2301      	movne	r3, #1
 8001e7c:	2300      	moveq	r3, #0
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	f083 0301 	eor.w	r3, r3, #1
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	4b62      	ldr	r3, [pc, #392]	; (8002018 <main+0x380>)
 8001e8e:	701a      	strb	r2, [r3, #0]
		}



  	if(HAL_GetTick()-last_sample >= TIMED_RANGING_PERIOD) {
 8001e90:	f009 fb2e 	bl	800b4f0 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	4b63      	ldr	r3, [pc, #396]	; (8002024 <main+0x38c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b31      	cmp	r3, #49	; 0x31
 8001e9e:	f240 8127 	bls.w	80020f0 <main+0x458>

  		// Get ADC value
  		// "10-bit ADC, divide the ADC output by 2 for the range in inches."
			HAL_ADC_Start(&hadc1);
 8001ea2:	4861      	ldr	r0, [pc, #388]	; (8002028 <main+0x390>)
 8001ea4:	f009 fec4 	bl	800bc30 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001eac:	485e      	ldr	r0, [pc, #376]	; (8002028 <main+0x390>)
 8001eae:	f009 ff79 	bl	800bda4 <HAL_ADC_PollForConversion>
			raw = HAL_ADC_GetValue(&hadc1);
 8001eb2:	485d      	ldr	r0, [pc, #372]	; (8002028 <main+0x390>)
 8001eb4:	f00a f84e 	bl	800bf54 <HAL_ADC_GetValue>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	4b5b      	ldr	r3, [pc, #364]	; (800202c <main+0x394>)
 8001ebe:	801a      	strh	r2, [r3, #0]
			raw_in = (float)raw/2.0;
 8001ec0:	4b5a      	ldr	r3, [pc, #360]	; (800202c <main+0x394>)
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	ee07 3a90 	vmov	s15, r3
 8001ec8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ecc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ed0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ed4:	4b56      	ldr	r3, [pc, #344]	; (8002030 <main+0x398>)
 8001ed6:	edc3 7a00 	vstr	s15, [r3]
			raw_mm = raw_in*2.54*10;
 8001eda:	4b55      	ldr	r3, [pc, #340]	; (8002030 <main+0x398>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fc6c 	bl	80007bc <__aeabi_f2d>
 8001ee4:	a340      	add	r3, pc, #256	; (adr r3, 8001fe8 <main+0x350>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	f7fe f9d9 	bl	80002a0 <__aeabi_dmul>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	4b4e      	ldr	r3, [pc, #312]	; (8002034 <main+0x39c>)
 8001efc:	f7fe f9d0 	bl	80002a0 <__aeabi_dmul>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	f7fe fcb0 	bl	800086c <__aeabi_d2f>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	4a4a      	ldr	r2, [pc, #296]	; (8002038 <main+0x3a0>)
 8001f10:	6013      	str	r3, [r2, #0]


			VL53L0X_GetRangingMeasurementData(pDev, &RangingMeasurementData);
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	4619      	mov	r1, r3
 8001f16:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f18:	f004 fae2 	bl	80064e0 <VL53L0X_GetRangingMeasurementData>
			range = RangingMeasurementData.RangeMilliMeter/10; // cm
 8001f1c:	89bb      	ldrh	r3, [r7, #12]
 8001f1e:	4a47      	ldr	r2, [pc, #284]	; (800203c <main+0x3a4>)
 8001f20:	fba2 2303 	umull	r2, r3, r2, r3
 8001f24:	08db      	lsrs	r3, r3, #3
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	4b45      	ldr	r3, [pc, #276]	; (8002040 <main+0x3a8>)
 8001f2a:	801a      	strh	r2, [r3, #0]
			range_mm = RangingMeasurementData.RangeMilliMeter; // mm
 8001f2c:	89ba      	ldrh	r2, [r7, #12]
 8001f2e:	4b45      	ldr	r3, [pc, #276]	; (8002044 <main+0x3ac>)
 8001f30:	801a      	strh	r2, [r3, #0]

			// ----- comms

			if(range_mm < 400) { // tof stop at 40 cm (self-imposed limit)
 8001f32:	4b44      	ldr	r3, [pc, #272]	; (8002044 <main+0x3ac>)
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001f3a:	d20d      	bcs.n	8001f58 <main+0x2c0>
				sprintf((char*)buf, "%d;", range_mm);
 8001f3c:	4b41      	ldr	r3, [pc, #260]	; (8002044 <main+0x3ac>)
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	4941      	ldr	r1, [pc, #260]	; (8002048 <main+0x3b0>)
 8001f44:	4841      	ldr	r0, [pc, #260]	; (800204c <main+0x3b4>)
 8001f46:	f017 fd0b 	bl	8019960 <siprintf>
				HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, GPIO_PIN_SET);
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f50:	483f      	ldr	r0, [pc, #252]	; (8002050 <main+0x3b8>)
 8001f52:	f00b facf 	bl	800d4f4 <HAL_GPIO_WritePin>
 8001f56:	e027      	b.n	8001fa8 <main+0x310>
			} else if(raw_mm < 1200) { // sonar stop at 1.2 m (self-imposed limit)
 8001f58:	4b37      	ldr	r3, [pc, #220]	; (8002038 <main+0x3a0>)
 8001f5a:	edd3 7a00 	vldr	s15, [r3]
 8001f5e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002054 <main+0x3bc>
 8001f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6a:	d511      	bpl.n	8001f90 <main+0x2f8>
				sprintf((char*)buf, "%d;", (int)raw_mm);
 8001f6c:	4b32      	ldr	r3, [pc, #200]	; (8002038 <main+0x3a0>)
 8001f6e:	edd3 7a00 	vldr	s15, [r3]
 8001f72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f76:	ee17 2a90 	vmov	r2, s15
 8001f7a:	4933      	ldr	r1, [pc, #204]	; (8002048 <main+0x3b0>)
 8001f7c:	4833      	ldr	r0, [pc, #204]	; (800204c <main+0x3b4>)
 8001f7e:	f017 fcef 	bl	8019960 <siprintf>
				HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, GPIO_PIN_SET);
 8001f82:	2201      	movs	r2, #1
 8001f84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f88:	4831      	ldr	r0, [pc, #196]	; (8002050 <main+0x3b8>)
 8001f8a:	f00b fab3 	bl	800d4f4 <HAL_GPIO_WritePin>
 8001f8e:	e00b      	b.n	8001fa8 <main+0x310>
			} else {
				sprintf((char*)buf, "%d;", -1);
 8001f90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f94:	492c      	ldr	r1, [pc, #176]	; (8002048 <main+0x3b0>)
 8001f96:	482d      	ldr	r0, [pc, #180]	; (800204c <main+0x3b4>)
 8001f98:	f017 fce2 	bl	8019960 <siprintf>
				HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, GPIO_PIN_RESET);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fa2:	482b      	ldr	r0, [pc, #172]	; (8002050 <main+0x3b8>)
 8001fa4:	f00b faa6 	bl	800d4f4 <HAL_GPIO_WritePin>
			}
			HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001fa8:	4828      	ldr	r0, [pc, #160]	; (800204c <main+0x3b4>)
 8001faa:	f7fe f921 	bl	80001f0 <strlen>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fb6:	4925      	ldr	r1, [pc, #148]	; (800204c <main+0x3b4>)
 8001fb8:	4827      	ldr	r0, [pc, #156]	; (8002058 <main+0x3c0>)
 8001fba:	f012 fa95 	bl	80144e8 <HAL_UART_Transmit>


			// ------ avging

			// check it's in range
			if(range_mm < 400) {
 8001fbe:	4b21      	ldr	r3, [pc, #132]	; (8002044 <main+0x3ac>)
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001fc6:	d24d      	bcs.n	8002064 <main+0x3cc>
				range_mm_sum += range_mm;
 8001fc8:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <main+0x3ac>)
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b23      	ldr	r3, [pc, #140]	; (800205c <main+0x3c4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	4a21      	ldr	r2, [pc, #132]	; (800205c <main+0x3c4>)
 8001fd6:	6013      	str	r3, [r2, #0]
				sum_count++;
 8001fd8:	4b21      	ldr	r3, [pc, #132]	; (8002060 <main+0x3c8>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <main+0x3c8>)
 8001fe2:	701a      	strb	r2, [r3, #0]
 8001fe4:	e044      	b.n	8002070 <main+0x3d8>
 8001fe6:	bf00      	nop
 8001fe8:	851eb852 	.word	0x851eb852
 8001fec:	400451eb 	.word	0x400451eb
 8001ff0:	20000534 	.word	0x20000534
 8001ff4:	0801ab00 	.word	0x0801ab00
 8001ff8:	20000f88 	.word	0x20000f88
 8001ffc:	20000a14 	.word	0x20000a14
 8002000:	0801ab0c 	.word	0x0801ab0c
 8002004:	20000000 	.word	0x20000000
 8002008:	0801ab14 	.word	0x0801ab14
 800200c:	0801aaa8 	.word	0x0801aaa8
 8002010:	20000ace 	.word	0x20000ace
 8002014:	20000ad0 	.word	0x20000ad0
 8002018:	20000acd 	.word	0x20000acd
 800201c:	0801ab2c 	.word	0x0801ab2c
 8002020:	0801ab34 	.word	0x0801ab34
 8002024:	20000ae4 	.word	0x20000ae4
 8002028:	2000075c 	.word	0x2000075c
 800202c:	20000cca 	.word	0x20000cca
 8002030:	20000ccc 	.word	0x20000ccc
 8002034:	40240000 	.word	0x40240000
 8002038:	20000cd0 	.word	0x20000cd0
 800203c:	cccccccd 	.word	0xcccccccd
 8002040:	20000ad4 	.word	0x20000ad4
 8002044:	20000ad6 	.word	0x20000ad6
 8002048:	0801ab3c 	.word	0x0801ab3c
 800204c:	20000cd4 	.word	0x20000cd4
 8002050:	48002000 	.word	0x48002000
 8002054:	44960000 	.word	0x44960000
 8002058:	20001058 	.word	0x20001058
 800205c:	20000ad8 	.word	0x20000ad8
 8002060:	20000adc 	.word	0x20000adc
			} else {
				// to keep up with the timing
				sum_skip++;
 8002064:	4b6e      	ldr	r3, [pc, #440]	; (8002220 <main+0x588>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	3301      	adds	r3, #1
 800206a:	b2da      	uxtb	r2, r3
 800206c:	4b6c      	ldr	r3, [pc, #432]	; (8002220 <main+0x588>)
 800206e:	701a      	strb	r2, [r3, #0]
			}

			if( (sum_count+sum_skip) >= 20) { // 20 because 1 sample / 50 ms = 20 samples / s (1000/50=20)
 8002070:	4b6c      	ldr	r3, [pc, #432]	; (8002224 <main+0x58c>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	4b6a      	ldr	r3, [pc, #424]	; (8002220 <main+0x588>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	4413      	add	r3, r2
 800207c:	2b13      	cmp	r3, #19
 800207e:	dd32      	ble.n	80020e6 <main+0x44e>
				range_mm_avg = (float)range_mm_sum / (float)sum_count;
 8002080:	4b69      	ldr	r3, [pc, #420]	; (8002228 <main+0x590>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	ee07 3a90 	vmov	s15, r3
 8002088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800208c:	4b65      	ldr	r3, [pc, #404]	; (8002224 <main+0x58c>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	ee07 3a90 	vmov	s15, r3
 8002094:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002098:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800209c:	4b63      	ldr	r3, [pc, #396]	; (800222c <main+0x594>)
 800209e:	edc3 7a00 	vstr	s15, [r3]

				sum_count = 0;
 80020a2:	4b60      	ldr	r3, [pc, #384]	; (8002224 <main+0x58c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
				sum_skip = 0;
 80020a8:	4b5d      	ldr	r3, [pc, #372]	; (8002220 <main+0x588>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]
				range_mm_sum = 0;
 80020ae:	4b5e      	ldr	r3, [pc, #376]	; (8002228 <main+0x590>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]

				if(sample_index < num_samples && sample_index < 120) {
 80020b4:	4b5e      	ldr	r3, [pc, #376]	; (8002230 <main+0x598>)
 80020b6:	881a      	ldrh	r2, [r3, #0]
 80020b8:	4b5e      	ldr	r3, [pc, #376]	; (8002234 <main+0x59c>)
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d212      	bcs.n	80020e6 <main+0x44e>
 80020c0:	4b5b      	ldr	r3, [pc, #364]	; (8002230 <main+0x598>)
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	2b77      	cmp	r3, #119	; 0x77
 80020c6:	d80e      	bhi.n	80020e6 <main+0x44e>
					all_samples[sample_index] = range_mm_avg;
 80020c8:	4b59      	ldr	r3, [pc, #356]	; (8002230 <main+0x598>)
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	4b57      	ldr	r3, [pc, #348]	; (800222c <main+0x594>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4959      	ldr	r1, [pc, #356]	; (8002238 <main+0x5a0>)
 80020d4:	0083      	lsls	r3, r0, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	601a      	str	r2, [r3, #0]
					sample_index++;
 80020da:	4b55      	ldr	r3, [pc, #340]	; (8002230 <main+0x598>)
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	3301      	adds	r3, #1
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	4b53      	ldr	r3, [pc, #332]	; (8002230 <main+0x598>)
 80020e4:	801a      	strh	r2, [r3, #0]
					// TODO: process all samples
				}

			}

			last_sample = HAL_GetTick();
 80020e6:	f009 fa03 	bl	800b4f0 <HAL_GetTick>
 80020ea:	4603      	mov	r3, r0
 80020ec:	4a53      	ldr	r2, [pc, #332]	; (800223c <main+0x5a4>)
 80020ee:	6013      	str	r3, [r2, #0]
  	// imagine the case where gettick has overflowed, but last_ts has not
		// eg 100-30000
		// abs could be used to prevent this from being a negative number, however
		// in this case, it is not needed, because two unsigned integers being
		// subtracted results in an unsigned integer
		if( HAL_GetTick()-last_ts >= 1000 && dimmed_screen == false) {
 80020f0:	f009 f9fe 	bl	800b4f0 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	4b52      	ldr	r3, [pc, #328]	; (8002240 <main+0x5a8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002100:	d311      	bcc.n	8002126 <main+0x48e>
 8002102:	4b50      	ldr	r3, [pc, #320]	; (8002244 <main+0x5ac>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	f083 0301 	eor.w	r3, r3, #1
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00a      	beq.n	8002126 <main+0x48e>
			BSP_LCD_ScreenDimmingConfig(100, 5, 1, 20);
 8002110:	2314      	movs	r3, #20
 8002112:	2201      	movs	r2, #1
 8002114:	2105      	movs	r1, #5
 8002116:	2064      	movs	r0, #100	; 0x64
 8002118:	f008 fda8 	bl	800ac6c <BSP_LCD_ScreenDimmingConfig>
			BSP_LCD_ScreenDimmingOn();
 800211c:	f008 fdd8 	bl	800acd0 <BSP_LCD_ScreenDimmingOn>
			dimmed_screen = true;
 8002120:	4b48      	ldr	r3, [pc, #288]	; (8002244 <main+0x5ac>)
 8002122:	2201      	movs	r2, #1
 8002124:	701a      	strb	r2, [r3, #0]
		}


		uint8_t circle_x = 100;
 8002126:	2364      	movs	r3, #100	; 0x64
 8002128:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint8_t circle_y = 100;
 800212c:	2364      	movs	r3, #100	; 0x64
 800212e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		drawCircle(circle_x, circle_y);
 8002132:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002136:	b29b      	uxth	r3, r3
 8002138:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800213c:	b292      	uxth	r2, r2
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fd7f 	bl	8001c44 <drawCircle>

		BSP_TS_GetState(&ts_result);
 8002146:	4840      	ldr	r0, [pc, #256]	; (8002248 <main+0x5b0>)
 8002148:	f009 f858 	bl	800b1fc <BSP_TS_GetState>

		uint8_t num_touches = ts_result.touchDetected;
 800214c:	4b3e      	ldr	r3, [pc, #248]	; (8002248 <main+0x5b0>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		for(int i=0; i<num_touches; i++) {
 8002154:	2300      	movs	r3, #0
 8002156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002158:	e05b      	b.n	8002212 <main+0x57a>
			Point touch;
			touch.X = ts_result.touchX[i];
 800215a:	4a3b      	ldr	r2, [pc, #236]	; (8002248 <main+0x5b0>)
 800215c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4413      	add	r3, r2
 8002162:	885b      	ldrh	r3, [r3, #2]
 8002164:	b21b      	sxth	r3, r3
 8002166:	803b      	strh	r3, [r7, #0]
			touch.Y = ts_result.touchY[i];
 8002168:	4a37      	ldr	r2, [pc, #220]	; (8002248 <main+0x5b0>)
 800216a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4413      	add	r3, r2
 8002170:	88db      	ldrh	r3, [r3, #6]
 8002172:	b21b      	sxth	r3, r3
 8002174:	807b      	strh	r3, [r7, #2]

			if(dimmed_screen) {
 8002176:	4b33      	ldr	r3, [pc, #204]	; (8002244 <main+0x5ac>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d004      	beq.n	8002188 <main+0x4f0>
				//BSP_LCD_ScreenDimmingConfig(5, 100, 1, 20);
				//BSP_LCD_ScreenDimmingOn();
				BSP_LCD_ScreenDimmingOff();
 800217e:	f008 fea1 	bl	800aec4 <BSP_LCD_ScreenDimmingOff>
				dimmed_screen = false;
 8002182:	4b30      	ldr	r3, [pc, #192]	; (8002244 <main+0x5ac>)
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
			}

			last_ts = HAL_GetTick();
 8002188:	f009 f9b2 	bl	800b4f0 <HAL_GetTick>
 800218c:	4603      	mov	r3, r0
 800218e:	4a2c      	ldr	r2, [pc, #176]	; (8002240 <main+0x5a8>)
 8002190:	6013      	str	r3, [r2, #0]

			if(touch.X < circle_x+70 && touch.X > circle_x-70) {
 8002192:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002196:	3345      	adds	r3, #69	; 0x45
 8002198:	f9b7 2000 	ldrsh.w	r2, [r7]
 800219c:	4293      	cmp	r3, r2
 800219e:	db28      	blt.n	80021f2 <main+0x55a>
 80021a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021a4:	3b45      	subs	r3, #69	; 0x45
 80021a6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80021aa:	4293      	cmp	r3, r2
 80021ac:	dc21      	bgt.n	80021f2 <main+0x55a>
				if(touch.Y < circle_y+70 && touch.Y > circle_y-70) {
 80021ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021b2:	3345      	adds	r3, #69	; 0x45
 80021b4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80021b8:	4293      	cmp	r3, r2
 80021ba:	db1a      	blt.n	80021f2 <main+0x55a>
 80021bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021c0:	3b45      	subs	r3, #69	; 0x45
 80021c2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80021c6:	4293      	cmp	r3, r2
 80021c8:	dc13      	bgt.n	80021f2 <main+0x55a>
					circle_selected = !circle_selected;
 80021ca:	4b20      	ldr	r3, [pc, #128]	; (800224c <main+0x5b4>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	bf14      	ite	ne
 80021d2:	2301      	movne	r3, #1
 80021d4:	2300      	moveq	r3, #0
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	f083 0301 	eor.w	r3, r3, #1
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	4b19      	ldr	r3, [pc, #100]	; (800224c <main+0x5b4>)
 80021e6:	701a      	strb	r2, [r3, #0]
					BSP_LCD_Clear(LCD_COLOR_WHITE);
 80021e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80021ec:	f008 faae 	bl	800a74c <BSP_LCD_Clear>
 80021f0:	e616      	b.n	8001e20 <main+0x188>
					break;
				}
			}

			BSP_LCD_SetTextColor( LCD_COLOR_BLUE );
 80021f2:	201f      	movs	r0, #31
 80021f4:	f008 fa8a 	bl	800a70c <BSP_LCD_SetTextColor>
			BSP_LCD_FillCircle(touch.X, touch.Y, 10);
 80021f8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002202:	b291      	uxth	r1, r2
 8002204:	220a      	movs	r2, #10
 8002206:	4618      	mov	r0, r3
 8002208:	f008 fc9e 	bl	800ab48 <BSP_LCD_FillCircle>
		for(int i=0; i<num_touches; i++) {
 800220c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800220e:	3301      	adds	r3, #1
 8002210:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002212:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002216:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002218:	429a      	cmp	r2, r3
 800221a:	db9e      	blt.n	800215a <main+0x4c2>
  {
 800221c:	e600      	b.n	8001e20 <main+0x188>
 800221e:	bf00      	nop
 8002220:	20000add 	.word	0x20000add
 8002224:	20000adc 	.word	0x20000adc
 8002228:	20000ad8 	.word	0x20000ad8
 800222c:	20000ae0 	.word	0x20000ae0
 8002230:	20000cc8 	.word	0x20000cc8
 8002234:	20000190 	.word	0x20000190
 8002238:	20000ae8 	.word	0x20000ae8
 800223c:	20000ae4 	.word	0x20000ae4
 8002240:	20000ac8 	.word	0x20000ac8
 8002244:	20000acc 	.word	0x20000acc
 8002248:	20000abc 	.word	0x20000abc
 800224c:	20000ac6 	.word	0x20000ac6

08002250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b096      	sub	sp, #88	; 0x58
 8002254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002256:	f107 0314 	add.w	r3, r7, #20
 800225a:	2244      	movs	r2, #68	; 0x44
 800225c:	2100      	movs	r1, #0
 800225e:	4618      	mov	r0, r3
 8002260:	f017 f9f8 	bl	8019654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002264:	463b      	mov	r3, r7
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	60da      	str	r2, [r3, #12]
 8002270:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002272:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002276:	f00d fd21 	bl	800fcbc <HAL_PWREx_ControlVoltageScaling>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002280:	f000 f8ac 	bl	80023dc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002284:	f00d fcc8 	bl	800fc18 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002288:	4b21      	ldr	r3, [pc, #132]	; (8002310 <SystemClock_Config+0xc0>)
 800228a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228e:	4a20      	ldr	r2, [pc, #128]	; (8002310 <SystemClock_Config+0xc0>)
 8002290:	f023 0318 	bic.w	r3, r3, #24
 8002294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002298:	2314      	movs	r3, #20
 800229a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800229c:	2301      	movs	r3, #1
 800229e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80022a0:	2301      	movs	r3, #1
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80022a8:	2360      	movs	r3, #96	; 0x60
 80022aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022ac:	2302      	movs	r3, #2
 80022ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80022b0:	2301      	movs	r3, #1
 80022b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80022b4:	2301      	movs	r3, #1
 80022b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 80022b8:	2318      	movs	r3, #24
 80022ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022bc:	2302      	movs	r3, #2
 80022be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80022c0:	2302      	movs	r3, #2
 80022c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80022c4:	2302      	movs	r3, #2
 80022c6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	4618      	mov	r0, r3
 80022ce:	f00d fe75 	bl	800ffbc <HAL_RCC_OscConfig>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80022d8:	f000 f880 	bl	80023dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022dc:	230f      	movs	r3, #15
 80022de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022e0:	2303      	movs	r3, #3
 80022e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022ec:	2300      	movs	r3, #0
 80022ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022f0:	463b      	mov	r3, r7
 80022f2:	2102      	movs	r1, #2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f00e fa7b 	bl	80107f0 <HAL_RCC_ClockConfig>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002300:	f000 f86c 	bl	80023dc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002304:	f00f fd4c 	bl	8011da0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002308:	bf00      	nop
 800230a:	3758      	adds	r7, #88	; 0x58
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40021000 	.word	0x40021000

08002314 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b0a4      	sub	sp, #144	; 0x90
 8002318:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	228c      	movs	r2, #140	; 0x8c
 800231e:	2100      	movs	r1, #0
 8002320:	4618      	mov	r0, r3
 8002322:	f017 f997 	bl	8019654 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB
 8002326:	4b14      	ldr	r3, [pc, #80]	; (8002378 <PeriphCommonClock_Config+0x64>)
 8002328:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800232a:	2300      	movs	r3, #0
 800232c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800232e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002332:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002336:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800233a:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 800233c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002340:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002342:	2301      	movs	r3, #1
 8002344:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002346:	2301      	movs	r3, #1
 8002348:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800234a:	2318      	movs	r3, #24
 800234c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800234e:	2302      	movs	r3, #2
 8002350:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002352:	2302      	movs	r3, #2
 8002354:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002356:	2302      	movs	r3, #2
 8002358:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <PeriphCommonClock_Config+0x68>)
 800235c:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800235e:	1d3b      	adds	r3, r7, #4
 8002360:	4618      	mov	r0, r3
 8002362:	f00e fc69 	bl	8010c38 <HAL_RCCEx_PeriphCLKConfig>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 800236c:	f000 f836 	bl	80023dc <Error_Handler>
  }
}
 8002370:	bf00      	nop
 8002372:	3790      	adds	r7, #144	; 0x90
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	00086800 	.word	0x00086800
 800237c:	01110000 	.word	0x01110000

08002380 <awakeFromSleep>:

	/* ... Low-power SLEEP mode ... */

}

void awakeFromSleep(void) {
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
	BSP_LED_On(LED1);
 8002384:	2000      	movs	r0, #0
 8002386:	f007 fafb 	bl	8009980 <BSP_LED_On>

	/* System is Low Power Run mode when exiting Low Power Sleep mode,
		 disable low power run mode and reset the clock to initialization configuration */
	HAL_PWREx_DisableLowPowerRunMode();
 800238a:	f00d fd1d 	bl	800fdc8 <HAL_PWREx_DisableLowPowerRunMode>

	/* Configure the system clock for the RUN mode */
	SystemClock_Config();
 800238e:	f7ff ff5f 	bl	8002250 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	// should this go here too? added it
	PeriphCommonClock_Config();
 8002392:	f7ff ffbf 	bl	8002314 <PeriphCommonClock_Config>

	/* Re-init LED1 to toggle during Run mode */
	/*BSP_LED_Init(LED1);*/

	/* Resume Tick interrupt if disabled prior to Low Power Sleep mode entry */
	HAL_ResumeTick();
 8002396:	f009 f8eb 	bl	800b570 <HAL_ResumeTick>
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == JOY_DOWN_Pin) {
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b0:	d108      	bne.n	80023c4 <HAL_GPIO_EXTI_Callback+0x24>
//		HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2_HIGH); // JOY_SEL on SYS_WKUP2
//		prepareForSleep();
//		enterSleep();

		// simpler version
		gone_sleep = true;
 80023b2:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <HAL_GPIO_EXTI_Callback+0x38>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	701a      	strb	r2, [r3, #0]
		HAL_SuspendTick();
 80023b8:	f009 f8ca 	bl	800b550 <HAL_SuspendTick>
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE); // left button configured as event
 80023bc:	2102      	movs	r1, #2
 80023be:	2000      	movs	r0, #0
 80023c0:	f00d fc3a 	bl	800fc38 <HAL_PWR_EnterSLEEPMode>
	}

	// LEFT wakes it up as an event

	if(GPIO_Pin == JOY_RIGHT_Pin) {
 80023c4:	88fb      	ldrh	r3, [r7, #6]
 80023c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023ca:	d101      	bne.n	80023d0 <HAL_GPIO_EXTI_Callback+0x30>
//		awakeFromSleep();

		// simpler version
		HAL_ResumeTick();
 80023cc:	f009 f8d0 	bl	800b570 <HAL_ResumeTick>
	}

}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000ace 	.word	0x20000ace

080023dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023e0:	b672      	cpsid	i
}
 80023e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023e4:	e7fe      	b.n	80023e4 <Error_Handler+0x8>
	...

080023e8 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <MX_QUADSPI_Init+0x50>)
 80023ee:	4a13      	ldr	r2, [pc, #76]	; (800243c <MX_QUADSPI_Init+0x54>)
 80023f0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80023f2:	4b11      	ldr	r3, [pc, #68]	; (8002438 <MX_QUADSPI_Init+0x50>)
 80023f4:	2202      	movs	r2, #2
 80023f6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80023f8:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <MX_QUADSPI_Init+0x50>)
 80023fa:	2204      	movs	r2, #4
 80023fc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <MX_QUADSPI_Init+0x50>)
 8002400:	2210      	movs	r2, #16
 8002402:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <MX_QUADSPI_Init+0x50>)
 8002406:	2217      	movs	r2, #23
 8002408:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <MX_QUADSPI_Init+0x50>)
 800240c:	2200      	movs	r2, #0
 800240e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <MX_QUADSPI_Init+0x50>)
 8002412:	2200      	movs	r2, #0
 8002414:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <MX_QUADSPI_Init+0x50>)
 8002418:	2200      	movs	r2, #0
 800241a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <MX_QUADSPI_Init+0x50>)
 800241e:	2200      	movs	r2, #0
 8002420:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002422:	4805      	ldr	r0, [pc, #20]	; (8002438 <MX_QUADSPI_Init+0x50>)
 8002424:	f00d fd08 	bl	800fe38 <HAL_QSPI_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800242e:	f7ff ffd5 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000ce0 	.word	0x20000ce0
 800243c:	a0001000 	.word	0xa0001000

08002440 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a26      	ldr	r2, [pc, #152]	; (80024f8 <HAL_QSPI_MspInit+0xb8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d145      	bne.n	80024ee <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002462:	4b26      	ldr	r3, [pc, #152]	; (80024fc <HAL_QSPI_MspInit+0xbc>)
 8002464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002466:	4a25      	ldr	r2, [pc, #148]	; (80024fc <HAL_QSPI_MspInit+0xbc>)
 8002468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246c:	6513      	str	r3, [r2, #80]	; 0x50
 800246e:	4b23      	ldr	r3, [pc, #140]	; (80024fc <HAL_QSPI_MspInit+0xbc>)
 8002470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800247a:	4b20      	ldr	r3, [pc, #128]	; (80024fc <HAL_QSPI_MspInit+0xbc>)
 800247c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247e:	4a1f      	ldr	r2, [pc, #124]	; (80024fc <HAL_QSPI_MspInit+0xbc>)
 8002480:	f043 0302 	orr.w	r3, r3, #2
 8002484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002486:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <HAL_QSPI_MspInit+0xbc>)
 8002488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002492:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <HAL_QSPI_MspInit+0xbc>)
 8002494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002496:	4a19      	ldr	r2, [pc, #100]	; (80024fc <HAL_QSPI_MspInit+0xbc>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800249e:	4b17      	ldr	r3, [pc, #92]	; (80024fc <HAL_QSPI_MspInit+0xbc>)
 80024a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 80024aa:	f640 0303 	movw	r3, #2051	; 0x803
 80024ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b0:	2302      	movs	r3, #2
 80024b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b8:	2303      	movs	r3, #3
 80024ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80024bc:	230a      	movs	r3, #10
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	4619      	mov	r1, r3
 80024c6:	480e      	ldr	r0, [pc, #56]	; (8002500 <HAL_QSPI_MspInit+0xc0>)
 80024c8:	f00a fd90 	bl	800cfec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 80024cc:	23c8      	movs	r3, #200	; 0xc8
 80024ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d0:	2302      	movs	r3, #2
 80024d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d8:	2303      	movs	r3, #3
 80024da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80024dc:	230a      	movs	r3, #10
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	4619      	mov	r1, r3
 80024e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ea:	f00a fd7f 	bl	800cfec <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80024ee:	bf00      	nop
 80024f0:	3728      	adds	r7, #40	; 0x28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	a0001000 	.word	0xa0001000
 80024fc:	40021000 	.word	0x40021000
 8002500:	48000400 	.word	0x48000400

08002504 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8002508:	4b4d      	ldr	r3, [pc, #308]	; (8002640 <MX_SAI1_Init+0x13c>)
 800250a:	4a4e      	ldr	r2, [pc, #312]	; (8002644 <MX_SAI1_Init+0x140>)
 800250c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800250e:	4b4c      	ldr	r3, [pc, #304]	; (8002640 <MX_SAI1_Init+0x13c>)
 8002510:	2200      	movs	r2, #0
 8002512:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002514:	4b4a      	ldr	r3, [pc, #296]	; (8002640 <MX_SAI1_Init+0x13c>)
 8002516:	2200      	movs	r2, #0
 8002518:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800251a:	4b49      	ldr	r3, [pc, #292]	; (8002640 <MX_SAI1_Init+0x13c>)
 800251c:	2240      	movs	r2, #64	; 0x40
 800251e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002520:	4b47      	ldr	r3, [pc, #284]	; (8002640 <MX_SAI1_Init+0x13c>)
 8002522:	2200      	movs	r2, #0
 8002524:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002526:	4b46      	ldr	r3, [pc, #280]	; (8002640 <MX_SAI1_Init+0x13c>)
 8002528:	2200      	movs	r2, #0
 800252a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800252c:	4b44      	ldr	r3, [pc, #272]	; (8002640 <MX_SAI1_Init+0x13c>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002532:	4b43      	ldr	r3, [pc, #268]	; (8002640 <MX_SAI1_Init+0x13c>)
 8002534:	2200      	movs	r2, #0
 8002536:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002538:	4b41      	ldr	r3, [pc, #260]	; (8002640 <MX_SAI1_Init+0x13c>)
 800253a:	2200      	movs	r2, #0
 800253c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800253e:	4b40      	ldr	r3, [pc, #256]	; (8002640 <MX_SAI1_Init+0x13c>)
 8002540:	2200      	movs	r2, #0
 8002542:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002544:	4b3e      	ldr	r3, [pc, #248]	; (8002640 <MX_SAI1_Init+0x13c>)
 8002546:	4a40      	ldr	r2, [pc, #256]	; (8002648 <MX_SAI1_Init+0x144>)
 8002548:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800254a:	4b3d      	ldr	r3, [pc, #244]	; (8002640 <MX_SAI1_Init+0x13c>)
 800254c:	2200      	movs	r2, #0
 800254e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002550:	4b3b      	ldr	r3, [pc, #236]	; (8002640 <MX_SAI1_Init+0x13c>)
 8002552:	2200      	movs	r2, #0
 8002554:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002556:	4b3a      	ldr	r3, [pc, #232]	; (8002640 <MX_SAI1_Init+0x13c>)
 8002558:	2200      	movs	r2, #0
 800255a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800255c:	4b38      	ldr	r3, [pc, #224]	; (8002640 <MX_SAI1_Init+0x13c>)
 800255e:	2200      	movs	r2, #0
 8002560:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8002562:	4b37      	ldr	r3, [pc, #220]	; (8002640 <MX_SAI1_Init+0x13c>)
 8002564:	2208      	movs	r2, #8
 8002566:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8002568:	4b35      	ldr	r3, [pc, #212]	; (8002640 <MX_SAI1_Init+0x13c>)
 800256a:	2201      	movs	r2, #1
 800256c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800256e:	4b34      	ldr	r3, [pc, #208]	; (8002640 <MX_SAI1_Init+0x13c>)
 8002570:	2200      	movs	r2, #0
 8002572:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002574:	4b32      	ldr	r3, [pc, #200]	; (8002640 <MX_SAI1_Init+0x13c>)
 8002576:	2200      	movs	r2, #0
 8002578:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800257a:	4b31      	ldr	r3, [pc, #196]	; (8002640 <MX_SAI1_Init+0x13c>)
 800257c:	2200      	movs	r2, #0
 800257e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8002580:	4b2f      	ldr	r3, [pc, #188]	; (8002640 <MX_SAI1_Init+0x13c>)
 8002582:	2200      	movs	r2, #0
 8002584:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002586:	4b2e      	ldr	r3, [pc, #184]	; (8002640 <MX_SAI1_Init+0x13c>)
 8002588:	2200      	movs	r2, #0
 800258a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800258c:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <MX_SAI1_Init+0x13c>)
 800258e:	2201      	movs	r2, #1
 8002590:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8002592:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <MX_SAI1_Init+0x13c>)
 8002594:	2200      	movs	r2, #0
 8002596:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8002598:	4829      	ldr	r0, [pc, #164]	; (8002640 <MX_SAI1_Init+0x13c>)
 800259a:	f00f fee1 	bl	8012360 <HAL_SAI_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 80025a4:	f7ff ff1a 	bl	80023dc <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 80025a8:	4b28      	ldr	r3, [pc, #160]	; (800264c <MX_SAI1_Init+0x148>)
 80025aa:	4a29      	ldr	r2, [pc, #164]	; (8002650 <MX_SAI1_Init+0x14c>)
 80025ac:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 80025ae:	4b27      	ldr	r3, [pc, #156]	; (800264c <MX_SAI1_Init+0x148>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80025b4:	4b25      	ldr	r3, [pc, #148]	; (800264c <MX_SAI1_Init+0x148>)
 80025b6:	2203      	movs	r2, #3
 80025b8:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 80025ba:	4b24      	ldr	r3, [pc, #144]	; (800264c <MX_SAI1_Init+0x148>)
 80025bc:	2240      	movs	r2, #64	; 0x40
 80025be:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80025c0:	4b22      	ldr	r3, [pc, #136]	; (800264c <MX_SAI1_Init+0x148>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80025c6:	4b21      	ldr	r3, [pc, #132]	; (800264c <MX_SAI1_Init+0x148>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80025cc:	4b1f      	ldr	r3, [pc, #124]	; (800264c <MX_SAI1_Init+0x148>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80025d2:	4b1e      	ldr	r3, [pc, #120]	; (800264c <MX_SAI1_Init+0x148>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80025d8:	4b1c      	ldr	r3, [pc, #112]	; (800264c <MX_SAI1_Init+0x148>)
 80025da:	2200      	movs	r2, #0
 80025dc:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80025de:	4b1b      	ldr	r3, [pc, #108]	; (800264c <MX_SAI1_Init+0x148>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80025e4:	4b19      	ldr	r3, [pc, #100]	; (800264c <MX_SAI1_Init+0x148>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80025ea:	4b18      	ldr	r3, [pc, #96]	; (800264c <MX_SAI1_Init+0x148>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80025f0:	4b16      	ldr	r3, [pc, #88]	; (800264c <MX_SAI1_Init+0x148>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <MX_SAI1_Init+0x148>)
 80025f8:	2208      	movs	r2, #8
 80025fa:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80025fc:	4b13      	ldr	r3, [pc, #76]	; (800264c <MX_SAI1_Init+0x148>)
 80025fe:	2201      	movs	r2, #1
 8002600:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002602:	4b12      	ldr	r3, [pc, #72]	; (800264c <MX_SAI1_Init+0x148>)
 8002604:	2200      	movs	r2, #0
 8002606:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002608:	4b10      	ldr	r3, [pc, #64]	; (800264c <MX_SAI1_Init+0x148>)
 800260a:	2200      	movs	r2, #0
 800260c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800260e:	4b0f      	ldr	r3, [pc, #60]	; (800264c <MX_SAI1_Init+0x148>)
 8002610:	2200      	movs	r2, #0
 8002612:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8002614:	4b0d      	ldr	r3, [pc, #52]	; (800264c <MX_SAI1_Init+0x148>)
 8002616:	2200      	movs	r2, #0
 8002618:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800261a:	4b0c      	ldr	r3, [pc, #48]	; (800264c <MX_SAI1_Init+0x148>)
 800261c:	2200      	movs	r2, #0
 800261e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8002620:	4b0a      	ldr	r3, [pc, #40]	; (800264c <MX_SAI1_Init+0x148>)
 8002622:	2201      	movs	r2, #1
 8002624:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8002626:	4b09      	ldr	r3, [pc, #36]	; (800264c <MX_SAI1_Init+0x148>)
 8002628:	2200      	movs	r2, #0
 800262a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 800262c:	4807      	ldr	r0, [pc, #28]	; (800264c <MX_SAI1_Init+0x148>)
 800262e:	f00f fe97 	bl	8012360 <HAL_SAI_Init>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8002638:	f7ff fed0 	bl	80023dc <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800263c:	bf00      	nop
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000d2c 	.word	0x20000d2c
 8002644:	40015404 	.word	0x40015404
 8002648:	0002ee00 	.word	0x0002ee00
 800264c:	20000db0 	.word	0x20000db0
 8002650:	40015424 	.word	0x40015424

08002654 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08a      	sub	sp, #40	; 0x28
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a33      	ldr	r2, [pc, #204]	; (8002730 <HAL_SAI_MspInit+0xdc>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d135      	bne.n	80026d2 <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8002666:	4b33      	ldr	r3, [pc, #204]	; (8002734 <HAL_SAI_MspInit+0xe0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10b      	bne.n	8002686 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800266e:	4b32      	ldr	r3, [pc, #200]	; (8002738 <HAL_SAI_MspInit+0xe4>)
 8002670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002672:	4a31      	ldr	r2, [pc, #196]	; (8002738 <HAL_SAI_MspInit+0xe4>)
 8002674:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002678:	6613      	str	r3, [r2, #96]	; 0x60
 800267a:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <HAL_SAI_MspInit+0xe4>)
 800267c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800267e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8002686:	4b2b      	ldr	r3, [pc, #172]	; (8002734 <HAL_SAI_MspInit+0xe0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	3301      	adds	r3, #1
 800268c:	4a29      	ldr	r2, [pc, #164]	; (8002734 <HAL_SAI_MspInit+0xe0>)
 800268e:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 8002690:	2354      	movs	r3, #84	; 0x54
 8002692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002694:	2302      	movs	r3, #2
 8002696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269c:	2300      	movs	r3, #0
 800269e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80026a0:	230d      	movs	r3, #13
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026a4:	f107 0314 	add.w	r3, r7, #20
 80026a8:	4619      	mov	r1, r3
 80026aa:	4824      	ldr	r0, [pc, #144]	; (800273c <HAL_SAI_MspInit+0xe8>)
 80026ac:	f00a fc9e 	bl	800cfec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b6:	2302      	movs	r3, #2
 80026b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026be:	2300      	movs	r3, #0
 80026c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80026c2:	230d      	movs	r3, #13
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c6:	f107 0314 	add.w	r3, r7, #20
 80026ca:	4619      	mov	r1, r3
 80026cc:	481c      	ldr	r0, [pc, #112]	; (8002740 <HAL_SAI_MspInit+0xec>)
 80026ce:	f00a fc8d 	bl	800cfec <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI1_Block_B)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a1b      	ldr	r2, [pc, #108]	; (8002744 <HAL_SAI_MspInit+0xf0>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d124      	bne.n	8002726 <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 80026dc:	4b15      	ldr	r3, [pc, #84]	; (8002734 <HAL_SAI_MspInit+0xe0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10b      	bne.n	80026fc <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80026e4:	4b14      	ldr	r3, [pc, #80]	; (8002738 <HAL_SAI_MspInit+0xe4>)
 80026e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e8:	4a13      	ldr	r2, [pc, #76]	; (8002738 <HAL_SAI_MspInit+0xe4>)
 80026ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026ee:	6613      	str	r3, [r2, #96]	; 0x60
 80026f0:	4b11      	ldr	r3, [pc, #68]	; (8002738 <HAL_SAI_MspInit+0xe4>)
 80026f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80026fc:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <HAL_SAI_MspInit+0xe0>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	3301      	adds	r3, #1
 8002702:	4a0c      	ldr	r2, [pc, #48]	; (8002734 <HAL_SAI_MspInit+0xe0>)
 8002704:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 8002706:	2308      	movs	r3, #8
 8002708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	2302      	movs	r3, #2
 800270c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002712:	2300      	movs	r3, #0
 8002714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002716:	230d      	movs	r3, #13
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 800271a:	f107 0314 	add.w	r3, r7, #20
 800271e:	4619      	mov	r1, r3
 8002720:	4806      	ldr	r0, [pc, #24]	; (800273c <HAL_SAI_MspInit+0xe8>)
 8002722:	f00a fc63 	bl	800cfec <HAL_GPIO_Init>

    }
}
 8002726:	bf00      	nop
 8002728:	3728      	adds	r7, #40	; 0x28
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40015404 	.word	0x40015404
 8002734:	20000e34 	.word	0x20000e34
 8002738:	40021000 	.word	0x40021000
 800273c:	48001000 	.word	0x48001000
 8002740:	48000400 	.word	0x48000400
 8002744:	40015424 	.word	0x40015424

08002748 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800274c:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <MX_SDMMC1_SD_Init+0x58>)
 800274e:	4a15      	ldr	r2, [pc, #84]	; (80027a4 <MX_SDMMC1_SD_Init+0x5c>)
 8002750:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002752:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <MX_SDMMC1_SD_Init+0x58>)
 8002754:	2200      	movs	r2, #0
 8002756:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002758:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <MX_SDMMC1_SD_Init+0x58>)
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800275e:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <MX_SDMMC1_SD_Init+0x58>)
 8002760:	2200      	movs	r2, #0
 8002762:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002764:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <MX_SDMMC1_SD_Init+0x58>)
 8002766:	2200      	movs	r2, #0
 8002768:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800276a:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <MX_SDMMC1_SD_Init+0x58>)
 800276c:	2200      	movs	r2, #0
 800276e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8002770:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <MX_SDMMC1_SD_Init+0x58>)
 8002772:	2200      	movs	r2, #0
 8002774:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8002776:	480a      	ldr	r0, [pc, #40]	; (80027a0 <MX_SDMMC1_SD_Init+0x58>)
 8002778:	f00f ff9e 	bl	80126b8 <HAL_SD_Init>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8002782:	f7ff fe2b 	bl	80023dc <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8002786:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800278a:	4805      	ldr	r0, [pc, #20]	; (80027a0 <MX_SDMMC1_SD_Init+0x58>)
 800278c:	f010 fa0e 	bl	8012bac <HAL_SD_ConfigWideBusOperation>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8002796:	f7ff fe21 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000e38 	.word	0x20000e38
 80027a4:	40012800 	.word	0x40012800

080027a8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08a      	sub	sp, #40	; 0x28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a25      	ldr	r2, [pc, #148]	; (800285c <HAL_SD_MspInit+0xb4>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d144      	bne.n	8002854 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80027ca:	4b25      	ldr	r3, [pc, #148]	; (8002860 <HAL_SD_MspInit+0xb8>)
 80027cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ce:	4a24      	ldr	r2, [pc, #144]	; (8002860 <HAL_SD_MspInit+0xb8>)
 80027d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027d4:	6613      	str	r3, [r2, #96]	; 0x60
 80027d6:	4b22      	ldr	r3, [pc, #136]	; (8002860 <HAL_SD_MspInit+0xb8>)
 80027d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027e2:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <HAL_SD_MspInit+0xb8>)
 80027e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e6:	4a1e      	ldr	r2, [pc, #120]	; (8002860 <HAL_SD_MspInit+0xb8>)
 80027e8:	f043 0308 	orr.w	r3, r3, #8
 80027ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ee:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <HAL_SD_MspInit+0xb8>)
 80027f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027fa:	4b19      	ldr	r3, [pc, #100]	; (8002860 <HAL_SD_MspInit+0xb8>)
 80027fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fe:	4a18      	ldr	r2, [pc, #96]	; (8002860 <HAL_SD_MspInit+0xb8>)
 8002800:	f043 0304 	orr.w	r3, r3, #4
 8002804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002806:	4b16      	ldr	r3, [pc, #88]	; (8002860 <HAL_SD_MspInit+0xb8>)
 8002808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8002812:	2304      	movs	r3, #4
 8002814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002816:	2302      	movs	r3, #2
 8002818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281e:	2303      	movs	r3, #3
 8002820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002822:	230c      	movs	r3, #12
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8002826:	f107 0314 	add.w	r3, r7, #20
 800282a:	4619      	mov	r1, r3
 800282c:	480d      	ldr	r0, [pc, #52]	; (8002864 <HAL_SD_MspInit+0xbc>)
 800282e:	f00a fbdd 	bl	800cfec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 8002832:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002836:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002838:	2302      	movs	r3, #2
 800283a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002840:	2303      	movs	r3, #3
 8002842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002844:	230c      	movs	r3, #12
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4619      	mov	r1, r3
 800284e:	4806      	ldr	r0, [pc, #24]	; (8002868 <HAL_SD_MspInit+0xc0>)
 8002850:	f00a fbcc 	bl	800cfec <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002854:	bf00      	nop
 8002856:	3728      	adds	r7, #40	; 0x28
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40012800 	.word	0x40012800
 8002860:	40021000 	.word	0x40021000
 8002864:	48000c00 	.word	0x48000c00
 8002868:	48000800 	.word	0x48000800

0800286c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002870:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <MX_SPI1_Init+0x74>)
 8002872:	4a1c      	ldr	r2, [pc, #112]	; (80028e4 <MX_SPI1_Init+0x78>)
 8002874:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002876:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <MX_SPI1_Init+0x74>)
 8002878:	f44f 7282 	mov.w	r2, #260	; 0x104
 800287c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800287e:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <MX_SPI1_Init+0x74>)
 8002880:	2200      	movs	r2, #0
 8002882:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002884:	4b16      	ldr	r3, [pc, #88]	; (80028e0 <MX_SPI1_Init+0x74>)
 8002886:	f44f 7240 	mov.w	r2, #768	; 0x300
 800288a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800288c:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <MX_SPI1_Init+0x74>)
 800288e:	2200      	movs	r2, #0
 8002890:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002892:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <MX_SPI1_Init+0x74>)
 8002894:	2200      	movs	r2, #0
 8002896:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <MX_SPI1_Init+0x74>)
 800289a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800289e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028a0:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <MX_SPI1_Init+0x74>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028a6:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <MX_SPI1_Init+0x74>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028ac:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <MX_SPI1_Init+0x74>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028b2:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <MX_SPI1_Init+0x74>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80028b8:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <MX_SPI1_Init+0x74>)
 80028ba:	2207      	movs	r2, #7
 80028bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028be:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <MX_SPI1_Init+0x74>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80028c4:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <MX_SPI1_Init+0x74>)
 80028c6:	2208      	movs	r2, #8
 80028c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028ca:	4805      	ldr	r0, [pc, #20]	; (80028e0 <MX_SPI1_Init+0x74>)
 80028cc:	f010 fce6 	bl	801329c <HAL_SPI_Init>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80028d6:	f7ff fd81 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000ebc 	.word	0x20000ebc
 80028e4:	40013000 	.word	0x40013000

080028e8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80028ec:	4b1b      	ldr	r3, [pc, #108]	; (800295c <MX_SPI2_Init+0x74>)
 80028ee:	4a1c      	ldr	r2, [pc, #112]	; (8002960 <MX_SPI2_Init+0x78>)
 80028f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028f2:	4b1a      	ldr	r3, [pc, #104]	; (800295c <MX_SPI2_Init+0x74>)
 80028f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028fa:	4b18      	ldr	r3, [pc, #96]	; (800295c <MX_SPI2_Init+0x74>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002900:	4b16      	ldr	r3, [pc, #88]	; (800295c <MX_SPI2_Init+0x74>)
 8002902:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002906:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002908:	4b14      	ldr	r3, [pc, #80]	; (800295c <MX_SPI2_Init+0x74>)
 800290a:	2200      	movs	r2, #0
 800290c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800290e:	4b13      	ldr	r3, [pc, #76]	; (800295c <MX_SPI2_Init+0x74>)
 8002910:	2200      	movs	r2, #0
 8002912:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002914:	4b11      	ldr	r3, [pc, #68]	; (800295c <MX_SPI2_Init+0x74>)
 8002916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800291a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800291c:	4b0f      	ldr	r3, [pc, #60]	; (800295c <MX_SPI2_Init+0x74>)
 800291e:	2200      	movs	r2, #0
 8002920:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002922:	4b0e      	ldr	r3, [pc, #56]	; (800295c <MX_SPI2_Init+0x74>)
 8002924:	2200      	movs	r2, #0
 8002926:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002928:	4b0c      	ldr	r3, [pc, #48]	; (800295c <MX_SPI2_Init+0x74>)
 800292a:	2200      	movs	r2, #0
 800292c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800292e:	4b0b      	ldr	r3, [pc, #44]	; (800295c <MX_SPI2_Init+0x74>)
 8002930:	2200      	movs	r2, #0
 8002932:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002934:	4b09      	ldr	r3, [pc, #36]	; (800295c <MX_SPI2_Init+0x74>)
 8002936:	2207      	movs	r2, #7
 8002938:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800293a:	4b08      	ldr	r3, [pc, #32]	; (800295c <MX_SPI2_Init+0x74>)
 800293c:	2200      	movs	r2, #0
 800293e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <MX_SPI2_Init+0x74>)
 8002942:	2208      	movs	r2, #8
 8002944:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002946:	4805      	ldr	r0, [pc, #20]	; (800295c <MX_SPI2_Init+0x74>)
 8002948:	f010 fca8 	bl	801329c <HAL_SPI_Init>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002952:	f7ff fd43 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000f20 	.word	0x20000f20
 8002960:	40003800 	.word	0x40003800

08002964 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08e      	sub	sp, #56	; 0x38
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a4b      	ldr	r2, [pc, #300]	; (8002ab0 <HAL_SPI_MspInit+0x14c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d146      	bne.n	8002a14 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002986:	4b4b      	ldr	r3, [pc, #300]	; (8002ab4 <HAL_SPI_MspInit+0x150>)
 8002988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800298a:	4a4a      	ldr	r2, [pc, #296]	; (8002ab4 <HAL_SPI_MspInit+0x150>)
 800298c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002990:	6613      	str	r3, [r2, #96]	; 0x60
 8002992:	4b48      	ldr	r3, [pc, #288]	; (8002ab4 <HAL_SPI_MspInit+0x150>)
 8002994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002996:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800299a:	623b      	str	r3, [r7, #32]
 800299c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800299e:	4b45      	ldr	r3, [pc, #276]	; (8002ab4 <HAL_SPI_MspInit+0x150>)
 80029a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a2:	4a44      	ldr	r2, [pc, #272]	; (8002ab4 <HAL_SPI_MspInit+0x150>)
 80029a4:	f043 0302 	orr.w	r3, r3, #2
 80029a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029aa:	4b42      	ldr	r3, [pc, #264]	; (8002ab4 <HAL_SPI_MspInit+0x150>)
 80029ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	61fb      	str	r3, [r7, #28]
 80029b4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b6:	4b3f      	ldr	r3, [pc, #252]	; (8002ab4 <HAL_SPI_MspInit+0x150>)
 80029b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ba:	4a3e      	ldr	r2, [pc, #248]	; (8002ab4 <HAL_SPI_MspInit+0x150>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029c2:	4b3c      	ldr	r3, [pc, #240]	; (8002ab4 <HAL_SPI_MspInit+0x150>)
 80029c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	61bb      	str	r3, [r7, #24]
 80029cc:	69bb      	ldr	r3, [r7, #24]
    PB4 (NJTRST)     ------> SPI1_MISO
    PA15 (JTDI)     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 80029ce:	2330      	movs	r3, #48	; 0x30
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029de:	2305      	movs	r3, #5
 80029e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029e6:	4619      	mov	r1, r3
 80029e8:	4833      	ldr	r0, [pc, #204]	; (8002ab8 <HAL_SPI_MspInit+0x154>)
 80029ea:	f00a faff 	bl	800cfec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 80029ee:	f248 0320 	movw	r3, #32800	; 0x8020
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2302      	movs	r3, #2
 80029f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fc:	2303      	movs	r3, #3
 80029fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a00:	2305      	movs	r3, #5
 8002a02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a08:	4619      	mov	r1, r3
 8002a0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a0e:	f00a faed 	bl	800cfec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002a12:	e049      	b.n	8002aa8 <HAL_SPI_MspInit+0x144>
  else if(spiHandle->Instance==SPI2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a28      	ldr	r2, [pc, #160]	; (8002abc <HAL_SPI_MspInit+0x158>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d144      	bne.n	8002aa8 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a1e:	4b25      	ldr	r3, [pc, #148]	; (8002ab4 <HAL_SPI_MspInit+0x150>)
 8002a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a22:	4a24      	ldr	r2, [pc, #144]	; (8002ab4 <HAL_SPI_MspInit+0x150>)
 8002a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a28:	6593      	str	r3, [r2, #88]	; 0x58
 8002a2a:	4b22      	ldr	r3, [pc, #136]	; (8002ab4 <HAL_SPI_MspInit+0x150>)
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a36:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <HAL_SPI_MspInit+0x150>)
 8002a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3a:	4a1e      	ldr	r2, [pc, #120]	; (8002ab4 <HAL_SPI_MspInit+0x150>)
 8002a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a42:	4b1c      	ldr	r3, [pc, #112]	; (8002ab4 <HAL_SPI_MspInit+0x150>)
 8002a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a4e:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <HAL_SPI_MspInit+0x150>)
 8002a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a52:	4a18      	ldr	r2, [pc, #96]	; (8002ab4 <HAL_SPI_MspInit+0x150>)
 8002a54:	f043 0302 	orr.w	r3, r3, #2
 8002a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a5a:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <HAL_SPI_MspInit+0x150>)
 8002a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 8002a66:	2306      	movs	r3, #6
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a72:	2303      	movs	r3, #3
 8002a74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a76:	2305      	movs	r3, #5
 8002a78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a7e:	4619      	mov	r1, r3
 8002a80:	480f      	ldr	r0, [pc, #60]	; (8002ac0 <HAL_SPI_MspInit+0x15c>)
 8002a82:	f00a fab3 	bl	800cfec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8002a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a94:	2303      	movs	r3, #3
 8002a96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a98:	2305      	movs	r3, #5
 8002a9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4805      	ldr	r0, [pc, #20]	; (8002ab8 <HAL_SPI_MspInit+0x154>)
 8002aa4:	f00a faa2 	bl	800cfec <HAL_GPIO_Init>
}
 8002aa8:	bf00      	nop
 8002aaa:	3738      	adds	r7, #56	; 0x38
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40013000 	.word	0x40013000
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	48000400 	.word	0x48000400
 8002abc:	40003800 	.word	0x40003800
 8002ac0:	48002000 	.word	0x48002000

08002ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aca:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <HAL_MspInit+0x44>)
 8002acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ace:	4a0e      	ldr	r2, [pc, #56]	; (8002b08 <HAL_MspInit+0x44>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6613      	str	r3, [r2, #96]	; 0x60
 8002ad6:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <HAL_MspInit+0x44>)
 8002ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	607b      	str	r3, [r7, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <HAL_MspInit+0x44>)
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae6:	4a08      	ldr	r2, [pc, #32]	; (8002b08 <HAL_MspInit+0x44>)
 8002ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aec:	6593      	str	r3, [r2, #88]	; 0x58
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_MspInit+0x44>)
 8002af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000

08002b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b10:	e7fe      	b.n	8002b10 <NMI_Handler+0x4>

08002b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b16:	e7fe      	b.n	8002b16 <HardFault_Handler+0x4>

08002b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b1c:	e7fe      	b.n	8002b1c <MemManage_Handler+0x4>

08002b1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b22:	e7fe      	b.n	8002b22 <BusFault_Handler+0x4>

08002b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b28:	e7fe      	b.n	8002b28 <UsageFault_Handler+0x4>

08002b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b58:	f008 fcb6 	bl	800b4c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b5c:	bf00      	nop
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MFX_IRQ_OUT_Pin);
 8002b64:	2020      	movs	r0, #32
 8002b66:	f00a fcdd 	bl	800d524 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_DOWN_Pin);
 8002b72:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002b76:	f00a fcd5 	bl	800d524 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_RIGHT_Pin);
 8002b7a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002b7e:	f00a fcd1 	bl	800d524 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CTP_INT_Pin);
 8002b82:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b86:	f00a fccd 	bl	800d524 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002b94:	4802      	ldr	r0, [pc, #8]	; (8002ba0 <OTG_FS_IRQHandler+0x10>)
 8002b96:	f00b ffd3 	bl	800eb40 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	200028a4 	.word	0x200028a4

08002ba4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	e00a      	b.n	8002bcc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002bb6:	f3af 8000 	nop.w
 8002bba:	4601      	mov	r1, r0
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	60ba      	str	r2, [r7, #8]
 8002bc2:	b2ca      	uxtb	r2, r1
 8002bc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	dbf0      	blt.n	8002bb6 <_read+0x12>
	}

return len;
 8002bd4:	687b      	ldr	r3, [r7, #4]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b086      	sub	sp, #24
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	e009      	b.n	8002c04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	60ba      	str	r2, [r7, #8]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	3301      	adds	r3, #1
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	dbf1      	blt.n	8002bf0 <_write+0x12>
	}
	return len;
 8002c0c:	687b      	ldr	r3, [r7, #4]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <_close>:

int _close(int file)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
	return -1;
 8002c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c3e:	605a      	str	r2, [r3, #4]
	return 0;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <_isatty>:

int _isatty(int file)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
	return 1;
 8002c56:	2301      	movs	r3, #1
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
	return 0;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c88:	4a14      	ldr	r2, [pc, #80]	; (8002cdc <_sbrk+0x5c>)
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <_sbrk+0x60>)
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c94:	4b13      	ldr	r3, [pc, #76]	; (8002ce4 <_sbrk+0x64>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d102      	bne.n	8002ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c9c:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <_sbrk+0x64>)
 8002c9e:	4a12      	ldr	r2, [pc, #72]	; (8002ce8 <_sbrk+0x68>)
 8002ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ca2:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <_sbrk+0x64>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d207      	bcs.n	8002cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cb0:	f016 fc98 	bl	80195e4 <__errno>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	220c      	movs	r2, #12
 8002cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cbe:	e009      	b.n	8002cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cc0:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <_sbrk+0x64>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cc6:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <_sbrk+0x64>)
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4413      	add	r3, r2
 8002cce:	4a05      	ldr	r2, [pc, #20]	; (8002ce4 <_sbrk+0x64>)
 8002cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	20050000 	.word	0x20050000
 8002ce0:	00000400 	.word	0x00000400
 8002ce4:	20000f84 	.word	0x20000f84
 8002ce8:	20002fe0 	.word	0x20002fe0

08002cec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <SystemInit+0x20>)
 8002cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf6:	4a05      	ldr	r2, [pc, #20]	; (8002d0c <SystemInit+0x20>)
 8002cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d16:	1d3b      	adds	r3, r7, #4
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002d20:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <MX_TIM6_Init+0x64>)
 8002d22:	4a15      	ldr	r2, [pc, #84]	; (8002d78 <MX_TIM6_Init+0x68>)
 8002d24:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100-1;
 8002d26:	4b13      	ldr	r3, [pc, #76]	; (8002d74 <MX_TIM6_Init+0x64>)
 8002d28:	2263      	movs	r2, #99	; 0x63
 8002d2a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d2c:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <MX_TIM6_Init+0x64>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19200-1;
 8002d32:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <MX_TIM6_Init+0x64>)
 8002d34:	f644 22ff 	movw	r2, #19199	; 0x4aff
 8002d38:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <MX_TIM6_Init+0x64>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002d40:	480c      	ldr	r0, [pc, #48]	; (8002d74 <MX_TIM6_Init+0x64>)
 8002d42:	f010 fb96 	bl	8013472 <HAL_TIM_Base_Init>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002d4c:	f7ff fb46 	bl	80023dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d50:	2300      	movs	r3, #0
 8002d52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002d58:	1d3b      	adds	r3, r7, #4
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4805      	ldr	r0, [pc, #20]	; (8002d74 <MX_TIM6_Init+0x64>)
 8002d5e:	f011 faed 	bl	801433c <HAL_TIMEx_MasterConfigSynchronization>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002d68:	f7ff fb38 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002d6c:	bf00      	nop
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20000f88 	.word	0x20000f88
 8002d78:	40001000 	.word	0x40001000

08002d7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a0a      	ldr	r2, [pc, #40]	; (8002db4 <HAL_TIM_Base_MspInit+0x38>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d10b      	bne.n	8002da6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d8e:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <HAL_TIM_Base_MspInit+0x3c>)
 8002d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d92:	4a09      	ldr	r2, [pc, #36]	; (8002db8 <HAL_TIM_Base_MspInit+0x3c>)
 8002d94:	f043 0310 	orr.w	r3, r3, #16
 8002d98:	6593      	str	r3, [r2, #88]	; 0x58
 8002d9a:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <HAL_TIM_Base_MspInit+0x3c>)
 8002d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002da6:	bf00      	nop
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40001000 	.word	0x40001000
 8002db8:	40021000 	.word	0x40021000

08002dbc <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002dc0:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <MX_LPUART1_UART_Init+0x50>)
 8002dc2:	4a13      	ldr	r2, [pc, #76]	; (8002e10 <MX_LPUART1_UART_Init+0x54>)
 8002dc4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8002dc6:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <MX_LPUART1_UART_Init+0x50>)
 8002dc8:	4a12      	ldr	r2, [pc, #72]	; (8002e14 <MX_LPUART1_UART_Init+0x58>)
 8002dca:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dcc:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <MX_LPUART1_UART_Init+0x50>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002dd2:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <MX_LPUART1_UART_Init+0x50>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <MX_LPUART1_UART_Init+0x50>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002dde:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <MX_LPUART1_UART_Init+0x50>)
 8002de0:	220c      	movs	r2, #12
 8002de2:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002de4:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <MX_LPUART1_UART_Init+0x50>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dea:	4b08      	ldr	r3, [pc, #32]	; (8002e0c <MX_LPUART1_UART_Init+0x50>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002df0:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <MX_LPUART1_UART_Init+0x50>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002df6:	4805      	ldr	r0, [pc, #20]	; (8002e0c <MX_LPUART1_UART_Init+0x50>)
 8002df8:	f011 fb28 	bl	801444c <HAL_UART_Init>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <MX_LPUART1_UART_Init+0x4a>
  {
    Error_Handler();
 8002e02:	f7ff faeb 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000fd4 	.word	0x20000fd4
 8002e10:	40008000 	.word	0x40008000
 8002e14:	00033324 	.word	0x00033324

08002e18 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e1c:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <MX_USART1_UART_Init+0x58>)
 8002e1e:	4a15      	ldr	r2, [pc, #84]	; (8002e74 <MX_USART1_UART_Init+0x5c>)
 8002e20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002e22:	4b13      	ldr	r3, [pc, #76]	; (8002e70 <MX_USART1_UART_Init+0x58>)
 8002e24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e2a:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <MX_USART1_UART_Init+0x58>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e30:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <MX_USART1_UART_Init+0x58>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e36:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <MX_USART1_UART_Init+0x58>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <MX_USART1_UART_Init+0x58>)
 8002e3e:	220c      	movs	r2, #12
 8002e40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e42:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <MX_USART1_UART_Init+0x58>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e48:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <MX_USART1_UART_Init+0x58>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e4e:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <MX_USART1_UART_Init+0x58>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e54:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <MX_USART1_UART_Init+0x58>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e5a:	4805      	ldr	r0, [pc, #20]	; (8002e70 <MX_USART1_UART_Init+0x58>)
 8002e5c:	f011 faf6 	bl	801444c <HAL_UART_Init>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002e66:	f7ff fab9 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20001058 	.word	0x20001058
 8002e74:	40013800 	.word	0x40013800

08002e78 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e7c:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <MX_USART2_UART_Init+0x58>)
 8002e7e:	4a15      	ldr	r2, [pc, #84]	; (8002ed4 <MX_USART2_UART_Init+0x5c>)
 8002e80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e82:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <MX_USART2_UART_Init+0x58>)
 8002e84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e8a:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <MX_USART2_UART_Init+0x58>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e90:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <MX_USART2_UART_Init+0x58>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e96:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <MX_USART2_UART_Init+0x58>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <MX_USART2_UART_Init+0x58>)
 8002e9e:	220c      	movs	r2, #12
 8002ea0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ea2:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <MX_USART2_UART_Init+0x58>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ea8:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <MX_USART2_UART_Init+0x58>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eae:	4b08      	ldr	r3, [pc, #32]	; (8002ed0 <MX_USART2_UART_Init+0x58>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002eb4:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <MX_USART2_UART_Init+0x58>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002eba:	4805      	ldr	r0, [pc, #20]	; (8002ed0 <MX_USART2_UART_Init+0x58>)
 8002ebc:	f011 fac6 	bl	801444c <HAL_UART_Init>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002ec6:	f7ff fa89 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	200010dc 	.word	0x200010dc
 8002ed4:	40004400 	.word	0x40004400

08002ed8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b0b2      	sub	sp, #200	; 0xc8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	60da      	str	r2, [r3, #12]
 8002eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ef0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ef4:	228c      	movs	r2, #140	; 0x8c
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f016 fbab 	bl	8019654 <memset>
  if(uartHandle->Instance==LPUART1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a86      	ldr	r2, [pc, #536]	; (800311c <HAL_UART_MspInit+0x244>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d13e      	bne.n	8002f86 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002f08:	2320      	movs	r3, #32
 8002f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f14:	4618      	mov	r0, r3
 8002f16:	f00d fe8f 	bl	8010c38 <HAL_RCCEx_PeriphCLKConfig>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f20:	f7ff fa5c 	bl	80023dc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002f24:	4b7e      	ldr	r3, [pc, #504]	; (8003120 <HAL_UART_MspInit+0x248>)
 8002f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f28:	4a7d      	ldr	r2, [pc, #500]	; (8003120 <HAL_UART_MspInit+0x248>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002f30:	4b7b      	ldr	r3, [pc, #492]	; (8003120 <HAL_UART_MspInit+0x248>)
 8002f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f3c:	4b78      	ldr	r3, [pc, #480]	; (8003120 <HAL_UART_MspInit+0x248>)
 8002f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f40:	4a77      	ldr	r2, [pc, #476]	; (8003120 <HAL_UART_MspInit+0x248>)
 8002f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f48:	4b75      	ldr	r3, [pc, #468]	; (8003120 <HAL_UART_MspInit+0x248>)
 8002f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f50:	623b      	str	r3, [r7, #32]
 8002f52:	6a3b      	ldr	r3, [r7, #32]
    HAL_PWREx_EnableVddIO2();
 8002f54:	f00c ff18 	bl	800fd88 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8002f58:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002f5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f60:	2302      	movs	r3, #2
 8002f62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002f72:	2308      	movs	r3, #8
 8002f74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f78:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4869      	ldr	r0, [pc, #420]	; (8003124 <HAL_UART_MspInit+0x24c>)
 8002f80:	f00a f834 	bl	800cfec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002f84:	e0c6      	b.n	8003114 <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a67      	ldr	r2, [pc, #412]	; (8003128 <HAL_UART_MspInit+0x250>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d15f      	bne.n	8003050 <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f90:	2301      	movs	r3, #1
 8002f92:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f94:	2300      	movs	r3, #0
 8002f96:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f00d fe4b 	bl	8010c38 <HAL_RCCEx_PeriphCLKConfig>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002fa8:	f7ff fa18 	bl	80023dc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fac:	4b5c      	ldr	r3, [pc, #368]	; (8003120 <HAL_UART_MspInit+0x248>)
 8002fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb0:	4a5b      	ldr	r2, [pc, #364]	; (8003120 <HAL_UART_MspInit+0x248>)
 8002fb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fb6:	6613      	str	r3, [r2, #96]	; 0x60
 8002fb8:	4b59      	ldr	r3, [pc, #356]	; (8003120 <HAL_UART_MspInit+0x248>)
 8002fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc4:	4b56      	ldr	r3, [pc, #344]	; (8003120 <HAL_UART_MspInit+0x248>)
 8002fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc8:	4a55      	ldr	r2, [pc, #340]	; (8003120 <HAL_UART_MspInit+0x248>)
 8002fca:	f043 0302 	orr.w	r3, r3, #2
 8002fce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fd0:	4b53      	ldr	r3, [pc, #332]	; (8003120 <HAL_UART_MspInit+0x248>)
 8002fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002fdc:	4b50      	ldr	r3, [pc, #320]	; (8003120 <HAL_UART_MspInit+0x248>)
 8002fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe0:	4a4f      	ldr	r2, [pc, #316]	; (8003120 <HAL_UART_MspInit+0x248>)
 8002fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fe6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fe8:	4b4d      	ldr	r3, [pc, #308]	; (8003120 <HAL_UART_MspInit+0x248>)
 8002fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8002ff4:	f00c fec8 	bl	800fd88 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 8002ff8:	2340      	movs	r3, #64	; 0x40
 8002ffa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffe:	2302      	movs	r3, #2
 8003000:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003004:	2300      	movs	r3, #0
 8003006:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800300a:	2303      	movs	r3, #3
 800300c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003010:	2307      	movs	r3, #7
 8003012:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8003016:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800301a:	4619      	mov	r1, r3
 800301c:	4843      	ldr	r0, [pc, #268]	; (800312c <HAL_UART_MspInit+0x254>)
 800301e:	f009 ffe5 	bl	800cfec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 8003022:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003026:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302a:	2302      	movs	r3, #2
 800302c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003030:	2300      	movs	r3, #0
 8003032:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003036:	2303      	movs	r3, #3
 8003038:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800303c:	2307      	movs	r3, #7
 800303e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003042:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003046:	4619      	mov	r1, r3
 8003048:	4836      	ldr	r0, [pc, #216]	; (8003124 <HAL_UART_MspInit+0x24c>)
 800304a:	f009 ffcf 	bl	800cfec <HAL_GPIO_Init>
}
 800304e:	e061      	b.n	8003114 <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART2)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a36      	ldr	r2, [pc, #216]	; (8003130 <HAL_UART_MspInit+0x258>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d15c      	bne.n	8003114 <HAL_UART_MspInit+0x23c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800305a:	2302      	movs	r3, #2
 800305c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800305e:	2300      	movs	r3, #0
 8003060:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003062:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003066:	4618      	mov	r0, r3
 8003068:	f00d fde6 	bl	8010c38 <HAL_RCCEx_PeriphCLKConfig>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8003072:	f7ff f9b3 	bl	80023dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003076:	4b2a      	ldr	r3, [pc, #168]	; (8003120 <HAL_UART_MspInit+0x248>)
 8003078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307a:	4a29      	ldr	r2, [pc, #164]	; (8003120 <HAL_UART_MspInit+0x248>)
 800307c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003080:	6593      	str	r3, [r2, #88]	; 0x58
 8003082:	4b27      	ldr	r3, [pc, #156]	; (8003120 <HAL_UART_MspInit+0x248>)
 8003084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800308e:	4b24      	ldr	r3, [pc, #144]	; (8003120 <HAL_UART_MspInit+0x248>)
 8003090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003092:	4a23      	ldr	r2, [pc, #140]	; (8003120 <HAL_UART_MspInit+0x248>)
 8003094:	f043 0308 	orr.w	r3, r3, #8
 8003098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800309a:	4b21      	ldr	r3, [pc, #132]	; (8003120 <HAL_UART_MspInit+0x248>)
 800309c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a6:	4b1e      	ldr	r3, [pc, #120]	; (8003120 <HAL_UART_MspInit+0x248>)
 80030a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030aa:	4a1d      	ldr	r2, [pc, #116]	; (8003120 <HAL_UART_MspInit+0x248>)
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030b2:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <HAL_UART_MspInit+0x248>)
 80030b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	60bb      	str	r3, [r7, #8]
 80030bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 80030be:	2340      	movs	r3, #64	; 0x40
 80030c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c4:	2302      	movs	r3, #2
 80030c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ca:	2300      	movs	r3, #0
 80030cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d0:	2303      	movs	r3, #3
 80030d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030d6:	2307      	movs	r3, #7
 80030d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 80030dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80030e0:	4619      	mov	r1, r3
 80030e2:	4814      	ldr	r0, [pc, #80]	; (8003134 <HAL_UART_MspInit+0x25c>)
 80030e4:	f009 ff82 	bl	800cfec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 80030e8:	2304      	movs	r3, #4
 80030ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ee:	2302      	movs	r3, #2
 80030f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030fa:	2303      	movs	r3, #3
 80030fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003100:	2307      	movs	r3, #7
 8003102:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8003106:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800310a:	4619      	mov	r1, r3
 800310c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003110:	f009 ff6c 	bl	800cfec <HAL_GPIO_Init>
}
 8003114:	bf00      	nop
 8003116:	37c8      	adds	r7, #200	; 0xc8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40008000 	.word	0x40008000
 8003120:	40021000 	.word	0x40021000
 8003124:	48001800 	.word	0x48001800
 8003128:	40013800 	.word	0x40013800
 800312c:	48000400 	.word	0x48000400
 8003130:	40004400 	.word	0x40004400
 8003134:	48000c00 	.word	0x48000c00

08003138 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8003138:	b580      	push	{r7, lr}
 800313a:	b088      	sub	sp, #32
 800313c:	af02      	add	r7, sp, #8
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	330a      	adds	r3, #10
 8003148:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8003156:	b299      	uxth	r1, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	b29a      	uxth	r2, r3
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	4613      	mov	r3, r2
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	f00a fab4 	bl	800d6d0 <HAL_I2C_Master_Transmit>
 8003168:	4603      	mov	r3, r0
 800316a:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800316c:	693b      	ldr	r3, [r7, #16]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8003176:	b580      	push	{r7, lr}
 8003178:	b088      	sub	sp, #32
 800317a:	af02      	add	r7, sp, #8
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	330a      	adds	r3, #10
 8003186:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	b2db      	uxtb	r3, r3
 800319a:	b299      	uxth	r1, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	b29a      	uxth	r2, r3
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	4613      	mov	r3, r2
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	f00a fb86 	bl	800d8b8 <HAL_I2C_Master_Receive>
 80031ac:	4603      	mov	r3, r0
 80031ae:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80031b0:	693b      	ldr	r3, [r7, #16]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	607a      	str	r2, [r7, #4]
 80031c6:	603b      	str	r3, [r7, #0]
 80031c8:	460b      	mov	r3, r1
 80031ca:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80031cc:	2300      	movs	r3, #0
 80031ce:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2b3f      	cmp	r3, #63	; 0x3f
 80031d4:	d902      	bls.n	80031dc <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 80031d6:	f06f 0303 	mvn.w	r3, #3
 80031da:	e016      	b.n	800320a <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 80031dc:	4a0d      	ldr	r2, [pc, #52]	; (8003214 <VL53L0X_WriteMulti+0x58>)
 80031de:	7afb      	ldrb	r3, [r7, #11]
 80031e0:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	480c      	ldr	r0, [pc, #48]	; (8003218 <VL53L0X_WriteMulti+0x5c>)
 80031e8:	f016 fa26 	bl	8019638 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	3301      	adds	r3, #1
 80031f0:	461a      	mov	r2, r3
 80031f2:	4908      	ldr	r1, [pc, #32]	; (8003214 <VL53L0X_WriteMulti+0x58>)
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f7ff ff9f 	bl	8003138 <_I2CWrite>
 80031fa:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003202:	23ec      	movs	r3, #236	; 0xec
 8003204:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8003206:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20001160 	.word	0x20001160
 8003218:	20001161 	.word	0x20001161

0800321c <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	607a      	str	r2, [r7, #4]
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	460b      	mov	r3, r1
 800322a:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800322c:	2300      	movs	r3, #0
 800322e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8003230:	f107 030b 	add.w	r3, r7, #11
 8003234:	2201      	movs	r2, #1
 8003236:	4619      	mov	r1, r3
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f7ff ff7d 	bl	8003138 <_I2CWrite>
 800323e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003246:	23ec      	movs	r3, #236	; 0xec
 8003248:	75fb      	strb	r3, [r7, #23]
        goto done;
 800324a:	e00c      	b.n	8003266 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f7ff ff90 	bl	8003176 <_I2CRead>
 8003256:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d002      	beq.n	8003264 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800325e:	23ec      	movs	r3, #236	; 0xec
 8003260:	75fb      	strb	r3, [r7, #23]
 8003262:	e000      	b.n	8003266 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8003264:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8003266:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	70fb      	strb	r3, [r7, #3]
 8003280:	4613      	mov	r3, r2
 8003282:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003284:	2300      	movs	r3, #0
 8003286:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8003288:	4a0b      	ldr	r2, [pc, #44]	; (80032b8 <VL53L0X_WrByte+0x44>)
 800328a:	78fb      	ldrb	r3, [r7, #3]
 800328c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800328e:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <VL53L0X_WrByte+0x44>)
 8003290:	78bb      	ldrb	r3, [r7, #2]
 8003292:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8003294:	2202      	movs	r2, #2
 8003296:	4908      	ldr	r1, [pc, #32]	; (80032b8 <VL53L0X_WrByte+0x44>)
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7ff ff4d 	bl	8003138 <_I2CWrite>
 800329e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80032a6:	23ec      	movs	r3, #236	; 0xec
 80032a8:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80032aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20001160 	.word	0x20001160

080032bc <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	70fb      	strb	r3, [r7, #3]
 80032c8:	4613      	mov	r3, r2
 80032ca:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80032cc:	2300      	movs	r3, #0
 80032ce:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80032d0:	4a0e      	ldr	r2, [pc, #56]	; (800330c <VL53L0X_WrWord+0x50>)
 80032d2:	78fb      	ldrb	r3, [r7, #3]
 80032d4:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 80032d6:	883b      	ldrh	r3, [r7, #0]
 80032d8:	0a1b      	lsrs	r3, r3, #8
 80032da:	b29b      	uxth	r3, r3
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	4b0b      	ldr	r3, [pc, #44]	; (800330c <VL53L0X_WrWord+0x50>)
 80032e0:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 80032e2:	883b      	ldrh	r3, [r7, #0]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	4b09      	ldr	r3, [pc, #36]	; (800330c <VL53L0X_WrWord+0x50>)
 80032e8:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80032ea:	2203      	movs	r2, #3
 80032ec:	4907      	ldr	r1, [pc, #28]	; (800330c <VL53L0X_WrWord+0x50>)
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7ff ff22 	bl	8003138 <_I2CWrite>
 80032f4:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80032fc:	23ec      	movs	r3, #236	; 0xec
 80032fe:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8003300:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	20001160 	.word	0x20001160

08003310 <VL53L0X_WrDWord>:

VL53L0X_Error VL53L0X_WrDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t data) {
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	460b      	mov	r3, r1
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800331e:	2300      	movs	r3, #0
 8003320:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    _I2CBuffer[0] = index;
 8003322:	4a13      	ldr	r2, [pc, #76]	; (8003370 <VL53L0X_WrDWord+0x60>)
 8003324:	7afb      	ldrb	r3, [r7, #11]
 8003326:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = (data >> 24) & 0xFF;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	0e1b      	lsrs	r3, r3, #24
 800332c:	b2da      	uxtb	r2, r3
 800332e:	4b10      	ldr	r3, [pc, #64]	; (8003370 <VL53L0X_WrDWord+0x60>)
 8003330:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = (data >> 16) & 0xFF;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	0c1b      	lsrs	r3, r3, #16
 8003336:	b2da      	uxtb	r2, r3
 8003338:	4b0d      	ldr	r3, [pc, #52]	; (8003370 <VL53L0X_WrDWord+0x60>)
 800333a:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = (data >> 8)  & 0xFF;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	b2da      	uxtb	r2, r3
 8003342:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <VL53L0X_WrDWord+0x60>)
 8003344:	70da      	strb	r2, [r3, #3]
    _I2CBuffer[4] = (data >> 0 ) & 0xFF;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	b2da      	uxtb	r2, r3
 800334a:	4b09      	ldr	r3, [pc, #36]	; (8003370 <VL53L0X_WrDWord+0x60>)
 800334c:	711a      	strb	r2, [r3, #4]
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 5);
 800334e:	2205      	movs	r2, #5
 8003350:	4907      	ldr	r1, [pc, #28]	; (8003370 <VL53L0X_WrDWord+0x60>)
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f7ff fef0 	bl	8003138 <_I2CWrite>
 8003358:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <VL53L0X_WrDWord+0x54>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003360:	23ec      	movs	r3, #236	; 0xec
 8003362:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8003364:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	20001160 	.word	0x20001160

08003374 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	4608      	mov	r0, r1
 800337e:	4611      	mov	r1, r2
 8003380:	461a      	mov	r2, r3
 8003382:	4603      	mov	r3, r0
 8003384:	70fb      	strb	r3, [r7, #3]
 8003386:	460b      	mov	r3, r1
 8003388:	70bb      	strb	r3, [r7, #2]
 800338a:	4613      	mov	r3, r2
 800338c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800338e:	2300      	movs	r3, #0
 8003390:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8003392:	f107 020e 	add.w	r2, r7, #14
 8003396:	78fb      	ldrb	r3, [r7, #3]
 8003398:	4619      	mov	r1, r3
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f81e 	bl	80033dc <VL53L0X_RdByte>
 80033a0:	4603      	mov	r3, r0
 80033a2:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 80033a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d110      	bne.n	80033ce <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 80033ac:	7bba      	ldrb	r2, [r7, #14]
 80033ae:	78bb      	ldrb	r3, [r7, #2]
 80033b0:	4013      	ands	r3, r2
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	787b      	ldrb	r3, [r7, #1]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 80033bc:	7bba      	ldrb	r2, [r7, #14]
 80033be:	78fb      	ldrb	r3, [r7, #3]
 80033c0:	4619      	mov	r1, r3
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff ff56 	bl	8003274 <VL53L0X_WrByte>
 80033c8:	4603      	mov	r3, r0
 80033ca:	73fb      	strb	r3, [r7, #15]
 80033cc:	e000      	b.n	80033d0 <VL53L0X_UpdateByte+0x5c>
        goto done;
 80033ce:	bf00      	nop
done:
    return Status;
 80033d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	460b      	mov	r3, r1
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80033ee:	f107 030b 	add.w	r3, r7, #11
 80033f2:	2201      	movs	r2, #1
 80033f4:	4619      	mov	r1, r3
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f7ff fe9e 	bl	8003138 <_I2CWrite>
 80033fc:	6138      	str	r0, [r7, #16]
    if( status_int ){
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003404:	23ec      	movs	r3, #236	; 0xec
 8003406:	75fb      	strb	r3, [r7, #23]
        goto done;
 8003408:	e00c      	b.n	8003424 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800340a:	2201      	movs	r2, #1
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f7ff feb1 	bl	8003176 <_I2CRead>
 8003414:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800341c:	23ec      	movs	r3, #236	; 0xec
 800341e:	75fb      	strb	r3, [r7, #23]
 8003420:	e000      	b.n	8003424 <VL53L0X_RdByte+0x48>
    }
done:
 8003422:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8003424:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	460b      	mov	r3, r1
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800343e:	2300      	movs	r3, #0
 8003440:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8003442:	f107 030b 	add.w	r3, r7, #11
 8003446:	2201      	movs	r2, #1
 8003448:	4619      	mov	r1, r3
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f7ff fe74 	bl	8003138 <_I2CWrite>
 8003450:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003458:	23ec      	movs	r3, #236	; 0xec
 800345a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800345c:	e017      	b.n	800348e <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800345e:	2202      	movs	r2, #2
 8003460:	490e      	ldr	r1, [pc, #56]	; (800349c <VL53L0X_RdWord+0x6c>)
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f7ff fe87 	bl	8003176 <_I2CRead>
 8003468:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d002      	beq.n	8003476 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003470:	23ec      	movs	r3, #236	; 0xec
 8003472:	75fb      	strb	r3, [r7, #23]
        goto done;
 8003474:	e00b      	b.n	800348e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8003476:	4b09      	ldr	r3, [pc, #36]	; (800349c <VL53L0X_RdWord+0x6c>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	b29b      	uxth	r3, r3
 800347c:	021b      	lsls	r3, r3, #8
 800347e:	b29a      	uxth	r2, r3
 8003480:	4b06      	ldr	r3, [pc, #24]	; (800349c <VL53L0X_RdWord+0x6c>)
 8003482:	785b      	ldrb	r3, [r3, #1]
 8003484:	b29b      	uxth	r3, r3
 8003486:	4413      	add	r3, r2
 8003488:	b29a      	uxth	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800348e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	20001160 	.word	0x20001160

080034a0 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	460b      	mov	r3, r1
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034ae:	2300      	movs	r3, #0
 80034b0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80034b2:	f107 030b 	add.w	r3, r7, #11
 80034b6:	2201      	movs	r2, #1
 80034b8:	4619      	mov	r1, r3
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f7ff fe3c 	bl	8003138 <_I2CWrite>
 80034c0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80034c8:	23ec      	movs	r3, #236	; 0xec
 80034ca:	75fb      	strb	r3, [r7, #23]
        goto done;
 80034cc:	e01b      	b.n	8003506 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 80034ce:	2204      	movs	r2, #4
 80034d0:	4910      	ldr	r1, [pc, #64]	; (8003514 <VL53L0X_RdDWord+0x74>)
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f7ff fe4f 	bl	8003176 <_I2CRead>
 80034d8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80034e0:	23ec      	movs	r3, #236	; 0xec
 80034e2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80034e4:	e00f      	b.n	8003506 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 80034e6:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <VL53L0X_RdDWord+0x74>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	061a      	lsls	r2, r3, #24
 80034ec:	4b09      	ldr	r3, [pc, #36]	; (8003514 <VL53L0X_RdDWord+0x74>)
 80034ee:	785b      	ldrb	r3, [r3, #1]
 80034f0:	041b      	lsls	r3, r3, #16
 80034f2:	441a      	add	r2, r3
 80034f4:	4b07      	ldr	r3, [pc, #28]	; (8003514 <VL53L0X_RdDWord+0x74>)
 80034f6:	789b      	ldrb	r3, [r3, #2]
 80034f8:	021b      	lsls	r3, r3, #8
 80034fa:	4413      	add	r3, r2
 80034fc:	4a05      	ldr	r2, [pc, #20]	; (8003514 <VL53L0X_RdDWord+0x74>)
 80034fe:	78d2      	ldrb	r2, [r2, #3]
 8003500:	441a      	add	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8003506:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20001160 	.word	0x20001160

08003518 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003520:	2300      	movs	r3, #0
 8003522:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8003524:	2002      	movs	r0, #2
 8003526:	f007 ffef 	bl	800b508 <HAL_Delay>
    return status;
 800352a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003538:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003570 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800353c:	f7ff fbd6 	bl	8002cec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003540:	480c      	ldr	r0, [pc, #48]	; (8003574 <LoopForever+0x6>)
  ldr r1, =_edata
 8003542:	490d      	ldr	r1, [pc, #52]	; (8003578 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003544:	4a0d      	ldr	r2, [pc, #52]	; (800357c <LoopForever+0xe>)
  movs r3, #0
 8003546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003548:	e002      	b.n	8003550 <LoopCopyDataInit>

0800354a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800354a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800354c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800354e:	3304      	adds	r3, #4

08003550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003554:	d3f9      	bcc.n	800354a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003556:	4a0a      	ldr	r2, [pc, #40]	; (8003580 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003558:	4c0a      	ldr	r4, [pc, #40]	; (8003584 <LoopForever+0x16>)
  movs r3, #0
 800355a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800355c:	e001      	b.n	8003562 <LoopFillZerobss>

0800355e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800355e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003560:	3204      	adds	r2, #4

08003562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003564:	d3fb      	bcc.n	800355e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003566:	f016 f843 	bl	80195f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800356a:	f7fe fb95 	bl	8001c98 <main>

0800356e <LoopForever>:

LoopForever:
    b LoopForever
 800356e:	e7fe      	b.n	800356e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003570:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003578:	20000740 	.word	0x20000740
  ldr r2, =_sidata
 800357c:	0801cba8 	.word	0x0801cba8
  ldr r2, =_sbss
 8003580:	20000740 	.word	0x20000740
  ldr r4, =_ebss
 8003584:	20002fe0 	.word	0x20002fe0

08003588 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003588:	e7fe      	b.n	8003588 <ADC1_2_IRQHandler>
	...

0800358c <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 8003596:	88fb      	ldrh	r3, [r7, #6]
 8003598:	4618      	mov	r0, r3
 800359a:	f000 f90d 	bl	80037b8 <ft6x06_GetInstance>
 800359e:	4603      	mov	r3, r0
 80035a0:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	2bff      	cmp	r3, #255	; 0xff
 80035a6:	d10e      	bne.n	80035c6 <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 80035a8:	2000      	movs	r0, #0
 80035aa:	f000 f905 	bl	80037b8 <ft6x06_GetInstance>
 80035ae:	4603      	mov	r3, r0
 80035b0:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 80035b2:	7bbb      	ldrb	r3, [r7, #14]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d806      	bhi.n	80035c6 <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 80035b8:	7bbb      	ldrb	r3, [r7, #14]
 80035ba:	88fa      	ldrh	r2, [r7, #6]
 80035bc:	b2d1      	uxtb	r1, r2
 80035be:	4a04      	ldr	r2, [pc, #16]	; (80035d0 <ft6x06_Init+0x44>)
 80035c0:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 80035c2:	f006 fee7 	bl	800a394 <TS_IO_Init>
    }
  }
}
 80035c6:	bf00      	nop
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	200011a0 	.word	0x200011a0

080035d4 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	4603      	mov	r3, r0
 80035f2:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 80035f4:	f006 fece 	bl	800a394 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 80035f8:	88fb      	ldrh	r3, [r7, #6]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	21a8      	movs	r1, #168	; 0xa8
 80035fe:	4618      	mov	r0, r3
 8003600:	f006 ff0e 	bl	800a420 <TS_IO_Read>
 8003604:	4603      	mov	r3, r0
 8003606:	b29b      	uxth	r3, r3
}
 8003608:	4618      	mov	r0, r3
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 800361a:	88fb      	ldrh	r3, [r7, #6]
 800361c:	4618      	mov	r0, r3
 800361e:	f000 f8bc 	bl	800379a <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8003622:	88fb      	ldrh	r3, [r7, #6]
 8003624:	4618      	mov	r0, r3
 8003626:	f000 f88d 	bl	8003744 <ft6x06_TS_DisableIT>
}
 800362a:	bf00      	nop
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8003642:	88fb      	ldrh	r3, [r7, #6]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2102      	movs	r1, #2
 8003648:	4618      	mov	r0, r3
 800364a:	f006 fee9 	bl	800a420 <TS_IO_Read>
 800364e:	4603      	mov	r3, r0
 8003650:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 8003652:	7bfb      	ldrb	r3, [r7, #15]
 8003654:	b2db      	uxtb	r3, r3
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	b2db      	uxtb	r3, r3
 800365c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	b2da      	uxtb	r2, r3
 800366e:	4b05      	ldr	r3, [pc, #20]	; (8003684 <ft6x06_TS_DetectTouch+0x50>)
 8003670:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 8003672:	4b04      	ldr	r3, [pc, #16]	; (8003684 <ft6x06_TS_DetectTouch+0x50>)
 8003674:	2200      	movs	r2, #0
 8003676:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	b2db      	uxtb	r3, r3
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	200011a4 	.word	0x200011a4

08003688 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 8003696:	2300      	movs	r3, #0
 8003698:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 800369a:	4b1f      	ldr	r3, [pc, #124]	; (8003718 <ft6x06_TS_GetXY+0x90>)
 800369c:	789a      	ldrb	r2, [r3, #2]
 800369e:	4b1e      	ldr	r3, [pc, #120]	; (8003718 <ft6x06_TS_GetXY+0x90>)
 80036a0:	785b      	ldrb	r3, [r3, #1]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d234      	bcs.n	8003710 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 80036a6:	4b1c      	ldr	r3, [pc, #112]	; (8003718 <ft6x06_TS_GetXY+0x90>)
 80036a8:	789b      	ldrb	r3, [r3, #2]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <ft6x06_TS_GetXY+0x2c>
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d003      	beq.n	80036ba <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 80036b2:	e005      	b.n	80036c0 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 80036b4:	2303      	movs	r3, #3
 80036b6:	75fb      	strb	r3, [r7, #23]
      break;
 80036b8:	e002      	b.n	80036c0 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 80036ba:	2309      	movs	r3, #9
 80036bc:	75fb      	strb	r3, [r7, #23]
      break;
 80036be:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 80036c0:	89fb      	ldrh	r3, [r7, #14]
 80036c2:	b2d8      	uxtb	r0, r3
 80036c4:	f107 0210 	add.w	r2, r7, #16
 80036c8:	7df9      	ldrb	r1, [r7, #23]
 80036ca:	2304      	movs	r3, #4
 80036cc:	f006 febe 	bl	800a44c <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 80036d0:	7c3b      	ldrb	r3, [r7, #16]
 80036d2:	021b      	lsls	r3, r3, #8
 80036d4:	b21b      	sxth	r3, r3
 80036d6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80036da:	b21a      	sxth	r2, r3
 80036dc:	7c7b      	ldrb	r3, [r7, #17]
 80036de:	b21b      	sxth	r3, r3
 80036e0:	4313      	orrs	r3, r2
 80036e2:	b21b      	sxth	r3, r3
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 80036ea:	7cbb      	ldrb	r3, [r7, #18]
 80036ec:	021b      	lsls	r3, r3, #8
 80036ee:	b21b      	sxth	r3, r3
 80036f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80036f4:	b21a      	sxth	r2, r3
 80036f6:	7cfb      	ldrb	r3, [r7, #19]
 80036f8:	b21b      	sxth	r3, r3
 80036fa:	4313      	orrs	r3, r2
 80036fc:	b21b      	sxth	r3, r3
 80036fe:	b29a      	uxth	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8003704:	4b04      	ldr	r3, [pc, #16]	; (8003718 <ft6x06_TS_GetXY+0x90>)
 8003706:	789b      	ldrb	r3, [r3, #2]
 8003708:	3301      	adds	r3, #1
 800370a:	b2da      	uxtb	r2, r3
 800370c:	4b02      	ldr	r3, [pc, #8]	; (8003718 <ft6x06_TS_GetXY+0x90>)
 800370e:	709a      	strb	r2, [r3, #2]
  }
}
 8003710:	bf00      	nop
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	200011a4 	.word	0x200011a4

0800371c <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	4603      	mov	r3, r0
 8003724:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8003726:	2300      	movs	r3, #0
 8003728:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 800372a:	2301      	movs	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 800372e:	88fb      	ldrh	r3, [r7, #6]
 8003730:	b2db      	uxtb	r3, r3
 8003732:	7bfa      	ldrb	r2, [r7, #15]
 8003734:	21a4      	movs	r1, #164	; 0xa4
 8003736:	4618      	mov	r0, r3
 8003738:	f006 fe58 	bl	800a3ec <TS_IO_Write>
}
 800373c:	bf00      	nop
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800374e:	2300      	movs	r3, #0
 8003750:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8003752:	2300      	movs	r3, #0
 8003754:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8003756:	88fb      	ldrh	r3, [r7, #6]
 8003758:	b2db      	uxtb	r3, r3
 800375a:	7bfa      	ldrb	r2, [r7, #15]
 800375c:	21a4      	movs	r1, #164	; 0xa4
 800375e:	4618      	mov	r0, r3
 8003760:	f006 fe44 	bl	800a3ec <TS_IO_Write>
}
 8003764:	bf00      	nop
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 800379a:	b480      	push	{r7}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	4603      	mov	r3, r0
 80037a2:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 80037a8:	68fb      	ldr	r3, [r7, #12]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
	...

080037b8 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80037c6:	2300      	movs	r3, #0
 80037c8:	73fb      	strb	r3, [r7, #15]
 80037ca:	e00b      	b.n	80037e4 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	4a0a      	ldr	r2, [pc, #40]	; (80037f8 <ft6x06_GetInstance+0x40>)
 80037d0:	5cd3      	ldrb	r3, [r2, r3]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	88fa      	ldrh	r2, [r7, #6]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d101      	bne.n	80037de <ft6x06_GetInstance+0x26>
    {
      return idx; 
 80037da:	7bfb      	ldrb	r3, [r7, #15]
 80037dc:	e006      	b.n	80037ec <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80037de:	7bfb      	ldrb	r3, [r7, #15]
 80037e0:	3301      	adds	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d9f0      	bls.n	80037cc <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80037ea:	23ff      	movs	r3, #255	; 0xff
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	200011a0 	.word	0x200011a0

080037fc <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8003806:	88fb      	ldrh	r3, [r7, #6]
 8003808:	4618      	mov	r0, r3
 800380a:	f000 ffd1 	bl	80047b0 <mfxstm32l152_GetInstance>
 800380e:	4603      	mov	r3, r0
 8003810:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	2bff      	cmp	r3, #255	; 0xff
 8003816:	d10e      	bne.n	8003836 <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 8003818:	2000      	movs	r0, #0
 800381a:	f000 ffc9 	bl	80047b0 <mfxstm32l152_GetInstance>
 800381e:	4603      	mov	r3, r0
 8003820:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 8003822:	7bbb      	ldrb	r3, [r7, #14]
 8003824:	2b02      	cmp	r3, #2
 8003826:	d806      	bhi.n	8003836 <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 8003828:	7bbb      	ldrb	r3, [r7, #14]
 800382a:	88fa      	ldrh	r2, [r7, #6]
 800382c:	b2d1      	uxtb	r1, r2
 800382e:	4a09      	ldr	r2, [pc, #36]	; (8003854 <mfxstm32l152_Init+0x58>)
 8003830:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 8003832:	f006 fb81 	bl	8009f38 <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 8003836:	88fb      	ldrh	r3, [r7, #6]
 8003838:	2102      	movs	r1, #2
 800383a:	4618      	mov	r0, r3
 800383c:	f000 f8db 	bl	80039f6 <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 8003840:	88fb      	ldrh	r3, [r7, #6]
 8003842:	2101      	movs	r1, #1
 8003844:	4618      	mov	r0, r3
 8003846:	f000 f8fc 	bl	8003a42 <mfxstm32l152_SetIrqOutPinType>
}
 800384a:	bf00      	nop
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	200011a8 	.word	0x200011a8

08003858 <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	4618      	mov	r0, r3
 8003866:	f000 ffc3 	bl	80047f0 <mfxstm32l152_ReleaseInstance>
 800386a:	4603      	mov	r3, r0
 800386c:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	2bff      	cmp	r3, #255	; 0xff
 8003872:	d001      	beq.n	8003878 <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 8003874:	f006 fb70 	bl	8009f58 <MFX_IO_DeInit>
  }
}
 8003878:	bf00      	nop
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	2280      	movs	r2, #128	; 0x80
 800388e:	2140      	movs	r1, #64	; 0x40
 8003890:	4618      	mov	r0, r3
 8003892:	f006 fc03 	bl	800a09c <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 8003896:	200a      	movs	r0, #10
 8003898:	f006 fc42 	bl	800a120 <MFX_IO_Delay>
}
 800389c:	bf00      	nop
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 80038ae:	88fb      	ldrh	r3, [r7, #6]
 80038b0:	2240      	movs	r2, #64	; 0x40
 80038b2:	2140      	movs	r1, #64	; 0x40
 80038b4:	4618      	mov	r0, r3
 80038b6:	f006 fbf1 	bl	800a09c <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 80038ba:	f006 fbb7 	bl	800a02c <MFX_IO_EnableWakeupPin>
}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b084      	sub	sp, #16
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	4603      	mov	r3, r0
 80038ce:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 80038d0:	88fb      	ldrh	r3, [r7, #6]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 ff6c 	bl	80047b0 <mfxstm32l152_GetInstance>
 80038d8:	4603      	mov	r3, r0
 80038da:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	2bff      	cmp	r3, #255	; 0xff
 80038e0:	d101      	bne.n	80038e6 <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 80038e2:	f006 fba3 	bl	800a02c <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 80038e6:	f006 fbc5 	bl	800a074 <MFX_IO_Wakeup>
}
 80038ea:	bf00      	nop
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	4603      	mov	r3, r0
 80038fa:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 80038fc:	2001      	movs	r0, #1
 80038fe:	f006 fc0f 	bl	800a120 <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 8003902:	f006 fb19 	bl	8009f38 <MFX_IO_Init>

  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 8003906:	88fb      	ldrh	r3, [r7, #6]
 8003908:	2100      	movs	r1, #0
 800390a:	4618      	mov	r0, r3
 800390c:	f006 fbda 	bl	800a0c4 <MFX_IO_Read>
 8003910:	4603      	mov	r3, r0
 8003912:	73fb      	strb	r3, [r7, #15]

  /* Return the device ID value */
  return (id);
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	b29b      	uxth	r3, r3
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	460a      	mov	r2, r1
 800392a:	80fb      	strh	r3, [r7, #6]
 800392c:	4613      	mov	r3, r2
 800392e:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003930:	2300      	movs	r3, #0
 8003932:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8003934:	88fb      	ldrh	r3, [r7, #6]
 8003936:	2142      	movs	r1, #66	; 0x42
 8003938:	4618      	mov	r0, r3
 800393a:	f006 fbc3 	bl	800a0c4 <MFX_IO_Read>
 800393e:	4603      	mov	r3, r0
 8003940:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 8003942:	7bfa      	ldrb	r2, [r7, #15]
 8003944:	797b      	ldrb	r3, [r7, #5]
 8003946:	4313      	orrs	r3, r2
 8003948:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 800394a:	7bfa      	ldrb	r2, [r7, #15]
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	2142      	movs	r1, #66	; 0x42
 8003950:	4618      	mov	r0, r3
 8003952:	f006 fba3 	bl	800a09c <MFX_IO_Write>
}
 8003956:	bf00      	nop
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	4603      	mov	r3, r0
 8003966:	460a      	mov	r2, r1
 8003968:	80fb      	strh	r3, [r7, #6]
 800396a:	4613      	mov	r3, r2
 800396c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800396e:	2300      	movs	r3, #0
 8003970:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	2142      	movs	r1, #66	; 0x42
 8003976:	4618      	mov	r0, r3
 8003978:	f006 fba4 	bl	800a0c4 <MFX_IO_Read>
 800397c:	4603      	mov	r3, r0
 800397e:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 8003980:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003984:	43db      	mvns	r3, r3
 8003986:	b25a      	sxtb	r2, r3
 8003988:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800398c:	4013      	ands	r3, r2
 800398e:	b25b      	sxtb	r3, r3
 8003990:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8003992:	7bfa      	ldrb	r2, [r7, #15]
 8003994:	88fb      	ldrh	r3, [r7, #6]
 8003996:	2142      	movs	r1, #66	; 0x42
 8003998:	4618      	mov	r0, r3
 800399a:	f006 fb7f 	bl	800a09c <MFX_IO_Write>
}
 800399e:	bf00      	nop
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	4603      	mov	r3, r0
 80039ae:	460a      	mov	r2, r1
 80039b0:	80fb      	strh	r3, [r7, #6]
 80039b2:	4613      	mov	r3, r2
 80039b4:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 80039b6:	88fb      	ldrh	r3, [r7, #6]
 80039b8:	2108      	movs	r1, #8
 80039ba:	4618      	mov	r0, r3
 80039bc:	f006 fb82 	bl	800a0c4 <MFX_IO_Read>
 80039c0:	4603      	mov	r3, r0
 80039c2:	461a      	mov	r2, r3
 80039c4:	797b      	ldrb	r3, [r7, #5]
 80039c6:	4013      	ands	r3, r2
 80039c8:	b2db      	uxtb	r3, r3
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b082      	sub	sp, #8
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	4603      	mov	r3, r0
 80039da:	460a      	mov	r2, r1
 80039dc:	80fb      	strh	r3, [r7, #6]
 80039de:	4613      	mov	r3, r2
 80039e0:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 80039e2:	797a      	ldrb	r2, [r7, #5]
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	2144      	movs	r1, #68	; 0x44
 80039e8:	4618      	mov	r0, r3
 80039ea:	f006 fb57 	bl	800a09c <MFX_IO_Write>
}
 80039ee:	bf00      	nop
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	4603      	mov	r3, r0
 80039fe:	460a      	mov	r2, r1
 8003a00:	80fb      	strh	r3, [r7, #6]
 8003a02:	4613      	mov	r3, r2
 8003a04:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003a06:	2300      	movs	r3, #0
 8003a08:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8003a0a:	88fb      	ldrh	r3, [r7, #6]
 8003a0c:	2141      	movs	r1, #65	; 0x41
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f006 fb58 	bl	800a0c4 <MFX_IO_Read>
 8003a14:	4603      	mov	r3, r0
 8003a16:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	f023 0302 	bic.w	r3, r3, #2
 8003a1e:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 8003a20:	7bfa      	ldrb	r2, [r7, #15]
 8003a22:	797b      	ldrb	r3, [r7, #5]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8003a28:	7bfa      	ldrb	r2, [r7, #15]
 8003a2a:	88fb      	ldrh	r3, [r7, #6]
 8003a2c:	2141      	movs	r1, #65	; 0x41
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f006 fb34 	bl	800a09c <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8003a34:	2001      	movs	r0, #1
 8003a36:	f006 fb73 	bl	800a120 <MFX_IO_Delay>

}
 8003a3a:	bf00      	nop
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b084      	sub	sp, #16
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	4603      	mov	r3, r0
 8003a4a:	460a      	mov	r2, r1
 8003a4c:	80fb      	strh	r3, [r7, #6]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003a52:	2300      	movs	r3, #0
 8003a54:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8003a56:	88fb      	ldrh	r3, [r7, #6]
 8003a58:	2141      	movs	r1, #65	; 0x41
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f006 fb32 	bl	800a0c4 <MFX_IO_Read>
 8003a60:	4603      	mov	r3, r0
 8003a62:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	f023 0301 	bic.w	r3, r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 8003a6c:	7bfa      	ldrb	r2, [r7, #15]
 8003a6e:	797b      	ldrb	r3, [r7, #5]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8003a74:	7bfa      	ldrb	r2, [r7, #15]
 8003a76:	88fb      	ldrh	r3, [r7, #6]
 8003a78:	2141      	movs	r1, #65	; 0x41
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f006 fb0e 	bl	800a09c <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8003a80:	2001      	movs	r0, #1
 8003a82:	f006 fb4d 	bl	800a120 <MFX_IO_Delay>

}
 8003a86:	bf00      	nop
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b084      	sub	sp, #16
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	4603      	mov	r3, r0
 8003a96:	6039      	str	r1, [r7, #0]
 8003a98:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	2140      	movs	r1, #64	; 0x40
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f006 fb10 	bl	800a0c4 <MFX_IO_Read>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab6:	d304      	bcc.n	8003ac2 <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	f043 0308 	orr.w	r3, r3, #8
 8003abe:	73fb      	strb	r3, [r7, #15]
 8003ac0:	e003      	b.n	8003aca <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	f023 0308 	bic.w	r3, r3, #8
 8003ac8:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8003aca:	7bfa      	ldrb	r2, [r7, #15]
 8003acc:	88fb      	ldrh	r3, [r7, #6]
 8003ace:	2140      	movs	r1, #64	; 0x40
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f006 fae3 	bl	800a09c <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	f006 fb22 	bl	800a120 <MFX_IO_Delay>
}
 8003adc:	bf00      	nop
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	6039      	str	r1, [r7, #0]
 8003aee:	80fb      	strh	r3, [r7, #6]
 8003af0:	4613      	mov	r3, r2
 8003af2:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 8003af8:	797b      	ldrb	r3, [r7, #5]
 8003afa:	2b17      	cmp	r3, #23
 8003afc:	f200 82d4 	bhi.w	80040a8 <mfxstm32l152_IO_Config+0x5c4>
 8003b00:	a201      	add	r2, pc, #4	; (adr r2, 8003b08 <mfxstm32l152_IO_Config+0x24>)
 8003b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b06:	bf00      	nop
 8003b08:	08003b99 	.word	0x08003b99
 8003b0c:	08003c29 	.word	0x08003c29
 8003b10:	08003ce9 	.word	0x08003ce9
 8003b14:	08003dd9 	.word	0x08003dd9
 8003b18:	08003ec9 	.word	0x08003ec9
 8003b1c:	08003fb9 	.word	0x08003fb9
 8003b20:	08003b69 	.word	0x08003b69
 8003b24:	08003b69 	.word	0x08003b69
 8003b28:	08003bc9 	.word	0x08003bc9
 8003b2c:	08003bf9 	.word	0x08003bf9
 8003b30:	080040a9 	.word	0x080040a9
 8003b34:	08003cb9 	.word	0x08003cb9
 8003b38:	08003c89 	.word	0x08003c89
 8003b3c:	080040a9 	.word	0x080040a9
 8003b40:	08003c59 	.word	0x08003c59
 8003b44:	08003c29 	.word	0x08003c29
 8003b48:	08003d39 	.word	0x08003d39
 8003b4c:	08003d89 	.word	0x08003d89
 8003b50:	08003e29 	.word	0x08003e29
 8003b54:	08003e79 	.word	0x08003e79
 8003b58:	08003f19 	.word	0x08003f19
 8003b5c:	08003f69 	.word	0x08003f69
 8003b60:	08004009 	.word	0x08004009
 8003b64:	08004059 	.word	0x08004059
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003b68:	88fb      	ldrh	r3, [r7, #6]
 8003b6a:	6839      	ldr	r1, [r7, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fb67 	bl	8004240 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003b72:	88fb      	ldrh	r3, [r7, #6]
 8003b74:	2200      	movs	r2, #0
 8003b76:	6839      	ldr	r1, [r7, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fa9d 	bl	80040b8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003b7e:	88f8      	ldrh	r0, [r7, #6]
 8003b80:	2300      	movs	r3, #0
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	2164      	movs	r1, #100	; 0x64
 8003b86:	f000 fe57 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003b8a:	88f8      	ldrh	r0, [r7, #6]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	2168      	movs	r1, #104	; 0x68
 8003b92:	f000 fe51 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    break;
 8003b96:	e28a      	b.n	80040ae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003b98:	88fb      	ldrh	r3, [r7, #6]
 8003b9a:	6839      	ldr	r1, [r7, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fb4f 	bl	8004240 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003ba2:	88fb      	ldrh	r3, [r7, #6]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	6839      	ldr	r1, [r7, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 fa85 	bl	80040b8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003bae:	88f8      	ldrh	r0, [r7, #6]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	2164      	movs	r1, #100	; 0x64
 8003bb6:	f000 fe3f 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003bba:	88f8      	ldrh	r0, [r7, #6]
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	2168      	movs	r1, #104	; 0x68
 8003bc2:	f000 fe39 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    break;
 8003bc6:	e272      	b.n	80040ae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003bc8:	88fb      	ldrh	r3, [r7, #6]
 8003bca:	6839      	ldr	r1, [r7, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fb37 	bl	8004240 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003bd2:	88fb      	ldrh	r3, [r7, #6]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	6839      	ldr	r1, [r7, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 fa6d 	bl	80040b8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003bde:	88f8      	ldrh	r0, [r7, #6]
 8003be0:	2301      	movs	r3, #1
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	2164      	movs	r1, #100	; 0x64
 8003be6:	f000 fe27 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003bea:	88f8      	ldrh	r0, [r7, #6]
 8003bec:	2301      	movs	r3, #1
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	2168      	movs	r1, #104	; 0x68
 8003bf2:	f000 fe21 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    break;
 8003bf6:	e25a      	b.n	80040ae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003bf8:	88fb      	ldrh	r3, [r7, #6]
 8003bfa:	6839      	ldr	r1, [r7, #0]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 fb1f 	bl	8004240 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003c02:	88fb      	ldrh	r3, [r7, #6]
 8003c04:	2200      	movs	r2, #0
 8003c06:	6839      	ldr	r1, [r7, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 fa55 	bl	80040b8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003c0e:	88f8      	ldrh	r0, [r7, #6]
 8003c10:	2301      	movs	r3, #1
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	2164      	movs	r1, #100	; 0x64
 8003c16:	f000 fe0f 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003c1a:	88f8      	ldrh	r0, [r7, #6]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	2168      	movs	r1, #104	; 0x68
 8003c22:	f000 fe09 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    break;
 8003c26:	e242      	b.n	80040ae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003c28:	88fb      	ldrh	r3, [r7, #6]
 8003c2a:	6839      	ldr	r1, [r7, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fb07 	bl	8004240 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	2201      	movs	r2, #1
 8003c36:	6839      	ldr	r1, [r7, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fa3d 	bl	80040b8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8003c3e:	88f8      	ldrh	r0, [r7, #6]
 8003c40:	2300      	movs	r3, #0
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	2164      	movs	r1, #100	; 0x64
 8003c46:	f000 fdf7 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003c4a:	88f8      	ldrh	r0, [r7, #6]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	2168      	movs	r1, #104	; 0x68
 8003c52:	f000 fdf1 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    break;
 8003c56:	e22a      	b.n	80040ae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003c58:	88fb      	ldrh	r3, [r7, #6]
 8003c5a:	6839      	ldr	r1, [r7, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 faef 	bl	8004240 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8003c62:	88fb      	ldrh	r3, [r7, #6]
 8003c64:	2201      	movs	r2, #1
 8003c66:	6839      	ldr	r1, [r7, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 fa25 	bl	80040b8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8003c6e:	88f8      	ldrh	r0, [r7, #6]
 8003c70:	2300      	movs	r3, #0
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	2164      	movs	r1, #100	; 0x64
 8003c76:	f000 fddf 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003c7a:	88f8      	ldrh	r0, [r7, #6]
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	2168      	movs	r1, #104	; 0x68
 8003c82:	f000 fdd9 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    break;
 8003c86:	e212      	b.n	80040ae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003c88:	88fb      	ldrh	r3, [r7, #6]
 8003c8a:	6839      	ldr	r1, [r7, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 fad7 	bl	8004240 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8003c92:	88fb      	ldrh	r3, [r7, #6]
 8003c94:	2201      	movs	r2, #1
 8003c96:	6839      	ldr	r1, [r7, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 fa0d 	bl	80040b8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8003c9e:	88f8      	ldrh	r0, [r7, #6]
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	2164      	movs	r1, #100	; 0x64
 8003ca6:	f000 fdc7 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003caa:	88f8      	ldrh	r0, [r7, #6]
 8003cac:	2300      	movs	r3, #0
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	2168      	movs	r1, #104	; 0x68
 8003cb2:	f000 fdc1 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    break;
 8003cb6:	e1fa      	b.n	80040ae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003cb8:	88fb      	ldrh	r3, [r7, #6]
 8003cba:	6839      	ldr	r1, [r7, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 fabf 	bl	8004240 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8003cc2:	88fb      	ldrh	r3, [r7, #6]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	6839      	ldr	r1, [r7, #0]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 f9f5 	bl	80040b8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8003cce:	88f8      	ldrh	r0, [r7, #6]
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	2164      	movs	r1, #100	; 0x64
 8003cd6:	f000 fdaf 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003cda:	88f8      	ldrh	r0, [r7, #6]
 8003cdc:	2301      	movs	r3, #1
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	2168      	movs	r1, #104	; 0x68
 8003ce2:	f000 fda9 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    break;
 8003ce6:	e1e2      	b.n	80040ae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003ce8:	88fb      	ldrh	r3, [r7, #6]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fa7a 	bl	80041e4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003cf0:	88fb      	ldrh	r3, [r7, #6]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	6839      	ldr	r1, [r7, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f9de 	bl	80040b8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003cfc:	88f8      	ldrh	r0, [r7, #6]
 8003cfe:	2300      	movs	r3, #0
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	2164      	movs	r1, #100	; 0x64
 8003d04:	f000 fd98 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003d08:	88f8      	ldrh	r0, [r7, #6]
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	2168      	movs	r1, #104	; 0x68
 8003d10:	f000 fd92 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003d14:	88fb      	ldrh	r3, [r7, #6]
 8003d16:	2201      	movs	r2, #1
 8003d18:	6839      	ldr	r1, [r7, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 f9de 	bl	80040dc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003d20:	88fb      	ldrh	r3, [r7, #6]
 8003d22:	2201      	movs	r2, #1
 8003d24:	6839      	ldr	r1, [r7, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 f9ed 	bl	8004106 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	6839      	ldr	r1, [r7, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 fa75 	bl	8004220 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003d36:	e1ba      	b.n	80040ae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003d38:	88fb      	ldrh	r3, [r7, #6]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fa52 	bl	80041e4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003d40:	88fb      	ldrh	r3, [r7, #6]
 8003d42:	2200      	movs	r2, #0
 8003d44:	6839      	ldr	r1, [r7, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 f9b6 	bl	80040b8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003d4c:	88f8      	ldrh	r0, [r7, #6]
 8003d4e:	2301      	movs	r3, #1
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	2164      	movs	r1, #100	; 0x64
 8003d54:	f000 fd70 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003d58:	88f8      	ldrh	r0, [r7, #6]
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	2168      	movs	r1, #104	; 0x68
 8003d60:	f000 fd6a 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003d64:	88fb      	ldrh	r3, [r7, #6]
 8003d66:	2201      	movs	r2, #1
 8003d68:	6839      	ldr	r1, [r7, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 f9b6 	bl	80040dc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003d70:	88fb      	ldrh	r3, [r7, #6]
 8003d72:	2201      	movs	r2, #1
 8003d74:	6839      	ldr	r1, [r7, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 f9c5 	bl	8004106 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003d7c:	88fb      	ldrh	r3, [r7, #6]
 8003d7e:	6839      	ldr	r1, [r7, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fa4d 	bl	8004220 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003d86:	e192      	b.n	80040ae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003d88:	88fb      	ldrh	r3, [r7, #6]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 fa2a 	bl	80041e4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003d90:	88fb      	ldrh	r3, [r7, #6]
 8003d92:	2200      	movs	r2, #0
 8003d94:	6839      	ldr	r1, [r7, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 f98e 	bl	80040b8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003d9c:	88f8      	ldrh	r0, [r7, #6]
 8003d9e:	2301      	movs	r3, #1
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	2164      	movs	r1, #100	; 0x64
 8003da4:	f000 fd48 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003da8:	88f8      	ldrh	r0, [r7, #6]
 8003daa:	2300      	movs	r3, #0
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	2168      	movs	r1, #104	; 0x68
 8003db0:	f000 fd42 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003db4:	88fb      	ldrh	r3, [r7, #6]
 8003db6:	2201      	movs	r2, #1
 8003db8:	6839      	ldr	r1, [r7, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 f98e 	bl	80040dc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003dc0:	88fb      	ldrh	r3, [r7, #6]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	6839      	ldr	r1, [r7, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 f99d 	bl	8004106 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003dcc:	88fb      	ldrh	r3, [r7, #6]
 8003dce:	6839      	ldr	r1, [r7, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 fa25 	bl	8004220 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003dd6:	e16a      	b.n	80040ae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003dd8:	88fb      	ldrh	r3, [r7, #6]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fa02 	bl	80041e4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003de0:	88fb      	ldrh	r3, [r7, #6]
 8003de2:	2200      	movs	r2, #0
 8003de4:	6839      	ldr	r1, [r7, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 f966 	bl	80040b8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003dec:	88f8      	ldrh	r0, [r7, #6]
 8003dee:	2300      	movs	r3, #0
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	2164      	movs	r1, #100	; 0x64
 8003df4:	f000 fd20 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003df8:	88f8      	ldrh	r0, [r7, #6]
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	2168      	movs	r1, #104	; 0x68
 8003e00:	f000 fd1a 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003e04:	88fb      	ldrh	r3, [r7, #6]
 8003e06:	2201      	movs	r2, #1
 8003e08:	6839      	ldr	r1, [r7, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 f966 	bl	80040dc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003e10:	88fb      	ldrh	r3, [r7, #6]
 8003e12:	2200      	movs	r2, #0
 8003e14:	6839      	ldr	r1, [r7, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 f975 	bl	8004106 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003e1c:	88fb      	ldrh	r3, [r7, #6]
 8003e1e:	6839      	ldr	r1, [r7, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 f9fd 	bl	8004220 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003e26:	e142      	b.n	80040ae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003e28:	88fb      	ldrh	r3, [r7, #6]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 f9da 	bl	80041e4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003e30:	88fb      	ldrh	r3, [r7, #6]
 8003e32:	2200      	movs	r2, #0
 8003e34:	6839      	ldr	r1, [r7, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 f93e 	bl	80040b8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003e3c:	88f8      	ldrh	r0, [r7, #6]
 8003e3e:	2301      	movs	r3, #1
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	2164      	movs	r1, #100	; 0x64
 8003e44:	f000 fcf8 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003e48:	88f8      	ldrh	r0, [r7, #6]
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	2168      	movs	r1, #104	; 0x68
 8003e50:	f000 fcf2 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003e54:	88fb      	ldrh	r3, [r7, #6]
 8003e56:	2201      	movs	r2, #1
 8003e58:	6839      	ldr	r1, [r7, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 f93e 	bl	80040dc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003e60:	88fb      	ldrh	r3, [r7, #6]
 8003e62:	2200      	movs	r2, #0
 8003e64:	6839      	ldr	r1, [r7, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 f94d 	bl	8004106 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003e6c:	88fb      	ldrh	r3, [r7, #6]
 8003e6e:	6839      	ldr	r1, [r7, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 f9d5 	bl	8004220 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003e76:	e11a      	b.n	80040ae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003e78:	88fb      	ldrh	r3, [r7, #6]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 f9b2 	bl	80041e4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003e80:	88fb      	ldrh	r3, [r7, #6]
 8003e82:	2200      	movs	r2, #0
 8003e84:	6839      	ldr	r1, [r7, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 f916 	bl	80040b8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003e8c:	88f8      	ldrh	r0, [r7, #6]
 8003e8e:	2301      	movs	r3, #1
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	2164      	movs	r1, #100	; 0x64
 8003e94:	f000 fcd0 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003e98:	88f8      	ldrh	r0, [r7, #6]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	2168      	movs	r1, #104	; 0x68
 8003ea0:	f000 fcca 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003ea4:	88fb      	ldrh	r3, [r7, #6]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	6839      	ldr	r1, [r7, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 f916 	bl	80040dc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003eb0:	88fb      	ldrh	r3, [r7, #6]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	6839      	ldr	r1, [r7, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 f925 	bl	8004106 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003ebc:	88fb      	ldrh	r3, [r7, #6]
 8003ebe:	6839      	ldr	r1, [r7, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 f9ad 	bl	8004220 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003ec6:	e0f2      	b.n	80040ae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003ec8:	88fb      	ldrh	r3, [r7, #6]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 f98a 	bl	80041e4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003ed0:	88fb      	ldrh	r3, [r7, #6]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	6839      	ldr	r1, [r7, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 f8ee 	bl	80040b8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003edc:	88f8      	ldrh	r0, [r7, #6]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	2164      	movs	r1, #100	; 0x64
 8003ee4:	f000 fca8 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003ee8:	88f8      	ldrh	r0, [r7, #6]
 8003eea:	2301      	movs	r3, #1
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	2168      	movs	r1, #104	; 0x68
 8003ef0:	f000 fca2 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003ef4:	88fb      	ldrh	r3, [r7, #6]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	6839      	ldr	r1, [r7, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 f8ee 	bl	80040dc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003f00:	88fb      	ldrh	r3, [r7, #6]
 8003f02:	2200      	movs	r2, #0
 8003f04:	6839      	ldr	r1, [r7, #0]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 f8fd 	bl	8004106 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003f0c:	88fb      	ldrh	r3, [r7, #6]
 8003f0e:	6839      	ldr	r1, [r7, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 f985 	bl	8004220 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003f16:	e0ca      	b.n	80040ae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003f18:	88fb      	ldrh	r3, [r7, #6]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 f962 	bl	80041e4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003f20:	88fb      	ldrh	r3, [r7, #6]
 8003f22:	2200      	movs	r2, #0
 8003f24:	6839      	ldr	r1, [r7, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 f8c6 	bl	80040b8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003f2c:	88f8      	ldrh	r0, [r7, #6]
 8003f2e:	2301      	movs	r3, #1
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	2164      	movs	r1, #100	; 0x64
 8003f34:	f000 fc80 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003f38:	88f8      	ldrh	r0, [r7, #6]
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	2168      	movs	r1, #104	; 0x68
 8003f40:	f000 fc7a 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003f44:	88fb      	ldrh	r3, [r7, #6]
 8003f46:	2200      	movs	r2, #0
 8003f48:	6839      	ldr	r1, [r7, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 f8c6 	bl	80040dc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003f50:	88fb      	ldrh	r3, [r7, #6]
 8003f52:	2200      	movs	r2, #0
 8003f54:	6839      	ldr	r1, [r7, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 f8d5 	bl	8004106 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003f5c:	88fb      	ldrh	r3, [r7, #6]
 8003f5e:	6839      	ldr	r1, [r7, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 f95d 	bl	8004220 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003f66:	e0a2      	b.n	80040ae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003f68:	88fb      	ldrh	r3, [r7, #6]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 f93a 	bl	80041e4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003f70:	88fb      	ldrh	r3, [r7, #6]
 8003f72:	2200      	movs	r2, #0
 8003f74:	6839      	ldr	r1, [r7, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 f89e 	bl	80040b8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003f7c:	88f8      	ldrh	r0, [r7, #6]
 8003f7e:	2301      	movs	r3, #1
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	2164      	movs	r1, #100	; 0x64
 8003f84:	f000 fc58 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003f88:	88f8      	ldrh	r0, [r7, #6]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	2168      	movs	r1, #104	; 0x68
 8003f90:	f000 fc52 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003f94:	88fb      	ldrh	r3, [r7, #6]
 8003f96:	2200      	movs	r2, #0
 8003f98:	6839      	ldr	r1, [r7, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 f89e 	bl	80040dc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003fa0:	88fb      	ldrh	r3, [r7, #6]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	6839      	ldr	r1, [r7, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 f8ad 	bl	8004106 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	6839      	ldr	r1, [r7, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 f935 	bl	8004220 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003fb6:	e07a      	b.n	80040ae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003fb8:	88fb      	ldrh	r3, [r7, #6]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 f912 	bl	80041e4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003fc0:	88fb      	ldrh	r3, [r7, #6]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	6839      	ldr	r1, [r7, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 f876 	bl	80040b8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003fcc:	88f8      	ldrh	r0, [r7, #6]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	2164      	movs	r1, #100	; 0x64
 8003fd4:	f000 fc30 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003fd8:	88f8      	ldrh	r0, [r7, #6]
 8003fda:	2301      	movs	r3, #1
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	2168      	movs	r1, #104	; 0x68
 8003fe0:	f000 fc2a 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003fe4:	88fb      	ldrh	r3, [r7, #6]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	6839      	ldr	r1, [r7, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 f876 	bl	80040dc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003ff0:	88fb      	ldrh	r3, [r7, #6]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	6839      	ldr	r1, [r7, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 f885 	bl	8004106 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003ffc:	88fb      	ldrh	r3, [r7, #6]
 8003ffe:	6839      	ldr	r1, [r7, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f000 f90d 	bl	8004220 <mfxstm32l152_IO_EnablePinIT>
    break;
 8004006:	e052      	b.n	80040ae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8004008:	88fb      	ldrh	r3, [r7, #6]
 800400a:	4618      	mov	r0, r3
 800400c:	f000 f8ea 	bl	80041e4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8004010:	88fb      	ldrh	r3, [r7, #6]
 8004012:	2200      	movs	r2, #0
 8004014:	6839      	ldr	r1, [r7, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f000 f84e 	bl	80040b8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800401c:	88f8      	ldrh	r0, [r7, #6]
 800401e:	2301      	movs	r3, #1
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	2164      	movs	r1, #100	; 0x64
 8004024:	f000 fc08 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8004028:	88f8      	ldrh	r0, [r7, #6]
 800402a:	2301      	movs	r3, #1
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	2168      	movs	r1, #104	; 0x68
 8004030:	f000 fc02 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8004034:	88fb      	ldrh	r3, [r7, #6]
 8004036:	2200      	movs	r2, #0
 8004038:	6839      	ldr	r1, [r7, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f000 f84e 	bl	80040dc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8004040:	88fb      	ldrh	r3, [r7, #6]
 8004042:	2201      	movs	r2, #1
 8004044:	6839      	ldr	r1, [r7, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f000 f85d 	bl	8004106 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800404c:	88fb      	ldrh	r3, [r7, #6]
 800404e:	6839      	ldr	r1, [r7, #0]
 8004050:	4618      	mov	r0, r3
 8004052:	f000 f8e5 	bl	8004220 <mfxstm32l152_IO_EnablePinIT>
    break;
 8004056:	e02a      	b.n	80040ae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8004058:	88fb      	ldrh	r3, [r7, #6]
 800405a:	4618      	mov	r0, r3
 800405c:	f000 f8c2 	bl	80041e4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8004060:	88fb      	ldrh	r3, [r7, #6]
 8004062:	2200      	movs	r2, #0
 8004064:	6839      	ldr	r1, [r7, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f000 f826 	bl	80040b8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800406c:	88f8      	ldrh	r0, [r7, #6]
 800406e:	2301      	movs	r3, #1
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	2164      	movs	r1, #100	; 0x64
 8004074:	f000 fbe0 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8004078:	88f8      	ldrh	r0, [r7, #6]
 800407a:	2300      	movs	r3, #0
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	2168      	movs	r1, #104	; 0x68
 8004080:	f000 fbda 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8004084:	88fb      	ldrh	r3, [r7, #6]
 8004086:	2200      	movs	r2, #0
 8004088:	6839      	ldr	r1, [r7, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f000 f826 	bl	80040dc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8004090:	88fb      	ldrh	r3, [r7, #6]
 8004092:	2201      	movs	r2, #1
 8004094:	6839      	ldr	r1, [r7, #0]
 8004096:	4618      	mov	r0, r3
 8004098:	f000 f835 	bl	8004106 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800409c:	88fb      	ldrh	r3, [r7, #6]
 800409e:	6839      	ldr	r1, [r7, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 f8bd 	bl	8004220 <mfxstm32l152_IO_EnablePinIT>
    break;
 80040a6:	e002      	b.n	80040ae <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 80040a8:	797b      	ldrb	r3, [r7, #5]
 80040aa:	73fb      	strb	r3, [r7, #15]
    break;
 80040ac:	bf00      	nop
  }

  return error_code;
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	4603      	mov	r3, r0
 80040c0:	6039      	str	r1, [r7, #0]
 80040c2:	80fb      	strh	r3, [r7, #6]
 80040c4:	4613      	mov	r3, r2
 80040c6:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 80040c8:	797b      	ldrb	r3, [r7, #5]
 80040ca:	88f8      	ldrh	r0, [r7, #6]
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	2160      	movs	r1, #96	; 0x60
 80040d0:	f000 fbb2 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
}
 80040d4:	bf00      	nop
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	6039      	str	r1, [r7, #0]
 80040e6:	80fb      	strh	r3, [r7, #6]
 80040e8:	4613      	mov	r3, r2
 80040ea:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 80040ec:	797b      	ldrb	r3, [r7, #5]
 80040ee:	88f8      	ldrh	r0, [r7, #6]
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	214c      	movs	r1, #76	; 0x4c
 80040f4:	f000 fba0 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 80040f8:	2001      	movs	r0, #1
 80040fa:	f006 f811 	bl	800a120 <MFX_IO_Delay>
}
 80040fe:	bf00      	nop
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b082      	sub	sp, #8
 800410a:	af00      	add	r7, sp, #0
 800410c:	4603      	mov	r3, r0
 800410e:	6039      	str	r1, [r7, #0]
 8004110:	80fb      	strh	r3, [r7, #6]
 8004112:	4613      	mov	r3, r2
 8004114:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 8004116:	797b      	ldrb	r3, [r7, #5]
 8004118:	88f8      	ldrh	r0, [r7, #6]
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	2150      	movs	r1, #80	; 0x50
 800411e:	f000 fb8b 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8004122:	2001      	movs	r0, #1
 8004124:	f005 fffc 	bl	800a120 <MFX_IO_Delay>
}
 8004128:	bf00      	nop
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	6039      	str	r1, [r7, #0]
 800413a:	80fb      	strh	r3, [r7, #6]
 800413c:	4613      	mov	r3, r2
 800413e:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8004140:	797b      	ldrb	r3, [r7, #5]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d006      	beq.n	8004154 <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 8004146:	88f8      	ldrh	r0, [r7, #6]
 8004148:	2301      	movs	r3, #1
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	216c      	movs	r1, #108	; 0x6c
 800414e:	f000 fb73 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 8004152:	e005      	b.n	8004160 <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 8004154:	88f8      	ldrh	r0, [r7, #6]
 8004156:	2301      	movs	r3, #1
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	2170      	movs	r1, #112	; 0x70
 800415c:	f000 fb6c 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
}
 8004160:	bf00      	nop
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	6039      	str	r1, [r7, #0]
 8004172:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 8004178:	2300      	movs	r3, #0
 800417a:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 800417c:	2300      	movs	r3, #0
 800417e:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d006      	beq.n	8004196 <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 8004188:	88fb      	ldrh	r3, [r7, #6]
 800418a:	2110      	movs	r1, #16
 800418c:	4618      	mov	r0, r3
 800418e:	f005 ff99 	bl	800a0c4 <MFX_IO_Read>
 8004192:	4603      	mov	r3, r0
 8004194:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800419c:	2b00      	cmp	r3, #0
 800419e:	d006      	beq.n	80041ae <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 80041a0:	88fb      	ldrh	r3, [r7, #6]
 80041a2:	2111      	movs	r1, #17
 80041a4:	4618      	mov	r0, r3
 80041a6:	f005 ff8d 	bl	800a0c4 <MFX_IO_Read>
 80041aa:	4603      	mov	r3, r0
 80041ac:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d006      	beq.n	80041c6 <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 80041b8:	88fb      	ldrh	r3, [r7, #6]
 80041ba:	2112      	movs	r1, #18
 80041bc:	4618      	mov	r0, r3
 80041be:	f005 ff81 	bl	800a0c4 <MFX_IO_Read>
 80041c2:	4603      	mov	r3, r0
 80041c4:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	021a      	lsls	r2, r3, #8
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	441a      	add	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	041b      	lsls	r3, r3, #16
 80041d2:	4413      	add	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	4013      	ands	r3, r2
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4603      	mov	r3, r0
 80041ec:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 80041ee:	f005 feef 	bl	8009fd0 <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 80041f2:	88fb      	ldrh	r3, [r7, #6]
 80041f4:	2101      	movs	r1, #1
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff fb92 	bl	8003920 <mfxstm32l152_EnableITSource>
}
 80041fc:	bf00      	nop
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 800420e:	88fb      	ldrh	r3, [r7, #6]
 8004210:	2101      	movs	r1, #1
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff fba3 	bl	800395e <mfxstm32l152_DisableITSource>
}
 8004218:	bf00      	nop
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	6039      	str	r1, [r7, #0]
 800422a:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 800422c:	88f8      	ldrh	r0, [r7, #6]
 800422e:	2301      	movs	r3, #1
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	2148      	movs	r1, #72	; 0x48
 8004234:	f000 fb00 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
}
 8004238:	bf00      	nop
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	6039      	str	r1, [r7, #0]
 800424a:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 800424c:	88f8      	ldrh	r0, [r7, #6]
 800424e:	2300      	movs	r3, #0
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	2148      	movs	r1, #72	; 0x48
 8004254:	f000 faf0 	bl	8004838 <mfxstm32l152_reg24_setPinValue>
}
 8004258:	bf00      	nop
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	4603      	mov	r3, r0
 8004268:	6039      	str	r1, [r7, #0]
 800426a:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 800426c:	2300      	movs	r3, #0
 800426e:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 8004270:	2300      	movs	r3, #0
 8004272:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 8004274:	2300      	movs	r3, #0
 8004276:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d006      	beq.n	800428e <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 8004280:	88fb      	ldrh	r3, [r7, #6]
 8004282:	210c      	movs	r1, #12
 8004284:	4618      	mov	r0, r3
 8004286:	f005 ff1d 	bl	800a0c4 <MFX_IO_Read>
 800428a:	4603      	mov	r3, r0
 800428c:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004294:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004298:	2b00      	cmp	r3, #0
 800429a:	d006      	beq.n	80042aa <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 800429c:	88fb      	ldrh	r3, [r7, #6]
 800429e:	210d      	movs	r1, #13
 80042a0:	4618      	mov	r0, r3
 80042a2:	f005 ff0f 	bl	800a0c4 <MFX_IO_Read>
 80042a6:	4603      	mov	r3, r0
 80042a8:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	0c1b      	lsrs	r3, r3, #16
 80042ae:	041b      	lsls	r3, r3, #16
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d006      	beq.n	80042c2 <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 80042b4:	88fb      	ldrh	r3, [r7, #6]
 80042b6:	210e      	movs	r1, #14
 80042b8:	4618      	mov	r0, r3
 80042ba:	f005 ff03 	bl	800a0c4 <MFX_IO_Read>
 80042be:	4603      	mov	r3, r0
 80042c0:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 80042c2:	7bfa      	ldrb	r2, [r7, #15]
 80042c4:	89bb      	ldrh	r3, [r7, #12]
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	4413      	add	r3, r2
 80042ca:	461a      	mov	r2, r3
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	041b      	lsls	r3, r3, #16
 80042d0:	4413      	add	r3, r2
 80042d2:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	4013      	ands	r3, r2
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b084      	sub	sp, #16
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	4603      	mov	r3, r0
 80042ea:	6039      	str	r1, [r7, #0]
 80042ec:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	0a1b      	lsrs	r3, r3, #8
 80042f6:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	0c1b      	lsrs	r3, r3, #16
 80042fc:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 8004304:	7bfa      	ldrb	r2, [r7, #15]
 8004306:	88fb      	ldrh	r3, [r7, #6]
 8004308:	2154      	movs	r1, #84	; 0x54
 800430a:	4618      	mov	r0, r3
 800430c:	f005 fec6 	bl	800a09c <MFX_IO_Write>
  }
  if (pin_8_15)
 8004310:	7bbb      	ldrb	r3, [r7, #14]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 8004316:	7bba      	ldrb	r2, [r7, #14]
 8004318:	88fb      	ldrh	r3, [r7, #6]
 800431a:	2155      	movs	r1, #85	; 0x55
 800431c:	4618      	mov	r0, r3
 800431e:	f005 febd 	bl	800a09c <MFX_IO_Write>
  }
  if (pin_16_23)
 8004322:	7b7b      	ldrb	r3, [r7, #13]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d005      	beq.n	8004334 <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 8004328:	7b7a      	ldrb	r2, [r7, #13]
 800432a:	88fb      	ldrh	r3, [r7, #6]
 800432c:	2156      	movs	r1, #86	; 0x56
 800432e:	4618      	mov	r0, r3
 8004330:	f005 feb4 	bl	800a09c <MFX_IO_Write>
  }
}
 8004334:	bf00      	nop
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	4603      	mov	r3, r0
 8004344:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 8004346:	2300      	movs	r3, #0
 8004348:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	b29b      	uxth	r3, r3
 8004350:	2180      	movs	r1, #128	; 0x80
 8004352:	4618      	mov	r0, r3
 8004354:	f005 feb6 	bl	800a0c4 <MFX_IO_Read>
 8004358:	4603      	mov	r3, r0
 800435a:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	f043 0301 	orr.w	r3, r3, #1
 8004362:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 8004364:	88fb      	ldrh	r3, [r7, #6]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	b29b      	uxth	r3, r3
 800436a:	7bfa      	ldrb	r2, [r7, #15]
 800436c:	2180      	movs	r1, #128	; 0x80
 800436e:	4618      	mov	r0, r3
 8004370:	f005 fe94 	bl	800a09c <MFX_IO_Write>
}
 8004374:	bf00      	nop
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 800437c:	b084      	sub	sp, #16
 800437e:	b590      	push	{r4, r7, lr}
 8004380:	b085      	sub	sp, #20
 8004382:	af00      	add	r7, sp, #0
 8004384:	4604      	mov	r4, r0
 8004386:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800438a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800438e:	4623      	mov	r3, r4
 8004390:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 8004392:	2300      	movs	r3, #0
 8004394:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 8004396:	2300      	movs	r3, #0
 8004398:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 800439a:	88fb      	ldrh	r3, [r7, #6]
 800439c:	b2db      	uxtb	r3, r3
 800439e:	b29b      	uxth	r3, r3
 80043a0:	2140      	movs	r1, #64	; 0x40
 80043a2:	4618      	mov	r0, r3
 80043a4:	f005 fe8e 	bl	800a0c4 <MFX_IO_Read>
 80043a8:	4603      	mov	r3, r0
 80043aa:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 80043ac:	7bbb      	ldrb	r3, [r7, #14]
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10b      	bne.n	80043ce <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 80043b6:	7bbb      	ldrb	r3, [r7, #14]
 80043b8:	f043 0304 	orr.w	r3, r3, #4
 80043bc:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 80043be:	88fb      	ldrh	r3, [r7, #6]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	7bba      	ldrb	r2, [r7, #14]
 80043c6:	2140      	movs	r1, #64	; 0x40
 80043c8:	4618      	mov	r0, r3
 80043ca:	f005 fe67 	bl	800a09c <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 80043ce:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	f003 030e 	and.w	r3, r3, #14
 80043da:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 80043dc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80043e0:	b25b      	sxtb	r3, r3
 80043e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e6:	b25a      	sxtb	r2, r3
 80043e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	b25b      	sxtb	r3, r3
 80043f0:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 80043f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80043f6:	b25b      	sxtb	r3, r3
 80043f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80043fc:	b25a      	sxtb	r2, r3
 80043fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004402:	4313      	orrs	r3, r2
 8004404:	b25b      	sxtb	r3, r3
 8004406:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 8004408:	88fb      	ldrh	r3, [r7, #6]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	b29b      	uxth	r3, r3
 800440e:	7bfa      	ldrb	r2, [r7, #15]
 8004410:	2180      	movs	r1, #128	; 0x80
 8004412:	4618      	mov	r0, r3
 8004414:	f005 fe42 	bl	800a09c <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8004418:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800441c:	b25b      	sxtb	r3, r3
 800441e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004422:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 8004424:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8004428:	b25b      	sxtb	r3, r3
 800442a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800442e:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8004430:	4313      	orrs	r3, r2
 8004432:	b25b      	sxtb	r3, r3
 8004434:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 8004436:	88fb      	ldrh	r3, [r7, #6]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	b29b      	uxth	r3, r3
 800443c:	7bfa      	ldrb	r2, [r7, #15]
 800443e:	2181      	movs	r1, #129	; 0x81
 8004440:	4618      	mov	r0, r3
 8004442:	f005 fe2b 	bl	800a09c <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 8004446:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004448:	0a1b      	lsrs	r3, r3, #8
 800444a:	b29b      	uxth	r3, r3
 800444c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 800444e:	88fb      	ldrh	r3, [r7, #6]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	b29b      	uxth	r3, r3
 8004454:	7bfa      	ldrb	r2, [r7, #15]
 8004456:	2182      	movs	r1, #130	; 0x82
 8004458:	4618      	mov	r0, r3
 800445a:	f005 fe1f 	bl	800a09c <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 800445e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004460:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 8004462:	88fb      	ldrh	r3, [r7, #6]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	b29b      	uxth	r3, r3
 8004468:	7bfa      	ldrb	r2, [r7, #15]
 800446a:	2183      	movs	r1, #131	; 0x83
 800446c:	4618      	mov	r0, r3
 800446e:	f005 fe15 	bl	800a09c <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 8004472:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004474:	0a1b      	lsrs	r3, r3, #8
 8004476:	b29b      	uxth	r3, r3
 8004478:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 800447a:	88fb      	ldrh	r3, [r7, #6]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	b29b      	uxth	r3, r3
 8004480:	7bfa      	ldrb	r2, [r7, #15]
 8004482:	2184      	movs	r1, #132	; 0x84
 8004484:	4618      	mov	r0, r3
 8004486:	f005 fe09 	bl	800a09c <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 800448a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800448c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 800448e:	88fb      	ldrh	r3, [r7, #6]
 8004490:	b2db      	uxtb	r3, r3
 8004492:	b29b      	uxth	r3, r3
 8004494:	7bfa      	ldrb	r2, [r7, #15]
 8004496:	2185      	movs	r1, #133	; 0x85
 8004498:	4618      	mov	r0, r3
 800449a:	f005 fdff 	bl	800a09c <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 800449e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80044a0:	0a1b      	lsrs	r3, r3, #8
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 80044a6:	88fb      	ldrh	r3, [r7, #6]
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	7bfa      	ldrb	r2, [r7, #15]
 80044ae:	2186      	movs	r1, #134	; 0x86
 80044b0:	4618      	mov	r0, r3
 80044b2:	f005 fdf3 	bl	800a09c <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 80044b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80044b8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 80044ba:	88fb      	ldrh	r3, [r7, #6]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	b29b      	uxth	r3, r3
 80044c0:	7bfa      	ldrb	r2, [r7, #15]
 80044c2:	2187      	movs	r1, #135	; 0x87
 80044c4:	4618      	mov	r0, r3
 80044c6:	f005 fde9 	bl	800a09c <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 80044ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80044cc:	0a1b      	lsrs	r3, r3, #8
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 80044d2:	88fb      	ldrh	r3, [r7, #6]
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	7bfa      	ldrb	r2, [r7, #15]
 80044da:	2188      	movs	r1, #136	; 0x88
 80044dc:	4618      	mov	r0, r3
 80044de:	f005 fddd 	bl	800a09c <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 80044e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80044e4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	7bfa      	ldrb	r2, [r7, #15]
 80044ee:	2189      	movs	r1, #137	; 0x89
 80044f0:	4618      	mov	r0, r3
 80044f2:	f005 fdd3 	bl	800a09c <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 80044f6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80044f8:	0a1b      	lsrs	r3, r3, #8
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	b29b      	uxth	r3, r3
 8004504:	7bfa      	ldrb	r2, [r7, #15]
 8004506:	218a      	movs	r1, #138	; 0x8a
 8004508:	4618      	mov	r0, r3
 800450a:	f005 fdc7 	bl	800a09c <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 800450e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004510:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 8004512:	88fb      	ldrh	r3, [r7, #6]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	b29b      	uxth	r3, r3
 8004518:	7bfa      	ldrb	r2, [r7, #15]
 800451a:	218b      	movs	r1, #139	; 0x8b
 800451c:	4618      	mov	r0, r3
 800451e:	f005 fdbd 	bl	800a09c <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 8004522:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004524:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 8004526:	88fb      	ldrh	r3, [r7, #6]
 8004528:	b2db      	uxtb	r3, r3
 800452a:	b29b      	uxth	r3, r3
 800452c:	7bfa      	ldrb	r2, [r7, #15]
 800452e:	2190      	movs	r1, #144	; 0x90
 8004530:	4618      	mov	r0, r3
 8004532:	f005 fdb3 	bl	800a09c <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 8004536:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004538:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 800453a:	88fb      	ldrh	r3, [r7, #6]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	b29b      	uxth	r3, r3
 8004540:	7bfa      	ldrb	r2, [r7, #15]
 8004542:	2191      	movs	r1, #145	; 0x91
 8004544:	4618      	mov	r0, r3
 8004546:	f005 fda9 	bl	800a09c <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 800454a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800454c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 800454e:	88fb      	ldrh	r3, [r7, #6]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	b29b      	uxth	r3, r3
 8004554:	7bfa      	ldrb	r2, [r7, #15]
 8004556:	2192      	movs	r1, #146	; 0x92
 8004558:	4618      	mov	r0, r3
 800455a:	f005 fd9f 	bl	800a09c <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 800455e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004560:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 8004562:	88fb      	ldrh	r3, [r7, #6]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	b29b      	uxth	r3, r3
 8004568:	7bfa      	ldrb	r2, [r7, #15]
 800456a:	2193      	movs	r1, #147	; 0x93
 800456c:	4618      	mov	r0, r3
 800456e:	f005 fd95 	bl	800a09c <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 8004572:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004574:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 8004576:	88fb      	ldrh	r3, [r7, #6]
 8004578:	b2db      	uxtb	r3, r3
 800457a:	b29b      	uxth	r3, r3
 800457c:	7bfa      	ldrb	r2, [r7, #15]
 800457e:	2194      	movs	r1, #148	; 0x94
 8004580:	4618      	mov	r0, r3
 8004582:	f005 fd8b 	bl	800a09c <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 8004586:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004588:	0a1b      	lsrs	r3, r3, #8
 800458a:	b29b      	uxth	r3, r3
 800458c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 800458e:	88fb      	ldrh	r3, [r7, #6]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	b29b      	uxth	r3, r3
 8004594:	7bfa      	ldrb	r2, [r7, #15]
 8004596:	218c      	movs	r1, #140	; 0x8c
 8004598:	4618      	mov	r0, r3
 800459a:	f005 fd7f 	bl	800a09c <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 800459e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045a0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 80045a2:	88fb      	ldrh	r3, [r7, #6]
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	7bfa      	ldrb	r2, [r7, #15]
 80045aa:	218d      	movs	r1, #141	; 0x8d
 80045ac:	4618      	mov	r0, r3
 80045ae:	f005 fd75 	bl	800a09c <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 80045b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80045b4:	0a1b      	lsrs	r3, r3, #8
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	b29b      	uxth	r3, r3
 80045c0:	7bfa      	ldrb	r2, [r7, #15]
 80045c2:	218e      	movs	r1, #142	; 0x8e
 80045c4:	4618      	mov	r0, r3
 80045c6:	f005 fd69 	bl	800a09c <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 80045ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80045cc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 80045ce:	88fb      	ldrh	r3, [r7, #6]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	7bfa      	ldrb	r2, [r7, #15]
 80045d6:	218f      	movs	r1, #143	; 0x8f
 80045d8:	4618      	mov	r0, r3
 80045da:	f005 fd5f 	bl	800a09c <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 80045de:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80045e2:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 80045e4:	88fb      	ldrh	r3, [r7, #6]
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	7bfa      	ldrb	r2, [r7, #15]
 80045ec:	2196      	movs	r1, #150	; 0x96
 80045ee:	4618      	mov	r0, r3
 80045f0:	f005 fd54 	bl	800a09c <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 80045f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80045f8:	b25b      	sxtb	r3, r3
 80045fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80045fe:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 8004600:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004604:	b25b      	sxtb	r3, r3
 8004606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800460a:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 800460c:	4313      	orrs	r3, r2
 800460e:	b25b      	sxtb	r3, r3
 8004610:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 8004612:	88fb      	ldrh	r3, [r7, #6]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	b29b      	uxth	r3, r3
 8004618:	7bfa      	ldrb	r2, [r7, #15]
 800461a:	2197      	movs	r1, #151	; 0x97
 800461c:	4618      	mov	r0, r3
 800461e:	f005 fd3d 	bl	800a09c <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 8004622:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004626:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 8004628:	88fb      	ldrh	r3, [r7, #6]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	b29b      	uxth	r3, r3
 800462e:	7bfa      	ldrb	r2, [r7, #15]
 8004630:	2198      	movs	r1, #152	; 0x98
 8004632:	4618      	mov	r0, r3
 8004634:	f005 fd32 	bl	800a09c <MFX_IO_Write>
}
 8004638:	bf00      	nop
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004642:	b004      	add	sp, #16
 8004644:	4770      	bx	lr

08004646 <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b084      	sub	sp, #16
 800464a:	af00      	add	r7, sp, #0
 800464c:	4603      	mov	r3, r0
 800464e:	6039      	str	r1, [r7, #0]
 8004650:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 8004652:	88fb      	ldrh	r3, [r7, #6]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	b298      	uxth	r0, r3
 8004658:	f107 020c 	add.w	r2, r7, #12
 800465c:	2303      	movs	r3, #3
 800465e:	2114      	movs	r1, #20
 8004660:	f005 fd44 	bl	800a0ec <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 8004664:	7b3b      	ldrb	r3, [r7, #12]
 8004666:	041a      	lsls	r2, r3, #16
 8004668:	7b7b      	ldrb	r3, [r7, #13]
 800466a:	021b      	lsls	r3, r3, #8
 800466c:	4313      	orrs	r3, r2
 800466e:	7bba      	ldrb	r2, [r7, #14]
 8004670:	4313      	orrs	r3, r2
 8004672:	461a      	mov	r2, r3
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	601a      	str	r2, [r3, #0]

}
 8004678:	bf00      	nop
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	4603      	mov	r3, r0
 8004688:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 800468a:	f005 fca1 	bl	8009fd0 <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 800468e:	88fb      	ldrh	r3, [r7, #6]
 8004690:	2102      	movs	r1, #2
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff f944 	bl	8003920 <mfxstm32l152_EnableITSource>
}
 8004698:	bf00      	nop
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	4603      	mov	r3, r0
 80046a8:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	2102      	movs	r1, #2
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff f98f 	bl	80039d2 <mfxstm32l152_ClearGlobalIT>
}
 80046b4:	bf00      	nop
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	4603      	mov	r3, r0
 80046c4:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 80046c6:	88fb      	ldrh	r3, [r7, #6]
 80046c8:	2102      	movs	r1, #2
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff f96b 	bl	80039a6 <mfxstm32l152_GlobalITStatus>
 80046d0:	4603      	mov	r3, r0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b082      	sub	sp, #8
 80046de:	af00      	add	r7, sp, #0
 80046e0:	4603      	mov	r3, r0
 80046e2:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 80046e4:	88fb      	ldrh	r3, [r7, #6]
 80046e6:	2102      	movs	r1, #2
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7ff f938 	bl	800395e <mfxstm32l152_DisableITSource>
}
 80046ee:	bf00      	nop
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b082      	sub	sp, #8
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	4603      	mov	r3, r0
 80046fe:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 8004700:	88fb      	ldrh	r3, [r7, #6]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	b29b      	uxth	r3, r3
 8004706:	2103      	movs	r1, #3
 8004708:	4618      	mov	r0, r3
 800470a:	f005 fcdb 	bl	800a0c4 <MFX_IO_Read>
 800470e:	4603      	mov	r3, r0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	4603      	mov	r3, r0
 8004720:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 8004722:	88fb      	ldrh	r3, [r7, #6]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	b29b      	uxth	r3, r3
 8004728:	2104      	movs	r1, #4
 800472a:	4618      	mov	r0, r3
 800472c:	f005 fcca 	bl	800a0c4 <MFX_IO_Read>
 8004730:	4603      	mov	r3, r0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b082      	sub	sp, #8
 800473e:	af00      	add	r7, sp, #0
 8004740:	4603      	mov	r3, r0
 8004742:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8004744:	f005 fc44 	bl	8009fd0 <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8004748:	88fb      	ldrh	r3, [r7, #6]
 800474a:	2104      	movs	r1, #4
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff f8e7 	bl	8003920 <mfxstm32l152_EnableITSource>
}
 8004752:	bf00      	nop
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b082      	sub	sp, #8
 800475e:	af00      	add	r7, sp, #0
 8004760:	4603      	mov	r3, r0
 8004762:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8004764:	88fb      	ldrh	r3, [r7, #6]
 8004766:	2104      	movs	r1, #4
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff f932 	bl	80039d2 <mfxstm32l152_ClearGlobalIT>
}
 800476e:	bf00      	nop
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b082      	sub	sp, #8
 800477a:	af00      	add	r7, sp, #0
 800477c:	4603      	mov	r3, r0
 800477e:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 8004780:	88fb      	ldrh	r3, [r7, #6]
 8004782:	2104      	movs	r1, #4
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff f90e 	bl	80039a6 <mfxstm32l152_GlobalITStatus>
 800478a:	4603      	mov	r3, r0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	4603      	mov	r3, r0
 800479c:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 800479e:	88fb      	ldrh	r3, [r7, #6]
 80047a0:	2104      	movs	r1, #4
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff f8db 	bl	800395e <mfxstm32l152_DisableITSource>
}
 80047a8:	bf00      	nop
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	4603      	mov	r3, r0
 80047b8:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80047ba:	2300      	movs	r3, #0
 80047bc:	73fb      	strb	r3, [r7, #15]
 80047be:	e00b      	b.n	80047d8 <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	4a0a      	ldr	r2, [pc, #40]	; (80047ec <mfxstm32l152_GetInstance+0x3c>)
 80047c4:	5cd3      	ldrb	r3, [r2, r3]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	88fa      	ldrh	r2, [r7, #6]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d101      	bne.n	80047d2 <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 80047ce:	7bfb      	ldrb	r3, [r7, #15]
 80047d0:	e006      	b.n	80047e0 <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	3301      	adds	r3, #1
 80047d6:	73fb      	strb	r3, [r7, #15]
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d9f0      	bls.n	80047c0 <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 80047de:	23ff      	movs	r3, #255	; 0xff
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	200011a8 	.word	0x200011a8

080047f0 <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	4603      	mov	r3, r0
 80047f8:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80047fa:	2300      	movs	r3, #0
 80047fc:	73fb      	strb	r3, [r7, #15]
 80047fe:	e00f      	b.n	8004820 <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	4a0c      	ldr	r2, [pc, #48]	; (8004834 <mfxstm32l152_ReleaseInstance+0x44>)
 8004804:	5cd3      	ldrb	r3, [r2, r3]
 8004806:	b29b      	uxth	r3, r3
 8004808:	88fa      	ldrh	r2, [r7, #6]
 800480a:	429a      	cmp	r2, r3
 800480c:	d105      	bne.n	800481a <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 800480e:	7bfb      	ldrb	r3, [r7, #15]
 8004810:	4a08      	ldr	r2, [pc, #32]	; (8004834 <mfxstm32l152_ReleaseInstance+0x44>)
 8004812:	2100      	movs	r1, #0
 8004814:	54d1      	strb	r1, [r2, r3]
      return idx;
 8004816:	7bfb      	ldrb	r3, [r7, #15]
 8004818:	e006      	b.n	8004828 <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 800481a:	7bfb      	ldrb	r3, [r7, #15]
 800481c:	3301      	adds	r3, #1
 800481e:	73fb      	strb	r3, [r7, #15]
 8004820:	7bfb      	ldrb	r3, [r7, #15]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d9ec      	bls.n	8004800 <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 8004826:	23ff      	movs	r3, #255	; 0xff
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	200011a8 	.word	0x200011a8

08004838 <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	603a      	str	r2, [r7, #0]
 8004840:	461a      	mov	r2, r3
 8004842:	4603      	mov	r3, r0
 8004844:	80fb      	strh	r3, [r7, #6]
 8004846:	460b      	mov	r3, r1
 8004848:	717b      	strb	r3, [r7, #5]
 800484a:	4613      	mov	r3, r2
 800484c:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 800484e:	2300      	movs	r3, #0
 8004850:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	0a1b      	lsrs	r3, r3, #8
 800485a:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	0c1b      	lsrs	r3, r3, #16
 8004860:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 8004862:	7bbb      	ldrb	r3, [r7, #14]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d01e      	beq.n	80048a6 <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 8004868:	797a      	ldrb	r2, [r7, #5]
 800486a:	88fb      	ldrh	r3, [r7, #6]
 800486c:	4611      	mov	r1, r2
 800486e:	4618      	mov	r0, r3
 8004870:	f005 fc28 	bl	800a0c4 <MFX_IO_Read>
 8004874:	4603      	mov	r3, r0
 8004876:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8004878:	793b      	ldrb	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d004      	beq.n	8004888 <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 800487e:	7bfa      	ldrb	r2, [r7, #15]
 8004880:	7bbb      	ldrb	r3, [r7, #14]
 8004882:	4313      	orrs	r3, r2
 8004884:	73fb      	strb	r3, [r7, #15]
 8004886:	e008      	b.n	800489a <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 8004888:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800488c:	43db      	mvns	r3, r3
 800488e:	b25a      	sxtb	r2, r3
 8004890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004894:	4013      	ands	r3, r2
 8004896:	b25b      	sxtb	r3, r3
 8004898:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 800489a:	7bfa      	ldrb	r2, [r7, #15]
 800489c:	7979      	ldrb	r1, [r7, #5]
 800489e:	88fb      	ldrh	r3, [r7, #6]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f005 fbfb 	bl	800a09c <MFX_IO_Write>
  }

  if (pin_8_15)
 80048a6:	7b7b      	ldrb	r3, [r7, #13]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d022      	beq.n	80048f2 <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 80048ac:	797b      	ldrb	r3, [r7, #5]
 80048ae:	3301      	adds	r3, #1
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	88fb      	ldrh	r3, [r7, #6]
 80048b4:	4611      	mov	r1, r2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f005 fc04 	bl	800a0c4 <MFX_IO_Read>
 80048bc:	4603      	mov	r3, r0
 80048be:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80048c0:	793b      	ldrb	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d004      	beq.n	80048d0 <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 80048c6:	7bfa      	ldrb	r2, [r7, #15]
 80048c8:	7b7b      	ldrb	r3, [r7, #13]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	73fb      	strb	r3, [r7, #15]
 80048ce:	e008      	b.n	80048e2 <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 80048d0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80048d4:	43db      	mvns	r3, r3
 80048d6:	b25a      	sxtb	r2, r3
 80048d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048dc:	4013      	ands	r3, r2
 80048de:	b25b      	sxtb	r3, r3
 80048e0:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 80048e2:	797b      	ldrb	r3, [r7, #5]
 80048e4:	3301      	adds	r3, #1
 80048e6:	b2d9      	uxtb	r1, r3
 80048e8:	7bfa      	ldrb	r2, [r7, #15]
 80048ea:	88fb      	ldrh	r3, [r7, #6]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f005 fbd5 	bl	800a09c <MFX_IO_Write>
  }

  if (pin_16_23)
 80048f2:	7b3b      	ldrb	r3, [r7, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d022      	beq.n	800493e <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 80048f8:	797b      	ldrb	r3, [r7, #5]
 80048fa:	3302      	adds	r3, #2
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	88fb      	ldrh	r3, [r7, #6]
 8004900:	4611      	mov	r1, r2
 8004902:	4618      	mov	r0, r3
 8004904:	f005 fbde 	bl	800a0c4 <MFX_IO_Read>
 8004908:	4603      	mov	r3, r0
 800490a:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 800490c:	793b      	ldrb	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d004      	beq.n	800491c <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 8004912:	7bfa      	ldrb	r2, [r7, #15]
 8004914:	7b3b      	ldrb	r3, [r7, #12]
 8004916:	4313      	orrs	r3, r2
 8004918:	73fb      	strb	r3, [r7, #15]
 800491a:	e008      	b.n	800492e <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 800491c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8004920:	43db      	mvns	r3, r3
 8004922:	b25a      	sxtb	r2, r3
 8004924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004928:	4013      	ands	r3, r2
 800492a:	b25b      	sxtb	r3, r3
 800492c:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 800492e:	797b      	ldrb	r3, [r7, #5]
 8004930:	3302      	adds	r3, #2
 8004932:	b2d9      	uxtb	r1, r3
 8004934:	7bfa      	ldrb	r2, [r7, #15]
 8004936:	88fb      	ldrh	r3, [r7, #6]
 8004938:	4618      	mov	r0, r3
 800493a:	f005 fbaf 	bl	800a09c <MFX_IO_Write>
  }
}
 800493e:	bf00      	nop
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b084      	sub	sp, #16
 800494a:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800494c:	f005 fcf0 	bl	800a330 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8004950:	2200      	movs	r2, #0
 8004952:	2100      	movs	r1, #0
 8004954:	2010      	movs	r0, #16
 8004956:	f000 f9e4 	bl	8004d22 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 800495a:	200a      	movs	r0, #10
 800495c:	f005 fd0f 	bl	800a37e <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8004960:	2200      	movs	r2, #0
 8004962:	2100      	movs	r1, #0
 8004964:	2001      	movs	r0, #1
 8004966:	f000 f9dc 	bl	8004d22 <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 800496a:	20c8      	movs	r0, #200	; 0xc8
 800496c:	f005 fd07 	bl	800a37e <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8004970:	2200      	movs	r2, #0
 8004972:	2100      	movs	r1, #0
 8004974:	2011      	movs	r0, #17
 8004976:	f000 f9d4 	bl	8004d22 <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 800497a:	2078      	movs	r0, #120	; 0x78
 800497c:	f005 fcff 	bl	800a37e <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 8004980:	2300      	movs	r3, #0
 8004982:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8004984:	463b      	mov	r3, r7
 8004986:	2201      	movs	r2, #1
 8004988:	4619      	mov	r1, r3
 800498a:	2036      	movs	r0, #54	; 0x36
 800498c:	f000 f9c9 	bl	8004d22 <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 8004990:	2305      	movs	r3, #5
 8004992:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8004994:	463b      	mov	r3, r7
 8004996:	2201      	movs	r2, #1
 8004998:	4619      	mov	r1, r3
 800499a:	203a      	movs	r0, #58	; 0x3a
 800499c:	f000 f9c1 	bl	8004d22 <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 80049a0:	2200      	movs	r2, #0
 80049a2:	2100      	movs	r1, #0
 80049a4:	2021      	movs	r0, #33	; 0x21
 80049a6:	f000 f9bc 	bl	8004d22 <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 80049aa:	2300      	movs	r3, #0
 80049ac:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80049ae:	2300      	movs	r3, #0
 80049b0:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80049b2:	2300      	movs	r3, #0
 80049b4:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 80049b6:	23ef      	movs	r3, #239	; 0xef
 80049b8:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 80049ba:	463b      	mov	r3, r7
 80049bc:	2204      	movs	r2, #4
 80049be:	4619      	mov	r1, r3
 80049c0:	202a      	movs	r0, #42	; 0x2a
 80049c2:	f000 f9ae 	bl	8004d22 <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 80049c6:	2300      	movs	r3, #0
 80049c8:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80049ca:	2300      	movs	r3, #0
 80049cc:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80049ce:	2300      	movs	r3, #0
 80049d0:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 80049d2:	23ef      	movs	r3, #239	; 0xef
 80049d4:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 80049d6:	463b      	mov	r3, r7
 80049d8:	2204      	movs	r2, #4
 80049da:	4619      	mov	r1, r3
 80049dc:	202b      	movs	r0, #43	; 0x2b
 80049de:	f000 f9a0 	bl	8004d22 <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 80049e2:	230c      	movs	r3, #12
 80049e4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 80049e6:	230c      	movs	r3, #12
 80049e8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80049ea:	2300      	movs	r3, #0
 80049ec:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 80049ee:	2333      	movs	r3, #51	; 0x33
 80049f0:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 80049f2:	2333      	movs	r3, #51	; 0x33
 80049f4:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 80049f6:	463b      	mov	r3, r7
 80049f8:	2205      	movs	r2, #5
 80049fa:	4619      	mov	r1, r3
 80049fc:	20b2      	movs	r0, #178	; 0xb2
 80049fe:	f000 f990 	bl	8004d22 <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 8004a02:	2335      	movs	r3, #53	; 0x35
 8004a04:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8004a06:	463b      	mov	r3, r7
 8004a08:	2201      	movs	r2, #1
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	20b7      	movs	r0, #183	; 0xb7
 8004a0e:	f000 f988 	bl	8004d22 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 8004a12:	231f      	movs	r3, #31
 8004a14:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8004a16:	463b      	mov	r3, r7
 8004a18:	2201      	movs	r2, #1
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	20bb      	movs	r0, #187	; 0xbb
 8004a1e:	f000 f980 	bl	8004d22 <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 8004a22:	232c      	movs	r3, #44	; 0x2c
 8004a24:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8004a26:	463b      	mov	r3, r7
 8004a28:	2201      	movs	r2, #1
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	20c0      	movs	r0, #192	; 0xc0
 8004a2e:	f000 f978 	bl	8004d22 <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 8004a32:	2301      	movs	r3, #1
 8004a34:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 8004a36:	23c3      	movs	r3, #195	; 0xc3
 8004a38:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8004a3a:	463b      	mov	r3, r7
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	4619      	mov	r1, r3
 8004a40:	20c2      	movs	r0, #194	; 0xc2
 8004a42:	f000 f96e 	bl	8004d22 <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 8004a46:	2320      	movs	r3, #32
 8004a48:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8004a4a:	463b      	mov	r3, r7
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	4619      	mov	r1, r3
 8004a50:	20c4      	movs	r0, #196	; 0xc4
 8004a52:	f000 f966 	bl	8004d22 <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 8004a56:	230f      	movs	r3, #15
 8004a58:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8004a5a:	463b      	mov	r3, r7
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	4619      	mov	r1, r3
 8004a60:	20c6      	movs	r0, #198	; 0xc6
 8004a62:	f000 f95e 	bl	8004d22 <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 8004a66:	23a4      	movs	r3, #164	; 0xa4
 8004a68:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8004a6a:	23a1      	movs	r3, #161	; 0xa1
 8004a6c:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 2); 
 8004a6e:	463b      	mov	r3, r7
 8004a70:	2202      	movs	r2, #2
 8004a72:	4619      	mov	r1, r3
 8004a74:	20d0      	movs	r0, #208	; 0xd0
 8004a76:	f000 f954 	bl	8004d22 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 8004a7a:	23d0      	movs	r3, #208	; 0xd0
 8004a7c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8004a7e:	2308      	movs	r3, #8
 8004a80:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 8004a82:	2311      	movs	r3, #17
 8004a84:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8004a86:	2308      	movs	r3, #8
 8004a88:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 8004a8a:	230c      	movs	r3, #12
 8004a8c:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 8004a8e:	2315      	movs	r3, #21
 8004a90:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8004a92:	2339      	movs	r3, #57	; 0x39
 8004a94:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8004a96:	2333      	movs	r3, #51	; 0x33
 8004a98:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 8004a9a:	2350      	movs	r3, #80	; 0x50
 8004a9c:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 8004a9e:	2336      	movs	r3, #54	; 0x36
 8004aa0:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 8004aa2:	2313      	movs	r3, #19
 8004aa4:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8004aa6:	2314      	movs	r3, #20
 8004aa8:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8004aaa:	2329      	movs	r3, #41	; 0x29
 8004aac:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 8004aae:	232d      	movs	r3, #45	; 0x2d
 8004ab0:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8004ab2:	463b      	mov	r3, r7
 8004ab4:	220e      	movs	r2, #14
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	20e0      	movs	r0, #224	; 0xe0
 8004aba:	f000 f932 	bl	8004d22 <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 8004abe:	23d0      	movs	r3, #208	; 0xd0
 8004ac0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8004ac2:	2308      	movs	r3, #8
 8004ac4:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 8004ac6:	2310      	movs	r3, #16
 8004ac8:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8004aca:	2308      	movs	r3, #8
 8004acc:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8004ace:	2306      	movs	r3, #6
 8004ad0:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 8004ad2:	2306      	movs	r3, #6
 8004ad4:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8004ad6:	2339      	movs	r3, #57	; 0x39
 8004ad8:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8004ada:	2344      	movs	r3, #68	; 0x44
 8004adc:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 8004ade:	2351      	movs	r3, #81	; 0x51
 8004ae0:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 8004ae2:	230b      	movs	r3, #11
 8004ae4:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 8004ae6:	2316      	movs	r3, #22
 8004ae8:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8004aea:	2314      	movs	r3, #20
 8004aec:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 8004aee:	232f      	movs	r3, #47	; 0x2f
 8004af0:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 8004af2:	2331      	movs	r3, #49	; 0x31
 8004af4:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8004af6:	463b      	mov	r3, r7
 8004af8:	220e      	movs	r2, #14
 8004afa:	4619      	mov	r1, r3
 8004afc:	20e1      	movs	r0, #225	; 0xe1
 8004afe:	f000 f910 	bl	8004d22 <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 8004b02:	f000 f847 	bl	8004b94 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 8004b06:	2300      	movs	r3, #0
 8004b08:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8004b0a:	463b      	mov	r3, r7
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	4619      	mov	r1, r3
 8004b10:	2035      	movs	r0, #53	; 0x35
 8004b12:	f000 f906 	bl	8004d22 <ST7789H2_WriteReg>

}
 8004b16:	bf00      	nop
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b084      	sub	sp, #16
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d102      	bne.n	8004b32 <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	723b      	strb	r3, [r7, #8]
 8004b30:	e025      	b.n	8004b7e <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d120      	bne.n	8004b7a <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8004b40:	2301      	movs	r3, #1
 8004b42:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8004b44:	23f0      	movs	r3, #240	; 0xf0
 8004b46:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8004b50:	f107 0308 	add.w	r3, r7, #8
 8004b54:	2206      	movs	r2, #6
 8004b56:	4619      	mov	r1, r3
 8004b58:	2033      	movs	r0, #51	; 0x33
 8004b5a:	f000 f8e2 	bl	8004d22 <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 8004b62:	2350      	movs	r3, #80	; 0x50
 8004b64:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8004b66:	f107 0308 	add.w	r3, r7, #8
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	2037      	movs	r0, #55	; 0x37
 8004b70:	f000 f8d7 	bl	8004d22 <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8004b74:	23c0      	movs	r3, #192	; 0xc0
 8004b76:	723b      	strb	r3, [r7, #8]
 8004b78:	e001      	b.n	8004b7e <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 8004b7a:	2360      	movs	r3, #96	; 0x60
 8004b7c:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8004b7e:	f107 0308 	add.w	r3, r7, #8
 8004b82:	2201      	movs	r2, #1
 8004b84:	4619      	mov	r1, r3
 8004b86:	2036      	movs	r0, #54	; 0x36
 8004b88:	f000 f8cb 	bl	8004d22 <ST7789H2_WriteReg>
}
 8004b8c:	bf00      	nop
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	2029      	movs	r0, #41	; 0x29
 8004b9e:	f000 f8c0 	bl	8004d22 <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	2011      	movs	r0, #17
 8004ba8:	f000 f8bb 	bl	8004d22 <ST7789H2_WriteReg>
}
 8004bac:	bf00      	nop
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 8004bb6:	23fe      	movs	r3, #254	; 0xfe
 8004bb8:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8004bba:	1d3b      	adds	r3, r7, #4
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	20bd      	movs	r0, #189	; 0xbd
 8004bc2:	f000 f8ae 	bl	8004d22 <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	2100      	movs	r1, #0
 8004bca:	2010      	movs	r0, #16
 8004bcc:	f000 f8a9 	bl	8004d22 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8004bd0:	200a      	movs	r0, #10
 8004bd2:	f005 fbd4 	bl	800a37e <LCD_IO_Delay>
}
 8004bd6:	bf00      	nop
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 8004bde:	b480      	push	{r7}
 8004be0:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 8004be2:	23f0      	movs	r3, #240	; 0xf0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 8004bf2:	23f0      	movs	r3, #240	; 0xf0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8004c02:	f005 fb95 	bl	800a330 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 8004c06:	2004      	movs	r0, #4
 8004c08:	f000 f8ae 	bl	8004d68 <ST7789H2_ReadReg>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	b29b      	uxth	r3, r3
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	460a      	mov	r2, r1
 8004c1e:	80fb      	strh	r3, [r7, #6]
 8004c20:	4613      	mov	r3, r2
 8004c22:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8004c24:	2300      	movs	r3, #0
 8004c26:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8004c28:	88fb      	ldrh	r3, [r7, #6]
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 8004c32:	88fb      	ldrh	r3, [r7, #6]
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	3b11      	subs	r3, #17
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8004c3c:	f107 030c 	add.w	r3, r7, #12
 8004c40:	2204      	movs	r2, #4
 8004c42:	4619      	mov	r1, r3
 8004c44:	202a      	movs	r0, #42	; 0x2a
 8004c46:	f000 f86c 	bl	8004d22 <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8004c4e:	88bb      	ldrh	r3, [r7, #4]
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8004c54:	2300      	movs	r3, #0
 8004c56:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 8004c58:	88bb      	ldrh	r3, [r7, #4]
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	3b11      	subs	r3, #17
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8004c62:	f107 030c 	add.w	r3, r7, #12
 8004c66:	2204      	movs	r2, #4
 8004c68:	4619      	mov	r1, r3
 8004c6a:	202b      	movs	r0, #43	; 0x2b
 8004c6c:	f000 f859 	bl	8004d22 <ST7789H2_WriteReg>
}
 8004c70:	bf00      	nop
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	4603      	mov	r3, r0
 8004c80:	80fb      	strh	r3, [r7, #6]
 8004c82:	460b      	mov	r3, r1
 8004c84:	80bb      	strh	r3, [r7, #4]
 8004c86:	4613      	mov	r3, r2
 8004c88:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8004c8a:	88ba      	ldrh	r2, [r7, #4]
 8004c8c:	88fb      	ldrh	r3, [r7, #6]
 8004c8e:	4611      	mov	r1, r2
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7ff ffbf 	bl	8004c14 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8004c96:	2200      	movs	r2, #0
 8004c98:	2100      	movs	r1, #0
 8004c9a:	202c      	movs	r0, #44	; 0x2c
 8004c9c:	f000 f841 	bl	8004d22 <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 8004ca0:	887b      	ldrh	r3, [r7, #2]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f005 fb4a 	bl	800a33c <LCD_IO_WriteData>
}
 8004ca8:	bf00      	nop
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	460a      	mov	r2, r1
 8004cba:	80fb      	strh	r3, [r7, #6]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8004cc0:	88ba      	ldrh	r2, [r7, #4]
 8004cc2:	88fb      	ldrh	r3, [r7, #6]
 8004cc4:	4611      	mov	r1, r2
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff ffa4 	bl	8004c14 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8004ccc:	88ba      	ldrh	r2, [r7, #4]
 8004cce:	88fb      	ldrh	r3, [r7, #6]
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 f9c0 	bl	8005058 <ST7789H2_ReadPixel_rgb888>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	461a      	mov	r2, r3
 8004cdc:	733a      	strb	r2, [r7, #12]
 8004cde:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004ce2:	737a      	strb	r2, [r7, #13]
 8004ce4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004ce8:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8004cea:	7b3b      	ldrb	r3, [r7, #12]
 8004cec:	08db      	lsrs	r3, r3, #3
 8004cee:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8004cf0:	7b7b      	ldrb	r3, [r7, #13]
 8004cf2:	089b      	lsrs	r3, r3, #2
 8004cf4:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 8004cf6:	7bbb      	ldrb	r3, [r7, #14]
 8004cf8:	08db      	lsrs	r3, r3, #3
 8004cfa:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8004cfc:	7dfb      	ldrb	r3, [r7, #23]
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	02db      	lsls	r3, r3, #11
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	7dbb      	ldrb	r3, [r7, #22]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	015b      	lsls	r3, r3, #5
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	4413      	add	r3, r2
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	7d7b      	ldrb	r3, [r7, #21]
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	4413      	add	r3, r2
 8004d16:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8004d18:	8a7b      	ldrh	r3, [r7, #18]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b084      	sub	sp, #16
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	4603      	mov	r3, r0
 8004d2a:	6039      	str	r1, [r7, #0]
 8004d2c:	71fb      	strb	r3, [r7, #7]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8004d32:	79fb      	ldrb	r3, [r7, #7]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f005 fb0e 	bl	800a356 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	73fb      	strb	r3, [r7, #15]
 8004d3e:	e00a      	b.n	8004d56 <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	4413      	add	r3, r2
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f005 faf6 	bl	800a33c <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
 8004d52:	3301      	adds	r3, #1
 8004d54:	73fb      	strb	r3, [r7, #15]
 8004d56:	7bfa      	ldrb	r2, [r7, #15]
 8004d58:	79bb      	ldrb	r3, [r7, #6]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d3f0      	bcc.n	8004d40 <ST7789H2_WriteReg+0x1e>
  }
}
 8004d5e:	bf00      	nop
 8004d60:	bf00      	nop
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	4603      	mov	r3, r0
 8004d70:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 8004d72:	79fb      	ldrb	r3, [r7, #7]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f005 faee 	bl	800a356 <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 8004d7a:	f005 faf9 	bl	800a370 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 8004d7e:	f005 faf7 	bl	800a370 <LCD_IO_ReadData>
 8004d82:	4603      	mov	r3, r0
 8004d84:	b2db      	uxtb	r3, r3
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004d90:	b490      	push	{r4, r7}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	4604      	mov	r4, r0
 8004d98:	4608      	mov	r0, r1
 8004d9a:	4611      	mov	r1, r2
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4623      	mov	r3, r4
 8004da0:	80fb      	strh	r3, [r7, #6]
 8004da2:	4603      	mov	r3, r0
 8004da4:	80bb      	strh	r3, [r7, #4]
 8004da6:	460b      	mov	r3, r1
 8004da8:	807b      	strh	r3, [r7, #2]
 8004daa:	4613      	mov	r3, r2
 8004dac:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 8004dae:	88fb      	ldrh	r3, [r7, #6]
 8004db0:	2bef      	cmp	r3, #239	; 0xef
 8004db2:	d803      	bhi.n	8004dbc <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8004db4:	4a1b      	ldr	r2, [pc, #108]	; (8004e24 <ST7789H2_SetDisplayWindow+0x94>)
 8004db6:	88fb      	ldrh	r3, [r7, #6]
 8004db8:	8013      	strh	r3, [r2, #0]
 8004dba:	e002      	b.n	8004dc2 <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8004dbc:	4b19      	ldr	r3, [pc, #100]	; (8004e24 <ST7789H2_SetDisplayWindow+0x94>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 8004dc2:	88bb      	ldrh	r3, [r7, #4]
 8004dc4:	2bef      	cmp	r3, #239	; 0xef
 8004dc6:	d803      	bhi.n	8004dd0 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8004dc8:	4a17      	ldr	r2, [pc, #92]	; (8004e28 <ST7789H2_SetDisplayWindow+0x98>)
 8004dca:	88bb      	ldrh	r3, [r7, #4]
 8004dcc:	8013      	strh	r3, [r2, #0]
 8004dce:	e002      	b.n	8004dd6 <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8004dd0:	4b15      	ldr	r3, [pc, #84]	; (8004e28 <ST7789H2_SetDisplayWindow+0x98>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 8004dd6:	887a      	ldrh	r2, [r7, #2]
 8004dd8:	88fb      	ldrh	r3, [r7, #6]
 8004dda:	4413      	add	r3, r2
 8004ddc:	2bf0      	cmp	r3, #240	; 0xf0
 8004dde:	dc08      	bgt.n	8004df2 <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8004de0:	887a      	ldrh	r2, [r7, #2]
 8004de2:	88fb      	ldrh	r3, [r7, #6]
 8004de4:	4413      	add	r3, r2
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	4b0f      	ldr	r3, [pc, #60]	; (8004e2c <ST7789H2_SetDisplayWindow+0x9c>)
 8004dee:	801a      	strh	r2, [r3, #0]
 8004df0:	e002      	b.n	8004df8 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8004df2:	4b0e      	ldr	r3, [pc, #56]	; (8004e2c <ST7789H2_SetDisplayWindow+0x9c>)
 8004df4:	22ef      	movs	r2, #239	; 0xef
 8004df6:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8004df8:	883a      	ldrh	r2, [r7, #0]
 8004dfa:	88bb      	ldrh	r3, [r7, #4]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	2bf0      	cmp	r3, #240	; 0xf0
 8004e00:	dc08      	bgt.n	8004e14 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8004e02:	883a      	ldrh	r2, [r7, #0]
 8004e04:	88bb      	ldrh	r3, [r7, #4]
 8004e06:	4413      	add	r3, r2
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	4b08      	ldr	r3, [pc, #32]	; (8004e30 <ST7789H2_SetDisplayWindow+0xa0>)
 8004e10:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8004e12:	e002      	b.n	8004e1a <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8004e14:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <ST7789H2_SetDisplayWindow+0xa0>)
 8004e16:	22ef      	movs	r2, #239	; 0xef
 8004e18:	801a      	strh	r2, [r3, #0]
}
 8004e1a:	bf00      	nop
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc90      	pop	{r4, r7}
 8004e22:	4770      	bx	lr
 8004e24:	200011ac 	.word	0x200011ac
 8004e28:	200011ae 	.word	0x200011ae
 8004e2c:	20000270 	.word	0x20000270
 8004e30:	20000272 	.word	0x20000272

08004e34 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004e34:	b590      	push	{r4, r7, lr}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	4611      	mov	r1, r2
 8004e40:	461a      	mov	r2, r3
 8004e42:	4623      	mov	r3, r4
 8004e44:	80fb      	strh	r3, [r7, #6]
 8004e46:	4603      	mov	r3, r0
 8004e48:	80bb      	strh	r3, [r7, #4]
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	807b      	strh	r3, [r7, #2]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	803b      	strh	r3, [r7, #0]
  uint16_t counter;
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 8004e52:	887a      	ldrh	r2, [r7, #2]
 8004e54:	88bb      	ldrh	r3, [r7, #4]
 8004e56:	4611      	mov	r1, r2
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7ff fedb 	bl	8004c14 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8004e5e:	2200      	movs	r2, #0
 8004e60:	2100      	movs	r1, #0
 8004e62:	202c      	movs	r0, #44	; 0x2c
 8004e64:	f7ff ff5d 	bl	8004d22 <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8004e68:	2300      	movs	r3, #0
 8004e6a:	81fb      	strh	r3, [r7, #14]
 8004e6c:	e006      	b.n	8004e7c <ST7789H2_DrawHLine+0x48>
  {
    LCD_IO_WriteData(RGBCode);
 8004e6e:	88fb      	ldrh	r3, [r7, #6]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f005 fa63 	bl	800a33c <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8004e76:	89fb      	ldrh	r3, [r7, #14]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	81fb      	strh	r3, [r7, #14]
 8004e7c:	89fa      	ldrh	r2, [r7, #14]
 8004e7e:	883b      	ldrh	r3, [r7, #0]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d3f4      	bcc.n	8004e6e <ST7789H2_DrawHLine+0x3a>
  }  
}
 8004e84:	bf00      	nop
 8004e86:	bf00      	nop
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd90      	pop	{r4, r7, pc}

08004e8e <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004e8e:	b590      	push	{r4, r7, lr}
 8004e90:	b085      	sub	sp, #20
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	4604      	mov	r4, r0
 8004e96:	4608      	mov	r0, r1
 8004e98:	4611      	mov	r1, r2
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	4623      	mov	r3, r4
 8004e9e:	80fb      	strh	r3, [r7, #6]
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	80bb      	strh	r3, [r7, #4]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	807b      	strh	r3, [r7, #2]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	803b      	strh	r3, [r7, #0]
  uint16_t counter;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8004eac:	887a      	ldrh	r2, [r7, #2]
 8004eae:	88bb      	ldrh	r3, [r7, #4]
 8004eb0:	4611      	mov	r1, r2
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7ff feae 	bl	8004c14 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2100      	movs	r1, #0
 8004ebc:	202c      	movs	r0, #44	; 0x2c
 8004ebe:	f7ff ff30 	bl	8004d22 <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	81fb      	strh	r3, [r7, #14]
 8004ec6:	e00b      	b.n	8004ee0 <ST7789H2_DrawVLine+0x52>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8004ec8:	887a      	ldrh	r2, [r7, #2]
 8004eca:	89fb      	ldrh	r3, [r7, #14]
 8004ecc:	4413      	add	r3, r2
 8004ece:	b299      	uxth	r1, r3
 8004ed0:	88fa      	ldrh	r2, [r7, #6]
 8004ed2:	88bb      	ldrh	r3, [r7, #4]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff fecf 	bl	8004c78 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8004eda:	89fb      	ldrh	r3, [r7, #14]
 8004edc:	3301      	adds	r3, #1
 8004ede:	81fb      	strh	r3, [r7, #14]
 8004ee0:	89fa      	ldrh	r2, [r7, #14]
 8004ee2:	883b      	ldrh	r3, [r7, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d3ef      	bcc.n	8004ec8 <ST7789H2_DrawVLine+0x3a>
  }
}
 8004ee8:	bf00      	nop
 8004eea:	bf00      	nop
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd90      	pop	{r4, r7, pc}
	...

08004ef4 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	4603      	mov	r3, r0
 8004efc:	603a      	str	r2, [r7, #0]
 8004efe:	80fb      	strh	r3, [r7, #6]
 8004f00:	460b      	mov	r3, r1
 8004f02:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	2300      	movs	r3, #0
 8004f0a:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8004f10:	4b30      	ldr	r3, [pc, #192]	; (8004fd4 <ST7789H2_DrawBitmap+0xe0>)
 8004f12:	881a      	ldrh	r2, [r3, #0]
 8004f14:	4b30      	ldr	r3, [pc, #192]	; (8004fd8 <ST7789H2_DrawBitmap+0xe4>)
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8004f20:	4b2e      	ldr	r3, [pc, #184]	; (8004fdc <ST7789H2_DrawBitmap+0xe8>)
 8004f22:	881a      	ldrh	r2, [r3, #0]
 8004f24:	4b2e      	ldr	r3, [pc, #184]	; (8004fe0 <ST7789H2_DrawBitmap+0xec>)
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	3302      	adds	r3, #2
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	041b      	lsls	r3, r3, #16
 8004f44:	461a      	mov	r2, r3
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	330a      	adds	r3, #10
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	330c      	adds	r3, #12
 8004f5a:	881b      	ldrh	r3, [r3, #0]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	041b      	lsls	r3, r3, #16
 8004f60:	461a      	mov	r2, r3
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	085b      	lsrs	r3, r3, #1
 8004f70:	613b      	str	r3, [r7, #16]
  pbmp += index;
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	4413      	add	r3, r2
 8004f78:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8004f7a:	88ba      	ldrh	r2, [r7, #4]
 8004f7c:	89bb      	ldrh	r3, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	61fb      	str	r3, [r7, #28]
 8004f82:	e01d      	b.n	8004fc0 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	88fb      	ldrh	r3, [r7, #6]
 8004f8e:	4611      	mov	r1, r2
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff fe3f 	bl	8004c14 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b299      	uxth	r1, r3
 8004f9e:	89fb      	ldrh	r3, [r7, #14]
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	fb02 f303 	mul.w	r3, r2, r3
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	4413      	add	r3, r2
 8004fac:	89fa      	ldrh	r2, [r7, #14]
 8004fae:	88f8      	ldrh	r0, [r7, #6]
 8004fb0:	f000 f89c 	bl	80050ec <ST7789H2_DrawRGBHLine>
    nb_line++;
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	61fb      	str	r3, [r7, #28]
 8004fc0:	88bb      	ldrh	r3, [r7, #4]
 8004fc2:	69fa      	ldr	r2, [r7, #28]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d8dd      	bhi.n	8004f84 <ST7789H2_DrawBitmap+0x90>
  }
}
 8004fc8:	bf00      	nop
 8004fca:	bf00      	nop
 8004fcc:	3720      	adds	r7, #32
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	20000270 	.word	0x20000270
 8004fd8:	200011ac 	.word	0x200011ac
 8004fdc:	20000272 	.word	0x20000272
 8004fe0:	200011ae 	.word	0x200011ae

08004fe4 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8004fe4:	b590      	push	{r4, r7, lr}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	4604      	mov	r4, r0
 8004fec:	4608      	mov	r0, r1
 8004fee:	4611      	mov	r1, r2
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	4623      	mov	r3, r4
 8004ff4:	80fb      	strh	r3, [r7, #6]
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	80bb      	strh	r3, [r7, #4]
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	807b      	strh	r3, [r7, #2]
 8004ffe:	4613      	mov	r3, r2
 8005000:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8005002:	2300      	movs	r3, #0
 8005004:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8005006:	88bb      	ldrh	r3, [r7, #4]
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	e019      	b.n	8005040 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	b29a      	uxth	r2, r3
 8005010:	88fb      	ldrh	r3, [r7, #6]
 8005012:	4611      	mov	r1, r2
 8005014:	4618      	mov	r0, r3
 8005016:	f7ff fdfd 	bl	8004c14 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	b299      	uxth	r1, r3
 800501e:	887b      	ldrh	r3, [r7, #2]
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	fb02 f303 	mul.w	r3, r2, r3
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	6a3a      	ldr	r2, [r7, #32]
 800502a:	4413      	add	r3, r2
 800502c:	887a      	ldrh	r2, [r7, #2]
 800502e:	88f8      	ldrh	r0, [r7, #6]
 8005030:	f000 f85c 	bl	80050ec <ST7789H2_DrawRGBHLine>
    nb_line++;
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	3301      	adds	r3, #1
 8005038:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3301      	adds	r3, #1
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	88ba      	ldrh	r2, [r7, #4]
 8005042:	883b      	ldrh	r3, [r7, #0]
 8005044:	4413      	add	r3, r2
 8005046:	461a      	mov	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4293      	cmp	r3, r2
 800504c:	d3de      	bcc.n	800500c <ST7789H2_DrawRGBImage+0x28>
  }
}
 800504e:	bf00      	nop
 8005050:	bf00      	nop
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	bd90      	pop	{r4, r7, pc}

08005058 <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	4603      	mov	r3, r0
 8005060:	460a      	mov	r2, r1
 8005062:	80fb      	strh	r3, [r7, #6]
 8005064:	4613      	mov	r3, r2
 8005066:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8005068:	88ba      	ldrh	r2, [r7, #4]
 800506a:	88fb      	ldrh	r3, [r7, #6]
 800506c:	4611      	mov	r1, r2
 800506e:	4618      	mov	r0, r3
 8005070:	f7ff fdd0 	bl	8004c14 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8005074:	2200      	movs	r2, #0
 8005076:	2100      	movs	r1, #0
 8005078:	202e      	movs	r0, #46	; 0x2e
 800507a:	f7ff fe52 	bl	8004d22 <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 800507e:	f005 f977 	bl	800a370 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8005082:	f005 f975 	bl	800a370 <LCD_IO_ReadData>
 8005086:	4603      	mov	r3, r0
 8005088:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 800508a:	f005 f971 	bl	800a370 <LCD_IO_ReadData>
 800508e:	4603      	mov	r3, r0
 8005090:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8005092:	8afb      	ldrh	r3, [r7, #22]
 8005094:	121b      	asrs	r3, r3, #8
 8005096:	b2db      	uxtb	r3, r3
 8005098:	f023 0303 	bic.w	r3, r3, #3
 800509c:	b2db      	uxtb	r3, r3
 800509e:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 80050a0:	8afb      	ldrh	r3, [r7, #22]
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	f023 0303 	bic.w	r3, r3, #3
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 80050ac:	8abb      	ldrh	r3, [r7, #20]
 80050ae:	121b      	asrs	r3, r3, #8
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	f023 0303 	bic.w	r3, r3, #3
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 80050ba:	f107 0310 	add.w	r3, r7, #16
 80050be:	f107 020c 	add.w	r2, r7, #12
 80050c2:	6812      	ldr	r2, [r2, #0]
 80050c4:	4611      	mov	r1, r2
 80050c6:	8019      	strh	r1, [r3, #0]
 80050c8:	3302      	adds	r3, #2
 80050ca:	0c12      	lsrs	r2, r2, #16
 80050cc:	701a      	strb	r2, [r3, #0]
 80050ce:	2300      	movs	r3, #0
 80050d0:	7c3a      	ldrb	r2, [r7, #16]
 80050d2:	f362 0307 	bfi	r3, r2, #0, #8
 80050d6:	7c7a      	ldrb	r2, [r7, #17]
 80050d8:	f362 230f 	bfi	r3, r2, #8, #8
 80050dc:	7cba      	ldrb	r2, [r7, #18]
 80050de:	f362 4317 	bfi	r3, r2, #16, #8
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3718      	adds	r7, #24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b088      	sub	sp, #32
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	607b      	str	r3, [r7, #4]
 80050f4:	4603      	mov	r3, r0
 80050f6:	81fb      	strh	r3, [r7, #14]
 80050f8:	460b      	mov	r3, r1
 80050fa:	81bb      	strh	r3, [r7, #12]
 80050fc:	4613      	mov	r3, r2
 80050fe:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8005100:	2300      	movs	r3, #0
 8005102:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8005108:	2200      	movs	r2, #0
 800510a:	2100      	movs	r1, #0
 800510c:	202c      	movs	r0, #44	; 0x2c
 800510e:	f7ff fe08 	bl	8004d22 <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8005112:	89fb      	ldrh	r3, [r7, #14]
 8005114:	61bb      	str	r3, [r7, #24]
 8005116:	e029      	b.n	800516c <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8005118:	4b1a      	ldr	r3, [pc, #104]	; (8005184 <ST7789H2_DrawRGBHLine+0x98>)
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	461a      	mov	r2, r3
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	4293      	cmp	r3, r2
 8005122:	d320      	bcc.n	8005166 <ST7789H2_DrawRGBHLine+0x7a>
 8005124:	4b18      	ldr	r3, [pc, #96]	; (8005188 <ST7789H2_DrawRGBHLine+0x9c>)
 8005126:	881b      	ldrh	r3, [r3, #0]
 8005128:	89ba      	ldrh	r2, [r7, #12]
 800512a:	429a      	cmp	r2, r3
 800512c:	d31b      	bcc.n	8005166 <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 800512e:	4b17      	ldr	r3, [pc, #92]	; (800518c <ST7789H2_DrawRGBHLine+0xa0>)
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	4293      	cmp	r3, r2
 8005138:	d815      	bhi.n	8005166 <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 800513a:	4b15      	ldr	r3, [pc, #84]	; (8005190 <ST7789H2_DrawRGBHLine+0xa4>)
 800513c:	881b      	ldrh	r3, [r3, #0]
 800513e:	89ba      	ldrh	r2, [r7, #12]
 8005140:	429a      	cmp	r2, r3
 8005142:	d810      	bhi.n	8005166 <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8005144:	897a      	ldrh	r2, [r7, #10]
 8005146:	89fb      	ldrh	r3, [r7, #14]
 8005148:	441a      	add	r2, r3
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	429a      	cmp	r2, r3
 800514e:	d007      	beq.n	8005160 <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	4413      	add	r3, r2
 8005158:	881b      	ldrh	r3, [r3, #0]
 800515a:	4618      	mov	r0, r3
 800515c:	f005 f8ee 	bl	800a33c <LCD_IO_WriteData>
      }      
      i++;
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	3301      	adds	r3, #1
 8005164:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	3301      	adds	r3, #1
 800516a:	61bb      	str	r3, [r7, #24]
 800516c:	897a      	ldrh	r2, [r7, #10]
 800516e:	89fb      	ldrh	r3, [r7, #14]
 8005170:	4413      	add	r3, r2
 8005172:	461a      	mov	r2, r3
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	4293      	cmp	r3, r2
 8005178:	d3ce      	bcc.n	8005118 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 800517a:	bf00      	nop
 800517c:	bf00      	nop
 800517e:	3720      	adds	r7, #32
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	200011ac 	.word	0x200011ac
 8005188:	200011ae 	.word	0x200011ae
 800518c:	20000270 	.word	0x20000270
 8005190:	20000272 	.word	0x20000272

08005194 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800519e:	2300      	movs	r3, #0
 80051a0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80051a2:	6839      	ldr	r1, [r7, #0]
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f001 fcc0 	bl	8006b2a <VL53L0X_get_offset_calibration_data_micro_meter>
 80051aa:	4603      	mov	r3, r0
 80051ac:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80051ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80051bc:	b5b0      	push	{r4, r5, r7, lr}
 80051be:	b096      	sub	sp, #88	; 0x58
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051c4:	2300      	movs	r3, #0
 80051c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80051ca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d107      	bne.n	80051e2 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80051d2:	2200      	movs	r2, #0
 80051d4:	2188      	movs	r1, #136	; 0x88
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7fe f84c 	bl	8003274 <VL53L0X_WrByte>
 80051dc:	4603      	mov	r3, r0
 80051de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051f0:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80051fa:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a9e      	ldr	r2, [pc, #632]	; (800547c <VL53L0X_DataInit+0x2c0>)
 8005202:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a9d      	ldr	r2, [pc, #628]	; (8005480 <VL53L0X_DataInit+0x2c4>)
 800520a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005214:	f107 0310 	add.w	r3, r7, #16
 8005218:	4619      	mov	r1, r3
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fab4 	bl	8005788 <VL53L0X_GetDeviceParameters>
 8005220:	4603      	mov	r3, r0
 8005222:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8005226:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800522a:	2b00      	cmp	r3, #0
 800522c:	d112      	bne.n	8005254 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800522e:	2300      	movs	r3, #0
 8005230:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8005232:	2300      	movs	r3, #0
 8005234:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f103 0410 	add.w	r4, r3, #16
 800523c:	f107 0510 	add.w	r5, r7, #16
 8005240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800524a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800524c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005250:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2264      	movs	r2, #100	; 0x64
 8005258:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8005262:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800526c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8005276:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005282:	2201      	movs	r2, #1
 8005284:	2180      	movs	r1, #128	; 0x80
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7fd fff4 	bl	8003274 <VL53L0X_WrByte>
 800528c:	4603      	mov	r3, r0
 800528e:	461a      	mov	r2, r3
 8005290:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005294:	4313      	orrs	r3, r2
 8005296:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800529a:	2201      	movs	r2, #1
 800529c:	21ff      	movs	r1, #255	; 0xff
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7fd ffe8 	bl	8003274 <VL53L0X_WrByte>
 80052a4:	4603      	mov	r3, r0
 80052a6:	461a      	mov	r2, r3
 80052a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052ac:	4313      	orrs	r3, r2
 80052ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80052b2:	2200      	movs	r2, #0
 80052b4:	2100      	movs	r1, #0
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7fd ffdc 	bl	8003274 <VL53L0X_WrByte>
 80052bc:	4603      	mov	r3, r0
 80052be:	461a      	mov	r2, r3
 80052c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80052ca:	f107 030f 	add.w	r3, r7, #15
 80052ce:	461a      	mov	r2, r3
 80052d0:	2191      	movs	r1, #145	; 0x91
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fe f882 	bl	80033dc <VL53L0X_RdByte>
 80052d8:	4603      	mov	r3, r0
 80052da:	461a      	mov	r2, r3
 80052dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 80052e6:	7bfa      	ldrb	r2, [r7, #15]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80052ee:	2201      	movs	r2, #1
 80052f0:	2100      	movs	r1, #0
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7fd ffbe 	bl	8003274 <VL53L0X_WrByte>
 80052f8:	4603      	mov	r3, r0
 80052fa:	461a      	mov	r2, r3
 80052fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005300:	4313      	orrs	r3, r2
 8005302:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005306:	2200      	movs	r2, #0
 8005308:	21ff      	movs	r1, #255	; 0xff
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fd ffb2 	bl	8003274 <VL53L0X_WrByte>
 8005310:	4603      	mov	r3, r0
 8005312:	461a      	mov	r2, r3
 8005314:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005318:	4313      	orrs	r3, r2
 800531a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800531e:	2200      	movs	r2, #0
 8005320:	2180      	movs	r1, #128	; 0x80
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7fd ffa6 	bl	8003274 <VL53L0X_WrByte>
 8005328:	4603      	mov	r3, r0
 800532a:	461a      	mov	r2, r3
 800532c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005330:	4313      	orrs	r3, r2
 8005332:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005336:	2300      	movs	r3, #0
 8005338:	653b      	str	r3, [r7, #80]	; 0x50
 800533a:	e014      	b.n	8005366 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800533c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005340:	2b00      	cmp	r3, #0
 8005342:	d114      	bne.n	800536e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8005344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005346:	b29b      	uxth	r3, r3
 8005348:	2201      	movs	r2, #1
 800534a:	4619      	mov	r1, r3
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fd43 	bl	8005dd8 <VL53L0X_SetLimitCheckEnable>
 8005352:	4603      	mov	r3, r0
 8005354:	461a      	mov	r2, r3
 8005356:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800535a:	4313      	orrs	r3, r2
 800535c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005362:	3301      	adds	r3, #1
 8005364:	653b      	str	r3, [r7, #80]	; 0x50
 8005366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005368:	2b05      	cmp	r3, #5
 800536a:	dde7      	ble.n	800533c <VL53L0X_DataInit+0x180>
 800536c:	e000      	b.n	8005370 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800536e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8005370:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005374:	2b00      	cmp	r3, #0
 8005376:	d107      	bne.n	8005388 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005378:	2200      	movs	r2, #0
 800537a:	2102      	movs	r1, #2
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fd2b 	bl	8005dd8 <VL53L0X_SetLimitCheckEnable>
 8005382:	4603      	mov	r3, r0
 8005384:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005388:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800538c:	2b00      	cmp	r3, #0
 800538e:	d107      	bne.n	80053a0 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005390:	2200      	movs	r2, #0
 8005392:	2103      	movs	r1, #3
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 fd1f 	bl	8005dd8 <VL53L0X_SetLimitCheckEnable>
 800539a:	4603      	mov	r3, r0
 800539c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80053a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d107      	bne.n	80053b8 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80053a8:	2200      	movs	r2, #0
 80053aa:	2104      	movs	r1, #4
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 fd13 	bl	8005dd8 <VL53L0X_SetLimitCheckEnable>
 80053b2:	4603      	mov	r3, r0
 80053b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80053b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d107      	bne.n	80053d0 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80053c0:	2200      	movs	r2, #0
 80053c2:	2105      	movs	r1, #5
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 fd07 	bl	8005dd8 <VL53L0X_SetLimitCheckEnable>
 80053ca:	4603      	mov	r3, r0
 80053cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80053d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d108      	bne.n	80053ea <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80053d8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80053dc:	2100      	movs	r1, #0
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fdaa 	bl	8005f38 <VL53L0X_SetLimitCheckValue>
 80053e4:	4603      	mov	r3, r0
 80053e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80053ea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d108      	bne.n	8005404 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80053f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80053f6:	2101      	movs	r1, #1
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fd9d 	bl	8005f38 <VL53L0X_SetLimitCheckValue>
 80053fe:	4603      	mov	r3, r0
 8005400:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005404:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005408:	2b00      	cmp	r3, #0
 800540a:	d108      	bne.n	800541e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800540c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8005410:	2102      	movs	r1, #2
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fd90 	bl	8005f38 <VL53L0X_SetLimitCheckValue>
 8005418:	4603      	mov	r3, r0
 800541a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800541e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005422:	2b00      	cmp	r3, #0
 8005424:	d107      	bne.n	8005436 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005426:	2200      	movs	r2, #0
 8005428:	2103      	movs	r1, #3
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fd84 	bl	8005f38 <VL53L0X_SetLimitCheckValue>
 8005430:	4603      	mov	r3, r0
 8005432:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005436:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10f      	bne.n	800545e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	22ff      	movs	r2, #255	; 0xff
 8005442:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005446:	22ff      	movs	r2, #255	; 0xff
 8005448:	2101      	movs	r1, #1
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7fd ff12 	bl	8003274 <VL53L0X_WrByte>
 8005450:	4603      	mov	r3, r0
 8005452:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800545e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005462:	2b00      	cmp	r3, #0
 8005464:	d103      	bne.n	800546e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800546e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8005472:	4618      	mov	r0, r3
 8005474:	3758      	adds	r7, #88	; 0x58
 8005476:	46bd      	mov	sp, r7
 8005478:	bdb0      	pop	{r4, r5, r7, pc}
 800547a:	bf00      	nop
 800547c:	00016b85 	.word	0x00016b85
 8005480:	000970a4 	.word	0x000970a4

08005484 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8005484:	b5b0      	push	{r4, r5, r7, lr}
 8005486:	b09e      	sub	sp, #120	; 0x78
 8005488:	af02      	add	r7, sp, #8
 800548a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800548c:	2300      	movs	r3, #0
 800548e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8005492:	f107 031c 	add.w	r3, r7, #28
 8005496:	2240      	movs	r2, #64	; 0x40
 8005498:	2100      	movs	r1, #0
 800549a:	4618      	mov	r0, r3
 800549c:	f014 f8da 	bl	8019654 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80054a0:	2300      	movs	r3, #0
 80054a2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80054a4:	2300      	movs	r3, #0
 80054a6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80054a8:	2300      	movs	r3, #0
 80054aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80054ae:	2300      	movs	r3, #0
 80054b0:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80054b2:	2300      	movs	r3, #0
 80054b4:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80054b6:	2300      	movs	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80054ba:	2300      	movs	r3, #0
 80054bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80054c0:	2101      	movs	r1, #1
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f002 fa74 	bl	80079b0 <VL53L0X_get_info_from_device>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80054d4:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80054dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80054e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d80d      	bhi.n	8005504 <VL53L0X_StaticInit+0x80>
 80054e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d102      	bne.n	80054f6 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 80054f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054f2:	2b20      	cmp	r3, #32
 80054f4:	d806      	bhi.n	8005504 <VL53L0X_StaticInit+0x80>
 80054f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10e      	bne.n	800551c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80054fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005500:	2b0c      	cmp	r3, #12
 8005502:	d90b      	bls.n	800551c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8005504:	f107 0218 	add.w	r2, r7, #24
 8005508:	f107 0314 	add.w	r3, r7, #20
 800550c:	4619      	mov	r1, r3
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f001 fd06 	bl	8006f20 <VL53L0X_perform_ref_spad_management>
 8005514:	4603      	mov	r3, r0
 8005516:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800551a:	e009      	b.n	8005530 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800551c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005520:	461a      	mov	r2, r3
 8005522:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f001 ff07 	bl	8007338 <VL53L0X_set_reference_spads>
 800552a:	4603      	mov	r3, r0
 800552c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8005530:	4b94      	ldr	r3, [pc, #592]	; (8005784 <VL53L0X_StaticInit+0x300>)
 8005532:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8005534:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10f      	bne.n	800555c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8005542:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8005546:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800554a:	2b00      	cmp	r3, #0
 800554c:	d104      	bne.n	8005558 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005554:	66bb      	str	r3, [r7, #104]	; 0x68
 8005556:	e001      	b.n	800555c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8005558:	4b8a      	ldr	r3, [pc, #552]	; (8005784 <VL53L0X_StaticInit+0x300>)
 800555a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800555c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005560:	2b00      	cmp	r3, #0
 8005562:	d106      	bne.n	8005572 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8005564:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f003 fb40 	bl	8008bec <VL53L0X_load_tuning_settings>
 800556c:	4603      	mov	r3, r0
 800556e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8005572:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10a      	bne.n	8005590 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800557a:	2300      	movs	r3, #0
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	2304      	movs	r3, #4
 8005580:	2200      	movs	r2, #0
 8005582:	2100      	movs	r1, #0
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f001 f8ff 	bl	8006788 <VL53L0X_SetGpioConfig>
 800558a:	4603      	mov	r3, r0
 800558c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005590:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005594:	2b00      	cmp	r3, #0
 8005596:	d121      	bne.n	80055dc <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005598:	2201      	movs	r2, #1
 800559a:	21ff      	movs	r1, #255	; 0xff
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f7fd fe69 	bl	8003274 <VL53L0X_WrByte>
 80055a2:	4603      	mov	r3, r0
 80055a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80055a8:	f107 031a 	add.w	r3, r7, #26
 80055ac:	461a      	mov	r2, r3
 80055ae:	2184      	movs	r1, #132	; 0x84
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7fd ff3d 	bl	8003430 <VL53L0X_RdWord>
 80055b6:	4603      	mov	r3, r0
 80055b8:	461a      	mov	r2, r3
 80055ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80055be:	4313      	orrs	r3, r2
 80055c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80055c4:	2200      	movs	r2, #0
 80055c6:	21ff      	movs	r1, #255	; 0xff
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7fd fe53 	bl	8003274 <VL53L0X_WrByte>
 80055ce:	4603      	mov	r3, r0
 80055d0:	461a      	mov	r2, r3
 80055d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80055dc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d105      	bne.n	80055f0 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80055e4:	8b7b      	ldrh	r3, [r7, #26]
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	461a      	mov	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 80055f0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d108      	bne.n	800560a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80055f8:	f107 031c 	add.w	r3, r7, #28
 80055fc:	4619      	mov	r1, r3
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f8c2 	bl	8005788 <VL53L0X_GetDeviceParameters>
 8005604:	4603      	mov	r3, r0
 8005606:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800560a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800560e:	2b00      	cmp	r3, #0
 8005610:	d110      	bne.n	8005634 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8005612:	f107 0319 	add.w	r3, r7, #25
 8005616:	4619      	mov	r1, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f984 	bl	8005926 <VL53L0X_GetFractionEnable>
 800561e:	4603      	mov	r3, r0
 8005620:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8005624:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005628:	2b00      	cmp	r3, #0
 800562a:	d103      	bne.n	8005634 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800562c:	7e7a      	ldrb	r2, [r7, #25]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8005634:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10e      	bne.n	800565a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f103 0410 	add.w	r4, r3, #16
 8005642:	f107 051c 	add.w	r5, r7, #28
 8005646:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005648:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800564a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800564c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800564e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005652:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005656:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800565a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800565e:	2b00      	cmp	r3, #0
 8005660:	d111      	bne.n	8005686 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8005662:	f107 0319 	add.w	r3, r7, #25
 8005666:	461a      	mov	r2, r3
 8005668:	2101      	movs	r1, #1
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7fd feb6 	bl	80033dc <VL53L0X_RdByte>
 8005670:	4603      	mov	r3, r0
 8005672:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8005676:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800567a:	2b00      	cmp	r3, #0
 800567c:	d103      	bne.n	8005686 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800567e:	7e7a      	ldrb	r2, [r7, #25]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8005686:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800568a:	2b00      	cmp	r3, #0
 800568c:	d107      	bne.n	800569e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800568e:	2200      	movs	r2, #0
 8005690:	2100      	movs	r1, #0
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f9a4 	bl	80059e0 <VL53L0X_SetSequenceStepEnable>
 8005698:	4603      	mov	r3, r0
 800569a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800569e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d107      	bne.n	80056b6 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80056a6:	2200      	movs	r2, #0
 80056a8:	2102      	movs	r1, #2
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f998 	bl	80059e0 <VL53L0X_SetSequenceStepEnable>
 80056b0:	4603      	mov	r3, r0
 80056b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80056b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d103      	bne.n	80056c6 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2203      	movs	r2, #3
 80056c2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80056c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d109      	bne.n	80056e2 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80056ce:	f107 0313 	add.w	r3, r7, #19
 80056d2:	461a      	mov	r2, r3
 80056d4:	2100      	movs	r1, #0
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f96a 	bl	80059b0 <VL53L0X_GetVcselPulsePeriod>
 80056dc:	4603      	mov	r3, r0
 80056de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80056e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d103      	bne.n	80056f2 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80056ea:	7cfa      	ldrb	r2, [r7, #19]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80056f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d109      	bne.n	800570e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80056fa:	f107 0313 	add.w	r3, r7, #19
 80056fe:	461a      	mov	r2, r3
 8005700:	2101      	movs	r1, #1
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f954 	bl	80059b0 <VL53L0X_GetVcselPulsePeriod>
 8005708:	4603      	mov	r3, r0
 800570a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800570e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005712:	2b00      	cmp	r3, #0
 8005714:	d103      	bne.n	800571e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005716:	7cfa      	ldrb	r2, [r7, #19]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800571e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005722:	2b00      	cmp	r3, #0
 8005724:	d109      	bne.n	800573a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8005726:	f107 030c 	add.w	r3, r7, #12
 800572a:	461a      	mov	r2, r3
 800572c:	2103      	movs	r1, #3
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f002 fec0 	bl	80084b4 <get_sequence_step_timeout>
 8005734:	4603      	mov	r3, r0
 8005736:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800573a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800573e:	2b00      	cmp	r3, #0
 8005740:	d103      	bne.n	800574a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800574a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800574e:	2b00      	cmp	r3, #0
 8005750:	d109      	bne.n	8005766 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8005752:	f107 030c 	add.w	r3, r7, #12
 8005756:	461a      	mov	r2, r3
 8005758:	2104      	movs	r1, #4
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f002 feaa 	bl	80084b4 <get_sequence_step_timeout>
 8005760:	4603      	mov	r3, r0
 8005762:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005766:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800576a:	2b00      	cmp	r3, #0
 800576c:	d103      	bne.n	8005776 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005776:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800577a:	4618      	mov	r0, r3
 800577c:	3770      	adds	r7, #112	; 0x70
 800577e:	46bd      	mov	sp, r7
 8005780:	bdb0      	pop	{r4, r5, r7, pc}
 8005782:	bf00      	nop
 8005784:	20000274 	.word	0x20000274

08005788 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005792:	2300      	movs	r3, #0
 8005794:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	4619      	mov	r1, r3
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f8b0 	bl	8005900 <VL53L0X_GetDeviceMode>
 80057a0:	4603      	mov	r3, r0
 80057a2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80057a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d107      	bne.n	80057bc <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	3308      	adds	r3, #8
 80057b0:	4619      	mov	r1, r3
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fa94 	bl	8005ce0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80057b8:	4603      	mov	r3, r0
 80057ba:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80057bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d102      	bne.n	80057ca <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	2200      	movs	r2, #0
 80057c8:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80057ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d107      	bne.n	80057e2 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	3310      	adds	r3, #16
 80057d6:	4619      	mov	r1, r3
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 faca 	bl	8005d72 <VL53L0X_GetXTalkCompensationRateMegaCps>
 80057de:	4603      	mov	r3, r0
 80057e0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80057e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d107      	bne.n	80057fa <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	3314      	adds	r3, #20
 80057ee:	4619      	mov	r1, r3
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7ff fccf 	bl	8005194 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80057f6:	4603      	mov	r3, r0
 80057f8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80057fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d134      	bne.n	800586c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005802:	2300      	movs	r3, #0
 8005804:	60bb      	str	r3, [r7, #8]
 8005806:	e02a      	b.n	800585e <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8005808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d12a      	bne.n	8005866 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	b299      	uxth	r1, r3
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	3308      	adds	r3, #8
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	4413      	add	r3, r2
 800581e:	3304      	adds	r3, #4
 8005820:	461a      	mov	r2, r3
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fbea 	bl	8005ffc <VL53L0X_GetLimitCheckValue>
 8005828:	4603      	mov	r3, r0
 800582a:	461a      	mov	r2, r3
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	4313      	orrs	r3, r2
 8005830:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8005832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d117      	bne.n	800586a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	b299      	uxth	r1, r3
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	3318      	adds	r3, #24
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	4413      	add	r3, r2
 8005846:	461a      	mov	r2, r3
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fb51 	bl	8005ef0 <VL53L0X_GetLimitCheckEnable>
 800584e:	4603      	mov	r3, r0
 8005850:	461a      	mov	r2, r3
 8005852:	7bfb      	ldrb	r3, [r7, #15]
 8005854:	4313      	orrs	r3, r2
 8005856:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	3301      	adds	r3, #1
 800585c:	60bb      	str	r3, [r7, #8]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2b05      	cmp	r3, #5
 8005862:	ddd1      	ble.n	8005808 <VL53L0X_GetDeviceParameters+0x80>
 8005864:	e002      	b.n	800586c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8005866:	bf00      	nop
 8005868:	e000      	b.n	800586c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800586a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800586c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d107      	bne.n	8005884 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	333c      	adds	r3, #60	; 0x3c
 8005878:	4619      	mov	r1, r3
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fc4c 	bl	8006118 <VL53L0X_GetWrapAroundCheckEnable>
 8005880:	4603      	mov	r3, r0
 8005882:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8005884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d107      	bne.n	800589c <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	3304      	adds	r3, #4
 8005890:	4619      	mov	r1, r3
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f879 	bl	800598a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8005898:	4603      	mov	r3, r0
 800589a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800589c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	460b      	mov	r3, r1
 80058b2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058b4:	2300      	movs	r3, #0
 80058b6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80058b8:	78fb      	ldrb	r3, [r7, #3]
 80058ba:	2b15      	cmp	r3, #21
 80058bc:	bf8c      	ite	hi
 80058be:	2201      	movhi	r2, #1
 80058c0:	2200      	movls	r2, #0
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	2a00      	cmp	r2, #0
 80058c6:	d10e      	bne.n	80058e6 <VL53L0X_SetDeviceMode+0x3e>
 80058c8:	2201      	movs	r2, #1
 80058ca:	409a      	lsls	r2, r3
 80058cc:	4b0b      	ldr	r3, [pc, #44]	; (80058fc <VL53L0X_SetDeviceMode+0x54>)
 80058ce:	4013      	ands	r3, r2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	bf14      	ite	ne
 80058d4:	2301      	movne	r3, #1
 80058d6:	2300      	moveq	r3, #0
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	78fa      	ldrb	r2, [r7, #3]
 80058e2:	741a      	strb	r2, [r3, #16]
		break;
 80058e4:	e001      	b.n	80058ea <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80058e6:	23f8      	movs	r3, #248	; 0xf8
 80058e8:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80058ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	0030000b 	.word	0x0030000b

08005900 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800590a:	2300      	movs	r3, #0
 800590c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	7c1a      	ldrb	r2, [r3, #16]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005916:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b084      	sub	sp, #16
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005930:	2300      	movs	r3, #0
 8005932:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	2109      	movs	r1, #9
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7fd fd4f 	bl	80033dc <VL53L0X_RdByte>
 800593e:	4603      	mov	r3, r0
 8005940:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d106      	bne.n	8005958 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	b2da      	uxtb	r2, r3
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005958:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800596e:	2300      	movs	r3, #0
 8005970:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8005972:	6839      	ldr	r1, [r7, #0]
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f002 ffa7 	bl	80088c8 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800597a:	4603      	mov	r3, r0
 800597c:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800597e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b084      	sub	sp, #16
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005994:	2300      	movs	r3, #0
 8005996:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8005998:	6839      	ldr	r1, [r7, #0]
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f003 f874 	bl	8008a88 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80059a0:	4603      	mov	r3, r0
 80059a2:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80059a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	460b      	mov	r3, r1
 80059ba:	607a      	str	r2, [r7, #4]
 80059bc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059be:	2300      	movs	r3, #0
 80059c0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80059c2:	7afb      	ldrb	r3, [r7, #11]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	4619      	mov	r1, r3
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f002 ff46 	bl	800885a <VL53L0X_get_vcsel_pulse_period>
 80059ce:	4603      	mov	r3, r0
 80059d0:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80059d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
	...

080059e0 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	460b      	mov	r3, r1
 80059ea:	70fb      	strb	r3, [r7, #3]
 80059ec:	4613      	mov	r3, r2
 80059ee:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059f0:	2300      	movs	r3, #0
 80059f2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80059fc:	f107 030f 	add.w	r3, r7, #15
 8005a00:	461a      	mov	r2, r3
 8005a02:	2101      	movs	r1, #1
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7fd fce9 	bl	80033dc <VL53L0X_RdByte>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
 8005a10:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8005a12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d15a      	bne.n	8005ad0 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8005a1a:	78bb      	ldrb	r3, [r7, #2]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d12b      	bne.n	8005a78 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d825      	bhi.n	8005a72 <VL53L0X_SetSequenceStepEnable+0x92>
 8005a26:	a201      	add	r2, pc, #4	; (adr r2, 8005a2c <VL53L0X_SetSequenceStepEnable+0x4c>)
 8005a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2c:	08005a41 	.word	0x08005a41
 8005a30:	08005a4b 	.word	0x08005a4b
 8005a34:	08005a55 	.word	0x08005a55
 8005a38:	08005a5f 	.word	0x08005a5f
 8005a3c:	08005a69 	.word	0x08005a69
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8005a40:	7dbb      	ldrb	r3, [r7, #22]
 8005a42:	f043 0310 	orr.w	r3, r3, #16
 8005a46:	75bb      	strb	r3, [r7, #22]
				break;
 8005a48:	e043      	b.n	8005ad2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8005a4a:	7dbb      	ldrb	r3, [r7, #22]
 8005a4c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8005a50:	75bb      	strb	r3, [r7, #22]
				break;
 8005a52:	e03e      	b.n	8005ad2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8005a54:	7dbb      	ldrb	r3, [r7, #22]
 8005a56:	f043 0304 	orr.w	r3, r3, #4
 8005a5a:	75bb      	strb	r3, [r7, #22]
				break;
 8005a5c:	e039      	b.n	8005ad2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8005a5e:	7dbb      	ldrb	r3, [r7, #22]
 8005a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a64:	75bb      	strb	r3, [r7, #22]
				break;
 8005a66:	e034      	b.n	8005ad2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8005a68:	7dbb      	ldrb	r3, [r7, #22]
 8005a6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a6e:	75bb      	strb	r3, [r7, #22]
				break;
 8005a70:	e02f      	b.n	8005ad2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005a72:	23fc      	movs	r3, #252	; 0xfc
 8005a74:	75fb      	strb	r3, [r7, #23]
 8005a76:	e02c      	b.n	8005ad2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8005a78:	78fb      	ldrb	r3, [r7, #3]
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d825      	bhi.n	8005aca <VL53L0X_SetSequenceStepEnable+0xea>
 8005a7e:	a201      	add	r2, pc, #4	; (adr r2, 8005a84 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8005a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a84:	08005a99 	.word	0x08005a99
 8005a88:	08005aa3 	.word	0x08005aa3
 8005a8c:	08005aad 	.word	0x08005aad
 8005a90:	08005ab7 	.word	0x08005ab7
 8005a94:	08005ac1 	.word	0x08005ac1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8005a98:	7dbb      	ldrb	r3, [r7, #22]
 8005a9a:	f023 0310 	bic.w	r3, r3, #16
 8005a9e:	75bb      	strb	r3, [r7, #22]
				break;
 8005aa0:	e017      	b.n	8005ad2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8005aa2:	7dbb      	ldrb	r3, [r7, #22]
 8005aa4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8005aa8:	75bb      	strb	r3, [r7, #22]
				break;
 8005aaa:	e012      	b.n	8005ad2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8005aac:	7dbb      	ldrb	r3, [r7, #22]
 8005aae:	f023 0304 	bic.w	r3, r3, #4
 8005ab2:	75bb      	strb	r3, [r7, #22]
				break;
 8005ab4:	e00d      	b.n	8005ad2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8005ab6:	7dbb      	ldrb	r3, [r7, #22]
 8005ab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005abc:	75bb      	strb	r3, [r7, #22]
				break;
 8005abe:	e008      	b.n	8005ad2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8005ac0:	7dbb      	ldrb	r3, [r7, #22]
 8005ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ac6:	75bb      	strb	r3, [r7, #22]
				break;
 8005ac8:	e003      	b.n	8005ad2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005aca:	23fc      	movs	r3, #252	; 0xfc
 8005acc:	75fb      	strb	r3, [r7, #23]
 8005ace:	e000      	b.n	8005ad2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8005ad0:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
 8005ad4:	7dba      	ldrb	r2, [r7, #22]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d01e      	beq.n	8005b18 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8005ada:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d107      	bne.n	8005af2 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8005ae2:	7dbb      	ldrb	r3, [r7, #22]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7fd fbc3 	bl	8003274 <VL53L0X_WrByte>
 8005aee:	4603      	mov	r3, r0
 8005af0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8005af2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d103      	bne.n	8005b02 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	7dba      	ldrb	r2, [r7, #22]
 8005afe:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8005b02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d106      	bne.n	8005b18 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8005b10:	6939      	ldr	r1, [r7, #16]
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7ff ff26 	bl	8005964 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8005b18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3718      	adds	r7, #24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	607b      	str	r3, [r7, #4]
 8005b2e:	460b      	mov	r3, r1
 8005b30:	72fb      	strb	r3, [r7, #11]
 8005b32:	4613      	mov	r3, r2
 8005b34:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b36:	2300      	movs	r3, #0
 8005b38:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8005b40:	7afb      	ldrb	r3, [r7, #11]
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d836      	bhi.n	8005bb4 <sequence_step_enabled+0x90>
 8005b46:	a201      	add	r2, pc, #4	; (adr r2, 8005b4c <sequence_step_enabled+0x28>)
 8005b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4c:	08005b61 	.word	0x08005b61
 8005b50:	08005b73 	.word	0x08005b73
 8005b54:	08005b85 	.word	0x08005b85
 8005b58:	08005b97 	.word	0x08005b97
 8005b5c:	08005ba9 	.word	0x08005ba9
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8005b60:	7abb      	ldrb	r3, [r7, #10]
 8005b62:	111b      	asrs	r3, r3, #4
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	701a      	strb	r2, [r3, #0]
		break;
 8005b70:	e022      	b.n	8005bb8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8005b72:	7abb      	ldrb	r3, [r7, #10]
 8005b74:	10db      	asrs	r3, r3, #3
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	701a      	strb	r2, [r3, #0]
		break;
 8005b82:	e019      	b.n	8005bb8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8005b84:	7abb      	ldrb	r3, [r7, #10]
 8005b86:	109b      	asrs	r3, r3, #2
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	701a      	strb	r2, [r3, #0]
		break;
 8005b94:	e010      	b.n	8005bb8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8005b96:	7abb      	ldrb	r3, [r7, #10]
 8005b98:	119b      	asrs	r3, r3, #6
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	701a      	strb	r2, [r3, #0]
		break;
 8005ba6:	e007      	b.n	8005bb8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8005ba8:	7abb      	ldrb	r3, [r7, #10]
 8005baa:	09db      	lsrs	r3, r3, #7
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	701a      	strb	r2, [r3, #0]
		break;
 8005bb2:	e001      	b.n	8005bb8 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005bb4:	23fc      	movs	r3, #252	; 0xfc
 8005bb6:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005bb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	371c      	adds	r7, #28
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005bda:	f107 030e 	add.w	r3, r7, #14
 8005bde:	461a      	mov	r2, r3
 8005be0:	2101      	movs	r1, #1
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7fd fbfa 	bl	80033dc <VL53L0X_RdByte>
 8005be8:	4603      	mov	r3, r0
 8005bea:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8005bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d107      	bne.n	8005c04 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8005bf4:	7bba      	ldrb	r2, [r7, #14]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7ff ff92 	bl	8005b24 <sequence_step_enabled>
 8005c00:	4603      	mov	r3, r0
 8005c02:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d108      	bne.n	8005c1e <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8005c0c:	7bba      	ldrb	r2, [r7, #14]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	3302      	adds	r3, #2
 8005c12:	2101      	movs	r1, #1
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7ff ff85 	bl	8005b24 <sequence_step_enabled>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d108      	bne.n	8005c38 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8005c26:	7bba      	ldrb	r2, [r7, #14]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	2102      	movs	r1, #2
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7ff ff78 	bl	8005b24 <sequence_step_enabled>
 8005c34:	4603      	mov	r3, r0
 8005c36:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d108      	bne.n	8005c52 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8005c40:	7bba      	ldrb	r2, [r7, #14]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	3303      	adds	r3, #3
 8005c46:	2103      	movs	r1, #3
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7ff ff6b 	bl	8005b24 <sequence_step_enabled>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d108      	bne.n	8005c6c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8005c5a:	7bba      	ldrb	r2, [r7, #14]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	3304      	adds	r3, #4
 8005c60:	2104      	movs	r1, #4
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7ff ff5e 	bl	8005b24 <sequence_step_enabled>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c82:	2300      	movs	r3, #0
 8005c84:	75fb      	strb	r3, [r7, #23]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8005c86:	f107 030e 	add.w	r3, r7, #14
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	21f8      	movs	r1, #248	; 0xf8
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7fd fbce 	bl	8003430 <VL53L0X_RdWord>
 8005c94:	4603      	mov	r3, r0
 8005c96:	75fb      	strb	r3, [r7, #23]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8005c98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d112      	bne.n	8005cc6 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x4e>
		if (osc_calibrate_val != 0) {
 8005ca0:	89fb      	ldrh	r3, [r7, #14]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d006      	beq.n	8005cb4 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x3c>
			IMPeriodMilliSeconds =
				InterMeasurementPeriodMilliSeconds
					* osc_calibrate_val;
 8005ca6:	89fb      	ldrh	r3, [r7, #14]
 8005ca8:	461a      	mov	r2, r3
			IMPeriodMilliSeconds =
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	fb02 f303 	mul.w	r3, r2, r3
 8005cb0:	613b      	str	r3, [r7, #16]
 8005cb2:	e001      	b.n	8005cb8 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x40>
		} else {
			IMPeriodMilliSeconds =
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	613b      	str	r3, [r7, #16]
				InterMeasurementPeriodMilliSeconds;
		}
		Status = VL53L0X_WrDWord(Dev,
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	2104      	movs	r1, #4
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7fd fb27 	bl	8003310 <VL53L0X_WrDWord>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005cc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d102      	bne.n	8005cd4 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x5c>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			InterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005cd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3718      	adds	r7, #24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005cea:	2300      	movs	r3, #0
 8005cec:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8005cee:	f107 030c 	add.w	r3, r7, #12
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	21f8      	movs	r1, #248	; 0xf8
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fd fb9a 	bl	8003430 <VL53L0X_RdWord>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8005d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d108      	bne.n	8005d1a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8005d08:	f107 0308 	add.w	r3, r7, #8
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	2104      	movs	r1, #4
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7fd fbc5 	bl	80034a0 <VL53L0X_RdDWord>
 8005d16:	4603      	mov	r3, r0
 8005d18:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10c      	bne.n	8005d3c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8005d22:	89bb      	ldrh	r3, [r7, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d005      	beq.n	8005d34 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	89ba      	ldrh	r2, [r7, #12]
 8005d2c:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d52:	2300      	movs	r3, #0
 8005d54:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	7f1b      	ldrb	r3, [r3, #28]
 8005d5a:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	7bba      	ldrb	r2, [r7, #14]
 8005d60:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b086      	sub	sp, #24
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8005d80:	f107 030e 	add.w	r3, r7, #14
 8005d84:	461a      	mov	r2, r3
 8005d86:	2120      	movs	r1, #32
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7fd fb51 	bl	8003430 <VL53L0X_RdWord>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8005d92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d118      	bne.n	8005dcc <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8005d9a:	89fb      	ldrh	r3, [r7, #14]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d109      	bne.n	8005db4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	771a      	strb	r2, [r3, #28]
 8005db2:	e00b      	b.n	8005dcc <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8005db4:	89fb      	ldrh	r3, [r7, #14]
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005dcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3718      	adds	r7, #24
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	460b      	mov	r3, r1
 8005de2:	807b      	strh	r3, [r7, #2]
 8005de4:	4613      	mov	r3, r2
 8005de6:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005de8:	2300      	movs	r3, #0
 8005dea:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8005dec:	2300      	movs	r3, #0
 8005dee:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8005df0:	2300      	movs	r3, #0
 8005df2:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8005df4:	2300      	movs	r3, #0
 8005df6:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005df8:	887b      	ldrh	r3, [r7, #2]
 8005dfa:	2b05      	cmp	r3, #5
 8005dfc:	d902      	bls.n	8005e04 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005dfe:	23fc      	movs	r3, #252	; 0xfc
 8005e00:	75fb      	strb	r3, [r7, #23]
 8005e02:	e05b      	b.n	8005ebc <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8005e04:	787b      	ldrb	r3, [r7, #1]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d106      	bne.n	8005e18 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8005e12:	2301      	movs	r3, #1
 8005e14:	73bb      	strb	r3, [r7, #14]
 8005e16:	e00a      	b.n	8005e2e <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005e18:	887b      	ldrh	r3, [r7, #2]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	330c      	adds	r3, #12
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8005e26:	2300      	movs	r3, #0
 8005e28:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8005e2e:	887b      	ldrh	r3, [r7, #2]
 8005e30:	2b05      	cmp	r3, #5
 8005e32:	d841      	bhi.n	8005eb8 <VL53L0X_SetLimitCheckEnable+0xe0>
 8005e34:	a201      	add	r2, pc, #4	; (adr r2, 8005e3c <VL53L0X_SetLimitCheckEnable+0x64>)
 8005e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3a:	bf00      	nop
 8005e3c:	08005e55 	.word	0x08005e55
 8005e40:	08005e5f 	.word	0x08005e5f
 8005e44:	08005e75 	.word	0x08005e75
 8005e48:	08005e7f 	.word	0x08005e7f
 8005e4c:	08005e89 	.word	0x08005e89
 8005e50:	08005ea1 	.word	0x08005ea1

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	7bfa      	ldrb	r2, [r7, #15]
 8005e58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8005e5c:	e02e      	b.n	8005ebc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	461a      	mov	r2, r3
 8005e66:	2144      	movs	r1, #68	; 0x44
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7fd fa27 	bl	80032bc <VL53L0X_WrWord>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	75fb      	strb	r3, [r7, #23]

			break;
 8005e72:	e023      	b.n	8005ebc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	7bfa      	ldrb	r2, [r7, #15]
 8005e78:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8005e7c:	e01e      	b.n	8005ebc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	7bfa      	ldrb	r2, [r7, #15]
 8005e82:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8005e86:	e019      	b.n	8005ebc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8005e88:	7bbb      	ldrb	r3, [r7, #14]
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8005e8e:	7b7b      	ldrb	r3, [r7, #13]
 8005e90:	22fe      	movs	r2, #254	; 0xfe
 8005e92:	2160      	movs	r1, #96	; 0x60
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7fd fa6d 	bl	8003374 <VL53L0X_UpdateByte>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8005e9e:	e00d      	b.n	8005ebc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8005ea0:	7bbb      	ldrb	r3, [r7, #14]
 8005ea2:	011b      	lsls	r3, r3, #4
 8005ea4:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8005ea6:	7b7b      	ldrb	r3, [r7, #13]
 8005ea8:	22ef      	movs	r2, #239	; 0xef
 8005eaa:	2160      	movs	r1, #96	; 0x60
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7fd fa61 	bl	8003374 <VL53L0X_UpdateByte>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8005eb6:	e001      	b.n	8005ebc <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005eb8:	23fc      	movs	r3, #252	; 0xfc
 8005eba:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005ebc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10f      	bne.n	8005ee4 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8005ec4:	787b      	ldrb	r3, [r7, #1]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d106      	bne.n	8005ed8 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005eca:	887b      	ldrh	r3, [r7, #2]
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	4413      	add	r3, r2
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005ed6:	e005      	b.n	8005ee4 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005ed8:	887b      	ldrh	r3, [r7, #2]
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	4413      	add	r3, r2
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005ee4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3718      	adds	r7, #24
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005efe:	2300      	movs	r3, #0
 8005f00:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005f02:	897b      	ldrh	r3, [r7, #10]
 8005f04:	2b05      	cmp	r3, #5
 8005f06:	d905      	bls.n	8005f14 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005f08:	23fc      	movs	r3, #252	; 0xfc
 8005f0a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	701a      	strb	r2, [r3, #0]
 8005f12:	e008      	b.n	8005f26 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005f14:	897b      	ldrh	r3, [r7, #10]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f1e:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	7dba      	ldrb	r2, [r7, #22]
 8005f24:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005f26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	371c      	adds	r7, #28
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
	...

08005f38 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	460b      	mov	r3, r1
 8005f42:	607a      	str	r2, [r7, #4]
 8005f44:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f46:	2300      	movs	r3, #0
 8005f48:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8005f4a:	897b      	ldrh	r3, [r7, #10]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f54:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8005f56:	7dbb      	ldrb	r3, [r7, #22]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d107      	bne.n	8005f6c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005f5c:	897b      	ldrh	r3, [r7, #10]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	330c      	adds	r3, #12
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	605a      	str	r2, [r3, #4]
 8005f6a:	e040      	b.n	8005fee <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8005f6c:	897b      	ldrh	r3, [r7, #10]
 8005f6e:	2b05      	cmp	r3, #5
 8005f70:	d830      	bhi.n	8005fd4 <VL53L0X_SetLimitCheckValue+0x9c>
 8005f72:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <VL53L0X_SetLimitCheckValue+0x40>)
 8005f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f78:	08005f91 	.word	0x08005f91
 8005f7c:	08005f99 	.word	0x08005f99
 8005f80:	08005faf 	.word	0x08005faf
 8005f84:	08005fb7 	.word	0x08005fb7
 8005f88:	08005fbf 	.word	0x08005fbf
 8005f8c:	08005fbf 	.word	0x08005fbf

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8005f96:	e01f      	b.n	8005fd8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	2144      	movs	r1, #68	; 0x44
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f7fd f98a 	bl	80032bc <VL53L0X_WrWord>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8005fac:	e014      	b.n	8005fd8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8005fb4:	e010      	b.n	8005fd8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8005fbc:	e00c      	b.n	8005fd8 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	2164      	movs	r1, #100	; 0x64
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f7fd f977 	bl	80032bc <VL53L0X_WrWord>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8005fd2:	e001      	b.n	8005fd8 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005fd4:	23fc      	movs	r3, #252	; 0xfc
 8005fd6:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005fd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d106      	bne.n	8005fee <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005fe0:	897b      	ldrh	r3, [r7, #10]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	330c      	adds	r3, #12
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005fee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3718      	adds	r7, #24
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop

08005ffc <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b088      	sub	sp, #32
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	460b      	mov	r3, r1
 8006006:	607a      	str	r2, [r7, #4]
 8006008:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800600a:	2300      	movs	r3, #0
 800600c:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800600e:	2300      	movs	r3, #0
 8006010:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8006012:	897b      	ldrh	r3, [r7, #10]
 8006014:	2b05      	cmp	r3, #5
 8006016:	d847      	bhi.n	80060a8 <VL53L0X_GetLimitCheckValue+0xac>
 8006018:	a201      	add	r2, pc, #4	; (adr r2, 8006020 <VL53L0X_GetLimitCheckValue+0x24>)
 800601a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601e:	bf00      	nop
 8006020:	08006039 	.word	0x08006039
 8006024:	08006045 	.word	0x08006045
 8006028:	0800606b 	.word	0x0800606b
 800602c:	08006077 	.word	0x08006077
 8006030:	08006083 	.word	0x08006083
 8006034:	08006083 	.word	0x08006083

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800603c:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800603e:	2300      	movs	r3, #0
 8006040:	77bb      	strb	r3, [r7, #30]
		break;
 8006042:	e033      	b.n	80060ac <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006044:	f107 0316 	add.w	r3, r7, #22
 8006048:	461a      	mov	r2, r3
 800604a:	2144      	movs	r1, #68	; 0x44
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f7fd f9ef 	bl	8003430 <VL53L0X_RdWord>
 8006052:	4603      	mov	r3, r0
 8006054:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8006056:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d102      	bne.n	8006064 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800605e:	8afb      	ldrh	r3, [r7, #22]
 8006060:	025b      	lsls	r3, r3, #9
 8006062:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8006064:	2301      	movs	r3, #1
 8006066:	77bb      	strb	r3, [r7, #30]
		break;
 8006068:	e020      	b.n	80060ac <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8006070:	2300      	movs	r3, #0
 8006072:	77bb      	strb	r3, [r7, #30]
		break;
 8006074:	e01a      	b.n	80060ac <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800607c:	2300      	movs	r3, #0
 800607e:	77bb      	strb	r3, [r7, #30]
		break;
 8006080:	e014      	b.n	80060ac <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006082:	f107 0316 	add.w	r3, r7, #22
 8006086:	461a      	mov	r2, r3
 8006088:	2164      	movs	r1, #100	; 0x64
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f7fd f9d0 	bl	8003430 <VL53L0X_RdWord>
 8006090:	4603      	mov	r3, r0
 8006092:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8006094:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d102      	bne.n	80060a2 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800609c:	8afb      	ldrh	r3, [r7, #22]
 800609e:	025b      	lsls	r3, r3, #9
 80060a0:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80060a2:	2300      	movs	r3, #0
 80060a4:	77bb      	strb	r3, [r7, #30]
		break;
 80060a6:	e001      	b.n	80060ac <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80060a8:	23fc      	movs	r3, #252	; 0xfc
 80060aa:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80060ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d12a      	bne.n	800610a <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80060b4:	7fbb      	ldrb	r3, [r7, #30]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d124      	bne.n	8006104 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d110      	bne.n	80060e2 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80060c0:	897b      	ldrh	r3, [r7, #10]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	330c      	adds	r3, #12
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80060d4:	897b      	ldrh	r3, [r7, #10]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	4413      	add	r3, r2
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80060e0:	e013      	b.n	800610a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80060e8:	897b      	ldrh	r3, [r7, #10]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	330c      	adds	r3, #12
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80060f6:	897b      	ldrh	r3, [r7, #10]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	4413      	add	r3, r2
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006102:	e002      	b.n	800610a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800610a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800610e:	4618      	mov	r0, r3
 8006110:	3720      	adds	r7, #32
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop

08006118 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006122:	2300      	movs	r3, #0
 8006124:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8006126:	f107 030e 	add.w	r3, r7, #14
 800612a:	461a      	mov	r2, r3
 800612c:	2101      	movs	r1, #1
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7fd f954 	bl	80033dc <VL53L0X_RdByte>
 8006134:	4603      	mov	r3, r0
 8006136:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8006138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10e      	bne.n	800615e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8006140:	7bba      	ldrb	r2, [r7, #14]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8006148:	7bbb      	ldrb	r3, [r7, #14]
 800614a:	b25b      	sxtb	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	da03      	bge.n	8006158 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2201      	movs	r2, #1
 8006154:	701a      	strb	r2, [r3, #0]
 8006156:	e002      	b.n	800615e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2200      	movs	r2, #0
 800615c:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800615e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d104      	bne.n	8006170 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	781a      	ldrb	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006170:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006184:	2300      	movs	r3, #0
 8006186:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006188:	f107 030e 	add.w	r3, r7, #14
 800618c:	4619      	mov	r1, r3
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7ff fbb6 	bl	8005900 <VL53L0X_GetDeviceMode>
 8006194:	4603      	mov	r3, r0
 8006196:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d107      	bne.n	80061b0 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80061a0:	7bbb      	ldrb	r3, [r7, #14]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d104      	bne.n	80061b0 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f898 	bl	80062dc <VL53L0X_StartMeasurement>
 80061ac:	4603      	mov	r3, r0
 80061ae:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80061b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d104      	bne.n	80061c2 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f001 fb3f 	bl	800783c <VL53L0X_measurement_poll_for_completion>
 80061be:	4603      	mov	r3, r0
 80061c0:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80061c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d106      	bne.n	80061d8 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80061ca:	7bbb      	ldrb	r3, [r7, #14]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d103      	bne.n	80061d8 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2203      	movs	r2, #3
 80061d4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 80061d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80061f0:	2300      	movs	r3, #0
 80061f2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80061f4:	2301      	movs	r3, #1
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	68b9      	ldr	r1, [r7, #8]
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f001 fae1 	bl	80077c2 <VL53L0X_perform_ref_calibration>
 8006200:	4603      	mov	r3, r0
 8006202:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8006204:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3718      	adds	r7, #24
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	460b      	mov	r3, r1
 800621a:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800621c:	2300      	movs	r3, #0
 800621e:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8006226:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8006228:	7dbb      	ldrb	r3, [r7, #22]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d005      	beq.n	800623a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800622e:	7dbb      	ldrb	r3, [r7, #22]
 8006230:	2b02      	cmp	r3, #2
 8006232:	d002      	beq.n	800623a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8006234:	7dbb      	ldrb	r3, [r7, #22]
 8006236:	2b03      	cmp	r3, #3
 8006238:	d147      	bne.n	80062ca <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800623a:	f107 030c 	add.w	r3, r7, #12
 800623e:	f107 0210 	add.w	r2, r7, #16
 8006242:	2101      	movs	r1, #1
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fbc3 	bl	80069d0 <VL53L0X_GetInterruptThresholds>
 800624a:	4603      	mov	r3, r0
 800624c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006254:	d803      	bhi.n	800625e <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8006256:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8006258:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800625c:	d935      	bls.n	80062ca <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800625e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d131      	bne.n	80062ca <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8006266:	78fb      	ldrb	r3, [r7, #3]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d006      	beq.n	800627a <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800626c:	491a      	ldr	r1, [pc, #104]	; (80062d8 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f002 fcbc 	bl	8008bec <VL53L0X_load_tuning_settings>
 8006274:	4603      	mov	r3, r0
 8006276:	75fb      	strb	r3, [r7, #23]
 8006278:	e027      	b.n	80062ca <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800627a:	2204      	movs	r2, #4
 800627c:	21ff      	movs	r1, #255	; 0xff
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7fc fff8 	bl	8003274 <VL53L0X_WrByte>
 8006284:	4603      	mov	r3, r0
 8006286:	461a      	mov	r2, r3
 8006288:	7dfb      	ldrb	r3, [r7, #23]
 800628a:	4313      	orrs	r3, r2
 800628c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800628e:	2200      	movs	r2, #0
 8006290:	2170      	movs	r1, #112	; 0x70
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7fc ffee 	bl	8003274 <VL53L0X_WrByte>
 8006298:	4603      	mov	r3, r0
 800629a:	461a      	mov	r2, r3
 800629c:	7dfb      	ldrb	r3, [r7, #23]
 800629e:	4313      	orrs	r3, r2
 80062a0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80062a2:	2200      	movs	r2, #0
 80062a4:	21ff      	movs	r1, #255	; 0xff
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7fc ffe4 	bl	8003274 <VL53L0X_WrByte>
 80062ac:	4603      	mov	r3, r0
 80062ae:	461a      	mov	r2, r3
 80062b0:	7dfb      	ldrb	r3, [r7, #23]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80062b6:	2200      	movs	r2, #0
 80062b8:	2180      	movs	r1, #128	; 0x80
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7fc ffda 	bl	8003274 <VL53L0X_WrByte>
 80062c0:	4603      	mov	r3, r0
 80062c2:	461a      	mov	r2, r3
 80062c4:	7dfb      	ldrb	r3, [r7, #23]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 80062ca:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3718      	adds	r7, #24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	20000368 	.word	0x20000368

080062dc <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062e4:	2300      	movs	r3, #0
 80062e6:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80062e8:	2301      	movs	r3, #1
 80062ea:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80062ec:	f107 030e 	add.w	r3, r7, #14
 80062f0:	4619      	mov	r1, r3
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7ff fb04 	bl	8005900 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80062f8:	2201      	movs	r2, #1
 80062fa:	2180      	movs	r1, #128	; 0x80
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7fc ffb9 	bl	8003274 <VL53L0X_WrByte>
 8006302:	4603      	mov	r3, r0
 8006304:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006306:	2201      	movs	r2, #1
 8006308:	21ff      	movs	r1, #255	; 0xff
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7fc ffb2 	bl	8003274 <VL53L0X_WrByte>
 8006310:	4603      	mov	r3, r0
 8006312:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006314:	2200      	movs	r2, #0
 8006316:	2100      	movs	r1, #0
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f7fc ffab 	bl	8003274 <VL53L0X_WrByte>
 800631e:	4603      	mov	r3, r0
 8006320:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8006328:	461a      	mov	r2, r3
 800632a:	2191      	movs	r1, #145	; 0x91
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7fc ffa1 	bl	8003274 <VL53L0X_WrByte>
 8006332:	4603      	mov	r3, r0
 8006334:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006336:	2201      	movs	r2, #1
 8006338:	2100      	movs	r1, #0
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7fc ff9a 	bl	8003274 <VL53L0X_WrByte>
 8006340:	4603      	mov	r3, r0
 8006342:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006344:	2200      	movs	r2, #0
 8006346:	21ff      	movs	r1, #255	; 0xff
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f7fc ff93 	bl	8003274 <VL53L0X_WrByte>
 800634e:	4603      	mov	r3, r0
 8006350:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006352:	2200      	movs	r2, #0
 8006354:	2180      	movs	r1, #128	; 0x80
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7fc ff8c 	bl	8003274 <VL53L0X_WrByte>
 800635c:	4603      	mov	r3, r0
 800635e:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8006360:	7bbb      	ldrb	r3, [r7, #14]
 8006362:	2b03      	cmp	r3, #3
 8006364:	d054      	beq.n	8006410 <VL53L0X_StartMeasurement+0x134>
 8006366:	2b03      	cmp	r3, #3
 8006368:	dc6c      	bgt.n	8006444 <VL53L0X_StartMeasurement+0x168>
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <VL53L0X_StartMeasurement+0x98>
 800636e:	2b01      	cmp	r3, #1
 8006370:	d034      	beq.n	80063dc <VL53L0X_StartMeasurement+0x100>
 8006372:	e067      	b.n	8006444 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8006374:	2201      	movs	r2, #1
 8006376:	2100      	movs	r1, #0
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f7fc ff7b 	bl	8003274 <VL53L0X_WrByte>
 800637e:	4603      	mov	r3, r0
 8006380:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8006386:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d15d      	bne.n	800644a <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800638e:	2300      	movs	r3, #0
 8006390:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d008      	beq.n	80063aa <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8006398:	f107 030d 	add.w	r3, r7, #13
 800639c:	461a      	mov	r2, r3
 800639e:	2100      	movs	r1, #0
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7fd f81b 	bl	80033dc <VL53L0X_RdByte>
 80063a6:	4603      	mov	r3, r0
 80063a8:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	3301      	adds	r3, #1
 80063ae:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80063b0:	7b7a      	ldrb	r2, [r7, #13]
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
 80063b4:	4013      	ands	r3, r2
 80063b6:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80063b8:	7bfa      	ldrb	r2, [r7, #15]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d107      	bne.n	80063ce <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 80063be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d103      	bne.n	80063ce <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80063cc:	d3e1      	bcc.n	8006392 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80063d4:	d339      	bcc.n	800644a <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80063d6:	23f9      	movs	r3, #249	; 0xf9
 80063d8:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80063da:	e036      	b.n	800644a <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80063dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d105      	bne.n	80063f0 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80063e4:	2101      	movs	r1, #1
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7ff ff12 	bl	8006210 <VL53L0X_CheckAndLoadInterruptSettings>
 80063ec:	4603      	mov	r3, r0
 80063ee:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80063f0:	2202      	movs	r2, #2
 80063f2:	2100      	movs	r1, #0
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7fc ff3d 	bl	8003274 <VL53L0X_WrByte>
 80063fa:	4603      	mov	r3, r0
 80063fc:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80063fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d123      	bne.n	800644e <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2204      	movs	r2, #4
 800640a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800640e:	e01e      	b.n	800644e <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006410:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d105      	bne.n	8006424 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006418:	2101      	movs	r1, #1
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7ff fef8 	bl	8006210 <VL53L0X_CheckAndLoadInterruptSettings>
 8006420:	4603      	mov	r3, r0
 8006422:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006424:	2204      	movs	r2, #4
 8006426:	2100      	movs	r1, #0
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7fc ff23 	bl	8003274 <VL53L0X_WrByte>
 800642e:	4603      	mov	r3, r0
 8006430:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8006432:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10b      	bne.n	8006452 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2204      	movs	r2, #4
 800643e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8006442:	e006      	b.n	8006452 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006444:	23f8      	movs	r3, #248	; 0xf8
 8006446:	75fb      	strb	r3, [r7, #23]
 8006448:	e004      	b.n	8006454 <VL53L0X_StartMeasurement+0x178>
		break;
 800644a:	bf00      	nop
 800644c:	e002      	b.n	8006454 <VL53L0X_StartMeasurement+0x178>
		break;
 800644e:	bf00      	nop
 8006450:	e000      	b.n	8006454 <VL53L0X_StartMeasurement+0x178>
		break;
 8006452:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8006454:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3718      	adds	r7, #24
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800646a:	2300      	movs	r3, #0
 800646c:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8006474:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8006476:	7bbb      	ldrb	r3, [r7, #14]
 8006478:	2b04      	cmp	r3, #4
 800647a:	d112      	bne.n	80064a2 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800647c:	f107 0308 	add.w	r3, r7, #8
 8006480:	4619      	mov	r1, r3
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fb1a 	bl	8006abc <VL53L0X_GetInterruptMaskStatus>
 8006488:	4603      	mov	r3, r0
 800648a:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	2b04      	cmp	r3, #4
 8006490:	d103      	bne.n	800649a <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2201      	movs	r2, #1
 8006496:	701a      	strb	r2, [r3, #0]
 8006498:	e01c      	b.n	80064d4 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2200      	movs	r2, #0
 800649e:	701a      	strb	r2, [r3, #0]
 80064a0:	e018      	b.n	80064d4 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80064a2:	f107 030d 	add.w	r3, r7, #13
 80064a6:	461a      	mov	r2, r3
 80064a8:	2114      	movs	r1, #20
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7fc ff96 	bl	80033dc <VL53L0X_RdByte>
 80064b0:	4603      	mov	r3, r0
 80064b2:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80064b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10b      	bne.n	80064d4 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80064bc:	7b7b      	ldrb	r3, [r7, #13]
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2201      	movs	r2, #1
 80064ca:	701a      	strb	r2, [r3, #0]
 80064cc:	e002      	b.n	80064d4 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2200      	movs	r2, #0
 80064d2:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80064d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80064e0:	b5b0      	push	{r4, r5, r7, lr}
 80064e2:	b096      	sub	sp, #88	; 0x58
 80064e4:	af02      	add	r7, sp, #8
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064ea:	2300      	movs	r3, #0
 80064ec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80064f0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80064f4:	230c      	movs	r3, #12
 80064f6:	2114      	movs	r1, #20
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7fc fe8f 	bl	800321c <VL53L0X_ReadMulti>
 80064fe:	4603      	mov	r3, r0
 8006500:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8006504:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006508:	2b00      	cmp	r3, #0
 800650a:	f040 80d1 	bne.w	80066b0 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	2200      	movs	r2, #0
 8006512:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2200      	movs	r2, #0
 8006518:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800651a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800651e:	b29b      	uxth	r3, r3
 8006520:	021b      	lsls	r3, r3, #8
 8006522:	b29a      	uxth	r2, r3
 8006524:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006528:	b29b      	uxth	r3, r3
 800652a:	4413      	add	r3, r2
 800652c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2200      	movs	r2, #0
 8006534:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8006536:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800653a:	b29b      	uxth	r3, r3
 800653c:	021b      	lsls	r3, r3, #8
 800653e:	b29a      	uxth	r2, r3
 8006540:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006544:	b29b      	uxth	r3, r3
 8006546:	4413      	add	r3, r2
 8006548:	b29b      	uxth	r3, r3
 800654a:	025b      	lsls	r3, r3, #9
 800654c:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006552:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8006554:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006558:	b29b      	uxth	r3, r3
 800655a:	021b      	lsls	r3, r3, #8
 800655c:	b29a      	uxth	r2, r3
 800655e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8006562:	b29b      	uxth	r3, r3
 8006564:	4413      	add	r3, r2
 8006566:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800656a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800656e:	025b      	lsls	r3, r3, #9
 8006570:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8006576:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800657a:	b29b      	uxth	r3, r3
 800657c:	021b      	lsls	r3, r3, #8
 800657e:	b29a      	uxth	r2, r3
 8006580:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006584:	b29b      	uxth	r3, r3
 8006586:	4413      	add	r3, r2
 8006588:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006592:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8006594:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006598:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 80065a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80065aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80065ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80065b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065b4:	d046      	beq.n	8006644 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80065b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80065b8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80065bc:	fb02 f303 	mul.w	r3, r2, r3
 80065c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80065c4:	4a57      	ldr	r2, [pc, #348]	; (8006724 <VL53L0X_GetRangingMeasurementData+0x244>)
 80065c6:	fb82 1203 	smull	r1, r2, r2, r3
 80065ca:	1192      	asrs	r2, r2, #6
 80065cc:	17db      	asrs	r3, r3, #31
 80065ce:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80065d0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	7f1b      	ldrb	r3, [r3, #28]
 80065de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80065e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d02c      	beq.n	8006644 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80065ea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80065ec:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80065f0:	fb02 f303 	mul.w	r3, r2, r3
 80065f4:	121a      	asrs	r2, r3, #8
					<= 0) {
 80065f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d10d      	bne.n	8006618 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 80065fc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006600:	2b00      	cmp	r3, #0
 8006602:	d004      	beq.n	800660e <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8006604:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8006608:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800660c:	e016      	b.n	800663c <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800660e:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8006612:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006616:	e011      	b.n	800663c <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8006618:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800661c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800661e:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8006622:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006624:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8006628:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800662c:	121b      	asrs	r3, r3, #8
 800662e:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8006630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006632:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8006634:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8006638:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800663c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006640:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8006644:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00d      	beq.n	8006668 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800664c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006650:	089b      	lsrs	r3, r3, #2
 8006652:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8006658:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800665c:	b2db      	uxtb	r3, r3
 800665e:	019b      	lsls	r3, r3, #6
 8006660:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	75da      	strb	r2, [r3, #23]
 8006666:	e006      	b.n	8006676 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800666e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	2200      	movs	r2, #0
 8006674:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8006676:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800667a:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800667e:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8006682:	9301      	str	r3, [sp, #4]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	4613      	mov	r3, r2
 800668a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f002 ff4b 	bl	8009528 <VL53L0X_get_pal_range_status>
 8006692:	4603      	mov	r3, r0
 8006694:	461a      	mov	r2, r3
 8006696:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800669a:	4313      	orrs	r3, r2
 800669c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80066a0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d103      	bne.n	80066b0 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80066a8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80066b0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d12f      	bne.n	8006718 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f107 040c 	add.w	r4, r7, #12
 80066be:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80066c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80066ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80066d2:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80066d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80066e0:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80066e6:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80066ec:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80066f2:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80066f8:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80066fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8006708:	f107 050c 	add.w	r5, r7, #12
 800670c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800670e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006710:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006714:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006718:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800671c:	4618      	mov	r0, r3
 800671e:	3750      	adds	r7, #80	; 0x50
 8006720:	46bd      	mov	sp, r7
 8006722:	bdb0      	pop	{r4, r5, r7, pc}
 8006724:	10624dd3 	.word	0x10624dd3

08006728 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006732:	2300      	movs	r3, #0
 8006734:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8006736:	2100      	movs	r1, #0
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7ff f8b5 	bl	80058a8 <VL53L0X_SetDeviceMode>
 800673e:	4603      	mov	r3, r0
 8006740:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d104      	bne.n	8006754 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7ff fd16 	bl	800617c <VL53L0X_PerformSingleMeasurement>
 8006750:	4603      	mov	r3, r0
 8006752:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d105      	bne.n	8006768 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7ff febe 	bl	80064e0 <VL53L0X_GetRangingMeasurementData>
 8006764:	4603      	mov	r3, r0
 8006766:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8006768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d105      	bne.n	800677c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006770:	2100      	movs	r1, #0
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f962 	bl	8006a3c <VL53L0X_ClearInterruptMask>
 8006778:	4603      	mov	r3, r0
 800677a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800677c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	4608      	mov	r0, r1
 8006792:	4611      	mov	r1, r2
 8006794:	461a      	mov	r2, r3
 8006796:	4603      	mov	r3, r0
 8006798:	70fb      	strb	r3, [r7, #3]
 800679a:	460b      	mov	r3, r1
 800679c:	70bb      	strb	r3, [r7, #2]
 800679e:	4613      	mov	r3, r2
 80067a0:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067a2:	2300      	movs	r3, #0
 80067a4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80067a6:	78fb      	ldrb	r3, [r7, #3]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80067ac:	23f6      	movs	r3, #246	; 0xf6
 80067ae:	73fb      	strb	r3, [r7, #15]
 80067b0:	e107      	b.n	80069c2 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80067b2:	78bb      	ldrb	r3, [r7, #2]
 80067b4:	2b14      	cmp	r3, #20
 80067b6:	d110      	bne.n	80067da <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80067b8:	7e3b      	ldrb	r3, [r7, #24]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d102      	bne.n	80067c4 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80067be:	2310      	movs	r3, #16
 80067c0:	73bb      	strb	r3, [r7, #14]
 80067c2:	e001      	b.n	80067c8 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80067c4:	2301      	movs	r3, #1
 80067c6:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80067c8:	7bbb      	ldrb	r3, [r7, #14]
 80067ca:	461a      	mov	r2, r3
 80067cc:	2184      	movs	r1, #132	; 0x84
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7fc fd50 	bl	8003274 <VL53L0X_WrByte>
 80067d4:	4603      	mov	r3, r0
 80067d6:	73fb      	strb	r3, [r7, #15]
 80067d8:	e0f3      	b.n	80069c2 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80067da:	78bb      	ldrb	r3, [r7, #2]
 80067dc:	2b15      	cmp	r3, #21
 80067de:	f040 8097 	bne.w	8006910 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80067e2:	2201      	movs	r2, #1
 80067e4:	21ff      	movs	r1, #255	; 0xff
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7fc fd44 	bl	8003274 <VL53L0X_WrByte>
 80067ec:	4603      	mov	r3, r0
 80067ee:	461a      	mov	r2, r3
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80067f6:	2200      	movs	r2, #0
 80067f8:	2100      	movs	r1, #0
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7fc fd3a 	bl	8003274 <VL53L0X_WrByte>
 8006800:	4603      	mov	r3, r0
 8006802:	461a      	mov	r2, r3
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	4313      	orrs	r3, r2
 8006808:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800680a:	2200      	movs	r2, #0
 800680c:	21ff      	movs	r1, #255	; 0xff
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7fc fd30 	bl	8003274 <VL53L0X_WrByte>
 8006814:	4603      	mov	r3, r0
 8006816:	461a      	mov	r2, r3
 8006818:	7bfb      	ldrb	r3, [r7, #15]
 800681a:	4313      	orrs	r3, r2
 800681c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800681e:	2201      	movs	r2, #1
 8006820:	2180      	movs	r1, #128	; 0x80
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7fc fd26 	bl	8003274 <VL53L0X_WrByte>
 8006828:	4603      	mov	r3, r0
 800682a:	461a      	mov	r2, r3
 800682c:	7bfb      	ldrb	r3, [r7, #15]
 800682e:	4313      	orrs	r3, r2
 8006830:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8006832:	2202      	movs	r2, #2
 8006834:	2185      	movs	r1, #133	; 0x85
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7fc fd1c 	bl	8003274 <VL53L0X_WrByte>
 800683c:	4603      	mov	r3, r0
 800683e:	461a      	mov	r2, r3
 8006840:	7bfb      	ldrb	r3, [r7, #15]
 8006842:	4313      	orrs	r3, r2
 8006844:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8006846:	2204      	movs	r2, #4
 8006848:	21ff      	movs	r1, #255	; 0xff
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7fc fd12 	bl	8003274 <VL53L0X_WrByte>
 8006850:	4603      	mov	r3, r0
 8006852:	461a      	mov	r2, r3
 8006854:	7bfb      	ldrb	r3, [r7, #15]
 8006856:	4313      	orrs	r3, r2
 8006858:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800685a:	2200      	movs	r2, #0
 800685c:	21cd      	movs	r1, #205	; 0xcd
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7fc fd08 	bl	8003274 <VL53L0X_WrByte>
 8006864:	4603      	mov	r3, r0
 8006866:	461a      	mov	r2, r3
 8006868:	7bfb      	ldrb	r3, [r7, #15]
 800686a:	4313      	orrs	r3, r2
 800686c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800686e:	2211      	movs	r2, #17
 8006870:	21cc      	movs	r1, #204	; 0xcc
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7fc fcfe 	bl	8003274 <VL53L0X_WrByte>
 8006878:	4603      	mov	r3, r0
 800687a:	461a      	mov	r2, r3
 800687c:	7bfb      	ldrb	r3, [r7, #15]
 800687e:	4313      	orrs	r3, r2
 8006880:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8006882:	2207      	movs	r2, #7
 8006884:	21ff      	movs	r1, #255	; 0xff
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7fc fcf4 	bl	8003274 <VL53L0X_WrByte>
 800688c:	4603      	mov	r3, r0
 800688e:	461a      	mov	r2, r3
 8006890:	7bfb      	ldrb	r3, [r7, #15]
 8006892:	4313      	orrs	r3, r2
 8006894:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8006896:	2200      	movs	r2, #0
 8006898:	21be      	movs	r1, #190	; 0xbe
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7fc fcea 	bl	8003274 <VL53L0X_WrByte>
 80068a0:	4603      	mov	r3, r0
 80068a2:	461a      	mov	r2, r3
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80068aa:	2206      	movs	r2, #6
 80068ac:	21ff      	movs	r1, #255	; 0xff
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7fc fce0 	bl	8003274 <VL53L0X_WrByte>
 80068b4:	4603      	mov	r3, r0
 80068b6:	461a      	mov	r2, r3
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80068be:	2209      	movs	r2, #9
 80068c0:	21cc      	movs	r1, #204	; 0xcc
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7fc fcd6 	bl	8003274 <VL53L0X_WrByte>
 80068c8:	4603      	mov	r3, r0
 80068ca:	461a      	mov	r2, r3
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80068d2:	2200      	movs	r2, #0
 80068d4:	21ff      	movs	r1, #255	; 0xff
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7fc fccc 	bl	8003274 <VL53L0X_WrByte>
 80068dc:	4603      	mov	r3, r0
 80068de:	461a      	mov	r2, r3
 80068e0:	7bfb      	ldrb	r3, [r7, #15]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80068e6:	2201      	movs	r2, #1
 80068e8:	21ff      	movs	r1, #255	; 0xff
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7fc fcc2 	bl	8003274 <VL53L0X_WrByte>
 80068f0:	4603      	mov	r3, r0
 80068f2:	461a      	mov	r2, r3
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80068fa:	2200      	movs	r2, #0
 80068fc:	2100      	movs	r1, #0
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7fc fcb8 	bl	8003274 <VL53L0X_WrByte>
 8006904:	4603      	mov	r3, r0
 8006906:	461a      	mov	r2, r3
 8006908:	7bfb      	ldrb	r3, [r7, #15]
 800690a:	4313      	orrs	r3, r2
 800690c:	73fb      	strb	r3, [r7, #15]
 800690e:	e058      	b.n	80069c2 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8006910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d121      	bne.n	800695c <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8006918:	787b      	ldrb	r3, [r7, #1]
 800691a:	2b04      	cmp	r3, #4
 800691c:	d81b      	bhi.n	8006956 <VL53L0X_SetGpioConfig+0x1ce>
 800691e:	a201      	add	r2, pc, #4	; (adr r2, 8006924 <VL53L0X_SetGpioConfig+0x19c>)
 8006920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006924:	08006939 	.word	0x08006939
 8006928:	0800693f 	.word	0x0800693f
 800692c:	08006945 	.word	0x08006945
 8006930:	0800694b 	.word	0x0800694b
 8006934:	08006951 	.word	0x08006951
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8006938:	2300      	movs	r3, #0
 800693a:	73bb      	strb	r3, [r7, #14]
				break;
 800693c:	e00f      	b.n	800695e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800693e:	2301      	movs	r3, #1
 8006940:	73bb      	strb	r3, [r7, #14]
				break;
 8006942:	e00c      	b.n	800695e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8006944:	2302      	movs	r3, #2
 8006946:	73bb      	strb	r3, [r7, #14]
				break;
 8006948:	e009      	b.n	800695e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800694a:	2303      	movs	r3, #3
 800694c:	73bb      	strb	r3, [r7, #14]
				break;
 800694e:	e006      	b.n	800695e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8006950:	2304      	movs	r3, #4
 8006952:	73bb      	strb	r3, [r7, #14]
				break;
 8006954:	e003      	b.n	800695e <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8006956:	23f5      	movs	r3, #245	; 0xf5
 8006958:	73fb      	strb	r3, [r7, #15]
 800695a:	e000      	b.n	800695e <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800695c:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800695e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d107      	bne.n	8006976 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8006966:	7bbb      	ldrb	r3, [r7, #14]
 8006968:	461a      	mov	r2, r3
 800696a:	210a      	movs	r1, #10
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7fc fc81 	bl	8003274 <VL53L0X_WrByte>
 8006972:	4603      	mov	r3, r0
 8006974:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8006976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10f      	bne.n	800699e <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800697e:	7e3b      	ldrb	r3, [r7, #24]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d102      	bne.n	800698a <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8006984:	2300      	movs	r3, #0
 8006986:	73bb      	strb	r3, [r7, #14]
 8006988:	e001      	b.n	800698e <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800698a:	2310      	movs	r3, #16
 800698c:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800698e:	7bbb      	ldrb	r3, [r7, #14]
 8006990:	22ef      	movs	r2, #239	; 0xef
 8006992:	2184      	movs	r1, #132	; 0x84
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f7fc fced 	bl	8003374 <VL53L0X_UpdateByte>
 800699a:	4603      	mov	r3, r0
 800699c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800699e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d103      	bne.n	80069ae <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	787a      	ldrb	r2, [r7, #1]
 80069aa:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80069ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d105      	bne.n	80069c2 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80069b6:	2100      	movs	r1, #0
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f83f 	bl	8006a3c <VL53L0X_ClearInterruptMask>
 80069be:	4603      	mov	r3, r0
 80069c0:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80069c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop

080069d0 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	607a      	str	r2, [r7, #4]
 80069da:	603b      	str	r3, [r7, #0]
 80069dc:	460b      	mov	r3, r1
 80069de:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069e0:	2300      	movs	r3, #0
 80069e2:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80069e4:	f107 0314 	add.w	r3, r7, #20
 80069e8:	461a      	mov	r2, r3
 80069ea:	210e      	movs	r1, #14
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f7fc fd1f 	bl	8003430 <VL53L0X_RdWord>
 80069f2:	4603      	mov	r3, r0
 80069f4:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80069f6:	8abb      	ldrh	r3, [r7, #20]
 80069f8:	045b      	lsls	r3, r3, #17
 80069fa:	461a      	mov	r2, r3
 80069fc:	4b0e      	ldr	r3, [pc, #56]	; (8006a38 <VL53L0X_GetInterruptThresholds+0x68>)
 80069fe:	4013      	ands	r3, r2
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8006a04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10f      	bne.n	8006a2c <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8006a0c:	f107 0314 	add.w	r3, r7, #20
 8006a10:	461a      	mov	r2, r3
 8006a12:	210c      	movs	r1, #12
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f7fc fd0b 	bl	8003430 <VL53L0X_RdWord>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8006a1e:	8abb      	ldrh	r3, [r7, #20]
 8006a20:	045b      	lsls	r3, r3, #17
 8006a22:	461a      	mov	r2, r3
 8006a24:	4b04      	ldr	r3, [pc, #16]	; (8006a38 <VL53L0X_GetInterruptThresholds+0x68>)
 8006a26:	4013      	ands	r3, r2
		*pThresholdHigh =
 8006a28:	683a      	ldr	r2, [r7, #0]
 8006a2a:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006a2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	1ffe0000 	.word	0x1ffe0000

08006a3c <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a46:	2300      	movs	r3, #0
 8006a48:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8006a4e:	2201      	movs	r2, #1
 8006a50:	210b      	movs	r1, #11
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7fc fc0e 	bl	8003274 <VL53L0X_WrByte>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	210b      	movs	r1, #11
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f7fc fc07 	bl	8003274 <VL53L0X_WrByte>
 8006a66:	4603      	mov	r3, r0
 8006a68:	461a      	mov	r2, r3
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8006a70:	f107 030d 	add.w	r3, r7, #13
 8006a74:	461a      	mov	r2, r3
 8006a76:	2113      	movs	r1, #19
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f7fc fcaf 	bl	80033dc <VL53L0X_RdByte>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	461a      	mov	r2, r3
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8006a88:	7bbb      	ldrb	r3, [r7, #14]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8006a8e:	7b7b      	ldrb	r3, [r7, #13]
 8006a90:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d006      	beq.n	8006aa6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8006a98:	7bbb      	ldrb	r3, [r7, #14]
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d803      	bhi.n	8006aa6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8006a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0d3      	beq.n	8006a4e <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8006aa6:	7bbb      	ldrb	r3, [r7, #14]
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d901      	bls.n	8006ab0 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8006aac:	23f4      	movs	r3, #244	; 0xf4
 8006aae:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8006aca:	f107 030e 	add.w	r3, r7, #14
 8006ace:	461a      	mov	r2, r3
 8006ad0:	2113      	movs	r1, #19
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7fc fc82 	bl	80033dc <VL53L0X_RdByte>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8006adc:	7bbb      	ldrb	r3, [r7, #14]
 8006ade:	f003 0207 	and.w	r2, r3, #7
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8006ae6:	7bbb      	ldrb	r3, [r7, #14]
 8006ae8:	f003 0318 	and.w	r3, r3, #24
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8006af0:	23fa      	movs	r3, #250	; 0xfa
 8006af2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	68b9      	ldr	r1, [r7, #8]
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 fa03 	bl	8006f20 <VL53L0X_perform_ref_spad_management>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8006b1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b34:	2300      	movs	r3, #0
 8006b36:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8006b38:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006b3c:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8006b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b42:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8006b44:	f107 0308 	add.w	r3, r7, #8
 8006b48:	461a      	mov	r2, r3
 8006b4a:	2128      	movs	r1, #40	; 0x28
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7fc fc6f 	bl	8003430 <VL53L0X_RdWord>
 8006b52:	4603      	mov	r3, r0
 8006b54:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8006b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d11e      	bne.n	8006b9c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8006b5e:	893b      	ldrh	r3, [r7, #8]
 8006b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8006b68:	893b      	ldrh	r3, [r7, #8]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	dd0b      	ble.n	8006b8c <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8006b74:	893a      	ldrh	r2, [r7, #8]
 8006b76:	897b      	ldrh	r3, [r7, #10]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	b21b      	sxth	r3, r3
 8006b7e:	461a      	mov	r2, r3
					* 250;
 8006b80:	23fa      	movs	r3, #250	; 0xfa
 8006b82:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	e007      	b.n	8006b9c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8006b8c:	893b      	ldrh	r3, [r7, #8]
 8006b8e:	b21b      	sxth	r3, r3
 8006b90:	461a      	mov	r2, r3
 8006b92:	23fa      	movs	r3, #250	; 0xfa
 8006b94:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8006b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b08b      	sub	sp, #44	; 0x2c
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
 8006bb4:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8006bb6:	2308      	movs	r3, #8
 8006bb8:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bc4:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bce:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	69ba      	ldr	r2, [r7, #24]
 8006bd4:	fbb3 f2f2 	udiv	r2, r3, r2
 8006bd8:	69b9      	ldr	r1, [r7, #24]
 8006bda:	fb01 f202 	mul.w	r2, r1, r2
 8006bde:	1a9b      	subs	r3, r3, r2
 8006be0:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	627b      	str	r3, [r7, #36]	; 0x24
 8006be6:	e030      	b.n	8006c4a <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8006be8:	2300      	movs	r3, #0
 8006bea:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	4413      	add	r3, r2
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8006bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d11e      	bne.n	8006c3c <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8006bfe:	7ffa      	ldrb	r2, [r7, #31]
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	fa42 f303 	asr.w	r3, r2, r3
 8006c06:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8006c0c:	e016      	b.n	8006c3c <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8006c0e:	7ffb      	ldrb	r3, [r7, #31]
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00b      	beq.n	8006c30 <get_next_good_spad+0x88>
				success = 1;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	69ba      	ldr	r2, [r7, #24]
 8006c20:	fb03 f202 	mul.w	r2, r3, r2
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	4413      	add	r3, r2
 8006c28:	461a      	mov	r2, r3
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	601a      	str	r2, [r3, #0]
				break;
 8006c2e:	e009      	b.n	8006c44 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8006c30:	7ffb      	ldrb	r3, [r7, #31]
 8006c32:	085b      	lsrs	r3, r3, #1
 8006c34:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8006c3c:	6a3a      	ldr	r2, [r7, #32]
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d3e4      	bcc.n	8006c0e <get_next_good_spad+0x66>
				coarseIndex++) {
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	3301      	adds	r3, #1
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d202      	bcs.n	8006c58 <get_next_good_spad+0xb0>
 8006c52:	7fbb      	ldrb	r3, [r7, #30]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d0c7      	beq.n	8006be8 <get_next_good_spad+0x40>
		}
	}
}
 8006c58:	bf00      	nop
 8006c5a:	372c      	adds	r7, #44	; 0x2c
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	099b      	lsrs	r3, r3, #6
 8006c74:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8006c76:	4a07      	ldr	r2, [pc, #28]	; (8006c94 <is_aperture+0x30>)
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <is_aperture+0x22>
		isAperture = 0;
 8006c82:	2300      	movs	r3, #0
 8006c84:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	20000520 	.word	0x20000520

08006c98 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b089      	sub	sp, #36	; 0x24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8006ca8:	2308      	movs	r3, #8
 8006caa:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb4:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	fbb3 f2f2 	udiv	r2, r3, r2
 8006cbe:	69b9      	ldr	r1, [r7, #24]
 8006cc0:	fb01 f202 	mul.w	r2, r1, r2
 8006cc4:	1a9b      	subs	r3, r3, r2
 8006cc6:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d302      	bcc.n	8006cd6 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006cd0:	23ce      	movs	r3, #206	; 0xce
 8006cd2:	77fb      	strb	r3, [r7, #31]
 8006cd4:	e010      	b.n	8006cf8 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	4413      	add	r3, r2
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	b25a      	sxtb	r2, r3
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ce8:	b25b      	sxtb	r3, r3
 8006cea:	4313      	orrs	r3, r2
 8006cec:	b259      	sxtb	r1, r3
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	b2ca      	uxtb	r2, r1
 8006cf6:	701a      	strb	r2, [r3, #0]

	return status;
 8006cf8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3724      	adds	r7, #36	; 0x24
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8006d12:	2306      	movs	r3, #6
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	21b0      	movs	r1, #176	; 0xb0
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f7fc fa4f 	bl	80031bc <VL53L0X_WriteMulti>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8006d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b084      	sub	sp, #16
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8006d38:	2306      	movs	r3, #6
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	21b0      	movs	r1, #176	; 0xb0
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7fc fa6c 	bl	800321c <VL53L0X_ReadMulti>
 8006d44:	4603      	mov	r3, r0
 8006d46:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8006d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08c      	sub	sp, #48	; 0x30
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	607a      	str	r2, [r7, #4]
 8006d5e:	603b      	str	r3, [r7, #0]
 8006d60:	460b      	mov	r3, r1
 8006d62:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006d64:	2300      	movs	r3, #0
 8006d66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8006d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d6c:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8006d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d70:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8006d72:	2300      	movs	r3, #0
 8006d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d76:	e02b      	b.n	8006dd0 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8006d78:	f107 031c 	add.w	r3, r7, #28
 8006d7c:	6a3a      	ldr	r2, [r7, #32]
 8006d7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7ff ff11 	bl	8006ba8 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d8c:	d103      	bne.n	8006d96 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006d8e:	23ce      	movs	r3, #206	; 0xce
 8006d90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8006d94:	e020      	b.n	8006dd8 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	461a      	mov	r2, r3
 8006d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d9c:	4413      	add	r3, r2
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff ff60 	bl	8006c64 <is_aperture>
 8006da4:	4603      	mov	r3, r0
 8006da6:	461a      	mov	r2, r3
 8006da8:	7afb      	ldrb	r3, [r7, #11]
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d003      	beq.n	8006db6 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006dae:	23ce      	movs	r3, #206	; 0xce
 8006db0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8006db4:	e010      	b.n	8006dd8 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8006dba:	6a3a      	ldr	r2, [r7, #32]
 8006dbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006dbe:	6838      	ldr	r0, [r7, #0]
 8006dc0:	f7ff ff6a 	bl	8006c98 <enable_spad_bit>
		currentSpad++;
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8006dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dcc:	3301      	adds	r3, #1
 8006dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d3cf      	bcc.n	8006d78 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8006dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dda:	6a3a      	ldr	r2, [r7, #32]
 8006ddc:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8006dde:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d106      	bne.n	8006df4 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f7ff ff8d 	bl	8006d08 <set_ref_spad_map>
 8006dee:	4603      	mov	r3, r0
 8006df0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8006df4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d121      	bne.n	8006e40 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8006dfc:	f107 0314 	add.w	r3, r7, #20
 8006e00:	4619      	mov	r1, r3
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f7ff ff93 	bl	8006d2e <get_ref_spad_map>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8006e12:	e011      	b.n	8006e38 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e18:	4413      	add	r3, r2
 8006e1a:	781a      	ldrb	r2, [r3, #0]
 8006e1c:	f107 0114 	add.w	r1, r7, #20
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	440b      	add	r3, r1
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d003      	beq.n	8006e32 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006e2a:	23ce      	movs	r3, #206	; 0xce
 8006e2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8006e30:	e006      	b.n	8006e40 <enable_ref_spads+0xec>
			}
			i++;
 8006e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e34:	3301      	adds	r3, #1
 8006e36:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8006e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d3e9      	bcc.n	8006e14 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8006e40:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3730      	adds	r7, #48	; 0x30
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08a      	sub	sp, #40	; 0x28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006e56:	2300      	movs	r3, #0
 8006e58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006e68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8006e6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d107      	bne.n	8006e84 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8006e74:	22c0      	movs	r2, #192	; 0xc0
 8006e76:	2101      	movs	r1, #1
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7fc f9fb 	bl	8003274 <VL53L0X_WrByte>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8006e84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d108      	bne.n	8006e9e <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8006e8c:	f107 0308 	add.w	r3, r7, #8
 8006e90:	4619      	mov	r1, r3
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7ff fc48 	bl	8006728 <VL53L0X_PerformSingleRangingMeasurement>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8006e9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d107      	bne.n	8006eb6 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	21ff      	movs	r1, #255	; 0xff
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7fc f9e2 	bl	8003274 <VL53L0X_WrByte>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8006eb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d107      	bne.n	8006ece <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	21b6      	movs	r1, #182	; 0xb6
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7fc fab4 	bl	8003430 <VL53L0X_RdWord>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8006ece:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d107      	bne.n	8006ee6 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	21ff      	movs	r1, #255	; 0xff
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7fc f9ca 	bl	8003274 <VL53L0X_WrByte>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8006ee6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d112      	bne.n	8006f14 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006eee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f7fc f9bc 	bl	8003274 <VL53L0X_WrByte>
 8006efc:	4603      	mov	r3, r0
 8006efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8006f02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d104      	bne.n	8006f14 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006f10:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8006f14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3728      	adds	r7, #40	; 0x28
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8006f20:	b590      	push	{r4, r7, lr}
 8006f22:	b09d      	sub	sp, #116	; 0x74
 8006f24:	af06      	add	r7, sp, #24
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8006f32:	23b4      	movs	r3, #180	; 0xb4
 8006f34:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8006f3c:	232c      	movs	r3, #44	; 0x2c
 8006f3e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8006f40:	2300      	movs	r3, #0
 8006f42:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8006f44:	2300      	movs	r3, #0
 8006f46:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8006f4c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006f50:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8006f52:	2300      	movs	r3, #0
 8006f54:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8006f56:	2300      	movs	r3, #0
 8006f58:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8006f5a:	2306      	movs	r3, #6
 8006f5c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8006f62:	2300      	movs	r3, #0
 8006f64:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8006f66:	2300      	movs	r3, #0
 8006f68:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8006f70:	2300      	movs	r3, #0
 8006f72:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8006f74:	2300      	movs	r3, #0
 8006f76:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8006f84:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8006f86:	2300      	movs	r3, #0
 8006f88:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f8a:	e009      	b.n	8006fa0 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f90:	4413      	add	r3, r2
 8006f92:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006f96:	2200      	movs	r2, #0
 8006f98:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8006f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d3f1      	bcc.n	8006f8c <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006fa8:	2201      	movs	r2, #1
 8006faa:	21ff      	movs	r1, #255	; 0xff
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f7fc f961 	bl	8003274 <VL53L0X_WrByte>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006fb8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d107      	bne.n	8006fd0 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	214f      	movs	r1, #79	; 0x4f
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f7fc f955 	bl	8003274 <VL53L0X_WrByte>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006fd0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d107      	bne.n	8006fe8 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8006fd8:	222c      	movs	r2, #44	; 0x2c
 8006fda:	214e      	movs	r1, #78	; 0x4e
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f7fc f949 	bl	8003274 <VL53L0X_WrByte>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006fe8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d107      	bne.n	8007000 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	21ff      	movs	r1, #255	; 0xff
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f7fc f93d 	bl	8003274 <VL53L0X_WrByte>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007000:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007004:	2b00      	cmp	r3, #0
 8007006:	d109      	bne.n	800701c <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8007008:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800700c:	461a      	mov	r2, r3
 800700e:	21b6      	movs	r1, #182	; 0xb6
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f7fc f92f 	bl	8003274 <VL53L0X_WrByte>
 8007016:	4603      	mov	r3, r0
 8007018:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800701c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007020:	2b00      	cmp	r3, #0
 8007022:	d107      	bne.n	8007034 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8007024:	2200      	movs	r2, #0
 8007026:	2180      	movs	r1, #128	; 0x80
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f7fc f923 	bl	8003274 <VL53L0X_WrByte>
 800702e:	4603      	mov	r3, r0
 8007030:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8007034:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10a      	bne.n	8007052 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800703c:	f107 0210 	add.w	r2, r7, #16
 8007040:	f107 0111 	add.w	r1, r7, #17
 8007044:	2300      	movs	r3, #0
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f000 fbbb 	bl	80077c2 <VL53L0X_perform_ref_calibration>
 800704c:	4603      	mov	r3, r0
 800704e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8007052:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007056:	2b00      	cmp	r3, #0
 8007058:	d121      	bne.n	800709e <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800705a:	2300      	movs	r3, #0
 800705c:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800705e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007060:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8007062:	2300      	movs	r3, #0
 8007064:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8007066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007068:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8007076:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800707a:	f107 0218 	add.w	r2, r7, #24
 800707e:	9204      	str	r2, [sp, #16]
 8007080:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007082:	9203      	str	r2, [sp, #12]
 8007084:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007086:	9202      	str	r2, [sp, #8]
 8007088:	9301      	str	r3, [sp, #4]
 800708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	4623      	mov	r3, r4
 8007090:	4602      	mov	r2, r0
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f7ff fe5e 	bl	8006d54 <enable_ref_spads>
 8007098:	4603      	mov	r3, r0
 800709a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800709e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d174      	bne.n	8007190 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 80070aa:	f107 0312 	add.w	r3, r7, #18
 80070ae:	4619      	mov	r1, r3
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f7ff fecb 	bl	8006e4c <perform_ref_signal_measurement>
 80070b6:	4603      	mov	r3, r0
 80070b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80070bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d161      	bne.n	8007188 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80070c4:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80070c6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d25d      	bcs.n	8007188 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 80070cc:	2300      	movs	r3, #0
 80070ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80070d0:	e009      	b.n	80070e6 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80070dc:	2200      	movs	r2, #0
 80070de:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 80070e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070e2:	3301      	adds	r3, #1
 80070e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80070e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d3f1      	bcc.n	80070d2 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80070ee:	e002      	b.n	80070f6 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80070f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070f2:	3301      	adds	r3, #1
 80070f4:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80070f6:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80070fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070fc:	4413      	add	r3, r2
 80070fe:	4618      	mov	r0, r3
 8007100:	f7ff fdb0 	bl	8006c64 <is_aperture>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d103      	bne.n	8007112 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800710a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800710c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710e:	429a      	cmp	r2, r3
 8007110:	d3ee      	bcc.n	80070f0 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8007112:	2301      	movs	r3, #1
 8007114:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8007116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007118:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8007126:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800712a:	f107 0218 	add.w	r2, r7, #24
 800712e:	9204      	str	r2, [sp, #16]
 8007130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007132:	9203      	str	r2, [sp, #12]
 8007134:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007136:	9202      	str	r2, [sp, #8]
 8007138:	9301      	str	r3, [sp, #4]
 800713a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	4623      	mov	r3, r4
 8007140:	4602      	mov	r2, r0
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f7ff fe06 	bl	8006d54 <enable_ref_spads>
 8007148:	4603      	mov	r3, r0
 800714a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800714e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007152:	2b00      	cmp	r3, #0
 8007154:	d11b      	bne.n	800718e <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800715a:	f107 0312 	add.w	r3, r7, #18
 800715e:	4619      	mov	r1, r3
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f7ff fe73 	bl	8006e4c <perform_ref_signal_measurement>
 8007166:	4603      	mov	r3, r0
 8007168:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800716c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10c      	bne.n	800718e <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8007174:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8007176:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007178:	429a      	cmp	r2, r3
 800717a:	d208      	bcs.n	800718e <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800717c:	2301      	movs	r3, #1
 800717e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8007182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007184:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8007186:	e002      	b.n	800718e <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8007188:	2300      	movs	r3, #0
 800718a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800718c:	e000      	b.n	8007190 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800718e:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007190:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007194:	2b00      	cmp	r3, #0
 8007196:	f040 80af 	bne.w	80072f8 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800719a:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800719c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800719e:	429a      	cmp	r2, r3
 80071a0:	f240 80aa 	bls.w	80072f8 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 80071a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071a6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 80071aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ac:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f503 7192 	add.w	r1, r3, #292	; 0x124
 80071b4:	f107 031c 	add.w	r3, r7, #28
 80071b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071ba:	4618      	mov	r0, r3
 80071bc:	f012 fa3c 	bl	8019638 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 80071c0:	8a7b      	ldrh	r3, [r7, #18]
 80071c2:	461a      	mov	r2, r3
 80071c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	bfb8      	it	lt
 80071cc:	425b      	neglt	r3, r3
 80071ce:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 80071d0:	2300      	movs	r3, #0
 80071d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 80071d6:	e086      	b.n	80072e6 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 80071de:	f107 0314 	add.w	r3, r7, #20
 80071e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80071e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071e6:	f7ff fcdf 	bl	8006ba8 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071f0:	d103      	bne.n	80071fa <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80071f2:	23ce      	movs	r3, #206	; 0xce
 80071f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80071f8:	e07e      	b.n	80072f8 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80071fa:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	4413      	add	r3, r2
 8007202:	4618      	mov	r0, r3
 8007204:	f7ff fd2e 	bl	8006c64 <is_aperture>
 8007208:	4603      	mov	r3, r0
 800720a:	461a      	mov	r2, r3
 800720c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800720e:	4293      	cmp	r3, r2
 8007210:	d003      	beq.n	800721a <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8007212:	2301      	movs	r3, #1
 8007214:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8007218:	e06e      	b.n	80072f8 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800721a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800721c:	3301      	adds	r3, #1
 800721e:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800722a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800722c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800722e:	4618      	mov	r0, r3
 8007230:	f7ff fd32 	bl	8006c98 <enable_spad_bit>
 8007234:	4603      	mov	r3, r0
 8007236:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800723a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10c      	bne.n	800725c <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8007242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007244:	3301      	adds	r3, #1
 8007246:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800724e:	4619      	mov	r1, r3
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f7ff fd59 	bl	8006d08 <set_ref_spad_map>
 8007256:	4603      	mov	r3, r0
 8007258:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800725c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007260:	2b00      	cmp	r3, #0
 8007262:	d146      	bne.n	80072f2 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8007264:	f107 0312 	add.w	r3, r7, #18
 8007268:	4619      	mov	r1, r3
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f7ff fdee 	bl	8006e4c <perform_ref_signal_measurement>
 8007270:	4603      	mov	r3, r0
 8007272:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8007276:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800727a:	2b00      	cmp	r3, #0
 800727c:	d13b      	bne.n	80072f6 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800727e:	8a7b      	ldrh	r3, [r7, #18]
 8007280:	461a      	mov	r2, r3
 8007282:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	bfb8      	it	lt
 800728a:	425b      	neglt	r3, r3
 800728c:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800728e:	8a7b      	ldrh	r3, [r7, #18]
 8007290:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007292:	429a      	cmp	r2, r3
 8007294:	d21c      	bcs.n	80072d0 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8007296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800729a:	429a      	cmp	r2, r3
 800729c:	d914      	bls.n	80072c8 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800729e:	f107 031c 	add.w	r3, r7, #28
 80072a2:	4619      	mov	r1, r3
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f7ff fd2f 	bl	8006d08 <set_ref_spad_map>
 80072aa:	4603      	mov	r3, r0
 80072ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 80072b6:	f107 011c 	add.w	r1, r7, #28
 80072ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072bc:	4618      	mov	r0, r3
 80072be:	f012 f9bb 	bl	8019638 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 80072c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072c4:	3b01      	subs	r3, #1
 80072c6:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 80072c8:	2301      	movs	r3, #1
 80072ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ce:	e00a      	b.n	80072e6 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 80072da:	f107 031c 	add.w	r3, r7, #28
 80072de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072e0:	4618      	mov	r0, r3
 80072e2:	f012 f9a9 	bl	8019638 <memcpy>
		while (!complete) {
 80072e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f43f af74 	beq.w	80071d8 <VL53L0X_perform_ref_spad_management+0x2b8>
 80072f0:	e002      	b.n	80072f8 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80072f2:	bf00      	nop
 80072f4:	e000      	b.n	80072f8 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80072f6:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80072f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d115      	bne.n	800732c <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007304:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800730c:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	b2da      	uxtb	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	781a      	ldrb	r2, [r3, #0]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800732c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8007330:	4618      	mov	r0, r3
 8007332:	375c      	adds	r7, #92	; 0x5c
 8007334:	46bd      	mov	sp, r7
 8007336:	bd90      	pop	{r4, r7, pc}

08007338 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8007338:	b590      	push	{r4, r7, lr}
 800733a:	b093      	sub	sp, #76	; 0x4c
 800733c:	af06      	add	r7, sp, #24
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	4613      	mov	r3, r2
 8007344:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007346:	2300      	movs	r3, #0
 8007348:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800734c:	2300      	movs	r3, #0
 800734e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8007350:	23b4      	movs	r3, #180	; 0xb4
 8007352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8007356:	2306      	movs	r3, #6
 8007358:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800735a:	232c      	movs	r3, #44	; 0x2c
 800735c:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800735e:	2201      	movs	r2, #1
 8007360:	21ff      	movs	r1, #255	; 0xff
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f7fb ff86 	bl	8003274 <VL53L0X_WrByte>
 8007368:	4603      	mov	r3, r0
 800736a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800736e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007372:	2b00      	cmp	r3, #0
 8007374:	d107      	bne.n	8007386 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8007376:	2200      	movs	r2, #0
 8007378:	214f      	movs	r1, #79	; 0x4f
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f7fb ff7a 	bl	8003274 <VL53L0X_WrByte>
 8007380:	4603      	mov	r3, r0
 8007382:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8007386:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800738a:	2b00      	cmp	r3, #0
 800738c:	d107      	bne.n	800739e <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800738e:	222c      	movs	r2, #44	; 0x2c
 8007390:	214e      	movs	r1, #78	; 0x4e
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f7fb ff6e 	bl	8003274 <VL53L0X_WrByte>
 8007398:	4603      	mov	r3, r0
 800739a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800739e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d107      	bne.n	80073b6 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80073a6:	2200      	movs	r2, #0
 80073a8:	21ff      	movs	r1, #255	; 0xff
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f7fb ff62 	bl	8003274 <VL53L0X_WrByte>
 80073b0:	4603      	mov	r3, r0
 80073b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80073b6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d109      	bne.n	80073d2 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 80073be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073c2:	461a      	mov	r2, r3
 80073c4:	21b6      	movs	r1, #182	; 0xb6
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f7fb ff54 	bl	8003274 <VL53L0X_WrByte>
 80073cc:	4603      	mov	r3, r0
 80073ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 80073d2:	2300      	movs	r3, #0
 80073d4:	627b      	str	r3, [r7, #36]	; 0x24
 80073d6:	e009      	b.n	80073ec <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	4413      	add	r3, r2
 80073de:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80073e2:	2200      	movs	r2, #0
 80073e4:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	3301      	adds	r3, #1
 80073ea:	627b      	str	r3, [r7, #36]	; 0x24
 80073ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d3f1      	bcc.n	80073d8 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80073f4:	79fb      	ldrb	r3, [r7, #7]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d011      	beq.n	800741e <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80073fa:	e002      	b.n	8007402 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80073fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fe:	3301      	adds	r3, #1
 8007400:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007402:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007408:	4413      	add	r3, r2
 800740a:	4618      	mov	r0, r3
 800740c:	f7ff fc2a 	bl	8006c64 <is_aperture>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d103      	bne.n	800741e <VL53L0X_set_reference_spads+0xe6>
 8007416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	429a      	cmp	r2, r3
 800741c:	d3ee      	bcc.n	80073fc <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800742a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800742e:	79f9      	ldrb	r1, [r7, #7]
 8007430:	f107 0214 	add.w	r2, r7, #20
 8007434:	9204      	str	r2, [sp, #16]
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	9203      	str	r2, [sp, #12]
 800743a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800743c:	9202      	str	r2, [sp, #8]
 800743e:	9301      	str	r3, [sp, #4]
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	4623      	mov	r3, r4
 8007446:	4602      	mov	r2, r0
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f7ff fc83 	bl	8006d54 <enable_ref_spads>
 800744e:	4603      	mov	r3, r0
 8007450:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8007454:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10c      	bne.n	8007476 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	b2da      	uxtb	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	79fa      	ldrb	r2, [r7, #7]
 8007472:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8007476:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800747a:	4618      	mov	r0, r3
 800747c:	3734      	adds	r7, #52	; 0x34
 800747e:	46bd      	mov	sp, r7
 8007480:	bd90      	pop	{r4, r7, pc}

08007482 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b084      	sub	sp, #16
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	460b      	mov	r3, r1
 800748c:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800748e:	2300      	movs	r3, #0
 8007490:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10a      	bne.n	80074b0 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800749a:	78fb      	ldrb	r3, [r7, #3]
 800749c:	f043 0301 	orr.w	r3, r3, #1
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	461a      	mov	r2, r3
 80074a4:	2100      	movs	r1, #0
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7fb fee4 	bl	8003274 <VL53L0X_WrByte>
 80074ac:	4603      	mov	r3, r0
 80074ae:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80074b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d104      	bne.n	80074c2 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f9bf 	bl	800783c <VL53L0X_measurement_poll_for_completion>
 80074be:	4603      	mov	r3, r0
 80074c0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80074c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d105      	bne.n	80074d6 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80074ca:	2100      	movs	r1, #0
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7ff fab5 	bl	8006a3c <VL53L0X_ClearInterruptMask>
 80074d2:	4603      	mov	r3, r0
 80074d4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80074d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d106      	bne.n	80074ec <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80074de:	2200      	movs	r2, #0
 80074e0:	2100      	movs	r1, #0
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7fb fec6 	bl	8003274 <VL53L0X_WrByte>
 80074e8:	4603      	mov	r3, r0
 80074ea:	73fb      	strb	r3, [r7, #15]

	return Status;
 80074ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	4608      	mov	r0, r1
 8007502:	4611      	mov	r1, r2
 8007504:	461a      	mov	r2, r3
 8007506:	4603      	mov	r3, r0
 8007508:	70fb      	strb	r3, [r7, #3]
 800750a:	460b      	mov	r3, r1
 800750c:	70bb      	strb	r3, [r7, #2]
 800750e:	4613      	mov	r3, r2
 8007510:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007512:	2300      	movs	r3, #0
 8007514:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8007516:	2300      	movs	r3, #0
 8007518:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800751a:	2201      	movs	r2, #1
 800751c:	21ff      	movs	r1, #255	; 0xff
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f7fb fea8 	bl	8003274 <VL53L0X_WrByte>
 8007524:	4603      	mov	r3, r0
 8007526:	461a      	mov	r2, r3
 8007528:	7bfb      	ldrb	r3, [r7, #15]
 800752a:	4313      	orrs	r3, r2
 800752c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800752e:	2200      	movs	r2, #0
 8007530:	2100      	movs	r1, #0
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7fb fe9e 	bl	8003274 <VL53L0X_WrByte>
 8007538:	4603      	mov	r3, r0
 800753a:	461a      	mov	r2, r3
 800753c:	7bfb      	ldrb	r3, [r7, #15]
 800753e:	4313      	orrs	r3, r2
 8007540:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007542:	2200      	movs	r2, #0
 8007544:	21ff      	movs	r1, #255	; 0xff
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7fb fe94 	bl	8003274 <VL53L0X_WrByte>
 800754c:	4603      	mov	r3, r0
 800754e:	461a      	mov	r2, r3
 8007550:	7bfb      	ldrb	r3, [r7, #15]
 8007552:	4313      	orrs	r3, r2
 8007554:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8007556:	78fb      	ldrb	r3, [r7, #3]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d01e      	beq.n	800759a <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800755c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d009      	beq.n	8007578 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8007564:	69ba      	ldr	r2, [r7, #24]
 8007566:	21cb      	movs	r1, #203	; 0xcb
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7fb ff37 	bl	80033dc <VL53L0X_RdByte>
 800756e:	4603      	mov	r3, r0
 8007570:	461a      	mov	r2, r3
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	4313      	orrs	r3, r2
 8007576:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007578:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800757c:	2b00      	cmp	r3, #0
 800757e:	d02a      	beq.n	80075d6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8007580:	f107 030e 	add.w	r3, r7, #14
 8007584:	461a      	mov	r2, r3
 8007586:	21ee      	movs	r1, #238	; 0xee
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f7fb ff27 	bl	80033dc <VL53L0X_RdByte>
 800758e:	4603      	mov	r3, r0
 8007590:	461a      	mov	r2, r3
 8007592:	7bfb      	ldrb	r3, [r7, #15]
 8007594:	4313      	orrs	r3, r2
 8007596:	73fb      	strb	r3, [r7, #15]
 8007598:	e01d      	b.n	80075d6 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800759a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00a      	beq.n	80075b8 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80075a2:	78bb      	ldrb	r3, [r7, #2]
 80075a4:	461a      	mov	r2, r3
 80075a6:	21cb      	movs	r1, #203	; 0xcb
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f7fb fe63 	bl	8003274 <VL53L0X_WrByte>
 80075ae:	4603      	mov	r3, r0
 80075b0:	461a      	mov	r2, r3
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80075b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00a      	beq.n	80075d6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80075c0:	787b      	ldrb	r3, [r7, #1]
 80075c2:	2280      	movs	r2, #128	; 0x80
 80075c4:	21ee      	movs	r1, #238	; 0xee
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f7fb fed4 	bl	8003374 <VL53L0X_UpdateByte>
 80075cc:	4603      	mov	r3, r0
 80075ce:	461a      	mov	r2, r3
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80075d6:	2201      	movs	r2, #1
 80075d8:	21ff      	movs	r1, #255	; 0xff
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7fb fe4a 	bl	8003274 <VL53L0X_WrByte>
 80075e0:	4603      	mov	r3, r0
 80075e2:	461a      	mov	r2, r3
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80075ea:	2201      	movs	r2, #1
 80075ec:	2100      	movs	r1, #0
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7fb fe40 	bl	8003274 <VL53L0X_WrByte>
 80075f4:	4603      	mov	r3, r0
 80075f6:	461a      	mov	r2, r3
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80075fe:	2200      	movs	r2, #0
 8007600:	21ff      	movs	r1, #255	; 0xff
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7fb fe36 	bl	8003274 <VL53L0X_WrByte>
 8007608:	4603      	mov	r3, r0
 800760a:	461a      	mov	r2, r3
 800760c:	7bfb      	ldrb	r3, [r7, #15]
 800760e:	4313      	orrs	r3, r2
 8007610:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8007612:	7bbb      	ldrb	r3, [r7, #14]
 8007614:	f023 0310 	bic.w	r3, r3, #16
 8007618:	b2da      	uxtb	r2, r3
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	701a      	strb	r2, [r3, #0]

	return Status;
 800761e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b08a      	sub	sp, #40	; 0x28
 800762e:	af04      	add	r7, sp, #16
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	4611      	mov	r1, r2
 8007636:	461a      	mov	r2, r3
 8007638:	460b      	mov	r3, r1
 800763a:	71fb      	strb	r3, [r7, #7]
 800763c:	4613      	mov	r3, r2
 800763e:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007640:	2300      	movs	r3, #0
 8007642:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007644:	2300      	movs	r3, #0
 8007646:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8007648:	2300      	movs	r3, #0
 800764a:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800764c:	2300      	movs	r3, #0
 800764e:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8007650:	2300      	movs	r3, #0
 8007652:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8007654:	79bb      	ldrb	r3, [r7, #6]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007660:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8007662:	2201      	movs	r2, #1
 8007664:	2101      	movs	r1, #1
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f7fb fe04 	bl	8003274 <VL53L0X_WrByte>
 800766c:	4603      	mov	r3, r0
 800766e:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8007670:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d105      	bne.n	8007684 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8007678:	2140      	movs	r1, #64	; 0x40
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f7ff ff01 	bl	8007482 <VL53L0X_perform_single_ref_calibration>
 8007680:	4603      	mov	r3, r0
 8007682:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8007684:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d115      	bne.n	80076b8 <VL53L0X_perform_vhv_calibration+0x8e>
 800768c:	79fb      	ldrb	r3, [r7, #7]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d112      	bne.n	80076b8 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8007692:	7d39      	ldrb	r1, [r7, #20]
 8007694:	7d7a      	ldrb	r2, [r7, #21]
 8007696:	2300      	movs	r3, #0
 8007698:	9303      	str	r3, [sp, #12]
 800769a:	2301      	movs	r3, #1
 800769c:	9302      	str	r3, [sp, #8]
 800769e:	f107 0313 	add.w	r3, r7, #19
 80076a2:	9301      	str	r3, [sp, #4]
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	460b      	mov	r3, r1
 80076aa:	2101      	movs	r1, #1
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f7ff ff23 	bl	80074f8 <VL53L0X_ref_calibration_io>
 80076b2:	4603      	mov	r3, r0
 80076b4:	75fb      	strb	r3, [r7, #23]
 80076b6:	e002      	b.n	80076be <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2200      	movs	r2, #0
 80076bc:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80076be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d112      	bne.n	80076ec <VL53L0X_perform_vhv_calibration+0xc2>
 80076c6:	79bb      	ldrb	r3, [r7, #6]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00f      	beq.n	80076ec <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80076cc:	7dbb      	ldrb	r3, [r7, #22]
 80076ce:	461a      	mov	r2, r3
 80076d0:	2101      	movs	r1, #1
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f7fb fdce 	bl	8003274 <VL53L0X_WrByte>
 80076d8:	4603      	mov	r3, r0
 80076da:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80076dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d103      	bne.n	80076ec <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	7dba      	ldrb	r2, [r7, #22]
 80076e8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80076ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3718      	adds	r7, #24
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b08a      	sub	sp, #40	; 0x28
 80076fc:	af04      	add	r7, sp, #16
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	4611      	mov	r1, r2
 8007704:	461a      	mov	r2, r3
 8007706:	460b      	mov	r3, r1
 8007708:	71fb      	strb	r3, [r7, #7]
 800770a:	4613      	mov	r3, r2
 800770c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800770e:	2300      	movs	r3, #0
 8007710:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007712:	2300      	movs	r3, #0
 8007714:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8007716:	2300      	movs	r3, #0
 8007718:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800771a:	2300      	movs	r3, #0
 800771c:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800771e:	79bb      	ldrb	r3, [r7, #6]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d003      	beq.n	800772c <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800772a:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800772c:	2202      	movs	r2, #2
 800772e:	2101      	movs	r1, #1
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f7fb fd9f 	bl	8003274 <VL53L0X_WrByte>
 8007736:	4603      	mov	r3, r0
 8007738:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800773a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d105      	bne.n	800774e <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8007742:	2100      	movs	r1, #0
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f7ff fe9c 	bl	8007482 <VL53L0X_perform_single_ref_calibration>
 800774a:	4603      	mov	r3, r0
 800774c:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800774e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d115      	bne.n	8007782 <VL53L0X_perform_phase_calibration+0x8a>
 8007756:	79fb      	ldrb	r3, [r7, #7]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d112      	bne.n	8007782 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800775c:	7d39      	ldrb	r1, [r7, #20]
 800775e:	7d7a      	ldrb	r2, [r7, #21]
 8007760:	2301      	movs	r3, #1
 8007762:	9303      	str	r3, [sp, #12]
 8007764:	2300      	movs	r3, #0
 8007766:	9302      	str	r3, [sp, #8]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	9301      	str	r3, [sp, #4]
 800776c:	f107 0313 	add.w	r3, r7, #19
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	460b      	mov	r3, r1
 8007774:	2101      	movs	r1, #1
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f7ff febe 	bl	80074f8 <VL53L0X_ref_calibration_io>
 800777c:	4603      	mov	r3, r0
 800777e:	75fb      	strb	r3, [r7, #23]
 8007780:	e002      	b.n	8007788 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	2200      	movs	r2, #0
 8007786:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007788:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d112      	bne.n	80077b6 <VL53L0X_perform_phase_calibration+0xbe>
 8007790:	79bb      	ldrb	r3, [r7, #6]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00f      	beq.n	80077b6 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007796:	7dbb      	ldrb	r3, [r7, #22]
 8007798:	461a      	mov	r2, r3
 800779a:	2101      	movs	r1, #1
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f7fb fd69 	bl	8003274 <VL53L0X_WrByte>
 80077a2:	4603      	mov	r3, r0
 80077a4:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80077a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d103      	bne.n	80077b6 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	7dba      	ldrb	r2, [r7, #22]
 80077b2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80077b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b086      	sub	sp, #24
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	60f8      	str	r0, [r7, #12]
 80077ca:	60b9      	str	r1, [r7, #8]
 80077cc:	607a      	str	r2, [r7, #4]
 80077ce:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80077d0:	2300      	movs	r3, #0
 80077d2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80077d4:	2300      	movs	r3, #0
 80077d6:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80077de:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80077e0:	78fa      	ldrb	r2, [r7, #3]
 80077e2:	2300      	movs	r3, #0
 80077e4:	68b9      	ldr	r1, [r7, #8]
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f7ff ff1f 	bl	800762a <VL53L0X_perform_vhv_calibration>
 80077ec:	4603      	mov	r3, r0
 80077ee:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80077f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d107      	bne.n	8007808 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80077f8:	78fa      	ldrb	r2, [r7, #3]
 80077fa:	2300      	movs	r3, #0
 80077fc:	6879      	ldr	r1, [r7, #4]
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f7ff ff7a 	bl	80076f8 <VL53L0X_perform_phase_calibration>
 8007804:	4603      	mov	r3, r0
 8007806:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8007808:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10f      	bne.n	8007830 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007810:	7dbb      	ldrb	r3, [r7, #22]
 8007812:	461a      	mov	r2, r3
 8007814:	2101      	movs	r1, #1
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f7fb fd2c 	bl	8003274 <VL53L0X_WrByte>
 800781c:	4603      	mov	r3, r0
 800781e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007820:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d103      	bne.n	8007830 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	7dba      	ldrb	r2, [r7, #22]
 800782c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007830:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3718      	adds	r7, #24
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007844:	2300      	movs	r3, #0
 8007846:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8007848:	2300      	movs	r3, #0
 800784a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800784c:	2300      	movs	r3, #0
 800784e:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007850:	f107 030f 	add.w	r3, r7, #15
 8007854:	4619      	mov	r1, r3
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7fe fe02 	bl	8006460 <VL53L0X_GetMeasurementDataReady>
 800785c:	4603      	mov	r3, r0
 800785e:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8007860:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d110      	bne.n	800788a <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8007868:	7bfb      	ldrb	r3, [r7, #15]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d00f      	beq.n	800788e <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	3301      	adds	r3, #1
 8007872:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800787a:	d302      	bcc.n	8007882 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800787c:	23f9      	movs	r3, #249	; 0xf9
 800787e:	75fb      	strb	r3, [r7, #23]
			break;
 8007880:	e006      	b.n	8007890 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7fb fe48 	bl	8003518 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007888:	e7e2      	b.n	8007850 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800788a:	bf00      	nop
 800788c:	e000      	b.n	8007890 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800788e:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8007890:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007894:	4618      	mov	r0, r3
 8007896:	3718      	adds	r7, #24
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	4603      	mov	r3, r0
 80078a4:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80078a6:	2300      	movs	r3, #0
 80078a8:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80078aa:	79fb      	ldrb	r3, [r7, #7]
 80078ac:	3301      	adds	r3, #1
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	005b      	lsls	r3, r3, #1
 80078b2:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3714      	adds	r7, #20
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b085      	sub	sp, #20
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80078ca:	2300      	movs	r3, #0
 80078cc:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80078ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80078d2:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80078d4:	e002      	b.n	80078dc <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	089b      	lsrs	r3, r3, #2
 80078da:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d8f8      	bhi.n	80078d6 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80078e4:	e017      	b.n	8007916 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	4413      	add	r3, r2
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d30b      	bcc.n	800790a <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	4413      	add	r3, r2
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	085b      	lsrs	r3, r3, #1
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	4413      	add	r3, r2
 8007906:	60fb      	str	r3, [r7, #12]
 8007908:	e002      	b.n	8007910 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	085b      	lsrs	r3, r3, #1
 800790e:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	089b      	lsrs	r3, r3, #2
 8007914:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1e4      	bne.n	80078e6 <VL53L0X_isqrt+0x24>
	}

	return res;
 800791c:	68fb      	ldr	r3, [r7, #12]
}
 800791e:	4618      	mov	r0, r3
 8007920:	3714      	adds	r7, #20
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b086      	sub	sp, #24
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007932:	2300      	movs	r3, #0
 8007934:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8007936:	2200      	movs	r2, #0
 8007938:	2183      	movs	r1, #131	; 0x83
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7fb fc9a 	bl	8003274 <VL53L0X_WrByte>
 8007940:	4603      	mov	r3, r0
 8007942:	461a      	mov	r2, r3
 8007944:	7dfb      	ldrb	r3, [r7, #23]
 8007946:	4313      	orrs	r3, r2
 8007948:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800794a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d11e      	bne.n	8007990 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8007952:	2300      	movs	r3, #0
 8007954:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8007956:	f107 030f 	add.w	r3, r7, #15
 800795a:	461a      	mov	r2, r3
 800795c:	2183      	movs	r1, #131	; 0x83
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f7fb fd3c 	bl	80033dc <VL53L0X_RdByte>
 8007964:	4603      	mov	r3, r0
 8007966:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8007968:	7bfb      	ldrb	r3, [r7, #15]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10a      	bne.n	8007984 <VL53L0X_device_read_strobe+0x5a>
 800796e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d106      	bne.n	8007984 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	3301      	adds	r3, #1
 800797a:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007982:	d3e8      	bcc.n	8007956 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800798a:	d301      	bcc.n	8007990 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800798c:	23f9      	movs	r3, #249	; 0xf9
 800798e:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8007990:	2201      	movs	r2, #1
 8007992:	2183      	movs	r1, #131	; 0x83
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f7fb fc6d 	bl	8003274 <VL53L0X_WrByte>
 800799a:	4603      	mov	r3, r0
 800799c:	461a      	mov	r2, r3
 800799e:	7dfb      	ldrb	r3, [r7, #23]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 80079a4:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3718      	adds	r7, #24
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b098      	sub	sp, #96	; 0x60
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	460b      	mov	r3, r1
 80079ba:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079bc:	2300      	movs	r3, #0
 80079be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 80079c2:	2300      	movs	r3, #0
 80079c4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 80079c8:	2300      	movs	r3, #0
 80079ca:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 80079ce:	2300      	movs	r3, #0
 80079d0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 80079d2:	2300      	movs	r3, #0
 80079d4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80079d6:	2300      	movs	r3, #0
 80079d8:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80079da:	2300      	movs	r3, #0
 80079dc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80079e0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80079e4:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80079e6:	2300      	movs	r3, #0
 80079e8:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80079ea:	2300      	movs	r3, #0
 80079ec:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80079ee:	2300      	movs	r3, #0
 80079f0:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80079f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80079fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007a00:	2b07      	cmp	r3, #7
 8007a02:	f000 8408 	beq.w	8008216 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007a06:	2201      	movs	r2, #1
 8007a08:	2180      	movs	r1, #128	; 0x80
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7fb fc32 	bl	8003274 <VL53L0X_WrByte>
 8007a10:	4603      	mov	r3, r0
 8007a12:	461a      	mov	r2, r3
 8007a14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007a1e:	2201      	movs	r2, #1
 8007a20:	21ff      	movs	r1, #255	; 0xff
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f7fb fc26 	bl	8003274 <VL53L0X_WrByte>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a30:	4313      	orrs	r3, r2
 8007a32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007a36:	2200      	movs	r2, #0
 8007a38:	2100      	movs	r1, #0
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7fb fc1a 	bl	8003274 <VL53L0X_WrByte>
 8007a40:	4603      	mov	r3, r0
 8007a42:	461a      	mov	r2, r3
 8007a44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007a4e:	2206      	movs	r2, #6
 8007a50:	21ff      	movs	r1, #255	; 0xff
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7fb fc0e 	bl	8003274 <VL53L0X_WrByte>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a60:	4313      	orrs	r3, r2
 8007a62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007a66:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	2183      	movs	r1, #131	; 0x83
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f7fb fcb4 	bl	80033dc <VL53L0X_RdByte>
 8007a74:	4603      	mov	r3, r0
 8007a76:	461a      	mov	r2, r3
 8007a78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8007a82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a86:	f043 0304 	orr.w	r3, r3, #4
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	2183      	movs	r1, #131	; 0x83
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7fb fbef 	bl	8003274 <VL53L0X_WrByte>
 8007a96:	4603      	mov	r3, r0
 8007a98:	461a      	mov	r2, r3
 8007a9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8007aa4:	2207      	movs	r2, #7
 8007aa6:	21ff      	movs	r1, #255	; 0xff
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f7fb fbe3 	bl	8003274 <VL53L0X_WrByte>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8007abc:	2201      	movs	r2, #1
 8007abe:	2181      	movs	r1, #129	; 0x81
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f7fb fbd7 	bl	8003274 <VL53L0X_WrByte>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	461a      	mov	r2, r3
 8007aca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7fb fd1f 	bl	8003518 <VL53L0X_PollingDelay>
 8007ada:	4603      	mov	r3, r0
 8007adc:	461a      	mov	r2, r3
 8007ade:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007ae8:	2201      	movs	r2, #1
 8007aea:	2180      	movs	r1, #128	; 0x80
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f7fb fbc1 	bl	8003274 <VL53L0X_WrByte>
 8007af2:	4603      	mov	r3, r0
 8007af4:	461a      	mov	r2, r3
 8007af6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007afa:	4313      	orrs	r3, r2
 8007afc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8007b00:	78fb      	ldrb	r3, [r7, #3]
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f000 8098 	beq.w	8007c3c <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8007b0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b10:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f040 8091 	bne.w	8007c3c <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8007b1a:	226b      	movs	r2, #107	; 0x6b
 8007b1c:	2194      	movs	r1, #148	; 0x94
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7fb fba8 	bl	8003274 <VL53L0X_WrByte>
 8007b24:	4603      	mov	r3, r0
 8007b26:	461a      	mov	r2, r3
 8007b28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7ff fef9 	bl	800792a <VL53L0X_device_read_strobe>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b40:	4313      	orrs	r3, r2
 8007b42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007b46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	2190      	movs	r1, #144	; 0x90
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7fb fca6 	bl	80034a0 <VL53L0X_RdDWord>
 8007b54:	4603      	mov	r3, r0
 8007b56:	461a      	mov	r2, r3
 8007b58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8007b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b64:	0a1b      	lsrs	r3, r3, #8
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b6c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8007b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b72:	0bdb      	lsrs	r3, r3, #15
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8007b7e:	2224      	movs	r2, #36	; 0x24
 8007b80:	2194      	movs	r1, #148	; 0x94
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7fb fb76 	bl	8003274 <VL53L0X_WrByte>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b90:	4313      	orrs	r3, r2
 8007b92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f7ff fec7 	bl	800792a <VL53L0X_device_read_strobe>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007baa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007bae:	461a      	mov	r2, r3
 8007bb0:	2190      	movs	r1, #144	; 0x90
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7fb fc74 	bl	80034a0 <VL53L0X_RdDWord>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	461a      	mov	r2, r3
 8007bbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc8:	0e1b      	lsrs	r3, r3, #24
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8007bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd0:	0c1b      	lsrs	r3, r3, #16
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd8:	0a1b      	lsrs	r3, r3, #8
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8007bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8007be4:	2225      	movs	r2, #37	; 0x25
 8007be6:	2194      	movs	r1, #148	; 0x94
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f7fb fb43 	bl	8003274 <VL53L0X_WrByte>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f7ff fe94 	bl	800792a <VL53L0X_device_read_strobe>
 8007c02:	4603      	mov	r3, r0
 8007c04:	461a      	mov	r2, r3
 8007c06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007c10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007c14:	461a      	mov	r2, r3
 8007c16:	2190      	movs	r1, #144	; 0x90
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f7fb fc41 	bl	80034a0 <VL53L0X_RdDWord>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	461a      	mov	r2, r3
 8007c22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c26:	4313      	orrs	r3, r2
 8007c28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8007c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2e:	0e1b      	lsrs	r3, r3, #24
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8007c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c36:	0c1b      	lsrs	r3, r3, #16
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8007c3c:	78fb      	ldrb	r3, [r7, #3]
 8007c3e:	f003 0302 	and.w	r3, r3, #2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 8189 	beq.w	8007f5a <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8007c48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007c4c:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f040 8182 	bne.w	8007f5a <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8007c56:	2202      	movs	r2, #2
 8007c58:	2194      	movs	r1, #148	; 0x94
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7fb fb0a 	bl	8003274 <VL53L0X_WrByte>
 8007c60:	4603      	mov	r3, r0
 8007c62:	461a      	mov	r2, r3
 8007c64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7ff fe5b 	bl	800792a <VL53L0X_device_read_strobe>
 8007c74:	4603      	mov	r3, r0
 8007c76:	461a      	mov	r2, r3
 8007c78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8007c82:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8007c86:	461a      	mov	r2, r3
 8007c88:	2190      	movs	r1, #144	; 0x90
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7fb fba6 	bl	80033dc <VL53L0X_RdByte>
 8007c90:	4603      	mov	r3, r0
 8007c92:	461a      	mov	r2, r3
 8007c94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8007c9e:	227b      	movs	r2, #123	; 0x7b
 8007ca0:	2194      	movs	r1, #148	; 0x94
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7fb fae6 	bl	8003274 <VL53L0X_WrByte>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	461a      	mov	r2, r3
 8007cac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7ff fe37 	bl	800792a <VL53L0X_device_read_strobe>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8007cca:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8007cce:	461a      	mov	r2, r3
 8007cd0:	2190      	movs	r1, #144	; 0x90
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7fb fb82 	bl	80033dc <VL53L0X_RdByte>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	461a      	mov	r2, r3
 8007cdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8007ce6:	2277      	movs	r2, #119	; 0x77
 8007ce8:	2194      	movs	r1, #148	; 0x94
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7fb fac2 	bl	8003274 <VL53L0X_WrByte>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7ff fe13 	bl	800792a <VL53L0X_device_read_strobe>
 8007d04:	4603      	mov	r3, r0
 8007d06:	461a      	mov	r2, r3
 8007d08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007d12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d16:	461a      	mov	r2, r3
 8007d18:	2190      	movs	r1, #144	; 0x90
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7fb fbc0 	bl	80034a0 <VL53L0X_RdDWord>
 8007d20:	4603      	mov	r3, r0
 8007d22:	461a      	mov	r2, r3
 8007d24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8007d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d30:	0e5b      	lsrs	r3, r3, #25
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3e:	0c9b      	lsrs	r3, r3, #18
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	0adb      	lsrs	r3, r3, #11
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8007d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5a:	091b      	lsrs	r3, r3, #4
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8007d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	00db      	lsls	r3, r3, #3
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8007d78:	2278      	movs	r2, #120	; 0x78
 8007d7a:	2194      	movs	r1, #148	; 0x94
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7fb fa79 	bl	8003274 <VL53L0X_WrByte>
 8007d82:	4603      	mov	r3, r0
 8007d84:	461a      	mov	r2, r3
 8007d86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7ff fdca 	bl	800792a <VL53L0X_device_read_strobe>
 8007d96:	4603      	mov	r3, r0
 8007d98:	461a      	mov	r2, r3
 8007d9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007da4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007da8:	461a      	mov	r2, r3
 8007daa:	2190      	movs	r1, #144	; 0x90
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f7fb fb77 	bl	80034a0 <VL53L0X_RdDWord>
 8007db2:	4603      	mov	r3, r0
 8007db4:	461a      	mov	r2, r3
 8007db6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc2:	0f5b      	lsrs	r3, r3, #29
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dca:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8007dcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007dd0:	4413      	add	r3, r2
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	0d9b      	lsrs	r3, r3, #22
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8007de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de6:	0bdb      	lsrs	r3, r3, #15
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8007df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df4:	0a1b      	lsrs	r3, r3, #8
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8007e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e02:	085b      	lsrs	r3, r3, #1
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	019b      	lsls	r3, r3, #6
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8007e20:	2279      	movs	r2, #121	; 0x79
 8007e22:	2194      	movs	r1, #148	; 0x94
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f7fb fa25 	bl	8003274 <VL53L0X_WrByte>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e32:	4313      	orrs	r3, r2
 8007e34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7ff fd76 	bl	800792a <VL53L0X_device_read_strobe>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	461a      	mov	r2, r3
 8007e42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e46:	4313      	orrs	r3, r2
 8007e48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007e4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e50:	461a      	mov	r2, r3
 8007e52:	2190      	movs	r1, #144	; 0x90
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f7fb fb23 	bl	80034a0 <VL53L0X_RdDWord>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e62:	4313      	orrs	r3, r2
 8007e64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8007e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6a:	0e9b      	lsrs	r3, r3, #26
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e72:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8007e74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e78:	4413      	add	r3, r2
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8007e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e80:	0cdb      	lsrs	r3, r3, #19
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8007e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8e:	0b1b      	lsrs	r3, r3, #12
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9c:	095b      	lsrs	r3, r3, #5
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8007eba:	227a      	movs	r2, #122	; 0x7a
 8007ebc:	2194      	movs	r1, #148	; 0x94
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7fb f9d8 	bl	8003274 <VL53L0X_WrByte>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7ff fd29 	bl	800792a <VL53L0X_device_read_strobe>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	461a      	mov	r2, r3
 8007edc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007ee6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007eea:	461a      	mov	r2, r3
 8007eec:	2190      	movs	r1, #144	; 0x90
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f7fb fad6 	bl	80034a0 <VL53L0X_RdDWord>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007efc:	4313      	orrs	r3, r2
 8007efe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8007f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f04:	0f9b      	lsrs	r3, r3, #30
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f0c:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8007f0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f12:	4413      	add	r3, r2
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8007f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1a:	0ddb      	lsrs	r3, r3, #23
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	0c1b      	lsrs	r3, r3, #16
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8007f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f36:	0a5b      	lsrs	r3, r3, #9
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8007f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f46:	089b      	lsrs	r3, r3, #2
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8007f54:	2300      	movs	r3, #0
 8007f56:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8007f5a:	78fb      	ldrb	r3, [r7, #3]
 8007f5c:	f003 0304 	and.w	r3, r3, #4
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f000 80f1 	beq.w	8008148 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007f66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f6a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f040 80ea 	bne.w	8008148 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8007f74:	227b      	movs	r2, #123	; 0x7b
 8007f76:	2194      	movs	r1, #148	; 0x94
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f7fb f97b 	bl	8003274 <VL53L0X_WrByte>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	461a      	mov	r2, r3
 8007f82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f86:	4313      	orrs	r3, r2
 8007f88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f7ff fccc 	bl	800792a <VL53L0X_device_read_strobe>
 8007f92:	4603      	mov	r3, r0
 8007f94:	461a      	mov	r2, r3
 8007f96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8007fa0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	2190      	movs	r1, #144	; 0x90
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f7fb fa79 	bl	80034a0 <VL53L0X_RdDWord>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8007fbc:	227c      	movs	r2, #124	; 0x7c
 8007fbe:	2194      	movs	r1, #148	; 0x94
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7fb f957 	bl	8003274 <VL53L0X_WrByte>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	461a      	mov	r2, r3
 8007fca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f7ff fca8 	bl	800792a <VL53L0X_device_read_strobe>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	461a      	mov	r2, r3
 8007fde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8007fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fec:	461a      	mov	r2, r3
 8007fee:	2190      	movs	r1, #144	; 0x90
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7fb fa55 	bl	80034a0 <VL53L0X_RdDWord>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ffe:	4313      	orrs	r3, r2
 8008000:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8008004:	2273      	movs	r2, #115	; 0x73
 8008006:	2194      	movs	r1, #148	; 0x94
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f7fb f933 	bl	8003274 <VL53L0X_WrByte>
 800800e:	4603      	mov	r3, r0
 8008010:	461a      	mov	r2, r3
 8008012:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008016:	4313      	orrs	r3, r2
 8008018:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7ff fc84 	bl	800792a <VL53L0X_device_read_strobe>
 8008022:	4603      	mov	r3, r0
 8008024:	461a      	mov	r2, r3
 8008026:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800802a:	4313      	orrs	r3, r2
 800802c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008030:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008034:	461a      	mov	r2, r3
 8008036:	2190      	movs	r1, #144	; 0x90
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f7fb fa31 	bl	80034a0 <VL53L0X_RdDWord>
 800803e:	4603      	mov	r3, r0
 8008040:	461a      	mov	r2, r3
 8008042:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008046:	4313      	orrs	r3, r2
 8008048:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800804c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804e:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8008050:	b29b      	uxth	r3, r3
 8008052:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8008054:	2274      	movs	r2, #116	; 0x74
 8008056:	2194      	movs	r1, #148	; 0x94
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f7fb f90b 	bl	8003274 <VL53L0X_WrByte>
 800805e:	4603      	mov	r3, r0
 8008060:	461a      	mov	r2, r3
 8008062:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008066:	4313      	orrs	r3, r2
 8008068:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f7ff fc5c 	bl	800792a <VL53L0X_device_read_strobe>
 8008072:	4603      	mov	r3, r0
 8008074:	461a      	mov	r2, r3
 8008076:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800807a:	4313      	orrs	r3, r2
 800807c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008080:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008084:	461a      	mov	r2, r3
 8008086:	2190      	movs	r1, #144	; 0x90
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f7fb fa09 	bl	80034a0 <VL53L0X_RdDWord>
 800808e:	4603      	mov	r3, r0
 8008090:	461a      	mov	r2, r3
 8008092:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008096:	4313      	orrs	r3, r2
 8008098:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800809c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809e:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 80080a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80080a2:	4313      	orrs	r3, r2
 80080a4:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80080a6:	2275      	movs	r2, #117	; 0x75
 80080a8:	2194      	movs	r1, #148	; 0x94
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7fb f8e2 	bl	8003274 <VL53L0X_WrByte>
 80080b0:	4603      	mov	r3, r0
 80080b2:	461a      	mov	r2, r3
 80080b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080b8:	4313      	orrs	r3, r2
 80080ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7ff fc33 	bl	800792a <VL53L0X_device_read_strobe>
 80080c4:	4603      	mov	r3, r0
 80080c6:	461a      	mov	r2, r3
 80080c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080cc:	4313      	orrs	r3, r2
 80080ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80080d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80080d6:	461a      	mov	r2, r3
 80080d8:	2190      	movs	r1, #144	; 0x90
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7fb f9e0 	bl	80034a0 <VL53L0X_RdDWord>
 80080e0:	4603      	mov	r3, r0
 80080e2:	461a      	mov	r2, r3
 80080e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080e8:	4313      	orrs	r3, r2
 80080ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80080ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f0:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80080f6:	2276      	movs	r2, #118	; 0x76
 80080f8:	2194      	movs	r1, #148	; 0x94
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7fb f8ba 	bl	8003274 <VL53L0X_WrByte>
 8008100:	4603      	mov	r3, r0
 8008102:	461a      	mov	r2, r3
 8008104:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008108:	4313      	orrs	r3, r2
 800810a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7ff fc0b 	bl	800792a <VL53L0X_device_read_strobe>
 8008114:	4603      	mov	r3, r0
 8008116:	461a      	mov	r2, r3
 8008118:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800811c:	4313      	orrs	r3, r2
 800811e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008122:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008126:	461a      	mov	r2, r3
 8008128:	2190      	movs	r1, #144	; 0x90
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f7fb f9b8 	bl	80034a0 <VL53L0X_RdDWord>
 8008130:	4603      	mov	r3, r0
 8008132:	461a      	mov	r2, r3
 8008134:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008138:	4313      	orrs	r3, r2
 800813a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8008142:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008144:	4313      	orrs	r3, r2
 8008146:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8008148:	2200      	movs	r2, #0
 800814a:	2181      	movs	r1, #129	; 0x81
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7fb f891 	bl	8003274 <VL53L0X_WrByte>
 8008152:	4603      	mov	r3, r0
 8008154:	461a      	mov	r2, r3
 8008156:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800815a:	4313      	orrs	r3, r2
 800815c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008160:	2206      	movs	r2, #6
 8008162:	21ff      	movs	r1, #255	; 0xff
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f7fb f885 	bl	8003274 <VL53L0X_WrByte>
 800816a:	4603      	mov	r3, r0
 800816c:	461a      	mov	r2, r3
 800816e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008172:	4313      	orrs	r3, r2
 8008174:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008178:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800817c:	461a      	mov	r2, r3
 800817e:	2183      	movs	r1, #131	; 0x83
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f7fb f92b 	bl	80033dc <VL53L0X_RdByte>
 8008186:	4603      	mov	r3, r0
 8008188:	461a      	mov	r2, r3
 800818a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800818e:	4313      	orrs	r3, r2
 8008190:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8008194:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008198:	f023 0304 	bic.w	r3, r3, #4
 800819c:	b2db      	uxtb	r3, r3
 800819e:	461a      	mov	r2, r3
 80081a0:	2183      	movs	r1, #131	; 0x83
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f7fb f866 	bl	8003274 <VL53L0X_WrByte>
 80081a8:	4603      	mov	r3, r0
 80081aa:	461a      	mov	r2, r3
 80081ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081b0:	4313      	orrs	r3, r2
 80081b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80081b6:	2201      	movs	r2, #1
 80081b8:	21ff      	movs	r1, #255	; 0xff
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7fb f85a 	bl	8003274 <VL53L0X_WrByte>
 80081c0:	4603      	mov	r3, r0
 80081c2:	461a      	mov	r2, r3
 80081c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081c8:	4313      	orrs	r3, r2
 80081ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80081ce:	2201      	movs	r2, #1
 80081d0:	2100      	movs	r1, #0
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7fb f84e 	bl	8003274 <VL53L0X_WrByte>
 80081d8:	4603      	mov	r3, r0
 80081da:	461a      	mov	r2, r3
 80081dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081e0:	4313      	orrs	r3, r2
 80081e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80081e6:	2200      	movs	r2, #0
 80081e8:	21ff      	movs	r1, #255	; 0xff
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7fb f842 	bl	8003274 <VL53L0X_WrByte>
 80081f0:	4603      	mov	r3, r0
 80081f2:	461a      	mov	r2, r3
 80081f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081f8:	4313      	orrs	r3, r2
 80081fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80081fe:	2200      	movs	r2, #0
 8008200:	2180      	movs	r1, #128	; 0x80
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7fb f836 	bl	8003274 <VL53L0X_WrByte>
 8008208:	4603      	mov	r3, r0
 800820a:	461a      	mov	r2, r3
 800820c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008210:	4313      	orrs	r3, r2
 8008212:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8008216:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800821a:	2b00      	cmp	r3, #0
 800821c:	f040 808f 	bne.w	800833e <VL53L0X_get_info_from_device+0x98e>
 8008220:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008224:	2b07      	cmp	r3, #7
 8008226:	f000 808a 	beq.w	800833e <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800822a:	78fb      	ldrb	r3, [r7, #3]
 800822c:	f003 0301 	and.w	r3, r3, #1
 8008230:	2b00      	cmp	r3, #0
 8008232:	d024      	beq.n	800827e <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008234:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008238:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800823c:	2b00      	cmp	r3, #0
 800823e:	d11e      	bne.n	800827e <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8008246:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8008250:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008254:	2300      	movs	r3, #0
 8008256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008258:	e00e      	b.n	8008278 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800825a:	f107 0208 	add.w	r2, r7, #8
 800825e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008260:	4413      	add	r3, r2
 8008262:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008268:	4413      	add	r3, r2
 800826a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800826e:	460a      	mov	r2, r1
 8008270:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008274:	3301      	adds	r3, #1
 8008276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800827a:	2b05      	cmp	r3, #5
 800827c:	dded      	ble.n	800825a <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800827e:	78fb      	ldrb	r3, [r7, #3]
 8008280:	f003 0302 	and.w	r3, r3, #2
 8008284:	2b00      	cmp	r3, #0
 8008286:	d018      	beq.n	80082ba <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008288:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800828c:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8008290:	2b00      	cmp	r3, #0
 8008292:	d112      	bne.n	80082ba <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008294:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800829e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	33f3      	adds	r3, #243	; 0xf3
 80082ac:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 80082ae:	f107 0310 	add.w	r3, r7, #16
 80082b2:	4619      	mov	r1, r3
 80082b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082b6:	f011 fb73 	bl	80199a0 <strcpy>

		}

		if (((option & 4) == 4) &&
 80082ba:	78fb      	ldrb	r3, [r7, #3]
 80082bc:	f003 0304 	and.w	r3, r3, #4
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d030      	beq.n	8008326 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80082c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80082c8:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d12a      	bne.n	8008326 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80082d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80082d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 80082e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082e2:	025b      	lsls	r3, r3, #9
 80082e4:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082ea:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 80082ee:	2300      	movs	r3, #0
 80082f0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 80082f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d011      	beq.n	800831e <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 80082fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80082fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8008302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008304:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008308:	fb02 f303 	mul.w	r3, r2, r3
 800830c:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800830e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8008312:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008316:	425b      	negs	r3, r3
 8008318:	b29b      	uxth	r3, r3
 800831a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800831e:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8008326:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800832a:	78fb      	ldrb	r3, [r7, #3]
 800832c:	4313      	orrs	r3, r2
 800832e:	b2db      	uxtb	r3, r3
 8008330:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8008334:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800833e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8008342:	4618      	mov	r0, r3
 8008344:	3760      	adds	r7, #96	; 0x60
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800834a:	b480      	push	{r7}
 800834c:	b087      	sub	sp, #28
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	460b      	mov	r3, r1
 8008354:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8008356:	f240 6277 	movw	r2, #1655	; 0x677
 800835a:	f04f 0300 	mov.w	r3, #0
 800835e:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8008362:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8008366:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8008368:	78fb      	ldrb	r3, [r7, #3]
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	fb02 f303 	mul.w	r3, r2, r3
 8008376:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8008378:	68bb      	ldr	r3, [r7, #8]
}
 800837a:	4618      	mov	r0, r3
 800837c:	371c      	adds	r7, #28
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr

08008386 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8008386:	b480      	push	{r7}
 8008388:	b087      	sub	sp, #28
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800838e:	2300      	movs	r3, #0
 8008390:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8008392:	2300      	movs	r3, #0
 8008394:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8008396:	2300      	movs	r3, #0
 8008398:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d017      	beq.n	80083d0 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	3b01      	subs	r3, #1
 80083a4:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80083a6:	e005      	b.n	80083b4 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	085b      	lsrs	r3, r3, #1
 80083ac:	613b      	str	r3, [r7, #16]
			ms_byte++;
 80083ae:	89fb      	ldrh	r3, [r7, #14]
 80083b0:	3301      	adds	r3, #1
 80083b2:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1f4      	bne.n	80083a8 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 80083be:	89fb      	ldrh	r3, [r7, #14]
 80083c0:	021b      	lsls	r3, r3, #8
 80083c2:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80083cc:	4413      	add	r3, r2
 80083ce:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80083d0:	8afb      	ldrh	r3, [r7, #22]

}
 80083d2:	4618      	mov	r0, r3
 80083d4:	371c      	adds	r7, #28
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 80083de:	b480      	push	{r7}
 80083e0:	b085      	sub	sp, #20
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	4603      	mov	r3, r0
 80083e6:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80083e8:	2300      	movs	r3, #0
 80083ea:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80083ec:	88fb      	ldrh	r3, [r7, #6]
 80083ee:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80083f0:	88fa      	ldrh	r2, [r7, #6]
 80083f2:	0a12      	lsrs	r2, r2, #8
 80083f4:	b292      	uxth	r2, r2
 80083f6:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80083f8:	3301      	adds	r3, #1
 80083fa:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80083fc:	68fb      	ldr	r3, [r7, #12]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
	...

0800840c <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b088      	sub	sp, #32
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	4613      	mov	r3, r2
 8008418:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800841a:	2300      	movs	r3, #0
 800841c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800841e:	79fb      	ldrb	r3, [r7, #7]
 8008420:	4619      	mov	r1, r3
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f7ff ff91 	bl	800834a <VL53L0X_calc_macro_period_ps>
 8008428:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008430:	4a0a      	ldr	r2, [pc, #40]	; (800845c <VL53L0X_calc_timeout_mclks+0x50>)
 8008432:	fba2 2303 	umull	r2, r3, r2, r3
 8008436:	099b      	lsrs	r3, r3, #6
 8008438:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008440:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	085b      	lsrs	r3, r3, #1
 8008448:	441a      	add	r2, r3
	timeout_period_mclks =
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008450:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8008452:	69fb      	ldr	r3, [r7, #28]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3720      	adds	r7, #32
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	10624dd3 	.word	0x10624dd3

08008460 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b086      	sub	sp, #24
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	460b      	mov	r3, r1
 800846a:	807b      	strh	r3, [r7, #2]
 800846c:	4613      	mov	r3, r2
 800846e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8008470:	2300      	movs	r3, #0
 8008472:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008474:	787b      	ldrb	r3, [r7, #1]
 8008476:	4619      	mov	r1, r3
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f7ff ff66 	bl	800834a <VL53L0X_calc_macro_period_ps>
 800847e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008486:	4a0a      	ldr	r2, [pc, #40]	; (80084b0 <VL53L0X_calc_timeout_us+0x50>)
 8008488:	fba2 2303 	umull	r2, r3, r2, r3
 800848c:	099b      	lsrs	r3, r3, #6
 800848e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8008490:	887b      	ldrh	r3, [r7, #2]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	fb02 f303 	mul.w	r3, r2, r3
 8008498:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800849c:	4a04      	ldr	r2, [pc, #16]	; (80084b0 <VL53L0X_calc_timeout_us+0x50>)
 800849e:	fba2 2303 	umull	r2, r3, r2, r3
 80084a2:	099b      	lsrs	r3, r3, #6
 80084a4:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 80084a6:	697b      	ldr	r3, [r7, #20]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	10624dd3 	.word	0x10624dd3

080084b4 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b08c      	sub	sp, #48	; 0x30
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	460b      	mov	r3, r1
 80084be:	607a      	str	r2, [r7, #4]
 80084c0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084c2:	2300      	movs	r3, #0
 80084c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 80084ce:	2300      	movs	r3, #0
 80084d0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 80084d2:	2300      	movs	r3, #0
 80084d4:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 80084d6:	2300      	movs	r3, #0
 80084d8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80084da:	7afb      	ldrb	r3, [r7, #11]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d005      	beq.n	80084ec <get_sequence_step_timeout+0x38>
 80084e0:	7afb      	ldrb	r3, [r7, #11]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d002      	beq.n	80084ec <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80084e6:	7afb      	ldrb	r3, [r7, #11]
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d128      	bne.n	800853e <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80084ec:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80084f0:	461a      	mov	r2, r3
 80084f2:	2100      	movs	r1, #0
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f7fd fa5b 	bl	80059b0 <VL53L0X_GetVcselPulsePeriod>
 80084fa:	4603      	mov	r3, r0
 80084fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8008500:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008504:	2b00      	cmp	r3, #0
 8008506:	d109      	bne.n	800851c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8008508:	f107 0320 	add.w	r3, r7, #32
 800850c:	461a      	mov	r2, r3
 800850e:	2146      	movs	r1, #70	; 0x46
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f7fa ff63 	bl	80033dc <VL53L0X_RdByte>
 8008516:	4603      	mov	r3, r0
 8008518:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800851c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008520:	b29b      	uxth	r3, r3
 8008522:	4618      	mov	r0, r3
 8008524:	f7ff ff5b 	bl	80083de <VL53L0X_decode_timeout>
 8008528:	4603      	mov	r3, r0
 800852a:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800852c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008530:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008532:	4619      	mov	r1, r3
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f7ff ff93 	bl	8008460 <VL53L0X_calc_timeout_us>
 800853a:	62b8      	str	r0, [r7, #40]	; 0x28
 800853c:	e092      	b.n	8008664 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800853e:	7afb      	ldrb	r3, [r7, #11]
 8008540:	2b03      	cmp	r3, #3
 8008542:	d135      	bne.n	80085b0 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008544:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008548:	461a      	mov	r2, r3
 800854a:	2100      	movs	r1, #0
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f7fd fa2f 	bl	80059b0 <VL53L0X_GetVcselPulsePeriod>
 8008552:	4603      	mov	r3, r0
 8008554:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8008558:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800855c:	2b00      	cmp	r3, #0
 800855e:	f040 8081 	bne.w	8008664 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008562:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008566:	461a      	mov	r2, r3
 8008568:	2100      	movs	r1, #0
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f7fd fa20 	bl	80059b0 <VL53L0X_GetVcselPulsePeriod>
 8008570:	4603      	mov	r3, r0
 8008572:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8008576:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800857a:	2b00      	cmp	r3, #0
 800857c:	d109      	bne.n	8008592 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800857e:	f107 031e 	add.w	r3, r7, #30
 8008582:	461a      	mov	r2, r3
 8008584:	2151      	movs	r1, #81	; 0x51
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f7fa ff52 	bl	8003430 <VL53L0X_RdWord>
 800858c:	4603      	mov	r3, r0
 800858e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008592:	8bfb      	ldrh	r3, [r7, #30]
 8008594:	4618      	mov	r0, r3
 8008596:	f7ff ff22 	bl	80083de <VL53L0X_decode_timeout>
 800859a:	4603      	mov	r3, r0
 800859c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800859e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80085a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80085a4:	4619      	mov	r1, r3
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f7ff ff5a 	bl	8008460 <VL53L0X_calc_timeout_us>
 80085ac:	62b8      	str	r0, [r7, #40]	; 0x28
 80085ae:	e059      	b.n	8008664 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80085b0:	7afb      	ldrb	r3, [r7, #11]
 80085b2:	2b04      	cmp	r3, #4
 80085b4:	d156      	bne.n	8008664 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80085b6:	f107 0314 	add.w	r3, r7, #20
 80085ba:	4619      	mov	r1, r3
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f7fd fb03 	bl	8005bc8 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 80085c2:	2300      	movs	r3, #0
 80085c4:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 80085c6:	7dfb      	ldrb	r3, [r7, #23]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d01d      	beq.n	8008608 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80085cc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80085d0:	461a      	mov	r2, r3
 80085d2:	2100      	movs	r1, #0
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f7fd f9eb 	bl	80059b0 <VL53L0X_GetVcselPulsePeriod>
 80085da:	4603      	mov	r3, r0
 80085dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 80085e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10f      	bne.n	8008608 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 80085e8:	f107 031e 	add.w	r3, r7, #30
 80085ec:	461a      	mov	r2, r3
 80085ee:	2151      	movs	r1, #81	; 0x51
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f7fa ff1d 	bl	8003430 <VL53L0X_RdWord>
 80085f6:	4603      	mov	r3, r0
 80085f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80085fc:	8bfb      	ldrh	r3, [r7, #30]
 80085fe:	4618      	mov	r0, r3
 8008600:	f7ff feed 	bl	80083de <VL53L0X_decode_timeout>
 8008604:	4603      	mov	r3, r0
 8008606:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008608:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800860c:	2b00      	cmp	r3, #0
 800860e:	d109      	bne.n	8008624 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008610:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008614:	461a      	mov	r2, r3
 8008616:	2101      	movs	r1, #1
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f7fd f9c9 	bl	80059b0 <VL53L0X_GetVcselPulsePeriod>
 800861e:	4603      	mov	r3, r0
 8008620:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8008624:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10f      	bne.n	800864c <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800862c:	f107 031c 	add.w	r3, r7, #28
 8008630:	461a      	mov	r2, r3
 8008632:	2171      	movs	r1, #113	; 0x71
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f7fa fefb 	bl	8003430 <VL53L0X_RdWord>
 800863a:	4603      	mov	r3, r0
 800863c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008640:	8bbb      	ldrh	r3, [r7, #28]
 8008642:	4618      	mov	r0, r3
 8008644:	f7ff fecb 	bl	80083de <VL53L0X_decode_timeout>
 8008648:	4603      	mov	r3, r0
 800864a:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800864c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800864e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008654:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008658:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800865a:	4619      	mov	r1, r3
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f7ff feff 	bl	8008460 <VL53L0X_calc_timeout_us>
 8008662:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008668:	601a      	str	r2, [r3, #0]

	return Status;
 800866a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800866e:	4618      	mov	r0, r3
 8008670:	3730      	adds	r7, #48	; 0x30
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b08a      	sub	sp, #40	; 0x28
 800867a:	af00      	add	r7, sp, #0
 800867c:	60f8      	str	r0, [r7, #12]
 800867e:	460b      	mov	r3, r1
 8008680:	607a      	str	r2, [r7, #4]
 8008682:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008684:	2300      	movs	r3, #0
 8008686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800868a:	7afb      	ldrb	r3, [r7, #11]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d005      	beq.n	800869c <set_sequence_step_timeout+0x26>
 8008690:	7afb      	ldrb	r3, [r7, #11]
 8008692:	2b01      	cmp	r3, #1
 8008694:	d002      	beq.n	800869c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8008696:	7afb      	ldrb	r3, [r7, #11]
 8008698:	2b02      	cmp	r3, #2
 800869a:	d138      	bne.n	800870e <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800869c:	f107 031b 	add.w	r3, r7, #27
 80086a0:	461a      	mov	r2, r3
 80086a2:	2100      	movs	r1, #0
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f7fd f983 	bl	80059b0 <VL53L0X_GetVcselPulsePeriod>
 80086aa:	4603      	mov	r3, r0
 80086ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 80086b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d11a      	bne.n	80086ee <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80086b8:	7efb      	ldrb	r3, [r7, #27]
 80086ba:	461a      	mov	r2, r3
 80086bc:	6879      	ldr	r1, [r7, #4]
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f7ff fea4 	bl	800840c <VL53L0X_calc_timeout_mclks>
 80086c4:	4603      	mov	r3, r0
 80086c6:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 80086c8:	8bbb      	ldrh	r3, [r7, #28]
 80086ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086ce:	d903      	bls.n	80086d8 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 80086d0:	23ff      	movs	r3, #255	; 0xff
 80086d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80086d6:	e004      	b.n	80086e2 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 80086d8:	8bbb      	ldrh	r3, [r7, #28]
 80086da:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 80086dc:	3b01      	subs	r3, #1
 80086de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80086e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80086ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f040 80ab 	bne.w	800884e <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 80086f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80086fc:	461a      	mov	r2, r3
 80086fe:	2146      	movs	r1, #70	; 0x46
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f7fa fdb7 	bl	8003274 <VL53L0X_WrByte>
 8008706:	4603      	mov	r3, r0
 8008708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800870c:	e09f      	b.n	800884e <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800870e:	7afb      	ldrb	r3, [r7, #11]
 8008710:	2b03      	cmp	r3, #3
 8008712:	d135      	bne.n	8008780 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8008714:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008718:	2b00      	cmp	r3, #0
 800871a:	d11b      	bne.n	8008754 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800871c:	f107 031b 	add.w	r3, r7, #27
 8008720:	461a      	mov	r2, r3
 8008722:	2100      	movs	r1, #0
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f7fd f943 	bl	80059b0 <VL53L0X_GetVcselPulsePeriod>
 800872a:	4603      	mov	r3, r0
 800872c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8008730:	7efb      	ldrb	r3, [r7, #27]
 8008732:	461a      	mov	r2, r3
 8008734:	6879      	ldr	r1, [r7, #4]
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f7ff fe68 	bl	800840c <VL53L0X_calc_timeout_mclks>
 800873c:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800873e:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8008740:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008742:	4618      	mov	r0, r3
 8008744:	f7ff fe1f 	bl	8008386 <VL53L0X_encode_timeout>
 8008748:	4603      	mov	r3, r0
 800874a:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800874c:	8b3a      	ldrh	r2, [r7, #24]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008754:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008758:	2b00      	cmp	r3, #0
 800875a:	d108      	bne.n	800876e <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800875c:	8b3b      	ldrh	r3, [r7, #24]
 800875e:	461a      	mov	r2, r3
 8008760:	2151      	movs	r1, #81	; 0x51
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f7fa fdaa 	bl	80032bc <VL53L0X_WrWord>
 8008768:	4603      	mov	r3, r0
 800876a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800876e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008772:	2b00      	cmp	r3, #0
 8008774:	d16b      	bne.n	800884e <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800877e:	e066      	b.n	800884e <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008780:	7afb      	ldrb	r3, [r7, #11]
 8008782:	2b04      	cmp	r3, #4
 8008784:	d160      	bne.n	8008848 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8008786:	f107 0310 	add.w	r3, r7, #16
 800878a:	4619      	mov	r1, r3
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f7fd fa1b 	bl	8005bc8 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8008792:	2300      	movs	r3, #0
 8008794:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8008796:	7cfb      	ldrb	r3, [r7, #19]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d01d      	beq.n	80087d8 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800879c:	f107 031b 	add.w	r3, r7, #27
 80087a0:	461a      	mov	r2, r3
 80087a2:	2100      	movs	r1, #0
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f7fd f903 	bl	80059b0 <VL53L0X_GetVcselPulsePeriod>
 80087aa:	4603      	mov	r3, r0
 80087ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 80087b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10f      	bne.n	80087d8 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80087b8:	f107 0318 	add.w	r3, r7, #24
 80087bc:	461a      	mov	r2, r3
 80087be:	2151      	movs	r1, #81	; 0x51
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f7fa fe35 	bl	8003430 <VL53L0X_RdWord>
 80087c6:	4603      	mov	r3, r0
 80087c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80087cc:	8b3b      	ldrh	r3, [r7, #24]
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7ff fe05 	bl	80083de <VL53L0X_decode_timeout>
 80087d4:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 80087d6:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80087d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d109      	bne.n	80087f4 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80087e0:	f107 031b 	add.w	r3, r7, #27
 80087e4:	461a      	mov	r2, r3
 80087e6:	2101      	movs	r1, #1
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f7fd f8e1 	bl	80059b0 <VL53L0X_GetVcselPulsePeriod>
 80087ee:	4603      	mov	r3, r0
 80087f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80087f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d128      	bne.n	800884e <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80087fc:	7efb      	ldrb	r3, [r7, #27]
 80087fe:	461a      	mov	r2, r3
 8008800:	6879      	ldr	r1, [r7, #4]
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f7ff fe02 	bl	800840c <VL53L0X_calc_timeout_mclks>
 8008808:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800880a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800880c:	6a3a      	ldr	r2, [r7, #32]
 800880e:	4413      	add	r3, r2
 8008810:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8008812:	6a38      	ldr	r0, [r7, #32]
 8008814:	f7ff fdb7 	bl	8008386 <VL53L0X_encode_timeout>
 8008818:	4603      	mov	r3, r0
 800881a:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800881c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008820:	2b00      	cmp	r3, #0
 8008822:	d108      	bne.n	8008836 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8008824:	8bfb      	ldrh	r3, [r7, #30]
 8008826:	461a      	mov	r2, r3
 8008828:	2171      	movs	r1, #113	; 0x71
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f7fa fd46 	bl	80032bc <VL53L0X_WrWord>
 8008830:	4603      	mov	r3, r0
 8008832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8008836:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800883a:	2b00      	cmp	r3, #0
 800883c:	d107      	bne.n	800884e <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8008846:	e002      	b.n	800884e <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008848:	23fc      	movs	r3, #252	; 0xfc
 800884a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800884e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008852:	4618      	mov	r0, r3
 8008854:	3728      	adds	r7, #40	; 0x28
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b086      	sub	sp, #24
 800885e:	af00      	add	r7, sp, #0
 8008860:	60f8      	str	r0, [r7, #12]
 8008862:	460b      	mov	r3, r1
 8008864:	607a      	str	r2, [r7, #4]
 8008866:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008868:	2300      	movs	r3, #0
 800886a:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800886c:	7afb      	ldrb	r3, [r7, #11]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d002      	beq.n	8008878 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8008872:	2b01      	cmp	r3, #1
 8008874:	d00a      	beq.n	800888c <VL53L0X_get_vcsel_pulse_period+0x32>
 8008876:	e013      	b.n	80088a0 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008878:	f107 0316 	add.w	r3, r7, #22
 800887c:	461a      	mov	r2, r3
 800887e:	2150      	movs	r1, #80	; 0x50
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f7fa fdab 	bl	80033dc <VL53L0X_RdByte>
 8008886:	4603      	mov	r3, r0
 8008888:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800888a:	e00b      	b.n	80088a4 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800888c:	f107 0316 	add.w	r3, r7, #22
 8008890:	461a      	mov	r2, r3
 8008892:	2170      	movs	r1, #112	; 0x70
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f7fa fda1 	bl	80033dc <VL53L0X_RdByte>
 800889a:	4603      	mov	r3, r0
 800889c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800889e:	e001      	b.n	80088a4 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80088a0:	23fc      	movs	r3, #252	; 0xfc
 80088a2:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 80088a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d107      	bne.n	80088bc <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 80088ac:	7dbb      	ldrb	r3, [r7, #22]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fff4 	bl	800789c <VL53L0X_decode_vcsel_period>
 80088b4:	4603      	mov	r3, r0
 80088b6:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	701a      	strb	r2, [r3, #0]

	return Status;
 80088bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3718      	adds	r7, #24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b092      	sub	sp, #72	; 0x48
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088d2:	2300      	movs	r3, #0
 80088d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80088d8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80088dc:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80088de:	f240 7376 	movw	r3, #1910	; 0x776
 80088e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80088e4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80088e8:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80088ea:	f44f 7325 	mov.w	r3, #660	; 0x294
 80088ee:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80088f0:	f240 234e 	movw	r3, #590	; 0x24e
 80088f4:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80088f6:	f240 23b2 	movw	r3, #690	; 0x2b2
 80088fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80088fc:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008900:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8008902:	f240 2326 	movw	r3, #550	; 0x226
 8008906:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008908:	2300      	movs	r3, #0
 800890a:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800890c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8008910:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8008912:	2300      	movs	r3, #0
 8008914:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	6a3b      	ldr	r3, [r7, #32]
 800891a:	429a      	cmp	r2, r3
 800891c:	d205      	bcs.n	800892a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800891e:	23fc      	movs	r3, #252	; 0xfc
 8008920:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8008924:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008928:	e0aa      	b.n	8008a80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800892a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800892c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892e:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8008930:	683a      	ldr	r2, [r7, #0]
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008936:	f107 0314 	add.w	r3, r7, #20
 800893a:	4619      	mov	r1, r3
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f7fd f943 	bl	8005bc8 <VL53L0X_GetSequenceStepEnables>
 8008942:	4603      	mov	r3, r0
 8008944:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8008948:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800894c:	2b00      	cmp	r3, #0
 800894e:	d15b      	bne.n	8008a08 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8008950:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8008952:	2b00      	cmp	r3, #0
 8008954:	d105      	bne.n	8008962 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8008956:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8008958:	2b00      	cmp	r3, #0
 800895a:	d102      	bne.n	8008962 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800895c:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800895e:	2b00      	cmp	r3, #0
 8008960:	d052      	beq.n	8008a08 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8008962:	f107 0310 	add.w	r3, r7, #16
 8008966:	461a      	mov	r2, r3
 8008968:	2102      	movs	r1, #2
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7ff fda2 	bl	80084b4 <get_sequence_step_timeout>
 8008970:	4603      	mov	r3, r0
 8008972:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8008976:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800897a:	2b00      	cmp	r3, #0
 800897c:	d002      	beq.n	8008984 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800897e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008982:	e07d      	b.n	8008a80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8008984:	7d3b      	ldrb	r3, [r7, #20]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00f      	beq.n	80089aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800898a:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800898c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800898e:	4413      	add	r3, r2
 8008990:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8008992:	69fa      	ldr	r2, [r7, #28]
 8008994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008996:	429a      	cmp	r2, r3
 8008998:	d204      	bcs.n	80089a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800899a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	643b      	str	r3, [r7, #64]	; 0x40
 80089a2:	e002      	b.n	80089aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80089a4:	23fc      	movs	r3, #252	; 0xfc
 80089a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 80089aa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d002      	beq.n	80089b8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 80089b2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80089b6:	e063      	b.n	8008a80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 80089b8:	7dbb      	ldrb	r3, [r7, #22]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d011      	beq.n	80089e2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c2:	4413      	add	r3, r2
 80089c4:	005b      	lsls	r3, r3, #1
 80089c6:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80089c8:	69fa      	ldr	r2, [r7, #28]
 80089ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d204      	bcs.n	80089da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80089d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	643b      	str	r3, [r7, #64]	; 0x40
 80089d8:	e016      	b.n	8008a08 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80089da:	23fc      	movs	r3, #252	; 0xfc
 80089dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80089e0:	e012      	b.n	8008a08 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80089e2:	7d7b      	ldrb	r3, [r7, #21]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00f      	beq.n	8008a08 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089ec:	4413      	add	r3, r2
 80089ee:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80089f0:	69fa      	ldr	r2, [r7, #28]
 80089f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d204      	bcs.n	8008a02 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80089f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	1ad3      	subs	r3, r2, r3
 80089fe:	643b      	str	r3, [r7, #64]	; 0x40
 8008a00:	e002      	b.n	8008a08 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008a02:	23fc      	movs	r3, #252	; 0xfc
 8008a04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8008a08:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d002      	beq.n	8008a16 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8008a10:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008a14:	e034      	b.n	8008a80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8008a16:	7dfb      	ldrb	r3, [r7, #23]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d019      	beq.n	8008a50 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8008a1c:	f107 030c 	add.w	r3, r7, #12
 8008a20:	461a      	mov	r2, r3
 8008a22:	2103      	movs	r1, #3
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f7ff fd45 	bl	80084b4 <get_sequence_step_timeout>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a34:	4413      	add	r3, r2
 8008a36:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008a38:	69fa      	ldr	r2, [r7, #28]
 8008a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d204      	bcs.n	8008a4a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8008a40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	643b      	str	r3, [r7, #64]	; 0x40
 8008a48:	e002      	b.n	8008a50 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008a4a:	23fc      	movs	r3, #252	; 0xfc
 8008a4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8008a50:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d111      	bne.n	8008a7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8008a58:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00e      	beq.n	8008a7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8008a5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8008a66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a68:	2104      	movs	r1, #4
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f7ff fe03 	bl	8008676 <set_sequence_step_timeout>
 8008a70:	4603      	mov	r3, r0
 8008a72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	683a      	ldr	r2, [r7, #0]
 8008a7a:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8008a7c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3748      	adds	r7, #72	; 0x48
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b090      	sub	sp, #64	; 0x40
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a92:	2300      	movs	r3, #0
 8008a94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008a98:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008a9c:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008a9e:	f240 7376 	movw	r3, #1910	; 0x776
 8008aa2:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8008aa4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008aa8:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008aaa:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008aae:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8008ab0:	f240 234e 	movw	r3, #590	; 0x24e
 8008ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8008ab6:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008aba:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008abc:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008ac0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8008ac2:	f240 2326 	movw	r3, #550	; 0x226
 8008ac6:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8008acc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ad0:	441a      	add	r2, r3
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008ad6:	f107 0318 	add.w	r3, r7, #24
 8008ada:	4619      	mov	r1, r3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7fd f873 	bl	8005bc8 <VL53L0X_GetSequenceStepEnables>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8008ae8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d002      	beq.n	8008af6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8008af0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008af4:	e075      	b.n	8008be2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8008af6:	7e3b      	ldrb	r3, [r7, #24]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d105      	bne.n	8008b08 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8008afc:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d102      	bne.n	8008b08 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8008b02:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d030      	beq.n	8008b6a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8008b08:	f107 0310 	add.w	r3, r7, #16
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	2102      	movs	r1, #2
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f7ff fccf 	bl	80084b4 <get_sequence_step_timeout>
 8008b16:	4603      	mov	r3, r0
 8008b18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8008b1c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d122      	bne.n	8008b6a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8008b24:	7e3b      	ldrb	r3, [r7, #24]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d007      	beq.n	8008b3a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8008b2e:	6939      	ldr	r1, [r7, #16]
 8008b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b32:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008b34:	441a      	add	r2, r3
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8008b3a:	7ebb      	ldrb	r3, [r7, #26]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d009      	beq.n	8008b54 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8008b44:	6939      	ldr	r1, [r7, #16]
 8008b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b48:	440b      	add	r3, r1
 8008b4a:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008b4c:	441a      	add	r2, r3
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	601a      	str	r2, [r3, #0]
 8008b52:	e00a      	b.n	8008b6a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8008b54:	7e7b      	ldrb	r3, [r7, #25]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d007      	beq.n	8008b6a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8008b5e:	6939      	ldr	r1, [r7, #16]
 8008b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b62:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008b64:	441a      	add	r2, r3
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008b6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d114      	bne.n	8008b9c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8008b72:	7efb      	ldrb	r3, [r7, #27]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d011      	beq.n	8008b9c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8008b78:	f107 030c 	add.w	r3, r7, #12
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	2103      	movs	r1, #3
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f7ff fc97 	bl	80084b4 <get_sequence_step_timeout>
 8008b86:	4603      	mov	r3, r0
 8008b88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8008b90:	68f9      	ldr	r1, [r7, #12]
 8008b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b94:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008b96:	441a      	add	r2, r3
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008b9c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d114      	bne.n	8008bce <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8008ba4:	7f3b      	ldrb	r3, [r7, #28]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d011      	beq.n	8008bce <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8008baa:	f107 0314 	add.w	r3, r7, #20
 8008bae:	461a      	mov	r2, r3
 8008bb0:	2104      	movs	r1, #4
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7ff fc7e 	bl	80084b4 <get_sequence_step_timeout>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8008bc2:	6979      	ldr	r1, [r7, #20]
 8008bc4:	6a3b      	ldr	r3, [r7, #32]
 8008bc6:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008bc8:	441a      	add	r2, r3
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008bce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d103      	bne.n	8008bde <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008bde:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3740      	adds	r7, #64	; 0x40
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
	...

08008bec <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b088      	sub	sp, #32
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008bfe:	e0c6      	b.n	8008d8e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	4413      	add	r3, r2
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	74fb      	strb	r3, [r7, #19]
		Index++;
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8008c10:	7cfb      	ldrb	r3, [r7, #19]
 8008c12:	2bff      	cmp	r3, #255	; 0xff
 8008c14:	f040 808d 	bne.w	8008d32 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	683a      	ldr	r2, [r7, #0]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	747b      	strb	r3, [r7, #17]
			Index++;
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	3301      	adds	r3, #1
 8008c26:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8008c28:	7c7b      	ldrb	r3, [r7, #17]
 8008c2a:	2b03      	cmp	r3, #3
 8008c2c:	d87e      	bhi.n	8008d2c <VL53L0X_load_tuning_settings+0x140>
 8008c2e:	a201      	add	r2, pc, #4	; (adr r2, 8008c34 <VL53L0X_load_tuning_settings+0x48>)
 8008c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c34:	08008c45 	.word	0x08008c45
 8008c38:	08008c7f 	.word	0x08008c7f
 8008c3c:	08008cb9 	.word	0x08008cb9
 8008c40:	08008cf3 	.word	0x08008cf3
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	683a      	ldr	r2, [r7, #0]
 8008c48:	4413      	add	r3, r2
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	743b      	strb	r3, [r7, #16]
				Index++;
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	3301      	adds	r3, #1
 8008c52:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	4413      	add	r3, r2
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	3301      	adds	r3, #1
 8008c62:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008c64:	7c3b      	ldrb	r3, [r7, #16]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	021b      	lsls	r3, r3, #8
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	4413      	add	r3, r2
 8008c72:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	89ba      	ldrh	r2, [r7, #12]
 8008c78:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8008c7c:	e087      	b.n	8008d8e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	683a      	ldr	r2, [r7, #0]
 8008c82:	4413      	add	r3, r2
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	743b      	strb	r3, [r7, #16]
				Index++;
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	683a      	ldr	r2, [r7, #0]
 8008c92:	4413      	add	r3, r2
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008c9e:	7c3b      	ldrb	r3, [r7, #16]
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	021b      	lsls	r3, r3, #8
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	4413      	add	r3, r2
 8008cac:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	89ba      	ldrh	r2, [r7, #12]
 8008cb2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8008cb6:	e06a      	b.n	8008d8e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	683a      	ldr	r2, [r7, #0]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	743b      	strb	r3, [r7, #16]
				Index++;
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	683a      	ldr	r2, [r7, #0]
 8008ccc:	4413      	add	r3, r2
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008cd8:	7c3b      	ldrb	r3, [r7, #16]
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	021b      	lsls	r3, r3, #8
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	7bfb      	ldrb	r3, [r7, #15]
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	4413      	add	r3, r2
 8008ce6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	89ba      	ldrh	r2, [r7, #12]
 8008cec:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8008cf0:	e04d      	b.n	8008d8e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	683a      	ldr	r2, [r7, #0]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	743b      	strb	r3, [r7, #16]
				Index++;
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	683a      	ldr	r2, [r7, #0]
 8008d06:	4413      	add	r3, r2
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008d12:	7c3b      	ldrb	r3, [r7, #16]
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	021b      	lsls	r3, r3, #8
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	7bfb      	ldrb	r3, [r7, #15]
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	4413      	add	r3, r2
 8008d20:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	89ba      	ldrh	r2, [r7, #12]
 8008d26:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8008d2a:	e030      	b.n	8008d8e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008d2c:	23fc      	movs	r3, #252	; 0xfc
 8008d2e:	77fb      	strb	r3, [r7, #31]
 8008d30:	e02d      	b.n	8008d8e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8008d32:	7cfb      	ldrb	r3, [r7, #19]
 8008d34:	2b04      	cmp	r3, #4
 8008d36:	d828      	bhi.n	8008d8a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	683a      	ldr	r2, [r7, #0]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	74bb      	strb	r3, [r7, #18]
			Index++;
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	3301      	adds	r3, #1
 8008d46:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8008d48:	2300      	movs	r3, #0
 8008d4a:	61bb      	str	r3, [r7, #24]
 8008d4c:	e00f      	b.n	8008d6e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	683a      	ldr	r2, [r7, #0]
 8008d52:	4413      	add	r3, r2
 8008d54:	7819      	ldrb	r1, [r3, #0]
 8008d56:	f107 0208 	add.w	r2, r7, #8
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	460a      	mov	r2, r1
 8008d60:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	3301      	adds	r3, #1
 8008d66:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	61bb      	str	r3, [r7, #24]
 8008d6e:	7cfb      	ldrb	r3, [r7, #19]
 8008d70:	69ba      	ldr	r2, [r7, #24]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	dbeb      	blt.n	8008d4e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8008d76:	7cfb      	ldrb	r3, [r7, #19]
 8008d78:	f107 0208 	add.w	r2, r7, #8
 8008d7c:	7cb9      	ldrb	r1, [r7, #18]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7fa fa1c 	bl	80031bc <VL53L0X_WriteMulti>
 8008d84:	4603      	mov	r3, r0
 8008d86:	77fb      	strb	r3, [r7, #31]
 8008d88:	e001      	b.n	8008d8e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008d8a:	23fc      	movs	r3, #252	; 0xfc
 8008d8c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	683a      	ldr	r2, [r7, #0]
 8008d92:	4413      	add	r3, r2
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d004      	beq.n	8008da4 <VL53L0X_load_tuning_settings+0x1b8>
 8008d9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f43f af2e 	beq.w	8008c00 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008da4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3720      	adds	r7, #32
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b088      	sub	sp, #32
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8008dc6:	f107 0313 	add.w	r3, r7, #19
 8008dca:	4619      	mov	r1, r3
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f7fc ffbb 	bl	8005d48 <VL53L0X_GetXTalkCompensationEnable>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8008dd6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d111      	bne.n	8008e02 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8008dde:	7cfb      	ldrb	r3, [r7, #19]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d00e      	beq.n	8008e02 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6a1b      	ldr	r3, [r3, #32]
 8008de8:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	8a9b      	ldrh	r3, [r3, #20]
 8008dee:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	fb02 f303 	mul.w	r3, r2, r3
 8008df6:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	3380      	adds	r3, #128	; 0x80
 8008dfc:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8008e02:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3720      	adds	r7, #32
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b086      	sub	sp, #24
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	60f8      	str	r0, [r7, #12]
 8008e16:	60b9      	str	r1, [r7, #8]
 8008e18:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8008e26:	f107 0310 	add.w	r3, r7, #16
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	68b9      	ldr	r1, [r7, #8]
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f7ff ffbe 	bl	8008db0 <VL53L0X_get_total_xtalk_rate>
 8008e34:	4603      	mov	r3, r0
 8008e36:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8008e38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d105      	bne.n	8008e4c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	441a      	add	r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	601a      	str	r2, [r3, #0]

	return Status;
 8008e4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3718      	adds	r7, #24
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b09a      	sub	sp, #104	; 0x68
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
 8008e64:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8008e66:	2312      	movs	r3, #18
 8008e68:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8008e6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008e6e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8008e70:	2342      	movs	r3, #66	; 0x42
 8008e72:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8008e74:	2306      	movs	r3, #6
 8008e76:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8008e78:	2307      	movs	r3, #7
 8008e7a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8008e88:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8008e90:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8008e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e96:	fb02 f303 	mul.w	r3, r2, r3
 8008e9a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8008e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e9e:	3380      	adds	r3, #128	; 0x80
 8008ea0:	0a1b      	lsrs	r3, r3, #8
 8008ea2:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8008ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ea8:	fb02 f303 	mul.w	r3, r2, r3
 8008eac:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d01a      	beq.n	8008eee <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	029b      	lsls	r3, r3, #10
 8008ebc:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8008ec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ec4:	4413      	add	r3, r2
 8008ec6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8008ec8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ed0:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8008ed2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	005b      	lsls	r3, r3, #1
 8008ed8:	4413      	add	r3, r2
 8008eda:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8008edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ede:	fb03 f303 	mul.w	r3, r3, r3
 8008ee2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8008ee4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ee6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008eea:	0c1b      	lsrs	r3, r3, #16
 8008eec:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008ef2:	fb02 f303 	mul.w	r3, r2, r3
 8008ef6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8008ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008efe:	0c1b      	lsrs	r3, r3, #16
 8008f00:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8008f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f04:	fb03 f303 	mul.w	r3, r3, r3
 8008f08:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8008f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f0c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008f10:	0c1b      	lsrs	r3, r3, #16
 8008f12:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8008f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f16:	085a      	lsrs	r2, r3, #1
 8008f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1a:	441a      	add	r2, r3
 8008f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f22:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8008f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f28:	fb02 f303 	mul.w	r3, r2, r3
 8008f2c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8008f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f34:	d302      	bcc.n	8008f3c <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8008f36:	4b54      	ldr	r3, [pc, #336]	; (8009088 <VL53L0X_calc_dmax+0x230>)
 8008f38:	663b      	str	r3, [r7, #96]	; 0x60
 8008f3a:	e015      	b.n	8008f68 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8008f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f3e:	085a      	lsrs	r2, r3, #1
 8008f40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f42:	441a      	add	r2, r3
 8008f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f4a:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8008f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f50:	fb02 f303 	mul.w	r3, r2, r3
 8008f54:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8008f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f58:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008f5c:	0c1b      	lsrs	r3, r3, #16
 8008f5e:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8008f60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f62:	fb03 f303 	mul.w	r3, r3, r3
 8008f66:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8008f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f6a:	039b      	lsls	r3, r3, #14
 8008f6c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008f70:	4a46      	ldr	r2, [pc, #280]	; (800908c <VL53L0X_calc_dmax+0x234>)
 8008f72:	fba2 2303 	umull	r2, r3, r2, r3
 8008f76:	099b      	lsrs	r3, r3, #6
 8008f78:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7c:	fb03 f303 	mul.w	r3, r3, r3
 8008f80:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8008f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f84:	fb03 f303 	mul.w	r3, r3, r3
 8008f88:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8008f8a:	6a3b      	ldr	r3, [r7, #32]
 8008f8c:	3308      	adds	r3, #8
 8008f8e:	091b      	lsrs	r3, r3, #4
 8008f90:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8008f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f94:	6a3b      	ldr	r3, [r7, #32]
 8008f96:	1ad3      	subs	r3, r2, r3
 8008f98:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8008f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	005b      	lsls	r3, r3, #1
 8008fa0:	4413      	add	r3, r2
 8008fa2:	011b      	lsls	r3, r3, #4
 8008fa4:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008fac:	0b9b      	lsrs	r3, r3, #14
 8008fae:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8008fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fb4:	4413      	add	r3, r2
 8008fb6:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8008fb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fba:	085b      	lsrs	r3, r3, #1
 8008fbc:	69ba      	ldr	r2, [r7, #24]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8008fc2:	69ba      	ldr	r2, [r7, #24]
 8008fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fca:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	039b      	lsls	r3, r3, #14
 8008fd0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	085b      	lsrs	r3, r3, #1
 8008fd6:	69ba      	ldr	r2, [r7, #24]
 8008fd8:	4413      	add	r3, r2
 8008fda:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8008fdc:	69ba      	ldr	r2, [r7, #24]
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fe4:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008fea:	fb02 f303 	mul.w	r3, r2, r3
 8008fee:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008ff6:	4a25      	ldr	r2, [pc, #148]	; (800908c <VL53L0X_calc_dmax+0x234>)
 8008ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8008ffc:	099b      	lsrs	r3, r3, #6
 8008ffe:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	011b      	lsls	r3, r3, #4
 8009004:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800900c:	4a1f      	ldr	r2, [pc, #124]	; (800908c <VL53L0X_calc_dmax+0x234>)
 800900e:	fba2 2303 	umull	r2, r3, r2, r3
 8009012:	099b      	lsrs	r3, r3, #6
 8009014:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8009016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009018:	3380      	adds	r3, #128	; 0x80
 800901a:	0a1b      	lsrs	r3, r3, #8
 800901c:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d008      	beq.n	8009036 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	085a      	lsrs	r2, r3, #1
 8009028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800902a:	441a      	add	r2, r3
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009032:	65bb      	str	r3, [r7, #88]	; 0x58
 8009034:	e001      	b.n	800903a <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8009036:	2300      	movs	r3, #0
 8009038:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800903a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800903c:	f7fe fc41 	bl	80078c2 <VL53L0X_isqrt>
 8009040:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d008      	beq.n	800905a <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	085a      	lsrs	r2, r3, #1
 800904c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800904e:	441a      	add	r2, r3
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	fbb2 f3f3 	udiv	r3, r2, r3
 8009056:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009058:	e001      	b.n	800905e <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800905a:	2300      	movs	r3, #0
 800905c:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800905e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009060:	f7fe fc2f 	bl	80078c2 <VL53L0X_isqrt>
 8009064:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8009066:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009068:	693a      	ldr	r2, [r7, #16]
 800906a:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800906c:	693a      	ldr	r2, [r7, #16]
 800906e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009070:	429a      	cmp	r2, r3
 8009072:	d902      	bls.n	800907a <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8009074:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009076:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009078:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800907a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800907e:	4618      	mov	r0, r3
 8009080:	3768      	adds	r7, #104	; 0x68
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	fff00000 	.word	0xfff00000
 800908c:	10624dd3 	.word	0x10624dd3

08009090 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b0b4      	sub	sp, #208	; 0xd0
 8009094:	af04      	add	r7, sp, #16
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	607a      	str	r2, [r7, #4]
 800909c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800909e:	f44f 7348 	mov.w	r3, #800	; 0x320
 80090a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 80090a6:	f44f 7316 	mov.w	r3, #600	; 0x258
 80090aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 80090ae:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 80090b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 80090b6:	f241 235c 	movw	r3, #4700	; 0x125c
 80090ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 80090be:	4b9e      	ldr	r3, [pc, #632]	; (8009338 <VL53L0X_calc_sigma_estimate+0x2a8>)
 80090c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 80090c4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80090c8:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 80090ca:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80090ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80090d6:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 80090d8:	4b98      	ldr	r3, [pc, #608]	; (800933c <VL53L0X_calc_sigma_estimate+0x2ac>)
 80090da:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 80090dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090e0:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 80090e2:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 80090e6:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 80090e8:	f240 6377 	movw	r3, #1655	; 0x677
 80090ec:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80090ee:	2300      	movs	r3, #0
 80090f0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6a1b      	ldr	r3, [r3, #32]
 80090f8:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009102:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8009106:	0c1b      	lsrs	r3, r3, #16
 8009108:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8009110:	f107 0310 	add.w	r3, r7, #16
 8009114:	461a      	mov	r2, r3
 8009116:	68b9      	ldr	r1, [r7, #8]
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f7ff fe78 	bl	8008e0e <VL53L0X_get_total_signal_rate>
 800911e:	4603      	mov	r3, r0
 8009120:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8009124:	f107 0314 	add.w	r3, r7, #20
 8009128:	461a      	mov	r2, r3
 800912a:	68b9      	ldr	r1, [r7, #8]
 800912c:	68f8      	ldr	r0, [r7, #12]
 800912e:	f7ff fe3f 	bl	8008db0 <VL53L0X_get_total_xtalk_rate>
 8009132:	4603      	mov	r3, r0
 8009134:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800913e:	fb02 f303 	mul.w	r3, r2, r3
 8009142:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8009144:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009146:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800914a:	0c1b      	lsrs	r3, r3, #16
 800914c:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009154:	fb02 f303 	mul.w	r3, r2, r3
 8009158:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800915c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009162:	429a      	cmp	r2, r3
 8009164:	d902      	bls.n	800916c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8009166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009168:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800916c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009170:	2b00      	cmp	r3, #0
 8009172:	d168      	bne.n	8009246 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800917a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8009184:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8009188:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800918c:	461a      	mov	r2, r3
 800918e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f7ff f93a 	bl	800840c <VL53L0X_calc_timeout_mclks>
 8009198:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80091a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80091aa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80091ae:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80091b2:	461a      	mov	r2, r3
 80091b4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f7ff f927 	bl	800840c <VL53L0X_calc_timeout_mclks>
 80091be:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 80091c0:	2303      	movs	r3, #3
 80091c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 80091c6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80091ca:	2b08      	cmp	r3, #8
 80091cc:	d102      	bne.n	80091d4 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 80091ce:	2302      	movs	r3, #2
 80091d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80091d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091d8:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 80091da:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80091de:	fb02 f303 	mul.w	r3, r2, r3
 80091e2:	02db      	lsls	r3, r3, #11
 80091e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80091e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80091ec:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80091f0:	4a53      	ldr	r2, [pc, #332]	; (8009340 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80091f2:	fba2 2303 	umull	r2, r3, r2, r3
 80091f6:	099b      	lsrs	r3, r3, #6
 80091f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 80091fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009200:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009202:	fb02 f303 	mul.w	r3, r2, r3
 8009206:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800920a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800920e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009212:	4a4b      	ldr	r2, [pc, #300]	; (8009340 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009214:	fba2 2303 	umull	r2, r3, r2, r3
 8009218:	099b      	lsrs	r3, r3, #6
 800921a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	3380      	adds	r3, #128	; 0x80
 8009222:	0a1b      	lsrs	r3, r3, #8
 8009224:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8009226:	693a      	ldr	r2, [r7, #16]
 8009228:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800922c:	fb02 f303 	mul.w	r3, r2, r3
 8009230:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8009234:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009238:	3380      	adds	r3, #128	; 0x80
 800923a:	0a1b      	lsrs	r3, r3, #8
 800923c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	021b      	lsls	r3, r3, #8
 8009244:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009246:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800924a:	2b00      	cmp	r3, #0
 800924c:	d002      	beq.n	8009254 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800924e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009252:	e15e      	b.n	8009512 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8009254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10c      	bne.n	8009274 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009260:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009268:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	2200      	movs	r2, #0
 8009270:	601a      	str	r2, [r3, #0]
 8009272:	e14c      	b.n	800950e <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8009274:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009278:	2b00      	cmp	r3, #0
 800927a:	d102      	bne.n	8009282 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800927c:	2301      	movs	r3, #1
 800927e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8009282:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009286:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8009288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800928a:	041a      	lsls	r2, r3, #16
 800928c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800928e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009292:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8009296:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800929a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800929c:	429a      	cmp	r2, r3
 800929e:	d902      	bls.n	80092a6 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 80092a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 80092a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80092aa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80092ae:	fb02 f303 	mul.w	r3, r2, r3
 80092b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80092b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80092ba:	4613      	mov	r3, r2
 80092bc:	005b      	lsls	r3, r3, #1
 80092be:	4413      	add	r3, r2
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7fe fafd 	bl	80078c2 <VL53L0X_isqrt>
 80092c8:	4603      	mov	r3, r0
 80092ca:	005b      	lsls	r3, r3, #1
 80092cc:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	891b      	ldrh	r3, [r3, #8]
 80092d2:	461a      	mov	r2, r3
 80092d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092d6:	fb02 f303 	mul.w	r3, r2, r3
 80092da:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80092dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092de:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 80092e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80092e4:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80092e6:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 80092e8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80092ec:	4a14      	ldr	r2, [pc, #80]	; (8009340 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80092ee:	fba2 2303 	umull	r2, r3, r2, r3
 80092f2:	099b      	lsrs	r3, r3, #6
 80092f4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 80092f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092f8:	041b      	lsls	r3, r3, #16
 80092fa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80092fe:	4a10      	ldr	r2, [pc, #64]	; (8009340 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009300:	fba2 2303 	umull	r2, r3, r2, r3
 8009304:	099b      	lsrs	r3, r3, #6
 8009306:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8009308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800930a:	021b      	lsls	r3, r3, #8
 800930c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800930e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009312:	fbb2 f3f3 	udiv	r3, r2, r3
 8009316:	2b00      	cmp	r3, #0
 8009318:	bfb8      	it	lt
 800931a:	425b      	neglt	r3, r3
 800931c:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800931e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009320:	021b      	lsls	r3, r3, #8
 8009322:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	7e1b      	ldrb	r3, [r3, #24]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d00b      	beq.n	8009344 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800932c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009330:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009334:	e033      	b.n	800939e <VL53L0X_calc_sigma_estimate+0x30e>
 8009336:	bf00      	nop
 8009338:	028f87ae 	.word	0x028f87ae
 800933c:	0006999a 	.word	0x0006999a
 8009340:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8009344:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009346:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800934a:	fbb2 f3f3 	udiv	r3, r2, r3
 800934e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8009352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009354:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8009358:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800935c:	fb02 f303 	mul.w	r3, r2, r3
 8009360:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8009364:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009368:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800936a:	4413      	add	r3, r2
 800936c:	0c1b      	lsrs	r3, r3, #16
 800936e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8009372:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009376:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800937a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800937e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009382:	085b      	lsrs	r3, r3, #1
 8009384:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8009388:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800938c:	fb03 f303 	mul.w	r3, r3, r3
 8009390:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8009394:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009398:	0b9b      	lsrs	r3, r3, #14
 800939a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800939e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093a4:	fb02 f303 	mul.w	r3, r2, r3
 80093a8:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 80093aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80093b0:	0c1b      	lsrs	r3, r3, #16
 80093b2:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 80093b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b6:	fb03 f303 	mul.w	r3, r3, r3
 80093ba:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 80093bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80093c0:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 80093c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80093c8:	0c1b      	lsrs	r3, r3, #16
 80093ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80093cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ce:	fb03 f303 	mul.w	r3, r3, r3
 80093d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80093d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d8:	4413      	add	r3, r2
 80093da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80093dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093de:	f7fe fa70 	bl	80078c2 <VL53L0X_isqrt>
 80093e2:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 80093e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e6:	041b      	lsls	r3, r3, #16
 80093e8:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80093ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ec:	3332      	adds	r3, #50	; 0x32
 80093ee:	4a4b      	ldr	r2, [pc, #300]	; (800951c <VL53L0X_calc_sigma_estimate+0x48c>)
 80093f0:	fba2 2303 	umull	r2, r3, r2, r3
 80093f4:	095a      	lsrs	r2, r3, #5
 80093f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80093fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8009400:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009404:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8009408:	fb02 f303 	mul.w	r3, r2, r3
 800940c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8009410:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009414:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8009418:	3308      	adds	r3, #8
 800941a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800941e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009422:	4a3f      	ldr	r2, [pc, #252]	; (8009520 <VL53L0X_calc_sigma_estimate+0x490>)
 8009424:	fba2 2303 	umull	r2, r3, r2, r3
 8009428:	0b5b      	lsrs	r3, r3, #13
 800942a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800942e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009432:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009434:	429a      	cmp	r2, r3
 8009436:	d902      	bls.n	800943e <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8009438:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800943a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800943e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009442:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009446:	4413      	add	r3, r2
 8009448:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800944c:	4a35      	ldr	r2, [pc, #212]	; (8009524 <VL53L0X_calc_sigma_estimate+0x494>)
 800944e:	fba2 2303 	umull	r2, r3, r2, r3
 8009452:	099b      	lsrs	r3, r3, #6
 8009454:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8009456:	6a3b      	ldr	r3, [r7, #32]
 8009458:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800945a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800945e:	441a      	add	r2, r3
 8009460:	6a3b      	ldr	r3, [r7, #32]
 8009462:	fbb2 f3f3 	udiv	r3, r2, r3
 8009466:	4618      	mov	r0, r3
 8009468:	f7fe fa2b 	bl	80078c2 <VL53L0X_isqrt>
 800946c:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	021b      	lsls	r3, r3, #8
 8009472:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800947a:	4a2a      	ldr	r2, [pc, #168]	; (8009524 <VL53L0X_calc_sigma_estimate+0x494>)
 800947c:	fba2 2303 	umull	r2, r3, r2, r3
 8009480:	099b      	lsrs	r3, r3, #6
 8009482:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8009484:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009488:	fb03 f303 	mul.w	r3, r3, r3
 800948c:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	fb03 f303 	mul.w	r3, r3, r3
 8009494:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8009496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800949a:	4413      	add	r3, r2
 800949c:	4618      	mov	r0, r3
 800949e:	f7fe fa10 	bl	80078c2 <VL53L0X_isqrt>
 80094a2:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 80094a4:	69bb      	ldr	r3, [r7, #24]
 80094a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80094aa:	fb02 f303 	mul.w	r3, r2, r3
 80094ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 80094b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d009      	beq.n	80094cc <VL53L0X_calc_sigma_estimate+0x43c>
 80094b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d005      	beq.n	80094cc <VL53L0X_calc_sigma_estimate+0x43c>
 80094c0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80094c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d903      	bls.n	80094d4 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 80094cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80094d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80094da:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 80094e6:	6939      	ldr	r1, [r7, #16]
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	9303      	str	r3, [sp, #12]
 80094ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094f0:	9302      	str	r3, [sp, #8]
 80094f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80094f6:	9301      	str	r3, [sp, #4]
 80094f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094fa:	9300      	str	r3, [sp, #0]
 80094fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009500:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f7ff fca8 	bl	8008e58 <VL53L0X_calc_dmax>
 8009508:	4603      	mov	r3, r0
 800950a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800950e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8009512:	4618      	mov	r0, r3
 8009514:	37c0      	adds	r7, #192	; 0xc0
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	51eb851f 	.word	0x51eb851f
 8009520:	d1b71759 	.word	0xd1b71759
 8009524:	10624dd3 	.word	0x10624dd3

08009528 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b090      	sub	sp, #64	; 0x40
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	607a      	str	r2, [r7, #4]
 8009532:	461a      	mov	r2, r3
 8009534:	460b      	mov	r3, r1
 8009536:	72fb      	strb	r3, [r7, #11]
 8009538:	4613      	mov	r3, r2
 800953a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800953c:	2300      	movs	r3, #0
 800953e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8009542:	2300      	movs	r3, #0
 8009544:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8009548:	2300      	movs	r3, #0
 800954a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8009554:	2300      	movs	r3, #0
 8009556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800955a:	2300      	movs	r3, #0
 800955c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8009560:	2300      	movs	r3, #0
 8009562:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8009566:	2300      	movs	r3, #0
 8009568:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800956c:	2300      	movs	r3, #0
 800956e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8009572:	2300      	movs	r3, #0
 8009574:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8009576:	2300      	movs	r3, #0
 8009578:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800957a:	7afb      	ldrb	r3, [r7, #11]
 800957c:	10db      	asrs	r3, r3, #3
 800957e:	b2db      	uxtb	r3, r3
 8009580:	f003 030f 	and.w	r3, r3, #15
 8009584:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8009588:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800958c:	2b00      	cmp	r3, #0
 800958e:	d017      	beq.n	80095c0 <VL53L0X_get_pal_range_status+0x98>
 8009590:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009594:	2b05      	cmp	r3, #5
 8009596:	d013      	beq.n	80095c0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8009598:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800959c:	2b07      	cmp	r3, #7
 800959e:	d00f      	beq.n	80095c0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 80095a0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80095a4:	2b0c      	cmp	r3, #12
 80095a6:	d00b      	beq.n	80095c0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 80095a8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80095ac:	2b0d      	cmp	r3, #13
 80095ae:	d007      	beq.n	80095c0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 80095b0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80095b4:	2b0e      	cmp	r3, #14
 80095b6:	d003      	beq.n	80095c0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 80095b8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80095bc:	2b0f      	cmp	r3, #15
 80095be:	d103      	bne.n	80095c8 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 80095c0:	2301      	movs	r3, #1
 80095c2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80095c6:	e002      	b.n	80095ce <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 80095c8:	2300      	movs	r3, #0
 80095ca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80095ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d109      	bne.n	80095ea <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80095d6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80095da:	461a      	mov	r2, r3
 80095dc:	2100      	movs	r1, #0
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f7fc fc86 	bl	8005ef0 <VL53L0X_GetLimitCheckEnable>
 80095e4:	4603      	mov	r3, r0
 80095e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80095ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d02e      	beq.n	8009650 <VL53L0X_get_pal_range_status+0x128>
 80095f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d12a      	bne.n	8009650 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80095fa:	f107 0310 	add.w	r3, r7, #16
 80095fe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009602:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f7ff fd43 	bl	8009090 <VL53L0X_calc_sigma_estimate>
 800960a:	4603      	mov	r3, r0
 800960c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8009610:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009614:	2b00      	cmp	r3, #0
 8009616:	d103      	bne.n	8009620 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	b29a      	uxth	r2, r3
 800961c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800961e:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8009620:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009624:	2b00      	cmp	r3, #0
 8009626:	d113      	bne.n	8009650 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8009628:	f107 0320 	add.w	r3, r7, #32
 800962c:	461a      	mov	r2, r3
 800962e:	2100      	movs	r1, #0
 8009630:	68f8      	ldr	r0, [r7, #12]
 8009632:	f7fc fce3 	bl	8005ffc <VL53L0X_GetLimitCheckValue>
 8009636:	4603      	mov	r3, r0
 8009638:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800963c:	6a3b      	ldr	r3, [r7, #32]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d006      	beq.n	8009650 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8009642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009644:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8009646:	429a      	cmp	r2, r3
 8009648:	d902      	bls.n	8009650 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800964a:	2301      	movs	r3, #1
 800964c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8009650:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009654:	2b00      	cmp	r3, #0
 8009656:	d109      	bne.n	800966c <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009658:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800965c:	461a      	mov	r2, r3
 800965e:	2102      	movs	r1, #2
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f7fc fc45 	bl	8005ef0 <VL53L0X_GetLimitCheckEnable>
 8009666:	4603      	mov	r3, r0
 8009668:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800966c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009670:	2b00      	cmp	r3, #0
 8009672:	d044      	beq.n	80096fe <VL53L0X_get_pal_range_status+0x1d6>
 8009674:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009678:	2b00      	cmp	r3, #0
 800967a:	d140      	bne.n	80096fe <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800967c:	f107 031c 	add.w	r3, r7, #28
 8009680:	461a      	mov	r2, r3
 8009682:	2102      	movs	r1, #2
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f7fc fcb9 	bl	8005ffc <VL53L0X_GetLimitCheckValue>
 800968a:	4603      	mov	r3, r0
 800968c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8009690:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009694:	2b00      	cmp	r3, #0
 8009696:	d107      	bne.n	80096a8 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009698:	2201      	movs	r2, #1
 800969a:	21ff      	movs	r1, #255	; 0xff
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f7f9 fde9 	bl	8003274 <VL53L0X_WrByte>
 80096a2:	4603      	mov	r3, r0
 80096a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 80096a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d109      	bne.n	80096c4 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 80096b0:	f107 0316 	add.w	r3, r7, #22
 80096b4:	461a      	mov	r2, r3
 80096b6:	21b6      	movs	r1, #182	; 0xb6
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f7f9 feb9 	bl	8003430 <VL53L0X_RdWord>
 80096be:	4603      	mov	r3, r0
 80096c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 80096c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d107      	bne.n	80096dc <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80096cc:	2200      	movs	r2, #0
 80096ce:	21ff      	movs	r1, #255	; 0xff
 80096d0:	68f8      	ldr	r0, [r7, #12]
 80096d2:	f7f9 fdcf 	bl	8003274 <VL53L0X_WrByte>
 80096d6:	4603      	mov	r3, r0
 80096d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80096dc:	8afb      	ldrh	r3, [r7, #22]
 80096de:	025b      	lsls	r3, r3, #9
 80096e0:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096e6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d006      	beq.n	80096fe <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 80096f0:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 80096f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d902      	bls.n	80096fe <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 80096f8:	2301      	movs	r3, #1
 80096fa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80096fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009702:	2b00      	cmp	r3, #0
 8009704:	d109      	bne.n	800971a <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009706:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800970a:	461a      	mov	r2, r3
 800970c:	2103      	movs	r1, #3
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f7fc fbee 	bl	8005ef0 <VL53L0X_GetLimitCheckEnable>
 8009714:	4603      	mov	r3, r0
 8009716:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800971a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800971e:	2b00      	cmp	r3, #0
 8009720:	d023      	beq.n	800976a <VL53L0X_get_pal_range_status+0x242>
 8009722:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009726:	2b00      	cmp	r3, #0
 8009728:	d11f      	bne.n	800976a <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800972a:	893b      	ldrh	r3, [r7, #8]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d102      	bne.n	8009736 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8009730:	2300      	movs	r3, #0
 8009732:	637b      	str	r3, [r7, #52]	; 0x34
 8009734:	e005      	b.n	8009742 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	021a      	lsls	r2, r3, #8
 800973a:	893b      	ldrh	r3, [r7, #8]
 800973c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009740:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8009742:	f107 0318 	add.w	r3, r7, #24
 8009746:	461a      	mov	r2, r3
 8009748:	2103      	movs	r1, #3
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	f7fc fc56 	bl	8005ffc <VL53L0X_GetLimitCheckValue>
 8009750:	4603      	mov	r3, r0
 8009752:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d006      	beq.n	800976a <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800975c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800975e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009760:	429a      	cmp	r2, r3
 8009762:	d202      	bcs.n	800976a <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8009764:	2301      	movs	r3, #1
 8009766:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800976a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800976e:	2b00      	cmp	r3, #0
 8009770:	d14a      	bne.n	8009808 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8009772:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009776:	2b01      	cmp	r3, #1
 8009778:	d103      	bne.n	8009782 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800977a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800977c:	22ff      	movs	r2, #255	; 0xff
 800977e:	701a      	strb	r2, [r3, #0]
 8009780:	e042      	b.n	8009808 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8009782:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009786:	2b01      	cmp	r3, #1
 8009788:	d007      	beq.n	800979a <VL53L0X_get_pal_range_status+0x272>
 800978a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800978e:	2b02      	cmp	r3, #2
 8009790:	d003      	beq.n	800979a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8009792:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009796:	2b03      	cmp	r3, #3
 8009798:	d103      	bne.n	80097a2 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800979a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800979c:	2205      	movs	r2, #5
 800979e:	701a      	strb	r2, [r3, #0]
 80097a0:	e032      	b.n	8009808 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 80097a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80097a6:	2b06      	cmp	r3, #6
 80097a8:	d003      	beq.n	80097b2 <VL53L0X_get_pal_range_status+0x28a>
 80097aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80097ae:	2b09      	cmp	r3, #9
 80097b0:	d103      	bne.n	80097ba <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 80097b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097b4:	2204      	movs	r2, #4
 80097b6:	701a      	strb	r2, [r3, #0]
 80097b8:	e026      	b.n	8009808 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 80097ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80097be:	2b08      	cmp	r3, #8
 80097c0:	d007      	beq.n	80097d2 <VL53L0X_get_pal_range_status+0x2aa>
 80097c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80097c6:	2b0a      	cmp	r3, #10
 80097c8:	d003      	beq.n	80097d2 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 80097ca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d103      	bne.n	80097da <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 80097d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097d4:	2203      	movs	r2, #3
 80097d6:	701a      	strb	r2, [r3, #0]
 80097d8:	e016      	b.n	8009808 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 80097da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80097de:	2b04      	cmp	r3, #4
 80097e0:	d003      	beq.n	80097ea <VL53L0X_get_pal_range_status+0x2c2>
 80097e2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d103      	bne.n	80097f2 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 80097ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ec:	2202      	movs	r2, #2
 80097ee:	701a      	strb	r2, [r3, #0]
 80097f0:	e00a      	b.n	8009808 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 80097f2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d103      	bne.n	8009802 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80097fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097fc:	2201      	movs	r2, #1
 80097fe:	701a      	strb	r2, [r3, #0]
 8009800:	e002      	b.n	8009808 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8009802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009804:	2200      	movs	r2, #0
 8009806:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8009808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d102      	bne.n	8009816 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8009810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009812:	2200      	movs	r2, #0
 8009814:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009816:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800981a:	461a      	mov	r2, r3
 800981c:	2101      	movs	r1, #1
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f7fc fb66 	bl	8005ef0 <VL53L0X_GetLimitCheckEnable>
 8009824:	4603      	mov	r3, r0
 8009826:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800982a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800982e:	2b00      	cmp	r3, #0
 8009830:	d14f      	bne.n	80098d2 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8009832:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009836:	2b00      	cmp	r3, #0
 8009838:	d003      	beq.n	8009842 <VL53L0X_get_pal_range_status+0x31a>
 800983a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800983e:	2b01      	cmp	r3, #1
 8009840:	d103      	bne.n	800984a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8009842:	2301      	movs	r3, #1
 8009844:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009848:	e002      	b.n	8009850 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800984a:	2300      	movs	r3, #0
 800984c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009856:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800985a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800985e:	2b04      	cmp	r3, #4
 8009860:	d003      	beq.n	800986a <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8009862:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8009866:	2b00      	cmp	r3, #0
 8009868:	d103      	bne.n	8009872 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800986a:	2301      	movs	r3, #1
 800986c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009870:	e002      	b.n	8009878 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8009872:	2300      	movs	r3, #0
 8009874:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800987e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8009882:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009886:	2b00      	cmp	r3, #0
 8009888:	d003      	beq.n	8009892 <VL53L0X_get_pal_range_status+0x36a>
 800988a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800988e:	2b01      	cmp	r3, #1
 8009890:	d103      	bne.n	800989a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8009892:	2301      	movs	r3, #1
 8009894:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009898:	e002      	b.n	80098a0 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800989a:	2300      	movs	r3, #0
 800989c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80098a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 80098aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d003      	beq.n	80098ba <VL53L0X_get_pal_range_status+0x392>
 80098b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d103      	bne.n	80098c2 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 80098ba:	2301      	movs	r3, #1
 80098bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098c0:	e002      	b.n	80098c8 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 80098c2:	2300      	movs	r3, #0
 80098c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80098ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80098d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3740      	adds	r7, #64	; 0x40
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 80098de:	b480      	push	{r7}
 80098e0:	af00      	add	r7, sp, #0
  while (1);
 80098e2:	e7fe      	b.n	80098e2 <BSP_ErrorHandler+0x4>

080098e4 <BSP_LED_Init>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b088      	sub	sp, #32
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	4603      	mov	r3, r0
 80098ec:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;

  if (Led == LED2)
 80098ee:	79fb      	ldrb	r3, [r7, #7]
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d124      	bne.n	800993e <BSP_LED_Init+0x5a>
  {
    /* Enable the GPIO_LED clock */
    LED2_GPIO_CLK_ENABLE();
 80098f4:	4b1f      	ldr	r3, [pc, #124]	; (8009974 <BSP_LED_Init+0x90>)
 80098f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098f8:	4a1e      	ldr	r2, [pc, #120]	; (8009974 <BSP_LED_Init+0x90>)
 80098fa:	f043 0302 	orr.w	r3, r3, #2
 80098fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009900:	4b1c      	ldr	r3, [pc, #112]	; (8009974 <BSP_LED_Init+0x90>)
 8009902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009904:	f003 0302 	and.w	r3, r3, #2
 8009908:	60bb      	str	r3, [r7, #8]
 800990a:	68bb      	ldr	r3, [r7, #8]

    /* Configure the GPIO_LED pin */
    GPIO_InitStructure.Pin = LED_PIN[Led];
 800990c:	79fb      	ldrb	r3, [r7, #7]
 800990e:	4a1a      	ldr	r2, [pc, #104]	; (8009978 <BSP_LED_Init+0x94>)
 8009910:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009914:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8009916:	2301      	movs	r3, #1
 8009918:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 800991a:	2300      	movs	r3, #0
 800991c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800991e:	2303      	movs	r3, #3
 8009920:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStructure);
 8009922:	f107 030c 	add.w	r3, r7, #12
 8009926:	4619      	mov	r1, r3
 8009928:	4814      	ldr	r0, [pc, #80]	; (800997c <BSP_LED_Init+0x98>)
 800992a:	f003 fb5f 	bl	800cfec <HAL_GPIO_Init>
    /* By default, turn off LED */
    HAL_GPIO_WritePin(LED2_GPIO_PORT, GPIO_InitStructure.Pin, GPIO_PIN_SET);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	b29b      	uxth	r3, r3
 8009932:	2201      	movs	r2, #1
 8009934:	4619      	mov	r1, r3
 8009936:	4811      	ldr	r0, [pc, #68]	; (800997c <BSP_LED_Init+0x98>)
 8009938:	f003 fddc 	bl	800d4f4 <HAL_GPIO_WritePin>

    /* By default, turn off LED */
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }

}
 800993c:	e016      	b.n	800996c <BSP_LED_Init+0x88>
    if (BSP_IO_Init() == IO_ERROR)
 800993e:	f000 fda3 	bl	800a488 <BSP_IO_Init>
 8009942:	4603      	mov	r3, r0
 8009944:	2b01      	cmp	r3, #1
 8009946:	d101      	bne.n	800994c <BSP_LED_Init+0x68>
      BSP_ErrorHandler();
 8009948:	f7ff ffc9 	bl	80098de <BSP_ErrorHandler>
    BSP_IO_ConfigPin(LED_PIN[Led], IO_MODE_OUTPUT);
 800994c:	79fb      	ldrb	r3, [r7, #7]
 800994e:	4a0a      	ldr	r2, [pc, #40]	; (8009978 <BSP_LED_Init+0x94>)
 8009950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009954:	2101      	movs	r1, #1
 8009956:	4618      	mov	r0, r3
 8009958:	f000 fdda 	bl	800a510 <BSP_IO_ConfigPin>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 800995c:	79fb      	ldrb	r3, [r7, #7]
 800995e:	4a06      	ldr	r2, [pc, #24]	; (8009978 <BSP_LED_Init+0x94>)
 8009960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009964:	2101      	movs	r1, #1
 8009966:	4618      	mov	r0, r3
 8009968:	f000 fdee 	bl	800a548 <BSP_IO_WritePin>
}
 800996c:	bf00      	nop
 800996e:	3720      	adds	r7, #32
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	40021000 	.word	0x40021000
 8009978:	0801abd0 	.word	0x0801abd0
 800997c:	48000400 	.word	0x48000400

08009980 <BSP_LED_On>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	4603      	mov	r3, r0
 8009988:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 800998a:	79fb      	ldrb	r3, [r7, #7]
 800998c:	2b01      	cmp	r3, #1
 800998e:	d109      	bne.n	80099a4 <BSP_LED_On+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_RESET);
 8009990:	79fb      	ldrb	r3, [r7, #7]
 8009992:	4a0a      	ldr	r2, [pc, #40]	; (80099bc <BSP_LED_On+0x3c>)
 8009994:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009998:	2200      	movs	r2, #0
 800999a:	4619      	mov	r1, r3
 800999c:	4808      	ldr	r0, [pc, #32]	; (80099c0 <BSP_LED_On+0x40>)
 800999e:	f003 fda9 	bl	800d4f4 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
  }
}
 80099a2:	e007      	b.n	80099b4 <BSP_LED_On+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
 80099a4:	79fb      	ldrb	r3, [r7, #7]
 80099a6:	4a05      	ldr	r2, [pc, #20]	; (80099bc <BSP_LED_On+0x3c>)
 80099a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099ac:	2100      	movs	r1, #0
 80099ae:	4618      	mov	r0, r3
 80099b0:	f000 fdca 	bl	800a548 <BSP_IO_WritePin>
}
 80099b4:	bf00      	nop
 80099b6:	3708      	adds	r7, #8
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}
 80099bc:	0801abd0 	.word	0x0801abd0
 80099c0:	48000400 	.word	0x48000400

080099c4 <BSP_LED_Off>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	4603      	mov	r3, r0
 80099cc:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 80099ce:	79fb      	ldrb	r3, [r7, #7]
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d109      	bne.n	80099e8 <BSP_LED_Off+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_SET);
 80099d4:	79fb      	ldrb	r3, [r7, #7]
 80099d6:	4a0a      	ldr	r2, [pc, #40]	; (8009a00 <BSP_LED_Off+0x3c>)
 80099d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099dc:	2201      	movs	r2, #1
 80099de:	4619      	mov	r1, r3
 80099e0:	4808      	ldr	r0, [pc, #32]	; (8009a04 <BSP_LED_Off+0x40>)
 80099e2:	f003 fd87 	bl	800d4f4 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }
}
 80099e6:	e007      	b.n	80099f8 <BSP_LED_Off+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 80099e8:	79fb      	ldrb	r3, [r7, #7]
 80099ea:	4a05      	ldr	r2, [pc, #20]	; (8009a00 <BSP_LED_Off+0x3c>)
 80099ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099f0:	2101      	movs	r1, #1
 80099f2:	4618      	mov	r0, r3
 80099f4:	f000 fda8 	bl	800a548 <BSP_IO_WritePin>
}
 80099f8:	bf00      	nop
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	0801abd0 	.word	0x0801abd0
 8009a04:	48000400 	.word	0x48000400

08009a08 <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 8009a0c:	4812      	ldr	r0, [pc, #72]	; (8009a58 <I2C2_Init+0x50>)
 8009a0e:	f004 fb7e 	bl	800e10e <HAL_I2C_GetState>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d11d      	bne.n	8009a54 <I2C2_Init+0x4c>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 8009a18:	4b0f      	ldr	r3, [pc, #60]	; (8009a58 <I2C2_Init+0x50>)
 8009a1a:	4a10      	ldr	r2, [pc, #64]	; (8009a5c <I2C2_Init+0x54>)
 8009a1c:	601a      	str	r2, [r3, #0]
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 8009a1e:	4b0e      	ldr	r3, [pc, #56]	; (8009a58 <I2C2_Init+0x50>)
 8009a20:	4a0f      	ldr	r2, [pc, #60]	; (8009a60 <I2C2_Init+0x58>)
 8009a22:	605a      	str	r2, [r3, #4]
    I2c2Handle.Init.OwnAddress1      = 0x70;
 8009a24:	4b0c      	ldr	r3, [pc, #48]	; (8009a58 <I2C2_Init+0x50>)
 8009a26:	2270      	movs	r2, #112	; 0x70
 8009a28:	609a      	str	r2, [r3, #8]
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009a2a:	4b0b      	ldr	r3, [pc, #44]	; (8009a58 <I2C2_Init+0x50>)
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	60da      	str	r2, [r3, #12]
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009a30:	4b09      	ldr	r3, [pc, #36]	; (8009a58 <I2C2_Init+0x50>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	611a      	str	r2, [r3, #16]
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 8009a36:	4b08      	ldr	r3, [pc, #32]	; (8009a58 <I2C2_Init+0x50>)
 8009a38:	22ff      	movs	r2, #255	; 0xff
 8009a3a:	615a      	str	r2, [r3, #20]
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009a3c:	4b06      	ldr	r3, [pc, #24]	; (8009a58 <I2C2_Init+0x50>)
 8009a3e:	2200      	movs	r2, #0
 8009a40:	61da      	str	r2, [r3, #28]
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8009a42:	4b05      	ldr	r3, [pc, #20]	; (8009a58 <I2C2_Init+0x50>)
 8009a44:	2200      	movs	r2, #0
 8009a46:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit(&I2c2Handle);
 8009a48:	4803      	ldr	r0, [pc, #12]	; (8009a58 <I2C2_Init+0x50>)
 8009a4a:	f000 f80b 	bl	8009a64 <I2C2_MspInit>
    HAL_I2C_Init(&I2c2Handle);
 8009a4e:	4802      	ldr	r0, [pc, #8]	; (8009a58 <I2C2_Init+0x50>)
 8009a50:	f003 fd80 	bl	800d554 <HAL_I2C_Init>
  }
}
 8009a54:	bf00      	nop
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	200011b4 	.word	0x200011b4
 8009a5c:	40005800 	.word	0x40005800
 8009a60:	40403e5d 	.word	0x40403e5d

08009a64 <I2C2_MspInit>:
  * @brief Discovery I2C2 MSP Initialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b0ae      	sub	sp, #184	; 0xb8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == DISCOVERY_I2C2)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a37      	ldr	r2, [pc, #220]	; (8009b50 <I2C2_MspInit+0xec>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d168      	bne.n	8009b48 <I2C2_MspInit+0xe4>
  {
    /*##-1- Configure the Discovery I2C2 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8009a76:	2380      	movs	r3, #128	; 0x80
 8009a78:	61bb      	str	r3, [r7, #24]
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8009a7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009a7e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8009a80:	f107 0318 	add.w	r3, r7, #24
 8009a84:	4618      	mov	r0, r3
 8009a86:	f007 f8d7 	bl	8010c38 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8009a8a:	4b32      	ldr	r3, [pc, #200]	; (8009b54 <I2C2_MspInit+0xf0>)
 8009a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a8e:	4a31      	ldr	r2, [pc, #196]	; (8009b54 <I2C2_MspInit+0xf0>)
 8009a90:	f043 0302 	orr.w	r3, r3, #2
 8009a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a96:	4b2f      	ldr	r3, [pc, #188]	; (8009b54 <I2C2_MspInit+0xf0>)
 8009a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a9a:	f003 0302 	and.w	r3, r3, #2
 8009a9e:	617b      	str	r3, [r7, #20]
 8009aa0:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8009aa2:	4b2c      	ldr	r3, [pc, #176]	; (8009b54 <I2C2_MspInit+0xf0>)
 8009aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aa6:	4a2b      	ldr	r2, [pc, #172]	; (8009b54 <I2C2_MspInit+0xf0>)
 8009aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009aae:	4b29      	ldr	r3, [pc, #164]	; (8009b54 <I2C2_MspInit+0xf0>)
 8009ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ab6:	613b      	str	r3, [r7, #16]
 8009ab8:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 8009aba:	2310      	movs	r3, #16
 8009abc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8009ac0:	2312      	movs	r3, #18
 8009ac2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 8009acc:	2303      	movs	r3, #3
 8009ace:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 8009ad2:	2304      	movs	r3, #4
 8009ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 8009ad8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009adc:	4619      	mov	r1, r3
 8009ade:	481e      	ldr	r0, [pc, #120]	; (8009b58 <I2C2_MspInit+0xf4>)
 8009ae0:	f003 fa84 	bl	800cfec <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 8009ae4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009ae8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 8009aec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009af0:	4619      	mov	r1, r3
 8009af2:	481a      	ldr	r0, [pc, #104]	; (8009b5c <I2C2_MspInit+0xf8>)
 8009af4:	f003 fa7a 	bl	800cfec <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 8009af8:	4b16      	ldr	r3, [pc, #88]	; (8009b54 <I2C2_MspInit+0xf0>)
 8009afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009afc:	4a15      	ldr	r2, [pc, #84]	; (8009b54 <I2C2_MspInit+0xf0>)
 8009afe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009b02:	6593      	str	r3, [r2, #88]	; 0x58
 8009b04:	4b13      	ldr	r3, [pc, #76]	; (8009b54 <I2C2_MspInit+0xf0>)
 8009b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b0c:	60fb      	str	r3, [r7, #12]
 8009b0e:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 8009b10:	4b10      	ldr	r3, [pc, #64]	; (8009b54 <I2C2_MspInit+0xf0>)
 8009b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b14:	4a0f      	ldr	r2, [pc, #60]	; (8009b54 <I2C2_MspInit+0xf0>)
 8009b16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009b1a:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8009b1c:	4b0d      	ldr	r3, [pc, #52]	; (8009b54 <I2C2_MspInit+0xf0>)
 8009b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b20:	4a0c      	ldr	r2, [pc, #48]	; (8009b54 <I2C2_MspInit+0xf0>)
 8009b22:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009b26:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 8009b28:	2200      	movs	r2, #0
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	2021      	movs	r0, #33	; 0x21
 8009b2e:	f003 f886 	bl	800cc3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8009b32:	2021      	movs	r0, #33	; 0x21
 8009b34:	f003 f89f 	bl	800cc76 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 8009b38:	2200      	movs	r2, #0
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	2022      	movs	r0, #34	; 0x22
 8009b3e:	f003 f87e 	bl	800cc3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8009b42:	2022      	movs	r0, #34	; 0x22
 8009b44:	f003 f897 	bl	800cc76 <HAL_NVIC_EnableIRQ>
  }
}
 8009b48:	bf00      	nop
 8009b4a:	37b8      	adds	r7, #184	; 0xb8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	40005800 	.word	0x40005800
 8009b54:	40021000 	.word	0x40021000
 8009b58:	48001c00 	.word	0x48001c00
 8009b5c:	48000400 	.word	0x48000400

08009b60 <I2C2_DeInit>:
/**
  * @brief Discovery I2C2 Bus Deinitialization
  * @retval None
  */
void I2C2_DeInit(void)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 8009b64:	4806      	ldr	r0, [pc, #24]	; (8009b80 <I2C2_DeInit+0x20>)
 8009b66:	f004 fad2 	bl	800e10e <HAL_I2C_GetState>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d005      	beq.n	8009b7c <I2C2_DeInit+0x1c>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c2Handle);
 8009b70:	4803      	ldr	r0, [pc, #12]	; (8009b80 <I2C2_DeInit+0x20>)
 8009b72:	f003 fd7e 	bl	800d672 <HAL_I2C_DeInit>
    I2C2_MspDeInit(&I2c2Handle);
 8009b76:	4802      	ldr	r0, [pc, #8]	; (8009b80 <I2C2_DeInit+0x20>)
 8009b78:	f000 f804 	bl	8009b84 <I2C2_MspDeInit>
  }
}
 8009b7c:	bf00      	nop
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	200011b4 	.word	0x200011b4

08009b84 <I2C2_MspDeInit>:
  * @brief Discovery I2C2 MSP DeInitialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C2)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a1f      	ldr	r2, [pc, #124]	; (8009c10 <I2C2_MspDeInit+0x8c>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d138      	bne.n	8009c08 <I2C2_MspDeInit+0x84>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8009b96:	4b1f      	ldr	r3, [pc, #124]	; (8009c14 <I2C2_MspDeInit+0x90>)
 8009b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b9a:	4a1e      	ldr	r2, [pc, #120]	; (8009c14 <I2C2_MspDeInit+0x90>)
 8009b9c:	f043 0302 	orr.w	r3, r3, #2
 8009ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ba2:	4b1c      	ldr	r3, [pc, #112]	; (8009c14 <I2C2_MspDeInit+0x90>)
 8009ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ba6:	f003 0302 	and.w	r3, r3, #2
 8009baa:	60fb      	str	r3, [r7, #12]
 8009bac:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8009bae:	4b19      	ldr	r3, [pc, #100]	; (8009c14 <I2C2_MspDeInit+0x90>)
 8009bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bb2:	4a18      	ldr	r2, [pc, #96]	; (8009c14 <I2C2_MspDeInit+0x90>)
 8009bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009bba:	4b16      	ldr	r3, [pc, #88]	; (8009c14 <I2C2_MspDeInit+0x90>)
 8009bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bc2:	60bb      	str	r3, [r7, #8]
 8009bc4:	68bb      	ldr	r3, [r7, #8]

    /* Configure I2C Rx/Tx as alternate function  */
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 8009bc6:	2110      	movs	r1, #16
 8009bc8:	4813      	ldr	r0, [pc, #76]	; (8009c18 <I2C2_MspDeInit+0x94>)
 8009bca:	f003 fba1 	bl	800d310 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 8009bce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009bd2:	4812      	ldr	r0, [pc, #72]	; (8009c1c <I2C2_MspDeInit+0x98>)
 8009bd4:	f003 fb9c 	bl	800d310 <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C2 peripheral ############################*/
    /* Force and release I2C Peripheral */
    DISCOVERY_I2C2_FORCE_RESET();
 8009bd8:	4b0e      	ldr	r3, [pc, #56]	; (8009c14 <I2C2_MspDeInit+0x90>)
 8009bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bdc:	4a0d      	ldr	r2, [pc, #52]	; (8009c14 <I2C2_MspDeInit+0x90>)
 8009bde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009be2:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8009be4:	4b0b      	ldr	r3, [pc, #44]	; (8009c14 <I2C2_MspDeInit+0x90>)
 8009be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be8:	4a0a      	ldr	r2, [pc, #40]	; (8009c14 <I2C2_MspDeInit+0x90>)
 8009bea:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009bee:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C2 clock */
    DISCOVERY_I2C2_CLK_DISABLE();
 8009bf0:	4b08      	ldr	r3, [pc, #32]	; (8009c14 <I2C2_MspDeInit+0x90>)
 8009bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bf4:	4a07      	ldr	r2, [pc, #28]	; (8009c14 <I2C2_MspDeInit+0x90>)
 8009bf6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009bfa:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C2 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8009bfc:	2021      	movs	r0, #33	; 0x21
 8009bfe:	f003 f848 	bl	800cc92 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8009c02:	2022      	movs	r0, #34	; 0x22
 8009c04:	f003 f845 	bl	800cc92 <HAL_NVIC_DisableIRQ>
  }
}
 8009c08:	bf00      	nop
 8009c0a:	3710      	adds	r7, #16
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	40005800 	.word	0x40005800
 8009c14:	40021000 	.word	0x40021000
 8009c18:	48001c00 	.word	0x48001c00
 8009c1c:	48000400 	.word	0x48000400

08009c20 <I2C2_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
static void I2C2_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 8009c20:	b590      	push	{r4, r7, lr}
 8009c22:	b089      	sub	sp, #36	; 0x24
 8009c24:	af04      	add	r7, sp, #16
 8009c26:	4604      	mov	r4, r0
 8009c28:	4608      	mov	r0, r1
 8009c2a:	4611      	mov	r1, r2
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	4623      	mov	r3, r4
 8009c30:	80fb      	strh	r3, [r7, #6]
 8009c32:	4603      	mov	r3, r0
 8009c34:	80bb      	strh	r3, [r7, #4]
 8009c36:	460b      	mov	r3, r1
 8009c38:	807b      	strh	r3, [r7, #2]
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c42:	b672      	cpsid	i
}
 8009c44:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 8009c46:	4b0d      	ldr	r3, [pc, #52]	; (8009c7c <I2C2_WriteData+0x5c>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	8878      	ldrh	r0, [r7, #2]
 8009c4c:	88ba      	ldrh	r2, [r7, #4]
 8009c4e:	88f9      	ldrh	r1, [r7, #6]
 8009c50:	9302      	str	r3, [sp, #8]
 8009c52:	2301      	movs	r3, #1
 8009c54:	9301      	str	r3, [sp, #4]
 8009c56:	1c7b      	adds	r3, r7, #1
 8009c58:	9300      	str	r3, [sp, #0]
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	4808      	ldr	r0, [pc, #32]	; (8009c80 <I2C2_WriteData+0x60>)
 8009c5e:	f003 ff21 	bl	800daa4 <HAL_I2C_Mem_Write>
 8009c62:	4603      	mov	r3, r0
 8009c64:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8009c66:	b662      	cpsie	i
}
 8009c68:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 8009c6a:	7bfb      	ldrb	r3, [r7, #15]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d001      	beq.n	8009c74 <I2C2_WriteData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8009c70:	f000 f890 	bl	8009d94 <I2C2_Error>
  }
}
 8009c74:	bf00      	nop
 8009c76:	3714      	adds	r7, #20
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd90      	pop	{r4, r7, pc}
 8009c7c:	20000530 	.word	0x20000530
 8009c80:	200011b4 	.word	0x200011b4

08009c84 <I2C2_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
static uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b088      	sub	sp, #32
 8009c88:	af04      	add	r7, sp, #16
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	80fb      	strh	r3, [r7, #6]
 8009c8e:	460b      	mov	r3, r1
 8009c90:	80bb      	strh	r3, [r7, #4]
 8009c92:	4613      	mov	r3, r2
 8009c94:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8009c96:	2300      	movs	r3, #0
 8009c98:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c9e:	b672      	cpsid	i
}
 8009ca0:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 8009ca2:	4b10      	ldr	r3, [pc, #64]	; (8009ce4 <I2C2_ReadData+0x60>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	8878      	ldrh	r0, [r7, #2]
 8009ca8:	88ba      	ldrh	r2, [r7, #4]
 8009caa:	88f9      	ldrh	r1, [r7, #6]
 8009cac:	9302      	str	r3, [sp, #8]
 8009cae:	2301      	movs	r3, #1
 8009cb0:	9301      	str	r3, [sp, #4]
 8009cb2:	f107 030e 	add.w	r3, r7, #14
 8009cb6:	9300      	str	r3, [sp, #0]
 8009cb8:	4603      	mov	r3, r0
 8009cba:	480b      	ldr	r0, [pc, #44]	; (8009ce8 <I2C2_ReadData+0x64>)
 8009cbc:	f004 f806 	bl	800dccc <HAL_I2C_Mem_Read>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8009cc4:	b662      	cpsie	i
}
 8009cc6:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d004      	beq.n	8009cd8 <I2C2_ReadData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8009cce:	f000 f861 	bl	8009d94 <I2C2_Error>
    HAL_Delay(200);
 8009cd2:	20c8      	movs	r0, #200	; 0xc8
 8009cd4:	f001 fc18 	bl	800b508 <HAL_Delay>
  }

  return value;
 8009cd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	20000530 	.word	0x20000530
 8009ce8:	200011b4 	.word	0x200011b4

08009cec <I2C2_isDeviceReady>:

static uint8_t I2C2_isDeviceReady(uint16_t Addr, uint32_t trial)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	6039      	str	r1, [r7, #0]
 8009cf6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d00:	b672      	cpsid	i
}
 8009d02:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 8009d04:	88f9      	ldrh	r1, [r7, #6]
 8009d06:	2332      	movs	r3, #50	; 0x32
 8009d08:	683a      	ldr	r2, [r7, #0]
 8009d0a:	480a      	ldr	r0, [pc, #40]	; (8009d34 <I2C2_isDeviceReady+0x48>)
 8009d0c:	f004 f8f8 	bl	800df00 <HAL_I2C_IsDeviceReady>
 8009d10:	4603      	mov	r3, r0
 8009d12:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8009d14:	b662      	cpsie	i
}
 8009d16:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8009d18:	7bfb      	ldrb	r3, [r7, #15]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d004      	beq.n	8009d28 <I2C2_isDeviceReady+0x3c>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8009d1e:	f000 f839 	bl	8009d94 <I2C2_Error>
    HAL_Delay(200);
 8009d22:	20c8      	movs	r0, #200	; 0xc8
 8009d24:	f001 fbf0 	bl	800b508 <HAL_Delay>
  }

  return value;
 8009d28:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	200011b4 	.word	0x200011b4

08009d38 <I2C2_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C2_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b08a      	sub	sp, #40	; 0x28
 8009d3c:	af04      	add	r7, sp, #16
 8009d3e:	607b      	str	r3, [r7, #4]
 8009d40:	4603      	mov	r3, r0
 8009d42:	81fb      	strh	r3, [r7, #14]
 8009d44:	460b      	mov	r3, r1
 8009d46:	81bb      	strh	r3, [r7, #12]
 8009d48:	4613      	mov	r3, r2
 8009d4a:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d50:	b672      	cpsid	i
}
 8009d52:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 8009d54:	4b0d      	ldr	r3, [pc, #52]	; (8009d8c <I2C2_ReadBuffer+0x54>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	8978      	ldrh	r0, [r7, #10]
 8009d5a:	89ba      	ldrh	r2, [r7, #12]
 8009d5c:	89f9      	ldrh	r1, [r7, #14]
 8009d5e:	9302      	str	r3, [sp, #8]
 8009d60:	8c3b      	ldrh	r3, [r7, #32]
 8009d62:	9301      	str	r3, [sp, #4]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	4603      	mov	r3, r0
 8009d6a:	4809      	ldr	r0, [pc, #36]	; (8009d90 <I2C2_ReadBuffer+0x58>)
 8009d6c:	f003 ffae 	bl	800dccc <HAL_I2C_Mem_Read>
 8009d70:	4603      	mov	r3, r0
 8009d72:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8009d74:	b662      	cpsie	i
}
 8009d76:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8009d78:	7dfb      	ldrb	r3, [r7, #23]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d001      	beq.n	8009d82 <I2C2_ReadBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8009d7e:	f000 f809 	bl	8009d94 <I2C2_Error>
  }

  return status;
 8009d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3718      	adds	r7, #24
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	20000530 	.word	0x20000530
 8009d90:	200011b4 	.word	0x200011b4

08009d94 <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	af00      	add	r7, sp, #0
  BSP_ErrorHandler();
 8009d98:	f7ff fda1 	bl	80098de <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 8009d9c:	4803      	ldr	r0, [pc, #12]	; (8009dac <I2C2_Error+0x18>)
 8009d9e:	f003 fc68 	bl	800d672 <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
 8009da2:	f7ff fe31 	bl	8009a08 <I2C2_Init>
}
 8009da6:	bf00      	nop
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	200011b4 	.word	0x200011b4

08009db0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]

  if (HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f004 f9a8 	bl	800e10e <HAL_I2C_GetState>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d132      	bne.n	8009e2a <I2Cx_Init+0x7a>
  {
    if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cTSHandler))
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	4a1b      	ldr	r2, [pc, #108]	; (8009e34 <I2Cx_Init+0x84>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d103      	bne.n	8009dd4 <I2Cx_Init+0x24>
    {
      /* TS (Capacitive Touch Panel) and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_TS_I2Cx;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a1a      	ldr	r2, [pc, #104]	; (8009e38 <I2Cx_Init+0x88>)
 8009dd0:	601a      	str	r2, [r3, #0]
 8009dd2:	e012      	b.n	8009dfa <I2Cx_Init+0x4a>

      /* Need to enable MFX, and in doing so, initialize I2C at the same time */
      /* MFX_IO_Init();*/

    }
    else if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cAudioHandler))
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a19      	ldr	r2, [pc, #100]	; (8009e3c <I2Cx_Init+0x8c>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d103      	bne.n	8009de4 <I2Cx_Init+0x34>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4a18      	ldr	r2, [pc, #96]	; (8009e40 <I2Cx_Init+0x90>)
 8009de0:	601a      	str	r2, [r3, #0]
 8009de2:	e00a      	b.n	8009dfa <I2Cx_Init+0x4a>
    }
    else if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cCameraHandler))
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4a17      	ldr	r2, [pc, #92]	; (8009e44 <I2Cx_Init+0x94>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d103      	bne.n	8009df4 <I2Cx_Init+0x44>
    {
      i2c_handler->Instance = DISCOVERY_CAMERA_I2Cx;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4a12      	ldr	r2, [pc, #72]	; (8009e38 <I2Cx_Init+0x88>)
 8009df0:	601a      	str	r2, [r3, #0]
 8009df2:	e002      	b.n	8009dfa <I2Cx_Init+0x4a>
    }
    else
    {
      /* External, EEPROM and Arduino connector I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a10      	ldr	r2, [pc, #64]	; (8009e38 <I2Cx_Init+0x88>)
 8009df8:	601a      	str	r2, [r3, #0]
    }

    i2c_handler->Init.Timing           = DISCOVERY_I2C_TIMING;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a12      	ldr	r2, [pc, #72]	; (8009e48 <I2Cx_Init+0x98>)
 8009dfe:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0x70;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2270      	movs	r2, #112	; 0x70
 8009e04:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0xFF;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	22ff      	movs	r2, #255	; 0xff
 8009e16:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	621a      	str	r2, [r3, #32]


    /* Init the I2C */
    HAL_I2C_Init(i2c_handler);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f003 fb95 	bl	800d554 <HAL_I2C_Init>

  }

}
 8009e2a:	bf00      	nop
 8009e2c:	3708      	adds	r7, #8
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	20001208 	.word	0x20001208
 8009e38:	40005800 	.word	0x40005800
 8009e3c:	2000125c 	.word	0x2000125c
 8009e40:	40005400 	.word	0x40005400
 8009e44:	200012b0 	.word	0x200012b0
 8009e48:	90112626 	.word	0x90112626

08009e4c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b08a      	sub	sp, #40	; 0x28
 8009e50:	af04      	add	r7, sp, #16
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	4608      	mov	r0, r1
 8009e56:	4611      	mov	r1, r2
 8009e58:	461a      	mov	r2, r3
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	72fb      	strb	r3, [r7, #11]
 8009e5e:	460b      	mov	r3, r1
 8009e60:	813b      	strh	r3, [r7, #8]
 8009e62:	4613      	mov	r3, r2
 8009e64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009e66:	2300      	movs	r3, #0
 8009e68:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009e6a:	7afb      	ldrb	r3, [r7, #11]
 8009e6c:	b299      	uxth	r1, r3
 8009e6e:	88f8      	ldrh	r0, [r7, #6]
 8009e70:	893a      	ldrh	r2, [r7, #8]
 8009e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009e76:	9302      	str	r3, [sp, #8]
 8009e78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e7a:	9301      	str	r3, [sp, #4]
 8009e7c:	6a3b      	ldr	r3, [r7, #32]
 8009e7e:	9300      	str	r3, [sp, #0]
 8009e80:	4603      	mov	r3, r0
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	f003 ff22 	bl	800dccc <HAL_I2C_Mem_Read>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8009e8c:	7dfb      	ldrb	r3, [r7, #23]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d004      	beq.n	8009e9c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8009e92:	7afb      	ldrb	r3, [r7, #11]
 8009e94:	4619      	mov	r1, r3
 8009e96:	68f8      	ldr	r0, [r7, #12]
 8009e98:	f000 f832 	bl	8009f00 <I2Cx_Error>
  }
  return status;
 8009e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3718      	adds	r7, #24
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}

08009ea6 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8009ea6:	b580      	push	{r7, lr}
 8009ea8:	b08a      	sub	sp, #40	; 0x28
 8009eaa:	af04      	add	r7, sp, #16
 8009eac:	60f8      	str	r0, [r7, #12]
 8009eae:	4608      	mov	r0, r1
 8009eb0:	4611      	mov	r1, r2
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	72fb      	strb	r3, [r7, #11]
 8009eb8:	460b      	mov	r3, r1
 8009eba:	813b      	strh	r3, [r7, #8]
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009ec4:	7afb      	ldrb	r3, [r7, #11]
 8009ec6:	b299      	uxth	r1, r3
 8009ec8:	88f8      	ldrh	r0, [r7, #6]
 8009eca:	893a      	ldrh	r2, [r7, #8]
 8009ecc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009ed0:	9302      	str	r3, [sp, #8]
 8009ed2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ed4:	9301      	str	r3, [sp, #4]
 8009ed6:	6a3b      	ldr	r3, [r7, #32]
 8009ed8:	9300      	str	r3, [sp, #0]
 8009eda:	4603      	mov	r3, r0
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f003 fde1 	bl	800daa4 <HAL_I2C_Mem_Write>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8009ee6:	7dfb      	ldrb	r3, [r7, #23]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d004      	beq.n	8009ef6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initialize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8009eec:	7afb      	ldrb	r3, [r7, #11]
 8009eee:	4619      	mov	r1, r3
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f000 f805 	bl	8009f00 <I2Cx_Error>
  }
  return status;
 8009ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3718      	adds	r7, #24
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	460b      	mov	r3, r1
 8009f0a:	70fb      	strb	r3, [r7, #3]
  BSP_ErrorHandler();
 8009f0c:	f7ff fce7 	bl	80098de <BSP_ErrorHandler>

  /* De-initialize the I2C communication bus */
  if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cTSHandler))
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4a08      	ldr	r2, [pc, #32]	; (8009f34 <I2Cx_Error+0x34>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d102      	bne.n	8009f1e <I2Cx_Error+0x1e>
  {
    I2C2_DeInit();
 8009f18:	f7ff fe22 	bl	8009b60 <I2C2_DeInit>
 8009f1c:	e002      	b.n	8009f24 <I2Cx_Error+0x24>
  }
  else
  {
    HAL_I2C_DeInit(i2c_handler);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f003 fba7 	bl	800d672 <HAL_I2C_DeInit>
  }

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f7ff ff43 	bl	8009db0 <I2Cx_Init>
}
 8009f2a:	bf00      	nop
 8009f2c:	3708      	adds	r7, #8
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	20001208 	.word	0x20001208

08009f38 <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	af00      	add	r7, sp, #0
  /* I2C2 init */
  I2C2_Init();
 8009f3c:	f7ff fd64 	bl	8009a08 <I2C2_Init>

  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
 8009f40:	2104      	movs	r1, #4
 8009f42:	2084      	movs	r0, #132	; 0x84
 8009f44:	f7ff fed2 	bl	8009cec <I2C2_isDeviceReady>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d001      	beq.n	8009f52 <MFX_IO_Init+0x1a>
  {
    BSP_ErrorHandler();
 8009f4e:	f7ff fcc6 	bl	80098de <BSP_ErrorHandler>
  }
}
 8009f52:	bf00      	nop
 8009f54:	bd80      	pop	{r7, pc}
	...

08009f58 <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b088      	sub	sp, #32
 8009f5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 8009f5e:	4b19      	ldr	r3, [pc, #100]	; (8009fc4 <MFX_IO_DeInit+0x6c>)
 8009f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f62:	4a18      	ldr	r2, [pc, #96]	; (8009fc4 <MFX_IO_DeInit+0x6c>)
 8009f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f6a:	4b16      	ldr	r3, [pc, #88]	; (8009fc4 <MFX_IO_DeInit+0x6c>)
 8009f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f72:	60bb      	str	r3, [r7, #8]
 8009f74:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8009f76:	2340      	movs	r3, #64	; 0x40
 8009f78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 8009f82:	2302      	movs	r3, #2
 8009f84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 8009f86:	f107 030c 	add.w	r3, r7, #12
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	480e      	ldr	r0, [pc, #56]	; (8009fc8 <MFX_IO_DeInit+0x70>)
 8009f8e:	f003 f82d 	bl	800cfec <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 8009f92:	2017      	movs	r0, #23
 8009f94:	f002 fe7d 	bl	800cc92 <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 8009f98:	4b0a      	ldr	r3, [pc, #40]	; (8009fc4 <MFX_IO_DeInit+0x6c>)
 8009f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f9c:	4a09      	ldr	r2, [pc, #36]	; (8009fc4 <MFX_IO_DeInit+0x6c>)
 8009f9e:	f043 0304 	orr.w	r3, r3, #4
 8009fa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009fa4:	4b07      	ldr	r3, [pc, #28]	; (8009fc4 <MFX_IO_DeInit+0x6c>)
 8009fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fa8:	f003 0304 	and.w	r3, r3, #4
 8009fac:	607b      	str	r3, [r7, #4]
 8009fae:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 8009fb0:	2120      	movs	r1, #32
 8009fb2:	4806      	ldr	r0, [pc, #24]	; (8009fcc <MFX_IO_DeInit+0x74>)
 8009fb4:	f003 f9ac 	bl	800d310 <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 8009fb8:	f7ff fdd2 	bl	8009b60 <I2C2_DeInit>
}
 8009fbc:	bf00      	nop
 8009fbe:	3720      	adds	r7, #32
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	40021000 	.word	0x40021000
 8009fc8:	48001c00 	.word	0x48001c00
 8009fcc:	48000800 	.word	0x48000800

08009fd0 <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b086      	sub	sp, #24
 8009fd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 8009fd6:	4b13      	ldr	r3, [pc, #76]	; (800a024 <MFX_IO_ITConfig+0x54>)
 8009fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fda:	4a12      	ldr	r2, [pc, #72]	; (800a024 <MFX_IO_ITConfig+0x54>)
 8009fdc:	f043 0304 	orr.w	r3, r3, #4
 8009fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009fe2:	4b10      	ldr	r3, [pc, #64]	; (800a024 <MFX_IO_ITConfig+0x54>)
 8009fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fe6:	f003 0304 	and.w	r3, r3, #4
 8009fea:	603b      	str	r3, [r7, #0]
 8009fec:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 8009fee:	2320      	movs	r3, #32
 8009ff0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 8009ffa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8009ffe:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 800a000:	1d3b      	adds	r3, r7, #4
 800a002:	4619      	mov	r1, r3
 800a004:	4808      	ldr	r0, [pc, #32]	; (800a028 <MFX_IO_ITConfig+0x58>)
 800a006:	f002 fff1 	bl	800cfec <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 800a00a:	220f      	movs	r2, #15
 800a00c:	210f      	movs	r1, #15
 800a00e:	2017      	movs	r0, #23
 800a010:	f002 fe15 	bl	800cc3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 800a014:	2017      	movs	r0, #23
 800a016:	f002 fe2e 	bl	800cc76 <HAL_NVIC_EnableIRQ>
}
 800a01a:	bf00      	nop
 800a01c:	3718      	adds	r7, #24
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	40021000 	.word	0x40021000
 800a028:	48000800 	.word	0x48000800

0800a02c <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b086      	sub	sp, #24
 800a030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 800a032:	4b0e      	ldr	r3, [pc, #56]	; (800a06c <MFX_IO_EnableWakeupPin+0x40>)
 800a034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a036:	4a0d      	ldr	r2, [pc, #52]	; (800a06c <MFX_IO_EnableWakeupPin+0x40>)
 800a038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a03c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a03e:	4b0b      	ldr	r3, [pc, #44]	; (800a06c <MFX_IO_EnableWakeupPin+0x40>)
 800a040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a046:	603b      	str	r3, [r7, #0]
 800a048:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 800a04a:	2340      	movs	r3, #64	; 0x40
 800a04c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800a04e:	2301      	movs	r3, #1
 800a050:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a052:	2302      	movs	r3, #2
 800a054:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800a056:	2300      	movs	r3, #0
 800a058:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 800a05a:	1d3b      	adds	r3, r7, #4
 800a05c:	4619      	mov	r1, r3
 800a05e:	4804      	ldr	r0, [pc, #16]	; (800a070 <MFX_IO_EnableWakeupPin+0x44>)
 800a060:	f002 ffc4 	bl	800cfec <HAL_GPIO_Init>
}
 800a064:	bf00      	nop
 800a066:	3718      	adds	r7, #24
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	40021000 	.word	0x40021000
 800a070:	48001c00 	.word	0x48001c00

0800a074 <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 800a078:	2201      	movs	r2, #1
 800a07a:	2140      	movs	r1, #64	; 0x40
 800a07c:	4806      	ldr	r0, [pc, #24]	; (800a098 <MFX_IO_Wakeup+0x24>)
 800a07e:	f003 fa39 	bl	800d4f4 <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 800a082:	2001      	movs	r0, #1
 800a084:	f001 fa40 	bl	800b508 <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 800a088:	2200      	movs	r2, #0
 800a08a:	2140      	movs	r1, #64	; 0x40
 800a08c:	4802      	ldr	r0, [pc, #8]	; (800a098 <MFX_IO_Wakeup+0x24>)
 800a08e:	f003 fa31 	bl	800d4f4 <HAL_GPIO_WritePin>
}
 800a092:	bf00      	nop
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	48001c00 	.word	0x48001c00

0800a09c <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	80fb      	strh	r3, [r7, #6]
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	717b      	strb	r3, [r7, #5]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	713b      	strb	r3, [r7, #4]
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 800a0ae:	797b      	ldrb	r3, [r7, #5]
 800a0b0:	b299      	uxth	r1, r3
 800a0b2:	793b      	ldrb	r3, [r7, #4]
 800a0b4:	88f8      	ldrh	r0, [r7, #6]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f7ff fdb2 	bl	8009c20 <I2C2_WriteData>
}
 800a0bc:	bf00      	nop
 800a0be:	3708      	adds	r7, #8
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	460a      	mov	r2, r1
 800a0ce:	80fb      	strh	r3, [r7, #6]
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	717b      	strb	r3, [r7, #5]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 800a0d4:	797b      	ldrb	r3, [r7, #5]
 800a0d6:	b299      	uxth	r1, r3
 800a0d8:	88fb      	ldrh	r3, [r7, #6]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f7ff fdd1 	bl	8009c84 <I2C2_ReadData>
 800a0e2:	4603      	mov	r3, r0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af02      	add	r7, sp, #8
 800a0f2:	60ba      	str	r2, [r7, #8]
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	81fb      	strh	r3, [r7, #14]
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	737b      	strb	r3, [r7, #13]
 800a0fe:	4613      	mov	r3, r2
 800a100:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800a102:	7b7b      	ldrb	r3, [r7, #13]
 800a104:	b299      	uxth	r1, r3
 800a106:	89f8      	ldrh	r0, [r7, #14]
 800a108:	88fb      	ldrh	r3, [r7, #6]
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	2201      	movs	r2, #1
 800a110:	f7ff fe12 	bl	8009d38 <I2C2_ReadBuffer>
 800a114:	4603      	mov	r3, r0
 800a116:	b29b      	uxth	r3, r3
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3710      	adds	r7, #16
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f001 f9ed 	bl	800b508 <HAL_Delay>
}
 800a12e:	bf00      	nop
 800a130:	3708      	adds	r7, #8
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
	...

0800a138 <FMC_BANK1_MspInit>:
  * @brief  Initializes FMC_BANK1_LCD_IO MSP.
  * @param  None
  * @retval None
  */
void FMC_BANK1_MspInit(void)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b08c      	sub	sp, #48	; 0x30
 800a13c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_Init_Structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800a13e:	4b38      	ldr	r3, [pc, #224]	; (800a220 <FMC_BANK1_MspInit+0xe8>)
 800a140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a142:	4a37      	ldr	r2, [pc, #220]	; (800a220 <FMC_BANK1_MspInit+0xe8>)
 800a144:	f043 0301 	orr.w	r3, r3, #1
 800a148:	6513      	str	r3, [r2, #80]	; 0x50
 800a14a:	4b35      	ldr	r3, [pc, #212]	; (800a220 <FMC_BANK1_MspInit+0xe8>)
 800a14c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a14e:	f003 0301 	and.w	r3, r3, #1
 800a152:	61bb      	str	r3, [r7, #24]
 800a154:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a156:	4b32      	ldr	r3, [pc, #200]	; (800a220 <FMC_BANK1_MspInit+0xe8>)
 800a158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a15a:	4a31      	ldr	r2, [pc, #196]	; (800a220 <FMC_BANK1_MspInit+0xe8>)
 800a15c:	f043 0308 	orr.w	r3, r3, #8
 800a160:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a162:	4b2f      	ldr	r3, [pc, #188]	; (800a220 <FMC_BANK1_MspInit+0xe8>)
 800a164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a166:	f003 0308 	and.w	r3, r3, #8
 800a16a:	617b      	str	r3, [r7, #20]
 800a16c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a16e:	4b2c      	ldr	r3, [pc, #176]	; (800a220 <FMC_BANK1_MspInit+0xe8>)
 800a170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a172:	4a2b      	ldr	r2, [pc, #172]	; (800a220 <FMC_BANK1_MspInit+0xe8>)
 800a174:	f043 0310 	orr.w	r3, r3, #16
 800a178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a17a:	4b29      	ldr	r3, [pc, #164]	; (800a220 <FMC_BANK1_MspInit+0xe8>)
 800a17c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a17e:	f003 0310 	and.w	r3, r3, #16
 800a182:	613b      	str	r3, [r7, #16]
 800a184:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a186:	4b26      	ldr	r3, [pc, #152]	; (800a220 <FMC_BANK1_MspInit+0xe8>)
 800a188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a18a:	4a25      	ldr	r2, [pc, #148]	; (800a220 <FMC_BANK1_MspInit+0xe8>)
 800a18c:	f043 0320 	orr.w	r3, r3, #32
 800a190:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a192:	4b23      	ldr	r3, [pc, #140]	; (800a220 <FMC_BANK1_MspInit+0xe8>)
 800a194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a196:	f003 0320 	and.w	r3, r3, #32
 800a19a:	60fb      	str	r3, [r7, #12]
 800a19c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a19e:	4b20      	ldr	r3, [pc, #128]	; (800a220 <FMC_BANK1_MspInit+0xe8>)
 800a1a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1a2:	4a1f      	ldr	r2, [pc, #124]	; (800a220 <FMC_BANK1_MspInit+0xe8>)
 800a1a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a1aa:	4b1d      	ldr	r3, [pc, #116]	; (800a220 <FMC_BANK1_MspInit+0xe8>)
 800a1ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1b2:	60bb      	str	r3, [r7, #8]
 800a1b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a1b6:	4b1a      	ldr	r3, [pc, #104]	; (800a220 <FMC_BANK1_MspInit+0xe8>)
 800a1b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1ba:	4a19      	ldr	r2, [pc, #100]	; (800a220 <FMC_BANK1_MspInit+0xe8>)
 800a1bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1c0:	6593      	str	r3, [r2, #88]	; 0x58
 800a1c2:	4b17      	ldr	r3, [pc, #92]	; (800a220 <FMC_BANK1_MspInit+0xe8>)
 800a1c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1ca:	607b      	str	r3, [r7, #4]
 800a1cc:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800a1ce:	f005 fddb 	bl	800fd88 <HAL_PWREx_EnableVddIO2>

  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 800a1d2:	2302      	movs	r3, #2
 800a1d4:	623b      	str	r3, [r7, #32]
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1da:	2303      	movs	r3, #3
 800a1dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Alternate = GPIO_AF12_FMC;
 800a1de:	230c      	movs	r3, #12
 800a1e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* GPIOD configuration */ /* GPIO_PIN_7 is  FMC_NE1 */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | \
 800a1e2:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800a1e6:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7;

  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 800a1e8:	f107 031c 	add.w	r3, r7, #28
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	480d      	ldr	r0, [pc, #52]	; (800a224 <FMC_BANK1_MspInit+0xec>)
 800a1f0:	f002 fefc 	bl	800cfec <HAL_GPIO_Init>




  /* GPIOE configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_7     | \
 800a1f4:	f64f 7380 	movw	r3, #65408	; 0xff80
 800a1f8:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | \
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 800a1fa:	f107 031c 	add.w	r3, r7, #28
 800a1fe:	4619      	mov	r1, r3
 800a200:	4809      	ldr	r0, [pc, #36]	; (800a228 <FMC_BANK1_MspInit+0xf0>)
 800a202:	f002 fef3 	bl	800cfec <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_13 ;
 800a206:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a20a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 800a20c:	f107 031c 	add.w	r3, r7, #28
 800a210:	4619      	mov	r1, r3
 800a212:	4804      	ldr	r0, [pc, #16]	; (800a224 <FMC_BANK1_MspInit+0xec>)
 800a214:	f002 feea 	bl	800cfec <HAL_GPIO_Init>

}
 800a218:	bf00      	nop
 800a21a:	3730      	adds	r7, #48	; 0x30
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	40021000 	.word	0x40021000
 800a224:	48000c00 	.word	0x48000c00
 800a228:	48001000 	.word	0x48001000

0800a22c <FMC_BANK1_Init>:
  * @brief  Initializes LCD IO.
  * @param  None
  * @retval None
  */
void FMC_BANK1_Init(void)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b0a4      	sub	sp, #144	; 0x90
 800a230:	af00      	add	r7, sp, #0
  FMC_NORSRAM_TimingTypeDef sram_timing;
  FMC_NORSRAM_TimingTypeDef sram_timing_write;

  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FMC_NORSRAM_DEVICE;
 800a232:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800a236:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Extended  = FMC_NORSRAM_EXTENDED_DEVICE;
 800a238:	4b26      	ldr	r3, [pc, #152]	; (800a2d4 <FMC_BANK1_Init+0xa8>)
 800a23a:	647b      	str	r3, [r7, #68]	; 0x44


  /* Timing for READING */

  sram_timing.AddressSetupTime       = 1;
 800a23c:	2301      	movs	r3, #1
 800a23e:	623b      	str	r3, [r7, #32]
  sram_timing.AddressHoldTime        = 1;
 800a240:	2301      	movs	r3, #1
 800a242:	627b      	str	r3, [r7, #36]	; 0x24
  sram_timing.DataSetupTime          = 1;
 800a244:	2301      	movs	r3, #1
 800a246:	62bb      	str	r3, [r7, #40]	; 0x28
  sram_timing.BusTurnAroundDuration  = 0;
 800a248:	2300      	movs	r3, #0
 800a24a:	633b      	str	r3, [r7, #48]	; 0x30
  sram_timing.CLKDivision            = 2;
 800a24c:	2302      	movs	r3, #2
 800a24e:	637b      	str	r3, [r7, #52]	; 0x34
  sram_timing.DataLatency            = 2;
 800a250:	2302      	movs	r3, #2
 800a252:	63bb      	str	r3, [r7, #56]	; 0x38
  sram_timing.AccessMode             = FMC_ACCESS_MODE_A;
 800a254:	2300      	movs	r3, #0
 800a256:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Timing for WRITING */
  sram_timing_write.AddressSetupTime      = 5;
 800a258:	2305      	movs	r3, #5
 800a25a:	603b      	str	r3, [r7, #0]
  sram_timing_write.AddressHoldTime       = 1;
 800a25c:	2301      	movs	r3, #1
 800a25e:	607b      	str	r3, [r7, #4]
  sram_timing_write.DataSetupTime         = 3;
 800a260:	2303      	movs	r3, #3
 800a262:	60bb      	str	r3, [r7, #8]
  sram_timing_write.BusTurnAroundDuration = 2;
 800a264:	2302      	movs	r3, #2
 800a266:	613b      	str	r3, [r7, #16]
  sram_timing_write.CLKDivision           = 2;
 800a268:	2302      	movs	r3, #2
 800a26a:	617b      	str	r3, [r7, #20]
  sram_timing_write.DataLatency           = 2;
 800a26c:	2302      	movs	r3, #2
 800a26e:	61bb      	str	r3, [r7, #24]
  sram_timing_write.AccessMode            = FMC_ACCESS_MODE_A;
 800a270:	2300      	movs	r3, #0
 800a272:	61fb      	str	r3, [r7, #28]


  hsram.Init.NSBank             = FMC_NORSRAM_BANK1;
 800a274:	2300      	movs	r3, #0
 800a276:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.DataAddressMux     = FMC_DATA_ADDRESS_MUX_DISABLE;
 800a278:	2300      	movs	r3, #0
 800a27a:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.MemoryType         = FMC_MEMORY_TYPE_SRAM;
 800a27c:	2300      	movs	r3, #0
 800a27e:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.MemoryDataWidth    = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800a280:	2310      	movs	r3, #16
 800a282:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.BurstAccessMode    = FMC_BURST_ACCESS_MODE_DISABLE;
 800a284:	2300      	movs	r3, #0
 800a286:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800a288:	2300      	movs	r3, #0
 800a28a:	65fb      	str	r3, [r7, #92]	; 0x5c
  hsram.Init.WaitSignalActive   = FMC_WAIT_TIMING_BEFORE_WS;
 800a28c:	2300      	movs	r3, #0
 800a28e:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.WriteOperation     = FMC_WRITE_OPERATION_ENABLE;
 800a290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a294:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.WaitSignal         = FMC_WAIT_SIGNAL_DISABLE;
 800a296:	2300      	movs	r3, #0
 800a298:	66bb      	str	r3, [r7, #104]	; 0x68
  hsram.Init.ExtendedMode       = FMC_EXTENDED_MODE_DISABLE;
 800a29a:	2300      	movs	r3, #0
 800a29c:	66fb      	str	r3, [r7, #108]	; 0x6c
  hsram.Init.AsynchronousWait   = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	673b      	str	r3, [r7, #112]	; 0x70
  hsram.Init.WriteBurst         = FMC_WRITE_BURST_DISABLE;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	677b      	str	r3, [r7, #116]	; 0x74
  hsram.Init.PageSize           = FMC_PAGE_SIZE_NONE;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  hsram.Init.WriteFifo          = FMC_WRITE_FIFO_DISABLE;
 800a2ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a2b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  hsram.Init.ContinuousClock    = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	67bb      	str	r3, [r7, #120]	; 0x78
  /* Initialize the SRAM controller */
  FMC_BANK1_MspInit();
 800a2b6:	f7ff ff3f 	bl	800a138 <FMC_BANK1_MspInit>
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing_write);
 800a2ba:	463a      	mov	r2, r7
 800a2bc:	f107 0120 	add.w	r1, r7, #32
 800a2c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f009 f88c 	bl	80133e2 <HAL_SRAM_Init>

}
 800a2ca:	bf00      	nop
 800a2cc:	3790      	adds	r7, #144	; 0x90
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	a0000104 	.word	0xa0000104

0800a2d8 <FMC_BANK1_WriteData>:
  * @brief  Writes register value.
  * @param  Data: Data to be written
  * @retval None
  */
static void FMC_BANK1_WriteData(uint16_t Data)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	4603      	mov	r3, r0
 800a2e0:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  LCD_ADDR->REG = Data;
 800a2e2:	4a04      	ldr	r2, [pc, #16]	; (800a2f4 <FMC_BANK1_WriteData+0x1c>)
 800a2e4:	88fb      	ldrh	r3, [r7, #6]
 800a2e6:	8013      	strh	r3, [r2, #0]
}
 800a2e8:	bf00      	nop
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr
 800a2f4:	60080000 	.word	0x60080000

0800a2f8 <FMC_BANK1_WriteReg>:
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  * @retval None
  */
static void FMC_BANK1_WriteReg(uint8_t Reg)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	4603      	mov	r3, r0
 800a300:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK1_ADDR->REG = Reg;
 800a302:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800a306:	79fa      	ldrb	r2, [r7, #7]
 800a308:	b292      	uxth	r2, r2
 800a30a:	801a      	strh	r2, [r3, #0]
}
 800a30c:	bf00      	nop
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <FMC_BANK1_ReadData>:
  * @brief  Reads register value.
  * @param  None
  * @retval Read value
  */
static uint16_t FMC_BANK1_ReadData(void)
{
 800a318:	b480      	push	{r7}
 800a31a:	af00      	add	r7, sp, #0
  return LCD_ADDR->REG;
 800a31c:	4b03      	ldr	r3, [pc, #12]	; (800a32c <FMC_BANK1_ReadData+0x14>)
 800a31e:	881b      	ldrh	r3, [r3, #0]
 800a320:	b29b      	uxth	r3, r3
}
 800a322:	4618      	mov	r0, r3
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr
 800a32c:	60080000 	.word	0x60080000

0800a330 <LCD_IO_Init>:
  * @brief  Initializes LCD low level.
  * @param  None
  * @retval None
  */
void LCD_IO_Init(void)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	af00      	add	r7, sp, #0
  FMC_BANK1_Init();
 800a334:	f7ff ff7a 	bl	800a22c <FMC_BANK1_Init>
}
 800a338:	bf00      	nop
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <LCD_IO_WriteData>:
  * @brief  Writes data on LCD data register.
  * @param  Data: Data to be written
  * @retval None
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	4603      	mov	r3, r0
 800a344:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1_WriteData(RegValue);
 800a346:	88fb      	ldrh	r3, [r7, #6]
 800a348:	4618      	mov	r0, r3
 800a34a:	f7ff ffc5 	bl	800a2d8 <FMC_BANK1_WriteData>
}
 800a34e:	bf00      	nop
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <LCD_IO_WriteReg>:
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b082      	sub	sp, #8
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	4603      	mov	r3, r0
 800a35e:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK1_WriteReg(Reg);
 800a360:	79fb      	ldrb	r3, [r7, #7]
 800a362:	4618      	mov	r0, r3
 800a364:	f7ff ffc8 	bl	800a2f8 <FMC_BANK1_WriteReg>
}
 800a368:	bf00      	nop
 800a36a:	3708      	adds	r7, #8
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <LCD_IO_ReadData>:
  * @brief  Reads data from LCD data register.
  * @param  None
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	af00      	add	r7, sp, #0
  return FMC_BANK1_ReadData();
 800a374:	f7ff ffd0 	bl	800a318 <FMC_BANK1_ReadData>
 800a378:	4603      	mov	r3, r0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <LCD_IO_Delay>:
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void LCD_IO_Delay(uint32_t Delay)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b082      	sub	sp, #8
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f001 f8be 	bl	800b508 <HAL_Delay>
}
 800a38c:	bf00      	nop
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cTSHandler);
 800a398:	4812      	ldr	r0, [pc, #72]	; (800a3e4 <TS_IO_Init+0x50>)
 800a39a:	f7ff fd09 	bl	8009db0 <I2Cx_Init>

  if (ts_io_init == 0)
 800a39e:	4b12      	ldr	r3, [pc, #72]	; (800a3e8 <TS_IO_Init+0x54>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d11b      	bne.n	800a3de <TS_IO_Init+0x4a>
  {
    if (BSP_LCD_Init() == LCD_ERROR)
 800a3a6:	f000 f8eb 	bl	800a580 <BSP_LCD_Init>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d101      	bne.n	800a3b4 <TS_IO_Init+0x20>
    {
      BSP_ErrorHandler();
 800a3b0:	f7ff fa95 	bl	80098de <BSP_ErrorHandler>
    }

    BSP_IO_ConfigPin(TS_RST_PIN, IO_MODE_OUTPUT);
 800a3b4:	2101      	movs	r1, #1
 800a3b6:	2002      	movs	r0, #2
 800a3b8:	f000 f8aa 	bl	800a510 <BSP_IO_ConfigPin>

    BSP_IO_WritePin(TS_RST_PIN, GPIO_PIN_RESET);
 800a3bc:	2100      	movs	r1, #0
 800a3be:	2002      	movs	r0, #2
 800a3c0:	f000 f8c2 	bl	800a548 <BSP_IO_WritePin>
    HAL_Delay(10);
 800a3c4:	200a      	movs	r0, #10
 800a3c6:	f001 f89f 	bl	800b508 <HAL_Delay>
    BSP_IO_WritePin(TS_RST_PIN, GPIO_PIN_SET);
 800a3ca:	2101      	movs	r1, #1
 800a3cc:	2002      	movs	r0, #2
 800a3ce:	f000 f8bb 	bl	800a548 <BSP_IO_WritePin>
    HAL_Delay(200);
 800a3d2:	20c8      	movs	r0, #200	; 0xc8
 800a3d4:	f001 f898 	bl	800b508 <HAL_Delay>

    ts_io_init = 1;
 800a3d8:	4b03      	ldr	r3, [pc, #12]	; (800a3e8 <TS_IO_Init+0x54>)
 800a3da:	2201      	movs	r2, #1
 800a3dc:	601a      	str	r2, [r3, #0]
  }
}
 800a3de:	bf00      	nop
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	20001208 	.word	0x20001208
 800a3e8:	200011b0 	.word	0x200011b0

0800a3ec <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af02      	add	r7, sp, #8
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	71fb      	strb	r3, [r7, #7]
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	71bb      	strb	r3, [r7, #6]
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cTSHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&Value, 1);
 800a3fe:	79bb      	ldrb	r3, [r7, #6]
 800a400:	b29a      	uxth	r2, r3
 800a402:	79f9      	ldrb	r1, [r7, #7]
 800a404:	2301      	movs	r3, #1
 800a406:	9301      	str	r3, [sp, #4]
 800a408:	1d7b      	adds	r3, r7, #5
 800a40a:	9300      	str	r3, [sp, #0]
 800a40c:	2301      	movs	r3, #1
 800a40e:	4803      	ldr	r0, [pc, #12]	; (800a41c <TS_IO_Write+0x30>)
 800a410:	f7ff fd49 	bl	8009ea6 <I2Cx_WriteMultiple>
}
 800a414:	bf00      	nop
 800a416:	3708      	adds	r7, #8
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	20001208 	.word	0x20001208

0800a420 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	4603      	mov	r3, r0
 800a428:	460a      	mov	r2, r1
 800a42a:	71fb      	strb	r3, [r7, #7]
 800a42c:	4613      	mov	r3, r2
 800a42e:	71bb      	strb	r3, [r7, #6]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 800a430:	79fb      	ldrb	r3, [r7, #7]
 800a432:	b29b      	uxth	r3, r3
 800a434:	79ba      	ldrb	r2, [r7, #6]
 800a436:	b291      	uxth	r1, r2
 800a438:	2201      	movs	r2, #1
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7ff fc22 	bl	8009c84 <I2C2_ReadData>
 800a440:	4603      	mov	r3, r0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3708      	adds	r7, #8
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
	...

0800a44c <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af02      	add	r7, sp, #8
 800a452:	603a      	str	r2, [r7, #0]
 800a454:	461a      	mov	r2, r3
 800a456:	4603      	mov	r3, r0
 800a458:	71fb      	strb	r3, [r7, #7]
 800a45a:	460b      	mov	r3, r1
 800a45c:	71bb      	strb	r3, [r7, #6]
 800a45e:	4613      	mov	r3, r2
 800a460:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadMultiple(&hI2cTSHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800a462:	79bb      	ldrb	r3, [r7, #6]
 800a464:	b29a      	uxth	r2, r3
 800a466:	79f9      	ldrb	r1, [r7, #7]
 800a468:	88bb      	ldrh	r3, [r7, #4]
 800a46a:	9301      	str	r3, [sp, #4]
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	9300      	str	r3, [sp, #0]
 800a470:	2301      	movs	r3, #1
 800a472:	4804      	ldr	r0, [pc, #16]	; (800a484 <TS_IO_ReadMultiple+0x38>)
 800a474:	f7ff fcea 	bl	8009e4c <I2Cx_ReadMultiple>
 800a478:	4603      	mov	r3, r0
 800a47a:	b29b      	uxth	r3, r3
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3708      	adds	r7, #8
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	20001208 	.word	0x20001208

0800a488 <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 800a48e:	2301      	movs	r3, #1
 800a490:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 800a492:	2300      	movs	r3, #0
 800a494:	71bb      	strb	r3, [r7, #6]

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 800a496:	4b1a      	ldr	r3, [pc, #104]	; (800a500 <BSP_IO_Init+0x78>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d128      	bne.n	800a4f0 <BSP_IO_Init+0x68>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 800a49e:	4b19      	ldr	r3, [pc, #100]	; (800a504 <BSP_IO_Init+0x7c>)
 800a4a0:	695b      	ldr	r3, [r3, #20]
 800a4a2:	2084      	movs	r0, #132	; 0x84
 800a4a4:	4798      	blx	r3

    HAL_Delay(10);
 800a4a6:	200a      	movs	r0, #10
 800a4a8:	f001 f82e 	bl	800b508 <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 800a4ac:	4b16      	ldr	r3, [pc, #88]	; (800a508 <BSP_IO_Init+0x80>)
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	2084      	movs	r0, #132	; 0x84
 800a4b2:	4798      	blx	r3
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	71bb      	strb	r3, [r7, #6]

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 800a4b8:	79bb      	ldrb	r3, [r7, #6]
 800a4ba:	2b7b      	cmp	r3, #123	; 0x7b
 800a4bc:	d002      	beq.n	800a4c4 <BSP_IO_Init+0x3c>
 800a4be:	79bb      	ldrb	r3, [r7, #6]
 800a4c0:	2b79      	cmp	r3, #121	; 0x79
 800a4c2:	d117      	bne.n	800a4f4 <BSP_IO_Init+0x6c>
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;
 800a4c4:	4b0e      	ldr	r3, [pc, #56]	; (800a500 <BSP_IO_Init+0x78>)
 800a4c6:	4a10      	ldr	r2, [pc, #64]	; (800a508 <BSP_IO_Init+0x80>)
 800a4c8:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 800a4ca:	4b0d      	ldr	r3, [pc, #52]	; (800a500 <BSP_IO_Init+0x78>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d00f      	beq.n	800a4f4 <BSP_IO_Init+0x6c>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 800a4d4:	4b0a      	ldr	r3, [pc, #40]	; (800a500 <BSP_IO_Init+0x78>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2084      	movs	r0, #132	; 0x84
 800a4dc:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 800a4de:	4b08      	ldr	r3, [pc, #32]	; (800a500 <BSP_IO_Init+0x78>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	4909      	ldr	r1, [pc, #36]	; (800a50c <BSP_IO_Init+0x84>)
 800a4e6:	2084      	movs	r0, #132	; 0x84
 800a4e8:	4798      	blx	r3

        ret = IO_OK;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	71fb      	strb	r3, [r7, #7]
 800a4ee:	e001      	b.n	800a4f4 <BSP_IO_Init+0x6c>
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 800a4f0:	2303      	movs	r3, #3
 800a4f2:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 800a4f4:	79fb      	ldrb	r3, [r7, #7]
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	20001304 	.word	0x20001304
 800a504:	200001ec 	.word	0x200001ec
 800a508:	200001c0 	.word	0x200001c0
 800a50c:	000301ff 	.word	0x000301ff

0800a510 <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	460b      	mov	r3, r1
 800a51a:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 800a51c:	2300      	movs	r3, #0
 800a51e:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	4b07      	ldr	r3, [pc, #28]	; (800a540 <BSP_IO_ConfigPin+0x30>)
 800a524:	4013      	ands	r3, r2
 800a526:	60fb      	str	r3, [r7, #12]


  /* Configure the selected IO Expander 1 pin(s) mode */
  io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);
 800a528:	4b06      	ldr	r3, [pc, #24]	; (800a544 <BSP_IO_ConfigPin+0x34>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	78fa      	ldrb	r2, [r7, #3]
 800a530:	68f9      	ldr	r1, [r7, #12]
 800a532:	2084      	movs	r0, #132	; 0x84
 800a534:	4798      	blx	r3

  return IO_OK;
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3710      	adds	r7, #16
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	000301ff 	.word	0x000301ff
 800a544:	20001304 	.word	0x20001304

0800a548 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState: New pins state to write
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	460b      	mov	r3, r1
 800a552:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 800a554:	2300      	movs	r3, #0
 800a556:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	4b07      	ldr	r3, [pc, #28]	; (800a578 <BSP_IO_WritePin+0x30>)
 800a55c:	4013      	ands	r3, r2
 800a55e:	60fb      	str	r3, [r7, #12]

  /* Sets the IO Expander 1 selected pins state */
  io1_driver->WritePin(IO1_I2C_ADDRESS, io1_pin, PinState);
 800a560:	4b06      	ldr	r3, [pc, #24]	; (800a57c <BSP_IO_WritePin+0x34>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	695b      	ldr	r3, [r3, #20]
 800a566:	78fa      	ldrb	r2, [r7, #3]
 800a568:	68f9      	ldr	r1, [r7, #12]
 800a56a:	2084      	movs	r0, #132	; 0x84
 800a56c:	4798      	blx	r3

}
 800a56e:	bf00      	nop
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	000301ff 	.word	0x000301ff
 800a57c:	20001304 	.word	0x20001304

0800a580 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 800a584:	2001      	movs	r0, #1
 800a586:	f000 f803 	bl	800a590 <BSP_LCD_InitEx>
 800a58a:	4603      	mov	r3, r0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <BSP_LCD_InitEx>:
  * @brief  Initializes the LCD with a given orientation.
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 800a598:	2301      	movs	r3, #1
 800a59a:	73fb      	strb	r3, [r7, #15]
  uint32_t i = 0;
 800a59c:	2300      	movs	r3, #0
 800a59e:	60bb      	str	r3, [r7, #8]

  if (bsp_lcd_initialized == 1)
 800a5a0:	4b33      	ldr	r3, [pc, #204]	; (800a670 <BSP_LCD_InitEx+0xe0>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d102      	bne.n	800a5ae <BSP_LCD_InitEx+0x1e>
  {
    ret = LCD_OK;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	73fb      	strb	r3, [r7, #15]
 800a5ac:	e05b      	b.n	800a666 <BSP_LCD_InitEx+0xd6>
  }
  else
  {
    /* Initialize the IO functionalities */
    if (BSP_IO_Init() == IO_ERROR)
 800a5ae:	f7ff ff6b 	bl	800a488 <BSP_IO_Init>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d101      	bne.n	800a5bc <BSP_LCD_InitEx+0x2c>
    {
      BSP_ErrorHandler();
 800a5b8:	f7ff f991 	bl	80098de <BSP_ErrorHandler>
    }

    /* Initialize LCD special pins GPIOs */
    BSP_LCD_MspInit();
 800a5bc:	f000 fcd0 	bl	800af60 <BSP_LCD_MspInit>

    /* LCD Power On */
    HAL_GPIO_WritePin(LCD_PWR_CTRL_GPIO_PORT, LCD_PWR_CTRL_PIN, GPIO_PIN_RESET);
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	2101      	movs	r1, #1
 800a5c4:	482b      	ldr	r0, [pc, #172]	; (800a674 <BSP_LCD_InitEx+0xe4>)
 800a5c6:	f002 ff95 	bl	800d4f4 <HAL_GPIO_WritePin>

    /* Default value for draw propriety */
    DrawProp.BackColor = 0xFFFF;
 800a5ca:	4b2b      	ldr	r3, [pc, #172]	; (800a678 <BSP_LCD_InitEx+0xe8>)
 800a5cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a5d0:	605a      	str	r2, [r3, #4]
    DrawProp.pFont     = &Font24;
 800a5d2:	4b29      	ldr	r3, [pc, #164]	; (800a678 <BSP_LCD_InitEx+0xe8>)
 800a5d4:	4a29      	ldr	r2, [pc, #164]	; (800a67c <BSP_LCD_InitEx+0xec>)
 800a5d6:	609a      	str	r2, [r3, #8]
    DrawProp.TextColor = 0x0000;
 800a5d8:	4b27      	ldr	r3, [pc, #156]	; (800a678 <BSP_LCD_InitEx+0xe8>)
 800a5da:	2200      	movs	r2, #0
 800a5dc:	601a      	str	r2, [r3, #0]

    if ((WakeUpFromStandby == RESET) && (WakeUpFromShutdown == RESET))
 800a5de:	4b28      	ldr	r3, [pc, #160]	; (800a680 <BSP_LCD_InitEx+0xf0>)
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d108      	bne.n	800a5f8 <BSP_LCD_InitEx+0x68>
 800a5e6:	4b27      	ldr	r3, [pc, #156]	; (800a684 <BSP_LCD_InitEx+0xf4>)
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d104      	bne.n	800a5f8 <BSP_LCD_InitEx+0x68>
    {
      /* Backlight control signal assertion */
      HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	2101      	movs	r1, #1
 800a5f2:	4825      	ldr	r0, [pc, #148]	; (800a688 <BSP_LCD_InitEx+0xf8>)
 800a5f4:	f002 ff7e 	bl	800d4f4 <HAL_GPIO_WritePin>
    }

    /* Reset the LCD */
    BSP_LCD_Reset();
 800a5f8:	f000 f850 	bl	800a69c <BSP_LCD_Reset>

    if (ST7789H2_drv.ReadID() == ST7789H2_ID)
 800a5fc:	4b23      	ldr	r3, [pc, #140]	; (800a68c <BSP_LCD_InitEx+0xfc>)
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	4798      	blx	r3
 800a602:	4603      	mov	r3, r0
 800a604:	2b85      	cmp	r3, #133	; 0x85
 800a606:	d12e      	bne.n	800a666 <BSP_LCD_InitEx+0xd6>
    {
      LcdDrv = &ST7789H2_drv;
 800a608:	4b21      	ldr	r3, [pc, #132]	; (800a690 <BSP_LCD_InitEx+0x100>)
 800a60a:	4a20      	ldr	r2, [pc, #128]	; (800a68c <BSP_LCD_InitEx+0xfc>)
 800a60c:	601a      	str	r2, [r3, #0]

      /* LCD Init */
      LcdDrv->Init();
 800a60e:	4b20      	ldr	r3, [pc, #128]	; (800a690 <BSP_LCD_InitEx+0x100>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4798      	blx	r3

      /* Fill LCD frame memory with white pixels (or black pixels if INIT_BLACK_LCD is enabled) */
      ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t *)NULL, 0);  /* RAM Write Data */
 800a616:	2200      	movs	r2, #0
 800a618:	2100      	movs	r1, #0
 800a61a:	202c      	movs	r0, #44	; 0x2c
 800a61c:	f7fa fb81 	bl	8004d22 <ST7789H2_WriteReg>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 800a620:	2300      	movs	r3, #0
 800a622:	60bb      	str	r3, [r7, #8]
 800a624:	e006      	b.n	800a634 <BSP_LCD_InitEx+0xa4>
      {
#if defined(INIT_BLACK_LCD)
        LCD_IO_WriteData(0x0);
#else
        LCD_IO_WriteData(0xFFFF);
 800a626:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a62a:	f7ff fe87 	bl	800a33c <LCD_IO_WriteData>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	3301      	adds	r3, #1
 800a632:	60bb      	str	r3, [r7, #8]
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 800a63a:	d3f4      	bcc.n	800a626 <BSP_LCD_InitEx+0x96>
#endif
      }

      if (orientation == LCD_ORIENTATION_PORTRAIT)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d106      	bne.n	800a650 <BSP_LCD_InitEx+0xc0>
      {
        ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT);
 800a642:	2000      	movs	r0, #0
 800a644:	f7fa fa6b 	bl	8004b1e <ST7789H2_SetOrientation>
        LCD_orientation = LCD_ORIENTATION_PORTRAIT;
 800a648:	4b12      	ldr	r3, [pc, #72]	; (800a694 <BSP_LCD_InitEx+0x104>)
 800a64a:	2200      	movs	r2, #0
 800a64c:	701a      	strb	r2, [r3, #0]
 800a64e:	e002      	b.n	800a656 <BSP_LCD_InitEx+0xc6>
      }
      else
      {
        LCD_orientation = LCD_ORIENTATION_LANDSCAPE;
 800a650:	4b10      	ldr	r3, [pc, #64]	; (800a694 <BSP_LCD_InitEx+0x104>)
 800a652:	2201      	movs	r2, #1
 800a654:	701a      	strb	r2, [r3, #0]
      }
      /* Initialize the font */
      BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800a656:	4810      	ldr	r0, [pc, #64]	; (800a698 <BSP_LCD_InitEx+0x108>)
 800a658:	f000 f868 	bl	800a72c <BSP_LCD_SetFont>

      bsp_lcd_initialized = 1;
 800a65c:	4b04      	ldr	r3, [pc, #16]	; (800a670 <BSP_LCD_InitEx+0xe0>)
 800a65e:	2201      	movs	r2, #1
 800a660:	601a      	str	r2, [r3, #0]
      ret = LCD_OK;
 800a662:	2300      	movs	r3, #0
 800a664:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a666:	7bfb      	ldrb	r3, [r7, #15]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3710      	adds	r7, #16
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	20001308 	.word	0x20001308
 800a674:	48001c00 	.word	0x48001c00
 800a678:	2000137c 	.word	0x2000137c
 800a67c:	20000534 	.word	0x20000534
 800a680:	20001378 	.word	0x20001378
 800a684:	20001379 	.word	0x20001379
 800a688:	48002000 	.word	0x48002000
 800a68c:	20000238 	.word	0x20000238
 800a690:	20001388 	.word	0x20001388
 800a694:	20000544 	.word	0x20000544
 800a698:	2000053c 	.word	0x2000053c

0800a69c <BSP_LCD_Reset>:
  * @brief  Reset the LCD.
  * @param  None
  * @retval LCD state
  */
void BSP_LCD_Reset(void)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	af00      	add	r7, sp, #0
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	2004      	movs	r0, #4
 800a6a4:	f7ff ff50 	bl	800a548 <BSP_IO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 800a6a8:	2005      	movs	r0, #5
 800a6aa:	f000 ff2d 	bl	800b508 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 800a6ae:	2101      	movs	r1, #1
 800a6b0:	2004      	movs	r0, #4
 800a6b2:	f7ff ff49 	bl	800a548 <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 800a6b6:	200a      	movs	r0, #10
 800a6b8:	f000 ff26 	bl	800b508 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 800a6bc:	2100      	movs	r1, #0
 800a6be:	2004      	movs	r0, #4
 800a6c0:	f7ff ff42 	bl	800a548 <BSP_IO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 800a6c4:	2014      	movs	r0, #20
 800a6c6:	f000 ff1f 	bl	800b508 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 800a6ca:	2101      	movs	r1, #1
 800a6cc:	2004      	movs	r0, #4
 800a6ce:	f7ff ff3b 	bl	800a548 <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 800a6d2:	200a      	movs	r0, #10
 800a6d4:	f000 ff18 	bl	800b508 <HAL_Delay>
}
 800a6d8:	bf00      	nop
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelWidth());
 800a6e0:	4b03      	ldr	r3, [pc, #12]	; (800a6f0 <BSP_LCD_GetXSize+0x14>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6e6:	4798      	blx	r3
 800a6e8:	4603      	mov	r3, r0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	20001388 	.word	0x20001388

0800a6f4 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelHeight());
 800a6f8:	4b03      	ldr	r3, [pc, #12]	; (800a708 <BSP_LCD_GetYSize+0x14>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6fe:	4798      	blx	r3
 800a700:	4603      	mov	r3, r0
}
 800a702:	4618      	mov	r0, r3
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	20001388 	.word	0x20001388

0800a70c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	4603      	mov	r3, r0
 800a714:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 800a716:	88fb      	ldrh	r3, [r7, #6]
 800a718:	4a03      	ldr	r2, [pc, #12]	; (800a728 <BSP_LCD_SetTextColor+0x1c>)
 800a71a:	6013      	str	r3, [r2, #0]
}
 800a71c:	bf00      	nop
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr
 800a728:	2000137c 	.word	0x2000137c

0800a72c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b083      	sub	sp, #12
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 800a734:	4a04      	ldr	r2, [pc, #16]	; (800a748 <BSP_LCD_SetFont+0x1c>)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6093      	str	r3, [r2, #8]
}
 800a73a:	bf00      	nop
 800a73c:	370c      	adds	r7, #12
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop
 800a748:	2000137c 	.word	0x2000137c

0800a74c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 800a74c:	b590      	push	{r4, r7, lr}
 800a74e:	b087      	sub	sp, #28
 800a750:	af00      	add	r7, sp, #0
 800a752:	4603      	mov	r3, r0
 800a754:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800a756:	2300      	movs	r3, #0
 800a758:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 800a75a:	2300      	movs	r3, #0
 800a75c:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor;
 800a75e:	4b15      	ldr	r3, [pc, #84]	; (800a7b4 <BSP_LCD_Clear+0x68>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 800a764:	88fb      	ldrh	r3, [r7, #6]
 800a766:	4a13      	ldr	r2, [pc, #76]	; (800a7b4 <BSP_LCD_Clear+0x68>)
 800a768:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 800a76a:	f7ff ffc3 	bl	800a6f4 <BSP_LCD_GetYSize>
 800a76e:	6138      	str	r0, [r7, #16]

  for (counter = 0; counter < y_size; counter++)
 800a770:	2300      	movs	r3, #0
 800a772:	617b      	str	r3, [r7, #20]
 800a774:	e00d      	b.n	800a792 <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	b29c      	uxth	r4, r3
 800a77a:	f7ff ffaf 	bl	800a6dc <BSP_LCD_GetXSize>
 800a77e:	4603      	mov	r3, r0
 800a780:	b29b      	uxth	r3, r3
 800a782:	461a      	mov	r2, r3
 800a784:	4621      	mov	r1, r4
 800a786:	2000      	movs	r0, #0
 800a788:	f000 f8e8 	bl	800a95c <BSP_LCD_DrawHLine>
  for (counter = 0; counter < y_size; counter++)
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	3301      	adds	r3, #1
 800a790:	617b      	str	r3, [r7, #20]
 800a792:	697a      	ldr	r2, [r7, #20]
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	429a      	cmp	r2, r3
 800a798:	d3ed      	bcc.n	800a776 <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup;
 800a79a:	4a06      	ldr	r2, [pc, #24]	; (800a7b4 <BSP_LCD_Clear+0x68>)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800a7a0:	4b04      	ldr	r3, [pc, #16]	; (800a7b4 <BSP_LCD_Clear+0x68>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7ff ffb0 	bl	800a70c <BSP_LCD_SetTextColor>
}
 800a7ac:	bf00      	nop
 800a7ae:	371c      	adds	r7, #28
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd90      	pop	{r4, r7, pc}
 800a7b4:	2000137c 	.word	0x2000137c

0800a7b8 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	4603      	mov	r3, r0
 800a7c0:	80fb      	strh	r3, [r7, #6]
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	80bb      	strh	r3, [r7, #4]
 800a7c6:	4613      	mov	r3, r2
 800a7c8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 800a7ca:	4b0f      	ldr	r3, [pc, #60]	; (800a808 <BSP_LCD_DisplayChar+0x50>)
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	78fb      	ldrb	r3, [r7, #3]
 800a7d2:	3b20      	subs	r3, #32
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800a7d4:	490c      	ldr	r1, [pc, #48]	; (800a808 <BSP_LCD_DisplayChar+0x50>)
 800a7d6:	6889      	ldr	r1, [r1, #8]
 800a7d8:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 800a7da:	fb03 f101 	mul.w	r1, r3, r1
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800a7de:	4b0a      	ldr	r3, [pc, #40]	; (800a808 <BSP_LCD_DisplayChar+0x50>)
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	889b      	ldrh	r3, [r3, #4]
 800a7e4:	3307      	adds	r3, #7
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	da00      	bge.n	800a7ec <BSP_LCD_DisplayChar+0x34>
 800a7ea:	3307      	adds	r3, #7
 800a7ec:	10db      	asrs	r3, r3, #3
 800a7ee:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 800a7f2:	441a      	add	r2, r3
 800a7f4:	88b9      	ldrh	r1, [r7, #4]
 800a7f6:	88fb      	ldrh	r3, [r7, #6]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f000 fc0d 	bl	800b018 <DrawChar>
}
 800a7fe:	bf00      	nop
 800a800:	3708      	adds	r7, #8
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	2000137c 	.word	0x2000137c

0800a80c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b088      	sub	sp, #32
 800a810:	af00      	add	r7, sp, #0
 800a812:	60ba      	str	r2, [r7, #8]
 800a814:	461a      	mov	r2, r3
 800a816:	4603      	mov	r3, r0
 800a818:	81fb      	strh	r3, [r7, #14]
 800a81a:	460b      	mov	r3, r1
 800a81c:	81bb      	strh	r3, [r7, #12]
 800a81e:	4613      	mov	r3, r2
 800a820:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800a822:	2301      	movs	r3, #1
 800a824:	83fb      	strh	r3, [r7, #30]
 800a826:	2300      	movs	r3, #0
 800a828:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 800a82a:	2300      	movs	r3, #0
 800a82c:	61bb      	str	r3, [r7, #24]
 800a82e:	2300      	movs	r3, #0
 800a830:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++)
 800a836:	e002      	b.n	800a83e <BSP_LCD_DisplayStringAt+0x32>
  {
    size ++ ;
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	3301      	adds	r3, #1
 800a83c:	61bb      	str	r3, [r7, #24]
  while (*ptr++)
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	1c5a      	adds	r2, r3, #1
 800a842:	617a      	str	r2, [r7, #20]
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d1f6      	bne.n	800a838 <BSP_LCD_DisplayStringAt+0x2c>
  }

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp.pFont->Width);
 800a84a:	f7ff ff47 	bl	800a6dc <BSP_LCD_GetXSize>
 800a84e:	4602      	mov	r2, r0
 800a850:	4b33      	ldr	r3, [pc, #204]	; (800a920 <BSP_LCD_DisplayStringAt+0x114>)
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	889b      	ldrh	r3, [r3, #4]
 800a856:	fbb2 f3f3 	udiv	r3, r2, r3
 800a85a:	613b      	str	r3, [r7, #16]

  switch (Mode)
 800a85c:	79fb      	ldrb	r3, [r7, #7]
 800a85e:	2b03      	cmp	r3, #3
 800a860:	d014      	beq.n	800a88c <BSP_LCD_DisplayStringAt+0x80>
 800a862:	2b03      	cmp	r3, #3
 800a864:	dc23      	bgt.n	800a8ae <BSP_LCD_DisplayStringAt+0xa2>
 800a866:	2b01      	cmp	r3, #1
 800a868:	d002      	beq.n	800a870 <BSP_LCD_DisplayStringAt+0x64>
 800a86a:	2b02      	cmp	r3, #2
 800a86c:	d011      	beq.n	800a892 <BSP_LCD_DisplayStringAt+0x86>
 800a86e:	e01e      	b.n	800a8ae <BSP_LCD_DisplayStringAt+0xa2>
  {
    case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size) * DrawProp.pFont->Width) / 2;
 800a870:	693a      	ldr	r2, [r7, #16]
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	1ad3      	subs	r3, r2, r3
 800a876:	4a2a      	ldr	r2, [pc, #168]	; (800a920 <BSP_LCD_DisplayStringAt+0x114>)
 800a878:	6892      	ldr	r2, [r2, #8]
 800a87a:	8892      	ldrh	r2, [r2, #4]
 800a87c:	fb02 f303 	mul.w	r3, r2, r3
 800a880:	085b      	lsrs	r3, r3, #1
 800a882:	b29a      	uxth	r2, r3
 800a884:	89fb      	ldrh	r3, [r7, #14]
 800a886:	4413      	add	r3, r2
 800a888:	83fb      	strh	r3, [r7, #30]
      break;
 800a88a:	e013      	b.n	800a8b4 <BSP_LCD_DisplayStringAt+0xa8>
    }
    case LEFT_MODE:
    {
      refcolumn = Xpos;
 800a88c:	89fb      	ldrh	r3, [r7, #14]
 800a88e:	83fb      	strh	r3, [r7, #30]
      break;
 800a890:	e010      	b.n	800a8b4 <BSP_LCD_DisplayStringAt+0xa8>
    }
    case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size) * DrawProp.pFont->Width);
 800a892:	693a      	ldr	r2, [r7, #16]
 800a894:	69bb      	ldr	r3, [r7, #24]
 800a896:	1ad3      	subs	r3, r2, r3
 800a898:	b29a      	uxth	r2, r3
 800a89a:	4b21      	ldr	r3, [pc, #132]	; (800a920 <BSP_LCD_DisplayStringAt+0x114>)
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	889b      	ldrh	r3, [r3, #4]
 800a8a0:	fb12 f303 	smulbb	r3, r2, r3
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	89fb      	ldrh	r3, [r7, #14]
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	83fb      	strh	r3, [r7, #30]
      break;
 800a8ac:	e002      	b.n	800a8b4 <BSP_LCD_DisplayStringAt+0xa8>
    }
    default:
    {
      refcolumn = Xpos;
 800a8ae:	89fb      	ldrh	r3, [r7, #14]
 800a8b0:	83fb      	strh	r3, [r7, #30]
      break;
 800a8b2:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 800a8b4:	8bfb      	ldrh	r3, [r7, #30]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d003      	beq.n	800a8c2 <BSP_LCD_DisplayStringAt+0xb6>
 800a8ba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	da15      	bge.n	800a8ee <BSP_LCD_DisplayStringAt+0xe2>
  {
    refcolumn = 1;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800a8c6:	e012      	b.n	800a8ee <BSP_LCD_DisplayStringAt+0xe2>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	781a      	ldrb	r2, [r3, #0]
 800a8cc:	89b9      	ldrh	r1, [r7, #12]
 800a8ce:	8bfb      	ldrh	r3, [r7, #30]
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7ff ff71 	bl	800a7b8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 800a8d6:	4b12      	ldr	r3, [pc, #72]	; (800a920 <BSP_LCD_DisplayStringAt+0x114>)
 800a8d8:	689b      	ldr	r3, [r3, #8]
 800a8da:	889a      	ldrh	r2, [r3, #4]
 800a8dc:	8bfb      	ldrh	r3, [r7, #30]
 800a8de:	4413      	add	r3, r2
 800a8e0:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	60bb      	str	r3, [r7, #8]
    i++;
 800a8e8:	8bbb      	ldrh	r3, [r7, #28]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d00f      	beq.n	800a916 <BSP_LCD_DisplayStringAt+0x10a>
 800a8f6:	f7ff fef1 	bl	800a6dc <BSP_LCD_GetXSize>
 800a8fa:	4601      	mov	r1, r0
 800a8fc:	8bbb      	ldrh	r3, [r7, #28]
 800a8fe:	4a08      	ldr	r2, [pc, #32]	; (800a920 <BSP_LCD_DisplayStringAt+0x114>)
 800a900:	6892      	ldr	r2, [r2, #8]
 800a902:	8892      	ldrh	r2, [r2, #4]
 800a904:	fb02 f303 	mul.w	r3, r2, r3
 800a908:	1acb      	subs	r3, r1, r3
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	4a04      	ldr	r2, [pc, #16]	; (800a920 <BSP_LCD_DisplayStringAt+0x114>)
 800a90e:	6892      	ldr	r2, [r2, #8]
 800a910:	8892      	ldrh	r2, [r2, #4]
 800a912:	4293      	cmp	r3, r2
 800a914:	d2d8      	bcs.n	800a8c8 <BSP_LCD_DisplayStringAt+0xbc>
  }
}
 800a916:	bf00      	nop
 800a918:	3720      	adds	r7, #32
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	2000137c 	.word	0x2000137c

0800a924 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	4603      	mov	r3, r0
 800a92c:	80fb      	strh	r3, [r7, #6]
 800a92e:	460b      	mov	r3, r1
 800a930:	80bb      	strh	r3, [r7, #4]
 800a932:	4613      	mov	r3, r2
 800a934:	807b      	strh	r3, [r7, #2]
  if (LcdDrv->WritePixel != NULL)
 800a936:	4b08      	ldr	r3, [pc, #32]	; (800a958 <BSP_LCD_DrawPixel+0x34>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	695b      	ldr	r3, [r3, #20]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d006      	beq.n	800a94e <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 800a940:	4b05      	ldr	r3, [pc, #20]	; (800a958 <BSP_LCD_DrawPixel+0x34>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	695b      	ldr	r3, [r3, #20]
 800a946:	887a      	ldrh	r2, [r7, #2]
 800a948:	88b9      	ldrh	r1, [r7, #4]
 800a94a:	88f8      	ldrh	r0, [r7, #6]
 800a94c:	4798      	blx	r3
  }
}
 800a94e:	bf00      	nop
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	20001388 	.word	0x20001388

0800a95c <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800a95c:	b590      	push	{r4, r7, lr}
 800a95e:	b085      	sub	sp, #20
 800a960:	af00      	add	r7, sp, #0
 800a962:	4603      	mov	r3, r0
 800a964:	80fb      	strh	r3, [r7, #6]
 800a966:	460b      	mov	r3, r1
 800a968:	80bb      	strh	r3, [r7, #4]
 800a96a:	4613      	mov	r3, r2
 800a96c:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800a96e:	2300      	movs	r3, #0
 800a970:	60fb      	str	r3, [r7, #12]

  if (LcdDrv->DrawHLine != NULL)
 800a972:	4b15      	ldr	r3, [pc, #84]	; (800a9c8 <BSP_LCD_DrawHLine+0x6c>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	6a1b      	ldr	r3, [r3, #32]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d00a      	beq.n	800a992 <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 800a97c:	4b12      	ldr	r3, [pc, #72]	; (800a9c8 <BSP_LCD_DrawHLine+0x6c>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	6a1c      	ldr	r4, [r3, #32]
 800a982:	4b12      	ldr	r3, [pc, #72]	; (800a9cc <BSP_LCD_DrawHLine+0x70>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	b298      	uxth	r0, r3
 800a988:	887b      	ldrh	r3, [r7, #2]
 800a98a:	88ba      	ldrh	r2, [r7, #4]
 800a98c:	88f9      	ldrh	r1, [r7, #6]
 800a98e:	47a0      	blx	r4
    for (index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 800a990:	e015      	b.n	800a9be <BSP_LCD_DrawHLine+0x62>
    for (index = 0; index < Length; index++)
 800a992:	2300      	movs	r3, #0
 800a994:	60fb      	str	r3, [r7, #12]
 800a996:	e00e      	b.n	800a9b6 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	b29a      	uxth	r2, r3
 800a99c:	88fb      	ldrh	r3, [r7, #6]
 800a99e:	4413      	add	r3, r2
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	4a0a      	ldr	r2, [pc, #40]	; (800a9cc <BSP_LCD_DrawHLine+0x70>)
 800a9a4:	6812      	ldr	r2, [r2, #0]
 800a9a6:	b292      	uxth	r2, r2
 800a9a8:	88b9      	ldrh	r1, [r7, #4]
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7ff ffba 	bl	800a924 <BSP_LCD_DrawPixel>
    for (index = 0; index < Length; index++)
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	60fb      	str	r3, [r7, #12]
 800a9b6:	887b      	ldrh	r3, [r7, #2]
 800a9b8:	68fa      	ldr	r2, [r7, #12]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d3ec      	bcc.n	800a998 <BSP_LCD_DrawHLine+0x3c>
}
 800a9be:	bf00      	nop
 800a9c0:	3714      	adds	r7, #20
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd90      	pop	{r4, r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	20001388 	.word	0x20001388
 800a9cc:	2000137c 	.word	0x2000137c

0800a9d0 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b086      	sub	sp, #24
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	80fb      	strh	r3, [r7, #6]
 800a9da:	460b      	mov	r3, r1
 800a9dc:	80bb      	strh	r3, [r7, #4]
 800a9de:	4613      	mov	r3, r2
 800a9e0:	807b      	strh	r3, [r7, #2]
  int32_t  decision;       /* Decision Variable */
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */

  decision = 3 - (Radius << 1);
 800a9e2:	887b      	ldrh	r3, [r7, #2]
 800a9e4:	005b      	lsls	r3, r3, #1
 800a9e6:	f1c3 0303 	rsb	r3, r3, #3
 800a9ea:	617b      	str	r3, [r7, #20]
  current_x = 0;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800a9f0:	887b      	ldrh	r3, [r7, #2]
 800a9f2:	60fb      	str	r3, [r7, #12]

  while (current_x <= current_y)
 800a9f4:	e09a      	b.n	800ab2c <BSP_LCD_DrawCircle+0x15c>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp.TextColor);
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	b29a      	uxth	r2, r3
 800a9fa:	88fb      	ldrh	r3, [r7, #6]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	b298      	uxth	r0, r3
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	88ba      	ldrh	r2, [r7, #4]
 800aa06:	1ad3      	subs	r3, r2, r3
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	4a4d      	ldr	r2, [pc, #308]	; (800ab40 <BSP_LCD_DrawCircle+0x170>)
 800aa0c:	6812      	ldr	r2, [r2, #0]
 800aa0e:	b292      	uxth	r2, r2
 800aa10:	4619      	mov	r1, r3
 800aa12:	f7ff ff87 	bl	800a924 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp.TextColor);
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	88fa      	ldrh	r2, [r7, #6]
 800aa1c:	1ad3      	subs	r3, r2, r3
 800aa1e:	b298      	uxth	r0, r3
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	88ba      	ldrh	r2, [r7, #4]
 800aa26:	1ad3      	subs	r3, r2, r3
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	4a45      	ldr	r2, [pc, #276]	; (800ab40 <BSP_LCD_DrawCircle+0x170>)
 800aa2c:	6812      	ldr	r2, [r2, #0]
 800aa2e:	b292      	uxth	r2, r2
 800aa30:	4619      	mov	r1, r3
 800aa32:	f7ff ff77 	bl	800a924 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp.TextColor);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	88fb      	ldrh	r3, [r7, #6]
 800aa3c:	4413      	add	r3, r2
 800aa3e:	b298      	uxth	r0, r3
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	88ba      	ldrh	r2, [r7, #4]
 800aa46:	1ad3      	subs	r3, r2, r3
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	4a3d      	ldr	r2, [pc, #244]	; (800ab40 <BSP_LCD_DrawCircle+0x170>)
 800aa4c:	6812      	ldr	r2, [r2, #0]
 800aa4e:	b292      	uxth	r2, r2
 800aa50:	4619      	mov	r1, r3
 800aa52:	f7ff ff67 	bl	800a924 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp.TextColor);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	b29b      	uxth	r3, r3
 800aa5a:	88fa      	ldrh	r2, [r7, #6]
 800aa5c:	1ad3      	subs	r3, r2, r3
 800aa5e:	b298      	uxth	r0, r3
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	88ba      	ldrh	r2, [r7, #4]
 800aa66:	1ad3      	subs	r3, r2, r3
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	4a35      	ldr	r2, [pc, #212]	; (800ab40 <BSP_LCD_DrawCircle+0x170>)
 800aa6c:	6812      	ldr	r2, [r2, #0]
 800aa6e:	b292      	uxth	r2, r2
 800aa70:	4619      	mov	r1, r3
 800aa72:	f7ff ff57 	bl	800a924 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp.TextColor);
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	b29a      	uxth	r2, r3
 800aa7a:	88fb      	ldrh	r3, [r7, #6]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	b298      	uxth	r0, r3
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	b29a      	uxth	r2, r3
 800aa84:	88bb      	ldrh	r3, [r7, #4]
 800aa86:	4413      	add	r3, r2
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	4a2d      	ldr	r2, [pc, #180]	; (800ab40 <BSP_LCD_DrawCircle+0x170>)
 800aa8c:	6812      	ldr	r2, [r2, #0]
 800aa8e:	b292      	uxth	r2, r2
 800aa90:	4619      	mov	r1, r3
 800aa92:	f7ff ff47 	bl	800a924 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp.TextColor);
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	88fa      	ldrh	r2, [r7, #6]
 800aa9c:	1ad3      	subs	r3, r2, r3
 800aa9e:	b298      	uxth	r0, r3
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	b29a      	uxth	r2, r3
 800aaa4:	88bb      	ldrh	r3, [r7, #4]
 800aaa6:	4413      	add	r3, r2
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	4a25      	ldr	r2, [pc, #148]	; (800ab40 <BSP_LCD_DrawCircle+0x170>)
 800aaac:	6812      	ldr	r2, [r2, #0]
 800aaae:	b292      	uxth	r2, r2
 800aab0:	4619      	mov	r1, r3
 800aab2:	f7ff ff37 	bl	800a924 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp.TextColor);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	b29a      	uxth	r2, r3
 800aaba:	88fb      	ldrh	r3, [r7, #6]
 800aabc:	4413      	add	r3, r2
 800aabe:	b298      	uxth	r0, r3
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	88bb      	ldrh	r3, [r7, #4]
 800aac6:	4413      	add	r3, r2
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	4a1d      	ldr	r2, [pc, #116]	; (800ab40 <BSP_LCD_DrawCircle+0x170>)
 800aacc:	6812      	ldr	r2, [r2, #0]
 800aace:	b292      	uxth	r2, r2
 800aad0:	4619      	mov	r1, r3
 800aad2:	f7ff ff27 	bl	800a924 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp.TextColor);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	b29b      	uxth	r3, r3
 800aada:	88fa      	ldrh	r2, [r7, #6]
 800aadc:	1ad3      	subs	r3, r2, r3
 800aade:	b298      	uxth	r0, r3
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	b29a      	uxth	r2, r3
 800aae4:	88bb      	ldrh	r3, [r7, #4]
 800aae6:	4413      	add	r3, r2
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	4a15      	ldr	r2, [pc, #84]	; (800ab40 <BSP_LCD_DrawCircle+0x170>)
 800aaec:	6812      	ldr	r2, [r2, #0]
 800aaee:	b292      	uxth	r2, r2
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	f7ff ff17 	bl	800a924 <BSP_LCD_DrawPixel>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800aaf6:	4813      	ldr	r0, [pc, #76]	; (800ab44 <BSP_LCD_DrawCircle+0x174>)
 800aaf8:	f7ff fe18 	bl	800a72c <BSP_LCD_SetFont>

    if (decision < 0)
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	da06      	bge.n	800ab10 <BSP_LCD_DrawCircle+0x140>
    {
      decision += (current_x << 2) + 6;
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	009a      	lsls	r2, r3, #2
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	4413      	add	r3, r2
 800ab0a:	3306      	adds	r3, #6
 800ab0c:	617b      	str	r3, [r7, #20]
 800ab0e:	e00a      	b.n	800ab26 <BSP_LCD_DrawCircle+0x156>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800ab10:	693a      	ldr	r2, [r7, #16]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	1ad3      	subs	r3, r2, r3
 800ab16:	009a      	lsls	r2, r3, #2
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	330a      	adds	r3, #10
 800ab1e:	617b      	str	r3, [r7, #20]
      current_y--;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	3b01      	subs	r3, #1
 800ab24:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	3301      	adds	r3, #1
 800ab2a:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800ab2c:	693a      	ldr	r2, [r7, #16]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	f67f af60 	bls.w	800a9f6 <BSP_LCD_DrawCircle+0x26>
  }
}
 800ab36:	bf00      	nop
 800ab38:	bf00      	nop
 800ab3a:	3718      	adds	r7, #24
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	2000137c 	.word	0x2000137c
 800ab44:	2000053c 	.word	0x2000053c

0800ab48 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b086      	sub	sp, #24
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	4603      	mov	r3, r0
 800ab50:	80fb      	strh	r3, [r7, #6]
 800ab52:	460b      	mov	r3, r1
 800ab54:	80bb      	strh	r3, [r7, #4]
 800ab56:	4613      	mov	r3, r2
 800ab58:	807b      	strh	r3, [r7, #2]
  int32_t  decision;        /* Decision Variable */
  uint32_t  current_x;    /* Current X Value */
  uint32_t  current_y;    /* Current Y Value */

  decision = 3 - (Radius << 1);
 800ab5a:	887b      	ldrh	r3, [r7, #2]
 800ab5c:	005b      	lsls	r3, r3, #1
 800ab5e:	f1c3 0303 	rsb	r3, r3, #3
 800ab62:	617b      	str	r3, [r7, #20]

  current_x = 0;
 800ab64:	2300      	movs	r3, #0
 800ab66:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800ab68:	887b      	ldrh	r3, [r7, #2]
 800ab6a:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800ab6c:	4b3e      	ldr	r3, [pc, #248]	; (800ac68 <BSP_LCD_FillCircle+0x120>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7ff fdca 	bl	800a70c <BSP_LCD_SetTextColor>

  while (current_x <= current_y)
 800ab78:	e061      	b.n	800ac3e <BSP_LCD_FillCircle+0xf6>
  {
    if (current_y > 0)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d021      	beq.n	800abc4 <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2 * current_y);
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	88fa      	ldrh	r2, [r7, #6]
 800ab86:	1ad3      	subs	r3, r2, r3
 800ab88:	b298      	uxth	r0, r3
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	b29a      	uxth	r2, r3
 800ab8e:	88bb      	ldrh	r3, [r7, #4]
 800ab90:	4413      	add	r3, r2
 800ab92:	b299      	uxth	r1, r3
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	005b      	lsls	r3, r3, #1
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	f7ff fedd 	bl	800a95c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2 * current_y);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	88fa      	ldrh	r2, [r7, #6]
 800aba8:	1ad3      	subs	r3, r2, r3
 800abaa:	b298      	uxth	r0, r3
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	b29b      	uxth	r3, r3
 800abb0:	88ba      	ldrh	r2, [r7, #4]
 800abb2:	1ad3      	subs	r3, r2, r3
 800abb4:	b299      	uxth	r1, r3
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	b29b      	uxth	r3, r3
 800abba:	005b      	lsls	r3, r3, #1
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	461a      	mov	r2, r3
 800abc0:	f7ff fecc 	bl	800a95c <BSP_LCD_DrawHLine>
    }

    if (current_x > 0)
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d021      	beq.n	800ac0e <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2 * current_x);
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	b29b      	uxth	r3, r3
 800abce:	88fa      	ldrh	r2, [r7, #6]
 800abd0:	1ad3      	subs	r3, r2, r3
 800abd2:	b298      	uxth	r0, r3
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	88ba      	ldrh	r2, [r7, #4]
 800abda:	1ad3      	subs	r3, r2, r3
 800abdc:	b299      	uxth	r1, r3
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	005b      	lsls	r3, r3, #1
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	461a      	mov	r2, r3
 800abe8:	f7ff feb8 	bl	800a95c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2 * current_x);
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	b29b      	uxth	r3, r3
 800abf0:	88fa      	ldrh	r2, [r7, #6]
 800abf2:	1ad3      	subs	r3, r2, r3
 800abf4:	b298      	uxth	r0, r3
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	b29a      	uxth	r2, r3
 800abfa:	88bb      	ldrh	r3, [r7, #4]
 800abfc:	4413      	add	r3, r2
 800abfe:	b299      	uxth	r1, r3
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	005b      	lsls	r3, r3, #1
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	461a      	mov	r2, r3
 800ac0a:	f7ff fea7 	bl	800a95c <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	da06      	bge.n	800ac22 <BSP_LCD_FillCircle+0xda>
    {
      decision += (current_x << 2) + 6;
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	009a      	lsls	r2, r3, #2
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	3306      	adds	r3, #6
 800ac1e:	617b      	str	r3, [r7, #20]
 800ac20:	e00a      	b.n	800ac38 <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800ac22:	693a      	ldr	r2, [r7, #16]
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	009a      	lsls	r2, r3, #2
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	330a      	adds	r3, #10
 800ac30:	617b      	str	r3, [r7, #20]
      current_y--;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	3b01      	subs	r3, #1
 800ac36:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800ac3e:	693a      	ldr	r2, [r7, #16]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d999      	bls.n	800ab7a <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800ac46:	4b08      	ldr	r3, [pc, #32]	; (800ac68 <BSP_LCD_FillCircle+0x120>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7ff fd5d 	bl	800a70c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800ac52:	887a      	ldrh	r2, [r7, #2]
 800ac54:	88b9      	ldrh	r1, [r7, #4]
 800ac56:	88fb      	ldrh	r3, [r7, #6]
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7ff feb9 	bl	800a9d0 <BSP_LCD_DrawCircle>
}
 800ac5e:	bf00      	nop
 800ac60:	3718      	adds	r7, #24
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	2000137c 	.word	0x2000137c

0800ac6c <BSP_LCD_ScreenDimmingConfig>:
  * @param  step    : step value in percent
  * @param  delay   : delay in milliseconds between each step
  * @retval None
  */
void BSP_LCD_ScreenDimmingConfig(const uint8_t start, const uint8_t stop, const uint8_t step, const uint8_t delay)
{
 800ac6c:	b490      	push	{r4, r7}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	4604      	mov	r4, r0
 800ac74:	4608      	mov	r0, r1
 800ac76:	4611      	mov	r1, r2
 800ac78:	461a      	mov	r2, r3
 800ac7a:	4623      	mov	r3, r4
 800ac7c:	71fb      	strb	r3, [r7, #7]
 800ac7e:	4603      	mov	r3, r0
 800ac80:	71bb      	strb	r3, [r7, #6]
 800ac82:	460b      	mov	r3, r1
 800ac84:	717b      	strb	r3, [r7, #5]
 800ac86:	4613      	mov	r3, r2
 800ac88:	713b      	strb	r3, [r7, #4]
  if ((dimming_config.ongoing == 0)
 800ac8a:	4b10      	ldr	r3, [pc, #64]	; (800accc <BSP_LCD_ScreenDimmingConfig+0x60>)
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d117      	bne.n	800acc2 <BSP_LCD_ScreenDimmingConfig+0x56>
      && (start <= 100) && (stop <= 100)
 800ac92:	79fb      	ldrb	r3, [r7, #7]
 800ac94:	2b64      	cmp	r3, #100	; 0x64
 800ac96:	d814      	bhi.n	800acc2 <BSP_LCD_ScreenDimmingConfig+0x56>
 800ac98:	79bb      	ldrb	r3, [r7, #6]
 800ac9a:	2b64      	cmp	r3, #100	; 0x64
 800ac9c:	d811      	bhi.n	800acc2 <BSP_LCD_ScreenDimmingConfig+0x56>
      && (step > 0) && (step < 100))
 800ac9e:	797b      	ldrb	r3, [r7, #5]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d00e      	beq.n	800acc2 <BSP_LCD_ScreenDimmingConfig+0x56>
 800aca4:	797b      	ldrb	r3, [r7, #5]
 800aca6:	2b63      	cmp	r3, #99	; 0x63
 800aca8:	d80b      	bhi.n	800acc2 <BSP_LCD_ScreenDimmingConfig+0x56>
  {
    dimming_config.start = start;
 800acaa:	4a08      	ldr	r2, [pc, #32]	; (800accc <BSP_LCD_ScreenDimmingConfig+0x60>)
 800acac:	79fb      	ldrb	r3, [r7, #7]
 800acae:	7053      	strb	r3, [r2, #1]
    dimming_config.stop  = stop;
 800acb0:	4a06      	ldr	r2, [pc, #24]	; (800accc <BSP_LCD_ScreenDimmingConfig+0x60>)
 800acb2:	79bb      	ldrb	r3, [r7, #6]
 800acb4:	7093      	strb	r3, [r2, #2]
    dimming_config.step  = step;
 800acb6:	4a05      	ldr	r2, [pc, #20]	; (800accc <BSP_LCD_ScreenDimmingConfig+0x60>)
 800acb8:	797b      	ldrb	r3, [r7, #5]
 800acba:	70d3      	strb	r3, [r2, #3]
    dimming_config.delay = delay;
 800acbc:	4a03      	ldr	r2, [pc, #12]	; (800accc <BSP_LCD_ScreenDimmingConfig+0x60>)
 800acbe:	793b      	ldrb	r3, [r7, #4]
 800acc0:	7113      	strb	r3, [r2, #4]
  }
}
 800acc2:	bf00      	nop
 800acc4:	3708      	adds	r7, #8
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bc90      	pop	{r4, r7}
 800acca:	4770      	bx	lr
 800accc:	20000548 	.word	0x20000548

0800acd0 <BSP_LCD_ScreenDimmingOn>:
  * @note   Screen brightness is gradually decreased
  * @param  None
  * @retval None
  */
void BSP_LCD_ScreenDimmingOn(void)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
  }


#else
  /* Counter Prescaler value */
  uint32_t uhPrescalerValue = 0;
 800acd6:	2300      	movs	r3, #0
 800acd8:	603b      	str	r3, [r7, #0]
  int32_t   step;

  /* Reject this while ongoing dimming */
  if (dimming_config.ongoing)
 800acda:	4b71      	ldr	r3, [pc, #452]	; (800aea0 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	f040 80d9 	bne.w	800ae96 <BSP_LCD_ScreenDimmingOn+0x1c6>
  {
    return;
  }

  /* Set that dim feature is active */
  dimming_on = 1;
 800ace4:	4b6f      	ldr	r3, [pc, #444]	; (800aea4 <BSP_LCD_ScreenDimmingOn+0x1d4>)
 800ace6:	2201      	movs	r2, #1
 800ace8:	601a      	str	r2, [r3, #0]
  dimming_config.ongoing = 1;
 800acea:	4b6d      	ldr	r3, [pc, #436]	; (800aea0 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800acec:	2201      	movs	r2, #1
 800acee:	701a      	strb	r2, [r3, #0]

  if (dimming_config.stop > dimming_config.start)
 800acf0:	4b6b      	ldr	r3, [pc, #428]	; (800aea0 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800acf2:	789a      	ldrb	r2, [r3, #2]
 800acf4:	4b6a      	ldr	r3, [pc, #424]	; (800aea0 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800acf6:	785b      	ldrb	r3, [r3, #1]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d903      	bls.n	800ad04 <BSP_LCD_ScreenDimmingOn+0x34>
  {
    step      = dimming_config.step;
 800acfc:	4b68      	ldr	r3, [pc, #416]	; (800aea0 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800acfe:	78db      	ldrb	r3, [r3, #3]
 800ad00:	607b      	str	r3, [r7, #4]
 800ad02:	e003      	b.n	800ad0c <BSP_LCD_ScreenDimmingOn+0x3c>
  }
  else
  {
    step      = -dimming_config.step;
 800ad04:	4b66      	ldr	r3, [pc, #408]	; (800aea0 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800ad06:	78db      	ldrb	r3, [r3, #3]
 800ad08:	425b      	negs	r3, r3
 800ad0a:	607b      	str	r3, [r7, #4]

  /* Always redo the full initialization as there is no apriori knowledge
    of IO or timer settings at this point (may have been modified by application) */

  /* Compute the prescaler value to have TIM1 counter clock equal to 16000000 Hz */
  uhPrescalerValue = (uint32_t)(SystemCoreClock / 16000000) - 1;
 800ad0c:	4b66      	ldr	r3, [pc, #408]	; (800aea8 <BSP_LCD_ScreenDimmingOn+0x1d8>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a66      	ldr	r2, [pc, #408]	; (800aeac <BSP_LCD_ScreenDimmingOn+0x1dc>)
 800ad12:	fba2 2303 	umull	r2, r3, r2, r3
 800ad16:	0d9b      	lsrs	r3, r3, #22
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	603b      	str	r3, [r7, #0]

  LCD_TimHandle.Instance = TIMx;
 800ad1c:	4b64      	ldr	r3, [pc, #400]	; (800aeb0 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800ad1e:	4a65      	ldr	r2, [pc, #404]	; (800aeb4 <BSP_LCD_ScreenDimmingOn+0x1e4>)
 800ad20:	601a      	str	r2, [r3, #0]

  __HAL_TIM_RESET_HANDLE_STATE(&LCD_TimHandle); /* to force MSP call */
 800ad22:	4b63      	ldr	r3, [pc, #396]	; (800aeb0 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800ad24:	2200      	movs	r2, #0
 800ad26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ad2a:	4b61      	ldr	r3, [pc, #388]	; (800aeb0 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad32:	4b5f      	ldr	r3, [pc, #380]	; (800aeb0 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800ad34:	2200      	movs	r2, #0
 800ad36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad3a:	4b5d      	ldr	r3, [pc, #372]	; (800aeb0 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad42:	4b5b      	ldr	r3, [pc, #364]	; (800aeb0 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800ad44:	2200      	movs	r2, #0
 800ad46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ad4a:	4b59      	ldr	r3, [pc, #356]	; (800aeb0 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad52:	4b57      	ldr	r3, [pc, #348]	; (800aeb0 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800ad54:	2200      	movs	r2, #0
 800ad56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad5a:	4b55      	ldr	r3, [pc, #340]	; (800aeb0 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad62:	4b53      	ldr	r3, [pc, #332]	; (800aeb0 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800ad64:	2200      	movs	r2, #0
 800ad66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad6a:	4b51      	ldr	r3, [pc, #324]	; (800aeb0 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ad72:	4b4f      	ldr	r3, [pc, #316]	; (800aeb0 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800ad74:	2200      	movs	r2, #0
 800ad76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800ad7a:	4b4d      	ldr	r3, [pc, #308]	; (800aeb0 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  LCD_TimHandle.Init.Prescaler         = uhPrescalerValue;
 800ad82:	4a4b      	ldr	r2, [pc, #300]	; (800aeb0 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	6053      	str	r3, [r2, #4]
  LCD_TimHandle.Init.Period            = PERIOD_VALUE;
 800ad88:	4b49      	ldr	r3, [pc, #292]	; (800aeb0 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800ad8a:	f240 2299 	movw	r2, #665	; 0x299
 800ad8e:	60da      	str	r2, [r3, #12]
  LCD_TimHandle.Init.ClockDivision     = 0;
 800ad90:	4b47      	ldr	r3, [pc, #284]	; (800aeb0 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800ad92:	2200      	movs	r2, #0
 800ad94:	611a      	str	r2, [r3, #16]
  LCD_TimHandle.Init.CounterMode       = (step > 0 ? TIM_COUNTERMODE_DOWN : TIM_COUNTERMODE_UP);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	dd01      	ble.n	800ada0 <BSP_LCD_ScreenDimmingOn+0xd0>
 800ad9c:	2310      	movs	r3, #16
 800ad9e:	e000      	b.n	800ada2 <BSP_LCD_ScreenDimmingOn+0xd2>
 800ada0:	2300      	movs	r3, #0
 800ada2:	4a43      	ldr	r2, [pc, #268]	; (800aeb0 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800ada4:	6093      	str	r3, [r2, #8]
  LCD_TimHandle.Init.RepetitionCounter = 0;
 800ada6:	4b42      	ldr	r3, [pc, #264]	; (800aeb0 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800ada8:	2200      	movs	r2, #0
 800adaa:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&LCD_TimHandle) != HAL_OK)
 800adac:	4840      	ldr	r0, [pc, #256]	; (800aeb0 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800adae:	f008 fc27 	bl	8013600 <HAL_TIM_PWM_Init>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d001      	beq.n	800adbc <BSP_LCD_ScreenDimmingOn+0xec>
  {
    /* Initialization Error */
    BSP_ErrorHandler();
 800adb8:	f7fe fd91 	bl	80098de <BSP_ErrorHandler>
  }

  /* Common configuration for all channels */
  LCD_sConfig.OCMode       = TIM_OCMODE_PWM1;
 800adbc:	4b3e      	ldr	r3, [pc, #248]	; (800aeb8 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800adbe:	2260      	movs	r2, #96	; 0x60
 800adc0:	601a      	str	r2, [r3, #0]
  LCD_sConfig.OCPolarity   = TIM_OCPOLARITY_HIGH;
 800adc2:	4b3d      	ldr	r3, [pc, #244]	; (800aeb8 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800adc4:	2200      	movs	r2, #0
 800adc6:	609a      	str	r2, [r3, #8]
  LCD_sConfig.OCFastMode   = TIM_OCFAST_DISABLE;
 800adc8:	4b3b      	ldr	r3, [pc, #236]	; (800aeb8 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800adca:	2200      	movs	r2, #0
 800adcc:	611a      	str	r2, [r3, #16]
  LCD_sConfig.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 800adce:	4b3a      	ldr	r3, [pc, #232]	; (800aeb8 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800add0:	2200      	movs	r2, #0
 800add2:	60da      	str	r2, [r3, #12]
  LCD_sConfig.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800add4:	4b38      	ldr	r3, [pc, #224]	; (800aeb8 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800add6:	2200      	movs	r2, #0
 800add8:	619a      	str	r2, [r3, #24]

  LCD_sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;
 800adda:	4b37      	ldr	r3, [pc, #220]	; (800aeb8 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800addc:	2200      	movs	r2, #0
 800adde:	615a      	str	r2, [r3, #20]

  /* Set the pulse value for channel */
  LCD_sConfig.Pulse = __DIMMING_CYCLE_VALUE(dimming_config.start);
 800ade0:	4b2f      	ldr	r3, [pc, #188]	; (800aea0 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800ade2:	785b      	ldrb	r3, [r3, #1]
 800ade4:	461a      	mov	r2, r3
 800ade6:	f240 2399 	movw	r3, #665	; 0x299
 800adea:	fb02 f303 	mul.w	r3, r2, r3
 800adee:	4a33      	ldr	r2, [pc, #204]	; (800aebc <BSP_LCD_ScreenDimmingOn+0x1ec>)
 800adf0:	fba2 2303 	umull	r2, r3, r2, r3
 800adf4:	095b      	lsrs	r3, r3, #5
 800adf6:	4a30      	ldr	r2, [pc, #192]	; (800aeb8 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800adf8:	6053      	str	r3, [r2, #4]
  if (HAL_TIM_PWM_ConfigChannel(&LCD_TimHandle, &LCD_sConfig, TIMx_CHANNEL) != HAL_OK)
 800adfa:	220c      	movs	r2, #12
 800adfc:	492e      	ldr	r1, [pc, #184]	; (800aeb8 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800adfe:	482c      	ldr	r0, [pc, #176]	; (800aeb0 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800ae00:	f008 fdf2 	bl	80139e8 <HAL_TIM_PWM_ConfigChannel>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d001      	beq.n	800ae0e <BSP_LCD_ScreenDimmingOn+0x13e>
  {
    /* Configuration Error */
    BSP_ErrorHandler();
 800ae0a:	f7fe fd68 	bl	80098de <BSP_ErrorHandler>
  }

  /* Start Timer channel */
  if (HAL_TIM_PWM_Start(&LCD_TimHandle, TIMx_CHANNEL) != HAL_OK)
 800ae0e:	210c      	movs	r1, #12
 800ae10:	4827      	ldr	r0, [pc, #156]	; (800aeb0 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800ae12:	f008 fc4d 	bl	80136b0 <HAL_TIM_PWM_Start>
 800ae16:	4603      	mov	r3, r0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d001      	beq.n	800ae20 <BSP_LCD_ScreenDimmingOn+0x150>
  {
    /* PWM Generation Error */
    BSP_ErrorHandler();
 800ae1c:	f7fe fd5f 	bl	80098de <BSP_ErrorHandler>
  }

  /* Set the pulse value for the timer channel */
  i = dimming_config.start;
 800ae20:	4b1f      	ldr	r3, [pc, #124]	; (800aea0 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800ae22:	785b      	ldrb	r3, [r3, #1]
 800ae24:	461a      	mov	r2, r3
 800ae26:	4b26      	ldr	r3, [pc, #152]	; (800aec0 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800ae28:	601a      	str	r2, [r3, #0]
  while (dimming_config.ongoing)
 800ae2a:	e02f      	b.n	800ae8c <BSP_LCD_ScreenDimmingOn+0x1bc>
  {
    __HAL_TIM_SET_COMPARE(&LCD_TimHandle, TIMx_CHANNEL, __DIMMING_CYCLE_VALUE(i));
 800ae2c:	4b24      	ldr	r3, [pc, #144]	; (800aec0 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f240 2299 	movw	r2, #665	; 0x299
 800ae34:	fb03 f202 	mul.w	r2, r3, r2
 800ae38:	4b1d      	ldr	r3, [pc, #116]	; (800aeb0 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	491f      	ldr	r1, [pc, #124]	; (800aebc <BSP_LCD_ScreenDimmingOn+0x1ec>)
 800ae3e:	fba1 1202 	umull	r1, r2, r1, r2
 800ae42:	0952      	lsrs	r2, r2, #5
 800ae44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Exit if stop is reached */
    if (((step > 0) && (i >= dimming_config.stop))
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	dd06      	ble.n	800ae5a <BSP_LCD_ScreenDimmingOn+0x18a>
 800ae4c:	4b14      	ldr	r3, [pc, #80]	; (800aea0 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800ae4e:	789b      	ldrb	r3, [r3, #2]
 800ae50:	461a      	mov	r2, r3
 800ae52:	4b1b      	ldr	r3, [pc, #108]	; (800aec0 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d909      	bls.n	800ae6e <BSP_LCD_ScreenDimmingOn+0x19e>
        || ((step < 0) && (i <= dimming_config.stop)))
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	da0a      	bge.n	800ae76 <BSP_LCD_ScreenDimmingOn+0x1a6>
 800ae60:	4b0f      	ldr	r3, [pc, #60]	; (800aea0 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800ae62:	789b      	ldrb	r3, [r3, #2]
 800ae64:	461a      	mov	r2, r3
 800ae66:	4b16      	ldr	r3, [pc, #88]	; (800aec0 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d303      	bcc.n	800ae76 <BSP_LCD_ScreenDimmingOn+0x1a6>
    {
      dimming_config.ongoing = 0;
 800ae6e:	4b0c      	ldr	r3, [pc, #48]	; (800aea0 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800ae70:	2200      	movs	r2, #0
 800ae72:	701a      	strb	r2, [r3, #0]
 800ae74:	e00a      	b.n	800ae8c <BSP_LCD_ScreenDimmingOn+0x1bc>
    }
    else
    {
      HAL_Delay(dimming_config.delay);
 800ae76:	4b0a      	ldr	r3, [pc, #40]	; (800aea0 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800ae78:	791b      	ldrb	r3, [r3, #4]
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f000 fb44 	bl	800b508 <HAL_Delay>
      i += step;
 800ae80:	4b0f      	ldr	r3, [pc, #60]	; (800aec0 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	4413      	add	r3, r2
 800ae88:	4a0d      	ldr	r2, [pc, #52]	; (800aec0 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800ae8a:	6013      	str	r3, [r2, #0]
  while (dimming_config.ongoing)
 800ae8c:	4b04      	ldr	r3, [pc, #16]	; (800aea0 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d1cb      	bne.n	800ae2c <BSP_LCD_ScreenDimmingOn+0x15c>
 800ae94:	e000      	b.n	800ae98 <BSP_LCD_ScreenDimmingOn+0x1c8>
    return;
 800ae96:	bf00      	nop
    }
  }
#endif
}
 800ae98:	3708      	adds	r7, #8
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	20000548 	.word	0x20000548
 800aea4:	2000130c 	.word	0x2000130c
 800aea8:	20000194 	.word	0x20000194
 800aeac:	431bde83 	.word	0x431bde83
 800aeb0:	20001310 	.word	0x20001310
 800aeb4:	40000c00 	.word	0x40000c00
 800aeb8:	2000135c 	.word	0x2000135c
 800aebc:	51eb851f 	.word	0x51eb851f
 800aec0:	2000138c 	.word	0x2000138c

0800aec4 <BSP_LCD_ScreenDimmingOff>:
  * @note   Screen brightness is immediately set to its highest level
  * @param  None
  * @retval None
  */
void BSP_LCD_ScreenDimmingOff(void)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	af00      	add	r7, sp, #0
#if defined(LPTIMER_DIMMING)
  GPIO_InitTypeDef GPIO_InitStructure;
#endif

  if (dimming_on == 1)
 800aec8:	4b0d      	ldr	r3, [pc, #52]	; (800af00 <BSP_LCD_ScreenDimmingOff+0x3c>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d114      	bne.n	800aefa <BSP_LCD_ScreenDimmingOff+0x36>
  {
    /* Stop ongoing dimming */
    dimming_config.ongoing = 0;
 800aed0:	4b0c      	ldr	r3, [pc, #48]	; (800af04 <BSP_LCD_ScreenDimmingOff+0x40>)
 800aed2:	2200      	movs	r2, #0
 800aed4:	701a      	strb	r2, [r3, #0]

    /* Disable timer clock for power consumption reasons */
    __HAL_RCC_LPTIM1_CLK_DISABLE();
#else
    /* Stop Timer channel */
    if (HAL_TIM_PWM_Stop(&LCD_TimHandle, TIMx_CHANNEL) != HAL_OK)
 800aed6:	210c      	movs	r1, #12
 800aed8:	480b      	ldr	r0, [pc, #44]	; (800af08 <BSP_LCD_ScreenDimmingOff+0x44>)
 800aeda:	f008 fcef 	bl	80138bc <HAL_TIM_PWM_Stop>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d001      	beq.n	800aee8 <BSP_LCD_ScreenDimmingOff+0x24>
    {
      /* PWM Generation Error */
      BSP_ErrorHandler();
 800aee4:	f7fe fcfb 	bl	80098de <BSP_ErrorHandler>
    }

    /* Disable timer clock for power consumption reasons */
    TIMx_CLK_DISABLE();
 800aee8:	4b08      	ldr	r3, [pc, #32]	; (800af0c <BSP_LCD_ScreenDimmingOff+0x48>)
 800aeea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeec:	4a07      	ldr	r2, [pc, #28]	; (800af0c <BSP_LCD_ScreenDimmingOff+0x48>)
 800aeee:	f023 0308 	bic.w	r3, r3, #8
 800aef2:	6593      	str	r3, [r2, #88]	; 0x58
#endif

    dimming_on = 0;
 800aef4:	4b02      	ldr	r3, [pc, #8]	; (800af00 <BSP_LCD_ScreenDimmingOff+0x3c>)
 800aef6:	2200      	movs	r2, #0
 800aef8:	601a      	str	r2, [r3, #0]
  }
}
 800aefa:	bf00      	nop
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	2000130c 	.word	0x2000130c
 800af04:	20000548 	.word	0x20000548
 800af08:	20001310 	.word	0x20001310
 800af0c:	40021000 	.word	0x40021000

0800af10 <HAL_TIM_PWM_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b088      	sub	sp, #32
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStruct;

  /* TIMx Peripheral clock enable */
  TIMx_CLK_ENABLE();
 800af18:	4b0f      	ldr	r3, [pc, #60]	; (800af58 <HAL_TIM_PWM_MspInit+0x48>)
 800af1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af1c:	4a0e      	ldr	r2, [pc, #56]	; (800af58 <HAL_TIM_PWM_MspInit+0x48>)
 800af1e:	f043 0308 	orr.w	r3, r3, #8
 800af22:	6593      	str	r3, [r2, #88]	; 0x58
 800af24:	4b0c      	ldr	r3, [pc, #48]	; (800af58 <HAL_TIM_PWM_MspInit+0x48>)
 800af26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af28:	f003 0308 	and.w	r3, r3, #8
 800af2c:	60bb      	str	r3, [r7, #8]
 800af2e:	68bb      	ldr	r3, [r7, #8]

  /* Timer channel configuration */

  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af30:	2302      	movs	r3, #2
 800af32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800af34:	2301      	movs	r3, #1
 800af36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af38:	2303      	movs	r3, #3
 800af3a:	61bb      	str	r3, [r7, #24]

  GPIO_InitStruct.Alternate = TIMx_CHANNEl_AF;
 800af3c:	2302      	movs	r3, #2
 800af3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800af40:	2301      	movs	r3, #1
 800af42:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800af44:	f107 030c 	add.w	r3, r7, #12
 800af48:	4619      	mov	r1, r3
 800af4a:	4804      	ldr	r0, [pc, #16]	; (800af5c <HAL_TIM_PWM_MspInit+0x4c>)
 800af4c:	f002 f84e 	bl	800cfec <HAL_GPIO_Init>
}
 800af50:	bf00      	nop
 800af52:	3720      	adds	r7, #32
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	40021000 	.word	0x40021000
 800af5c:	48002000 	.word	0x48002000

0800af60 <BSP_LCD_MspInit>:
  * @brief  Initializes the LCD GPIO special pins MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_LCD_MspInit(void)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b088      	sub	sp, #32
 800af64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clock */
  LCD_TE_GPIO_CLK_ENABLE();
 800af66:	4b29      	ldr	r3, [pc, #164]	; (800b00c <BSP_LCD_MspInit+0xac>)
 800af68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af6a:	4a28      	ldr	r2, [pc, #160]	; (800b00c <BSP_LCD_MspInit+0xac>)
 800af6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af70:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af72:	4b26      	ldr	r3, [pc, #152]	; (800b00c <BSP_LCD_MspInit+0xac>)
 800af74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af7a:	60bb      	str	r3, [r7, #8]
 800af7c:	68bb      	ldr	r3, [r7, #8]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800af7e:	4b23      	ldr	r3, [pc, #140]	; (800b00c <BSP_LCD_MspInit+0xac>)
 800af80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af82:	4a22      	ldr	r2, [pc, #136]	; (800b00c <BSP_LCD_MspInit+0xac>)
 800af84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af88:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af8a:	4b20      	ldr	r3, [pc, #128]	; (800b00c <BSP_LCD_MspInit+0xac>)
 800af8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af92:	607b      	str	r3, [r7, #4]
 800af94:	687b      	ldr	r3, [r7, #4]
  LCD_PWR_CTRL_GPIO_CLK_ENABLE();
 800af96:	4b1d      	ldr	r3, [pc, #116]	; (800b00c <BSP_LCD_MspInit+0xac>)
 800af98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af9a:	4a1c      	ldr	r2, [pc, #112]	; (800b00c <BSP_LCD_MspInit+0xac>)
 800af9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800afa2:	4b1a      	ldr	r3, [pc, #104]	; (800b00c <BSP_LCD_MspInit+0xac>)
 800afa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afaa:	603b      	str	r3, [r7, #0]
 800afac:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  if (BSP_IO_Init() == IO_ERROR)
 800afae:	f7ff fa6b 	bl	800a488 <BSP_IO_Init>
 800afb2:	4603      	mov	r3, r0
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d101      	bne.n	800afbc <BSP_LCD_MspInit+0x5c>
  {
    BSP_ErrorHandler();
 800afb8:	f7fe fc91 	bl	80098de <BSP_ErrorHandler>
  }
  BSP_IO_ConfigPin(LCD_RST_PIN, IO_MODE_OUTPUT);
 800afbc:	2101      	movs	r1, #1
 800afbe:	2004      	movs	r0, #4
 800afc0:	f7ff faa6 	bl	800a510 <BSP_IO_ConfigPin>

  /* LCD_BL_CTRL GPIO configuration */
  GPIO_InitStructure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 800afc4:	2301      	movs	r3, #1
 800afc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode      = GPIO_MODE_OUTPUT_PP;
 800afc8:	2301      	movs	r3, #1
 800afca:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull      = GPIO_NOPULL;
 800afcc:	2300      	movs	r3, #0
 800afce:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 800afd0:	2300      	movs	r3, #0
 800afd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed   = GPIO_SPEED_FREQ_LOW;
 800afd4:	2300      	movs	r3, #0
 800afd6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStructure);
 800afd8:	f107 030c 	add.w	r3, r7, #12
 800afdc:	4619      	mov	r1, r3
 800afde:	480c      	ldr	r0, [pc, #48]	; (800b010 <BSP_LCD_MspInit+0xb0>)
 800afe0:	f002 f804 	bl	800cfec <HAL_GPIO_Init>

  /* Power on the screen (also done in Touch Screen driver ... */
  GPIO_InitStructure.Pin = LCD_PWR_CTRL_PIN;
 800afe4:	2301      	movs	r3, #1
 800afe6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP /*GPIO_MODE_OUTPUT_PP*/;
 800afe8:	2301      	movs	r3, #1
 800afea:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull =   GPIO_NOPULL;
 800afec:	2300      	movs	r3, #0
 800afee:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 800aff0:	2300      	movs	r3, #0
 800aff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 800aff4:	2300      	movs	r3, #0
 800aff6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_PWR_CTRL_GPIO_PORT, &GPIO_InitStructure);
 800aff8:	f107 030c 	add.w	r3, r7, #12
 800affc:	4619      	mov	r1, r3
 800affe:	4805      	ldr	r0, [pc, #20]	; (800b014 <BSP_LCD_MspInit+0xb4>)
 800b000:	f001 fff4 	bl	800cfec <HAL_GPIO_Init>
}
 800b004:	bf00      	nop
 800b006:	3720      	adds	r7, #32
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	40021000 	.word	0x40021000
 800b010:	48002000 	.word	0x48002000
 800b014:	48001c00 	.word	0x48001c00

0800b018 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b088      	sub	sp, #32
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	4603      	mov	r3, r0
 800b020:	603a      	str	r2, [r7, #0]
 800b022:	80fb      	strh	r3, [r7, #6]
 800b024:	460b      	mov	r3, r1
 800b026:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800b028:	2300      	movs	r3, #0
 800b02a:	61fb      	str	r3, [r7, #28]
 800b02c:	2300      	movs	r3, #0
 800b02e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;

  height = DrawProp.pFont->Height;
 800b030:	4b45      	ldr	r3, [pc, #276]	; (800b148 <DrawChar+0x130>)
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	88db      	ldrh	r3, [r3, #6]
 800b036:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 800b038:	4b43      	ldr	r3, [pc, #268]	; (800b148 <DrawChar+0x130>)
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	889b      	ldrh	r3, [r3, #4]
 800b03e:	823b      	strh	r3, [r7, #16]

  offset =  8 * ((width + 7) / 8) -  width ;
 800b040:	8a3b      	ldrh	r3, [r7, #16]
 800b042:	3307      	adds	r3, #7
 800b044:	2b00      	cmp	r3, #0
 800b046:	da00      	bge.n	800b04a <DrawChar+0x32>
 800b048:	3307      	adds	r3, #7
 800b04a:	10db      	asrs	r3, r3, #3
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	00db      	lsls	r3, r3, #3
 800b050:	b2da      	uxtb	r2, r3
 800b052:	8a3b      	ldrh	r3, [r7, #16]
 800b054:	b2db      	uxtb	r3, r3
 800b056:	1ad3      	subs	r3, r2, r3
 800b058:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 800b05a:	2300      	movs	r3, #0
 800b05c:	61fb      	str	r3, [r7, #28]
 800b05e:	e069      	b.n	800b134 <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 800b060:	8a3b      	ldrh	r3, [r7, #16]
 800b062:	3307      	adds	r3, #7
 800b064:	2b00      	cmp	r3, #0
 800b066:	da00      	bge.n	800b06a <DrawChar+0x52>
 800b068:	3307      	adds	r3, #7
 800b06a:	10db      	asrs	r3, r3, #3
 800b06c:	461a      	mov	r2, r3
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	fb02 f303 	mul.w	r3, r2, r3
 800b074:	683a      	ldr	r2, [r7, #0]
 800b076:	4413      	add	r3, r2
 800b078:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 800b07a:	8a3b      	ldrh	r3, [r7, #16]
 800b07c:	3307      	adds	r3, #7
 800b07e:	2b00      	cmp	r3, #0
 800b080:	da00      	bge.n	800b084 <DrawChar+0x6c>
 800b082:	3307      	adds	r3, #7
 800b084:	10db      	asrs	r3, r3, #3
 800b086:	2b01      	cmp	r3, #1
 800b088:	d002      	beq.n	800b090 <DrawChar+0x78>
 800b08a:	2b02      	cmp	r3, #2
 800b08c:	d004      	beq.n	800b098 <DrawChar+0x80>
 800b08e:	e00c      	b.n	800b0aa <DrawChar+0x92>
    {
      case 1:
        line =  pchar[0];
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	617b      	str	r3, [r7, #20]
        break;
 800b096:	e016      	b.n	800b0c6 <DrawChar+0xae>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	021b      	lsls	r3, r3, #8
 800b09e:	68ba      	ldr	r2, [r7, #8]
 800b0a0:	3201      	adds	r2, #1
 800b0a2:	7812      	ldrb	r2, [r2, #0]
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	617b      	str	r3, [r7, #20]
        break;
 800b0a8:	e00d      	b.n	800b0c6 <DrawChar+0xae>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	041a      	lsls	r2, r3, #16
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	021b      	lsls	r3, r3, #8
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	68ba      	ldr	r2, [r7, #8]
 800b0bc:	3202      	adds	r2, #2
 800b0be:	7812      	ldrb	r2, [r2, #0]
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	617b      	str	r3, [r7, #20]
        break;
 800b0c4:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	61bb      	str	r3, [r7, #24]
 800b0ca:	e029      	b.n	800b120 <DrawChar+0x108>
    {
      if ((line & (1 << (width - j + offset - 1))) != 0)
 800b0cc:	8a3a      	ldrh	r2, [r7, #16]
 800b0ce:	69bb      	ldr	r3, [r7, #24]
 800b0d0:	1ad2      	subs	r2, r2, r3
 800b0d2:	7bfb      	ldrb	r3, [r7, #15]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	2201      	movs	r2, #1
 800b0da:	fa02 f303 	lsl.w	r3, r2, r3
 800b0de:	461a      	mov	r2, r3
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	4013      	ands	r3, r2
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d00c      	beq.n	800b102 <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 800b0e8:	69bb      	ldr	r3, [r7, #24]
 800b0ea:	b29a      	uxth	r2, r3
 800b0ec:	88fb      	ldrh	r3, [r7, #6]
 800b0ee:	4413      	add	r3, r2
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	4a15      	ldr	r2, [pc, #84]	; (800b148 <DrawChar+0x130>)
 800b0f4:	6812      	ldr	r2, [r2, #0]
 800b0f6:	b292      	uxth	r2, r2
 800b0f8:	88b9      	ldrh	r1, [r7, #4]
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7ff fc12 	bl	800a924 <BSP_LCD_DrawPixel>
 800b100:	e00b      	b.n	800b11a <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	b29a      	uxth	r2, r3
 800b106:	88fb      	ldrh	r3, [r7, #6]
 800b108:	4413      	add	r3, r2
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	4a0e      	ldr	r2, [pc, #56]	; (800b148 <DrawChar+0x130>)
 800b10e:	6852      	ldr	r2, [r2, #4]
 800b110:	b292      	uxth	r2, r2
 800b112:	88b9      	ldrh	r1, [r7, #4]
 800b114:	4618      	mov	r0, r3
 800b116:	f7ff fc05 	bl	800a924 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	3301      	adds	r3, #1
 800b11e:	61bb      	str	r3, [r7, #24]
 800b120:	8a3b      	ldrh	r3, [r7, #16]
 800b122:	69ba      	ldr	r2, [r7, #24]
 800b124:	429a      	cmp	r2, r3
 800b126:	d3d1      	bcc.n	800b0cc <DrawChar+0xb4>
      }
    }
    Ypos++;
 800b128:	88bb      	ldrh	r3, [r7, #4]
 800b12a:	3301      	adds	r3, #1
 800b12c:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 800b12e:	69fb      	ldr	r3, [r7, #28]
 800b130:	3301      	adds	r3, #1
 800b132:	61fb      	str	r3, [r7, #28]
 800b134:	8a7b      	ldrh	r3, [r7, #18]
 800b136:	69fa      	ldr	r2, [r7, #28]
 800b138:	429a      	cmp	r2, r3
 800b13a:	d391      	bcc.n	800b060 <DrawChar+0x48>
  }
}
 800b13c:	bf00      	nop
 800b13e:	bf00      	nop
 800b140:	3720      	adds	r7, #32
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	2000137c 	.word	0x2000137c

0800b14c <BSP_TS_InitEx>:
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @param  orientation : TS_ORIENTATION_LANDSCAPE or TS_ORIENTATION_PORTRAIT
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_InitEx(uint16_t ts_SizeX, uint16_t ts_SizeY, uint8_t  orientation)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	4603      	mov	r3, r0
 800b154:	80fb      	strh	r3, [r7, #6]
 800b156:	460b      	mov	r3, r1
 800b158:	80bb      	strh	r3, [r7, #4]
 800b15a:	4613      	mov	r3, r2
 800b15c:	70fb      	strb	r3, [r7, #3]
  uint8_t ts_status = TS_OK;
 800b15e:	2300      	movs	r3, #0
 800b160:	73fb      	strb	r3, [r7, #15]
  uint16_t read_id = 0;
 800b162:	2300      	movs	r3, #0
 800b164:	81bb      	strh	r3, [r7, #12]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 800b166:	4b20      	ldr	r3, [pc, #128]	; (800b1e8 <BSP_TS_InitEx+0x9c>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4a20      	ldr	r2, [pc, #128]	; (800b1ec <BSP_TS_InitEx+0xa0>)
 800b16c:	7812      	ldrb	r2, [r2, #0]
 800b16e:	b292      	uxth	r2, r2
 800b170:	4610      	mov	r0, r2
 800b172:	4798      	blx	r3

  /* Scan FT6x36 TouchScreen IC controller ID register by I2C Read */
  /* Verify this is a FT6x36, otherwise this is an error case      */

  read_id = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 800b174:	4b1c      	ldr	r3, [pc, #112]	; (800b1e8 <BSP_TS_InitEx+0x9c>)
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	2070      	movs	r0, #112	; 0x70
 800b17a:	4798      	blx	r3
 800b17c:	4603      	mov	r3, r0
 800b17e:	81bb      	strh	r3, [r7, #12]

  if (read_id == FT6x36_ID_VALUE)
 800b180:	89bb      	ldrh	r3, [r7, #12]
 800b182:	2bcd      	cmp	r3, #205	; 0xcd
 800b184:	d12a      	bne.n	800b1dc <BSP_TS_InitEx+0x90>
  {
    /* Found FT6x36 : Initialize the TS driver structure */
    tsDriver = &ft6x06_ts_drv;
 800b186:	4b1a      	ldr	r3, [pc, #104]	; (800b1f0 <BSP_TS_InitEx+0xa4>)
 800b188:	4a17      	ldr	r2, [pc, #92]	; (800b1e8 <BSP_TS_InitEx+0x9c>)
 800b18a:	601a      	str	r2, [r3, #0]

    I2C_Address    = TS_I2C_ADDRESS;
 800b18c:	4b17      	ldr	r3, [pc, #92]	; (800b1ec <BSP_TS_InitEx+0xa0>)
 800b18e:	2270      	movs	r2, #112	; 0x70
 800b190:	701a      	strb	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if (orientation == TS_ORIENTATION_PORTRAIT)
 800b192:	78fb      	ldrb	r3, [r7, #3]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d106      	bne.n	800b1a6 <BSP_TS_InitEx+0x5a>
    {
      tsOrientation = TS_SWAP_X | TS_SWAP_Y;
 800b198:	4b16      	ldr	r3, [pc, #88]	; (800b1f4 <BSP_TS_InitEx+0xa8>)
 800b19a:	2206      	movs	r2, #6
 800b19c:	701a      	strb	r2, [r3, #0]
      TS_orientation = TS_ORIENTATION_PORTRAIT;
 800b19e:	4b16      	ldr	r3, [pc, #88]	; (800b1f8 <BSP_TS_InitEx+0xac>)
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	701a      	strb	r2, [r3, #0]
 800b1a4:	e005      	b.n	800b1b2 <BSP_TS_InitEx+0x66>
    }
    else
    {
      tsOrientation = TS_SWAP_XY | TS_SWAP_Y;
 800b1a6:	4b13      	ldr	r3, [pc, #76]	; (800b1f4 <BSP_TS_InitEx+0xa8>)
 800b1a8:	220c      	movs	r2, #12
 800b1aa:	701a      	strb	r2, [r3, #0]
      TS_orientation = TS_ORIENTATION_LANDSCAPE;
 800b1ac:	4b12      	ldr	r3, [pc, #72]	; (800b1f8 <BSP_TS_InitEx+0xac>)
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	701a      	strb	r2, [r3, #0]
    }

    if (ts_status == TS_OK)
 800b1b2:	7bfb      	ldrb	r3, [r7, #15]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d111      	bne.n	800b1dc <BSP_TS_InitEx+0x90>
    {
      /* Software reset the TouchScreen */
      tsDriver->Reset(I2C_Address);
 800b1b8:	4b0d      	ldr	r3, [pc, #52]	; (800b1f0 <BSP_TS_InitEx+0xa4>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	4a0b      	ldr	r2, [pc, #44]	; (800b1ec <BSP_TS_InitEx+0xa0>)
 800b1c0:	7812      	ldrb	r2, [r2, #0]
 800b1c2:	b292      	uxth	r2, r2
 800b1c4:	4610      	mov	r0, r2
 800b1c6:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      tsDriver->Start(I2C_Address);
 800b1c8:	4b09      	ldr	r3, [pc, #36]	; (800b1f0 <BSP_TS_InitEx+0xa4>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	4a07      	ldr	r2, [pc, #28]	; (800b1ec <BSP_TS_InitEx+0xa0>)
 800b1d0:	7812      	ldrb	r2, [r2, #0]
 800b1d2:	b292      	uxth	r2, r2
 800b1d4:	4610      	mov	r0, r2
 800b1d6:	4798      	blx	r3

      return TS_OK;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	e000      	b.n	800b1de <BSP_TS_InitEx+0x92>

    } /* of if(ts_status == TS_OK) */
  }

  return TS_DEVICE_NOT_FOUND;
 800b1dc:	2303      	movs	r3, #3


}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3710      	adds	r7, #16
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	20000198 	.word	0x20000198
 800b1ec:	20001394 	.word	0x20001394
 800b1f0:	20001390 	.word	0x20001390
 800b1f4:	2000054d 	.word	0x2000054d
 800b1f8:	2000054e 	.word	0x2000054e

0800b1fc <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800b1fc:	b590      	push	{r4, r7, lr}
 800b1fe:	b089      	sub	sp, #36	; 0x24
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800b204:	2300      	movs	r3, #0
 800b206:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2C_Address);
 800b208:	4b80      	ldr	r3, [pc, #512]	; (800b40c <BSP_TS_GetState+0x210>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	691b      	ldr	r3, [r3, #16]
 800b20e:	4a80      	ldr	r2, [pc, #512]	; (800b410 <BSP_TS_GetState+0x214>)
 800b210:	7812      	ldrb	r2, [r2, #0]
 800b212:	b292      	uxth	r2, r2
 800b214:	4610      	mov	r0, r2
 800b216:	4798      	blx	r3
 800b218:	4603      	mov	r3, r0
 800b21a:	461a      	mov	r2, r3
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	701a      	strb	r2, [r3, #0]
  if (TS_State->touchDetected)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	f000 80ec 	beq.w	800b402 <BSP_TS_GetState+0x206>
  {
    for (index = 0; index < TS_State->touchDetected; index++)
 800b22a:	2300      	movs	r3, #0
 800b22c:	61fb      	str	r3, [r7, #28]
 800b22e:	e0e1      	b.n	800b3f4 <BSP_TS_GetState+0x1f8>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 800b230:	4b76      	ldr	r3, [pc, #472]	; (800b40c <BSP_TS_GetState+0x210>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	695b      	ldr	r3, [r3, #20]
 800b236:	4a76      	ldr	r2, [pc, #472]	; (800b410 <BSP_TS_GetState+0x214>)
 800b238:	7812      	ldrb	r2, [r2, #0]
 800b23a:	b290      	uxth	r0, r2
 800b23c:	f107 0110 	add.w	r1, r7, #16
 800b240:	69fa      	ldr	r2, [r7, #28]
 800b242:	0052      	lsls	r2, r2, #1
 800b244:	188c      	adds	r4, r1, r2
 800b246:	f107 010c 	add.w	r1, r7, #12
 800b24a:	69fa      	ldr	r2, [r7, #28]
 800b24c:	0052      	lsls	r2, r2, #1
 800b24e:	440a      	add	r2, r1
 800b250:	4621      	mov	r1, r4
 800b252:	4798      	blx	r3

      if (tsOrientation & TS_SWAP_XY)
 800b254:	4b6f      	ldr	r3, [pc, #444]	; (800b414 <BSP_TS_GetState+0x218>)
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	f003 0308 	and.w	r3, r3, #8
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d019      	beq.n	800b294 <BSP_TS_GetState+0x98>
      {
        tmp = Raw_x[index];
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	005b      	lsls	r3, r3, #1
 800b264:	3320      	adds	r3, #32
 800b266:	443b      	add	r3, r7
 800b268:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800b26c:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index];
 800b26e:	69fb      	ldr	r3, [r7, #28]
 800b270:	005b      	lsls	r3, r3, #1
 800b272:	3320      	adds	r3, #32
 800b274:	443b      	add	r3, r7
 800b276:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	005b      	lsls	r3, r3, #1
 800b27e:	3320      	adds	r3, #32
 800b280:	443b      	add	r3, r7
 800b282:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	005b      	lsls	r3, r3, #1
 800b28a:	3320      	adds	r3, #32
 800b28c:	443b      	add	r3, r7
 800b28e:	8b3a      	ldrh	r2, [r7, #24]
 800b290:	f823 2c14 	strh.w	r2, [r3, #-20]
      }

      if (tsOrientation & TS_SWAP_X)
 800b294:	4b5f      	ldr	r3, [pc, #380]	; (800b414 <BSP_TS_GetState+0x218>)
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	f003 0302 	and.w	r3, r3, #2
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d00e      	beq.n	800b2be <BSP_TS_GetState+0xc2>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH_HEIGHT - 1 - Raw_x[index];
 800b2a0:	69fb      	ldr	r3, [r7, #28]
 800b2a2:	005b      	lsls	r3, r3, #1
 800b2a4:	3320      	adds	r3, #32
 800b2a6:	443b      	add	r3, r7
 800b2a8:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800b2ac:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800b2b0:	b29a      	uxth	r2, r3
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	005b      	lsls	r3, r3, #1
 800b2b6:	3320      	adds	r3, #32
 800b2b8:	443b      	add	r3, r7
 800b2ba:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if (tsOrientation & TS_SWAP_Y)
 800b2be:	4b55      	ldr	r3, [pc, #340]	; (800b414 <BSP_TS_GetState+0x218>)
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	f003 0304 	and.w	r3, r3, #4
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d00e      	beq.n	800b2e8 <BSP_TS_GetState+0xec>
      {
        Raw_y[index] = FT_6206_MAX_WIDTH_HEIGHT - 1 - Raw_y[index];
 800b2ca:	69fb      	ldr	r3, [r7, #28]
 800b2cc:	005b      	lsls	r3, r3, #1
 800b2ce:	3320      	adds	r3, #32
 800b2d0:	443b      	add	r3, r7
 800b2d2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800b2d6:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800b2da:	b29a      	uxth	r2, r3
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	005b      	lsls	r3, r3, #1
 800b2e0:	3320      	adds	r3, #32
 800b2e2:	443b      	add	r3, r7
 800b2e4:	f823 2c14 	strh.w	r2, [r3, #-20]
      }

      xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 800b2e8:	69fb      	ldr	r3, [r7, #28]
 800b2ea:	005b      	lsls	r3, r3, #1
 800b2ec:	3320      	adds	r3, #32
 800b2ee:	443b      	add	r3, r7
 800b2f0:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	4a48      	ldr	r2, [pc, #288]	; (800b418 <BSP_TS_GetState+0x21c>)
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2fe:	4299      	cmp	r1, r3
 800b300:	d90d      	bls.n	800b31e <BSP_TS_GetState+0x122>
 800b302:	69fb      	ldr	r3, [r7, #28]
 800b304:	005b      	lsls	r3, r3, #1
 800b306:	3320      	adds	r3, #32
 800b308:	443b      	add	r3, r7
 800b30a:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800b30e:	4942      	ldr	r1, [pc, #264]	; (800b418 <BSP_TS_GetState+0x21c>)
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b316:	b29b      	uxth	r3, r3
 800b318:	1ad3      	subs	r3, r2, r3
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	e00c      	b.n	800b338 <BSP_TS_GetState+0x13c>
 800b31e:	4a3e      	ldr	r2, [pc, #248]	; (800b418 <BSP_TS_GetState+0x21c>)
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b326:	b29a      	uxth	r2, r3
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	005b      	lsls	r3, r3, #1
 800b32c:	3320      	adds	r3, #32
 800b32e:	443b      	add	r3, r7
 800b330:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800b334:	1ad3      	subs	r3, r2, r3
 800b336:	b29b      	uxth	r3, r3
 800b338:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 800b33a:	69fb      	ldr	r3, [r7, #28]
 800b33c:	005b      	lsls	r3, r3, #1
 800b33e:	3320      	adds	r3, #32
 800b340:	443b      	add	r3, r7
 800b342:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800b346:	4619      	mov	r1, r3
 800b348:	4a34      	ldr	r2, [pc, #208]	; (800b41c <BSP_TS_GetState+0x220>)
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b350:	4299      	cmp	r1, r3
 800b352:	d90d      	bls.n	800b370 <BSP_TS_GetState+0x174>
 800b354:	69fb      	ldr	r3, [r7, #28]
 800b356:	005b      	lsls	r3, r3, #1
 800b358:	3320      	adds	r3, #32
 800b35a:	443b      	add	r3, r7
 800b35c:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800b360:	492e      	ldr	r1, [pc, #184]	; (800b41c <BSP_TS_GetState+0x220>)
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b368:	b29b      	uxth	r3, r3
 800b36a:	1ad3      	subs	r3, r2, r3
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	e00c      	b.n	800b38a <BSP_TS_GetState+0x18e>
 800b370:	4a2a      	ldr	r2, [pc, #168]	; (800b41c <BSP_TS_GetState+0x220>)
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b378:	b29a      	uxth	r2, r3
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	005b      	lsls	r3, r3, #1
 800b37e:	3320      	adds	r3, #32
 800b380:	443b      	add	r3, r7
 800b382:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800b386:	1ad3      	subs	r3, r2, r3
 800b388:	b29b      	uxth	r3, r3
 800b38a:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 800b38c:	8afa      	ldrh	r2, [r7, #22]
 800b38e:	8abb      	ldrh	r3, [r7, #20]
 800b390:	4413      	add	r3, r2
 800b392:	2b05      	cmp	r3, #5
 800b394:	dd15      	ble.n	800b3c2 <BSP_TS_GetState+0x1c6>
      {
        _x[index] = Raw_x[index];
 800b396:	69fb      	ldr	r3, [r7, #28]
 800b398:	005b      	lsls	r3, r3, #1
 800b39a:	3320      	adds	r3, #32
 800b39c:	443b      	add	r3, r7
 800b39e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	4a1c      	ldr	r2, [pc, #112]	; (800b418 <BSP_TS_GetState+0x21c>)
 800b3a6:	69fb      	ldr	r3, [r7, #28]
 800b3a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 800b3ac:	69fb      	ldr	r3, [r7, #28]
 800b3ae:	005b      	lsls	r3, r3, #1
 800b3b0:	3320      	adds	r3, #32
 800b3b2:	443b      	add	r3, r7
 800b3b4:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	4a18      	ldr	r2, [pc, #96]	; (800b41c <BSP_TS_GetState+0x220>)
 800b3bc:	69fb      	ldr	r3, [r7, #28]
 800b3be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 800b3c2:	4a15      	ldr	r2, [pc, #84]	; (800b418 <BSP_TS_GetState+0x21c>)
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3ca:	b299      	uxth	r1, r3
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	005b      	lsls	r3, r3, #1
 800b3d2:	4413      	add	r3, r2
 800b3d4:	460a      	mov	r2, r1
 800b3d6:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 800b3d8:	4a10      	ldr	r2, [pc, #64]	; (800b41c <BSP_TS_GetState+0x220>)
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3e0:	b299      	uxth	r1, r3
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	005b      	lsls	r3, r3, #1
 800b3e8:	4413      	add	r3, r2
 800b3ea:	460a      	mov	r2, r1
 800b3ec:	80da      	strh	r2, [r3, #6]
    for (index = 0; index < TS_State->touchDetected; index++)
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	61fb      	str	r3, [r7, #28]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	69fb      	ldr	r3, [r7, #28]
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	f4ff af17 	bcc.w	800b230 <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800b402:	7efb      	ldrb	r3, [r7, #27]
}
 800b404:	4618      	mov	r0, r3
 800b406:	3724      	adds	r7, #36	; 0x24
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd90      	pop	{r4, r7, pc}
 800b40c:	20001390 	.word	0x20001390
 800b410:	20001394 	.word	0x20001394
 800b414:	2000054d 	.word	0x2000054d
 800b418:	20001398 	.word	0x20001398
 800b41c:	200013a0 	.word	0x200013a0

0800b420 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800b426:	2300      	movs	r3, #0
 800b428:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b42a:	2003      	movs	r0, #3
 800b42c:	f001 fbfc 	bl	800cc28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b430:	2000      	movs	r0, #0
 800b432:	f000 f80d 	bl	800b450 <HAL_InitTick>
 800b436:	4603      	mov	r3, r0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d002      	beq.n	800b442 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800b43c:	2301      	movs	r3, #1
 800b43e:	71fb      	strb	r3, [r7, #7]
 800b440:	e001      	b.n	800b446 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800b442:	f7f7 fb3f 	bl	8002ac4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800b446:	79fb      	ldrb	r3, [r7, #7]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3708      	adds	r7, #8
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800b458:	2300      	movs	r3, #0
 800b45a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800b45c:	4b17      	ldr	r3, [pc, #92]	; (800b4bc <HAL_InitTick+0x6c>)
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d023      	beq.n	800b4ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800b464:	4b16      	ldr	r3, [pc, #88]	; (800b4c0 <HAL_InitTick+0x70>)
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	4b14      	ldr	r3, [pc, #80]	; (800b4bc <HAL_InitTick+0x6c>)
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	4619      	mov	r1, r3
 800b46e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b472:	fbb3 f3f1 	udiv	r3, r3, r1
 800b476:	fbb2 f3f3 	udiv	r3, r2, r3
 800b47a:	4618      	mov	r0, r3
 800b47c:	f001 fc17 	bl	800ccae <HAL_SYSTICK_Config>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d10f      	bne.n	800b4a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2b0f      	cmp	r3, #15
 800b48a:	d809      	bhi.n	800b4a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b48c:	2200      	movs	r2, #0
 800b48e:	6879      	ldr	r1, [r7, #4]
 800b490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b494:	f001 fbd3 	bl	800cc3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800b498:	4a0a      	ldr	r2, [pc, #40]	; (800b4c4 <HAL_InitTick+0x74>)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6013      	str	r3, [r2, #0]
 800b49e:	e007      	b.n	800b4b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	73fb      	strb	r3, [r7, #15]
 800b4a4:	e004      	b.n	800b4b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	73fb      	strb	r3, [r7, #15]
 800b4aa:	e001      	b.n	800b4b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800b4b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3710      	adds	r7, #16
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	20000554 	.word	0x20000554
 800b4c0:	20000194 	.word	0x20000194
 800b4c4:	20000550 	.word	0x20000550

0800b4c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800b4cc:	4b06      	ldr	r3, [pc, #24]	; (800b4e8 <HAL_IncTick+0x20>)
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	4b06      	ldr	r3, [pc, #24]	; (800b4ec <HAL_IncTick+0x24>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4413      	add	r3, r2
 800b4d8:	4a04      	ldr	r2, [pc, #16]	; (800b4ec <HAL_IncTick+0x24>)
 800b4da:	6013      	str	r3, [r2, #0]
}
 800b4dc:	bf00      	nop
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop
 800b4e8:	20000554 	.word	0x20000554
 800b4ec:	200013a8 	.word	0x200013a8

0800b4f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	af00      	add	r7, sp, #0
  return uwTick;
 800b4f4:	4b03      	ldr	r3, [pc, #12]	; (800b504 <HAL_GetTick+0x14>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop
 800b504:	200013a8 	.word	0x200013a8

0800b508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b510:	f7ff ffee 	bl	800b4f0 <HAL_GetTick>
 800b514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b520:	d005      	beq.n	800b52e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800b522:	4b0a      	ldr	r3, [pc, #40]	; (800b54c <HAL_Delay+0x44>)
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	461a      	mov	r2, r3
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	4413      	add	r3, r2
 800b52c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b52e:	bf00      	nop
 800b530:	f7ff ffde 	bl	800b4f0 <HAL_GetTick>
 800b534:	4602      	mov	r2, r0
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	1ad3      	subs	r3, r2, r3
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d8f7      	bhi.n	800b530 <HAL_Delay+0x28>
  {
  }
}
 800b540:	bf00      	nop
 800b542:	bf00      	nop
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	20000554 	.word	0x20000554

0800b550 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800b550:	b480      	push	{r7}
 800b552:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800b554:	4b05      	ldr	r3, [pc, #20]	; (800b56c <HAL_SuspendTick+0x1c>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a04      	ldr	r2, [pc, #16]	; (800b56c <HAL_SuspendTick+0x1c>)
 800b55a:	f023 0302 	bic.w	r3, r3, #2
 800b55e:	6013      	str	r3, [r2, #0]
}
 800b560:	bf00      	nop
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr
 800b56a:	bf00      	nop
 800b56c:	e000e010 	.word	0xe000e010

0800b570 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800b570:	b480      	push	{r7}
 800b572:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800b574:	4b05      	ldr	r3, [pc, #20]	; (800b58c <HAL_ResumeTick+0x1c>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4a04      	ldr	r2, [pc, #16]	; (800b58c <HAL_ResumeTick+0x1c>)
 800b57a:	f043 0302 	orr.w	r3, r3, #2
 800b57e:	6013      	str	r3, [r2, #0]
}
 800b580:	bf00      	nop
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	e000e010 	.word	0xe000e010

0800b590 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800b590:	b480      	push	{r7}
 800b592:	b083      	sub	sp, #12
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	431a      	orrs	r2, r3
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	609a      	str	r2, [r3, #8]
}
 800b5aa:	bf00      	nop
 800b5ac:	370c      	adds	r7, #12
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr

0800b5b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800b5b6:	b480      	push	{r7}
 800b5b8:	b083      	sub	sp, #12
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
 800b5be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	689b      	ldr	r3, [r3, #8]
 800b5c4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	431a      	orrs	r2, r3
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	609a      	str	r2, [r3, #8]
}
 800b5d0:	bf00      	nop
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	689b      	ldr	r3, [r3, #8]
 800b5e8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	370c      	adds	r7, #12
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr

0800b5f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b087      	sub	sp, #28
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	60b9      	str	r1, [r7, #8]
 800b602:	607a      	str	r2, [r7, #4]
 800b604:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	3360      	adds	r3, #96	; 0x60
 800b60a:	461a      	mov	r2, r3
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	009b      	lsls	r3, r3, #2
 800b610:	4413      	add	r3, r2
 800b612:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	4b08      	ldr	r3, [pc, #32]	; (800b63c <LL_ADC_SetOffset+0x44>)
 800b61a:	4013      	ands	r3, r2
 800b61c:	687a      	ldr	r2, [r7, #4]
 800b61e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800b622:	683a      	ldr	r2, [r7, #0]
 800b624:	430a      	orrs	r2, r1
 800b626:	4313      	orrs	r3, r2
 800b628:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800b630:	bf00      	nop
 800b632:	371c      	adds	r7, #28
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr
 800b63c:	03fff000 	.word	0x03fff000

0800b640 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800b640:	b480      	push	{r7}
 800b642:	b085      	sub	sp, #20
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	3360      	adds	r3, #96	; 0x60
 800b64e:	461a      	mov	r2, r3
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	4413      	add	r3, r2
 800b656:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800b660:	4618      	mov	r0, r3
 800b662:	3714      	adds	r7, #20
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr

0800b66c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b087      	sub	sp, #28
 800b670:	af00      	add	r7, sp, #0
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	60b9      	str	r1, [r7, #8]
 800b676:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	3360      	adds	r3, #96	; 0x60
 800b67c:	461a      	mov	r2, r3
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	4413      	add	r3, r2
 800b684:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	431a      	orrs	r2, r3
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800b696:	bf00      	nop
 800b698:	371c      	adds	r7, #28
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr

0800b6a2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800b6a2:	b480      	push	{r7}
 800b6a4:	b083      	sub	sp, #12
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
 800b6aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	695b      	ldr	r3, [r3, #20]
 800b6b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	431a      	orrs	r2, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	615a      	str	r2, [r3, #20]
}
 800b6bc:	bf00      	nop
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	68db      	ldr	r3, [r3, #12]
 800b6d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d101      	bne.n	800b6e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800b6dc:	2301      	movs	r3, #1
 800b6de:	e000      	b.n	800b6e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800b6e0:	2300      	movs	r3, #0
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	370c      	adds	r7, #12
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr

0800b6ee <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800b6ee:	b480      	push	{r7}
 800b6f0:	b087      	sub	sp, #28
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	60f8      	str	r0, [r7, #12]
 800b6f6:	60b9      	str	r1, [r7, #8]
 800b6f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	3330      	adds	r3, #48	; 0x30
 800b6fe:	461a      	mov	r2, r3
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	0a1b      	lsrs	r3, r3, #8
 800b704:	009b      	lsls	r3, r3, #2
 800b706:	f003 030c 	and.w	r3, r3, #12
 800b70a:	4413      	add	r3, r2
 800b70c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	f003 031f 	and.w	r3, r3, #31
 800b718:	211f      	movs	r1, #31
 800b71a:	fa01 f303 	lsl.w	r3, r1, r3
 800b71e:	43db      	mvns	r3, r3
 800b720:	401a      	ands	r2, r3
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	0e9b      	lsrs	r3, r3, #26
 800b726:	f003 011f 	and.w	r1, r3, #31
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	f003 031f 	and.w	r3, r3, #31
 800b730:	fa01 f303 	lsl.w	r3, r1, r3
 800b734:	431a      	orrs	r2, r3
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800b73a:	bf00      	nop
 800b73c:	371c      	adds	r7, #28
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr

0800b746 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800b746:	b480      	push	{r7}
 800b748:	b087      	sub	sp, #28
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	60f8      	str	r0, [r7, #12]
 800b74e:	60b9      	str	r1, [r7, #8]
 800b750:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	3314      	adds	r3, #20
 800b756:	461a      	mov	r2, r3
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	0e5b      	lsrs	r3, r3, #25
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	f003 0304 	and.w	r3, r3, #4
 800b762:	4413      	add	r3, r2
 800b764:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	681a      	ldr	r2, [r3, #0]
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	0d1b      	lsrs	r3, r3, #20
 800b76e:	f003 031f 	and.w	r3, r3, #31
 800b772:	2107      	movs	r1, #7
 800b774:	fa01 f303 	lsl.w	r3, r1, r3
 800b778:	43db      	mvns	r3, r3
 800b77a:	401a      	ands	r2, r3
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	0d1b      	lsrs	r3, r3, #20
 800b780:	f003 031f 	and.w	r3, r3, #31
 800b784:	6879      	ldr	r1, [r7, #4]
 800b786:	fa01 f303 	lsl.w	r3, r1, r3
 800b78a:	431a      	orrs	r2, r3
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800b790:	bf00      	nop
 800b792:	371c      	adds	r7, #28
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b085      	sub	sp, #20
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b7b4:	43db      	mvns	r3, r3
 800b7b6:	401a      	ands	r2, r3
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f003 0318 	and.w	r3, r3, #24
 800b7be:	4908      	ldr	r1, [pc, #32]	; (800b7e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 800b7c0:	40d9      	lsrs	r1, r3
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	400b      	ands	r3, r1
 800b7c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b7ca:	431a      	orrs	r2, r3
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800b7d2:	bf00      	nop
 800b7d4:	3714      	adds	r7, #20
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr
 800b7de:	bf00      	nop
 800b7e0:	0007ffff 	.word	0x0007ffff

0800b7e4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	689b      	ldr	r3, [r3, #8]
 800b7f0:	f003 031f 	and.w	r3, r3, #31
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	370c      	adds	r7, #12
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr

0800b800 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b800:	b480      	push	{r7}
 800b802:	b083      	sub	sp, #12
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	689b      	ldr	r3, [r3, #8]
 800b80c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800b810:	4618      	mov	r0, r3
 800b812:	370c      	adds	r7, #12
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	689b      	ldr	r3, [r3, #8]
 800b828:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800b82c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	6093      	str	r3, [r2, #8]
}
 800b834:	bf00      	nop
 800b836:	370c      	adds	r7, #12
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr

0800b840 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	689b      	ldr	r3, [r3, #8]
 800b84c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b854:	d101      	bne.n	800b85a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800b856:	2301      	movs	r3, #1
 800b858:	e000      	b.n	800b85c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800b85a:	2300      	movs	r3, #0
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	370c      	adds	r7, #12
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr

0800b868 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800b878:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b87c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800b884:	bf00      	nop
 800b886:	370c      	adds	r7, #12
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr

0800b890 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	689b      	ldr	r3, [r3, #8]
 800b89c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8a4:	d101      	bne.n	800b8aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	e000      	b.n	800b8ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800b8aa:	2300      	movs	r3, #0
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	370c      	adds	r7, #12
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b083      	sub	sp, #12
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	689b      	ldr	r3, [r3, #8]
 800b8c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b8c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b8cc:	f043 0201 	orr.w	r2, r3, #1
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800b8d4:	bf00      	nop
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b083      	sub	sp, #12
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	f003 0301 	and.w	r3, r3, #1
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	d101      	bne.n	800b8f8 <LL_ADC_IsEnabled+0x18>
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	e000      	b.n	800b8fa <LL_ADC_IsEnabled+0x1a>
 800b8f8:	2300      	movs	r3, #0
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	370c      	adds	r7, #12
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr

0800b906 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800b906:	b480      	push	{r7}
 800b908:	b083      	sub	sp, #12
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	689b      	ldr	r3, [r3, #8]
 800b912:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b916:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b91a:	f043 0204 	orr.w	r2, r3, #4
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800b922:	bf00      	nop
 800b924:	370c      	adds	r7, #12
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr

0800b92e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800b92e:	b480      	push	{r7}
 800b930:	b083      	sub	sp, #12
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	f003 0304 	and.w	r3, r3, #4
 800b93e:	2b04      	cmp	r3, #4
 800b940:	d101      	bne.n	800b946 <LL_ADC_REG_IsConversionOngoing+0x18>
 800b942:	2301      	movs	r3, #1
 800b944:	e000      	b.n	800b948 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b946:	2300      	movs	r3, #0
}
 800b948:	4618      	mov	r0, r3
 800b94a:	370c      	adds	r7, #12
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	689b      	ldr	r3, [r3, #8]
 800b960:	f003 0308 	and.w	r3, r3, #8
 800b964:	2b08      	cmp	r3, #8
 800b966:	d101      	bne.n	800b96c <LL_ADC_INJ_IsConversionOngoing+0x18>
 800b968:	2301      	movs	r3, #1
 800b96a:	e000      	b.n	800b96e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	370c      	adds	r7, #12
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr
	...

0800b97c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b97c:	b590      	push	{r4, r7, lr}
 800b97e:	b089      	sub	sp, #36	; 0x24
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b984:	2300      	movs	r3, #0
 800b986:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800b988:	2300      	movs	r3, #0
 800b98a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d101      	bne.n	800b996 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800b992:	2301      	movs	r3, #1
 800b994:	e139      	b.n	800bc0a <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	691b      	ldr	r3, [r3, #16]
 800b99a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d109      	bne.n	800b9b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f7f5 fa71 	bl	8000e8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f7ff ff3f 	bl	800b840 <LL_ADC_IsDeepPowerDownEnabled>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d004      	beq.n	800b9d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7ff ff25 	bl	800b81c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7ff ff5a 	bl	800b890 <LL_ADC_IsInternalRegulatorEnabled>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d115      	bne.n	800ba0e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7ff ff3e 	bl	800b868 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b9ec:	4b89      	ldr	r3, [pc, #548]	; (800bc14 <HAL_ADC_Init+0x298>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	099b      	lsrs	r3, r3, #6
 800b9f2:	4a89      	ldr	r2, [pc, #548]	; (800bc18 <HAL_ADC_Init+0x29c>)
 800b9f4:	fba2 2303 	umull	r2, r3, r2, r3
 800b9f8:	099b      	lsrs	r3, r3, #6
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	005b      	lsls	r3, r3, #1
 800b9fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800ba00:	e002      	b.n	800ba08 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	3b01      	subs	r3, #1
 800ba06:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d1f9      	bne.n	800ba02 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7ff ff3c 	bl	800b890 <LL_ADC_IsInternalRegulatorEnabled>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d10d      	bne.n	800ba3a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba22:	f043 0210 	orr.w	r2, r3, #16
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba2e:	f043 0201 	orr.w	r2, r3, #1
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800ba36:	2301      	movs	r3, #1
 800ba38:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f7ff ff75 	bl	800b92e <LL_ADC_REG_IsConversionOngoing>
 800ba44:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba4a:	f003 0310 	and.w	r3, r3, #16
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	f040 80d2 	bne.w	800bbf8 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	f040 80ce 	bne.w	800bbf8 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba60:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800ba64:	f043 0202 	orr.w	r2, r3, #2
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4618      	mov	r0, r3
 800ba72:	f7ff ff35 	bl	800b8e0 <LL_ADC_IsEnabled>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d115      	bne.n	800baa8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ba7c:	4867      	ldr	r0, [pc, #412]	; (800bc1c <HAL_ADC_Init+0x2a0>)
 800ba7e:	f7ff ff2f 	bl	800b8e0 <LL_ADC_IsEnabled>
 800ba82:	4604      	mov	r4, r0
 800ba84:	4866      	ldr	r0, [pc, #408]	; (800bc20 <HAL_ADC_Init+0x2a4>)
 800ba86:	f7ff ff2b 	bl	800b8e0 <LL_ADC_IsEnabled>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	431c      	orrs	r4, r3
 800ba8e:	4865      	ldr	r0, [pc, #404]	; (800bc24 <HAL_ADC_Init+0x2a8>)
 800ba90:	f7ff ff26 	bl	800b8e0 <LL_ADC_IsEnabled>
 800ba94:	4603      	mov	r3, r0
 800ba96:	4323      	orrs	r3, r4
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d105      	bne.n	800baa8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	4619      	mov	r1, r3
 800baa2:	4861      	ldr	r0, [pc, #388]	; (800bc28 <HAL_ADC_Init+0x2ac>)
 800baa4:	f7ff fd74 	bl	800b590 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	7e5b      	ldrb	r3, [r3, #25]
 800baac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800bab2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800bab8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800babe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bac6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800bac8:	4313      	orrs	r3, r2
 800baca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d106      	bne.n	800bae4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bada:	3b01      	subs	r3, #1
 800badc:	045b      	lsls	r3, r3, #17
 800bade:	69ba      	ldr	r2, [r7, #24]
 800bae0:	4313      	orrs	r3, r2
 800bae2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d009      	beq.n	800bb00 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baf0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800bafa:	69ba      	ldr	r2, [r7, #24]
 800bafc:	4313      	orrs	r3, r2
 800bafe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	68da      	ldr	r2, [r3, #12]
 800bb06:	4b49      	ldr	r3, [pc, #292]	; (800bc2c <HAL_ADC_Init+0x2b0>)
 800bb08:	4013      	ands	r3, r2
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	6812      	ldr	r2, [r2, #0]
 800bb0e:	69b9      	ldr	r1, [r7, #24]
 800bb10:	430b      	orrs	r3, r1
 800bb12:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7ff ff08 	bl	800b92e <LL_ADC_REG_IsConversionOngoing>
 800bb1e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7ff ff15 	bl	800b954 <LL_ADC_INJ_IsConversionOngoing>
 800bb2a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d140      	bne.n	800bbb4 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d13d      	bne.n	800bbb4 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	7e1b      	ldrb	r3, [r3, #24]
 800bb40:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800bb42:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb4a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb5a:	f023 0306 	bic.w	r3, r3, #6
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	6812      	ldr	r2, [r2, #0]
 800bb62:	69b9      	ldr	r1, [r7, #24]
 800bb64:	430b      	orrs	r3, r1
 800bb66:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d118      	bne.n	800bba4 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	691b      	ldr	r3, [r3, #16]
 800bb78:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bb7c:	f023 0304 	bic.w	r3, r3, #4
 800bb80:	687a      	ldr	r2, [r7, #4]
 800bb82:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800bb88:	4311      	orrs	r1, r2
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800bb8e:	4311      	orrs	r1, r2
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bb94:	430a      	orrs	r2, r1
 800bb96:	431a      	orrs	r2, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f042 0201 	orr.w	r2, r2, #1
 800bba0:	611a      	str	r2, [r3, #16]
 800bba2:	e007      	b.n	800bbb4 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	691a      	ldr	r2, [r3, #16]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f022 0201 	bic.w	r2, r2, #1
 800bbb2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	691b      	ldr	r3, [r3, #16]
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d10c      	bne.n	800bbd6 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbc2:	f023 010f 	bic.w	r1, r3, #15
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	69db      	ldr	r3, [r3, #28]
 800bbca:	1e5a      	subs	r2, r3, #1
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	430a      	orrs	r2, r1
 800bbd2:	631a      	str	r2, [r3, #48]	; 0x30
 800bbd4:	e007      	b.n	800bbe6 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f022 020f 	bic.w	r2, r2, #15
 800bbe4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbea:	f023 0303 	bic.w	r3, r3, #3
 800bbee:	f043 0201 	orr.w	r2, r3, #1
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	659a      	str	r2, [r3, #88]	; 0x58
 800bbf6:	e007      	b.n	800bc08 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbfc:	f043 0210 	orr.w	r2, r3, #16
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800bc04:	2301      	movs	r3, #1
 800bc06:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800bc08:	7ffb      	ldrb	r3, [r7, #31]
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3724      	adds	r7, #36	; 0x24
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd90      	pop	{r4, r7, pc}
 800bc12:	bf00      	nop
 800bc14:	20000194 	.word	0x20000194
 800bc18:	053e2d63 	.word	0x053e2d63
 800bc1c:	50040000 	.word	0x50040000
 800bc20:	50040100 	.word	0x50040100
 800bc24:	50040200 	.word	0x50040200
 800bc28:	50040300 	.word	0x50040300
 800bc2c:	fff0c007 	.word	0xfff0c007

0800bc30 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800bc38:	4857      	ldr	r0, [pc, #348]	; (800bd98 <HAL_ADC_Start+0x168>)
 800bc3a:	f7ff fdd3 	bl	800b7e4 <LL_ADC_GetMultimode>
 800bc3e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7ff fe72 	bl	800b92e <LL_ADC_REG_IsConversionOngoing>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f040 809c 	bne.w	800bd8a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d101      	bne.n	800bc60 <HAL_ADC_Start+0x30>
 800bc5c:	2302      	movs	r3, #2
 800bc5e:	e097      	b.n	800bd90 <HAL_ADC_Start+0x160>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2201      	movs	r2, #1
 800bc64:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 fd8d 	bl	800c788 <ADC_Enable>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800bc72:	7dfb      	ldrb	r3, [r7, #23]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f040 8083 	bne.w	800bd80 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc7e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bc82:	f023 0301 	bic.w	r3, r3, #1
 800bc86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4a42      	ldr	r2, [pc, #264]	; (800bd9c <HAL_ADC_Start+0x16c>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d002      	beq.n	800bc9e <HAL_ADC_Start+0x6e>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	e000      	b.n	800bca0 <HAL_ADC_Start+0x70>
 800bc9e:	4b40      	ldr	r3, [pc, #256]	; (800bda0 <HAL_ADC_Start+0x170>)
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	6812      	ldr	r2, [r2, #0]
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d002      	beq.n	800bcae <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d105      	bne.n	800bcba <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcb2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bcc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcc6:	d106      	bne.n	800bcd6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bccc:	f023 0206 	bic.w	r2, r3, #6
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	65da      	str	r2, [r3, #92]	; 0x5c
 800bcd4:	e002      	b.n	800bcdc <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	221c      	movs	r2, #28
 800bce2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2200      	movs	r2, #0
 800bce8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a2a      	ldr	r2, [pc, #168]	; (800bd9c <HAL_ADC_Start+0x16c>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d002      	beq.n	800bcfc <HAL_ADC_Start+0xcc>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	e000      	b.n	800bcfe <HAL_ADC_Start+0xce>
 800bcfc:	4b28      	ldr	r3, [pc, #160]	; (800bda0 <HAL_ADC_Start+0x170>)
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	6812      	ldr	r2, [r2, #0]
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d008      	beq.n	800bd18 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d005      	beq.n	800bd18 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	2b05      	cmp	r3, #5
 800bd10:	d002      	beq.n	800bd18 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	2b09      	cmp	r3, #9
 800bd16:	d114      	bne.n	800bd42 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	68db      	ldr	r3, [r3, #12]
 800bd1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d007      	beq.n	800bd36 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800bd2e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7ff fde3 	bl	800b906 <LL_ADC_REG_StartConversion>
 800bd40:	e025      	b.n	800bd8e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	4a12      	ldr	r2, [pc, #72]	; (800bd9c <HAL_ADC_Start+0x16c>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d002      	beq.n	800bd5e <HAL_ADC_Start+0x12e>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	e000      	b.n	800bd60 <HAL_ADC_Start+0x130>
 800bd5e:	4b10      	ldr	r3, [pc, #64]	; (800bda0 <HAL_ADC_Start+0x170>)
 800bd60:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	68db      	ldr	r3, [r3, #12]
 800bd66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d00f      	beq.n	800bd8e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800bd76:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	659a      	str	r2, [r3, #88]	; 0x58
 800bd7e:	e006      	b.n	800bd8e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2200      	movs	r2, #0
 800bd84:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800bd88:	e001      	b.n	800bd8e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800bd8a:	2302      	movs	r3, #2
 800bd8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800bd8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3718      	adds	r7, #24
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	50040300 	.word	0x50040300
 800bd9c:	50040100 	.word	0x50040100
 800bda0:	50040000 	.word	0x50040000

0800bda4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b088      	sub	sp, #32
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800bdae:	4866      	ldr	r0, [pc, #408]	; (800bf48 <HAL_ADC_PollForConversion+0x1a4>)
 800bdb0:	f7ff fd18 	bl	800b7e4 <LL_ADC_GetMultimode>
 800bdb4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	695b      	ldr	r3, [r3, #20]
 800bdba:	2b08      	cmp	r3, #8
 800bdbc:	d102      	bne.n	800bdc4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800bdbe:	2308      	movs	r3, #8
 800bdc0:	61fb      	str	r3, [r7, #28]
 800bdc2:	e02a      	b.n	800be1a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d005      	beq.n	800bdd6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	2b05      	cmp	r3, #5
 800bdce:	d002      	beq.n	800bdd6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	2b09      	cmp	r3, #9
 800bdd4:	d111      	bne.n	800bdfa <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	68db      	ldr	r3, [r3, #12]
 800bddc:	f003 0301 	and.w	r3, r3, #1
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d007      	beq.n	800bdf4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bde8:	f043 0220 	orr.w	r2, r3, #32
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	e0a4      	b.n	800bf3e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800bdf4:	2304      	movs	r3, #4
 800bdf6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800bdf8:	e00f      	b.n	800be1a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800bdfa:	4853      	ldr	r0, [pc, #332]	; (800bf48 <HAL_ADC_PollForConversion+0x1a4>)
 800bdfc:	f7ff fd00 	bl	800b800 <LL_ADC_GetMultiDMATransfer>
 800be00:	4603      	mov	r3, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d007      	beq.n	800be16 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be0a:	f043 0220 	orr.w	r2, r3, #32
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 800be12:	2301      	movs	r3, #1
 800be14:	e093      	b.n	800bf3e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800be16:	2304      	movs	r3, #4
 800be18:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800be1a:	f7ff fb69 	bl	800b4f0 <HAL_GetTick>
 800be1e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800be20:	e021      	b.n	800be66 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be28:	d01d      	beq.n	800be66 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800be2a:	f7ff fb61 	bl	800b4f0 <HAL_GetTick>
 800be2e:	4602      	mov	r2, r0
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	1ad3      	subs	r3, r2, r3
 800be34:	683a      	ldr	r2, [r7, #0]
 800be36:	429a      	cmp	r2, r3
 800be38:	d302      	bcc.n	800be40 <HAL_ADC_PollForConversion+0x9c>
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d112      	bne.n	800be66 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	681a      	ldr	r2, [r3, #0]
 800be46:	69fb      	ldr	r3, [r7, #28]
 800be48:	4013      	ands	r3, r2
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d10b      	bne.n	800be66 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be52:	f043 0204 	orr.w	r2, r3, #4
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2200      	movs	r2, #0
 800be5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800be62:	2303      	movs	r3, #3
 800be64:	e06b      	b.n	800bf3e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	69fb      	ldr	r3, [r7, #28]
 800be6e:	4013      	ands	r3, r2
 800be70:	2b00      	cmp	r3, #0
 800be72:	d0d6      	beq.n	800be22 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4618      	mov	r0, r3
 800be86:	f7ff fc1f 	bl	800b6c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800be8a:	4603      	mov	r3, r0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d01c      	beq.n	800beca <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	7e5b      	ldrb	r3, [r3, #25]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d118      	bne.n	800beca <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f003 0308 	and.w	r3, r3, #8
 800bea2:	2b08      	cmp	r3, #8
 800bea4:	d111      	bne.n	800beca <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800beaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800beb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d105      	bne.n	800beca <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bec2:	f043 0201 	orr.w	r2, r3, #1
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4a1f      	ldr	r2, [pc, #124]	; (800bf4c <HAL_ADC_PollForConversion+0x1a8>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d002      	beq.n	800beda <HAL_ADC_PollForConversion+0x136>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	e000      	b.n	800bedc <HAL_ADC_PollForConversion+0x138>
 800beda:	4b1d      	ldr	r3, [pc, #116]	; (800bf50 <HAL_ADC_PollForConversion+0x1ac>)
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	6812      	ldr	r2, [r2, #0]
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d008      	beq.n	800bef6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d005      	beq.n	800bef6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	2b05      	cmp	r3, #5
 800beee:	d002      	beq.n	800bef6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	2b09      	cmp	r3, #9
 800bef4:	d104      	bne.n	800bf00 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	68db      	ldr	r3, [r3, #12]
 800befc:	61bb      	str	r3, [r7, #24]
 800befe:	e00c      	b.n	800bf1a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a11      	ldr	r2, [pc, #68]	; (800bf4c <HAL_ADC_PollForConversion+0x1a8>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d002      	beq.n	800bf10 <HAL_ADC_PollForConversion+0x16c>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	e000      	b.n	800bf12 <HAL_ADC_PollForConversion+0x16e>
 800bf10:	4b0f      	ldr	r3, [pc, #60]	; (800bf50 <HAL_ADC_PollForConversion+0x1ac>)
 800bf12:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	68db      	ldr	r3, [r3, #12]
 800bf18:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800bf1a:	69fb      	ldr	r3, [r7, #28]
 800bf1c:	2b08      	cmp	r3, #8
 800bf1e:	d104      	bne.n	800bf2a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2208      	movs	r2, #8
 800bf26:	601a      	str	r2, [r3, #0]
 800bf28:	e008      	b.n	800bf3c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800bf2a:	69bb      	ldr	r3, [r7, #24]
 800bf2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d103      	bne.n	800bf3c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	220c      	movs	r2, #12
 800bf3a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800bf3c:	2300      	movs	r3, #0
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3720      	adds	r7, #32
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	50040300 	.word	0x50040300
 800bf4c:	50040100 	.word	0x50040100
 800bf50:	50040000 	.word	0x50040000

0800bf54 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b083      	sub	sp, #12
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	370c      	adds	r7, #12
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr
	...

0800bf70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b0b6      	sub	sp, #216	; 0xd8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800bf80:	2300      	movs	r3, #0
 800bf82:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	d101      	bne.n	800bf92 <HAL_ADC_ConfigChannel+0x22>
 800bf8e:	2302      	movs	r3, #2
 800bf90:	e3e3      	b.n	800c75a <HAL_ADC_ConfigChannel+0x7ea>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2201      	movs	r2, #1
 800bf96:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7ff fcc5 	bl	800b92e <LL_ADC_REG_IsConversionOngoing>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	f040 83c4 	bne.w	800c734 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	2b05      	cmp	r3, #5
 800bfb2:	d824      	bhi.n	800bffe <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	3b02      	subs	r3, #2
 800bfba:	2b03      	cmp	r3, #3
 800bfbc:	d81b      	bhi.n	800bff6 <HAL_ADC_ConfigChannel+0x86>
 800bfbe:	a201      	add	r2, pc, #4	; (adr r2, 800bfc4 <HAL_ADC_ConfigChannel+0x54>)
 800bfc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfc4:	0800bfd5 	.word	0x0800bfd5
 800bfc8:	0800bfdd 	.word	0x0800bfdd
 800bfcc:	0800bfe5 	.word	0x0800bfe5
 800bfd0:	0800bfed 	.word	0x0800bfed
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	220c      	movs	r2, #12
 800bfd8:	605a      	str	r2, [r3, #4]
          break;
 800bfda:	e011      	b.n	800c000 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	2212      	movs	r2, #18
 800bfe0:	605a      	str	r2, [r3, #4]
          break;
 800bfe2:	e00d      	b.n	800c000 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	2218      	movs	r2, #24
 800bfe8:	605a      	str	r2, [r3, #4]
          break;
 800bfea:	e009      	b.n	800c000 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bff2:	605a      	str	r2, [r3, #4]
          break;
 800bff4:	e004      	b.n	800c000 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	2206      	movs	r2, #6
 800bffa:	605a      	str	r2, [r3, #4]
          break;
 800bffc:	e000      	b.n	800c000 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800bffe:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6818      	ldr	r0, [r3, #0]
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	6859      	ldr	r1, [r3, #4]
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	461a      	mov	r2, r3
 800c00e:	f7ff fb6e 	bl	800b6ee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4618      	mov	r0, r3
 800c018:	f7ff fc89 	bl	800b92e <LL_ADC_REG_IsConversionOngoing>
 800c01c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4618      	mov	r0, r3
 800c026:	f7ff fc95 	bl	800b954 <LL_ADC_INJ_IsConversionOngoing>
 800c02a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800c02e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c032:	2b00      	cmp	r3, #0
 800c034:	f040 81c1 	bne.w	800c3ba <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800c038:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	f040 81bc 	bne.w	800c3ba <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	689b      	ldr	r3, [r3, #8]
 800c046:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c04a:	d10f      	bne.n	800c06c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6818      	ldr	r0, [r3, #0]
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2200      	movs	r2, #0
 800c056:	4619      	mov	r1, r3
 800c058:	f7ff fb75 	bl	800b746 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c064:	4618      	mov	r0, r3
 800c066:	f7ff fb1c 	bl	800b6a2 <LL_ADC_SetSamplingTimeCommonConfig>
 800c06a:	e00e      	b.n	800c08a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6818      	ldr	r0, [r3, #0]
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	6819      	ldr	r1, [r3, #0]
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	689b      	ldr	r3, [r3, #8]
 800c078:	461a      	mov	r2, r3
 800c07a:	f7ff fb64 	bl	800b746 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	2100      	movs	r1, #0
 800c084:	4618      	mov	r0, r3
 800c086:	f7ff fb0c 	bl	800b6a2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	695a      	ldr	r2, [r3, #20]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	08db      	lsrs	r3, r3, #3
 800c096:	f003 0303 	and.w	r3, r3, #3
 800c09a:	005b      	lsls	r3, r3, #1
 800c09c:	fa02 f303 	lsl.w	r3, r2, r3
 800c0a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	691b      	ldr	r3, [r3, #16]
 800c0a8:	2b04      	cmp	r3, #4
 800c0aa:	d00a      	beq.n	800c0c2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6818      	ldr	r0, [r3, #0]
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	6919      	ldr	r1, [r3, #16]
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	681a      	ldr	r2, [r3, #0]
 800c0b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c0bc:	f7ff fa9c 	bl	800b5f8 <LL_ADC_SetOffset>
 800c0c0:	e17b      	b.n	800c3ba <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	2100      	movs	r1, #0
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7ff fab9 	bl	800b640 <LL_ADC_GetOffsetChannel>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d10a      	bne.n	800c0ee <HAL_ADC_ConfigChannel+0x17e>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	2100      	movs	r1, #0
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f7ff faae 	bl	800b640 <LL_ADC_GetOffsetChannel>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	0e9b      	lsrs	r3, r3, #26
 800c0e8:	f003 021f 	and.w	r2, r3, #31
 800c0ec:	e01e      	b.n	800c12c <HAL_ADC_ConfigChannel+0x1bc>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	2100      	movs	r1, #0
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7ff faa3 	bl	800b640 <LL_ADC_GetOffsetChannel>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c100:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c104:	fa93 f3a3 	rbit	r3, r3
 800c108:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800c10c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c110:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800c114:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d101      	bne.n	800c120 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800c11c:	2320      	movs	r3, #32
 800c11e:	e004      	b.n	800c12a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800c120:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c124:	fab3 f383 	clz	r3, r3
 800c128:	b2db      	uxtb	r3, r3
 800c12a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c134:	2b00      	cmp	r3, #0
 800c136:	d105      	bne.n	800c144 <HAL_ADC_ConfigChannel+0x1d4>
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	0e9b      	lsrs	r3, r3, #26
 800c13e:	f003 031f 	and.w	r3, r3, #31
 800c142:	e018      	b.n	800c176 <HAL_ADC_ConfigChannel+0x206>
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c14c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c150:	fa93 f3a3 	rbit	r3, r3
 800c154:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800c158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c15c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800c160:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c164:	2b00      	cmp	r3, #0
 800c166:	d101      	bne.n	800c16c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800c168:	2320      	movs	r3, #32
 800c16a:	e004      	b.n	800c176 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800c16c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c170:	fab3 f383 	clz	r3, r3
 800c174:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800c176:	429a      	cmp	r2, r3
 800c178:	d106      	bne.n	800c188 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	2200      	movs	r2, #0
 800c180:	2100      	movs	r1, #0
 800c182:	4618      	mov	r0, r3
 800c184:	f7ff fa72 	bl	800b66c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2101      	movs	r1, #1
 800c18e:	4618      	mov	r0, r3
 800c190:	f7ff fa56 	bl	800b640 <LL_ADC_GetOffsetChannel>
 800c194:	4603      	mov	r3, r0
 800c196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d10a      	bne.n	800c1b4 <HAL_ADC_ConfigChannel+0x244>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	2101      	movs	r1, #1
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f7ff fa4b 	bl	800b640 <LL_ADC_GetOffsetChannel>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	0e9b      	lsrs	r3, r3, #26
 800c1ae:	f003 021f 	and.w	r2, r3, #31
 800c1b2:	e01e      	b.n	800c1f2 <HAL_ADC_ConfigChannel+0x282>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	2101      	movs	r1, #1
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7ff fa40 	bl	800b640 <LL_ADC_GetOffsetChannel>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c1c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c1ca:	fa93 f3a3 	rbit	r3, r3
 800c1ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800c1d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c1d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800c1da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d101      	bne.n	800c1e6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800c1e2:	2320      	movs	r3, #32
 800c1e4:	e004      	b.n	800c1f0 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800c1e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c1ea:	fab3 f383 	clz	r3, r3
 800c1ee:	b2db      	uxtb	r3, r3
 800c1f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d105      	bne.n	800c20a <HAL_ADC_ConfigChannel+0x29a>
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	0e9b      	lsrs	r3, r3, #26
 800c204:	f003 031f 	and.w	r3, r3, #31
 800c208:	e018      	b.n	800c23c <HAL_ADC_ConfigChannel+0x2cc>
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c212:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c216:	fa93 f3a3 	rbit	r3, r3
 800c21a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800c21e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c222:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800c226:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d101      	bne.n	800c232 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800c22e:	2320      	movs	r3, #32
 800c230:	e004      	b.n	800c23c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800c232:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c236:	fab3 f383 	clz	r3, r3
 800c23a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d106      	bne.n	800c24e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	2200      	movs	r2, #0
 800c246:	2101      	movs	r1, #1
 800c248:	4618      	mov	r0, r3
 800c24a:	f7ff fa0f 	bl	800b66c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	2102      	movs	r1, #2
 800c254:	4618      	mov	r0, r3
 800c256:	f7ff f9f3 	bl	800b640 <LL_ADC_GetOffsetChannel>
 800c25a:	4603      	mov	r3, r0
 800c25c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c260:	2b00      	cmp	r3, #0
 800c262:	d10a      	bne.n	800c27a <HAL_ADC_ConfigChannel+0x30a>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	2102      	movs	r1, #2
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7ff f9e8 	bl	800b640 <LL_ADC_GetOffsetChannel>
 800c270:	4603      	mov	r3, r0
 800c272:	0e9b      	lsrs	r3, r3, #26
 800c274:	f003 021f 	and.w	r2, r3, #31
 800c278:	e01e      	b.n	800c2b8 <HAL_ADC_ConfigChannel+0x348>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	2102      	movs	r1, #2
 800c280:	4618      	mov	r0, r3
 800c282:	f7ff f9dd 	bl	800b640 <LL_ADC_GetOffsetChannel>
 800c286:	4603      	mov	r3, r0
 800c288:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c28c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c290:	fa93 f3a3 	rbit	r3, r3
 800c294:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800c298:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c29c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800c2a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d101      	bne.n	800c2ac <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800c2a8:	2320      	movs	r3, #32
 800c2aa:	e004      	b.n	800c2b6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800c2ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c2b0:	fab3 f383 	clz	r3, r3
 800c2b4:	b2db      	uxtb	r3, r3
 800c2b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d105      	bne.n	800c2d0 <HAL_ADC_ConfigChannel+0x360>
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	0e9b      	lsrs	r3, r3, #26
 800c2ca:	f003 031f 	and.w	r3, r3, #31
 800c2ce:	e016      	b.n	800c2fe <HAL_ADC_ConfigChannel+0x38e>
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c2d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c2dc:	fa93 f3a3 	rbit	r3, r3
 800c2e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800c2e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c2e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800c2e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d101      	bne.n	800c2f4 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800c2f0:	2320      	movs	r3, #32
 800c2f2:	e004      	b.n	800c2fe <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800c2f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c2f8:	fab3 f383 	clz	r3, r3
 800c2fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d106      	bne.n	800c310 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	2200      	movs	r2, #0
 800c308:	2102      	movs	r1, #2
 800c30a:	4618      	mov	r0, r3
 800c30c:	f7ff f9ae 	bl	800b66c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	2103      	movs	r1, #3
 800c316:	4618      	mov	r0, r3
 800c318:	f7ff f992 	bl	800b640 <LL_ADC_GetOffsetChannel>
 800c31c:	4603      	mov	r3, r0
 800c31e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c322:	2b00      	cmp	r3, #0
 800c324:	d10a      	bne.n	800c33c <HAL_ADC_ConfigChannel+0x3cc>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	2103      	movs	r1, #3
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7ff f987 	bl	800b640 <LL_ADC_GetOffsetChannel>
 800c332:	4603      	mov	r3, r0
 800c334:	0e9b      	lsrs	r3, r3, #26
 800c336:	f003 021f 	and.w	r2, r3, #31
 800c33a:	e017      	b.n	800c36c <HAL_ADC_ConfigChannel+0x3fc>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2103      	movs	r1, #3
 800c342:	4618      	mov	r0, r3
 800c344:	f7ff f97c 	bl	800b640 <LL_ADC_GetOffsetChannel>
 800c348:	4603      	mov	r3, r0
 800c34a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c34c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c34e:	fa93 f3a3 	rbit	r3, r3
 800c352:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800c354:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c356:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800c358:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d101      	bne.n	800c362 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800c35e:	2320      	movs	r3, #32
 800c360:	e003      	b.n	800c36a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800c362:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c364:	fab3 f383 	clz	r3, r3
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c374:	2b00      	cmp	r3, #0
 800c376:	d105      	bne.n	800c384 <HAL_ADC_ConfigChannel+0x414>
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	0e9b      	lsrs	r3, r3, #26
 800c37e:	f003 031f 	and.w	r3, r3, #31
 800c382:	e011      	b.n	800c3a8 <HAL_ADC_ConfigChannel+0x438>
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c38a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c38c:	fa93 f3a3 	rbit	r3, r3
 800c390:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800c392:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c394:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800c396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d101      	bne.n	800c3a0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800c39c:	2320      	movs	r3, #32
 800c39e:	e003      	b.n	800c3a8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800c3a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3a2:	fab3 f383 	clz	r3, r3
 800c3a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d106      	bne.n	800c3ba <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	2103      	movs	r1, #3
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f7ff f959 	bl	800b66c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7ff fa8e 	bl	800b8e0 <LL_ADC_IsEnabled>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	f040 8140 	bne.w	800c64c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6818      	ldr	r0, [r3, #0]
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	6819      	ldr	r1, [r3, #0]
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	68db      	ldr	r3, [r3, #12]
 800c3d8:	461a      	mov	r2, r3
 800c3da:	f7ff f9df 	bl	800b79c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	68db      	ldr	r3, [r3, #12]
 800c3e2:	4a8f      	ldr	r2, [pc, #572]	; (800c620 <HAL_ADC_ConfigChannel+0x6b0>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	f040 8131 	bne.w	800c64c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d10b      	bne.n	800c412 <HAL_ADC_ConfigChannel+0x4a2>
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	0e9b      	lsrs	r3, r3, #26
 800c400:	3301      	adds	r3, #1
 800c402:	f003 031f 	and.w	r3, r3, #31
 800c406:	2b09      	cmp	r3, #9
 800c408:	bf94      	ite	ls
 800c40a:	2301      	movls	r3, #1
 800c40c:	2300      	movhi	r3, #0
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	e019      	b.n	800c446 <HAL_ADC_ConfigChannel+0x4d6>
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c41a:	fa93 f3a3 	rbit	r3, r3
 800c41e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800c420:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c422:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800c424:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c426:	2b00      	cmp	r3, #0
 800c428:	d101      	bne.n	800c42e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800c42a:	2320      	movs	r3, #32
 800c42c:	e003      	b.n	800c436 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800c42e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c430:	fab3 f383 	clz	r3, r3
 800c434:	b2db      	uxtb	r3, r3
 800c436:	3301      	adds	r3, #1
 800c438:	f003 031f 	and.w	r3, r3, #31
 800c43c:	2b09      	cmp	r3, #9
 800c43e:	bf94      	ite	ls
 800c440:	2301      	movls	r3, #1
 800c442:	2300      	movhi	r3, #0
 800c444:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c446:	2b00      	cmp	r3, #0
 800c448:	d079      	beq.n	800c53e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c452:	2b00      	cmp	r3, #0
 800c454:	d107      	bne.n	800c466 <HAL_ADC_ConfigChannel+0x4f6>
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	0e9b      	lsrs	r3, r3, #26
 800c45c:	3301      	adds	r3, #1
 800c45e:	069b      	lsls	r3, r3, #26
 800c460:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c464:	e015      	b.n	800c492 <HAL_ADC_ConfigChannel+0x522>
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c46c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c46e:	fa93 f3a3 	rbit	r3, r3
 800c472:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800c474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c476:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800c478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d101      	bne.n	800c482 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800c47e:	2320      	movs	r3, #32
 800c480:	e003      	b.n	800c48a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800c482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c484:	fab3 f383 	clz	r3, r3
 800c488:	b2db      	uxtb	r3, r3
 800c48a:	3301      	adds	r3, #1
 800c48c:	069b      	lsls	r3, r3, #26
 800c48e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d109      	bne.n	800c4b2 <HAL_ADC_ConfigChannel+0x542>
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	0e9b      	lsrs	r3, r3, #26
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	f003 031f 	and.w	r3, r3, #31
 800c4aa:	2101      	movs	r1, #1
 800c4ac:	fa01 f303 	lsl.w	r3, r1, r3
 800c4b0:	e017      	b.n	800c4e2 <HAL_ADC_ConfigChannel+0x572>
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c4b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4ba:	fa93 f3a3 	rbit	r3, r3
 800c4be:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800c4c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800c4c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d101      	bne.n	800c4ce <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800c4ca:	2320      	movs	r3, #32
 800c4cc:	e003      	b.n	800c4d6 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800c4ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4d0:	fab3 f383 	clz	r3, r3
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	f003 031f 	and.w	r3, r3, #31
 800c4dc:	2101      	movs	r1, #1
 800c4de:	fa01 f303 	lsl.w	r3, r1, r3
 800c4e2:	ea42 0103 	orr.w	r1, r2, r3
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d10a      	bne.n	800c508 <HAL_ADC_ConfigChannel+0x598>
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	0e9b      	lsrs	r3, r3, #26
 800c4f8:	3301      	adds	r3, #1
 800c4fa:	f003 021f 	and.w	r2, r3, #31
 800c4fe:	4613      	mov	r3, r2
 800c500:	005b      	lsls	r3, r3, #1
 800c502:	4413      	add	r3, r2
 800c504:	051b      	lsls	r3, r3, #20
 800c506:	e018      	b.n	800c53a <HAL_ADC_ConfigChannel+0x5ca>
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c510:	fa93 f3a3 	rbit	r3, r3
 800c514:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800c516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c518:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800c51a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d101      	bne.n	800c524 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800c520:	2320      	movs	r3, #32
 800c522:	e003      	b.n	800c52c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800c524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c526:	fab3 f383 	clz	r3, r3
 800c52a:	b2db      	uxtb	r3, r3
 800c52c:	3301      	adds	r3, #1
 800c52e:	f003 021f 	and.w	r2, r3, #31
 800c532:	4613      	mov	r3, r2
 800c534:	005b      	lsls	r3, r3, #1
 800c536:	4413      	add	r3, r2
 800c538:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c53a:	430b      	orrs	r3, r1
 800c53c:	e081      	b.n	800c642 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c546:	2b00      	cmp	r3, #0
 800c548:	d107      	bne.n	800c55a <HAL_ADC_ConfigChannel+0x5ea>
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	0e9b      	lsrs	r3, r3, #26
 800c550:	3301      	adds	r3, #1
 800c552:	069b      	lsls	r3, r3, #26
 800c554:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c558:	e015      	b.n	800c586 <HAL_ADC_ConfigChannel+0x616>
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c562:	fa93 f3a3 	rbit	r3, r3
 800c566:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800c568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800c56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d101      	bne.n	800c576 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800c572:	2320      	movs	r3, #32
 800c574:	e003      	b.n	800c57e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800c576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c578:	fab3 f383 	clz	r3, r3
 800c57c:	b2db      	uxtb	r3, r3
 800c57e:	3301      	adds	r3, #1
 800c580:	069b      	lsls	r3, r3, #26
 800c582:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d109      	bne.n	800c5a6 <HAL_ADC_ConfigChannel+0x636>
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	0e9b      	lsrs	r3, r3, #26
 800c598:	3301      	adds	r3, #1
 800c59a:	f003 031f 	and.w	r3, r3, #31
 800c59e:	2101      	movs	r1, #1
 800c5a0:	fa01 f303 	lsl.w	r3, r1, r3
 800c5a4:	e017      	b.n	800c5d6 <HAL_ADC_ConfigChannel+0x666>
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c5ac:	6a3b      	ldr	r3, [r7, #32]
 800c5ae:	fa93 f3a3 	rbit	r3, r3
 800c5b2:	61fb      	str	r3, [r7, #28]
  return result;
 800c5b4:	69fb      	ldr	r3, [r7, #28]
 800c5b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800c5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d101      	bne.n	800c5c2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800c5be:	2320      	movs	r3, #32
 800c5c0:	e003      	b.n	800c5ca <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800c5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c4:	fab3 f383 	clz	r3, r3
 800c5c8:	b2db      	uxtb	r3, r3
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	f003 031f 	and.w	r3, r3, #31
 800c5d0:	2101      	movs	r1, #1
 800c5d2:	fa01 f303 	lsl.w	r3, r1, r3
 800c5d6:	ea42 0103 	orr.w	r1, r2, r3
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d10d      	bne.n	800c602 <HAL_ADC_ConfigChannel+0x692>
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	0e9b      	lsrs	r3, r3, #26
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	f003 021f 	and.w	r2, r3, #31
 800c5f2:	4613      	mov	r3, r2
 800c5f4:	005b      	lsls	r3, r3, #1
 800c5f6:	4413      	add	r3, r2
 800c5f8:	3b1e      	subs	r3, #30
 800c5fa:	051b      	lsls	r3, r3, #20
 800c5fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c600:	e01e      	b.n	800c640 <HAL_ADC_ConfigChannel+0x6d0>
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	fa93 f3a3 	rbit	r3, r3
 800c60e:	613b      	str	r3, [r7, #16]
  return result;
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c614:	69bb      	ldr	r3, [r7, #24]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d104      	bne.n	800c624 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800c61a:	2320      	movs	r3, #32
 800c61c:	e006      	b.n	800c62c <HAL_ADC_ConfigChannel+0x6bc>
 800c61e:	bf00      	nop
 800c620:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800c624:	69bb      	ldr	r3, [r7, #24]
 800c626:	fab3 f383 	clz	r3, r3
 800c62a:	b2db      	uxtb	r3, r3
 800c62c:	3301      	adds	r3, #1
 800c62e:	f003 021f 	and.w	r2, r3, #31
 800c632:	4613      	mov	r3, r2
 800c634:	005b      	lsls	r3, r3, #1
 800c636:	4413      	add	r3, r2
 800c638:	3b1e      	subs	r3, #30
 800c63a:	051b      	lsls	r3, r3, #20
 800c63c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c640:	430b      	orrs	r3, r1
 800c642:	683a      	ldr	r2, [r7, #0]
 800c644:	6892      	ldr	r2, [r2, #8]
 800c646:	4619      	mov	r1, r3
 800c648:	f7ff f87d 	bl	800b746 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	681a      	ldr	r2, [r3, #0]
 800c650:	4b44      	ldr	r3, [pc, #272]	; (800c764 <HAL_ADC_ConfigChannel+0x7f4>)
 800c652:	4013      	ands	r3, r2
 800c654:	2b00      	cmp	r3, #0
 800c656:	d07a      	beq.n	800c74e <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c658:	4843      	ldr	r0, [pc, #268]	; (800c768 <HAL_ADC_ConfigChannel+0x7f8>)
 800c65a:	f7fe ffbf 	bl	800b5dc <LL_ADC_GetCommonPathInternalCh>
 800c65e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4a41      	ldr	r2, [pc, #260]	; (800c76c <HAL_ADC_ConfigChannel+0x7fc>)
 800c668:	4293      	cmp	r3, r2
 800c66a:	d12c      	bne.n	800c6c6 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800c66c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c670:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c674:	2b00      	cmp	r3, #0
 800c676:	d126      	bne.n	800c6c6 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	4a3c      	ldr	r2, [pc, #240]	; (800c770 <HAL_ADC_ConfigChannel+0x800>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d004      	beq.n	800c68c <HAL_ADC_ConfigChannel+0x71c>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	4a3b      	ldr	r2, [pc, #236]	; (800c774 <HAL_ADC_ConfigChannel+0x804>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d15d      	bne.n	800c748 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c68c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c690:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c694:	4619      	mov	r1, r3
 800c696:	4834      	ldr	r0, [pc, #208]	; (800c768 <HAL_ADC_ConfigChannel+0x7f8>)
 800c698:	f7fe ff8d 	bl	800b5b6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c69c:	4b36      	ldr	r3, [pc, #216]	; (800c778 <HAL_ADC_ConfigChannel+0x808>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	099b      	lsrs	r3, r3, #6
 800c6a2:	4a36      	ldr	r2, [pc, #216]	; (800c77c <HAL_ADC_ConfigChannel+0x80c>)
 800c6a4:	fba2 2303 	umull	r2, r3, r2, r3
 800c6a8:	099b      	lsrs	r3, r3, #6
 800c6aa:	1c5a      	adds	r2, r3, #1
 800c6ac:	4613      	mov	r3, r2
 800c6ae:	005b      	lsls	r3, r3, #1
 800c6b0:	4413      	add	r3, r2
 800c6b2:	009b      	lsls	r3, r3, #2
 800c6b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800c6b6:	e002      	b.n	800c6be <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	3b01      	subs	r3, #1
 800c6bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d1f9      	bne.n	800c6b8 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c6c4:	e040      	b.n	800c748 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a2d      	ldr	r2, [pc, #180]	; (800c780 <HAL_ADC_ConfigChannel+0x810>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d118      	bne.n	800c702 <HAL_ADC_ConfigChannel+0x792>
 800c6d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c6d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d112      	bne.n	800c702 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4a23      	ldr	r2, [pc, #140]	; (800c770 <HAL_ADC_ConfigChannel+0x800>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d004      	beq.n	800c6f0 <HAL_ADC_ConfigChannel+0x780>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a22      	ldr	r2, [pc, #136]	; (800c774 <HAL_ADC_ConfigChannel+0x804>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d12d      	bne.n	800c74c <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c6f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c6f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	481b      	ldr	r0, [pc, #108]	; (800c768 <HAL_ADC_ConfigChannel+0x7f8>)
 800c6fc:	f7fe ff5b 	bl	800b5b6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c700:	e024      	b.n	800c74c <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	4a1f      	ldr	r2, [pc, #124]	; (800c784 <HAL_ADC_ConfigChannel+0x814>)
 800c708:	4293      	cmp	r3, r2
 800c70a:	d120      	bne.n	800c74e <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800c70c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c710:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c714:	2b00      	cmp	r3, #0
 800c716:	d11a      	bne.n	800c74e <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a14      	ldr	r2, [pc, #80]	; (800c770 <HAL_ADC_ConfigChannel+0x800>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d115      	bne.n	800c74e <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c722:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c726:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c72a:	4619      	mov	r1, r3
 800c72c:	480e      	ldr	r0, [pc, #56]	; (800c768 <HAL_ADC_ConfigChannel+0x7f8>)
 800c72e:	f7fe ff42 	bl	800b5b6 <LL_ADC_SetCommonPathInternalCh>
 800c732:	e00c      	b.n	800c74e <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c738:	f043 0220 	orr.w	r2, r3, #32
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800c740:	2301      	movs	r3, #1
 800c742:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800c746:	e002      	b.n	800c74e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c748:	bf00      	nop
 800c74a:	e000      	b.n	800c74e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c74c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2200      	movs	r2, #0
 800c752:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800c756:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	37d8      	adds	r7, #216	; 0xd8
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
 800c762:	bf00      	nop
 800c764:	80080000 	.word	0x80080000
 800c768:	50040300 	.word	0x50040300
 800c76c:	c7520000 	.word	0xc7520000
 800c770:	50040000 	.word	0x50040000
 800c774:	50040200 	.word	0x50040200
 800c778:	20000194 	.word	0x20000194
 800c77c:	053e2d63 	.word	0x053e2d63
 800c780:	cb840000 	.word	0xcb840000
 800c784:	80000001 	.word	0x80000001

0800c788 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b084      	sub	sp, #16
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800c790:	2300      	movs	r3, #0
 800c792:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4618      	mov	r0, r3
 800c79a:	f7ff f8a1 	bl	800b8e0 <LL_ADC_IsEnabled>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d169      	bne.n	800c878 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	689a      	ldr	r2, [r3, #8]
 800c7aa:	4b36      	ldr	r3, [pc, #216]	; (800c884 <ADC_Enable+0xfc>)
 800c7ac:	4013      	ands	r3, r2
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d00d      	beq.n	800c7ce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7b6:	f043 0210 	orr.w	r2, r3, #16
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7c2:	f043 0201 	orr.w	r2, r3, #1
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	e055      	b.n	800c87a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7ff f870 	bl	800b8b8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800c7d8:	482b      	ldr	r0, [pc, #172]	; (800c888 <ADC_Enable+0x100>)
 800c7da:	f7fe feff 	bl	800b5dc <LL_ADC_GetCommonPathInternalCh>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d013      	beq.n	800c810 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c7e8:	4b28      	ldr	r3, [pc, #160]	; (800c88c <ADC_Enable+0x104>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	099b      	lsrs	r3, r3, #6
 800c7ee:	4a28      	ldr	r2, [pc, #160]	; (800c890 <ADC_Enable+0x108>)
 800c7f0:	fba2 2303 	umull	r2, r3, r2, r3
 800c7f4:	099b      	lsrs	r3, r3, #6
 800c7f6:	1c5a      	adds	r2, r3, #1
 800c7f8:	4613      	mov	r3, r2
 800c7fa:	005b      	lsls	r3, r3, #1
 800c7fc:	4413      	add	r3, r2
 800c7fe:	009b      	lsls	r3, r3, #2
 800c800:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800c802:	e002      	b.n	800c80a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	3b01      	subs	r3, #1
 800c808:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d1f9      	bne.n	800c804 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800c810:	f7fe fe6e 	bl	800b4f0 <HAL_GetTick>
 800c814:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c816:	e028      	b.n	800c86a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7ff f85f 	bl	800b8e0 <LL_ADC_IsEnabled>
 800c822:	4603      	mov	r3, r0
 800c824:	2b00      	cmp	r3, #0
 800c826:	d104      	bne.n	800c832 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7ff f843 	bl	800b8b8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c832:	f7fe fe5d 	bl	800b4f0 <HAL_GetTick>
 800c836:	4602      	mov	r2, r0
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	1ad3      	subs	r3, r2, r3
 800c83c:	2b02      	cmp	r3, #2
 800c83e:	d914      	bls.n	800c86a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f003 0301 	and.w	r3, r3, #1
 800c84a:	2b01      	cmp	r3, #1
 800c84c:	d00d      	beq.n	800c86a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c852:	f043 0210 	orr.w	r2, r3, #16
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c85e:	f043 0201 	orr.w	r2, r3, #1
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800c866:	2301      	movs	r3, #1
 800c868:	e007      	b.n	800c87a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f003 0301 	and.w	r3, r3, #1
 800c874:	2b01      	cmp	r3, #1
 800c876:	d1cf      	bne.n	800c818 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c878:	2300      	movs	r3, #0
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3710      	adds	r7, #16
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
 800c882:	bf00      	nop
 800c884:	8000003f 	.word	0x8000003f
 800c888:	50040300 	.word	0x50040300
 800c88c:	20000194 	.word	0x20000194
 800c890:	053e2d63 	.word	0x053e2d63

0800c894 <LL_ADC_IsEnabled>:
{
 800c894:	b480      	push	{r7}
 800c896:	b083      	sub	sp, #12
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	f003 0301 	and.w	r3, r3, #1
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d101      	bne.n	800c8ac <LL_ADC_IsEnabled+0x18>
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	e000      	b.n	800c8ae <LL_ADC_IsEnabled+0x1a>
 800c8ac:	2300      	movs	r3, #0
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	370c      	adds	r7, #12
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b8:	4770      	bx	lr

0800c8ba <LL_ADC_REG_IsConversionOngoing>:
{
 800c8ba:	b480      	push	{r7}
 800c8bc:	b083      	sub	sp, #12
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	f003 0304 	and.w	r3, r3, #4
 800c8ca:	2b04      	cmp	r3, #4
 800c8cc:	d101      	bne.n	800c8d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	e000      	b.n	800c8d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800c8d2:	2300      	movs	r3, #0
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	370c      	adds	r7, #12
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr

0800c8e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800c8e0:	b590      	push	{r4, r7, lr}
 800c8e2:	b0a1      	sub	sp, #132	; 0x84
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c8f6:	2b01      	cmp	r3, #1
 800c8f8:	d101      	bne.n	800c8fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800c8fa:	2302      	movs	r3, #2
 800c8fc:	e093      	b.n	800ca26 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2201      	movs	r2, #1
 800c902:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800c906:	2300      	movs	r3, #0
 800c908:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800c90a:	2300      	movs	r3, #0
 800c90c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	4a47      	ldr	r2, [pc, #284]	; (800ca30 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c914:	4293      	cmp	r3, r2
 800c916:	d102      	bne.n	800c91e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800c918:	4b46      	ldr	r3, [pc, #280]	; (800ca34 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c91a:	60fb      	str	r3, [r7, #12]
 800c91c:	e001      	b.n	800c922 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800c91e:	2300      	movs	r3, #0
 800c920:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d10b      	bne.n	800c940 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c92c:	f043 0220 	orr.w	r2, r3, #32
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2200      	movs	r2, #0
 800c938:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800c93c:	2301      	movs	r3, #1
 800c93e:	e072      	b.n	800ca26 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	4618      	mov	r0, r3
 800c944:	f7ff ffb9 	bl	800c8ba <LL_ADC_REG_IsConversionOngoing>
 800c948:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	4618      	mov	r0, r3
 800c950:	f7ff ffb3 	bl	800c8ba <LL_ADC_REG_IsConversionOngoing>
 800c954:	4603      	mov	r3, r0
 800c956:	2b00      	cmp	r3, #0
 800c958:	d154      	bne.n	800ca04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800c95a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d151      	bne.n	800ca04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800c960:	4b35      	ldr	r3, [pc, #212]	; (800ca38 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800c962:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d02c      	beq.n	800c9c6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800c96c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c96e:	689b      	ldr	r3, [r3, #8]
 800c970:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	6859      	ldr	r1, [r3, #4]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c97e:	035b      	lsls	r3, r3, #13
 800c980:	430b      	orrs	r3, r1
 800c982:	431a      	orrs	r2, r3
 800c984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c986:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c988:	4829      	ldr	r0, [pc, #164]	; (800ca30 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c98a:	f7ff ff83 	bl	800c894 <LL_ADC_IsEnabled>
 800c98e:	4604      	mov	r4, r0
 800c990:	4828      	ldr	r0, [pc, #160]	; (800ca34 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c992:	f7ff ff7f 	bl	800c894 <LL_ADC_IsEnabled>
 800c996:	4603      	mov	r3, r0
 800c998:	431c      	orrs	r4, r3
 800c99a:	4828      	ldr	r0, [pc, #160]	; (800ca3c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800c99c:	f7ff ff7a 	bl	800c894 <LL_ADC_IsEnabled>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	4323      	orrs	r3, r4
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d137      	bne.n	800ca18 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800c9a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9aa:	689b      	ldr	r3, [r3, #8]
 800c9ac:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800c9b0:	f023 030f 	bic.w	r3, r3, #15
 800c9b4:	683a      	ldr	r2, [r7, #0]
 800c9b6:	6811      	ldr	r1, [r2, #0]
 800c9b8:	683a      	ldr	r2, [r7, #0]
 800c9ba:	6892      	ldr	r2, [r2, #8]
 800c9bc:	430a      	orrs	r2, r1
 800c9be:	431a      	orrs	r2, r3
 800c9c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9c2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800c9c4:	e028      	b.n	800ca18 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800c9c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9c8:	689b      	ldr	r3, [r3, #8]
 800c9ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c9ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9d0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c9d2:	4817      	ldr	r0, [pc, #92]	; (800ca30 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c9d4:	f7ff ff5e 	bl	800c894 <LL_ADC_IsEnabled>
 800c9d8:	4604      	mov	r4, r0
 800c9da:	4816      	ldr	r0, [pc, #88]	; (800ca34 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c9dc:	f7ff ff5a 	bl	800c894 <LL_ADC_IsEnabled>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	431c      	orrs	r4, r3
 800c9e4:	4815      	ldr	r0, [pc, #84]	; (800ca3c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800c9e6:	f7ff ff55 	bl	800c894 <LL_ADC_IsEnabled>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	4323      	orrs	r3, r4
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d112      	bne.n	800ca18 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800c9f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9f4:	689b      	ldr	r3, [r3, #8]
 800c9f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800c9fa:	f023 030f 	bic.w	r3, r3, #15
 800c9fe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ca00:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800ca02:	e009      	b.n	800ca18 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca08:	f043 0220 	orr.w	r2, r3, #32
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800ca10:	2301      	movs	r3, #1
 800ca12:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800ca16:	e000      	b.n	800ca1a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800ca18:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800ca22:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3784      	adds	r7, #132	; 0x84
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd90      	pop	{r4, r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	50040000 	.word	0x50040000
 800ca34:	50040100 	.word	0x50040100
 800ca38:	50040300 	.word	0x50040300
 800ca3c:	50040200 	.word	0x50040200

0800ca40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b085      	sub	sp, #20
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f003 0307 	and.w	r3, r3, #7
 800ca4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ca50:	4b0c      	ldr	r3, [pc, #48]	; (800ca84 <__NVIC_SetPriorityGrouping+0x44>)
 800ca52:	68db      	ldr	r3, [r3, #12]
 800ca54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ca56:	68ba      	ldr	r2, [r7, #8]
 800ca58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ca5c:	4013      	ands	r3, r2
 800ca5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ca68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ca6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ca72:	4a04      	ldr	r2, [pc, #16]	; (800ca84 <__NVIC_SetPriorityGrouping+0x44>)
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	60d3      	str	r3, [r2, #12]
}
 800ca78:	bf00      	nop
 800ca7a:	3714      	adds	r7, #20
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr
 800ca84:	e000ed00 	.word	0xe000ed00

0800ca88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ca8c:	4b04      	ldr	r3, [pc, #16]	; (800caa0 <__NVIC_GetPriorityGrouping+0x18>)
 800ca8e:	68db      	ldr	r3, [r3, #12]
 800ca90:	0a1b      	lsrs	r3, r3, #8
 800ca92:	f003 0307 	and.w	r3, r3, #7
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr
 800caa0:	e000ed00 	.word	0xe000ed00

0800caa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b083      	sub	sp, #12
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	4603      	mov	r3, r0
 800caac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800caae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	db0b      	blt.n	800cace <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cab6:	79fb      	ldrb	r3, [r7, #7]
 800cab8:	f003 021f 	and.w	r2, r3, #31
 800cabc:	4907      	ldr	r1, [pc, #28]	; (800cadc <__NVIC_EnableIRQ+0x38>)
 800cabe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cac2:	095b      	lsrs	r3, r3, #5
 800cac4:	2001      	movs	r0, #1
 800cac6:	fa00 f202 	lsl.w	r2, r0, r2
 800caca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800cace:	bf00      	nop
 800cad0:	370c      	adds	r7, #12
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr
 800cada:	bf00      	nop
 800cadc:	e000e100 	.word	0xe000e100

0800cae0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b083      	sub	sp, #12
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	4603      	mov	r3, r0
 800cae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800caea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	db12      	blt.n	800cb18 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800caf2:	79fb      	ldrb	r3, [r7, #7]
 800caf4:	f003 021f 	and.w	r2, r3, #31
 800caf8:	490a      	ldr	r1, [pc, #40]	; (800cb24 <__NVIC_DisableIRQ+0x44>)
 800cafa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cafe:	095b      	lsrs	r3, r3, #5
 800cb00:	2001      	movs	r0, #1
 800cb02:	fa00 f202 	lsl.w	r2, r0, r2
 800cb06:	3320      	adds	r3, #32
 800cb08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800cb0c:	f3bf 8f4f 	dsb	sy
}
 800cb10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800cb12:	f3bf 8f6f 	isb	sy
}
 800cb16:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800cb18:	bf00      	nop
 800cb1a:	370c      	adds	r7, #12
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr
 800cb24:	e000e100 	.word	0xe000e100

0800cb28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b083      	sub	sp, #12
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	4603      	mov	r3, r0
 800cb30:	6039      	str	r1, [r7, #0]
 800cb32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cb34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	db0a      	blt.n	800cb52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	b2da      	uxtb	r2, r3
 800cb40:	490c      	ldr	r1, [pc, #48]	; (800cb74 <__NVIC_SetPriority+0x4c>)
 800cb42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb46:	0112      	lsls	r2, r2, #4
 800cb48:	b2d2      	uxtb	r2, r2
 800cb4a:	440b      	add	r3, r1
 800cb4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800cb50:	e00a      	b.n	800cb68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	b2da      	uxtb	r2, r3
 800cb56:	4908      	ldr	r1, [pc, #32]	; (800cb78 <__NVIC_SetPriority+0x50>)
 800cb58:	79fb      	ldrb	r3, [r7, #7]
 800cb5a:	f003 030f 	and.w	r3, r3, #15
 800cb5e:	3b04      	subs	r3, #4
 800cb60:	0112      	lsls	r2, r2, #4
 800cb62:	b2d2      	uxtb	r2, r2
 800cb64:	440b      	add	r3, r1
 800cb66:	761a      	strb	r2, [r3, #24]
}
 800cb68:	bf00      	nop
 800cb6a:	370c      	adds	r7, #12
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr
 800cb74:	e000e100 	.word	0xe000e100
 800cb78:	e000ed00 	.word	0xe000ed00

0800cb7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b089      	sub	sp, #36	; 0x24
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	60f8      	str	r0, [r7, #12]
 800cb84:	60b9      	str	r1, [r7, #8]
 800cb86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	f003 0307 	and.w	r3, r3, #7
 800cb8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800cb90:	69fb      	ldr	r3, [r7, #28]
 800cb92:	f1c3 0307 	rsb	r3, r3, #7
 800cb96:	2b04      	cmp	r3, #4
 800cb98:	bf28      	it	cs
 800cb9a:	2304      	movcs	r3, #4
 800cb9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800cb9e:	69fb      	ldr	r3, [r7, #28]
 800cba0:	3304      	adds	r3, #4
 800cba2:	2b06      	cmp	r3, #6
 800cba4:	d902      	bls.n	800cbac <NVIC_EncodePriority+0x30>
 800cba6:	69fb      	ldr	r3, [r7, #28]
 800cba8:	3b03      	subs	r3, #3
 800cbaa:	e000      	b.n	800cbae <NVIC_EncodePriority+0x32>
 800cbac:	2300      	movs	r3, #0
 800cbae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cbb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cbb4:	69bb      	ldr	r3, [r7, #24]
 800cbb6:	fa02 f303 	lsl.w	r3, r2, r3
 800cbba:	43da      	mvns	r2, r3
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	401a      	ands	r2, r3
 800cbc0:	697b      	ldr	r3, [r7, #20]
 800cbc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800cbc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	fa01 f303 	lsl.w	r3, r1, r3
 800cbce:	43d9      	mvns	r1, r3
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cbd4:	4313      	orrs	r3, r2
         );
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3724      	adds	r7, #36	; 0x24
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe0:	4770      	bx	lr
	...

0800cbe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b082      	sub	sp, #8
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	3b01      	subs	r3, #1
 800cbf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cbf4:	d301      	bcc.n	800cbfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	e00f      	b.n	800cc1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800cbfa:	4a0a      	ldr	r2, [pc, #40]	; (800cc24 <SysTick_Config+0x40>)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	3b01      	subs	r3, #1
 800cc00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800cc02:	210f      	movs	r1, #15
 800cc04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc08:	f7ff ff8e 	bl	800cb28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800cc0c:	4b05      	ldr	r3, [pc, #20]	; (800cc24 <SysTick_Config+0x40>)
 800cc0e:	2200      	movs	r2, #0
 800cc10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800cc12:	4b04      	ldr	r3, [pc, #16]	; (800cc24 <SysTick_Config+0x40>)
 800cc14:	2207      	movs	r2, #7
 800cc16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800cc18:	2300      	movs	r3, #0
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3708      	adds	r7, #8
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	e000e010 	.word	0xe000e010

0800cc28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f7ff ff05 	bl	800ca40 <__NVIC_SetPriorityGrouping>
}
 800cc36:	bf00      	nop
 800cc38:	3708      	adds	r7, #8
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}

0800cc3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800cc3e:	b580      	push	{r7, lr}
 800cc40:	b086      	sub	sp, #24
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	4603      	mov	r3, r0
 800cc46:	60b9      	str	r1, [r7, #8]
 800cc48:	607a      	str	r2, [r7, #4]
 800cc4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800cc50:	f7ff ff1a 	bl	800ca88 <__NVIC_GetPriorityGrouping>
 800cc54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cc56:	687a      	ldr	r2, [r7, #4]
 800cc58:	68b9      	ldr	r1, [r7, #8]
 800cc5a:	6978      	ldr	r0, [r7, #20]
 800cc5c:	f7ff ff8e 	bl	800cb7c <NVIC_EncodePriority>
 800cc60:	4602      	mov	r2, r0
 800cc62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc66:	4611      	mov	r1, r2
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f7ff ff5d 	bl	800cb28 <__NVIC_SetPriority>
}
 800cc6e:	bf00      	nop
 800cc70:	3718      	adds	r7, #24
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}

0800cc76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cc76:	b580      	push	{r7, lr}
 800cc78:	b082      	sub	sp, #8
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800cc80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc84:	4618      	mov	r0, r3
 800cc86:	f7ff ff0d 	bl	800caa4 <__NVIC_EnableIRQ>
}
 800cc8a:	bf00      	nop
 800cc8c:	3708      	adds	r7, #8
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}

0800cc92 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800cc92:	b580      	push	{r7, lr}
 800cc94:	b082      	sub	sp, #8
 800cc96:	af00      	add	r7, sp, #0
 800cc98:	4603      	mov	r3, r0
 800cc9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800cc9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cca0:	4618      	mov	r0, r3
 800cca2:	f7ff ff1d 	bl	800cae0 <__NVIC_DisableIRQ>
}
 800cca6:	bf00      	nop
 800cca8:	3708      	adds	r7, #8
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}

0800ccae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ccae:	b580      	push	{r7, lr}
 800ccb0:	b082      	sub	sp, #8
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f7ff ff94 	bl	800cbe4 <SysTick_Config>
 800ccbc:	4603      	mov	r3, r0
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3708      	adds	r7, #8
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
	...

0800ccc8 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d101      	bne.n	800ccda <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	e075      	b.n	800cdc6 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cce0:	b2db      	uxtb	r3, r3
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d106      	bne.n	800ccf4 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f7f4 f9d0 	bl	8001094 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2202      	movs	r2, #2
 800ccf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	681a      	ldr	r2, [r3, #0]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cd0a:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	699b      	ldr	r3, [r3, #24]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d002      	beq.n	800cd1a <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2200      	movs	r2, #0
 800cd18:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	6819      	ldr	r1, [r3, #0]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681a      	ldr	r2, [r3, #0]
 800cd24:	4b2a      	ldr	r3, [pc, #168]	; (800cdd0 <HAL_DCMI_Init+0x108>)
 800cd26:	400b      	ands	r3, r1
 800cd28:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	6819      	ldr	r1, [r3, #0]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	685a      	ldr	r2, [r3, #4]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	695b      	ldr	r3, [r3, #20]
 800cd38:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800cd3e:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	691b      	ldr	r3, [r3, #16]
 800cd44:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800cd4a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	699b      	ldr	r3, [r3, #24]
 800cd50:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800cd56:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd5c:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800cd62:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd68:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800cd6e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	430a      	orrs	r2, r1
 800cd76:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	2b10      	cmp	r3, #16
 800cd7e:	d112      	bne.n	800cda6 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	7f1b      	ldrb	r3, [r3, #28]
 800cd84:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	7f5b      	ldrb	r3, [r3, #29]
 800cd8a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800cd8c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	7f9b      	ldrb	r3, [r3, #30]
 800cd92:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800cd94:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	7fdb      	ldrb	r3, [r3, #31]
 800cd9c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800cda2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800cda4:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	68da      	ldr	r2, [r3, #12]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f042 021f 	orr.w	r2, r2, #31
 800cdb4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800cdc4:	2300      	movs	r3, #0
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3708      	adds	r7, #8
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
 800cdce:	bf00      	nop
 800cdd0:	ffe0f007 	.word	0xffe0f007

0800cdd4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d101      	bne.n	800cde6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800cde2:	2301      	movs	r3, #1
 800cde4:	e0ac      	b.n	800cf40 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4618      	mov	r0, r3
 800cdec:	f000 f8b2 	bl	800cf54 <DFSDM_GetChannelFromInstance>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	4a55      	ldr	r2, [pc, #340]	; (800cf48 <HAL_DFSDM_ChannelInit+0x174>)
 800cdf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d001      	beq.n	800ce00 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	e09f      	b.n	800cf40 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f7f4 fa33 	bl	800126c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800ce06:	4b51      	ldr	r3, [pc, #324]	; (800cf4c <HAL_DFSDM_ChannelInit+0x178>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	4a4f      	ldr	r2, [pc, #316]	; (800cf4c <HAL_DFSDM_ChannelInit+0x178>)
 800ce0e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800ce10:	4b4e      	ldr	r3, [pc, #312]	; (800cf4c <HAL_DFSDM_ChannelInit+0x178>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	2b01      	cmp	r3, #1
 800ce16:	d125      	bne.n	800ce64 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800ce18:	4b4d      	ldr	r3, [pc, #308]	; (800cf50 <HAL_DFSDM_ChannelInit+0x17c>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4a4c      	ldr	r2, [pc, #304]	; (800cf50 <HAL_DFSDM_ChannelInit+0x17c>)
 800ce1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ce22:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800ce24:	4b4a      	ldr	r3, [pc, #296]	; (800cf50 <HAL_DFSDM_ChannelInit+0x17c>)
 800ce26:	681a      	ldr	r2, [r3, #0]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	689b      	ldr	r3, [r3, #8]
 800ce2c:	4948      	ldr	r1, [pc, #288]	; (800cf50 <HAL_DFSDM_ChannelInit+0x17c>)
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800ce32:	4b47      	ldr	r3, [pc, #284]	; (800cf50 <HAL_DFSDM_ChannelInit+0x17c>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4a46      	ldr	r2, [pc, #280]	; (800cf50 <HAL_DFSDM_ChannelInit+0x17c>)
 800ce38:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800ce3c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	791b      	ldrb	r3, [r3, #4]
 800ce42:	2b01      	cmp	r3, #1
 800ce44:	d108      	bne.n	800ce58 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800ce46:	4b42      	ldr	r3, [pc, #264]	; (800cf50 <HAL_DFSDM_ChannelInit+0x17c>)
 800ce48:	681a      	ldr	r2, [r3, #0]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	68db      	ldr	r3, [r3, #12]
 800ce4e:	3b01      	subs	r3, #1
 800ce50:	041b      	lsls	r3, r3, #16
 800ce52:	493f      	ldr	r1, [pc, #252]	; (800cf50 <HAL_DFSDM_ChannelInit+0x17c>)
 800ce54:	4313      	orrs	r3, r2
 800ce56:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800ce58:	4b3d      	ldr	r3, [pc, #244]	; (800cf50 <HAL_DFSDM_ChannelInit+0x17c>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	4a3c      	ldr	r2, [pc, #240]	; (800cf50 <HAL_DFSDM_ChannelInit+0x17c>)
 800ce5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ce62:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800ce72:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	6819      	ldr	r1, [r3, #0]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800ce82:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800ce88:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	430a      	orrs	r2, r1
 800ce90:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	681a      	ldr	r2, [r3, #0]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f022 020f 	bic.w	r2, r2, #15
 800cea0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	6819      	ldr	r1, [r3, #0]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800ceb0:	431a      	orrs	r2, r3
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	430a      	orrs	r2, r1
 800ceb8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	689a      	ldr	r2, [r3, #8]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800cec8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	6899      	ldr	r1, [r3, #8]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ced8:	3b01      	subs	r3, #1
 800ceda:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800cedc:	431a      	orrs	r2, r3
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	430a      	orrs	r2, r1
 800cee4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	685a      	ldr	r2, [r3, #4]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f002 0207 	and.w	r2, r2, #7
 800cef4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	6859      	ldr	r1, [r3, #4]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf00:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf06:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800cf08:	431a      	orrs	r2, r3
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	430a      	orrs	r2, r1
 800cf10:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	681a      	ldr	r2, [r3, #0]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cf20:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2201      	movs	r2, #1
 800cf26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f000 f810 	bl	800cf54 <DFSDM_GetChannelFromInstance>
 800cf34:	4602      	mov	r2, r0
 800cf36:	4904      	ldr	r1, [pc, #16]	; (800cf48 <HAL_DFSDM_ChannelInit+0x174>)
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800cf3e:	2300      	movs	r3, #0
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3708      	adds	r7, #8
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}
 800cf48:	200013b0 	.word	0x200013b0
 800cf4c:	200013ac 	.word	0x200013ac
 800cf50:	40016000 	.word	0x40016000

0800cf54 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800cf54:	b480      	push	{r7}
 800cf56:	b085      	sub	sp, #20
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	4a1c      	ldr	r2, [pc, #112]	; (800cfd0 <DFSDM_GetChannelFromInstance+0x7c>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d102      	bne.n	800cf6a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800cf64:	2300      	movs	r3, #0
 800cf66:	60fb      	str	r3, [r7, #12]
 800cf68:	e02b      	b.n	800cfc2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	4a19      	ldr	r2, [pc, #100]	; (800cfd4 <DFSDM_GetChannelFromInstance+0x80>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d102      	bne.n	800cf78 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800cf72:	2301      	movs	r3, #1
 800cf74:	60fb      	str	r3, [r7, #12]
 800cf76:	e024      	b.n	800cfc2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	4a17      	ldr	r2, [pc, #92]	; (800cfd8 <DFSDM_GetChannelFromInstance+0x84>)
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d102      	bne.n	800cf86 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800cf80:	2302      	movs	r3, #2
 800cf82:	60fb      	str	r3, [r7, #12]
 800cf84:	e01d      	b.n	800cfc2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	4a14      	ldr	r2, [pc, #80]	; (800cfdc <DFSDM_GetChannelFromInstance+0x88>)
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d102      	bne.n	800cf94 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800cf8e:	2304      	movs	r3, #4
 800cf90:	60fb      	str	r3, [r7, #12]
 800cf92:	e016      	b.n	800cfc2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	4a12      	ldr	r2, [pc, #72]	; (800cfe0 <DFSDM_GetChannelFromInstance+0x8c>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d102      	bne.n	800cfa2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800cf9c:	2305      	movs	r3, #5
 800cf9e:	60fb      	str	r3, [r7, #12]
 800cfa0:	e00f      	b.n	800cfc2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	4a0f      	ldr	r2, [pc, #60]	; (800cfe4 <DFSDM_GetChannelFromInstance+0x90>)
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	d102      	bne.n	800cfb0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800cfaa:	2306      	movs	r3, #6
 800cfac:	60fb      	str	r3, [r7, #12]
 800cfae:	e008      	b.n	800cfc2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	4a0d      	ldr	r2, [pc, #52]	; (800cfe8 <DFSDM_GetChannelFromInstance+0x94>)
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d102      	bne.n	800cfbe <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800cfb8:	2307      	movs	r3, #7
 800cfba:	60fb      	str	r3, [r7, #12]
 800cfbc:	e001      	b.n	800cfc2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800cfbe:	2303      	movs	r3, #3
 800cfc0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3714      	adds	r7, #20
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr
 800cfd0:	40016000 	.word	0x40016000
 800cfd4:	40016020 	.word	0x40016020
 800cfd8:	40016040 	.word	0x40016040
 800cfdc:	40016080 	.word	0x40016080
 800cfe0:	400160a0 	.word	0x400160a0
 800cfe4:	400160c0 	.word	0x400160c0
 800cfe8:	400160e0 	.word	0x400160e0

0800cfec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b087      	sub	sp, #28
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800cff6:	2300      	movs	r3, #0
 800cff8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800cffa:	e166      	b.n	800d2ca <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	2101      	movs	r1, #1
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	fa01 f303 	lsl.w	r3, r1, r3
 800d008:	4013      	ands	r3, r2
 800d00a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	f000 8158 	beq.w	800d2c4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	f003 0303 	and.w	r3, r3, #3
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	d005      	beq.n	800d02c <HAL_GPIO_Init+0x40>
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	f003 0303 	and.w	r3, r3, #3
 800d028:	2b02      	cmp	r3, #2
 800d02a:	d130      	bne.n	800d08e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	689b      	ldr	r3, [r3, #8]
 800d030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	005b      	lsls	r3, r3, #1
 800d036:	2203      	movs	r2, #3
 800d038:	fa02 f303 	lsl.w	r3, r2, r3
 800d03c:	43db      	mvns	r3, r3
 800d03e:	693a      	ldr	r2, [r7, #16]
 800d040:	4013      	ands	r3, r2
 800d042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	68da      	ldr	r2, [r3, #12]
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	005b      	lsls	r3, r3, #1
 800d04c:	fa02 f303 	lsl.w	r3, r2, r3
 800d050:	693a      	ldr	r2, [r7, #16]
 800d052:	4313      	orrs	r3, r2
 800d054:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	693a      	ldr	r2, [r7, #16]
 800d05a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d062:	2201      	movs	r2, #1
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	fa02 f303 	lsl.w	r3, r2, r3
 800d06a:	43db      	mvns	r3, r3
 800d06c:	693a      	ldr	r2, [r7, #16]
 800d06e:	4013      	ands	r3, r2
 800d070:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	091b      	lsrs	r3, r3, #4
 800d078:	f003 0201 	and.w	r2, r3, #1
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	fa02 f303 	lsl.w	r3, r2, r3
 800d082:	693a      	ldr	r2, [r7, #16]
 800d084:	4313      	orrs	r3, r2
 800d086:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	693a      	ldr	r2, [r7, #16]
 800d08c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	f003 0303 	and.w	r3, r3, #3
 800d096:	2b03      	cmp	r3, #3
 800d098:	d017      	beq.n	800d0ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	68db      	ldr	r3, [r3, #12]
 800d09e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	005b      	lsls	r3, r3, #1
 800d0a4:	2203      	movs	r2, #3
 800d0a6:	fa02 f303 	lsl.w	r3, r2, r3
 800d0aa:	43db      	mvns	r3, r3
 800d0ac:	693a      	ldr	r2, [r7, #16]
 800d0ae:	4013      	ands	r3, r2
 800d0b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	689a      	ldr	r2, [r3, #8]
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	005b      	lsls	r3, r3, #1
 800d0ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d0be:	693a      	ldr	r2, [r7, #16]
 800d0c0:	4313      	orrs	r3, r2
 800d0c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	693a      	ldr	r2, [r7, #16]
 800d0c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	f003 0303 	and.w	r3, r3, #3
 800d0d2:	2b02      	cmp	r3, #2
 800d0d4:	d123      	bne.n	800d11e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	08da      	lsrs	r2, r3, #3
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	3208      	adds	r2, #8
 800d0de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	f003 0307 	and.w	r3, r3, #7
 800d0ea:	009b      	lsls	r3, r3, #2
 800d0ec:	220f      	movs	r2, #15
 800d0ee:	fa02 f303 	lsl.w	r3, r2, r3
 800d0f2:	43db      	mvns	r3, r3
 800d0f4:	693a      	ldr	r2, [r7, #16]
 800d0f6:	4013      	ands	r3, r2
 800d0f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	691a      	ldr	r2, [r3, #16]
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	f003 0307 	and.w	r3, r3, #7
 800d104:	009b      	lsls	r3, r3, #2
 800d106:	fa02 f303 	lsl.w	r3, r2, r3
 800d10a:	693a      	ldr	r2, [r7, #16]
 800d10c:	4313      	orrs	r3, r2
 800d10e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	08da      	lsrs	r2, r3, #3
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	3208      	adds	r2, #8
 800d118:	6939      	ldr	r1, [r7, #16]
 800d11a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	005b      	lsls	r3, r3, #1
 800d128:	2203      	movs	r2, #3
 800d12a:	fa02 f303 	lsl.w	r3, r2, r3
 800d12e:	43db      	mvns	r3, r3
 800d130:	693a      	ldr	r2, [r7, #16]
 800d132:	4013      	ands	r3, r2
 800d134:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	f003 0203 	and.w	r2, r3, #3
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	005b      	lsls	r3, r3, #1
 800d142:	fa02 f303 	lsl.w	r3, r2, r3
 800d146:	693a      	ldr	r2, [r7, #16]
 800d148:	4313      	orrs	r3, r2
 800d14a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	693a      	ldr	r2, [r7, #16]
 800d150:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	f000 80b2 	beq.w	800d2c4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d160:	4b61      	ldr	r3, [pc, #388]	; (800d2e8 <HAL_GPIO_Init+0x2fc>)
 800d162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d164:	4a60      	ldr	r2, [pc, #384]	; (800d2e8 <HAL_GPIO_Init+0x2fc>)
 800d166:	f043 0301 	orr.w	r3, r3, #1
 800d16a:	6613      	str	r3, [r2, #96]	; 0x60
 800d16c:	4b5e      	ldr	r3, [pc, #376]	; (800d2e8 <HAL_GPIO_Init+0x2fc>)
 800d16e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d170:	f003 0301 	and.w	r3, r3, #1
 800d174:	60bb      	str	r3, [r7, #8]
 800d176:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800d178:	4a5c      	ldr	r2, [pc, #368]	; (800d2ec <HAL_GPIO_Init+0x300>)
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	089b      	lsrs	r3, r3, #2
 800d17e:	3302      	adds	r3, #2
 800d180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d184:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	f003 0303 	and.w	r3, r3, #3
 800d18c:	009b      	lsls	r3, r3, #2
 800d18e:	220f      	movs	r2, #15
 800d190:	fa02 f303 	lsl.w	r3, r2, r3
 800d194:	43db      	mvns	r3, r3
 800d196:	693a      	ldr	r2, [r7, #16]
 800d198:	4013      	ands	r3, r2
 800d19a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800d1a2:	d02b      	beq.n	800d1fc <HAL_GPIO_Init+0x210>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	4a52      	ldr	r2, [pc, #328]	; (800d2f0 <HAL_GPIO_Init+0x304>)
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d025      	beq.n	800d1f8 <HAL_GPIO_Init+0x20c>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	4a51      	ldr	r2, [pc, #324]	; (800d2f4 <HAL_GPIO_Init+0x308>)
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d01f      	beq.n	800d1f4 <HAL_GPIO_Init+0x208>
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	4a50      	ldr	r2, [pc, #320]	; (800d2f8 <HAL_GPIO_Init+0x30c>)
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d019      	beq.n	800d1f0 <HAL_GPIO_Init+0x204>
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	4a4f      	ldr	r2, [pc, #316]	; (800d2fc <HAL_GPIO_Init+0x310>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d013      	beq.n	800d1ec <HAL_GPIO_Init+0x200>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	4a4e      	ldr	r2, [pc, #312]	; (800d300 <HAL_GPIO_Init+0x314>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d00d      	beq.n	800d1e8 <HAL_GPIO_Init+0x1fc>
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	4a4d      	ldr	r2, [pc, #308]	; (800d304 <HAL_GPIO_Init+0x318>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d007      	beq.n	800d1e4 <HAL_GPIO_Init+0x1f8>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	4a4c      	ldr	r2, [pc, #304]	; (800d308 <HAL_GPIO_Init+0x31c>)
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	d101      	bne.n	800d1e0 <HAL_GPIO_Init+0x1f4>
 800d1dc:	2307      	movs	r3, #7
 800d1de:	e00e      	b.n	800d1fe <HAL_GPIO_Init+0x212>
 800d1e0:	2308      	movs	r3, #8
 800d1e2:	e00c      	b.n	800d1fe <HAL_GPIO_Init+0x212>
 800d1e4:	2306      	movs	r3, #6
 800d1e6:	e00a      	b.n	800d1fe <HAL_GPIO_Init+0x212>
 800d1e8:	2305      	movs	r3, #5
 800d1ea:	e008      	b.n	800d1fe <HAL_GPIO_Init+0x212>
 800d1ec:	2304      	movs	r3, #4
 800d1ee:	e006      	b.n	800d1fe <HAL_GPIO_Init+0x212>
 800d1f0:	2303      	movs	r3, #3
 800d1f2:	e004      	b.n	800d1fe <HAL_GPIO_Init+0x212>
 800d1f4:	2302      	movs	r3, #2
 800d1f6:	e002      	b.n	800d1fe <HAL_GPIO_Init+0x212>
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	e000      	b.n	800d1fe <HAL_GPIO_Init+0x212>
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	697a      	ldr	r2, [r7, #20]
 800d200:	f002 0203 	and.w	r2, r2, #3
 800d204:	0092      	lsls	r2, r2, #2
 800d206:	4093      	lsls	r3, r2
 800d208:	693a      	ldr	r2, [r7, #16]
 800d20a:	4313      	orrs	r3, r2
 800d20c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800d20e:	4937      	ldr	r1, [pc, #220]	; (800d2ec <HAL_GPIO_Init+0x300>)
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	089b      	lsrs	r3, r3, #2
 800d214:	3302      	adds	r3, #2
 800d216:	693a      	ldr	r2, [r7, #16]
 800d218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d21c:	4b3b      	ldr	r3, [pc, #236]	; (800d30c <HAL_GPIO_Init+0x320>)
 800d21e:	689b      	ldr	r3, [r3, #8]
 800d220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	43db      	mvns	r3, r3
 800d226:	693a      	ldr	r2, [r7, #16]
 800d228:	4013      	ands	r3, r2
 800d22a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d234:	2b00      	cmp	r3, #0
 800d236:	d003      	beq.n	800d240 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800d238:	693a      	ldr	r2, [r7, #16]
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	4313      	orrs	r3, r2
 800d23e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800d240:	4a32      	ldr	r2, [pc, #200]	; (800d30c <HAL_GPIO_Init+0x320>)
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800d246:	4b31      	ldr	r3, [pc, #196]	; (800d30c <HAL_GPIO_Init+0x320>)
 800d248:	68db      	ldr	r3, [r3, #12]
 800d24a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	43db      	mvns	r3, r3
 800d250:	693a      	ldr	r2, [r7, #16]
 800d252:	4013      	ands	r3, r2
 800d254:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d003      	beq.n	800d26a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800d262:	693a      	ldr	r2, [r7, #16]
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	4313      	orrs	r3, r2
 800d268:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800d26a:	4a28      	ldr	r2, [pc, #160]	; (800d30c <HAL_GPIO_Init+0x320>)
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800d270:	4b26      	ldr	r3, [pc, #152]	; (800d30c <HAL_GPIO_Init+0x320>)
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	43db      	mvns	r3, r3
 800d27a:	693a      	ldr	r2, [r7, #16]
 800d27c:	4013      	ands	r3, r2
 800d27e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d003      	beq.n	800d294 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800d28c:	693a      	ldr	r2, [r7, #16]
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	4313      	orrs	r3, r2
 800d292:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800d294:	4a1d      	ldr	r2, [pc, #116]	; (800d30c <HAL_GPIO_Init+0x320>)
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800d29a:	4b1c      	ldr	r3, [pc, #112]	; (800d30c <HAL_GPIO_Init+0x320>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	43db      	mvns	r3, r3
 800d2a4:	693a      	ldr	r2, [r7, #16]
 800d2a6:	4013      	ands	r3, r2
 800d2a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	685b      	ldr	r3, [r3, #4]
 800d2ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d003      	beq.n	800d2be <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800d2b6:	693a      	ldr	r2, [r7, #16]
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	4313      	orrs	r3, r2
 800d2bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800d2be:	4a13      	ldr	r2, [pc, #76]	; (800d30c <HAL_GPIO_Init+0x320>)
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	681a      	ldr	r2, [r3, #0]
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	fa22 f303 	lsr.w	r3, r2, r3
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	f47f ae91 	bne.w	800cffc <HAL_GPIO_Init+0x10>
  }
}
 800d2da:	bf00      	nop
 800d2dc:	bf00      	nop
 800d2de:	371c      	adds	r7, #28
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e6:	4770      	bx	lr
 800d2e8:	40021000 	.word	0x40021000
 800d2ec:	40010000 	.word	0x40010000
 800d2f0:	48000400 	.word	0x48000400
 800d2f4:	48000800 	.word	0x48000800
 800d2f8:	48000c00 	.word	0x48000c00
 800d2fc:	48001000 	.word	0x48001000
 800d300:	48001400 	.word	0x48001400
 800d304:	48001800 	.word	0x48001800
 800d308:	48001c00 	.word	0x48001c00
 800d30c:	40010400 	.word	0x40010400

0800d310 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800d310:	b480      	push	{r7}
 800d312:	b087      	sub	sp, #28
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
 800d318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800d31a:	2300      	movs	r3, #0
 800d31c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800d31e:	e0c9      	b.n	800d4b4 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800d320:	2201      	movs	r2, #1
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	fa02 f303 	lsl.w	r3, r2, r3
 800d328:	683a      	ldr	r2, [r7, #0]
 800d32a:	4013      	ands	r3, r2
 800d32c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	2b00      	cmp	r3, #0
 800d332:	f000 80bc 	beq.w	800d4ae <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800d336:	4a66      	ldr	r2, [pc, #408]	; (800d4d0 <HAL_GPIO_DeInit+0x1c0>)
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	089b      	lsrs	r3, r3, #2
 800d33c:	3302      	adds	r3, #2
 800d33e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d342:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	f003 0303 	and.w	r3, r3, #3
 800d34a:	009b      	lsls	r3, r3, #2
 800d34c:	220f      	movs	r2, #15
 800d34e:	fa02 f303 	lsl.w	r3, r2, r3
 800d352:	68fa      	ldr	r2, [r7, #12]
 800d354:	4013      	ands	r3, r2
 800d356:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800d35e:	d02b      	beq.n	800d3b8 <HAL_GPIO_DeInit+0xa8>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	4a5c      	ldr	r2, [pc, #368]	; (800d4d4 <HAL_GPIO_DeInit+0x1c4>)
 800d364:	4293      	cmp	r3, r2
 800d366:	d025      	beq.n	800d3b4 <HAL_GPIO_DeInit+0xa4>
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	4a5b      	ldr	r2, [pc, #364]	; (800d4d8 <HAL_GPIO_DeInit+0x1c8>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d01f      	beq.n	800d3b0 <HAL_GPIO_DeInit+0xa0>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	4a5a      	ldr	r2, [pc, #360]	; (800d4dc <HAL_GPIO_DeInit+0x1cc>)
 800d374:	4293      	cmp	r3, r2
 800d376:	d019      	beq.n	800d3ac <HAL_GPIO_DeInit+0x9c>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	4a59      	ldr	r2, [pc, #356]	; (800d4e0 <HAL_GPIO_DeInit+0x1d0>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d013      	beq.n	800d3a8 <HAL_GPIO_DeInit+0x98>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	4a58      	ldr	r2, [pc, #352]	; (800d4e4 <HAL_GPIO_DeInit+0x1d4>)
 800d384:	4293      	cmp	r3, r2
 800d386:	d00d      	beq.n	800d3a4 <HAL_GPIO_DeInit+0x94>
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	4a57      	ldr	r2, [pc, #348]	; (800d4e8 <HAL_GPIO_DeInit+0x1d8>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d007      	beq.n	800d3a0 <HAL_GPIO_DeInit+0x90>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	4a56      	ldr	r2, [pc, #344]	; (800d4ec <HAL_GPIO_DeInit+0x1dc>)
 800d394:	4293      	cmp	r3, r2
 800d396:	d101      	bne.n	800d39c <HAL_GPIO_DeInit+0x8c>
 800d398:	2307      	movs	r3, #7
 800d39a:	e00e      	b.n	800d3ba <HAL_GPIO_DeInit+0xaa>
 800d39c:	2308      	movs	r3, #8
 800d39e:	e00c      	b.n	800d3ba <HAL_GPIO_DeInit+0xaa>
 800d3a0:	2306      	movs	r3, #6
 800d3a2:	e00a      	b.n	800d3ba <HAL_GPIO_DeInit+0xaa>
 800d3a4:	2305      	movs	r3, #5
 800d3a6:	e008      	b.n	800d3ba <HAL_GPIO_DeInit+0xaa>
 800d3a8:	2304      	movs	r3, #4
 800d3aa:	e006      	b.n	800d3ba <HAL_GPIO_DeInit+0xaa>
 800d3ac:	2303      	movs	r3, #3
 800d3ae:	e004      	b.n	800d3ba <HAL_GPIO_DeInit+0xaa>
 800d3b0:	2302      	movs	r3, #2
 800d3b2:	e002      	b.n	800d3ba <HAL_GPIO_DeInit+0xaa>
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	e000      	b.n	800d3ba <HAL_GPIO_DeInit+0xaa>
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	697a      	ldr	r2, [r7, #20]
 800d3bc:	f002 0203 	and.w	r2, r2, #3
 800d3c0:	0092      	lsls	r2, r2, #2
 800d3c2:	4093      	lsls	r3, r2
 800d3c4:	68fa      	ldr	r2, [r7, #12]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d132      	bne.n	800d430 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800d3ca:	4b49      	ldr	r3, [pc, #292]	; (800d4f0 <HAL_GPIO_DeInit+0x1e0>)
 800d3cc:	681a      	ldr	r2, [r3, #0]
 800d3ce:	693b      	ldr	r3, [r7, #16]
 800d3d0:	43db      	mvns	r3, r3
 800d3d2:	4947      	ldr	r1, [pc, #284]	; (800d4f0 <HAL_GPIO_DeInit+0x1e0>)
 800d3d4:	4013      	ands	r3, r2
 800d3d6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800d3d8:	4b45      	ldr	r3, [pc, #276]	; (800d4f0 <HAL_GPIO_DeInit+0x1e0>)
 800d3da:	685a      	ldr	r2, [r3, #4]
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	43db      	mvns	r3, r3
 800d3e0:	4943      	ldr	r1, [pc, #268]	; (800d4f0 <HAL_GPIO_DeInit+0x1e0>)
 800d3e2:	4013      	ands	r3, r2
 800d3e4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800d3e6:	4b42      	ldr	r3, [pc, #264]	; (800d4f0 <HAL_GPIO_DeInit+0x1e0>)
 800d3e8:	68da      	ldr	r2, [r3, #12]
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	43db      	mvns	r3, r3
 800d3ee:	4940      	ldr	r1, [pc, #256]	; (800d4f0 <HAL_GPIO_DeInit+0x1e0>)
 800d3f0:	4013      	ands	r3, r2
 800d3f2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800d3f4:	4b3e      	ldr	r3, [pc, #248]	; (800d4f0 <HAL_GPIO_DeInit+0x1e0>)
 800d3f6:	689a      	ldr	r2, [r3, #8]
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	43db      	mvns	r3, r3
 800d3fc:	493c      	ldr	r1, [pc, #240]	; (800d4f0 <HAL_GPIO_DeInit+0x1e0>)
 800d3fe:	4013      	ands	r3, r2
 800d400:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	f003 0303 	and.w	r3, r3, #3
 800d408:	009b      	lsls	r3, r3, #2
 800d40a:	220f      	movs	r2, #15
 800d40c:	fa02 f303 	lsl.w	r3, r2, r3
 800d410:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800d412:	4a2f      	ldr	r2, [pc, #188]	; (800d4d0 <HAL_GPIO_DeInit+0x1c0>)
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	089b      	lsrs	r3, r3, #2
 800d418:	3302      	adds	r3, #2
 800d41a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	43da      	mvns	r2, r3
 800d422:	482b      	ldr	r0, [pc, #172]	; (800d4d0 <HAL_GPIO_DeInit+0x1c0>)
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	089b      	lsrs	r3, r3, #2
 800d428:	400a      	ands	r2, r1
 800d42a:	3302      	adds	r3, #2
 800d42c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681a      	ldr	r2, [r3, #0]
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	005b      	lsls	r3, r3, #1
 800d438:	2103      	movs	r1, #3
 800d43a:	fa01 f303 	lsl.w	r3, r1, r3
 800d43e:	431a      	orrs	r2, r3
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	08da      	lsrs	r2, r3, #3
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	3208      	adds	r2, #8
 800d44c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d450:	697b      	ldr	r3, [r7, #20]
 800d452:	f003 0307 	and.w	r3, r3, #7
 800d456:	009b      	lsls	r3, r3, #2
 800d458:	220f      	movs	r2, #15
 800d45a:	fa02 f303 	lsl.w	r3, r2, r3
 800d45e:	43db      	mvns	r3, r3
 800d460:	697a      	ldr	r2, [r7, #20]
 800d462:	08d2      	lsrs	r2, r2, #3
 800d464:	4019      	ands	r1, r3
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	3208      	adds	r2, #8
 800d46a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	689a      	ldr	r2, [r3, #8]
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	005b      	lsls	r3, r3, #1
 800d476:	2103      	movs	r1, #3
 800d478:	fa01 f303 	lsl.w	r3, r1, r3
 800d47c:	43db      	mvns	r3, r3
 800d47e:	401a      	ands	r2, r3
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	685a      	ldr	r2, [r3, #4]
 800d488:	2101      	movs	r1, #1
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	fa01 f303 	lsl.w	r3, r1, r3
 800d490:	43db      	mvns	r3, r3
 800d492:	401a      	ands	r2, r3
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	68da      	ldr	r2, [r3, #12]
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	005b      	lsls	r3, r3, #1
 800d4a0:	2103      	movs	r1, #3
 800d4a2:	fa01 f303 	lsl.w	r3, r1, r3
 800d4a6:	43db      	mvns	r3, r3
 800d4a8:	401a      	ands	r2, r3
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800d4b4:	683a      	ldr	r2, [r7, #0]
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	fa22 f303 	lsr.w	r3, r2, r3
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	f47f af2f 	bne.w	800d320 <HAL_GPIO_DeInit+0x10>
  }
}
 800d4c2:	bf00      	nop
 800d4c4:	bf00      	nop
 800d4c6:	371c      	adds	r7, #28
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr
 800d4d0:	40010000 	.word	0x40010000
 800d4d4:	48000400 	.word	0x48000400
 800d4d8:	48000800 	.word	0x48000800
 800d4dc:	48000c00 	.word	0x48000c00
 800d4e0:	48001000 	.word	0x48001000
 800d4e4:	48001400 	.word	0x48001400
 800d4e8:	48001800 	.word	0x48001800
 800d4ec:	48001c00 	.word	0x48001c00
 800d4f0:	40010400 	.word	0x40010400

0800d4f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b083      	sub	sp, #12
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	460b      	mov	r3, r1
 800d4fe:	807b      	strh	r3, [r7, #2]
 800d500:	4613      	mov	r3, r2
 800d502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d504:	787b      	ldrb	r3, [r7, #1]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d003      	beq.n	800d512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800d50a:	887a      	ldrh	r2, [r7, #2]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800d510:	e002      	b.n	800d518 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800d512:	887a      	ldrh	r2, [r7, #2]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	629a      	str	r2, [r3, #40]	; 0x28
}
 800d518:	bf00      	nop
 800d51a:	370c      	adds	r7, #12
 800d51c:	46bd      	mov	sp, r7
 800d51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d522:	4770      	bx	lr

0800d524 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	4603      	mov	r3, r0
 800d52c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800d52e:	4b08      	ldr	r3, [pc, #32]	; (800d550 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d530:	695a      	ldr	r2, [r3, #20]
 800d532:	88fb      	ldrh	r3, [r7, #6]
 800d534:	4013      	ands	r3, r2
 800d536:	2b00      	cmp	r3, #0
 800d538:	d006      	beq.n	800d548 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800d53a:	4a05      	ldr	r2, [pc, #20]	; (800d550 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d53c:	88fb      	ldrh	r3, [r7, #6]
 800d53e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800d540:	88fb      	ldrh	r3, [r7, #6]
 800d542:	4618      	mov	r0, r3
 800d544:	f7f4 ff2c 	bl	80023a0 <HAL_GPIO_EXTI_Callback>
  }
}
 800d548:	bf00      	nop
 800d54a:	3708      	adds	r7, #8
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}
 800d550:	40010400 	.word	0x40010400

0800d554 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b082      	sub	sp, #8
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d101      	bne.n	800d566 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d562:	2301      	movs	r3, #1
 800d564:	e081      	b.n	800d66a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d106      	bne.n	800d580 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2200      	movs	r2, #0
 800d576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f7f4 fa60 	bl	8001a40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2224      	movs	r2, #36	; 0x24
 800d584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	681a      	ldr	r2, [r3, #0]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f022 0201 	bic.w	r2, r2, #1
 800d596:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	685a      	ldr	r2, [r3, #4]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800d5a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	689a      	ldr	r2, [r3, #8]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d5b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	68db      	ldr	r3, [r3, #12]
 800d5ba:	2b01      	cmp	r3, #1
 800d5bc:	d107      	bne.n	800d5ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	689a      	ldr	r2, [r3, #8]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d5ca:	609a      	str	r2, [r3, #8]
 800d5cc:	e006      	b.n	800d5dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	689a      	ldr	r2, [r3, #8]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800d5da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	68db      	ldr	r3, [r3, #12]
 800d5e0:	2b02      	cmp	r3, #2
 800d5e2:	d104      	bne.n	800d5ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d5ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	685b      	ldr	r3, [r3, #4]
 800d5f4:	687a      	ldr	r2, [r7, #4]
 800d5f6:	6812      	ldr	r2, [r2, #0]
 800d5f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d5fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d600:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	68da      	ldr	r2, [r3, #12]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d610:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	691a      	ldr	r2, [r3, #16]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	695b      	ldr	r3, [r3, #20]
 800d61a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	699b      	ldr	r3, [r3, #24]
 800d622:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	430a      	orrs	r2, r1
 800d62a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	69d9      	ldr	r1, [r3, #28]
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6a1a      	ldr	r2, [r3, #32]
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	430a      	orrs	r2, r1
 800d63a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f042 0201 	orr.w	r2, r2, #1
 800d64a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2200      	movs	r2, #0
 800d650:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2220      	movs	r2, #32
 800d656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2200      	movs	r2, #0
 800d65e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2200      	movs	r2, #0
 800d664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800d668:	2300      	movs	r3, #0
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3708      	adds	r7, #8
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}

0800d672 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800d672:	b580      	push	{r7, lr}
 800d674:	b082      	sub	sp, #8
 800d676:	af00      	add	r7, sp, #0
 800d678:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d101      	bne.n	800d684 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800d680:	2301      	movs	r3, #1
 800d682:	e021      	b.n	800d6c8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2224      	movs	r2, #36	; 0x24
 800d688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	681a      	ldr	r2, [r3, #0]
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	f022 0201 	bic.w	r2, r2, #1
 800d69a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f7f4 fa95 	bl	8001bcc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d6c6:	2300      	movs	r3, #0
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3708      	adds	r7, #8
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}

0800d6d0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b088      	sub	sp, #32
 800d6d4:	af02      	add	r7, sp, #8
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	607a      	str	r2, [r7, #4]
 800d6da:	461a      	mov	r2, r3
 800d6dc:	460b      	mov	r3, r1
 800d6de:	817b      	strh	r3, [r7, #10]
 800d6e0:	4613      	mov	r3, r2
 800d6e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d6ea:	b2db      	uxtb	r3, r3
 800d6ec:	2b20      	cmp	r3, #32
 800d6ee:	f040 80da 	bne.w	800d8a6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	d101      	bne.n	800d700 <HAL_I2C_Master_Transmit+0x30>
 800d6fc:	2302      	movs	r3, #2
 800d6fe:	e0d3      	b.n	800d8a8 <HAL_I2C_Master_Transmit+0x1d8>
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	2201      	movs	r2, #1
 800d704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d708:	f7fd fef2 	bl	800b4f0 <HAL_GetTick>
 800d70c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	9300      	str	r3, [sp, #0]
 800d712:	2319      	movs	r3, #25
 800d714:	2201      	movs	r2, #1
 800d716:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d71a:	68f8      	ldr	r0, [r7, #12]
 800d71c:	f000 fdd2 	bl	800e2c4 <I2C_WaitOnFlagUntilTimeout>
 800d720:	4603      	mov	r3, r0
 800d722:	2b00      	cmp	r3, #0
 800d724:	d001      	beq.n	800d72a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800d726:	2301      	movs	r3, #1
 800d728:	e0be      	b.n	800d8a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2221      	movs	r2, #33	; 0x21
 800d72e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	2210      	movs	r2, #16
 800d736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2200      	movs	r2, #0
 800d73e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	687a      	ldr	r2, [r7, #4]
 800d744:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	893a      	ldrh	r2, [r7, #8]
 800d74a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2200      	movs	r2, #0
 800d750:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d756:	b29b      	uxth	r3, r3
 800d758:	2bff      	cmp	r3, #255	; 0xff
 800d75a:	d90e      	bls.n	800d77a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	22ff      	movs	r2, #255	; 0xff
 800d760:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d766:	b2da      	uxtb	r2, r3
 800d768:	8979      	ldrh	r1, [r7, #10]
 800d76a:	4b51      	ldr	r3, [pc, #324]	; (800d8b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800d76c:	9300      	str	r3, [sp, #0]
 800d76e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d772:	68f8      	ldr	r0, [r7, #12]
 800d774:	f000 ffc8 	bl	800e708 <I2C_TransferConfig>
 800d778:	e06c      	b.n	800d854 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d77e:	b29a      	uxth	r2, r3
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d788:	b2da      	uxtb	r2, r3
 800d78a:	8979      	ldrh	r1, [r7, #10]
 800d78c:	4b48      	ldr	r3, [pc, #288]	; (800d8b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800d78e:	9300      	str	r3, [sp, #0]
 800d790:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d794:	68f8      	ldr	r0, [r7, #12]
 800d796:	f000 ffb7 	bl	800e708 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800d79a:	e05b      	b.n	800d854 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d79c:	697a      	ldr	r2, [r7, #20]
 800d79e:	6a39      	ldr	r1, [r7, #32]
 800d7a0:	68f8      	ldr	r0, [r7, #12]
 800d7a2:	f000 fdcf 	bl	800e344 <I2C_WaitOnTXISFlagUntilTimeout>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d001      	beq.n	800d7b0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	e07b      	b.n	800d8a8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b4:	781a      	ldrb	r2, [r3, #0]
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7c0:	1c5a      	adds	r2, r3, #1
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7ca:	b29b      	uxth	r3, r3
 800d7cc:	3b01      	subs	r3, #1
 800d7ce:	b29a      	uxth	r2, r3
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d7d8:	3b01      	subs	r3, #1
 800d7da:	b29a      	uxth	r2, r3
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7e4:	b29b      	uxth	r3, r3
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d034      	beq.n	800d854 <HAL_I2C_Master_Transmit+0x184>
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d130      	bne.n	800d854 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	9300      	str	r3, [sp, #0]
 800d7f6:	6a3b      	ldr	r3, [r7, #32]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	2180      	movs	r1, #128	; 0x80
 800d7fc:	68f8      	ldr	r0, [r7, #12]
 800d7fe:	f000 fd61 	bl	800e2c4 <I2C_WaitOnFlagUntilTimeout>
 800d802:	4603      	mov	r3, r0
 800d804:	2b00      	cmp	r3, #0
 800d806:	d001      	beq.n	800d80c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800d808:	2301      	movs	r3, #1
 800d80a:	e04d      	b.n	800d8a8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d810:	b29b      	uxth	r3, r3
 800d812:	2bff      	cmp	r3, #255	; 0xff
 800d814:	d90e      	bls.n	800d834 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	22ff      	movs	r2, #255	; 0xff
 800d81a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d820:	b2da      	uxtb	r2, r3
 800d822:	8979      	ldrh	r1, [r7, #10]
 800d824:	2300      	movs	r3, #0
 800d826:	9300      	str	r3, [sp, #0]
 800d828:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d82c:	68f8      	ldr	r0, [r7, #12]
 800d82e:	f000 ff6b 	bl	800e708 <I2C_TransferConfig>
 800d832:	e00f      	b.n	800d854 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d838:	b29a      	uxth	r2, r3
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d842:	b2da      	uxtb	r2, r3
 800d844:	8979      	ldrh	r1, [r7, #10]
 800d846:	2300      	movs	r3, #0
 800d848:	9300      	str	r3, [sp, #0]
 800d84a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d84e:	68f8      	ldr	r0, [r7, #12]
 800d850:	f000 ff5a 	bl	800e708 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d858:	b29b      	uxth	r3, r3
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d19e      	bne.n	800d79c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d85e:	697a      	ldr	r2, [r7, #20]
 800d860:	6a39      	ldr	r1, [r7, #32]
 800d862:	68f8      	ldr	r0, [r7, #12]
 800d864:	f000 fdae 	bl	800e3c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d868:	4603      	mov	r3, r0
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d001      	beq.n	800d872 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800d86e:	2301      	movs	r3, #1
 800d870:	e01a      	b.n	800d8a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	2220      	movs	r2, #32
 800d878:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	6859      	ldr	r1, [r3, #4]
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	4b0b      	ldr	r3, [pc, #44]	; (800d8b4 <HAL_I2C_Master_Transmit+0x1e4>)
 800d886:	400b      	ands	r3, r1
 800d888:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	2220      	movs	r2, #32
 800d88e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	2200      	movs	r2, #0
 800d896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	2200      	movs	r2, #0
 800d89e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	e000      	b.n	800d8a8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800d8a6:	2302      	movs	r3, #2
  }
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3718      	adds	r7, #24
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	80002000 	.word	0x80002000
 800d8b4:	fe00e800 	.word	0xfe00e800

0800d8b8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b088      	sub	sp, #32
 800d8bc:	af02      	add	r7, sp, #8
 800d8be:	60f8      	str	r0, [r7, #12]
 800d8c0:	607a      	str	r2, [r7, #4]
 800d8c2:	461a      	mov	r2, r3
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	817b      	strh	r3, [r7, #10]
 800d8c8:	4613      	mov	r3, r2
 800d8ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d8d2:	b2db      	uxtb	r3, r3
 800d8d4:	2b20      	cmp	r3, #32
 800d8d6:	f040 80db 	bne.w	800da90 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d101      	bne.n	800d8e8 <HAL_I2C_Master_Receive+0x30>
 800d8e4:	2302      	movs	r3, #2
 800d8e6:	e0d4      	b.n	800da92 <HAL_I2C_Master_Receive+0x1da>
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d8f0:	f7fd fdfe 	bl	800b4f0 <HAL_GetTick>
 800d8f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	9300      	str	r3, [sp, #0]
 800d8fa:	2319      	movs	r3, #25
 800d8fc:	2201      	movs	r2, #1
 800d8fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d902:	68f8      	ldr	r0, [r7, #12]
 800d904:	f000 fcde 	bl	800e2c4 <I2C_WaitOnFlagUntilTimeout>
 800d908:	4603      	mov	r3, r0
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d001      	beq.n	800d912 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800d90e:	2301      	movs	r3, #1
 800d910:	e0bf      	b.n	800da92 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	2222      	movs	r2, #34	; 0x22
 800d916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	2210      	movs	r2, #16
 800d91e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	2200      	movs	r2, #0
 800d926:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	687a      	ldr	r2, [r7, #4]
 800d92c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	893a      	ldrh	r2, [r7, #8]
 800d932:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	2200      	movs	r2, #0
 800d938:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d93e:	b29b      	uxth	r3, r3
 800d940:	2bff      	cmp	r3, #255	; 0xff
 800d942:	d90e      	bls.n	800d962 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	22ff      	movs	r2, #255	; 0xff
 800d948:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d94e:	b2da      	uxtb	r2, r3
 800d950:	8979      	ldrh	r1, [r7, #10]
 800d952:	4b52      	ldr	r3, [pc, #328]	; (800da9c <HAL_I2C_Master_Receive+0x1e4>)
 800d954:	9300      	str	r3, [sp, #0]
 800d956:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d95a:	68f8      	ldr	r0, [r7, #12]
 800d95c:	f000 fed4 	bl	800e708 <I2C_TransferConfig>
 800d960:	e06d      	b.n	800da3e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d966:	b29a      	uxth	r2, r3
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d970:	b2da      	uxtb	r2, r3
 800d972:	8979      	ldrh	r1, [r7, #10]
 800d974:	4b49      	ldr	r3, [pc, #292]	; (800da9c <HAL_I2C_Master_Receive+0x1e4>)
 800d976:	9300      	str	r3, [sp, #0]
 800d978:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d97c:	68f8      	ldr	r0, [r7, #12]
 800d97e:	f000 fec3 	bl	800e708 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800d982:	e05c      	b.n	800da3e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d984:	697a      	ldr	r2, [r7, #20]
 800d986:	6a39      	ldr	r1, [r7, #32]
 800d988:	68f8      	ldr	r0, [r7, #12]
 800d98a:	f000 fd57 	bl	800e43c <I2C_WaitOnRXNEFlagUntilTimeout>
 800d98e:	4603      	mov	r3, r0
 800d990:	2b00      	cmp	r3, #0
 800d992:	d001      	beq.n	800d998 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800d994:	2301      	movs	r3, #1
 800d996:	e07c      	b.n	800da92 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9a2:	b2d2      	uxtb	r2, r2
 800d9a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9aa:	1c5a      	adds	r2, r3, #1
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9b4:	3b01      	subs	r3, #1
 800d9b6:	b29a      	uxth	r2, r3
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d9c0:	b29b      	uxth	r3, r3
 800d9c2:	3b01      	subs	r3, #1
 800d9c4:	b29a      	uxth	r2, r3
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d034      	beq.n	800da3e <HAL_I2C_Master_Receive+0x186>
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d130      	bne.n	800da3e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	9300      	str	r3, [sp, #0]
 800d9e0:	6a3b      	ldr	r3, [r7, #32]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	2180      	movs	r1, #128	; 0x80
 800d9e6:	68f8      	ldr	r0, [r7, #12]
 800d9e8:	f000 fc6c 	bl	800e2c4 <I2C_WaitOnFlagUntilTimeout>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d001      	beq.n	800d9f6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	e04d      	b.n	800da92 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d9fa:	b29b      	uxth	r3, r3
 800d9fc:	2bff      	cmp	r3, #255	; 0xff
 800d9fe:	d90e      	bls.n	800da1e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	22ff      	movs	r2, #255	; 0xff
 800da04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da0a:	b2da      	uxtb	r2, r3
 800da0c:	8979      	ldrh	r1, [r7, #10]
 800da0e:	2300      	movs	r3, #0
 800da10:	9300      	str	r3, [sp, #0]
 800da12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800da16:	68f8      	ldr	r0, [r7, #12]
 800da18:	f000 fe76 	bl	800e708 <I2C_TransferConfig>
 800da1c:	e00f      	b.n	800da3e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da22:	b29a      	uxth	r2, r3
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da2c:	b2da      	uxtb	r2, r3
 800da2e:	8979      	ldrh	r1, [r7, #10]
 800da30:	2300      	movs	r3, #0
 800da32:	9300      	str	r3, [sp, #0]
 800da34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800da38:	68f8      	ldr	r0, [r7, #12]
 800da3a:	f000 fe65 	bl	800e708 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da42:	b29b      	uxth	r3, r3
 800da44:	2b00      	cmp	r3, #0
 800da46:	d19d      	bne.n	800d984 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800da48:	697a      	ldr	r2, [r7, #20]
 800da4a:	6a39      	ldr	r1, [r7, #32]
 800da4c:	68f8      	ldr	r0, [r7, #12]
 800da4e:	f000 fcb9 	bl	800e3c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800da52:	4603      	mov	r3, r0
 800da54:	2b00      	cmp	r3, #0
 800da56:	d001      	beq.n	800da5c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800da58:	2301      	movs	r3, #1
 800da5a:	e01a      	b.n	800da92 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	2220      	movs	r2, #32
 800da62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	6859      	ldr	r1, [r3, #4]
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681a      	ldr	r2, [r3, #0]
 800da6e:	4b0c      	ldr	r3, [pc, #48]	; (800daa0 <HAL_I2C_Master_Receive+0x1e8>)
 800da70:	400b      	ands	r3, r1
 800da72:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	2220      	movs	r2, #32
 800da78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	2200      	movs	r2, #0
 800da80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	2200      	movs	r2, #0
 800da88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800da8c:	2300      	movs	r3, #0
 800da8e:	e000      	b.n	800da92 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800da90:	2302      	movs	r3, #2
  }
}
 800da92:	4618      	mov	r0, r3
 800da94:	3718      	adds	r7, #24
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	bf00      	nop
 800da9c:	80002400 	.word	0x80002400
 800daa0:	fe00e800 	.word	0xfe00e800

0800daa4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b088      	sub	sp, #32
 800daa8:	af02      	add	r7, sp, #8
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	4608      	mov	r0, r1
 800daae:	4611      	mov	r1, r2
 800dab0:	461a      	mov	r2, r3
 800dab2:	4603      	mov	r3, r0
 800dab4:	817b      	strh	r3, [r7, #10]
 800dab6:	460b      	mov	r3, r1
 800dab8:	813b      	strh	r3, [r7, #8]
 800daba:	4613      	mov	r3, r2
 800dabc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dac4:	b2db      	uxtb	r3, r3
 800dac6:	2b20      	cmp	r3, #32
 800dac8:	f040 80f9 	bne.w	800dcbe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800dacc:	6a3b      	ldr	r3, [r7, #32]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d002      	beq.n	800dad8 <HAL_I2C_Mem_Write+0x34>
 800dad2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d105      	bne.n	800dae4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dade:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800dae0:	2301      	movs	r3, #1
 800dae2:	e0ed      	b.n	800dcc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800daea:	2b01      	cmp	r3, #1
 800daec:	d101      	bne.n	800daf2 <HAL_I2C_Mem_Write+0x4e>
 800daee:	2302      	movs	r3, #2
 800daf0:	e0e6      	b.n	800dcc0 <HAL_I2C_Mem_Write+0x21c>
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2201      	movs	r2, #1
 800daf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800dafa:	f7fd fcf9 	bl	800b4f0 <HAL_GetTick>
 800dafe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	9300      	str	r3, [sp, #0]
 800db04:	2319      	movs	r3, #25
 800db06:	2201      	movs	r2, #1
 800db08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800db0c:	68f8      	ldr	r0, [r7, #12]
 800db0e:	f000 fbd9 	bl	800e2c4 <I2C_WaitOnFlagUntilTimeout>
 800db12:	4603      	mov	r3, r0
 800db14:	2b00      	cmp	r3, #0
 800db16:	d001      	beq.n	800db1c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800db18:	2301      	movs	r3, #1
 800db1a:	e0d1      	b.n	800dcc0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	2221      	movs	r2, #33	; 0x21
 800db20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	2240      	movs	r2, #64	; 0x40
 800db28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	2200      	movs	r2, #0
 800db30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	6a3a      	ldr	r2, [r7, #32]
 800db36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800db3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2200      	movs	r2, #0
 800db42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800db44:	88f8      	ldrh	r0, [r7, #6]
 800db46:	893a      	ldrh	r2, [r7, #8]
 800db48:	8979      	ldrh	r1, [r7, #10]
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	9301      	str	r3, [sp, #4]
 800db4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db50:	9300      	str	r3, [sp, #0]
 800db52:	4603      	mov	r3, r0
 800db54:	68f8      	ldr	r0, [r7, #12]
 800db56:	f000 fae9 	bl	800e12c <I2C_RequestMemoryWrite>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d005      	beq.n	800db6c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	2200      	movs	r2, #0
 800db64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800db68:	2301      	movs	r3, #1
 800db6a:	e0a9      	b.n	800dcc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db70:	b29b      	uxth	r3, r3
 800db72:	2bff      	cmp	r3, #255	; 0xff
 800db74:	d90e      	bls.n	800db94 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	22ff      	movs	r2, #255	; 0xff
 800db7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db80:	b2da      	uxtb	r2, r3
 800db82:	8979      	ldrh	r1, [r7, #10]
 800db84:	2300      	movs	r3, #0
 800db86:	9300      	str	r3, [sp, #0]
 800db88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800db8c:	68f8      	ldr	r0, [r7, #12]
 800db8e:	f000 fdbb 	bl	800e708 <I2C_TransferConfig>
 800db92:	e00f      	b.n	800dbb4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db98:	b29a      	uxth	r2, r3
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dba2:	b2da      	uxtb	r2, r3
 800dba4:	8979      	ldrh	r1, [r7, #10]
 800dba6:	2300      	movs	r3, #0
 800dba8:	9300      	str	r3, [sp, #0]
 800dbaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dbae:	68f8      	ldr	r0, [r7, #12]
 800dbb0:	f000 fdaa 	bl	800e708 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dbb4:	697a      	ldr	r2, [r7, #20]
 800dbb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dbb8:	68f8      	ldr	r0, [r7, #12]
 800dbba:	f000 fbc3 	bl	800e344 <I2C_WaitOnTXISFlagUntilTimeout>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d001      	beq.n	800dbc8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	e07b      	b.n	800dcc0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbcc:	781a      	ldrb	r2, [r3, #0]
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbd8:	1c5a      	adds	r2, r3, #1
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbe2:	b29b      	uxth	r3, r3
 800dbe4:	3b01      	subs	r3, #1
 800dbe6:	b29a      	uxth	r2, r3
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbf0:	3b01      	subs	r3, #1
 800dbf2:	b29a      	uxth	r2, r3
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbfc:	b29b      	uxth	r3, r3
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d034      	beq.n	800dc6c <HAL_I2C_Mem_Write+0x1c8>
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d130      	bne.n	800dc6c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	9300      	str	r3, [sp, #0]
 800dc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc10:	2200      	movs	r2, #0
 800dc12:	2180      	movs	r1, #128	; 0x80
 800dc14:	68f8      	ldr	r0, [r7, #12]
 800dc16:	f000 fb55 	bl	800e2c4 <I2C_WaitOnFlagUntilTimeout>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d001      	beq.n	800dc24 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800dc20:	2301      	movs	r3, #1
 800dc22:	e04d      	b.n	800dcc0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	2bff      	cmp	r3, #255	; 0xff
 800dc2c:	d90e      	bls.n	800dc4c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	22ff      	movs	r2, #255	; 0xff
 800dc32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc38:	b2da      	uxtb	r2, r3
 800dc3a:	8979      	ldrh	r1, [r7, #10]
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	9300      	str	r3, [sp, #0]
 800dc40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dc44:	68f8      	ldr	r0, [r7, #12]
 800dc46:	f000 fd5f 	bl	800e708 <I2C_TransferConfig>
 800dc4a:	e00f      	b.n	800dc6c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc50:	b29a      	uxth	r2, r3
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc5a:	b2da      	uxtb	r2, r3
 800dc5c:	8979      	ldrh	r1, [r7, #10]
 800dc5e:	2300      	movs	r3, #0
 800dc60:	9300      	str	r3, [sp, #0]
 800dc62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dc66:	68f8      	ldr	r0, [r7, #12]
 800dc68:	f000 fd4e 	bl	800e708 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc70:	b29b      	uxth	r3, r3
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d19e      	bne.n	800dbb4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dc76:	697a      	ldr	r2, [r7, #20]
 800dc78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc7a:	68f8      	ldr	r0, [r7, #12]
 800dc7c:	f000 fba2 	bl	800e3c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800dc80:	4603      	mov	r3, r0
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d001      	beq.n	800dc8a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800dc86:	2301      	movs	r3, #1
 800dc88:	e01a      	b.n	800dcc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	2220      	movs	r2, #32
 800dc90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	6859      	ldr	r1, [r3, #4]
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681a      	ldr	r2, [r3, #0]
 800dc9c:	4b0a      	ldr	r3, [pc, #40]	; (800dcc8 <HAL_I2C_Mem_Write+0x224>)
 800dc9e:	400b      	ands	r3, r1
 800dca0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2220      	movs	r2, #32
 800dca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2200      	movs	r2, #0
 800dcae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	e000      	b.n	800dcc0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800dcbe:	2302      	movs	r3, #2
  }
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3718      	adds	r7, #24
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}
 800dcc8:	fe00e800 	.word	0xfe00e800

0800dccc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b088      	sub	sp, #32
 800dcd0:	af02      	add	r7, sp, #8
 800dcd2:	60f8      	str	r0, [r7, #12]
 800dcd4:	4608      	mov	r0, r1
 800dcd6:	4611      	mov	r1, r2
 800dcd8:	461a      	mov	r2, r3
 800dcda:	4603      	mov	r3, r0
 800dcdc:	817b      	strh	r3, [r7, #10]
 800dcde:	460b      	mov	r3, r1
 800dce0:	813b      	strh	r3, [r7, #8]
 800dce2:	4613      	mov	r3, r2
 800dce4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	2b20      	cmp	r3, #32
 800dcf0:	f040 80fd 	bne.w	800deee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800dcf4:	6a3b      	ldr	r3, [r7, #32]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d002      	beq.n	800dd00 <HAL_I2C_Mem_Read+0x34>
 800dcfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d105      	bne.n	800dd0c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dd06:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800dd08:	2301      	movs	r3, #1
 800dd0a:	e0f1      	b.n	800def0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd12:	2b01      	cmp	r3, #1
 800dd14:	d101      	bne.n	800dd1a <HAL_I2C_Mem_Read+0x4e>
 800dd16:	2302      	movs	r3, #2
 800dd18:	e0ea      	b.n	800def0 <HAL_I2C_Mem_Read+0x224>
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	2201      	movs	r2, #1
 800dd1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800dd22:	f7fd fbe5 	bl	800b4f0 <HAL_GetTick>
 800dd26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	9300      	str	r3, [sp, #0]
 800dd2c:	2319      	movs	r3, #25
 800dd2e:	2201      	movs	r2, #1
 800dd30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dd34:	68f8      	ldr	r0, [r7, #12]
 800dd36:	f000 fac5 	bl	800e2c4 <I2C_WaitOnFlagUntilTimeout>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d001      	beq.n	800dd44 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800dd40:	2301      	movs	r3, #1
 800dd42:	e0d5      	b.n	800def0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	2222      	movs	r2, #34	; 0x22
 800dd48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	2240      	movs	r2, #64	; 0x40
 800dd50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2200      	movs	r2, #0
 800dd58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	6a3a      	ldr	r2, [r7, #32]
 800dd5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dd64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dd6c:	88f8      	ldrh	r0, [r7, #6]
 800dd6e:	893a      	ldrh	r2, [r7, #8]
 800dd70:	8979      	ldrh	r1, [r7, #10]
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	9301      	str	r3, [sp, #4]
 800dd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd78:	9300      	str	r3, [sp, #0]
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	68f8      	ldr	r0, [r7, #12]
 800dd7e:	f000 fa29 	bl	800e1d4 <I2C_RequestMemoryRead>
 800dd82:	4603      	mov	r3, r0
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d005      	beq.n	800dd94 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800dd90:	2301      	movs	r3, #1
 800dd92:	e0ad      	b.n	800def0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd98:	b29b      	uxth	r3, r3
 800dd9a:	2bff      	cmp	r3, #255	; 0xff
 800dd9c:	d90e      	bls.n	800ddbc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	22ff      	movs	r2, #255	; 0xff
 800dda2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dda8:	b2da      	uxtb	r2, r3
 800ddaa:	8979      	ldrh	r1, [r7, #10]
 800ddac:	4b52      	ldr	r3, [pc, #328]	; (800def8 <HAL_I2C_Mem_Read+0x22c>)
 800ddae:	9300      	str	r3, [sp, #0]
 800ddb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ddb4:	68f8      	ldr	r0, [r7, #12]
 800ddb6:	f000 fca7 	bl	800e708 <I2C_TransferConfig>
 800ddba:	e00f      	b.n	800dddc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ddc0:	b29a      	uxth	r2, r3
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddca:	b2da      	uxtb	r2, r3
 800ddcc:	8979      	ldrh	r1, [r7, #10]
 800ddce:	4b4a      	ldr	r3, [pc, #296]	; (800def8 <HAL_I2C_Mem_Read+0x22c>)
 800ddd0:	9300      	str	r3, [sp, #0]
 800ddd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ddd6:	68f8      	ldr	r0, [r7, #12]
 800ddd8:	f000 fc96 	bl	800e708 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	9300      	str	r3, [sp, #0]
 800dde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde2:	2200      	movs	r2, #0
 800dde4:	2104      	movs	r1, #4
 800dde6:	68f8      	ldr	r0, [r7, #12]
 800dde8:	f000 fa6c 	bl	800e2c4 <I2C_WaitOnFlagUntilTimeout>
 800ddec:	4603      	mov	r3, r0
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d001      	beq.n	800ddf6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	e07c      	b.n	800def0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de00:	b2d2      	uxtb	r2, r2
 800de02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de08:	1c5a      	adds	r2, r3, #1
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de12:	3b01      	subs	r3, #1
 800de14:	b29a      	uxth	r2, r3
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de1e:	b29b      	uxth	r3, r3
 800de20:	3b01      	subs	r3, #1
 800de22:	b29a      	uxth	r2, r3
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d034      	beq.n	800de9c <HAL_I2C_Mem_Read+0x1d0>
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de36:	2b00      	cmp	r3, #0
 800de38:	d130      	bne.n	800de9c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	9300      	str	r3, [sp, #0]
 800de3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de40:	2200      	movs	r2, #0
 800de42:	2180      	movs	r1, #128	; 0x80
 800de44:	68f8      	ldr	r0, [r7, #12]
 800de46:	f000 fa3d 	bl	800e2c4 <I2C_WaitOnFlagUntilTimeout>
 800de4a:	4603      	mov	r3, r0
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d001      	beq.n	800de54 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800de50:	2301      	movs	r3, #1
 800de52:	e04d      	b.n	800def0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de58:	b29b      	uxth	r3, r3
 800de5a:	2bff      	cmp	r3, #255	; 0xff
 800de5c:	d90e      	bls.n	800de7c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	22ff      	movs	r2, #255	; 0xff
 800de62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de68:	b2da      	uxtb	r2, r3
 800de6a:	8979      	ldrh	r1, [r7, #10]
 800de6c:	2300      	movs	r3, #0
 800de6e:	9300      	str	r3, [sp, #0]
 800de70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800de74:	68f8      	ldr	r0, [r7, #12]
 800de76:	f000 fc47 	bl	800e708 <I2C_TransferConfig>
 800de7a:	e00f      	b.n	800de9c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de80:	b29a      	uxth	r2, r3
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de8a:	b2da      	uxtb	r2, r3
 800de8c:	8979      	ldrh	r1, [r7, #10]
 800de8e:	2300      	movs	r3, #0
 800de90:	9300      	str	r3, [sp, #0]
 800de92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800de96:	68f8      	ldr	r0, [r7, #12]
 800de98:	f000 fc36 	bl	800e708 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d19a      	bne.n	800dddc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dea6:	697a      	ldr	r2, [r7, #20]
 800dea8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800deaa:	68f8      	ldr	r0, [r7, #12]
 800deac:	f000 fa8a 	bl	800e3c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800deb0:	4603      	mov	r3, r0
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d001      	beq.n	800deba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800deb6:	2301      	movs	r3, #1
 800deb8:	e01a      	b.n	800def0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	2220      	movs	r2, #32
 800dec0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	6859      	ldr	r1, [r3, #4]
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	681a      	ldr	r2, [r3, #0]
 800decc:	4b0b      	ldr	r3, [pc, #44]	; (800defc <HAL_I2C_Mem_Read+0x230>)
 800dece:	400b      	ands	r3, r1
 800ded0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	2220      	movs	r2, #32
 800ded6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2200      	movs	r2, #0
 800dede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	2200      	movs	r2, #0
 800dee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800deea:	2300      	movs	r3, #0
 800deec:	e000      	b.n	800def0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800deee:	2302      	movs	r3, #2
  }
}
 800def0:	4618      	mov	r0, r3
 800def2:	3718      	adds	r7, #24
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}
 800def8:	80002400 	.word	0x80002400
 800defc:	fe00e800 	.word	0xfe00e800

0800df00 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b08a      	sub	sp, #40	; 0x28
 800df04:	af02      	add	r7, sp, #8
 800df06:	60f8      	str	r0, [r7, #12]
 800df08:	607a      	str	r2, [r7, #4]
 800df0a:	603b      	str	r3, [r7, #0]
 800df0c:	460b      	mov	r3, r1
 800df0e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800df10:	2300      	movs	r3, #0
 800df12:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800df1a:	b2db      	uxtb	r3, r3
 800df1c:	2b20      	cmp	r3, #32
 800df1e:	f040 80f1 	bne.w	800e104 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	699b      	ldr	r3, [r3, #24]
 800df28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800df2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df30:	d101      	bne.n	800df36 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800df32:	2302      	movs	r3, #2
 800df34:	e0e7      	b.n	800e106 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800df3c:	2b01      	cmp	r3, #1
 800df3e:	d101      	bne.n	800df44 <HAL_I2C_IsDeviceReady+0x44>
 800df40:	2302      	movs	r3, #2
 800df42:	e0e0      	b.n	800e106 <HAL_I2C_IsDeviceReady+0x206>
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	2201      	movs	r2, #1
 800df48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	2224      	movs	r2, #36	; 0x24
 800df50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	2200      	movs	r2, #0
 800df58:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	68db      	ldr	r3, [r3, #12]
 800df5e:	2b01      	cmp	r3, #1
 800df60:	d107      	bne.n	800df72 <HAL_I2C_IsDeviceReady+0x72>
 800df62:	897b      	ldrh	r3, [r7, #10]
 800df64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800df68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800df6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800df70:	e004      	b.n	800df7c <HAL_I2C_IsDeviceReady+0x7c>
 800df72:	897b      	ldrh	r3, [r7, #10]
 800df74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800df78:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800df7c:	68fa      	ldr	r2, [r7, #12]
 800df7e:	6812      	ldr	r2, [r2, #0]
 800df80:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800df82:	f7fd fab5 	bl	800b4f0 <HAL_GetTick>
 800df86:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	699b      	ldr	r3, [r3, #24]
 800df8e:	f003 0320 	and.w	r3, r3, #32
 800df92:	2b20      	cmp	r3, #32
 800df94:	bf0c      	ite	eq
 800df96:	2301      	moveq	r3, #1
 800df98:	2300      	movne	r3, #0
 800df9a:	b2db      	uxtb	r3, r3
 800df9c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	699b      	ldr	r3, [r3, #24]
 800dfa4:	f003 0310 	and.w	r3, r3, #16
 800dfa8:	2b10      	cmp	r3, #16
 800dfaa:	bf0c      	ite	eq
 800dfac:	2301      	moveq	r3, #1
 800dfae:	2300      	movne	r3, #0
 800dfb0:	b2db      	uxtb	r3, r3
 800dfb2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800dfb4:	e034      	b.n	800e020 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfbc:	d01a      	beq.n	800dff4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800dfbe:	f7fd fa97 	bl	800b4f0 <HAL_GetTick>
 800dfc2:	4602      	mov	r2, r0
 800dfc4:	69bb      	ldr	r3, [r7, #24]
 800dfc6:	1ad3      	subs	r3, r2, r3
 800dfc8:	683a      	ldr	r2, [r7, #0]
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d302      	bcc.n	800dfd4 <HAL_I2C_IsDeviceReady+0xd4>
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d10f      	bne.n	800dff4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2220      	movs	r2, #32
 800dfd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfe0:	f043 0220 	orr.w	r2, r3, #32
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	2200      	movs	r2, #0
 800dfec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800dff0:	2301      	movs	r3, #1
 800dff2:	e088      	b.n	800e106 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	699b      	ldr	r3, [r3, #24]
 800dffa:	f003 0320 	and.w	r3, r3, #32
 800dffe:	2b20      	cmp	r3, #32
 800e000:	bf0c      	ite	eq
 800e002:	2301      	moveq	r3, #1
 800e004:	2300      	movne	r3, #0
 800e006:	b2db      	uxtb	r3, r3
 800e008:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	699b      	ldr	r3, [r3, #24]
 800e010:	f003 0310 	and.w	r3, r3, #16
 800e014:	2b10      	cmp	r3, #16
 800e016:	bf0c      	ite	eq
 800e018:	2301      	moveq	r3, #1
 800e01a:	2300      	movne	r3, #0
 800e01c:	b2db      	uxtb	r3, r3
 800e01e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800e020:	7ffb      	ldrb	r3, [r7, #31]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d102      	bne.n	800e02c <HAL_I2C_IsDeviceReady+0x12c>
 800e026:	7fbb      	ldrb	r3, [r7, #30]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d0c4      	beq.n	800dfb6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	699b      	ldr	r3, [r3, #24]
 800e032:	f003 0310 	and.w	r3, r3, #16
 800e036:	2b10      	cmp	r3, #16
 800e038:	d01a      	beq.n	800e070 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800e03a:	69bb      	ldr	r3, [r7, #24]
 800e03c:	9300      	str	r3, [sp, #0]
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	2200      	movs	r2, #0
 800e042:	2120      	movs	r1, #32
 800e044:	68f8      	ldr	r0, [r7, #12]
 800e046:	f000 f93d 	bl	800e2c4 <I2C_WaitOnFlagUntilTimeout>
 800e04a:	4603      	mov	r3, r0
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d001      	beq.n	800e054 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800e050:	2301      	movs	r3, #1
 800e052:	e058      	b.n	800e106 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	2220      	movs	r2, #32
 800e05a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	2220      	movs	r2, #32
 800e060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	2200      	movs	r2, #0
 800e068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800e06c:	2300      	movs	r3, #0
 800e06e:	e04a      	b.n	800e106 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800e070:	69bb      	ldr	r3, [r7, #24]
 800e072:	9300      	str	r3, [sp, #0]
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	2200      	movs	r2, #0
 800e078:	2120      	movs	r1, #32
 800e07a:	68f8      	ldr	r0, [r7, #12]
 800e07c:	f000 f922 	bl	800e2c4 <I2C_WaitOnFlagUntilTimeout>
 800e080:	4603      	mov	r3, r0
 800e082:	2b00      	cmp	r3, #0
 800e084:	d001      	beq.n	800e08a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800e086:	2301      	movs	r3, #1
 800e088:	e03d      	b.n	800e106 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	2210      	movs	r2, #16
 800e090:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	2220      	movs	r2, #32
 800e098:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800e09a:	697b      	ldr	r3, [r7, #20]
 800e09c:	687a      	ldr	r2, [r7, #4]
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d118      	bne.n	800e0d4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	685a      	ldr	r2, [r3, #4]
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e0b0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800e0b2:	69bb      	ldr	r3, [r7, #24]
 800e0b4:	9300      	str	r3, [sp, #0]
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	2120      	movs	r1, #32
 800e0bc:	68f8      	ldr	r0, [r7, #12]
 800e0be:	f000 f901 	bl	800e2c4 <I2C_WaitOnFlagUntilTimeout>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d001      	beq.n	800e0cc <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	e01c      	b.n	800e106 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	2220      	movs	r2, #32
 800e0d2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	687a      	ldr	r2, [r7, #4]
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	f63f af3b 	bhi.w	800df5a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	2220      	movs	r2, #32
 800e0e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0f0:	f043 0220 	orr.w	r2, r3, #32
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800e100:	2301      	movs	r3, #1
 800e102:	e000      	b.n	800e106 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800e104:	2302      	movs	r3, #2
  }
}
 800e106:	4618      	mov	r0, r3
 800e108:	3720      	adds	r7, #32
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}

0800e10e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800e10e:	b480      	push	{r7}
 800e110:	b083      	sub	sp, #12
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e11c:	b2db      	uxtb	r3, r3
}
 800e11e:	4618      	mov	r0, r3
 800e120:	370c      	adds	r7, #12
 800e122:	46bd      	mov	sp, r7
 800e124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e128:	4770      	bx	lr
	...

0800e12c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b086      	sub	sp, #24
 800e130:	af02      	add	r7, sp, #8
 800e132:	60f8      	str	r0, [r7, #12]
 800e134:	4608      	mov	r0, r1
 800e136:	4611      	mov	r1, r2
 800e138:	461a      	mov	r2, r3
 800e13a:	4603      	mov	r3, r0
 800e13c:	817b      	strh	r3, [r7, #10]
 800e13e:	460b      	mov	r3, r1
 800e140:	813b      	strh	r3, [r7, #8]
 800e142:	4613      	mov	r3, r2
 800e144:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e146:	88fb      	ldrh	r3, [r7, #6]
 800e148:	b2da      	uxtb	r2, r3
 800e14a:	8979      	ldrh	r1, [r7, #10]
 800e14c:	4b20      	ldr	r3, [pc, #128]	; (800e1d0 <I2C_RequestMemoryWrite+0xa4>)
 800e14e:	9300      	str	r3, [sp, #0]
 800e150:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e154:	68f8      	ldr	r0, [r7, #12]
 800e156:	f000 fad7 	bl	800e708 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e15a:	69fa      	ldr	r2, [r7, #28]
 800e15c:	69b9      	ldr	r1, [r7, #24]
 800e15e:	68f8      	ldr	r0, [r7, #12]
 800e160:	f000 f8f0 	bl	800e344 <I2C_WaitOnTXISFlagUntilTimeout>
 800e164:	4603      	mov	r3, r0
 800e166:	2b00      	cmp	r3, #0
 800e168:	d001      	beq.n	800e16e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800e16a:	2301      	movs	r3, #1
 800e16c:	e02c      	b.n	800e1c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e16e:	88fb      	ldrh	r3, [r7, #6]
 800e170:	2b01      	cmp	r3, #1
 800e172:	d105      	bne.n	800e180 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e174:	893b      	ldrh	r3, [r7, #8]
 800e176:	b2da      	uxtb	r2, r3
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	629a      	str	r2, [r3, #40]	; 0x28
 800e17e:	e015      	b.n	800e1ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e180:	893b      	ldrh	r3, [r7, #8]
 800e182:	0a1b      	lsrs	r3, r3, #8
 800e184:	b29b      	uxth	r3, r3
 800e186:	b2da      	uxtb	r2, r3
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e18e:	69fa      	ldr	r2, [r7, #28]
 800e190:	69b9      	ldr	r1, [r7, #24]
 800e192:	68f8      	ldr	r0, [r7, #12]
 800e194:	f000 f8d6 	bl	800e344 <I2C_WaitOnTXISFlagUntilTimeout>
 800e198:	4603      	mov	r3, r0
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d001      	beq.n	800e1a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800e19e:	2301      	movs	r3, #1
 800e1a0:	e012      	b.n	800e1c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e1a2:	893b      	ldrh	r3, [r7, #8]
 800e1a4:	b2da      	uxtb	r2, r3
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800e1ac:	69fb      	ldr	r3, [r7, #28]
 800e1ae:	9300      	str	r3, [sp, #0]
 800e1b0:	69bb      	ldr	r3, [r7, #24]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	2180      	movs	r1, #128	; 0x80
 800e1b6:	68f8      	ldr	r0, [r7, #12]
 800e1b8:	f000 f884 	bl	800e2c4 <I2C_WaitOnFlagUntilTimeout>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d001      	beq.n	800e1c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	e000      	b.n	800e1c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800e1c6:	2300      	movs	r3, #0
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3710      	adds	r7, #16
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}
 800e1d0:	80002000 	.word	0x80002000

0800e1d4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b086      	sub	sp, #24
 800e1d8:	af02      	add	r7, sp, #8
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	4608      	mov	r0, r1
 800e1de:	4611      	mov	r1, r2
 800e1e0:	461a      	mov	r2, r3
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	817b      	strh	r3, [r7, #10]
 800e1e6:	460b      	mov	r3, r1
 800e1e8:	813b      	strh	r3, [r7, #8]
 800e1ea:	4613      	mov	r3, r2
 800e1ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800e1ee:	88fb      	ldrh	r3, [r7, #6]
 800e1f0:	b2da      	uxtb	r2, r3
 800e1f2:	8979      	ldrh	r1, [r7, #10]
 800e1f4:	4b20      	ldr	r3, [pc, #128]	; (800e278 <I2C_RequestMemoryRead+0xa4>)
 800e1f6:	9300      	str	r3, [sp, #0]
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	68f8      	ldr	r0, [r7, #12]
 800e1fc:	f000 fa84 	bl	800e708 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e200:	69fa      	ldr	r2, [r7, #28]
 800e202:	69b9      	ldr	r1, [r7, #24]
 800e204:	68f8      	ldr	r0, [r7, #12]
 800e206:	f000 f89d 	bl	800e344 <I2C_WaitOnTXISFlagUntilTimeout>
 800e20a:	4603      	mov	r3, r0
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d001      	beq.n	800e214 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800e210:	2301      	movs	r3, #1
 800e212:	e02c      	b.n	800e26e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e214:	88fb      	ldrh	r3, [r7, #6]
 800e216:	2b01      	cmp	r3, #1
 800e218:	d105      	bne.n	800e226 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e21a:	893b      	ldrh	r3, [r7, #8]
 800e21c:	b2da      	uxtb	r2, r3
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	629a      	str	r2, [r3, #40]	; 0x28
 800e224:	e015      	b.n	800e252 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e226:	893b      	ldrh	r3, [r7, #8]
 800e228:	0a1b      	lsrs	r3, r3, #8
 800e22a:	b29b      	uxth	r3, r3
 800e22c:	b2da      	uxtb	r2, r3
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e234:	69fa      	ldr	r2, [r7, #28]
 800e236:	69b9      	ldr	r1, [r7, #24]
 800e238:	68f8      	ldr	r0, [r7, #12]
 800e23a:	f000 f883 	bl	800e344 <I2C_WaitOnTXISFlagUntilTimeout>
 800e23e:	4603      	mov	r3, r0
 800e240:	2b00      	cmp	r3, #0
 800e242:	d001      	beq.n	800e248 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800e244:	2301      	movs	r3, #1
 800e246:	e012      	b.n	800e26e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e248:	893b      	ldrh	r3, [r7, #8]
 800e24a:	b2da      	uxtb	r2, r3
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800e252:	69fb      	ldr	r3, [r7, #28]
 800e254:	9300      	str	r3, [sp, #0]
 800e256:	69bb      	ldr	r3, [r7, #24]
 800e258:	2200      	movs	r2, #0
 800e25a:	2140      	movs	r1, #64	; 0x40
 800e25c:	68f8      	ldr	r0, [r7, #12]
 800e25e:	f000 f831 	bl	800e2c4 <I2C_WaitOnFlagUntilTimeout>
 800e262:	4603      	mov	r3, r0
 800e264:	2b00      	cmp	r3, #0
 800e266:	d001      	beq.n	800e26c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800e268:	2301      	movs	r3, #1
 800e26a:	e000      	b.n	800e26e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800e26c:	2300      	movs	r3, #0
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3710      	adds	r7, #16
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
 800e276:	bf00      	nop
 800e278:	80002000 	.word	0x80002000

0800e27c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e27c:	b480      	push	{r7}
 800e27e:	b083      	sub	sp, #12
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	699b      	ldr	r3, [r3, #24]
 800e28a:	f003 0302 	and.w	r3, r3, #2
 800e28e:	2b02      	cmp	r3, #2
 800e290:	d103      	bne.n	800e29a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	2200      	movs	r2, #0
 800e298:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	699b      	ldr	r3, [r3, #24]
 800e2a0:	f003 0301 	and.w	r3, r3, #1
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d007      	beq.n	800e2b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	699a      	ldr	r2, [r3, #24]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	f042 0201 	orr.w	r2, r2, #1
 800e2b6:	619a      	str	r2, [r3, #24]
  }
}
 800e2b8:	bf00      	nop
 800e2ba:	370c      	adds	r7, #12
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c2:	4770      	bx	lr

0800e2c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b084      	sub	sp, #16
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	60f8      	str	r0, [r7, #12]
 800e2cc:	60b9      	str	r1, [r7, #8]
 800e2ce:	603b      	str	r3, [r7, #0]
 800e2d0:	4613      	mov	r3, r2
 800e2d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e2d4:	e022      	b.n	800e31c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2dc:	d01e      	beq.n	800e31c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e2de:	f7fd f907 	bl	800b4f0 <HAL_GetTick>
 800e2e2:	4602      	mov	r2, r0
 800e2e4:	69bb      	ldr	r3, [r7, #24]
 800e2e6:	1ad3      	subs	r3, r2, r3
 800e2e8:	683a      	ldr	r2, [r7, #0]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d302      	bcc.n	800e2f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d113      	bne.n	800e31c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2f8:	f043 0220 	orr.w	r2, r3, #32
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2220      	movs	r2, #32
 800e304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	2200      	movs	r2, #0
 800e30c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	2200      	movs	r2, #0
 800e314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800e318:	2301      	movs	r3, #1
 800e31a:	e00f      	b.n	800e33c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	699a      	ldr	r2, [r3, #24]
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	4013      	ands	r3, r2
 800e326:	68ba      	ldr	r2, [r7, #8]
 800e328:	429a      	cmp	r2, r3
 800e32a:	bf0c      	ite	eq
 800e32c:	2301      	moveq	r3, #1
 800e32e:	2300      	movne	r3, #0
 800e330:	b2db      	uxtb	r3, r3
 800e332:	461a      	mov	r2, r3
 800e334:	79fb      	ldrb	r3, [r7, #7]
 800e336:	429a      	cmp	r2, r3
 800e338:	d0cd      	beq.n	800e2d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e33a:	2300      	movs	r3, #0
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3710      	adds	r7, #16
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}

0800e344 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b084      	sub	sp, #16
 800e348:	af00      	add	r7, sp, #0
 800e34a:	60f8      	str	r0, [r7, #12]
 800e34c:	60b9      	str	r1, [r7, #8]
 800e34e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e350:	e02c      	b.n	800e3ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e352:	687a      	ldr	r2, [r7, #4]
 800e354:	68b9      	ldr	r1, [r7, #8]
 800e356:	68f8      	ldr	r0, [r7, #12]
 800e358:	f000 f8ea 	bl	800e530 <I2C_IsErrorOccurred>
 800e35c:	4603      	mov	r3, r0
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d001      	beq.n	800e366 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e362:	2301      	movs	r3, #1
 800e364:	e02a      	b.n	800e3bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e36c:	d01e      	beq.n	800e3ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e36e:	f7fd f8bf 	bl	800b4f0 <HAL_GetTick>
 800e372:	4602      	mov	r2, r0
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	1ad3      	subs	r3, r2, r3
 800e378:	68ba      	ldr	r2, [r7, #8]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d302      	bcc.n	800e384 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d113      	bne.n	800e3ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e388:	f043 0220 	orr.w	r2, r3, #32
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2220      	movs	r2, #32
 800e394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	2200      	movs	r2, #0
 800e39c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	e007      	b.n	800e3bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	699b      	ldr	r3, [r3, #24]
 800e3b2:	f003 0302 	and.w	r3, r3, #2
 800e3b6:	2b02      	cmp	r3, #2
 800e3b8:	d1cb      	bne.n	800e352 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e3ba:	2300      	movs	r3, #0
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3710      	adds	r7, #16
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}

0800e3c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b084      	sub	sp, #16
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	60f8      	str	r0, [r7, #12]
 800e3cc:	60b9      	str	r1, [r7, #8]
 800e3ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e3d0:	e028      	b.n	800e424 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e3d2:	687a      	ldr	r2, [r7, #4]
 800e3d4:	68b9      	ldr	r1, [r7, #8]
 800e3d6:	68f8      	ldr	r0, [r7, #12]
 800e3d8:	f000 f8aa 	bl	800e530 <I2C_IsErrorOccurred>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d001      	beq.n	800e3e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e3e2:	2301      	movs	r3, #1
 800e3e4:	e026      	b.n	800e434 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e3e6:	f7fd f883 	bl	800b4f0 <HAL_GetTick>
 800e3ea:	4602      	mov	r2, r0
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	1ad3      	subs	r3, r2, r3
 800e3f0:	68ba      	ldr	r2, [r7, #8]
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d302      	bcc.n	800e3fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d113      	bne.n	800e424 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e400:	f043 0220 	orr.w	r2, r3, #32
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	2220      	movs	r2, #32
 800e40c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	2200      	movs	r2, #0
 800e414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	2200      	movs	r2, #0
 800e41c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800e420:	2301      	movs	r3, #1
 800e422:	e007      	b.n	800e434 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	699b      	ldr	r3, [r3, #24]
 800e42a:	f003 0320 	and.w	r3, r3, #32
 800e42e:	2b20      	cmp	r3, #32
 800e430:	d1cf      	bne.n	800e3d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e432:	2300      	movs	r3, #0
}
 800e434:	4618      	mov	r0, r3
 800e436:	3710      	adds	r7, #16
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b084      	sub	sp, #16
 800e440:	af00      	add	r7, sp, #0
 800e442:	60f8      	str	r0, [r7, #12]
 800e444:	60b9      	str	r1, [r7, #8]
 800e446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e448:	e064      	b.n	800e514 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e44a:	687a      	ldr	r2, [r7, #4]
 800e44c:	68b9      	ldr	r1, [r7, #8]
 800e44e:	68f8      	ldr	r0, [r7, #12]
 800e450:	f000 f86e 	bl	800e530 <I2C_IsErrorOccurred>
 800e454:	4603      	mov	r3, r0
 800e456:	2b00      	cmp	r3, #0
 800e458:	d001      	beq.n	800e45e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e45a:	2301      	movs	r3, #1
 800e45c:	e062      	b.n	800e524 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	699b      	ldr	r3, [r3, #24]
 800e464:	f003 0320 	and.w	r3, r3, #32
 800e468:	2b20      	cmp	r3, #32
 800e46a:	d138      	bne.n	800e4de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	699b      	ldr	r3, [r3, #24]
 800e472:	f003 0304 	and.w	r3, r3, #4
 800e476:	2b04      	cmp	r3, #4
 800e478:	d105      	bne.n	800e486 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d001      	beq.n	800e486 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800e482:	2300      	movs	r3, #0
 800e484:	e04e      	b.n	800e524 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	699b      	ldr	r3, [r3, #24]
 800e48c:	f003 0310 	and.w	r3, r3, #16
 800e490:	2b10      	cmp	r3, #16
 800e492:	d107      	bne.n	800e4a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	2210      	movs	r2, #16
 800e49a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	2204      	movs	r2, #4
 800e4a0:	645a      	str	r2, [r3, #68]	; 0x44
 800e4a2:	e002      	b.n	800e4aa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	2220      	movs	r2, #32
 800e4b0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	6859      	ldr	r1, [r3, #4]
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681a      	ldr	r2, [r3, #0]
 800e4bc:	4b1b      	ldr	r3, [pc, #108]	; (800e52c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800e4be:	400b      	ands	r3, r1
 800e4c0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	2220      	movs	r2, #32
 800e4c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800e4da:	2301      	movs	r3, #1
 800e4dc:	e022      	b.n	800e524 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e4de:	f7fd f807 	bl	800b4f0 <HAL_GetTick>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	1ad3      	subs	r3, r2, r3
 800e4e8:	68ba      	ldr	r2, [r7, #8]
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d302      	bcc.n	800e4f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d10f      	bne.n	800e514 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4f8:	f043 0220 	orr.w	r2, r3, #32
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	2220      	movs	r2, #32
 800e504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2200      	movs	r2, #0
 800e50c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800e510:	2301      	movs	r3, #1
 800e512:	e007      	b.n	800e524 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	699b      	ldr	r3, [r3, #24]
 800e51a:	f003 0304 	and.w	r3, r3, #4
 800e51e:	2b04      	cmp	r3, #4
 800e520:	d193      	bne.n	800e44a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e522:	2300      	movs	r3, #0
}
 800e524:	4618      	mov	r0, r3
 800e526:	3710      	adds	r7, #16
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}
 800e52c:	fe00e800 	.word	0xfe00e800

0800e530 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b08a      	sub	sp, #40	; 0x28
 800e534:	af00      	add	r7, sp, #0
 800e536:	60f8      	str	r0, [r7, #12]
 800e538:	60b9      	str	r1, [r7, #8]
 800e53a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e53c:	2300      	movs	r3, #0
 800e53e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	699b      	ldr	r3, [r3, #24]
 800e548:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800e54a:	2300      	movs	r3, #0
 800e54c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800e552:	69bb      	ldr	r3, [r7, #24]
 800e554:	f003 0310 	and.w	r3, r3, #16
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d075      	beq.n	800e648 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	2210      	movs	r2, #16
 800e562:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e564:	e056      	b.n	800e614 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e56c:	d052      	beq.n	800e614 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e56e:	f7fc ffbf 	bl	800b4f0 <HAL_GetTick>
 800e572:	4602      	mov	r2, r0
 800e574:	69fb      	ldr	r3, [r7, #28]
 800e576:	1ad3      	subs	r3, r2, r3
 800e578:	68ba      	ldr	r2, [r7, #8]
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d302      	bcc.n	800e584 <I2C_IsErrorOccurred+0x54>
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d147      	bne.n	800e614 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	685b      	ldr	r3, [r3, #4]
 800e58a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e58e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e596:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	699b      	ldr	r3, [r3, #24]
 800e59e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e5a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e5a6:	d12e      	bne.n	800e606 <I2C_IsErrorOccurred+0xd6>
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e5ae:	d02a      	beq.n	800e606 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800e5b0:	7cfb      	ldrb	r3, [r7, #19]
 800e5b2:	2b20      	cmp	r3, #32
 800e5b4:	d027      	beq.n	800e606 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	685a      	ldr	r2, [r3, #4]
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e5c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800e5c6:	f7fc ff93 	bl	800b4f0 <HAL_GetTick>
 800e5ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e5cc:	e01b      	b.n	800e606 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800e5ce:	f7fc ff8f 	bl	800b4f0 <HAL_GetTick>
 800e5d2:	4602      	mov	r2, r0
 800e5d4:	69fb      	ldr	r3, [r7, #28]
 800e5d6:	1ad3      	subs	r3, r2, r3
 800e5d8:	2b19      	cmp	r3, #25
 800e5da:	d914      	bls.n	800e606 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5e0:	f043 0220 	orr.w	r2, r3, #32
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	2220      	movs	r2, #32
 800e5ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800e600:	2301      	movs	r3, #1
 800e602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	699b      	ldr	r3, [r3, #24]
 800e60c:	f003 0320 	and.w	r3, r3, #32
 800e610:	2b20      	cmp	r3, #32
 800e612:	d1dc      	bne.n	800e5ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	699b      	ldr	r3, [r3, #24]
 800e61a:	f003 0320 	and.w	r3, r3, #32
 800e61e:	2b20      	cmp	r3, #32
 800e620:	d003      	beq.n	800e62a <I2C_IsErrorOccurred+0xfa>
 800e622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e626:	2b00      	cmp	r3, #0
 800e628:	d09d      	beq.n	800e566 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800e62a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d103      	bne.n	800e63a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	2220      	movs	r2, #32
 800e638:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800e63a:	6a3b      	ldr	r3, [r7, #32]
 800e63c:	f043 0304 	orr.w	r3, r3, #4
 800e640:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800e642:	2301      	movs	r3, #1
 800e644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	699b      	ldr	r3, [r3, #24]
 800e64e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800e650:	69bb      	ldr	r3, [r7, #24]
 800e652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e656:	2b00      	cmp	r3, #0
 800e658:	d00b      	beq.n	800e672 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800e65a:	6a3b      	ldr	r3, [r7, #32]
 800e65c:	f043 0301 	orr.w	r3, r3, #1
 800e660:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e66a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e66c:	2301      	movs	r3, #1
 800e66e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800e672:	69bb      	ldr	r3, [r7, #24]
 800e674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d00b      	beq.n	800e694 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800e67c:	6a3b      	ldr	r3, [r7, #32]
 800e67e:	f043 0308 	orr.w	r3, r3, #8
 800e682:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e68c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e68e:	2301      	movs	r3, #1
 800e690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800e694:	69bb      	ldr	r3, [r7, #24]
 800e696:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d00b      	beq.n	800e6b6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800e69e:	6a3b      	ldr	r3, [r7, #32]
 800e6a0:	f043 0302 	orr.w	r3, r3, #2
 800e6a4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e6ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800e6b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d01c      	beq.n	800e6f8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e6be:	68f8      	ldr	r0, [r7, #12]
 800e6c0:	f7ff fddc 	bl	800e27c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	6859      	ldr	r1, [r3, #4]
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681a      	ldr	r2, [r3, #0]
 800e6ce:	4b0d      	ldr	r3, [pc, #52]	; (800e704 <I2C_IsErrorOccurred+0x1d4>)
 800e6d0:	400b      	ands	r3, r1
 800e6d2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e6d8:	6a3b      	ldr	r3, [r7, #32]
 800e6da:	431a      	orrs	r2, r3
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	2220      	movs	r2, #32
 800e6e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800e6f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	3728      	adds	r7, #40	; 0x28
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}
 800e704:	fe00e800 	.word	0xfe00e800

0800e708 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800e708:	b480      	push	{r7}
 800e70a:	b087      	sub	sp, #28
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	60f8      	str	r0, [r7, #12]
 800e710:	607b      	str	r3, [r7, #4]
 800e712:	460b      	mov	r3, r1
 800e714:	817b      	strh	r3, [r7, #10]
 800e716:	4613      	mov	r3, r2
 800e718:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e71a:	897b      	ldrh	r3, [r7, #10]
 800e71c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e720:	7a7b      	ldrb	r3, [r7, #9]
 800e722:	041b      	lsls	r3, r3, #16
 800e724:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e728:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e72e:	6a3b      	ldr	r3, [r7, #32]
 800e730:	4313      	orrs	r3, r2
 800e732:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e736:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	685a      	ldr	r2, [r3, #4]
 800e73e:	6a3b      	ldr	r3, [r7, #32]
 800e740:	0d5b      	lsrs	r3, r3, #21
 800e742:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800e746:	4b08      	ldr	r3, [pc, #32]	; (800e768 <I2C_TransferConfig+0x60>)
 800e748:	430b      	orrs	r3, r1
 800e74a:	43db      	mvns	r3, r3
 800e74c:	ea02 0103 	and.w	r1, r2, r3
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	697a      	ldr	r2, [r7, #20]
 800e756:	430a      	orrs	r2, r1
 800e758:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800e75a:	bf00      	nop
 800e75c:	371c      	adds	r7, #28
 800e75e:	46bd      	mov	sp, r7
 800e760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e764:	4770      	bx	lr
 800e766:	bf00      	nop
 800e768:	03ff63ff 	.word	0x03ff63ff

0800e76c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e76c:	b480      	push	{r7}
 800e76e:	b083      	sub	sp, #12
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
 800e774:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e77c:	b2db      	uxtb	r3, r3
 800e77e:	2b20      	cmp	r3, #32
 800e780:	d138      	bne.n	800e7f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e788:	2b01      	cmp	r3, #1
 800e78a:	d101      	bne.n	800e790 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800e78c:	2302      	movs	r3, #2
 800e78e:	e032      	b.n	800e7f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2201      	movs	r2, #1
 800e794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2224      	movs	r2, #36	; 0x24
 800e79c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	681a      	ldr	r2, [r3, #0]
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f022 0201 	bic.w	r2, r2, #1
 800e7ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	681a      	ldr	r2, [r3, #0]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e7be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	6819      	ldr	r1, [r3, #0]
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	683a      	ldr	r2, [r7, #0]
 800e7cc:	430a      	orrs	r2, r1
 800e7ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	681a      	ldr	r2, [r3, #0]
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f042 0201 	orr.w	r2, r2, #1
 800e7de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2220      	movs	r2, #32
 800e7e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	e000      	b.n	800e7f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e7f4:	2302      	movs	r3, #2
  }
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	370c      	adds	r7, #12
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e800:	4770      	bx	lr

0800e802 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e802:	b480      	push	{r7}
 800e804:	b085      	sub	sp, #20
 800e806:	af00      	add	r7, sp, #0
 800e808:	6078      	str	r0, [r7, #4]
 800e80a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e812:	b2db      	uxtb	r3, r3
 800e814:	2b20      	cmp	r3, #32
 800e816:	d139      	bne.n	800e88c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e81e:	2b01      	cmp	r3, #1
 800e820:	d101      	bne.n	800e826 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800e822:	2302      	movs	r3, #2
 800e824:	e033      	b.n	800e88e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2201      	movs	r2, #1
 800e82a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2224      	movs	r2, #36	; 0x24
 800e832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	681a      	ldr	r2, [r3, #0]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	f022 0201 	bic.w	r2, r2, #1
 800e844:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800e854:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	021b      	lsls	r3, r3, #8
 800e85a:	68fa      	ldr	r2, [r7, #12]
 800e85c:	4313      	orrs	r3, r2
 800e85e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	68fa      	ldr	r2, [r7, #12]
 800e866:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	681a      	ldr	r2, [r3, #0]
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	f042 0201 	orr.w	r2, r2, #1
 800e876:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2220      	movs	r2, #32
 800e87c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2200      	movs	r2, #0
 800e884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e888:	2300      	movs	r3, #0
 800e88a:	e000      	b.n	800e88e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800e88c:	2302      	movs	r3, #2
  }
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3714      	adds	r7, #20
 800e892:	46bd      	mov	sp, r7
 800e894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e898:	4770      	bx	lr

0800e89a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800e89a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e89c:	b08f      	sub	sp, #60	; 0x3c
 800e89e:	af0a      	add	r7, sp, #40	; 0x28
 800e8a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d101      	bne.n	800e8ac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	e116      	b.n	800eada <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800e8b8:	b2db      	uxtb	r3, r3
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d106      	bne.n	800e8cc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f00a fa74 	bl	8018db4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2203      	movs	r2, #3
 800e8d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d102      	bne.n	800e8e6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f007 f983 	bl	8015bf6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	603b      	str	r3, [r7, #0]
 800e8f6:	687e      	ldr	r6, [r7, #4]
 800e8f8:	466d      	mov	r5, sp
 800e8fa:	f106 0410 	add.w	r4, r6, #16
 800e8fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e906:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e90a:	e885 0003 	stmia.w	r5, {r0, r1}
 800e90e:	1d33      	adds	r3, r6, #4
 800e910:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e912:	6838      	ldr	r0, [r7, #0]
 800e914:	f007 f896 	bl	8015a44 <USB_CoreInit>
 800e918:	4603      	mov	r3, r0
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d005      	beq.n	800e92a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2202      	movs	r2, #2
 800e922:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800e926:	2301      	movs	r3, #1
 800e928:	e0d7      	b.n	800eada <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	2100      	movs	r1, #0
 800e930:	4618      	mov	r0, r3
 800e932:	f007 f971 	bl	8015c18 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e936:	2300      	movs	r3, #0
 800e938:	73fb      	strb	r3, [r7, #15]
 800e93a:	e04a      	b.n	800e9d2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800e93c:	7bfa      	ldrb	r2, [r7, #15]
 800e93e:	6879      	ldr	r1, [r7, #4]
 800e940:	4613      	mov	r3, r2
 800e942:	00db      	lsls	r3, r3, #3
 800e944:	4413      	add	r3, r2
 800e946:	009b      	lsls	r3, r3, #2
 800e948:	440b      	add	r3, r1
 800e94a:	333d      	adds	r3, #61	; 0x3d
 800e94c:	2201      	movs	r2, #1
 800e94e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800e950:	7bfa      	ldrb	r2, [r7, #15]
 800e952:	6879      	ldr	r1, [r7, #4]
 800e954:	4613      	mov	r3, r2
 800e956:	00db      	lsls	r3, r3, #3
 800e958:	4413      	add	r3, r2
 800e95a:	009b      	lsls	r3, r3, #2
 800e95c:	440b      	add	r3, r1
 800e95e:	333c      	adds	r3, #60	; 0x3c
 800e960:	7bfa      	ldrb	r2, [r7, #15]
 800e962:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800e964:	7bfa      	ldrb	r2, [r7, #15]
 800e966:	7bfb      	ldrb	r3, [r7, #15]
 800e968:	b298      	uxth	r0, r3
 800e96a:	6879      	ldr	r1, [r7, #4]
 800e96c:	4613      	mov	r3, r2
 800e96e:	00db      	lsls	r3, r3, #3
 800e970:	4413      	add	r3, r2
 800e972:	009b      	lsls	r3, r3, #2
 800e974:	440b      	add	r3, r1
 800e976:	3344      	adds	r3, #68	; 0x44
 800e978:	4602      	mov	r2, r0
 800e97a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800e97c:	7bfa      	ldrb	r2, [r7, #15]
 800e97e:	6879      	ldr	r1, [r7, #4]
 800e980:	4613      	mov	r3, r2
 800e982:	00db      	lsls	r3, r3, #3
 800e984:	4413      	add	r3, r2
 800e986:	009b      	lsls	r3, r3, #2
 800e988:	440b      	add	r3, r1
 800e98a:	3340      	adds	r3, #64	; 0x40
 800e98c:	2200      	movs	r2, #0
 800e98e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800e990:	7bfa      	ldrb	r2, [r7, #15]
 800e992:	6879      	ldr	r1, [r7, #4]
 800e994:	4613      	mov	r3, r2
 800e996:	00db      	lsls	r3, r3, #3
 800e998:	4413      	add	r3, r2
 800e99a:	009b      	lsls	r3, r3, #2
 800e99c:	440b      	add	r3, r1
 800e99e:	3348      	adds	r3, #72	; 0x48
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800e9a4:	7bfa      	ldrb	r2, [r7, #15]
 800e9a6:	6879      	ldr	r1, [r7, #4]
 800e9a8:	4613      	mov	r3, r2
 800e9aa:	00db      	lsls	r3, r3, #3
 800e9ac:	4413      	add	r3, r2
 800e9ae:	009b      	lsls	r3, r3, #2
 800e9b0:	440b      	add	r3, r1
 800e9b2:	334c      	adds	r3, #76	; 0x4c
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800e9b8:	7bfa      	ldrb	r2, [r7, #15]
 800e9ba:	6879      	ldr	r1, [r7, #4]
 800e9bc:	4613      	mov	r3, r2
 800e9be:	00db      	lsls	r3, r3, #3
 800e9c0:	4413      	add	r3, r2
 800e9c2:	009b      	lsls	r3, r3, #2
 800e9c4:	440b      	add	r3, r1
 800e9c6:	3354      	adds	r3, #84	; 0x54
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e9cc:	7bfb      	ldrb	r3, [r7, #15]
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	73fb      	strb	r3, [r7, #15]
 800e9d2:	7bfa      	ldrb	r2, [r7, #15]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	685b      	ldr	r3, [r3, #4]
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d3af      	bcc.n	800e93c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e9dc:	2300      	movs	r3, #0
 800e9de:	73fb      	strb	r3, [r7, #15]
 800e9e0:	e044      	b.n	800ea6c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800e9e2:	7bfa      	ldrb	r2, [r7, #15]
 800e9e4:	6879      	ldr	r1, [r7, #4]
 800e9e6:	4613      	mov	r3, r2
 800e9e8:	00db      	lsls	r3, r3, #3
 800e9ea:	4413      	add	r3, r2
 800e9ec:	009b      	lsls	r3, r3, #2
 800e9ee:	440b      	add	r3, r1
 800e9f0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800e9f8:	7bfa      	ldrb	r2, [r7, #15]
 800e9fa:	6879      	ldr	r1, [r7, #4]
 800e9fc:	4613      	mov	r3, r2
 800e9fe:	00db      	lsls	r3, r3, #3
 800ea00:	4413      	add	r3, r2
 800ea02:	009b      	lsls	r3, r3, #2
 800ea04:	440b      	add	r3, r1
 800ea06:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800ea0a:	7bfa      	ldrb	r2, [r7, #15]
 800ea0c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ea0e:	7bfa      	ldrb	r2, [r7, #15]
 800ea10:	6879      	ldr	r1, [r7, #4]
 800ea12:	4613      	mov	r3, r2
 800ea14:	00db      	lsls	r3, r3, #3
 800ea16:	4413      	add	r3, r2
 800ea18:	009b      	lsls	r3, r3, #2
 800ea1a:	440b      	add	r3, r1
 800ea1c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ea20:	2200      	movs	r2, #0
 800ea22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ea24:	7bfa      	ldrb	r2, [r7, #15]
 800ea26:	6879      	ldr	r1, [r7, #4]
 800ea28:	4613      	mov	r3, r2
 800ea2a:	00db      	lsls	r3, r3, #3
 800ea2c:	4413      	add	r3, r2
 800ea2e:	009b      	lsls	r3, r3, #2
 800ea30:	440b      	add	r3, r1
 800ea32:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800ea36:	2200      	movs	r2, #0
 800ea38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ea3a:	7bfa      	ldrb	r2, [r7, #15]
 800ea3c:	6879      	ldr	r1, [r7, #4]
 800ea3e:	4613      	mov	r3, r2
 800ea40:	00db      	lsls	r3, r3, #3
 800ea42:	4413      	add	r3, r2
 800ea44:	009b      	lsls	r3, r3, #2
 800ea46:	440b      	add	r3, r1
 800ea48:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ea50:	7bfa      	ldrb	r2, [r7, #15]
 800ea52:	6879      	ldr	r1, [r7, #4]
 800ea54:	4613      	mov	r3, r2
 800ea56:	00db      	lsls	r3, r3, #3
 800ea58:	4413      	add	r3, r2
 800ea5a:	009b      	lsls	r3, r3, #2
 800ea5c:	440b      	add	r3, r1
 800ea5e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800ea62:	2200      	movs	r2, #0
 800ea64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ea66:	7bfb      	ldrb	r3, [r7, #15]
 800ea68:	3301      	adds	r3, #1
 800ea6a:	73fb      	strb	r3, [r7, #15]
 800ea6c:	7bfa      	ldrb	r2, [r7, #15]
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	685b      	ldr	r3, [r3, #4]
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d3b5      	bcc.n	800e9e2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	603b      	str	r3, [r7, #0]
 800ea7c:	687e      	ldr	r6, [r7, #4]
 800ea7e:	466d      	mov	r5, sp
 800ea80:	f106 0410 	add.w	r4, r6, #16
 800ea84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ea86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ea88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ea8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ea8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ea90:	e885 0003 	stmia.w	r5, {r0, r1}
 800ea94:	1d33      	adds	r3, r6, #4
 800ea96:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ea98:	6838      	ldr	r0, [r7, #0]
 800ea9a:	f007 f909 	bl	8015cb0 <USB_DevInit>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d005      	beq.n	800eab0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2202      	movs	r2, #2
 800eaa8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800eaac:	2301      	movs	r3, #1
 800eaae:	e014      	b.n	800eada <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2200      	movs	r2, #0
 800eab4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2201      	movs	r2, #1
 800eabc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eac4:	2b01      	cmp	r3, #1
 800eac6:	d102      	bne.n	800eace <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	f001 f881 	bl	800fbd0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	4618      	mov	r0, r3
 800ead4:	f008 f991 	bl	8016dfa <USB_DevDisconnect>

  return HAL_OK;
 800ead8:	2300      	movs	r3, #0
}
 800eada:	4618      	mov	r0, r3
 800eadc:	3714      	adds	r7, #20
 800eade:	46bd      	mov	sp, r7
 800eae0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eae2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800eae2:	b580      	push	{r7, lr}
 800eae4:	b084      	sub	sp, #16
 800eae6:	af00      	add	r7, sp, #0
 800eae8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800eaf6:	2b01      	cmp	r3, #1
 800eaf8:	d101      	bne.n	800eafe <HAL_PCD_Start+0x1c>
 800eafa:	2302      	movs	r3, #2
 800eafc:	e01c      	b.n	800eb38 <HAL_PCD_Start+0x56>
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2201      	movs	r2, #1
 800eb02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb0a:	2b01      	cmp	r3, #1
 800eb0c:	d105      	bne.n	800eb1a <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f007 f858 	bl	8015bd4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f008 f945 	bl	8016db8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2200      	movs	r2, #0
 800eb32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800eb36:	2300      	movs	r3, #0
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3710      	adds	r7, #16
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}

0800eb40 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800eb40:	b590      	push	{r4, r7, lr}
 800eb42:	b08d      	sub	sp, #52	; 0x34
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb4e:	6a3b      	ldr	r3, [r7, #32]
 800eb50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	4618      	mov	r0, r3
 800eb58:	f008 fa03 	bl	8016f62 <USB_GetMode>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	f040 847e 	bne.w	800f460 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f008 f967 	bl	8016e3c <USB_ReadInterrupts>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	f000 8474 	beq.w	800f45e <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800eb76:	69fb      	ldr	r3, [r7, #28]
 800eb78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb7c:	689b      	ldr	r3, [r3, #8]
 800eb7e:	0a1b      	lsrs	r3, r3, #8
 800eb80:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f008 f954 	bl	8016e3c <USB_ReadInterrupts>
 800eb94:	4603      	mov	r3, r0
 800eb96:	f003 0302 	and.w	r3, r3, #2
 800eb9a:	2b02      	cmp	r3, #2
 800eb9c:	d107      	bne.n	800ebae <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	695a      	ldr	r2, [r3, #20]
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	f002 0202 	and.w	r2, r2, #2
 800ebac:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f008 f942 	bl	8016e3c <USB_ReadInterrupts>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	f003 0310 	and.w	r3, r3, #16
 800ebbe:	2b10      	cmp	r3, #16
 800ebc0:	d161      	bne.n	800ec86 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	699a      	ldr	r2, [r3, #24]
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	f022 0210 	bic.w	r2, r2, #16
 800ebd0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800ebd2:	6a3b      	ldr	r3, [r7, #32]
 800ebd4:	6a1b      	ldr	r3, [r3, #32]
 800ebd6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800ebd8:	69bb      	ldr	r3, [r7, #24]
 800ebda:	f003 020f 	and.w	r2, r3, #15
 800ebde:	4613      	mov	r3, r2
 800ebe0:	00db      	lsls	r3, r3, #3
 800ebe2:	4413      	add	r3, r2
 800ebe4:	009b      	lsls	r3, r3, #2
 800ebe6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ebea:	687a      	ldr	r2, [r7, #4]
 800ebec:	4413      	add	r3, r2
 800ebee:	3304      	adds	r3, #4
 800ebf0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800ebf2:	69bb      	ldr	r3, [r7, #24]
 800ebf4:	0c5b      	lsrs	r3, r3, #17
 800ebf6:	f003 030f 	and.w	r3, r3, #15
 800ebfa:	2b02      	cmp	r3, #2
 800ebfc:	d124      	bne.n	800ec48 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800ebfe:	69ba      	ldr	r2, [r7, #24]
 800ec00:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800ec04:	4013      	ands	r3, r2
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d035      	beq.n	800ec76 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800ec0e:	69bb      	ldr	r3, [r7, #24]
 800ec10:	091b      	lsrs	r3, r3, #4
 800ec12:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800ec14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ec18:	b29b      	uxth	r3, r3
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	6a38      	ldr	r0, [r7, #32]
 800ec1e:	f007 ff79 	bl	8016b14 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	691a      	ldr	r2, [r3, #16]
 800ec26:	69bb      	ldr	r3, [r7, #24]
 800ec28:	091b      	lsrs	r3, r3, #4
 800ec2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ec2e:	441a      	add	r2, r3
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	6a1a      	ldr	r2, [r3, #32]
 800ec38:	69bb      	ldr	r3, [r7, #24]
 800ec3a:	091b      	lsrs	r3, r3, #4
 800ec3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ec40:	441a      	add	r2, r3
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	621a      	str	r2, [r3, #32]
 800ec46:	e016      	b.n	800ec76 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800ec48:	69bb      	ldr	r3, [r7, #24]
 800ec4a:	0c5b      	lsrs	r3, r3, #17
 800ec4c:	f003 030f 	and.w	r3, r3, #15
 800ec50:	2b06      	cmp	r3, #6
 800ec52:	d110      	bne.n	800ec76 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ec5a:	2208      	movs	r2, #8
 800ec5c:	4619      	mov	r1, r3
 800ec5e:	6a38      	ldr	r0, [r7, #32]
 800ec60:	f007 ff58 	bl	8016b14 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	6a1a      	ldr	r2, [r3, #32]
 800ec68:	69bb      	ldr	r3, [r7, #24]
 800ec6a:	091b      	lsrs	r3, r3, #4
 800ec6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ec70:	441a      	add	r2, r3
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	699a      	ldr	r2, [r3, #24]
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	f042 0210 	orr.w	r2, r2, #16
 800ec84:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f008 f8d6 	bl	8016e3c <USB_ReadInterrupts>
 800ec90:	4603      	mov	r3, r0
 800ec92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ec96:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ec9a:	f040 80a7 	bne.w	800edec <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	4618      	mov	r0, r3
 800eca8:	f008 f8db 	bl	8016e62 <USB_ReadDevAllOutEpInterrupt>
 800ecac:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800ecae:	e099      	b.n	800ede4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800ecb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecb2:	f003 0301 	and.w	r3, r3, #1
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	f000 808e 	beq.w	800edd8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecc2:	b2d2      	uxtb	r2, r2
 800ecc4:	4611      	mov	r1, r2
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f008 f8ff 	bl	8016eca <USB_ReadDevOutEPInterrupt>
 800eccc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	f003 0301 	and.w	r3, r3, #1
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d00c      	beq.n	800ecf2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800ecd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecda:	015a      	lsls	r2, r3, #5
 800ecdc:	69fb      	ldr	r3, [r7, #28]
 800ecde:	4413      	add	r3, r2
 800ece0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ece4:	461a      	mov	r2, r3
 800ece6:	2301      	movs	r3, #1
 800ece8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800ecea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f000 fe95 	bl	800fa1c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800ecf2:	693b      	ldr	r3, [r7, #16]
 800ecf4:	f003 0308 	and.w	r3, r3, #8
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d00c      	beq.n	800ed16 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800ecfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecfe:	015a      	lsls	r2, r3, #5
 800ed00:	69fb      	ldr	r3, [r7, #28]
 800ed02:	4413      	add	r3, r2
 800ed04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed08:	461a      	mov	r2, r3
 800ed0a:	2308      	movs	r3, #8
 800ed0c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800ed0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f000 fed1 	bl	800fab8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	f003 0310 	and.w	r3, r3, #16
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d008      	beq.n	800ed32 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800ed20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed22:	015a      	lsls	r2, r3, #5
 800ed24:	69fb      	ldr	r3, [r7, #28]
 800ed26:	4413      	add	r3, r2
 800ed28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed2c:	461a      	mov	r2, r3
 800ed2e:	2310      	movs	r3, #16
 800ed30:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	f003 0302 	and.w	r3, r3, #2
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d030      	beq.n	800ed9e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800ed3c:	6a3b      	ldr	r3, [r7, #32]
 800ed3e:	695b      	ldr	r3, [r3, #20]
 800ed40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed44:	2b80      	cmp	r3, #128	; 0x80
 800ed46:	d109      	bne.n	800ed5c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800ed48:	69fb      	ldr	r3, [r7, #28]
 800ed4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	69fa      	ldr	r2, [r7, #28]
 800ed52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ed56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ed5a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800ed5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed5e:	4613      	mov	r3, r2
 800ed60:	00db      	lsls	r3, r3, #3
 800ed62:	4413      	add	r3, r2
 800ed64:	009b      	lsls	r3, r3, #2
 800ed66:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ed6a:	687a      	ldr	r2, [r7, #4]
 800ed6c:	4413      	add	r3, r2
 800ed6e:	3304      	adds	r3, #4
 800ed70:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	78db      	ldrb	r3, [r3, #3]
 800ed76:	2b01      	cmp	r3, #1
 800ed78:	d108      	bne.n	800ed8c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800ed80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed82:	b2db      	uxtb	r3, r3
 800ed84:	4619      	mov	r1, r3
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f00a f93c 	bl	8019004 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800ed8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed8e:	015a      	lsls	r2, r3, #5
 800ed90:	69fb      	ldr	r3, [r7, #28]
 800ed92:	4413      	add	r3, r2
 800ed94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed98:	461a      	mov	r2, r3
 800ed9a:	2302      	movs	r3, #2
 800ed9c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	f003 0320 	and.w	r3, r3, #32
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d008      	beq.n	800edba <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800eda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edaa:	015a      	lsls	r2, r3, #5
 800edac:	69fb      	ldr	r3, [r7, #28]
 800edae:	4413      	add	r3, r2
 800edb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edb4:	461a      	mov	r2, r3
 800edb6:	2320      	movs	r3, #32
 800edb8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d009      	beq.n	800edd8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800edc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc6:	015a      	lsls	r2, r3, #5
 800edc8:	69fb      	ldr	r3, [r7, #28]
 800edca:	4413      	add	r3, r2
 800edcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edd0:	461a      	mov	r2, r3
 800edd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800edd6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800edd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edda:	3301      	adds	r3, #1
 800eddc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800edde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede0:	085b      	lsrs	r3, r3, #1
 800ede2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800ede4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	f47f af62 	bne.w	800ecb0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	4618      	mov	r0, r3
 800edf2:	f008 f823 	bl	8016e3c <USB_ReadInterrupts>
 800edf6:	4603      	mov	r3, r0
 800edf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800edfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ee00:	f040 80a4 	bne.w	800ef4c <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f008 f844 	bl	8016e96 <USB_ReadDevAllInEpInterrupt>
 800ee0e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800ee10:	2300      	movs	r3, #0
 800ee12:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800ee14:	e096      	b.n	800ef44 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800ee16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee18:	f003 0301 	and.w	r3, r3, #1
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	f000 808b 	beq.w	800ef38 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee28:	b2d2      	uxtb	r2, r2
 800ee2a:	4611      	mov	r1, r2
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f008 f86a 	bl	8016f06 <USB_ReadDevInEPInterrupt>
 800ee32:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800ee34:	693b      	ldr	r3, [r7, #16]
 800ee36:	f003 0301 	and.w	r3, r3, #1
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d020      	beq.n	800ee80 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ee3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee40:	f003 030f 	and.w	r3, r3, #15
 800ee44:	2201      	movs	r2, #1
 800ee46:	fa02 f303 	lsl.w	r3, r2, r3
 800ee4a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ee4c:	69fb      	ldr	r3, [r7, #28]
 800ee4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	43db      	mvns	r3, r3
 800ee58:	69f9      	ldr	r1, [r7, #28]
 800ee5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee5e:	4013      	ands	r3, r2
 800ee60:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800ee62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee64:	015a      	lsls	r2, r3, #5
 800ee66:	69fb      	ldr	r3, [r7, #28]
 800ee68:	4413      	add	r3, r2
 800ee6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee6e:	461a      	mov	r2, r3
 800ee70:	2301      	movs	r3, #1
 800ee72:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800ee74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee76:	b2db      	uxtb	r3, r3
 800ee78:	4619      	mov	r1, r3
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	f00a f82d 	bl	8018eda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	f003 0308 	and.w	r3, r3, #8
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d008      	beq.n	800ee9c <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800ee8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee8c:	015a      	lsls	r2, r3, #5
 800ee8e:	69fb      	ldr	r3, [r7, #28]
 800ee90:	4413      	add	r3, r2
 800ee92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee96:	461a      	mov	r2, r3
 800ee98:	2308      	movs	r3, #8
 800ee9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800ee9c:	693b      	ldr	r3, [r7, #16]
 800ee9e:	f003 0310 	and.w	r3, r3, #16
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d008      	beq.n	800eeb8 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800eea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea8:	015a      	lsls	r2, r3, #5
 800eeaa:	69fb      	ldr	r3, [r7, #28]
 800eeac:	4413      	add	r3, r2
 800eeae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	2310      	movs	r3, #16
 800eeb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800eeb8:	693b      	ldr	r3, [r7, #16]
 800eeba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d008      	beq.n	800eed4 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800eec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec4:	015a      	lsls	r2, r3, #5
 800eec6:	69fb      	ldr	r3, [r7, #28]
 800eec8:	4413      	add	r3, r2
 800eeca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eece:	461a      	mov	r2, r3
 800eed0:	2340      	movs	r3, #64	; 0x40
 800eed2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800eed4:	693b      	ldr	r3, [r7, #16]
 800eed6:	f003 0302 	and.w	r3, r3, #2
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d023      	beq.n	800ef26 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800eede:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eee0:	6a38      	ldr	r0, [r7, #32]
 800eee2:	f007 f831 	bl	8015f48 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800eee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eee8:	4613      	mov	r3, r2
 800eeea:	00db      	lsls	r3, r3, #3
 800eeec:	4413      	add	r3, r2
 800eeee:	009b      	lsls	r3, r3, #2
 800eef0:	3338      	adds	r3, #56	; 0x38
 800eef2:	687a      	ldr	r2, [r7, #4]
 800eef4:	4413      	add	r3, r2
 800eef6:	3304      	adds	r3, #4
 800eef8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800eefa:	697b      	ldr	r3, [r7, #20]
 800eefc:	78db      	ldrb	r3, [r3, #3]
 800eefe:	2b01      	cmp	r3, #1
 800ef00:	d108      	bne.n	800ef14 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	2200      	movs	r2, #0
 800ef06:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800ef08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef0a:	b2db      	uxtb	r3, r3
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f00a f88a 	bl	8019028 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800ef14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef16:	015a      	lsls	r2, r3, #5
 800ef18:	69fb      	ldr	r3, [r7, #28]
 800ef1a:	4413      	add	r3, r2
 800ef1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef20:	461a      	mov	r2, r3
 800ef22:	2302      	movs	r3, #2
 800ef24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800ef26:	693b      	ldr	r3, [r7, #16]
 800ef28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d003      	beq.n	800ef38 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800ef30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef32:	6878      	ldr	r0, [r7, #4]
 800ef34:	f000 fcea 	bl	800f90c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800ef38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef3a:	3301      	adds	r3, #1
 800ef3c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800ef3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef40:	085b      	lsrs	r3, r3, #1
 800ef42:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800ef44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	f47f af65 	bne.w	800ee16 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	4618      	mov	r0, r3
 800ef52:	f007 ff73 	bl	8016e3c <USB_ReadInterrupts>
 800ef56:	4603      	mov	r3, r0
 800ef58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ef5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ef60:	d122      	bne.n	800efa8 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ef62:	69fb      	ldr	r3, [r7, #28]
 800ef64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	69fa      	ldr	r2, [r7, #28]
 800ef6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ef70:	f023 0301 	bic.w	r3, r3, #1
 800ef74:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800ef7c:	2b01      	cmp	r3, #1
 800ef7e:	d108      	bne.n	800ef92 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2200      	movs	r2, #0
 800ef84:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800ef88:	2100      	movs	r1, #0
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	f00a fabe 	bl	801950c <HAL_PCDEx_LPM_Callback>
 800ef90:	e002      	b.n	800ef98 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f00a f80e 	bl	8018fb4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	695a      	ldr	r2, [r3, #20]
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800efa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	4618      	mov	r0, r3
 800efae:	f007 ff45 	bl	8016e3c <USB_ReadInterrupts>
 800efb2:	4603      	mov	r3, r0
 800efb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800efb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800efbc:	d112      	bne.n	800efe4 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800efbe:	69fb      	ldr	r3, [r7, #28]
 800efc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efc4:	689b      	ldr	r3, [r3, #8]
 800efc6:	f003 0301 	and.w	r3, r3, #1
 800efca:	2b01      	cmp	r3, #1
 800efcc:	d102      	bne.n	800efd4 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f009 ffca 	bl	8018f68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	695a      	ldr	r2, [r3, #20]
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800efe2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	4618      	mov	r0, r3
 800efea:	f007 ff27 	bl	8016e3c <USB_ReadInterrupts>
 800efee:	4603      	mov	r3, r0
 800eff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800eff4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eff8:	d121      	bne.n	800f03e <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	695a      	ldr	r2, [r3, #20]
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800f008:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800f010:	2b00      	cmp	r3, #0
 800f012:	d111      	bne.n	800f038 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2201      	movs	r2, #1
 800f018:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f022:	089b      	lsrs	r3, r3, #2
 800f024:	f003 020f 	and.w	r2, r3, #15
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800f02e:	2101      	movs	r1, #1
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f00a fa6b 	bl	801950c <HAL_PCDEx_LPM_Callback>
 800f036:	e002      	b.n	800f03e <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f009 ff95 	bl	8018f68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	4618      	mov	r0, r3
 800f044:	f007 fefa 	bl	8016e3c <USB_ReadInterrupts>
 800f048:	4603      	mov	r3, r0
 800f04a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f04e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f052:	f040 80b5 	bne.w	800f1c0 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800f056:	69fb      	ldr	r3, [r7, #28]
 800f058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f05c:	685b      	ldr	r3, [r3, #4]
 800f05e:	69fa      	ldr	r2, [r7, #28]
 800f060:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f064:	f023 0301 	bic.w	r3, r3, #1
 800f068:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	2110      	movs	r1, #16
 800f070:	4618      	mov	r0, r3
 800f072:	f006 ff69 	bl	8015f48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f076:	2300      	movs	r3, #0
 800f078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f07a:	e046      	b.n	800f10a <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800f07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f07e:	015a      	lsls	r2, r3, #5
 800f080:	69fb      	ldr	r3, [r7, #28]
 800f082:	4413      	add	r3, r2
 800f084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f088:	461a      	mov	r2, r3
 800f08a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f08e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f092:	015a      	lsls	r2, r3, #5
 800f094:	69fb      	ldr	r3, [r7, #28]
 800f096:	4413      	add	r3, r2
 800f098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0a0:	0151      	lsls	r1, r2, #5
 800f0a2:	69fa      	ldr	r2, [r7, #28]
 800f0a4:	440a      	add	r2, r1
 800f0a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f0ae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800f0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b2:	015a      	lsls	r2, r3, #5
 800f0b4:	69fb      	ldr	r3, [r7, #28]
 800f0b6:	4413      	add	r3, r2
 800f0b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0bc:	461a      	mov	r2, r3
 800f0be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f0c2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c6:	015a      	lsls	r2, r3, #5
 800f0c8:	69fb      	ldr	r3, [r7, #28]
 800f0ca:	4413      	add	r3, r2
 800f0cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0d4:	0151      	lsls	r1, r2, #5
 800f0d6:	69fa      	ldr	r2, [r7, #28]
 800f0d8:	440a      	add	r2, r1
 800f0da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f0e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e6:	015a      	lsls	r2, r3, #5
 800f0e8:	69fb      	ldr	r3, [r7, #28]
 800f0ea:	4413      	add	r3, r2
 800f0ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0f4:	0151      	lsls	r1, r2, #5
 800f0f6:	69fa      	ldr	r2, [r7, #28]
 800f0f8:	440a      	add	r2, r1
 800f0fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f102:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f106:	3301      	adds	r3, #1
 800f108:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f110:	429a      	cmp	r2, r3
 800f112:	d3b3      	bcc.n	800f07c <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800f114:	69fb      	ldr	r3, [r7, #28]
 800f116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f11a:	69db      	ldr	r3, [r3, #28]
 800f11c:	69fa      	ldr	r2, [r7, #28]
 800f11e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f122:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800f126:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d016      	beq.n	800f15e <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800f130:	69fb      	ldr	r3, [r7, #28]
 800f132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f136:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f13a:	69fa      	ldr	r2, [r7, #28]
 800f13c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f140:	f043 030b 	orr.w	r3, r3, #11
 800f144:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800f148:	69fb      	ldr	r3, [r7, #28]
 800f14a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f14e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f150:	69fa      	ldr	r2, [r7, #28]
 800f152:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f156:	f043 030b 	orr.w	r3, r3, #11
 800f15a:	6453      	str	r3, [r2, #68]	; 0x44
 800f15c:	e015      	b.n	800f18a <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800f15e:	69fb      	ldr	r3, [r7, #28]
 800f160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f164:	695b      	ldr	r3, [r3, #20]
 800f166:	69fa      	ldr	r2, [r7, #28]
 800f168:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f16c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f170:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800f174:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800f176:	69fb      	ldr	r3, [r7, #28]
 800f178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f17c:	691b      	ldr	r3, [r3, #16]
 800f17e:	69fa      	ldr	r2, [r7, #28]
 800f180:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f184:	f043 030b 	orr.w	r3, r3, #11
 800f188:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800f18a:	69fb      	ldr	r3, [r7, #28]
 800f18c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	69fa      	ldr	r2, [r7, #28]
 800f194:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f198:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f19c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681a      	ldr	r2, [r3, #0]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f1a8:	4619      	mov	r1, r3
 800f1aa:	4610      	mov	r0, r2
 800f1ac:	f007 ff0a 	bl	8016fc4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	695a      	ldr	r2, [r3, #20]
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800f1be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f007 fe39 	bl	8016e3c <USB_ReadInterrupts>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f1d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f1d4:	d124      	bne.n	800f220 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f007 fecf 	bl	8016f7e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f006 ff2c 	bl	8016042 <USB_GetDevSpeed>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	461a      	mov	r2, r3
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681c      	ldr	r4, [r3, #0]
 800f1f6:	f001 fc87 	bl	8010b08 <HAL_RCC_GetHCLKFreq>
 800f1fa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800f200:	b2db      	uxtb	r3, r3
 800f202:	461a      	mov	r2, r3
 800f204:	4620      	mov	r0, r4
 800f206:	f006 fc49 	bl	8015a9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f009 fe8d 	bl	8018f2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	695a      	ldr	r2, [r3, #20]
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800f21e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	4618      	mov	r0, r3
 800f226:	f007 fe09 	bl	8016e3c <USB_ReadInterrupts>
 800f22a:	4603      	mov	r3, r0
 800f22c:	f003 0308 	and.w	r3, r3, #8
 800f230:	2b08      	cmp	r3, #8
 800f232:	d10a      	bne.n	800f24a <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f009 fe6a 	bl	8018f0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	695a      	ldr	r2, [r3, #20]
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	f002 0208 	and.w	r2, r2, #8
 800f248:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	4618      	mov	r0, r3
 800f250:	f007 fdf4 	bl	8016e3c <USB_ReadInterrupts>
 800f254:	4603      	mov	r3, r0
 800f256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f25a:	2b80      	cmp	r3, #128	; 0x80
 800f25c:	d122      	bne.n	800f2a4 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800f25e:	6a3b      	ldr	r3, [r7, #32]
 800f260:	699b      	ldr	r3, [r3, #24]
 800f262:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f266:	6a3b      	ldr	r3, [r7, #32]
 800f268:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800f26a:	2301      	movs	r3, #1
 800f26c:	627b      	str	r3, [r7, #36]	; 0x24
 800f26e:	e014      	b.n	800f29a <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800f270:	6879      	ldr	r1, [r7, #4]
 800f272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f274:	4613      	mov	r3, r2
 800f276:	00db      	lsls	r3, r3, #3
 800f278:	4413      	add	r3, r2
 800f27a:	009b      	lsls	r3, r3, #2
 800f27c:	440b      	add	r3, r1
 800f27e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	2b01      	cmp	r3, #1
 800f286:	d105      	bne.n	800f294 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800f288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f28a:	b2db      	uxtb	r3, r3
 800f28c:	4619      	mov	r1, r3
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f000 fb0b 	bl	800f8aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800f294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f296:	3301      	adds	r3, #1
 800f298:	627b      	str	r3, [r7, #36]	; 0x24
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	685b      	ldr	r3, [r3, #4]
 800f29e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	d3e5      	bcc.n	800f270 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f007 fdc7 	bl	8016e3c <USB_ReadInterrupts>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f2b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2b8:	d13b      	bne.n	800f332 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	627b      	str	r3, [r7, #36]	; 0x24
 800f2be:	e02b      	b.n	800f318 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800f2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c2:	015a      	lsls	r2, r3, #5
 800f2c4:	69fb      	ldr	r3, [r7, #28]
 800f2c6:	4413      	add	r3, r2
 800f2c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800f2d0:	6879      	ldr	r1, [r7, #4]
 800f2d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2d4:	4613      	mov	r3, r2
 800f2d6:	00db      	lsls	r3, r3, #3
 800f2d8:	4413      	add	r3, r2
 800f2da:	009b      	lsls	r3, r3, #2
 800f2dc:	440b      	add	r3, r1
 800f2de:	3340      	adds	r3, #64	; 0x40
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	2b01      	cmp	r3, #1
 800f2e4:	d115      	bne.n	800f312 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800f2e6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	da12      	bge.n	800f312 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800f2ec:	6879      	ldr	r1, [r7, #4]
 800f2ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2f0:	4613      	mov	r3, r2
 800f2f2:	00db      	lsls	r3, r3, #3
 800f2f4:	4413      	add	r3, r2
 800f2f6:	009b      	lsls	r3, r3, #2
 800f2f8:	440b      	add	r3, r1
 800f2fa:	333f      	adds	r3, #63	; 0x3f
 800f2fc:	2201      	movs	r2, #1
 800f2fe:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800f300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f302:	b2db      	uxtb	r3, r3
 800f304:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f308:	b2db      	uxtb	r3, r3
 800f30a:	4619      	mov	r1, r3
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f000 facc 	bl	800f8aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800f312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f314:	3301      	adds	r3, #1
 800f316:	627b      	str	r3, [r7, #36]	; 0x24
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	685b      	ldr	r3, [r3, #4]
 800f31c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f31e:	429a      	cmp	r2, r3
 800f320:	d3ce      	bcc.n	800f2c0 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	695a      	ldr	r2, [r3, #20]
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800f330:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	4618      	mov	r0, r3
 800f338:	f007 fd80 	bl	8016e3c <USB_ReadInterrupts>
 800f33c:	4603      	mov	r3, r0
 800f33e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f342:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f346:	d155      	bne.n	800f3f4 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800f348:	2301      	movs	r3, #1
 800f34a:	627b      	str	r3, [r7, #36]	; 0x24
 800f34c:	e045      	b.n	800f3da <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800f34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f350:	015a      	lsls	r2, r3, #5
 800f352:	69fb      	ldr	r3, [r7, #28]
 800f354:	4413      	add	r3, r2
 800f356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800f35e:	6879      	ldr	r1, [r7, #4]
 800f360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f362:	4613      	mov	r3, r2
 800f364:	00db      	lsls	r3, r3, #3
 800f366:	4413      	add	r3, r2
 800f368:	009b      	lsls	r3, r3, #2
 800f36a:	440b      	add	r3, r1
 800f36c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	2b01      	cmp	r3, #1
 800f374:	d12e      	bne.n	800f3d4 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800f376:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800f378:	2b00      	cmp	r3, #0
 800f37a:	da2b      	bge.n	800f3d4 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800f37c:	69bb      	ldr	r3, [r7, #24]
 800f37e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800f388:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d121      	bne.n	800f3d4 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800f390:	6879      	ldr	r1, [r7, #4]
 800f392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f394:	4613      	mov	r3, r2
 800f396:	00db      	lsls	r3, r3, #3
 800f398:	4413      	add	r3, r2
 800f39a:	009b      	lsls	r3, r3, #2
 800f39c:	440b      	add	r3, r1
 800f39e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800f3a2:	2201      	movs	r2, #1
 800f3a4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800f3a6:	6a3b      	ldr	r3, [r7, #32]
 800f3a8:	699b      	ldr	r3, [r3, #24]
 800f3aa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f3ae:	6a3b      	ldr	r3, [r7, #32]
 800f3b0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800f3b2:	6a3b      	ldr	r3, [r7, #32]
 800f3b4:	695b      	ldr	r3, [r3, #20]
 800f3b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d10a      	bne.n	800f3d4 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800f3be:	69fb      	ldr	r3, [r7, #28]
 800f3c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3c4:	685b      	ldr	r3, [r3, #4]
 800f3c6:	69fa      	ldr	r2, [r7, #28]
 800f3c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f3cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f3d0:	6053      	str	r3, [r2, #4]
            break;
 800f3d2:	e007      	b.n	800f3e4 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800f3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3d6:	3301      	adds	r3, #1
 800f3d8:	627b      	str	r3, [r7, #36]	; 0x24
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	685b      	ldr	r3, [r3, #4]
 800f3de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	d3b4      	bcc.n	800f34e <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	695a      	ldr	r2, [r3, #20]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800f3f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f007 fd1f 	bl	8016e3c <USB_ReadInterrupts>
 800f3fe:	4603      	mov	r3, r0
 800f400:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f408:	d10a      	bne.n	800f420 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f009 fe1e 	bl	801904c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	695a      	ldr	r2, [r3, #20]
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800f41e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	4618      	mov	r0, r3
 800f426:	f007 fd09 	bl	8016e3c <USB_ReadInterrupts>
 800f42a:	4603      	mov	r3, r0
 800f42c:	f003 0304 	and.w	r3, r3, #4
 800f430:	2b04      	cmp	r3, #4
 800f432:	d115      	bne.n	800f460 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800f43c:	69bb      	ldr	r3, [r7, #24]
 800f43e:	f003 0304 	and.w	r3, r3, #4
 800f442:	2b00      	cmp	r3, #0
 800f444:	d002      	beq.n	800f44c <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800f446:	6878      	ldr	r0, [r7, #4]
 800f448:	f009 fe0e 	bl	8019068 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	6859      	ldr	r1, [r3, #4]
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	69ba      	ldr	r2, [r7, #24]
 800f458:	430a      	orrs	r2, r1
 800f45a:	605a      	str	r2, [r3, #4]
 800f45c:	e000      	b.n	800f460 <HAL_PCD_IRQHandler+0x920>
      return;
 800f45e:	bf00      	nop
    }
  }
}
 800f460:	3734      	adds	r7, #52	; 0x34
 800f462:	46bd      	mov	sp, r7
 800f464:	bd90      	pop	{r4, r7, pc}

0800f466 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800f466:	b580      	push	{r7, lr}
 800f468:	b082      	sub	sp, #8
 800f46a:	af00      	add	r7, sp, #0
 800f46c:	6078      	str	r0, [r7, #4]
 800f46e:	460b      	mov	r3, r1
 800f470:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800f478:	2b01      	cmp	r3, #1
 800f47a:	d101      	bne.n	800f480 <HAL_PCD_SetAddress+0x1a>
 800f47c:	2302      	movs	r3, #2
 800f47e:	e013      	b.n	800f4a8 <HAL_PCD_SetAddress+0x42>
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2201      	movs	r2, #1
 800f484:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	78fa      	ldrb	r2, [r7, #3]
 800f48c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	78fa      	ldrb	r2, [r7, #3]
 800f496:	4611      	mov	r1, r2
 800f498:	4618      	mov	r0, r3
 800f49a:	f007 fc67 	bl	8016d6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800f4a6:	2300      	movs	r3, #0
}
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	3708      	adds	r7, #8
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}

0800f4b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b084      	sub	sp, #16
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	4608      	mov	r0, r1
 800f4ba:	4611      	mov	r1, r2
 800f4bc:	461a      	mov	r2, r3
 800f4be:	4603      	mov	r3, r0
 800f4c0:	70fb      	strb	r3, [r7, #3]
 800f4c2:	460b      	mov	r3, r1
 800f4c4:	803b      	strh	r3, [r7, #0]
 800f4c6:	4613      	mov	r3, r2
 800f4c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800f4ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	da0f      	bge.n	800f4f6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f4d6:	78fb      	ldrb	r3, [r7, #3]
 800f4d8:	f003 020f 	and.w	r2, r3, #15
 800f4dc:	4613      	mov	r3, r2
 800f4de:	00db      	lsls	r3, r3, #3
 800f4e0:	4413      	add	r3, r2
 800f4e2:	009b      	lsls	r3, r3, #2
 800f4e4:	3338      	adds	r3, #56	; 0x38
 800f4e6:	687a      	ldr	r2, [r7, #4]
 800f4e8:	4413      	add	r3, r2
 800f4ea:	3304      	adds	r3, #4
 800f4ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	2201      	movs	r2, #1
 800f4f2:	705a      	strb	r2, [r3, #1]
 800f4f4:	e00f      	b.n	800f516 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f4f6:	78fb      	ldrb	r3, [r7, #3]
 800f4f8:	f003 020f 	and.w	r2, r3, #15
 800f4fc:	4613      	mov	r3, r2
 800f4fe:	00db      	lsls	r3, r3, #3
 800f500:	4413      	add	r3, r2
 800f502:	009b      	lsls	r3, r3, #2
 800f504:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f508:	687a      	ldr	r2, [r7, #4]
 800f50a:	4413      	add	r3, r2
 800f50c:	3304      	adds	r3, #4
 800f50e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	2200      	movs	r2, #0
 800f514:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800f516:	78fb      	ldrb	r3, [r7, #3]
 800f518:	f003 030f 	and.w	r3, r3, #15
 800f51c:	b2da      	uxtb	r2, r3
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800f522:	883a      	ldrh	r2, [r7, #0]
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	78ba      	ldrb	r2, [r7, #2]
 800f52c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	785b      	ldrb	r3, [r3, #1]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d004      	beq.n	800f540 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	781b      	ldrb	r3, [r3, #0]
 800f53a:	b29a      	uxth	r2, r3
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800f540:	78bb      	ldrb	r3, [r7, #2]
 800f542:	2b02      	cmp	r3, #2
 800f544:	d102      	bne.n	800f54c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	2200      	movs	r2, #0
 800f54a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800f552:	2b01      	cmp	r3, #1
 800f554:	d101      	bne.n	800f55a <HAL_PCD_EP_Open+0xaa>
 800f556:	2302      	movs	r3, #2
 800f558:	e00e      	b.n	800f578 <HAL_PCD_EP_Open+0xc8>
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	2201      	movs	r2, #1
 800f55e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	68f9      	ldr	r1, [r7, #12]
 800f568:	4618      	mov	r0, r3
 800f56a:	f006 fd89 	bl	8016080 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2200      	movs	r2, #0
 800f572:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800f576:	7afb      	ldrb	r3, [r7, #11]
}
 800f578:	4618      	mov	r0, r3
 800f57a:	3710      	adds	r7, #16
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd80      	pop	{r7, pc}

0800f580 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b084      	sub	sp, #16
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
 800f588:	460b      	mov	r3, r1
 800f58a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800f58c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f590:	2b00      	cmp	r3, #0
 800f592:	da0f      	bge.n	800f5b4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f594:	78fb      	ldrb	r3, [r7, #3]
 800f596:	f003 020f 	and.w	r2, r3, #15
 800f59a:	4613      	mov	r3, r2
 800f59c:	00db      	lsls	r3, r3, #3
 800f59e:	4413      	add	r3, r2
 800f5a0:	009b      	lsls	r3, r3, #2
 800f5a2:	3338      	adds	r3, #56	; 0x38
 800f5a4:	687a      	ldr	r2, [r7, #4]
 800f5a6:	4413      	add	r3, r2
 800f5a8:	3304      	adds	r3, #4
 800f5aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	2201      	movs	r2, #1
 800f5b0:	705a      	strb	r2, [r3, #1]
 800f5b2:	e00f      	b.n	800f5d4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f5b4:	78fb      	ldrb	r3, [r7, #3]
 800f5b6:	f003 020f 	and.w	r2, r3, #15
 800f5ba:	4613      	mov	r3, r2
 800f5bc:	00db      	lsls	r3, r3, #3
 800f5be:	4413      	add	r3, r2
 800f5c0:	009b      	lsls	r3, r3, #2
 800f5c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f5c6:	687a      	ldr	r2, [r7, #4]
 800f5c8:	4413      	add	r3, r2
 800f5ca:	3304      	adds	r3, #4
 800f5cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800f5d4:	78fb      	ldrb	r3, [r7, #3]
 800f5d6:	f003 030f 	and.w	r3, r3, #15
 800f5da:	b2da      	uxtb	r2, r3
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800f5e6:	2b01      	cmp	r3, #1
 800f5e8:	d101      	bne.n	800f5ee <HAL_PCD_EP_Close+0x6e>
 800f5ea:	2302      	movs	r3, #2
 800f5ec:	e00e      	b.n	800f60c <HAL_PCD_EP_Close+0x8c>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2201      	movs	r2, #1
 800f5f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	68f9      	ldr	r1, [r7, #12]
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f006 fdc7 	bl	8016190 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	2200      	movs	r2, #0
 800f606:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800f60a:	2300      	movs	r3, #0
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	3710      	adds	r7, #16
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}

0800f614 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b086      	sub	sp, #24
 800f618:	af00      	add	r7, sp, #0
 800f61a:	60f8      	str	r0, [r7, #12]
 800f61c:	607a      	str	r2, [r7, #4]
 800f61e:	603b      	str	r3, [r7, #0]
 800f620:	460b      	mov	r3, r1
 800f622:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f624:	7afb      	ldrb	r3, [r7, #11]
 800f626:	f003 020f 	and.w	r2, r3, #15
 800f62a:	4613      	mov	r3, r2
 800f62c:	00db      	lsls	r3, r3, #3
 800f62e:	4413      	add	r3, r2
 800f630:	009b      	lsls	r3, r3, #2
 800f632:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f636:	68fa      	ldr	r2, [r7, #12]
 800f638:	4413      	add	r3, r2
 800f63a:	3304      	adds	r3, #4
 800f63c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	687a      	ldr	r2, [r7, #4]
 800f642:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800f644:	697b      	ldr	r3, [r7, #20]
 800f646:	683a      	ldr	r2, [r7, #0]
 800f648:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	2200      	movs	r2, #0
 800f64e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	2200      	movs	r2, #0
 800f654:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f656:	7afb      	ldrb	r3, [r7, #11]
 800f658:	f003 030f 	and.w	r3, r3, #15
 800f65c:	b2da      	uxtb	r2, r3
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800f662:	7afb      	ldrb	r3, [r7, #11]
 800f664:	f003 030f 	and.w	r3, r3, #15
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d106      	bne.n	800f67a <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	6979      	ldr	r1, [r7, #20]
 800f672:	4618      	mov	r0, r3
 800f674:	f007 f848 	bl	8016708 <USB_EP0StartXfer>
 800f678:	e005      	b.n	800f686 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	6979      	ldr	r1, [r7, #20]
 800f680:	4618      	mov	r0, r3
 800f682:	f006 fe61 	bl	8016348 <USB_EPStartXfer>
  }

  return HAL_OK;
 800f686:	2300      	movs	r3, #0
}
 800f688:	4618      	mov	r0, r3
 800f68a:	3718      	adds	r7, #24
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}

0800f690 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f690:	b480      	push	{r7}
 800f692:	b083      	sub	sp, #12
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
 800f698:	460b      	mov	r3, r1
 800f69a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800f69c:	78fb      	ldrb	r3, [r7, #3]
 800f69e:	f003 020f 	and.w	r2, r3, #15
 800f6a2:	6879      	ldr	r1, [r7, #4]
 800f6a4:	4613      	mov	r3, r2
 800f6a6:	00db      	lsls	r3, r3, #3
 800f6a8:	4413      	add	r3, r2
 800f6aa:	009b      	lsls	r3, r3, #2
 800f6ac:	440b      	add	r3, r1
 800f6ae:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800f6b2:	681b      	ldr	r3, [r3, #0]
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	370c      	adds	r7, #12
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6be:	4770      	bx	lr

0800f6c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b086      	sub	sp, #24
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	60f8      	str	r0, [r7, #12]
 800f6c8:	607a      	str	r2, [r7, #4]
 800f6ca:	603b      	str	r3, [r7, #0]
 800f6cc:	460b      	mov	r3, r1
 800f6ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f6d0:	7afb      	ldrb	r3, [r7, #11]
 800f6d2:	f003 020f 	and.w	r2, r3, #15
 800f6d6:	4613      	mov	r3, r2
 800f6d8:	00db      	lsls	r3, r3, #3
 800f6da:	4413      	add	r3, r2
 800f6dc:	009b      	lsls	r3, r3, #2
 800f6de:	3338      	adds	r3, #56	; 0x38
 800f6e0:	68fa      	ldr	r2, [r7, #12]
 800f6e2:	4413      	add	r3, r2
 800f6e4:	3304      	adds	r3, #4
 800f6e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	687a      	ldr	r2, [r7, #4]
 800f6ec:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	683a      	ldr	r2, [r7, #0]
 800f6f2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	2201      	movs	r2, #1
 800f6fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f700:	7afb      	ldrb	r3, [r7, #11]
 800f702:	f003 030f 	and.w	r3, r3, #15
 800f706:	b2da      	uxtb	r2, r3
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800f70c:	7afb      	ldrb	r3, [r7, #11]
 800f70e:	f003 030f 	and.w	r3, r3, #15
 800f712:	2b00      	cmp	r3, #0
 800f714:	d106      	bne.n	800f724 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	6979      	ldr	r1, [r7, #20]
 800f71c:	4618      	mov	r0, r3
 800f71e:	f006 fff3 	bl	8016708 <USB_EP0StartXfer>
 800f722:	e005      	b.n	800f730 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	6979      	ldr	r1, [r7, #20]
 800f72a:	4618      	mov	r0, r3
 800f72c:	f006 fe0c 	bl	8016348 <USB_EPStartXfer>
  }

  return HAL_OK;
 800f730:	2300      	movs	r3, #0
}
 800f732:	4618      	mov	r0, r3
 800f734:	3718      	adds	r7, #24
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}

0800f73a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f73a:	b580      	push	{r7, lr}
 800f73c:	b084      	sub	sp, #16
 800f73e:	af00      	add	r7, sp, #0
 800f740:	6078      	str	r0, [r7, #4]
 800f742:	460b      	mov	r3, r1
 800f744:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800f746:	78fb      	ldrb	r3, [r7, #3]
 800f748:	f003 020f 	and.w	r2, r3, #15
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	685b      	ldr	r3, [r3, #4]
 800f750:	429a      	cmp	r2, r3
 800f752:	d901      	bls.n	800f758 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800f754:	2301      	movs	r3, #1
 800f756:	e04e      	b.n	800f7f6 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800f758:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	da0f      	bge.n	800f780 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f760:	78fb      	ldrb	r3, [r7, #3]
 800f762:	f003 020f 	and.w	r2, r3, #15
 800f766:	4613      	mov	r3, r2
 800f768:	00db      	lsls	r3, r3, #3
 800f76a:	4413      	add	r3, r2
 800f76c:	009b      	lsls	r3, r3, #2
 800f76e:	3338      	adds	r3, #56	; 0x38
 800f770:	687a      	ldr	r2, [r7, #4]
 800f772:	4413      	add	r3, r2
 800f774:	3304      	adds	r3, #4
 800f776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	2201      	movs	r2, #1
 800f77c:	705a      	strb	r2, [r3, #1]
 800f77e:	e00d      	b.n	800f79c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800f780:	78fa      	ldrb	r2, [r7, #3]
 800f782:	4613      	mov	r3, r2
 800f784:	00db      	lsls	r3, r3, #3
 800f786:	4413      	add	r3, r2
 800f788:	009b      	lsls	r3, r3, #2
 800f78a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f78e:	687a      	ldr	r2, [r7, #4]
 800f790:	4413      	add	r3, r2
 800f792:	3304      	adds	r3, #4
 800f794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	2200      	movs	r2, #0
 800f79a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	2201      	movs	r2, #1
 800f7a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f7a2:	78fb      	ldrb	r3, [r7, #3]
 800f7a4:	f003 030f 	and.w	r3, r3, #15
 800f7a8:	b2da      	uxtb	r2, r3
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d101      	bne.n	800f7bc <HAL_PCD_EP_SetStall+0x82>
 800f7b8:	2302      	movs	r3, #2
 800f7ba:	e01c      	b.n	800f7f6 <HAL_PCD_EP_SetStall+0xbc>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2201      	movs	r2, #1
 800f7c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	68f9      	ldr	r1, [r7, #12]
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f007 f9fa 	bl	8016bc4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800f7d0:	78fb      	ldrb	r3, [r7, #3]
 800f7d2:	f003 030f 	and.w	r3, r3, #15
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d108      	bne.n	800f7ec <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681a      	ldr	r2, [r3, #0]
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f7e4:	4619      	mov	r1, r3
 800f7e6:	4610      	mov	r0, r2
 800f7e8:	f007 fbec 	bl	8016fc4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800f7f4:	2300      	movs	r3, #0
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3710      	adds	r7, #16
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}

0800f7fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f7fe:	b580      	push	{r7, lr}
 800f800:	b084      	sub	sp, #16
 800f802:	af00      	add	r7, sp, #0
 800f804:	6078      	str	r0, [r7, #4]
 800f806:	460b      	mov	r3, r1
 800f808:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800f80a:	78fb      	ldrb	r3, [r7, #3]
 800f80c:	f003 020f 	and.w	r2, r3, #15
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	685b      	ldr	r3, [r3, #4]
 800f814:	429a      	cmp	r2, r3
 800f816:	d901      	bls.n	800f81c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800f818:	2301      	movs	r3, #1
 800f81a:	e042      	b.n	800f8a2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800f81c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f820:	2b00      	cmp	r3, #0
 800f822:	da0f      	bge.n	800f844 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f824:	78fb      	ldrb	r3, [r7, #3]
 800f826:	f003 020f 	and.w	r2, r3, #15
 800f82a:	4613      	mov	r3, r2
 800f82c:	00db      	lsls	r3, r3, #3
 800f82e:	4413      	add	r3, r2
 800f830:	009b      	lsls	r3, r3, #2
 800f832:	3338      	adds	r3, #56	; 0x38
 800f834:	687a      	ldr	r2, [r7, #4]
 800f836:	4413      	add	r3, r2
 800f838:	3304      	adds	r3, #4
 800f83a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	2201      	movs	r2, #1
 800f840:	705a      	strb	r2, [r3, #1]
 800f842:	e00f      	b.n	800f864 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f844:	78fb      	ldrb	r3, [r7, #3]
 800f846:	f003 020f 	and.w	r2, r3, #15
 800f84a:	4613      	mov	r3, r2
 800f84c:	00db      	lsls	r3, r3, #3
 800f84e:	4413      	add	r3, r2
 800f850:	009b      	lsls	r3, r3, #2
 800f852:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f856:	687a      	ldr	r2, [r7, #4]
 800f858:	4413      	add	r3, r2
 800f85a:	3304      	adds	r3, #4
 800f85c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	2200      	movs	r2, #0
 800f862:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	2200      	movs	r2, #0
 800f868:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f86a:	78fb      	ldrb	r3, [r7, #3]
 800f86c:	f003 030f 	and.w	r3, r3, #15
 800f870:	b2da      	uxtb	r2, r3
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800f87c:	2b01      	cmp	r3, #1
 800f87e:	d101      	bne.n	800f884 <HAL_PCD_EP_ClrStall+0x86>
 800f880:	2302      	movs	r3, #2
 800f882:	e00e      	b.n	800f8a2 <HAL_PCD_EP_ClrStall+0xa4>
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2201      	movs	r2, #1
 800f888:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	68f9      	ldr	r1, [r7, #12]
 800f892:	4618      	mov	r0, r3
 800f894:	f007 fa04 	bl	8016ca0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2200      	movs	r2, #0
 800f89c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800f8a0:	2300      	movs	r3, #0
}
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	3710      	adds	r7, #16
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}

0800f8aa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f8aa:	b580      	push	{r7, lr}
 800f8ac:	b084      	sub	sp, #16
 800f8ae:	af00      	add	r7, sp, #0
 800f8b0:	6078      	str	r0, [r7, #4]
 800f8b2:	460b      	mov	r3, r1
 800f8b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800f8b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	da0c      	bge.n	800f8d8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f8be:	78fb      	ldrb	r3, [r7, #3]
 800f8c0:	f003 020f 	and.w	r2, r3, #15
 800f8c4:	4613      	mov	r3, r2
 800f8c6:	00db      	lsls	r3, r3, #3
 800f8c8:	4413      	add	r3, r2
 800f8ca:	009b      	lsls	r3, r3, #2
 800f8cc:	3338      	adds	r3, #56	; 0x38
 800f8ce:	687a      	ldr	r2, [r7, #4]
 800f8d0:	4413      	add	r3, r2
 800f8d2:	3304      	adds	r3, #4
 800f8d4:	60fb      	str	r3, [r7, #12]
 800f8d6:	e00c      	b.n	800f8f2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f8d8:	78fb      	ldrb	r3, [r7, #3]
 800f8da:	f003 020f 	and.w	r2, r3, #15
 800f8de:	4613      	mov	r3, r2
 800f8e0:	00db      	lsls	r3, r3, #3
 800f8e2:	4413      	add	r3, r2
 800f8e4:	009b      	lsls	r3, r3, #2
 800f8e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f8ea:	687a      	ldr	r2, [r7, #4]
 800f8ec:	4413      	add	r3, r2
 800f8ee:	3304      	adds	r3, #4
 800f8f0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	68f9      	ldr	r1, [r7, #12]
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f007 f827 	bl	801694c <USB_EPStopXfer>
 800f8fe:	4603      	mov	r3, r0
 800f900:	72fb      	strb	r3, [r7, #11]

  return ret;
 800f902:	7afb      	ldrb	r3, [r7, #11]
}
 800f904:	4618      	mov	r0, r3
 800f906:	3710      	adds	r7, #16
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}

0800f90c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b088      	sub	sp, #32
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800f920:	683a      	ldr	r2, [r7, #0]
 800f922:	4613      	mov	r3, r2
 800f924:	00db      	lsls	r3, r3, #3
 800f926:	4413      	add	r3, r2
 800f928:	009b      	lsls	r3, r3, #2
 800f92a:	3338      	adds	r3, #56	; 0x38
 800f92c:	687a      	ldr	r2, [r7, #4]
 800f92e:	4413      	add	r3, r2
 800f930:	3304      	adds	r3, #4
 800f932:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	6a1a      	ldr	r2, [r3, #32]
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	699b      	ldr	r3, [r3, #24]
 800f93c:	429a      	cmp	r2, r3
 800f93e:	d901      	bls.n	800f944 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800f940:	2301      	movs	r3, #1
 800f942:	e067      	b.n	800fa14 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	699a      	ldr	r2, [r3, #24]
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	6a1b      	ldr	r3, [r3, #32]
 800f94c:	1ad3      	subs	r3, r2, r3
 800f94e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	68db      	ldr	r3, [r3, #12]
 800f954:	69fa      	ldr	r2, [r7, #28]
 800f956:	429a      	cmp	r2, r3
 800f958:	d902      	bls.n	800f960 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	68db      	ldr	r3, [r3, #12]
 800f95e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800f960:	69fb      	ldr	r3, [r7, #28]
 800f962:	3303      	adds	r3, #3
 800f964:	089b      	lsrs	r3, r3, #2
 800f966:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800f968:	e026      	b.n	800f9b8 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	699a      	ldr	r2, [r3, #24]
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	6a1b      	ldr	r3, [r3, #32]
 800f972:	1ad3      	subs	r3, r2, r3
 800f974:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	68db      	ldr	r3, [r3, #12]
 800f97a:	69fa      	ldr	r2, [r7, #28]
 800f97c:	429a      	cmp	r2, r3
 800f97e:	d902      	bls.n	800f986 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	68db      	ldr	r3, [r3, #12]
 800f984:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800f986:	69fb      	ldr	r3, [r7, #28]
 800f988:	3303      	adds	r3, #3
 800f98a:	089b      	lsrs	r3, r3, #2
 800f98c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	6919      	ldr	r1, [r3, #16]
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	b2da      	uxtb	r2, r3
 800f996:	69fb      	ldr	r3, [r7, #28]
 800f998:	b29b      	uxth	r3, r3
 800f99a:	6978      	ldr	r0, [r7, #20]
 800f99c:	f007 f880 	bl	8016aa0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	691a      	ldr	r2, [r3, #16]
 800f9a4:	69fb      	ldr	r3, [r7, #28]
 800f9a6:	441a      	add	r2, r3
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	6a1a      	ldr	r2, [r3, #32]
 800f9b0:	69fb      	ldr	r3, [r7, #28]
 800f9b2:	441a      	add	r2, r3
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	015a      	lsls	r2, r3, #5
 800f9bc:	693b      	ldr	r3, [r7, #16]
 800f9be:	4413      	add	r3, r2
 800f9c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9c4:	699b      	ldr	r3, [r3, #24]
 800f9c6:	b29b      	uxth	r3, r3
 800f9c8:	69ba      	ldr	r2, [r7, #24]
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d809      	bhi.n	800f9e2 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	6a1a      	ldr	r2, [r3, #32]
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800f9d6:	429a      	cmp	r2, r3
 800f9d8:	d203      	bcs.n	800f9e2 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	699b      	ldr	r3, [r3, #24]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d1c3      	bne.n	800f96a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	699a      	ldr	r2, [r3, #24]
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	6a1b      	ldr	r3, [r3, #32]
 800f9ea:	429a      	cmp	r2, r3
 800f9ec:	d811      	bhi.n	800fa12 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	f003 030f 	and.w	r3, r3, #15
 800f9f4:	2201      	movs	r2, #1
 800f9f6:	fa02 f303 	lsl.w	r3, r2, r3
 800f9fa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800f9fc:	693b      	ldr	r3, [r7, #16]
 800f9fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	43db      	mvns	r3, r3
 800fa08:	6939      	ldr	r1, [r7, #16]
 800fa0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fa0e:	4013      	ands	r3, r2
 800fa10:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800fa12:	2300      	movs	r3, #0
}
 800fa14:	4618      	mov	r0, r3
 800fa16:	3720      	adds	r7, #32
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bd80      	pop	{r7, pc}

0800fa1c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b086      	sub	sp, #24
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
 800fa24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa2c:	697b      	ldr	r3, [r7, #20]
 800fa2e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	333c      	adds	r3, #60	; 0x3c
 800fa34:	3304      	adds	r3, #4
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	015a      	lsls	r2, r3, #5
 800fa3e:	693b      	ldr	r3, [r7, #16]
 800fa40:	4413      	add	r3, r2
 800fa42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa46:	689b      	ldr	r3, [r3, #8]
 800fa48:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	4a19      	ldr	r2, [pc, #100]	; (800fab4 <PCD_EP_OutXfrComplete_int+0x98>)
 800fa4e:	4293      	cmp	r3, r2
 800fa50:	d124      	bne.n	800fa9c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800fa52:	68bb      	ldr	r3, [r7, #8]
 800fa54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d00a      	beq.n	800fa72 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	015a      	lsls	r2, r3, #5
 800fa60:	693b      	ldr	r3, [r7, #16]
 800fa62:	4413      	add	r3, r2
 800fa64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa68:	461a      	mov	r2, r3
 800fa6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa6e:	6093      	str	r3, [r2, #8]
 800fa70:	e01a      	b.n	800faa8 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	f003 0320 	and.w	r3, r3, #32
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d008      	beq.n	800fa8e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	015a      	lsls	r2, r3, #5
 800fa80:	693b      	ldr	r3, [r7, #16]
 800fa82:	4413      	add	r3, r2
 800fa84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa88:	461a      	mov	r2, r3
 800fa8a:	2320      	movs	r3, #32
 800fa8c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	b2db      	uxtb	r3, r3
 800fa92:	4619      	mov	r1, r3
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f009 fa05 	bl	8018ea4 <HAL_PCD_DataOutStageCallback>
 800fa9a:	e005      	b.n	800faa8 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	b2db      	uxtb	r3, r3
 800faa0:	4619      	mov	r1, r3
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f009 f9fe 	bl	8018ea4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800faa8:	2300      	movs	r3, #0
}
 800faaa:	4618      	mov	r0, r3
 800faac:	3718      	adds	r7, #24
 800faae:	46bd      	mov	sp, r7
 800fab0:	bd80      	pop	{r7, pc}
 800fab2:	bf00      	nop
 800fab4:	4f54310a 	.word	0x4f54310a

0800fab8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b086      	sub	sp, #24
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
 800fac0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	333c      	adds	r3, #60	; 0x3c
 800fad0:	3304      	adds	r3, #4
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	015a      	lsls	r2, r3, #5
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	4413      	add	r3, r2
 800fade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fae2:	689b      	ldr	r3, [r3, #8]
 800fae4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	4a0c      	ldr	r2, [pc, #48]	; (800fb1c <PCD_EP_OutSetupPacket_int+0x64>)
 800faea:	4293      	cmp	r3, r2
 800faec:	d90e      	bls.n	800fb0c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d009      	beq.n	800fb0c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	015a      	lsls	r2, r3, #5
 800fafc:	693b      	ldr	r3, [r7, #16]
 800fafe:	4413      	add	r3, r2
 800fb00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb04:	461a      	mov	r2, r3
 800fb06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fb0a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800fb0c:	6878      	ldr	r0, [r7, #4]
 800fb0e:	f009 f9b7 	bl	8018e80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800fb12:	2300      	movs	r3, #0
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	3718      	adds	r7, #24
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}
 800fb1c:	4f54300a 	.word	0x4f54300a

0800fb20 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800fb20:	b480      	push	{r7}
 800fb22:	b085      	sub	sp, #20
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
 800fb28:	460b      	mov	r3, r1
 800fb2a:	70fb      	strb	r3, [r7, #3]
 800fb2c:	4613      	mov	r3, r2
 800fb2e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb36:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800fb38:	78fb      	ldrb	r3, [r7, #3]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d107      	bne.n	800fb4e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800fb3e:	883b      	ldrh	r3, [r7, #0]
 800fb40:	0419      	lsls	r1, r3, #16
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	68ba      	ldr	r2, [r7, #8]
 800fb48:	430a      	orrs	r2, r1
 800fb4a:	629a      	str	r2, [r3, #40]	; 0x28
 800fb4c:	e028      	b.n	800fba0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb54:	0c1b      	lsrs	r3, r3, #16
 800fb56:	68ba      	ldr	r2, [r7, #8]
 800fb58:	4413      	add	r3, r2
 800fb5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	73fb      	strb	r3, [r7, #15]
 800fb60:	e00d      	b.n	800fb7e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681a      	ldr	r2, [r3, #0]
 800fb66:	7bfb      	ldrb	r3, [r7, #15]
 800fb68:	3340      	adds	r3, #64	; 0x40
 800fb6a:	009b      	lsls	r3, r3, #2
 800fb6c:	4413      	add	r3, r2
 800fb6e:	685b      	ldr	r3, [r3, #4]
 800fb70:	0c1b      	lsrs	r3, r3, #16
 800fb72:	68ba      	ldr	r2, [r7, #8]
 800fb74:	4413      	add	r3, r2
 800fb76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800fb78:	7bfb      	ldrb	r3, [r7, #15]
 800fb7a:	3301      	adds	r3, #1
 800fb7c:	73fb      	strb	r3, [r7, #15]
 800fb7e:	7bfa      	ldrb	r2, [r7, #15]
 800fb80:	78fb      	ldrb	r3, [r7, #3]
 800fb82:	3b01      	subs	r3, #1
 800fb84:	429a      	cmp	r2, r3
 800fb86:	d3ec      	bcc.n	800fb62 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800fb88:	883b      	ldrh	r3, [r7, #0]
 800fb8a:	0418      	lsls	r0, r3, #16
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	6819      	ldr	r1, [r3, #0]
 800fb90:	78fb      	ldrb	r3, [r7, #3]
 800fb92:	3b01      	subs	r3, #1
 800fb94:	68ba      	ldr	r2, [r7, #8]
 800fb96:	4302      	orrs	r2, r0
 800fb98:	3340      	adds	r3, #64	; 0x40
 800fb9a:	009b      	lsls	r3, r3, #2
 800fb9c:	440b      	add	r3, r1
 800fb9e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800fba0:	2300      	movs	r3, #0
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	3714      	adds	r7, #20
 800fba6:	46bd      	mov	sp, r7
 800fba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbac:	4770      	bx	lr

0800fbae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800fbae:	b480      	push	{r7}
 800fbb0:	b083      	sub	sp, #12
 800fbb2:	af00      	add	r7, sp, #0
 800fbb4:	6078      	str	r0, [r7, #4]
 800fbb6:	460b      	mov	r3, r1
 800fbb8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	887a      	ldrh	r2, [r7, #2]
 800fbc0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800fbc2:	2300      	movs	r3, #0
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	370c      	adds	r7, #12
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbce:	4770      	bx	lr

0800fbd0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800fbd0:	b480      	push	{r7}
 800fbd2:	b085      	sub	sp, #20
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	2201      	movs	r2, #1
 800fbe2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2200      	movs	r2, #0
 800fbea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	699b      	ldr	r3, [r3, #24]
 800fbf2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fc02:	f043 0303 	orr.w	r3, r3, #3
 800fc06:	68fa      	ldr	r2, [r7, #12]
 800fc08:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800fc0a:	2300      	movs	r3, #0
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	3714      	adds	r7, #20
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr

0800fc18 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fc1c:	4b05      	ldr	r3, [pc, #20]	; (800fc34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	4a04      	ldr	r2, [pc, #16]	; (800fc34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800fc22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fc26:	6013      	str	r3, [r2, #0]
}
 800fc28:	bf00      	nop
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc30:	4770      	bx	lr
 800fc32:	bf00      	nop
 800fc34:	40007000 	.word	0x40007000

0800fc38 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b082      	sub	sp, #8
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
 800fc40:	460b      	mov	r3, r1
 800fc42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d10c      	bne.n	800fc64 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800fc4a:	4b13      	ldr	r3, [pc, #76]	; (800fc98 <HAL_PWR_EnterSLEEPMode+0x60>)
 800fc4c:	695b      	ldr	r3, [r3, #20]
 800fc4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fc52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc56:	d10e      	bne.n	800fc76 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800fc58:	f000 f8b6 	bl	800fdc8 <HAL_PWREx_DisableLowPowerRunMode>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d009      	beq.n	800fc76 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 800fc62:	e016      	b.n	800fc92 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 800fc64:	4b0c      	ldr	r3, [pc, #48]	; (800fc98 <HAL_PWR_EnterSLEEPMode+0x60>)
 800fc66:	695b      	ldr	r3, [r3, #20]
 800fc68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fc6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc70:	d001      	beq.n	800fc76 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800fc72:	f000 f899 	bl	800fda8 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800fc76:	4b09      	ldr	r3, [pc, #36]	; (800fc9c <HAL_PWR_EnterSLEEPMode+0x64>)
 800fc78:	691b      	ldr	r3, [r3, #16]
 800fc7a:	4a08      	ldr	r2, [pc, #32]	; (800fc9c <HAL_PWR_EnterSLEEPMode+0x64>)
 800fc7c:	f023 0304 	bic.w	r3, r3, #4
 800fc80:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800fc82:	78fb      	ldrb	r3, [r7, #3]
 800fc84:	2b01      	cmp	r3, #1
 800fc86:	d101      	bne.n	800fc8c <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800fc88:	bf30      	wfi
 800fc8a:	e002      	b.n	800fc92 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800fc8c:	bf40      	sev
    __WFE();
 800fc8e:	bf20      	wfe
    __WFE();
 800fc90:	bf20      	wfe
  }

}
 800fc92:	3708      	adds	r7, #8
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}
 800fc98:	40007000 	.word	0x40007000
 800fc9c:	e000ed00 	.word	0xe000ed00

0800fca0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800fca0:	b480      	push	{r7}
 800fca2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800fca4:	4b04      	ldr	r3, [pc, #16]	; (800fcb8 <HAL_PWREx_GetVoltageRange+0x18>)
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800fcac:	4618      	mov	r0, r3
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb4:	4770      	bx	lr
 800fcb6:	bf00      	nop
 800fcb8:	40007000 	.word	0x40007000

0800fcbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	b085      	sub	sp, #20
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fcca:	d130      	bne.n	800fd2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800fccc:	4b23      	ldr	r3, [pc, #140]	; (800fd5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800fcd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fcd8:	d038      	beq.n	800fd4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800fcda:	4b20      	ldr	r3, [pc, #128]	; (800fd5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800fce2:	4a1e      	ldr	r2, [pc, #120]	; (800fd5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800fce4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fce8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800fcea:	4b1d      	ldr	r3, [pc, #116]	; (800fd60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	2232      	movs	r2, #50	; 0x32
 800fcf0:	fb02 f303 	mul.w	r3, r2, r3
 800fcf4:	4a1b      	ldr	r2, [pc, #108]	; (800fd64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800fcf6:	fba2 2303 	umull	r2, r3, r2, r3
 800fcfa:	0c9b      	lsrs	r3, r3, #18
 800fcfc:	3301      	adds	r3, #1
 800fcfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800fd00:	e002      	b.n	800fd08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	3b01      	subs	r3, #1
 800fd06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800fd08:	4b14      	ldr	r3, [pc, #80]	; (800fd5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800fd0a:	695b      	ldr	r3, [r3, #20]
 800fd0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fd10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fd14:	d102      	bne.n	800fd1c <HAL_PWREx_ControlVoltageScaling+0x60>
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d1f2      	bne.n	800fd02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800fd1c:	4b0f      	ldr	r3, [pc, #60]	; (800fd5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800fd1e:	695b      	ldr	r3, [r3, #20]
 800fd20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fd24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fd28:	d110      	bne.n	800fd4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800fd2a:	2303      	movs	r3, #3
 800fd2c:	e00f      	b.n	800fd4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800fd2e:	4b0b      	ldr	r3, [pc, #44]	; (800fd5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800fd36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fd3a:	d007      	beq.n	800fd4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800fd3c:	4b07      	ldr	r3, [pc, #28]	; (800fd5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800fd44:	4a05      	ldr	r2, [pc, #20]	; (800fd5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800fd46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fd4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800fd4c:	2300      	movs	r3, #0
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3714      	adds	r7, #20
 800fd52:	46bd      	mov	sp, r7
 800fd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd58:	4770      	bx	lr
 800fd5a:	bf00      	nop
 800fd5c:	40007000 	.word	0x40007000
 800fd60:	20000194 	.word	0x20000194
 800fd64:	431bde83 	.word	0x431bde83

0800fd68 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800fd68:	b480      	push	{r7}
 800fd6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800fd6c:	4b05      	ldr	r3, [pc, #20]	; (800fd84 <HAL_PWREx_EnableVddUSB+0x1c>)
 800fd6e:	685b      	ldr	r3, [r3, #4]
 800fd70:	4a04      	ldr	r2, [pc, #16]	; (800fd84 <HAL_PWREx_EnableVddUSB+0x1c>)
 800fd72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fd76:	6053      	str	r3, [r2, #4]
}
 800fd78:	bf00      	nop
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd80:	4770      	bx	lr
 800fd82:	bf00      	nop
 800fd84:	40007000 	.word	0x40007000

0800fd88 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800fd88:	b480      	push	{r7}
 800fd8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800fd8c:	4b05      	ldr	r3, [pc, #20]	; (800fda4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800fd8e:	685b      	ldr	r3, [r3, #4]
 800fd90:	4a04      	ldr	r2, [pc, #16]	; (800fda4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800fd92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fd96:	6053      	str	r3, [r2, #4]
}
 800fd98:	bf00      	nop
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda0:	4770      	bx	lr
 800fda2:	bf00      	nop
 800fda4:	40007000 	.word	0x40007000

0800fda8 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800fda8:	b480      	push	{r7}
 800fdaa:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800fdac:	4b05      	ldr	r3, [pc, #20]	; (800fdc4 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	4a04      	ldr	r2, [pc, #16]	; (800fdc4 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800fdb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fdb6:	6013      	str	r3, [r2, #0]
}
 800fdb8:	bf00      	nop
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc0:	4770      	bx	lr
 800fdc2:	bf00      	nop
 800fdc4:	40007000 	.word	0x40007000

0800fdc8 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800fdc8:	b480      	push	{r7}
 800fdca:	b083      	sub	sp, #12
 800fdcc:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800fdce:	4b17      	ldr	r3, [pc, #92]	; (800fe2c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	4a16      	ldr	r2, [pc, #88]	; (800fe2c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800fdd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fdd8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800fdda:	4b15      	ldr	r3, [pc, #84]	; (800fe30 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	2232      	movs	r2, #50	; 0x32
 800fde0:	fb02 f303 	mul.w	r3, r2, r3
 800fde4:	4a13      	ldr	r2, [pc, #76]	; (800fe34 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 800fde6:	fba2 2303 	umull	r2, r3, r2, r3
 800fdea:	0c9b      	lsrs	r3, r3, #18
 800fdec:	3301      	adds	r3, #1
 800fdee:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800fdf0:	e002      	b.n	800fdf8 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	3b01      	subs	r3, #1
 800fdf6:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800fdf8:	4b0c      	ldr	r3, [pc, #48]	; (800fe2c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800fdfa:	695b      	ldr	r3, [r3, #20]
 800fdfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fe00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe04:	d102      	bne.n	800fe0c <HAL_PWREx_DisableLowPowerRunMode+0x44>
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d1f2      	bne.n	800fdf2 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800fe0c:	4b07      	ldr	r3, [pc, #28]	; (800fe2c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800fe0e:	695b      	ldr	r3, [r3, #20]
 800fe10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fe14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe18:	d101      	bne.n	800fe1e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 800fe1a:	2303      	movs	r3, #3
 800fe1c:	e000      	b.n	800fe20 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800fe1e:	2300      	movs	r3, #0
}
 800fe20:	4618      	mov	r0, r3
 800fe22:	370c      	adds	r7, #12
 800fe24:	46bd      	mov	sp, r7
 800fe26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2a:	4770      	bx	lr
 800fe2c:	40007000 	.word	0x40007000
 800fe30:	20000194 	.word	0x20000194
 800fe34:	431bde83 	.word	0x431bde83

0800fe38 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b086      	sub	sp, #24
 800fe3c:	af02      	add	r7, sp, #8
 800fe3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800fe40:	f7fb fb56 	bl	800b4f0 <HAL_GetTick>
 800fe44:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d101      	bne.n	800fe50 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	e069      	b.n	800ff24 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fe56:	b2db      	uxtb	r3, r3
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d10b      	bne.n	800fe74 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	2200      	movs	r2, #0
 800fe60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f7f2 faeb 	bl	8002440 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800fe6a:	f241 3188 	movw	r1, #5000	; 0x1388
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	f000 f85e 	bl	800ff30 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	689b      	ldr	r3, [r3, #8]
 800fe82:	3b01      	subs	r3, #1
 800fe84:	021a      	lsls	r2, r3, #8
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	430a      	orrs	r2, r1
 800fe8c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe92:	9300      	str	r3, [sp, #0]
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	2200      	movs	r2, #0
 800fe98:	2120      	movs	r1, #32
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f000 f856 	bl	800ff4c <QSPI_WaitFlagStateUntilTimeout>
 800fea0:	4603      	mov	r3, r0
 800fea2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800fea4:	7afb      	ldrb	r3, [r7, #11]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d137      	bne.n	800ff1a <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800feb4:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800feb8:	687a      	ldr	r2, [r7, #4]
 800feba:	6852      	ldr	r2, [r2, #4]
 800febc:	0611      	lsls	r1, r2, #24
 800febe:	687a      	ldr	r2, [r7, #4]
 800fec0:	68d2      	ldr	r2, [r2, #12]
 800fec2:	4311      	orrs	r1, r2
 800fec4:	687a      	ldr	r2, [r7, #4]
 800fec6:	69d2      	ldr	r2, [r2, #28]
 800fec8:	4311      	orrs	r1, r2
 800feca:	687a      	ldr	r2, [r7, #4]
 800fecc:	6a12      	ldr	r2, [r2, #32]
 800fece:	4311      	orrs	r1, r2
 800fed0:	687a      	ldr	r2, [r7, #4]
 800fed2:	6812      	ldr	r2, [r2, #0]
 800fed4:	430b      	orrs	r3, r1
 800fed6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	685a      	ldr	r2, [r3, #4]
 800fede:	4b13      	ldr	r3, [pc, #76]	; (800ff2c <HAL_QSPI_Init+0xf4>)
 800fee0:	4013      	ands	r3, r2
 800fee2:	687a      	ldr	r2, [r7, #4]
 800fee4:	6912      	ldr	r2, [r2, #16]
 800fee6:	0411      	lsls	r1, r2, #16
 800fee8:	687a      	ldr	r2, [r7, #4]
 800feea:	6952      	ldr	r2, [r2, #20]
 800feec:	4311      	orrs	r1, r2
 800feee:	687a      	ldr	r2, [r7, #4]
 800fef0:	6992      	ldr	r2, [r2, #24]
 800fef2:	4311      	orrs	r1, r2
 800fef4:	687a      	ldr	r2, [r7, #4]
 800fef6:	6812      	ldr	r2, [r2, #0]
 800fef8:	430b      	orrs	r3, r1
 800fefa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	681a      	ldr	r2, [r3, #0]
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	f042 0201 	orr.w	r2, r2, #1
 800ff0a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2200      	movs	r2, #0
 800ff10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2201      	movs	r2, #1
 800ff16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800ff22:	7afb      	ldrb	r3, [r7, #11]
}
 800ff24:	4618      	mov	r0, r3
 800ff26:	3710      	adds	r7, #16
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}
 800ff2c:	ffe0f8fe 	.word	0xffe0f8fe

0800ff30 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800ff30:	b480      	push	{r7}
 800ff32:	b083      	sub	sp, #12
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
 800ff38:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	683a      	ldr	r2, [r7, #0]
 800ff3e:	649a      	str	r2, [r3, #72]	; 0x48
}
 800ff40:	bf00      	nop
 800ff42:	370c      	adds	r7, #12
 800ff44:	46bd      	mov	sp, r7
 800ff46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4a:	4770      	bx	lr

0800ff4c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b084      	sub	sp, #16
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	60f8      	str	r0, [r7, #12]
 800ff54:	60b9      	str	r1, [r7, #8]
 800ff56:	603b      	str	r3, [r7, #0]
 800ff58:	4613      	mov	r3, r2
 800ff5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ff5c:	e01a      	b.n	800ff94 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ff5e:	69bb      	ldr	r3, [r7, #24]
 800ff60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff64:	d016      	beq.n	800ff94 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ff66:	f7fb fac3 	bl	800b4f0 <HAL_GetTick>
 800ff6a:	4602      	mov	r2, r0
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	1ad3      	subs	r3, r2, r3
 800ff70:	69ba      	ldr	r2, [r7, #24]
 800ff72:	429a      	cmp	r2, r3
 800ff74:	d302      	bcc.n	800ff7c <QSPI_WaitFlagStateUntilTimeout+0x30>
 800ff76:	69bb      	ldr	r3, [r7, #24]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d10b      	bne.n	800ff94 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	2204      	movs	r2, #4
 800ff80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff88:	f043 0201 	orr.w	r2, r3, #1
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800ff90:	2301      	movs	r3, #1
 800ff92:	e00e      	b.n	800ffb2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	689a      	ldr	r2, [r3, #8]
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	4013      	ands	r3, r2
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	bf14      	ite	ne
 800ffa2:	2301      	movne	r3, #1
 800ffa4:	2300      	moveq	r3, #0
 800ffa6:	b2db      	uxtb	r3, r3
 800ffa8:	461a      	mov	r2, r3
 800ffaa:	79fb      	ldrb	r3, [r7, #7]
 800ffac:	429a      	cmp	r2, r3
 800ffae:	d1d6      	bne.n	800ff5e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ffb0:	2300      	movs	r3, #0
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3710      	adds	r7, #16
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}
	...

0800ffbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b088      	sub	sp, #32
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d102      	bne.n	800ffd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800ffca:	2301      	movs	r3, #1
 800ffcc:	f000 bc08 	b.w	80107e0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ffd0:	4b96      	ldr	r3, [pc, #600]	; (801022c <HAL_RCC_OscConfig+0x270>)
 800ffd2:	689b      	ldr	r3, [r3, #8]
 800ffd4:	f003 030c 	and.w	r3, r3, #12
 800ffd8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ffda:	4b94      	ldr	r3, [pc, #592]	; (801022c <HAL_RCC_OscConfig+0x270>)
 800ffdc:	68db      	ldr	r3, [r3, #12]
 800ffde:	f003 0303 	and.w	r3, r3, #3
 800ffe2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	f003 0310 	and.w	r3, r3, #16
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	f000 80e4 	beq.w	80101ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800fff2:	69bb      	ldr	r3, [r7, #24]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d007      	beq.n	8010008 <HAL_RCC_OscConfig+0x4c>
 800fff8:	69bb      	ldr	r3, [r7, #24]
 800fffa:	2b0c      	cmp	r3, #12
 800fffc:	f040 808b 	bne.w	8010116 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8010000:	697b      	ldr	r3, [r7, #20]
 8010002:	2b01      	cmp	r3, #1
 8010004:	f040 8087 	bne.w	8010116 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8010008:	4b88      	ldr	r3, [pc, #544]	; (801022c <HAL_RCC_OscConfig+0x270>)
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	f003 0302 	and.w	r3, r3, #2
 8010010:	2b00      	cmp	r3, #0
 8010012:	d005      	beq.n	8010020 <HAL_RCC_OscConfig+0x64>
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	699b      	ldr	r3, [r3, #24]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d101      	bne.n	8010020 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 801001c:	2301      	movs	r3, #1
 801001e:	e3df      	b.n	80107e0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	6a1a      	ldr	r2, [r3, #32]
 8010024:	4b81      	ldr	r3, [pc, #516]	; (801022c <HAL_RCC_OscConfig+0x270>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	f003 0308 	and.w	r3, r3, #8
 801002c:	2b00      	cmp	r3, #0
 801002e:	d004      	beq.n	801003a <HAL_RCC_OscConfig+0x7e>
 8010030:	4b7e      	ldr	r3, [pc, #504]	; (801022c <HAL_RCC_OscConfig+0x270>)
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010038:	e005      	b.n	8010046 <HAL_RCC_OscConfig+0x8a>
 801003a:	4b7c      	ldr	r3, [pc, #496]	; (801022c <HAL_RCC_OscConfig+0x270>)
 801003c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010040:	091b      	lsrs	r3, r3, #4
 8010042:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010046:	4293      	cmp	r3, r2
 8010048:	d223      	bcs.n	8010092 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	6a1b      	ldr	r3, [r3, #32]
 801004e:	4618      	mov	r0, r3
 8010050:	f000 fd92 	bl	8010b78 <RCC_SetFlashLatencyFromMSIRange>
 8010054:	4603      	mov	r3, r0
 8010056:	2b00      	cmp	r3, #0
 8010058:	d001      	beq.n	801005e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 801005a:	2301      	movs	r3, #1
 801005c:	e3c0      	b.n	80107e0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801005e:	4b73      	ldr	r3, [pc, #460]	; (801022c <HAL_RCC_OscConfig+0x270>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	4a72      	ldr	r2, [pc, #456]	; (801022c <HAL_RCC_OscConfig+0x270>)
 8010064:	f043 0308 	orr.w	r3, r3, #8
 8010068:	6013      	str	r3, [r2, #0]
 801006a:	4b70      	ldr	r3, [pc, #448]	; (801022c <HAL_RCC_OscConfig+0x270>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	6a1b      	ldr	r3, [r3, #32]
 8010076:	496d      	ldr	r1, [pc, #436]	; (801022c <HAL_RCC_OscConfig+0x270>)
 8010078:	4313      	orrs	r3, r2
 801007a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801007c:	4b6b      	ldr	r3, [pc, #428]	; (801022c <HAL_RCC_OscConfig+0x270>)
 801007e:	685b      	ldr	r3, [r3, #4]
 8010080:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	69db      	ldr	r3, [r3, #28]
 8010088:	021b      	lsls	r3, r3, #8
 801008a:	4968      	ldr	r1, [pc, #416]	; (801022c <HAL_RCC_OscConfig+0x270>)
 801008c:	4313      	orrs	r3, r2
 801008e:	604b      	str	r3, [r1, #4]
 8010090:	e025      	b.n	80100de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010092:	4b66      	ldr	r3, [pc, #408]	; (801022c <HAL_RCC_OscConfig+0x270>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	4a65      	ldr	r2, [pc, #404]	; (801022c <HAL_RCC_OscConfig+0x270>)
 8010098:	f043 0308 	orr.w	r3, r3, #8
 801009c:	6013      	str	r3, [r2, #0]
 801009e:	4b63      	ldr	r3, [pc, #396]	; (801022c <HAL_RCC_OscConfig+0x270>)
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	6a1b      	ldr	r3, [r3, #32]
 80100aa:	4960      	ldr	r1, [pc, #384]	; (801022c <HAL_RCC_OscConfig+0x270>)
 80100ac:	4313      	orrs	r3, r2
 80100ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80100b0:	4b5e      	ldr	r3, [pc, #376]	; (801022c <HAL_RCC_OscConfig+0x270>)
 80100b2:	685b      	ldr	r3, [r3, #4]
 80100b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	69db      	ldr	r3, [r3, #28]
 80100bc:	021b      	lsls	r3, r3, #8
 80100be:	495b      	ldr	r1, [pc, #364]	; (801022c <HAL_RCC_OscConfig+0x270>)
 80100c0:	4313      	orrs	r3, r2
 80100c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80100c4:	69bb      	ldr	r3, [r7, #24]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d109      	bne.n	80100de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	6a1b      	ldr	r3, [r3, #32]
 80100ce:	4618      	mov	r0, r3
 80100d0:	f000 fd52 	bl	8010b78 <RCC_SetFlashLatencyFromMSIRange>
 80100d4:	4603      	mov	r3, r0
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d001      	beq.n	80100de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80100da:	2301      	movs	r3, #1
 80100dc:	e380      	b.n	80107e0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80100de:	f000 fc87 	bl	80109f0 <HAL_RCC_GetSysClockFreq>
 80100e2:	4602      	mov	r2, r0
 80100e4:	4b51      	ldr	r3, [pc, #324]	; (801022c <HAL_RCC_OscConfig+0x270>)
 80100e6:	689b      	ldr	r3, [r3, #8]
 80100e8:	091b      	lsrs	r3, r3, #4
 80100ea:	f003 030f 	and.w	r3, r3, #15
 80100ee:	4950      	ldr	r1, [pc, #320]	; (8010230 <HAL_RCC_OscConfig+0x274>)
 80100f0:	5ccb      	ldrb	r3, [r1, r3]
 80100f2:	f003 031f 	and.w	r3, r3, #31
 80100f6:	fa22 f303 	lsr.w	r3, r2, r3
 80100fa:	4a4e      	ldr	r2, [pc, #312]	; (8010234 <HAL_RCC_OscConfig+0x278>)
 80100fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80100fe:	4b4e      	ldr	r3, [pc, #312]	; (8010238 <HAL_RCC_OscConfig+0x27c>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	4618      	mov	r0, r3
 8010104:	f7fb f9a4 	bl	800b450 <HAL_InitTick>
 8010108:	4603      	mov	r3, r0
 801010a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 801010c:	7bfb      	ldrb	r3, [r7, #15]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d052      	beq.n	80101b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8010112:	7bfb      	ldrb	r3, [r7, #15]
 8010114:	e364      	b.n	80107e0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	699b      	ldr	r3, [r3, #24]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d032      	beq.n	8010184 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801011e:	4b43      	ldr	r3, [pc, #268]	; (801022c <HAL_RCC_OscConfig+0x270>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	4a42      	ldr	r2, [pc, #264]	; (801022c <HAL_RCC_OscConfig+0x270>)
 8010124:	f043 0301 	orr.w	r3, r3, #1
 8010128:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 801012a:	f7fb f9e1 	bl	800b4f0 <HAL_GetTick>
 801012e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010130:	e008      	b.n	8010144 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8010132:	f7fb f9dd 	bl	800b4f0 <HAL_GetTick>
 8010136:	4602      	mov	r2, r0
 8010138:	693b      	ldr	r3, [r7, #16]
 801013a:	1ad3      	subs	r3, r2, r3
 801013c:	2b02      	cmp	r3, #2
 801013e:	d901      	bls.n	8010144 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8010140:	2303      	movs	r3, #3
 8010142:	e34d      	b.n	80107e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010144:	4b39      	ldr	r3, [pc, #228]	; (801022c <HAL_RCC_OscConfig+0x270>)
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	f003 0302 	and.w	r3, r3, #2
 801014c:	2b00      	cmp	r3, #0
 801014e:	d0f0      	beq.n	8010132 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010150:	4b36      	ldr	r3, [pc, #216]	; (801022c <HAL_RCC_OscConfig+0x270>)
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	4a35      	ldr	r2, [pc, #212]	; (801022c <HAL_RCC_OscConfig+0x270>)
 8010156:	f043 0308 	orr.w	r3, r3, #8
 801015a:	6013      	str	r3, [r2, #0]
 801015c:	4b33      	ldr	r3, [pc, #204]	; (801022c <HAL_RCC_OscConfig+0x270>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	6a1b      	ldr	r3, [r3, #32]
 8010168:	4930      	ldr	r1, [pc, #192]	; (801022c <HAL_RCC_OscConfig+0x270>)
 801016a:	4313      	orrs	r3, r2
 801016c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801016e:	4b2f      	ldr	r3, [pc, #188]	; (801022c <HAL_RCC_OscConfig+0x270>)
 8010170:	685b      	ldr	r3, [r3, #4]
 8010172:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	69db      	ldr	r3, [r3, #28]
 801017a:	021b      	lsls	r3, r3, #8
 801017c:	492b      	ldr	r1, [pc, #172]	; (801022c <HAL_RCC_OscConfig+0x270>)
 801017e:	4313      	orrs	r3, r2
 8010180:	604b      	str	r3, [r1, #4]
 8010182:	e01a      	b.n	80101ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8010184:	4b29      	ldr	r3, [pc, #164]	; (801022c <HAL_RCC_OscConfig+0x270>)
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	4a28      	ldr	r2, [pc, #160]	; (801022c <HAL_RCC_OscConfig+0x270>)
 801018a:	f023 0301 	bic.w	r3, r3, #1
 801018e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8010190:	f7fb f9ae 	bl	800b4f0 <HAL_GetTick>
 8010194:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8010196:	e008      	b.n	80101aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8010198:	f7fb f9aa 	bl	800b4f0 <HAL_GetTick>
 801019c:	4602      	mov	r2, r0
 801019e:	693b      	ldr	r3, [r7, #16]
 80101a0:	1ad3      	subs	r3, r2, r3
 80101a2:	2b02      	cmp	r3, #2
 80101a4:	d901      	bls.n	80101aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80101a6:	2303      	movs	r3, #3
 80101a8:	e31a      	b.n	80107e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80101aa:	4b20      	ldr	r3, [pc, #128]	; (801022c <HAL_RCC_OscConfig+0x270>)
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	f003 0302 	and.w	r3, r3, #2
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d1f0      	bne.n	8010198 <HAL_RCC_OscConfig+0x1dc>
 80101b6:	e000      	b.n	80101ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80101b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	f003 0301 	and.w	r3, r3, #1
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d073      	beq.n	80102ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80101c6:	69bb      	ldr	r3, [r7, #24]
 80101c8:	2b08      	cmp	r3, #8
 80101ca:	d005      	beq.n	80101d8 <HAL_RCC_OscConfig+0x21c>
 80101cc:	69bb      	ldr	r3, [r7, #24]
 80101ce:	2b0c      	cmp	r3, #12
 80101d0:	d10e      	bne.n	80101f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	2b03      	cmp	r3, #3
 80101d6:	d10b      	bne.n	80101f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80101d8:	4b14      	ldr	r3, [pc, #80]	; (801022c <HAL_RCC_OscConfig+0x270>)
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d063      	beq.n	80102ac <HAL_RCC_OscConfig+0x2f0>
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	685b      	ldr	r3, [r3, #4]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d15f      	bne.n	80102ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80101ec:	2301      	movs	r3, #1
 80101ee:	e2f7      	b.n	80107e0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	685b      	ldr	r3, [r3, #4]
 80101f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80101f8:	d106      	bne.n	8010208 <HAL_RCC_OscConfig+0x24c>
 80101fa:	4b0c      	ldr	r3, [pc, #48]	; (801022c <HAL_RCC_OscConfig+0x270>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	4a0b      	ldr	r2, [pc, #44]	; (801022c <HAL_RCC_OscConfig+0x270>)
 8010200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010204:	6013      	str	r3, [r2, #0]
 8010206:	e025      	b.n	8010254 <HAL_RCC_OscConfig+0x298>
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	685b      	ldr	r3, [r3, #4]
 801020c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010210:	d114      	bne.n	801023c <HAL_RCC_OscConfig+0x280>
 8010212:	4b06      	ldr	r3, [pc, #24]	; (801022c <HAL_RCC_OscConfig+0x270>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	4a05      	ldr	r2, [pc, #20]	; (801022c <HAL_RCC_OscConfig+0x270>)
 8010218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801021c:	6013      	str	r3, [r2, #0]
 801021e:	4b03      	ldr	r3, [pc, #12]	; (801022c <HAL_RCC_OscConfig+0x270>)
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	4a02      	ldr	r2, [pc, #8]	; (801022c <HAL_RCC_OscConfig+0x270>)
 8010224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010228:	6013      	str	r3, [r2, #0]
 801022a:	e013      	b.n	8010254 <HAL_RCC_OscConfig+0x298>
 801022c:	40021000 	.word	0x40021000
 8010230:	0801ab88 	.word	0x0801ab88
 8010234:	20000194 	.word	0x20000194
 8010238:	20000550 	.word	0x20000550
 801023c:	4ba0      	ldr	r3, [pc, #640]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	4a9f      	ldr	r2, [pc, #636]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 8010242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010246:	6013      	str	r3, [r2, #0]
 8010248:	4b9d      	ldr	r3, [pc, #628]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	4a9c      	ldr	r2, [pc, #624]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 801024e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010252:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	685b      	ldr	r3, [r3, #4]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d013      	beq.n	8010284 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801025c:	f7fb f948 	bl	800b4f0 <HAL_GetTick>
 8010260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8010262:	e008      	b.n	8010276 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010264:	f7fb f944 	bl	800b4f0 <HAL_GetTick>
 8010268:	4602      	mov	r2, r0
 801026a:	693b      	ldr	r3, [r7, #16]
 801026c:	1ad3      	subs	r3, r2, r3
 801026e:	2b64      	cmp	r3, #100	; 0x64
 8010270:	d901      	bls.n	8010276 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8010272:	2303      	movs	r3, #3
 8010274:	e2b4      	b.n	80107e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8010276:	4b92      	ldr	r3, [pc, #584]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801027e:	2b00      	cmp	r3, #0
 8010280:	d0f0      	beq.n	8010264 <HAL_RCC_OscConfig+0x2a8>
 8010282:	e014      	b.n	80102ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010284:	f7fb f934 	bl	800b4f0 <HAL_GetTick>
 8010288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801028a:	e008      	b.n	801029e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801028c:	f7fb f930 	bl	800b4f0 <HAL_GetTick>
 8010290:	4602      	mov	r2, r0
 8010292:	693b      	ldr	r3, [r7, #16]
 8010294:	1ad3      	subs	r3, r2, r3
 8010296:	2b64      	cmp	r3, #100	; 0x64
 8010298:	d901      	bls.n	801029e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 801029a:	2303      	movs	r3, #3
 801029c:	e2a0      	b.n	80107e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801029e:	4b88      	ldr	r3, [pc, #544]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d1f0      	bne.n	801028c <HAL_RCC_OscConfig+0x2d0>
 80102aa:	e000      	b.n	80102ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80102ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	f003 0302 	and.w	r3, r3, #2
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d060      	beq.n	801037c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80102ba:	69bb      	ldr	r3, [r7, #24]
 80102bc:	2b04      	cmp	r3, #4
 80102be:	d005      	beq.n	80102cc <HAL_RCC_OscConfig+0x310>
 80102c0:	69bb      	ldr	r3, [r7, #24]
 80102c2:	2b0c      	cmp	r3, #12
 80102c4:	d119      	bne.n	80102fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	2b02      	cmp	r3, #2
 80102ca:	d116      	bne.n	80102fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80102cc:	4b7c      	ldr	r3, [pc, #496]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d005      	beq.n	80102e4 <HAL_RCC_OscConfig+0x328>
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	68db      	ldr	r3, [r3, #12]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d101      	bne.n	80102e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80102e0:	2301      	movs	r3, #1
 80102e2:	e27d      	b.n	80107e0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80102e4:	4b76      	ldr	r3, [pc, #472]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 80102e6:	685b      	ldr	r3, [r3, #4]
 80102e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	691b      	ldr	r3, [r3, #16]
 80102f0:	061b      	lsls	r3, r3, #24
 80102f2:	4973      	ldr	r1, [pc, #460]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 80102f4:	4313      	orrs	r3, r2
 80102f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80102f8:	e040      	b.n	801037c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	68db      	ldr	r3, [r3, #12]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d023      	beq.n	801034a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010302:	4b6f      	ldr	r3, [pc, #444]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	4a6e      	ldr	r2, [pc, #440]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 8010308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801030c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801030e:	f7fb f8ef 	bl	800b4f0 <HAL_GetTick>
 8010312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010314:	e008      	b.n	8010328 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010316:	f7fb f8eb 	bl	800b4f0 <HAL_GetTick>
 801031a:	4602      	mov	r2, r0
 801031c:	693b      	ldr	r3, [r7, #16]
 801031e:	1ad3      	subs	r3, r2, r3
 8010320:	2b02      	cmp	r3, #2
 8010322:	d901      	bls.n	8010328 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8010324:	2303      	movs	r3, #3
 8010326:	e25b      	b.n	80107e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010328:	4b65      	ldr	r3, [pc, #404]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010330:	2b00      	cmp	r3, #0
 8010332:	d0f0      	beq.n	8010316 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010334:	4b62      	ldr	r3, [pc, #392]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 8010336:	685b      	ldr	r3, [r3, #4]
 8010338:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	691b      	ldr	r3, [r3, #16]
 8010340:	061b      	lsls	r3, r3, #24
 8010342:	495f      	ldr	r1, [pc, #380]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 8010344:	4313      	orrs	r3, r2
 8010346:	604b      	str	r3, [r1, #4]
 8010348:	e018      	b.n	801037c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801034a:	4b5d      	ldr	r3, [pc, #372]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	4a5c      	ldr	r2, [pc, #368]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 8010350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010356:	f7fb f8cb 	bl	800b4f0 <HAL_GetTick>
 801035a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801035c:	e008      	b.n	8010370 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801035e:	f7fb f8c7 	bl	800b4f0 <HAL_GetTick>
 8010362:	4602      	mov	r2, r0
 8010364:	693b      	ldr	r3, [r7, #16]
 8010366:	1ad3      	subs	r3, r2, r3
 8010368:	2b02      	cmp	r3, #2
 801036a:	d901      	bls.n	8010370 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 801036c:	2303      	movs	r3, #3
 801036e:	e237      	b.n	80107e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8010370:	4b53      	ldr	r3, [pc, #332]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010378:	2b00      	cmp	r3, #0
 801037a:	d1f0      	bne.n	801035e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	f003 0308 	and.w	r3, r3, #8
 8010384:	2b00      	cmp	r3, #0
 8010386:	d03c      	beq.n	8010402 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	695b      	ldr	r3, [r3, #20]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d01c      	beq.n	80103ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010390:	4b4b      	ldr	r3, [pc, #300]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 8010392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010396:	4a4a      	ldr	r2, [pc, #296]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 8010398:	f043 0301 	orr.w	r3, r3, #1
 801039c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80103a0:	f7fb f8a6 	bl	800b4f0 <HAL_GetTick>
 80103a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80103a6:	e008      	b.n	80103ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80103a8:	f7fb f8a2 	bl	800b4f0 <HAL_GetTick>
 80103ac:	4602      	mov	r2, r0
 80103ae:	693b      	ldr	r3, [r7, #16]
 80103b0:	1ad3      	subs	r3, r2, r3
 80103b2:	2b02      	cmp	r3, #2
 80103b4:	d901      	bls.n	80103ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80103b6:	2303      	movs	r3, #3
 80103b8:	e212      	b.n	80107e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80103ba:	4b41      	ldr	r3, [pc, #260]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 80103bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80103c0:	f003 0302 	and.w	r3, r3, #2
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d0ef      	beq.n	80103a8 <HAL_RCC_OscConfig+0x3ec>
 80103c8:	e01b      	b.n	8010402 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80103ca:	4b3d      	ldr	r3, [pc, #244]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 80103cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80103d0:	4a3b      	ldr	r2, [pc, #236]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 80103d2:	f023 0301 	bic.w	r3, r3, #1
 80103d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80103da:	f7fb f889 	bl	800b4f0 <HAL_GetTick>
 80103de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80103e0:	e008      	b.n	80103f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80103e2:	f7fb f885 	bl	800b4f0 <HAL_GetTick>
 80103e6:	4602      	mov	r2, r0
 80103e8:	693b      	ldr	r3, [r7, #16]
 80103ea:	1ad3      	subs	r3, r2, r3
 80103ec:	2b02      	cmp	r3, #2
 80103ee:	d901      	bls.n	80103f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80103f0:	2303      	movs	r3, #3
 80103f2:	e1f5      	b.n	80107e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80103f4:	4b32      	ldr	r3, [pc, #200]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 80103f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80103fa:	f003 0302 	and.w	r3, r3, #2
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d1ef      	bne.n	80103e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	f003 0304 	and.w	r3, r3, #4
 801040a:	2b00      	cmp	r3, #0
 801040c:	f000 80a6 	beq.w	801055c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010410:	2300      	movs	r3, #0
 8010412:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8010414:	4b2a      	ldr	r3, [pc, #168]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 8010416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801041c:	2b00      	cmp	r3, #0
 801041e:	d10d      	bne.n	801043c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010420:	4b27      	ldr	r3, [pc, #156]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 8010422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010424:	4a26      	ldr	r2, [pc, #152]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 8010426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801042a:	6593      	str	r3, [r2, #88]	; 0x58
 801042c:	4b24      	ldr	r3, [pc, #144]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 801042e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010434:	60bb      	str	r3, [r7, #8]
 8010436:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010438:	2301      	movs	r3, #1
 801043a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801043c:	4b21      	ldr	r3, [pc, #132]	; (80104c4 <HAL_RCC_OscConfig+0x508>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010444:	2b00      	cmp	r3, #0
 8010446:	d118      	bne.n	801047a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010448:	4b1e      	ldr	r3, [pc, #120]	; (80104c4 <HAL_RCC_OscConfig+0x508>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	4a1d      	ldr	r2, [pc, #116]	; (80104c4 <HAL_RCC_OscConfig+0x508>)
 801044e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010452:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010454:	f7fb f84c 	bl	800b4f0 <HAL_GetTick>
 8010458:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801045a:	e008      	b.n	801046e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801045c:	f7fb f848 	bl	800b4f0 <HAL_GetTick>
 8010460:	4602      	mov	r2, r0
 8010462:	693b      	ldr	r3, [r7, #16]
 8010464:	1ad3      	subs	r3, r2, r3
 8010466:	2b02      	cmp	r3, #2
 8010468:	d901      	bls.n	801046e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 801046a:	2303      	movs	r3, #3
 801046c:	e1b8      	b.n	80107e0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801046e:	4b15      	ldr	r3, [pc, #84]	; (80104c4 <HAL_RCC_OscConfig+0x508>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010476:	2b00      	cmp	r3, #0
 8010478:	d0f0      	beq.n	801045c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	689b      	ldr	r3, [r3, #8]
 801047e:	2b01      	cmp	r3, #1
 8010480:	d108      	bne.n	8010494 <HAL_RCC_OscConfig+0x4d8>
 8010482:	4b0f      	ldr	r3, [pc, #60]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 8010484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010488:	4a0d      	ldr	r2, [pc, #52]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 801048a:	f043 0301 	orr.w	r3, r3, #1
 801048e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8010492:	e029      	b.n	80104e8 <HAL_RCC_OscConfig+0x52c>
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	689b      	ldr	r3, [r3, #8]
 8010498:	2b05      	cmp	r3, #5
 801049a:	d115      	bne.n	80104c8 <HAL_RCC_OscConfig+0x50c>
 801049c:	4b08      	ldr	r3, [pc, #32]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 801049e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80104a2:	4a07      	ldr	r2, [pc, #28]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 80104a4:	f043 0304 	orr.w	r3, r3, #4
 80104a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80104ac:	4b04      	ldr	r3, [pc, #16]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 80104ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80104b2:	4a03      	ldr	r2, [pc, #12]	; (80104c0 <HAL_RCC_OscConfig+0x504>)
 80104b4:	f043 0301 	orr.w	r3, r3, #1
 80104b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80104bc:	e014      	b.n	80104e8 <HAL_RCC_OscConfig+0x52c>
 80104be:	bf00      	nop
 80104c0:	40021000 	.word	0x40021000
 80104c4:	40007000 	.word	0x40007000
 80104c8:	4b9d      	ldr	r3, [pc, #628]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 80104ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80104ce:	4a9c      	ldr	r2, [pc, #624]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 80104d0:	f023 0301 	bic.w	r3, r3, #1
 80104d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80104d8:	4b99      	ldr	r3, [pc, #612]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 80104da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80104de:	4a98      	ldr	r2, [pc, #608]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 80104e0:	f023 0304 	bic.w	r3, r3, #4
 80104e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	689b      	ldr	r3, [r3, #8]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d016      	beq.n	801051e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80104f0:	f7fa fffe 	bl	800b4f0 <HAL_GetTick>
 80104f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80104f6:	e00a      	b.n	801050e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80104f8:	f7fa fffa 	bl	800b4f0 <HAL_GetTick>
 80104fc:	4602      	mov	r2, r0
 80104fe:	693b      	ldr	r3, [r7, #16]
 8010500:	1ad3      	subs	r3, r2, r3
 8010502:	f241 3288 	movw	r2, #5000	; 0x1388
 8010506:	4293      	cmp	r3, r2
 8010508:	d901      	bls.n	801050e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 801050a:	2303      	movs	r3, #3
 801050c:	e168      	b.n	80107e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801050e:	4b8c      	ldr	r3, [pc, #560]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 8010510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010514:	f003 0302 	and.w	r3, r3, #2
 8010518:	2b00      	cmp	r3, #0
 801051a:	d0ed      	beq.n	80104f8 <HAL_RCC_OscConfig+0x53c>
 801051c:	e015      	b.n	801054a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801051e:	f7fa ffe7 	bl	800b4f0 <HAL_GetTick>
 8010522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8010524:	e00a      	b.n	801053c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010526:	f7fa ffe3 	bl	800b4f0 <HAL_GetTick>
 801052a:	4602      	mov	r2, r0
 801052c:	693b      	ldr	r3, [r7, #16]
 801052e:	1ad3      	subs	r3, r2, r3
 8010530:	f241 3288 	movw	r2, #5000	; 0x1388
 8010534:	4293      	cmp	r3, r2
 8010536:	d901      	bls.n	801053c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8010538:	2303      	movs	r3, #3
 801053a:	e151      	b.n	80107e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801053c:	4b80      	ldr	r3, [pc, #512]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 801053e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010542:	f003 0302 	and.w	r3, r3, #2
 8010546:	2b00      	cmp	r3, #0
 8010548:	d1ed      	bne.n	8010526 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801054a:	7ffb      	ldrb	r3, [r7, #31]
 801054c:	2b01      	cmp	r3, #1
 801054e:	d105      	bne.n	801055c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010550:	4b7b      	ldr	r3, [pc, #492]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 8010552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010554:	4a7a      	ldr	r2, [pc, #488]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 8010556:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801055a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	f003 0320 	and.w	r3, r3, #32
 8010564:	2b00      	cmp	r3, #0
 8010566:	d03c      	beq.n	80105e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801056c:	2b00      	cmp	r3, #0
 801056e:	d01c      	beq.n	80105aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8010570:	4b73      	ldr	r3, [pc, #460]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 8010572:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010576:	4a72      	ldr	r2, [pc, #456]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 8010578:	f043 0301 	orr.w	r3, r3, #1
 801057c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010580:	f7fa ffb6 	bl	800b4f0 <HAL_GetTick>
 8010584:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8010586:	e008      	b.n	801059a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010588:	f7fa ffb2 	bl	800b4f0 <HAL_GetTick>
 801058c:	4602      	mov	r2, r0
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	1ad3      	subs	r3, r2, r3
 8010592:	2b02      	cmp	r3, #2
 8010594:	d901      	bls.n	801059a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8010596:	2303      	movs	r3, #3
 8010598:	e122      	b.n	80107e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801059a:	4b69      	ldr	r3, [pc, #420]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 801059c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80105a0:	f003 0302 	and.w	r3, r3, #2
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d0ef      	beq.n	8010588 <HAL_RCC_OscConfig+0x5cc>
 80105a8:	e01b      	b.n	80105e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80105aa:	4b65      	ldr	r3, [pc, #404]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 80105ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80105b0:	4a63      	ldr	r2, [pc, #396]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 80105b2:	f023 0301 	bic.w	r3, r3, #1
 80105b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80105ba:	f7fa ff99 	bl	800b4f0 <HAL_GetTick>
 80105be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80105c0:	e008      	b.n	80105d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80105c2:	f7fa ff95 	bl	800b4f0 <HAL_GetTick>
 80105c6:	4602      	mov	r2, r0
 80105c8:	693b      	ldr	r3, [r7, #16]
 80105ca:	1ad3      	subs	r3, r2, r3
 80105cc:	2b02      	cmp	r3, #2
 80105ce:	d901      	bls.n	80105d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80105d0:	2303      	movs	r3, #3
 80105d2:	e105      	b.n	80107e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80105d4:	4b5a      	ldr	r3, [pc, #360]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 80105d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80105da:	f003 0302 	and.w	r3, r3, #2
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d1ef      	bne.n	80105c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	f000 80f9 	beq.w	80107de <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105f0:	2b02      	cmp	r3, #2
 80105f2:	f040 80cf 	bne.w	8010794 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80105f6:	4b52      	ldr	r3, [pc, #328]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 80105f8:	68db      	ldr	r3, [r3, #12]
 80105fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80105fc:	697b      	ldr	r3, [r7, #20]
 80105fe:	f003 0203 	and.w	r2, r3, #3
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010606:	429a      	cmp	r2, r3
 8010608:	d12c      	bne.n	8010664 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801060a:	697b      	ldr	r3, [r7, #20]
 801060c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010614:	3b01      	subs	r3, #1
 8010616:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8010618:	429a      	cmp	r2, r3
 801061a:	d123      	bne.n	8010664 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010626:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8010628:	429a      	cmp	r2, r3
 801062a:	d11b      	bne.n	8010664 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801062c:	697b      	ldr	r3, [r7, #20]
 801062e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010636:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8010638:	429a      	cmp	r2, r3
 801063a:	d113      	bne.n	8010664 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801063c:	697b      	ldr	r3, [r7, #20]
 801063e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010646:	085b      	lsrs	r3, r3, #1
 8010648:	3b01      	subs	r3, #1
 801064a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801064c:	429a      	cmp	r2, r3
 801064e:	d109      	bne.n	8010664 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8010650:	697b      	ldr	r3, [r7, #20]
 8010652:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801065a:	085b      	lsrs	r3, r3, #1
 801065c:	3b01      	subs	r3, #1
 801065e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8010660:	429a      	cmp	r2, r3
 8010662:	d071      	beq.n	8010748 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8010664:	69bb      	ldr	r3, [r7, #24]
 8010666:	2b0c      	cmp	r3, #12
 8010668:	d068      	beq.n	801073c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 801066a:	4b35      	ldr	r3, [pc, #212]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010672:	2b00      	cmp	r3, #0
 8010674:	d105      	bne.n	8010682 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8010676:	4b32      	ldr	r3, [pc, #200]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801067e:	2b00      	cmp	r3, #0
 8010680:	d001      	beq.n	8010686 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8010682:	2301      	movs	r3, #1
 8010684:	e0ac      	b.n	80107e0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8010686:	4b2e      	ldr	r3, [pc, #184]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	4a2d      	ldr	r2, [pc, #180]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 801068c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010690:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8010692:	f7fa ff2d 	bl	800b4f0 <HAL_GetTick>
 8010696:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010698:	e008      	b.n	80106ac <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801069a:	f7fa ff29 	bl	800b4f0 <HAL_GetTick>
 801069e:	4602      	mov	r2, r0
 80106a0:	693b      	ldr	r3, [r7, #16]
 80106a2:	1ad3      	subs	r3, r2, r3
 80106a4:	2b02      	cmp	r3, #2
 80106a6:	d901      	bls.n	80106ac <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80106a8:	2303      	movs	r3, #3
 80106aa:	e099      	b.n	80107e0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80106ac:	4b24      	ldr	r3, [pc, #144]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d1f0      	bne.n	801069a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80106b8:	4b21      	ldr	r3, [pc, #132]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 80106ba:	68da      	ldr	r2, [r3, #12]
 80106bc:	4b21      	ldr	r3, [pc, #132]	; (8010744 <HAL_RCC_OscConfig+0x788>)
 80106be:	4013      	ands	r3, r2
 80106c0:	687a      	ldr	r2, [r7, #4]
 80106c2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80106c4:	687a      	ldr	r2, [r7, #4]
 80106c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80106c8:	3a01      	subs	r2, #1
 80106ca:	0112      	lsls	r2, r2, #4
 80106cc:	4311      	orrs	r1, r2
 80106ce:	687a      	ldr	r2, [r7, #4]
 80106d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80106d2:	0212      	lsls	r2, r2, #8
 80106d4:	4311      	orrs	r1, r2
 80106d6:	687a      	ldr	r2, [r7, #4]
 80106d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80106da:	0852      	lsrs	r2, r2, #1
 80106dc:	3a01      	subs	r2, #1
 80106de:	0552      	lsls	r2, r2, #21
 80106e0:	4311      	orrs	r1, r2
 80106e2:	687a      	ldr	r2, [r7, #4]
 80106e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80106e6:	0852      	lsrs	r2, r2, #1
 80106e8:	3a01      	subs	r2, #1
 80106ea:	0652      	lsls	r2, r2, #25
 80106ec:	4311      	orrs	r1, r2
 80106ee:	687a      	ldr	r2, [r7, #4]
 80106f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80106f2:	06d2      	lsls	r2, r2, #27
 80106f4:	430a      	orrs	r2, r1
 80106f6:	4912      	ldr	r1, [pc, #72]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 80106f8:	4313      	orrs	r3, r2
 80106fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80106fc:	4b10      	ldr	r3, [pc, #64]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	4a0f      	ldr	r2, [pc, #60]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 8010702:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010706:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8010708:	4b0d      	ldr	r3, [pc, #52]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 801070a:	68db      	ldr	r3, [r3, #12]
 801070c:	4a0c      	ldr	r2, [pc, #48]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 801070e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010712:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8010714:	f7fa feec 	bl	800b4f0 <HAL_GetTick>
 8010718:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801071a:	e008      	b.n	801072e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801071c:	f7fa fee8 	bl	800b4f0 <HAL_GetTick>
 8010720:	4602      	mov	r2, r0
 8010722:	693b      	ldr	r3, [r7, #16]
 8010724:	1ad3      	subs	r3, r2, r3
 8010726:	2b02      	cmp	r3, #2
 8010728:	d901      	bls.n	801072e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 801072a:	2303      	movs	r3, #3
 801072c:	e058      	b.n	80107e0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801072e:	4b04      	ldr	r3, [pc, #16]	; (8010740 <HAL_RCC_OscConfig+0x784>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010736:	2b00      	cmp	r3, #0
 8010738:	d0f0      	beq.n	801071c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 801073a:	e050      	b.n	80107de <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 801073c:	2301      	movs	r3, #1
 801073e:	e04f      	b.n	80107e0 <HAL_RCC_OscConfig+0x824>
 8010740:	40021000 	.word	0x40021000
 8010744:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010748:	4b27      	ldr	r3, [pc, #156]	; (80107e8 <HAL_RCC_OscConfig+0x82c>)
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010750:	2b00      	cmp	r3, #0
 8010752:	d144      	bne.n	80107de <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8010754:	4b24      	ldr	r3, [pc, #144]	; (80107e8 <HAL_RCC_OscConfig+0x82c>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	4a23      	ldr	r2, [pc, #140]	; (80107e8 <HAL_RCC_OscConfig+0x82c>)
 801075a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801075e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8010760:	4b21      	ldr	r3, [pc, #132]	; (80107e8 <HAL_RCC_OscConfig+0x82c>)
 8010762:	68db      	ldr	r3, [r3, #12]
 8010764:	4a20      	ldr	r2, [pc, #128]	; (80107e8 <HAL_RCC_OscConfig+0x82c>)
 8010766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801076a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801076c:	f7fa fec0 	bl	800b4f0 <HAL_GetTick>
 8010770:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010772:	e008      	b.n	8010786 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010774:	f7fa febc 	bl	800b4f0 <HAL_GetTick>
 8010778:	4602      	mov	r2, r0
 801077a:	693b      	ldr	r3, [r7, #16]
 801077c:	1ad3      	subs	r3, r2, r3
 801077e:	2b02      	cmp	r3, #2
 8010780:	d901      	bls.n	8010786 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8010782:	2303      	movs	r3, #3
 8010784:	e02c      	b.n	80107e0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010786:	4b18      	ldr	r3, [pc, #96]	; (80107e8 <HAL_RCC_OscConfig+0x82c>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801078e:	2b00      	cmp	r3, #0
 8010790:	d0f0      	beq.n	8010774 <HAL_RCC_OscConfig+0x7b8>
 8010792:	e024      	b.n	80107de <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8010794:	69bb      	ldr	r3, [r7, #24]
 8010796:	2b0c      	cmp	r3, #12
 8010798:	d01f      	beq.n	80107da <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801079a:	4b13      	ldr	r3, [pc, #76]	; (80107e8 <HAL_RCC_OscConfig+0x82c>)
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	4a12      	ldr	r2, [pc, #72]	; (80107e8 <HAL_RCC_OscConfig+0x82c>)
 80107a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80107a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80107a6:	f7fa fea3 	bl	800b4f0 <HAL_GetTick>
 80107aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80107ac:	e008      	b.n	80107c0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80107ae:	f7fa fe9f 	bl	800b4f0 <HAL_GetTick>
 80107b2:	4602      	mov	r2, r0
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	1ad3      	subs	r3, r2, r3
 80107b8:	2b02      	cmp	r3, #2
 80107ba:	d901      	bls.n	80107c0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80107bc:	2303      	movs	r3, #3
 80107be:	e00f      	b.n	80107e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80107c0:	4b09      	ldr	r3, [pc, #36]	; (80107e8 <HAL_RCC_OscConfig+0x82c>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d1f0      	bne.n	80107ae <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80107cc:	4b06      	ldr	r3, [pc, #24]	; (80107e8 <HAL_RCC_OscConfig+0x82c>)
 80107ce:	68da      	ldr	r2, [r3, #12]
 80107d0:	4905      	ldr	r1, [pc, #20]	; (80107e8 <HAL_RCC_OscConfig+0x82c>)
 80107d2:	4b06      	ldr	r3, [pc, #24]	; (80107ec <HAL_RCC_OscConfig+0x830>)
 80107d4:	4013      	ands	r3, r2
 80107d6:	60cb      	str	r3, [r1, #12]
 80107d8:	e001      	b.n	80107de <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80107da:	2301      	movs	r3, #1
 80107dc:	e000      	b.n	80107e0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80107de:	2300      	movs	r3, #0
}
 80107e0:	4618      	mov	r0, r3
 80107e2:	3720      	adds	r7, #32
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bd80      	pop	{r7, pc}
 80107e8:	40021000 	.word	0x40021000
 80107ec:	feeefffc 	.word	0xfeeefffc

080107f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b084      	sub	sp, #16
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d101      	bne.n	8010804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010800:	2301      	movs	r3, #1
 8010802:	e0e7      	b.n	80109d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010804:	4b75      	ldr	r3, [pc, #468]	; (80109dc <HAL_RCC_ClockConfig+0x1ec>)
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	f003 0307 	and.w	r3, r3, #7
 801080c:	683a      	ldr	r2, [r7, #0]
 801080e:	429a      	cmp	r2, r3
 8010810:	d910      	bls.n	8010834 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010812:	4b72      	ldr	r3, [pc, #456]	; (80109dc <HAL_RCC_ClockConfig+0x1ec>)
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	f023 0207 	bic.w	r2, r3, #7
 801081a:	4970      	ldr	r1, [pc, #448]	; (80109dc <HAL_RCC_ClockConfig+0x1ec>)
 801081c:	683b      	ldr	r3, [r7, #0]
 801081e:	4313      	orrs	r3, r2
 8010820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010822:	4b6e      	ldr	r3, [pc, #440]	; (80109dc <HAL_RCC_ClockConfig+0x1ec>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	f003 0307 	and.w	r3, r3, #7
 801082a:	683a      	ldr	r2, [r7, #0]
 801082c:	429a      	cmp	r2, r3
 801082e:	d001      	beq.n	8010834 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8010830:	2301      	movs	r3, #1
 8010832:	e0cf      	b.n	80109d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	f003 0302 	and.w	r3, r3, #2
 801083c:	2b00      	cmp	r3, #0
 801083e:	d010      	beq.n	8010862 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	689a      	ldr	r2, [r3, #8]
 8010844:	4b66      	ldr	r3, [pc, #408]	; (80109e0 <HAL_RCC_ClockConfig+0x1f0>)
 8010846:	689b      	ldr	r3, [r3, #8]
 8010848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801084c:	429a      	cmp	r2, r3
 801084e:	d908      	bls.n	8010862 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010850:	4b63      	ldr	r3, [pc, #396]	; (80109e0 <HAL_RCC_ClockConfig+0x1f0>)
 8010852:	689b      	ldr	r3, [r3, #8]
 8010854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	689b      	ldr	r3, [r3, #8]
 801085c:	4960      	ldr	r1, [pc, #384]	; (80109e0 <HAL_RCC_ClockConfig+0x1f0>)
 801085e:	4313      	orrs	r3, r2
 8010860:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	f003 0301 	and.w	r3, r3, #1
 801086a:	2b00      	cmp	r3, #0
 801086c:	d04c      	beq.n	8010908 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	685b      	ldr	r3, [r3, #4]
 8010872:	2b03      	cmp	r3, #3
 8010874:	d107      	bne.n	8010886 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010876:	4b5a      	ldr	r3, [pc, #360]	; (80109e0 <HAL_RCC_ClockConfig+0x1f0>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801087e:	2b00      	cmp	r3, #0
 8010880:	d121      	bne.n	80108c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8010882:	2301      	movs	r3, #1
 8010884:	e0a6      	b.n	80109d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	685b      	ldr	r3, [r3, #4]
 801088a:	2b02      	cmp	r3, #2
 801088c:	d107      	bne.n	801089e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801088e:	4b54      	ldr	r3, [pc, #336]	; (80109e0 <HAL_RCC_ClockConfig+0x1f0>)
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010896:	2b00      	cmp	r3, #0
 8010898:	d115      	bne.n	80108c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 801089a:	2301      	movs	r3, #1
 801089c:	e09a      	b.n	80109d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	685b      	ldr	r3, [r3, #4]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d107      	bne.n	80108b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80108a6:	4b4e      	ldr	r3, [pc, #312]	; (80109e0 <HAL_RCC_ClockConfig+0x1f0>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	f003 0302 	and.w	r3, r3, #2
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d109      	bne.n	80108c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80108b2:	2301      	movs	r3, #1
 80108b4:	e08e      	b.n	80109d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80108b6:	4b4a      	ldr	r3, [pc, #296]	; (80109e0 <HAL_RCC_ClockConfig+0x1f0>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d101      	bne.n	80108c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80108c2:	2301      	movs	r3, #1
 80108c4:	e086      	b.n	80109d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80108c6:	4b46      	ldr	r3, [pc, #280]	; (80109e0 <HAL_RCC_ClockConfig+0x1f0>)
 80108c8:	689b      	ldr	r3, [r3, #8]
 80108ca:	f023 0203 	bic.w	r2, r3, #3
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	685b      	ldr	r3, [r3, #4]
 80108d2:	4943      	ldr	r1, [pc, #268]	; (80109e0 <HAL_RCC_ClockConfig+0x1f0>)
 80108d4:	4313      	orrs	r3, r2
 80108d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80108d8:	f7fa fe0a 	bl	800b4f0 <HAL_GetTick>
 80108dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80108de:	e00a      	b.n	80108f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80108e0:	f7fa fe06 	bl	800b4f0 <HAL_GetTick>
 80108e4:	4602      	mov	r2, r0
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	1ad3      	subs	r3, r2, r3
 80108ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80108ee:	4293      	cmp	r3, r2
 80108f0:	d901      	bls.n	80108f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80108f2:	2303      	movs	r3, #3
 80108f4:	e06e      	b.n	80109d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80108f6:	4b3a      	ldr	r3, [pc, #232]	; (80109e0 <HAL_RCC_ClockConfig+0x1f0>)
 80108f8:	689b      	ldr	r3, [r3, #8]
 80108fa:	f003 020c 	and.w	r2, r3, #12
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	685b      	ldr	r3, [r3, #4]
 8010902:	009b      	lsls	r3, r3, #2
 8010904:	429a      	cmp	r2, r3
 8010906:	d1eb      	bne.n	80108e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	f003 0302 	and.w	r3, r3, #2
 8010910:	2b00      	cmp	r3, #0
 8010912:	d010      	beq.n	8010936 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	689a      	ldr	r2, [r3, #8]
 8010918:	4b31      	ldr	r3, [pc, #196]	; (80109e0 <HAL_RCC_ClockConfig+0x1f0>)
 801091a:	689b      	ldr	r3, [r3, #8]
 801091c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010920:	429a      	cmp	r2, r3
 8010922:	d208      	bcs.n	8010936 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010924:	4b2e      	ldr	r3, [pc, #184]	; (80109e0 <HAL_RCC_ClockConfig+0x1f0>)
 8010926:	689b      	ldr	r3, [r3, #8]
 8010928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	689b      	ldr	r3, [r3, #8]
 8010930:	492b      	ldr	r1, [pc, #172]	; (80109e0 <HAL_RCC_ClockConfig+0x1f0>)
 8010932:	4313      	orrs	r3, r2
 8010934:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010936:	4b29      	ldr	r3, [pc, #164]	; (80109dc <HAL_RCC_ClockConfig+0x1ec>)
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	f003 0307 	and.w	r3, r3, #7
 801093e:	683a      	ldr	r2, [r7, #0]
 8010940:	429a      	cmp	r2, r3
 8010942:	d210      	bcs.n	8010966 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010944:	4b25      	ldr	r3, [pc, #148]	; (80109dc <HAL_RCC_ClockConfig+0x1ec>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	f023 0207 	bic.w	r2, r3, #7
 801094c:	4923      	ldr	r1, [pc, #140]	; (80109dc <HAL_RCC_ClockConfig+0x1ec>)
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	4313      	orrs	r3, r2
 8010952:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010954:	4b21      	ldr	r3, [pc, #132]	; (80109dc <HAL_RCC_ClockConfig+0x1ec>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	f003 0307 	and.w	r3, r3, #7
 801095c:	683a      	ldr	r2, [r7, #0]
 801095e:	429a      	cmp	r2, r3
 8010960:	d001      	beq.n	8010966 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8010962:	2301      	movs	r3, #1
 8010964:	e036      	b.n	80109d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	f003 0304 	and.w	r3, r3, #4
 801096e:	2b00      	cmp	r3, #0
 8010970:	d008      	beq.n	8010984 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010972:	4b1b      	ldr	r3, [pc, #108]	; (80109e0 <HAL_RCC_ClockConfig+0x1f0>)
 8010974:	689b      	ldr	r3, [r3, #8]
 8010976:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	68db      	ldr	r3, [r3, #12]
 801097e:	4918      	ldr	r1, [pc, #96]	; (80109e0 <HAL_RCC_ClockConfig+0x1f0>)
 8010980:	4313      	orrs	r3, r2
 8010982:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	f003 0308 	and.w	r3, r3, #8
 801098c:	2b00      	cmp	r3, #0
 801098e:	d009      	beq.n	80109a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8010990:	4b13      	ldr	r3, [pc, #76]	; (80109e0 <HAL_RCC_ClockConfig+0x1f0>)
 8010992:	689b      	ldr	r3, [r3, #8]
 8010994:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	691b      	ldr	r3, [r3, #16]
 801099c:	00db      	lsls	r3, r3, #3
 801099e:	4910      	ldr	r1, [pc, #64]	; (80109e0 <HAL_RCC_ClockConfig+0x1f0>)
 80109a0:	4313      	orrs	r3, r2
 80109a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80109a4:	f000 f824 	bl	80109f0 <HAL_RCC_GetSysClockFreq>
 80109a8:	4602      	mov	r2, r0
 80109aa:	4b0d      	ldr	r3, [pc, #52]	; (80109e0 <HAL_RCC_ClockConfig+0x1f0>)
 80109ac:	689b      	ldr	r3, [r3, #8]
 80109ae:	091b      	lsrs	r3, r3, #4
 80109b0:	f003 030f 	and.w	r3, r3, #15
 80109b4:	490b      	ldr	r1, [pc, #44]	; (80109e4 <HAL_RCC_ClockConfig+0x1f4>)
 80109b6:	5ccb      	ldrb	r3, [r1, r3]
 80109b8:	f003 031f 	and.w	r3, r3, #31
 80109bc:	fa22 f303 	lsr.w	r3, r2, r3
 80109c0:	4a09      	ldr	r2, [pc, #36]	; (80109e8 <HAL_RCC_ClockConfig+0x1f8>)
 80109c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80109c4:	4b09      	ldr	r3, [pc, #36]	; (80109ec <HAL_RCC_ClockConfig+0x1fc>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	4618      	mov	r0, r3
 80109ca:	f7fa fd41 	bl	800b450 <HAL_InitTick>
 80109ce:	4603      	mov	r3, r0
 80109d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80109d2:	7afb      	ldrb	r3, [r7, #11]
}
 80109d4:	4618      	mov	r0, r3
 80109d6:	3710      	adds	r7, #16
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}
 80109dc:	40022000 	.word	0x40022000
 80109e0:	40021000 	.word	0x40021000
 80109e4:	0801ab88 	.word	0x0801ab88
 80109e8:	20000194 	.word	0x20000194
 80109ec:	20000550 	.word	0x20000550

080109f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80109f0:	b480      	push	{r7}
 80109f2:	b089      	sub	sp, #36	; 0x24
 80109f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80109f6:	2300      	movs	r3, #0
 80109f8:	61fb      	str	r3, [r7, #28]
 80109fa:	2300      	movs	r3, #0
 80109fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80109fe:	4b3e      	ldr	r3, [pc, #248]	; (8010af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8010a00:	689b      	ldr	r3, [r3, #8]
 8010a02:	f003 030c 	and.w	r3, r3, #12
 8010a06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010a08:	4b3b      	ldr	r3, [pc, #236]	; (8010af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8010a0a:	68db      	ldr	r3, [r3, #12]
 8010a0c:	f003 0303 	and.w	r3, r3, #3
 8010a10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8010a12:	693b      	ldr	r3, [r7, #16]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d005      	beq.n	8010a24 <HAL_RCC_GetSysClockFreq+0x34>
 8010a18:	693b      	ldr	r3, [r7, #16]
 8010a1a:	2b0c      	cmp	r3, #12
 8010a1c:	d121      	bne.n	8010a62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	2b01      	cmp	r3, #1
 8010a22:	d11e      	bne.n	8010a62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8010a24:	4b34      	ldr	r3, [pc, #208]	; (8010af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	f003 0308 	and.w	r3, r3, #8
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d107      	bne.n	8010a40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8010a30:	4b31      	ldr	r3, [pc, #196]	; (8010af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8010a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010a36:	0a1b      	lsrs	r3, r3, #8
 8010a38:	f003 030f 	and.w	r3, r3, #15
 8010a3c:	61fb      	str	r3, [r7, #28]
 8010a3e:	e005      	b.n	8010a4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8010a40:	4b2d      	ldr	r3, [pc, #180]	; (8010af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	091b      	lsrs	r3, r3, #4
 8010a46:	f003 030f 	and.w	r3, r3, #15
 8010a4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8010a4c:	4a2b      	ldr	r2, [pc, #172]	; (8010afc <HAL_RCC_GetSysClockFreq+0x10c>)
 8010a4e:	69fb      	ldr	r3, [r7, #28]
 8010a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8010a56:	693b      	ldr	r3, [r7, #16]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d10d      	bne.n	8010a78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8010a5c:	69fb      	ldr	r3, [r7, #28]
 8010a5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8010a60:	e00a      	b.n	8010a78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8010a62:	693b      	ldr	r3, [r7, #16]
 8010a64:	2b04      	cmp	r3, #4
 8010a66:	d102      	bne.n	8010a6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8010a68:	4b25      	ldr	r3, [pc, #148]	; (8010b00 <HAL_RCC_GetSysClockFreq+0x110>)
 8010a6a:	61bb      	str	r3, [r7, #24]
 8010a6c:	e004      	b.n	8010a78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8010a6e:	693b      	ldr	r3, [r7, #16]
 8010a70:	2b08      	cmp	r3, #8
 8010a72:	d101      	bne.n	8010a78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8010a74:	4b23      	ldr	r3, [pc, #140]	; (8010b04 <HAL_RCC_GetSysClockFreq+0x114>)
 8010a76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8010a78:	693b      	ldr	r3, [r7, #16]
 8010a7a:	2b0c      	cmp	r3, #12
 8010a7c:	d134      	bne.n	8010ae8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8010a7e:	4b1e      	ldr	r3, [pc, #120]	; (8010af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8010a80:	68db      	ldr	r3, [r3, #12]
 8010a82:	f003 0303 	and.w	r3, r3, #3
 8010a86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	2b02      	cmp	r3, #2
 8010a8c:	d003      	beq.n	8010a96 <HAL_RCC_GetSysClockFreq+0xa6>
 8010a8e:	68bb      	ldr	r3, [r7, #8]
 8010a90:	2b03      	cmp	r3, #3
 8010a92:	d003      	beq.n	8010a9c <HAL_RCC_GetSysClockFreq+0xac>
 8010a94:	e005      	b.n	8010aa2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8010a96:	4b1a      	ldr	r3, [pc, #104]	; (8010b00 <HAL_RCC_GetSysClockFreq+0x110>)
 8010a98:	617b      	str	r3, [r7, #20]
      break;
 8010a9a:	e005      	b.n	8010aa8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8010a9c:	4b19      	ldr	r3, [pc, #100]	; (8010b04 <HAL_RCC_GetSysClockFreq+0x114>)
 8010a9e:	617b      	str	r3, [r7, #20]
      break;
 8010aa0:	e002      	b.n	8010aa8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8010aa2:	69fb      	ldr	r3, [r7, #28]
 8010aa4:	617b      	str	r3, [r7, #20]
      break;
 8010aa6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8010aa8:	4b13      	ldr	r3, [pc, #76]	; (8010af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8010aaa:	68db      	ldr	r3, [r3, #12]
 8010aac:	091b      	lsrs	r3, r3, #4
 8010aae:	f003 0307 	and.w	r3, r3, #7
 8010ab2:	3301      	adds	r3, #1
 8010ab4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8010ab6:	4b10      	ldr	r3, [pc, #64]	; (8010af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8010ab8:	68db      	ldr	r3, [r3, #12]
 8010aba:	0a1b      	lsrs	r3, r3, #8
 8010abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ac0:	697a      	ldr	r2, [r7, #20]
 8010ac2:	fb03 f202 	mul.w	r2, r3, r2
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8010acc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8010ace:	4b0a      	ldr	r3, [pc, #40]	; (8010af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8010ad0:	68db      	ldr	r3, [r3, #12]
 8010ad2:	0e5b      	lsrs	r3, r3, #25
 8010ad4:	f003 0303 	and.w	r3, r3, #3
 8010ad8:	3301      	adds	r3, #1
 8010ada:	005b      	lsls	r3, r3, #1
 8010adc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8010ade:	697a      	ldr	r2, [r7, #20]
 8010ae0:	683b      	ldr	r3, [r7, #0]
 8010ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ae6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8010ae8:	69bb      	ldr	r3, [r7, #24]
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3724      	adds	r7, #36	; 0x24
 8010aee:	46bd      	mov	sp, r7
 8010af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af4:	4770      	bx	lr
 8010af6:	bf00      	nop
 8010af8:	40021000 	.word	0x40021000
 8010afc:	0801aba0 	.word	0x0801aba0
 8010b00:	00f42400 	.word	0x00f42400
 8010b04:	007a1200 	.word	0x007a1200

08010b08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010b08:	b480      	push	{r7}
 8010b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010b0c:	4b03      	ldr	r3, [pc, #12]	; (8010b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8010b0e:	681b      	ldr	r3, [r3, #0]
}
 8010b10:	4618      	mov	r0, r3
 8010b12:	46bd      	mov	sp, r7
 8010b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b18:	4770      	bx	lr
 8010b1a:	bf00      	nop
 8010b1c:	20000194 	.word	0x20000194

08010b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8010b24:	f7ff fff0 	bl	8010b08 <HAL_RCC_GetHCLKFreq>
 8010b28:	4602      	mov	r2, r0
 8010b2a:	4b06      	ldr	r3, [pc, #24]	; (8010b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010b2c:	689b      	ldr	r3, [r3, #8]
 8010b2e:	0a1b      	lsrs	r3, r3, #8
 8010b30:	f003 0307 	and.w	r3, r3, #7
 8010b34:	4904      	ldr	r1, [pc, #16]	; (8010b48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8010b36:	5ccb      	ldrb	r3, [r1, r3]
 8010b38:	f003 031f 	and.w	r3, r3, #31
 8010b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010b40:	4618      	mov	r0, r3
 8010b42:	bd80      	pop	{r7, pc}
 8010b44:	40021000 	.word	0x40021000
 8010b48:	0801ab98 	.word	0x0801ab98

08010b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8010b50:	f7ff ffda 	bl	8010b08 <HAL_RCC_GetHCLKFreq>
 8010b54:	4602      	mov	r2, r0
 8010b56:	4b06      	ldr	r3, [pc, #24]	; (8010b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010b58:	689b      	ldr	r3, [r3, #8]
 8010b5a:	0adb      	lsrs	r3, r3, #11
 8010b5c:	f003 0307 	and.w	r3, r3, #7
 8010b60:	4904      	ldr	r1, [pc, #16]	; (8010b74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8010b62:	5ccb      	ldrb	r3, [r1, r3]
 8010b64:	f003 031f 	and.w	r3, r3, #31
 8010b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	bd80      	pop	{r7, pc}
 8010b70:	40021000 	.word	0x40021000
 8010b74:	0801ab98 	.word	0x0801ab98

08010b78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b086      	sub	sp, #24
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8010b80:	2300      	movs	r3, #0
 8010b82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8010b84:	4b2a      	ldr	r3, [pc, #168]	; (8010c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d003      	beq.n	8010b98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8010b90:	f7ff f886 	bl	800fca0 <HAL_PWREx_GetVoltageRange>
 8010b94:	6178      	str	r0, [r7, #20]
 8010b96:	e014      	b.n	8010bc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8010b98:	4b25      	ldr	r3, [pc, #148]	; (8010c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b9c:	4a24      	ldr	r2, [pc, #144]	; (8010c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010ba2:	6593      	str	r3, [r2, #88]	; 0x58
 8010ba4:	4b22      	ldr	r3, [pc, #136]	; (8010c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010bac:	60fb      	str	r3, [r7, #12]
 8010bae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8010bb0:	f7ff f876 	bl	800fca0 <HAL_PWREx_GetVoltageRange>
 8010bb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8010bb6:	4b1e      	ldr	r3, [pc, #120]	; (8010c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010bba:	4a1d      	ldr	r2, [pc, #116]	; (8010c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010bc0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8010bc2:	697b      	ldr	r3, [r7, #20]
 8010bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010bc8:	d10b      	bne.n	8010be2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	2b80      	cmp	r3, #128	; 0x80
 8010bce:	d919      	bls.n	8010c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2ba0      	cmp	r3, #160	; 0xa0
 8010bd4:	d902      	bls.n	8010bdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8010bd6:	2302      	movs	r3, #2
 8010bd8:	613b      	str	r3, [r7, #16]
 8010bda:	e013      	b.n	8010c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8010bdc:	2301      	movs	r3, #1
 8010bde:	613b      	str	r3, [r7, #16]
 8010be0:	e010      	b.n	8010c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2b80      	cmp	r3, #128	; 0x80
 8010be6:	d902      	bls.n	8010bee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8010be8:	2303      	movs	r3, #3
 8010bea:	613b      	str	r3, [r7, #16]
 8010bec:	e00a      	b.n	8010c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	2b80      	cmp	r3, #128	; 0x80
 8010bf2:	d102      	bne.n	8010bfa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8010bf4:	2302      	movs	r3, #2
 8010bf6:	613b      	str	r3, [r7, #16]
 8010bf8:	e004      	b.n	8010c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	2b70      	cmp	r3, #112	; 0x70
 8010bfe:	d101      	bne.n	8010c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8010c00:	2301      	movs	r3, #1
 8010c02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8010c04:	4b0b      	ldr	r3, [pc, #44]	; (8010c34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	f023 0207 	bic.w	r2, r3, #7
 8010c0c:	4909      	ldr	r1, [pc, #36]	; (8010c34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010c0e:	693b      	ldr	r3, [r7, #16]
 8010c10:	4313      	orrs	r3, r2
 8010c12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8010c14:	4b07      	ldr	r3, [pc, #28]	; (8010c34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	f003 0307 	and.w	r3, r3, #7
 8010c1c:	693a      	ldr	r2, [r7, #16]
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	d001      	beq.n	8010c26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8010c22:	2301      	movs	r3, #1
 8010c24:	e000      	b.n	8010c28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8010c26:	2300      	movs	r3, #0
}
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3718      	adds	r7, #24
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}
 8010c30:	40021000 	.word	0x40021000
 8010c34:	40022000 	.word	0x40022000

08010c38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b086      	sub	sp, #24
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8010c40:	2300      	movs	r3, #0
 8010c42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8010c44:	2300      	movs	r3, #0
 8010c46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d041      	beq.n	8010cd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8010c5c:	d02a      	beq.n	8010cb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8010c5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8010c62:	d824      	bhi.n	8010cae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8010c64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010c68:	d008      	beq.n	8010c7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8010c6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010c6e:	d81e      	bhi.n	8010cae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d00a      	beq.n	8010c8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8010c74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010c78:	d010      	beq.n	8010c9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8010c7a:	e018      	b.n	8010cae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8010c7c:	4b86      	ldr	r3, [pc, #536]	; (8010e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010c7e:	68db      	ldr	r3, [r3, #12]
 8010c80:	4a85      	ldr	r2, [pc, #532]	; (8010e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010c86:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8010c88:	e015      	b.n	8010cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	3304      	adds	r3, #4
 8010c8e:	2100      	movs	r1, #0
 8010c90:	4618      	mov	r0, r3
 8010c92:	f001 f895 	bl	8011dc0 <RCCEx_PLLSAI1_Config>
 8010c96:	4603      	mov	r3, r0
 8010c98:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8010c9a:	e00c      	b.n	8010cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	3320      	adds	r3, #32
 8010ca0:	2100      	movs	r1, #0
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	f001 f97e 	bl	8011fa4 <RCCEx_PLLSAI2_Config>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8010cac:	e003      	b.n	8010cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010cae:	2301      	movs	r3, #1
 8010cb0:	74fb      	strb	r3, [r7, #19]
      break;
 8010cb2:	e000      	b.n	8010cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8010cb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010cb6:	7cfb      	ldrb	r3, [r7, #19]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d10b      	bne.n	8010cd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010cbc:	4b76      	ldr	r3, [pc, #472]	; (8010e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010cc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010cca:	4973      	ldr	r1, [pc, #460]	; (8010e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010ccc:	4313      	orrs	r3, r2
 8010cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8010cd2:	e001      	b.n	8010cd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010cd4:	7cfb      	ldrb	r3, [r7, #19]
 8010cd6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d041      	beq.n	8010d68 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ce8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010cec:	d02a      	beq.n	8010d44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8010cee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010cf2:	d824      	bhi.n	8010d3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8010cf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010cf8:	d008      	beq.n	8010d0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8010cfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010cfe:	d81e      	bhi.n	8010d3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d00a      	beq.n	8010d1a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8010d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010d08:	d010      	beq.n	8010d2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8010d0a:	e018      	b.n	8010d3e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8010d0c:	4b62      	ldr	r3, [pc, #392]	; (8010e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010d0e:	68db      	ldr	r3, [r3, #12]
 8010d10:	4a61      	ldr	r2, [pc, #388]	; (8010e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010d16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8010d18:	e015      	b.n	8010d46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	3304      	adds	r3, #4
 8010d1e:	2100      	movs	r1, #0
 8010d20:	4618      	mov	r0, r3
 8010d22:	f001 f84d 	bl	8011dc0 <RCCEx_PLLSAI1_Config>
 8010d26:	4603      	mov	r3, r0
 8010d28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8010d2a:	e00c      	b.n	8010d46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	3320      	adds	r3, #32
 8010d30:	2100      	movs	r1, #0
 8010d32:	4618      	mov	r0, r3
 8010d34:	f001 f936 	bl	8011fa4 <RCCEx_PLLSAI2_Config>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8010d3c:	e003      	b.n	8010d46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010d3e:	2301      	movs	r3, #1
 8010d40:	74fb      	strb	r3, [r7, #19]
      break;
 8010d42:	e000      	b.n	8010d46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8010d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010d46:	7cfb      	ldrb	r3, [r7, #19]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d10b      	bne.n	8010d64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8010d4c:	4b52      	ldr	r3, [pc, #328]	; (8010e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010d52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d5a:	494f      	ldr	r1, [pc, #316]	; (8010e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010d5c:	4313      	orrs	r3, r2
 8010d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8010d62:	e001      	b.n	8010d68 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010d64:	7cfb      	ldrb	r3, [r7, #19]
 8010d66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	f000 80a0 	beq.w	8010eb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010d76:	2300      	movs	r3, #0
 8010d78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8010d7a:	4b47      	ldr	r3, [pc, #284]	; (8010e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d101      	bne.n	8010d8a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8010d86:	2301      	movs	r3, #1
 8010d88:	e000      	b.n	8010d8c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d00d      	beq.n	8010dac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010d90:	4b41      	ldr	r3, [pc, #260]	; (8010e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d94:	4a40      	ldr	r2, [pc, #256]	; (8010e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010d9a:	6593      	str	r3, [r2, #88]	; 0x58
 8010d9c:	4b3e      	ldr	r3, [pc, #248]	; (8010e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010da4:	60bb      	str	r3, [r7, #8]
 8010da6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010da8:	2301      	movs	r3, #1
 8010daa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010dac:	4b3b      	ldr	r3, [pc, #236]	; (8010e9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	4a3a      	ldr	r2, [pc, #232]	; (8010e9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8010db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010db6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010db8:	f7fa fb9a 	bl	800b4f0 <HAL_GetTick>
 8010dbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8010dbe:	e009      	b.n	8010dd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010dc0:	f7fa fb96 	bl	800b4f0 <HAL_GetTick>
 8010dc4:	4602      	mov	r2, r0
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	1ad3      	subs	r3, r2, r3
 8010dca:	2b02      	cmp	r3, #2
 8010dcc:	d902      	bls.n	8010dd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8010dce:	2303      	movs	r3, #3
 8010dd0:	74fb      	strb	r3, [r7, #19]
        break;
 8010dd2:	e005      	b.n	8010de0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8010dd4:	4b31      	ldr	r3, [pc, #196]	; (8010e9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d0ef      	beq.n	8010dc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8010de0:	7cfb      	ldrb	r3, [r7, #19]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d15c      	bne.n	8010ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8010de6:	4b2c      	ldr	r3, [pc, #176]	; (8010e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010df0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8010df2:	697b      	ldr	r3, [r7, #20]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d01f      	beq.n	8010e38 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010dfe:	697a      	ldr	r2, [r7, #20]
 8010e00:	429a      	cmp	r2, r3
 8010e02:	d019      	beq.n	8010e38 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8010e04:	4b24      	ldr	r3, [pc, #144]	; (8010e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010e0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8010e10:	4b21      	ldr	r3, [pc, #132]	; (8010e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e16:	4a20      	ldr	r2, [pc, #128]	; (8010e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010e20:	4b1d      	ldr	r3, [pc, #116]	; (8010e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e26:	4a1c      	ldr	r2, [pc, #112]	; (8010e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8010e30:	4a19      	ldr	r2, [pc, #100]	; (8010e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	f003 0301 	and.w	r3, r3, #1
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d016      	beq.n	8010e70 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010e42:	f7fa fb55 	bl	800b4f0 <HAL_GetTick>
 8010e46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010e48:	e00b      	b.n	8010e62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010e4a:	f7fa fb51 	bl	800b4f0 <HAL_GetTick>
 8010e4e:	4602      	mov	r2, r0
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	1ad3      	subs	r3, r2, r3
 8010e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e58:	4293      	cmp	r3, r2
 8010e5a:	d902      	bls.n	8010e62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8010e5c:	2303      	movs	r3, #3
 8010e5e:	74fb      	strb	r3, [r7, #19]
            break;
 8010e60:	e006      	b.n	8010e70 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010e62:	4b0d      	ldr	r3, [pc, #52]	; (8010e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e68:	f003 0302 	and.w	r3, r3, #2
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d0ec      	beq.n	8010e4a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8010e70:	7cfb      	ldrb	r3, [r7, #19]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d10c      	bne.n	8010e90 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010e76:	4b08      	ldr	r3, [pc, #32]	; (8010e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e86:	4904      	ldr	r1, [pc, #16]	; (8010e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010e88:	4313      	orrs	r3, r2
 8010e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8010e8e:	e009      	b.n	8010ea4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8010e90:	7cfb      	ldrb	r3, [r7, #19]
 8010e92:	74bb      	strb	r3, [r7, #18]
 8010e94:	e006      	b.n	8010ea4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8010e96:	bf00      	nop
 8010e98:	40021000 	.word	0x40021000
 8010e9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010ea0:	7cfb      	ldrb	r3, [r7, #19]
 8010ea2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8010ea4:	7c7b      	ldrb	r3, [r7, #17]
 8010ea6:	2b01      	cmp	r3, #1
 8010ea8:	d105      	bne.n	8010eb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010eaa:	4ba6      	ldr	r3, [pc, #664]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010eae:	4aa5      	ldr	r2, [pc, #660]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010eb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	f003 0301 	and.w	r3, r3, #1
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d00a      	beq.n	8010ed8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8010ec2:	4ba0      	ldr	r3, [pc, #640]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ec8:	f023 0203 	bic.w	r2, r3, #3
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ed0:	499c      	ldr	r1, [pc, #624]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010ed2:	4313      	orrs	r3, r2
 8010ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	f003 0302 	and.w	r3, r3, #2
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d00a      	beq.n	8010efa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010ee4:	4b97      	ldr	r3, [pc, #604]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010eea:	f023 020c 	bic.w	r2, r3, #12
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ef2:	4994      	ldr	r1, [pc, #592]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010ef4:	4313      	orrs	r3, r2
 8010ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	f003 0304 	and.w	r3, r3, #4
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d00a      	beq.n	8010f1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8010f06:	4b8f      	ldr	r3, [pc, #572]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f14:	498b      	ldr	r1, [pc, #556]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010f16:	4313      	orrs	r3, r2
 8010f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	f003 0308 	and.w	r3, r3, #8
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d00a      	beq.n	8010f3e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8010f28:	4b86      	ldr	r3, [pc, #536]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f36:	4983      	ldr	r1, [pc, #524]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010f38:	4313      	orrs	r3, r2
 8010f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	f003 0310 	and.w	r3, r3, #16
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d00a      	beq.n	8010f60 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8010f4a:	4b7e      	ldr	r3, [pc, #504]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010f58:	497a      	ldr	r1, [pc, #488]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010f5a:	4313      	orrs	r3, r2
 8010f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	f003 0320 	and.w	r3, r3, #32
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d00a      	beq.n	8010f82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010f6c:	4b75      	ldr	r3, [pc, #468]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010f7a:	4972      	ldr	r1, [pc, #456]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010f7c:	4313      	orrs	r3, r2
 8010f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d00a      	beq.n	8010fa4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010f8e:	4b6d      	ldr	r3, [pc, #436]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010f9c:	4969      	ldr	r1, [pc, #420]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010f9e:	4313      	orrs	r3, r2
 8010fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d00a      	beq.n	8010fc6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010fb0:	4b64      	ldr	r3, [pc, #400]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010fb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010fbe:	4961      	ldr	r1, [pc, #388]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010fc0:	4313      	orrs	r3, r2
 8010fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d00a      	beq.n	8010fe8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010fd2:	4b5c      	ldr	r3, [pc, #368]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010fd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010fe0:	4958      	ldr	r1, [pc, #352]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010fe2:	4313      	orrs	r3, r2
 8010fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d00a      	beq.n	801100a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8010ff4:	4b53      	ldr	r3, [pc, #332]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ffa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011002:	4950      	ldr	r1, [pc, #320]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011004:	4313      	orrs	r3, r2
 8011006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011012:	2b00      	cmp	r3, #0
 8011014:	d00a      	beq.n	801102c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8011016:	4b4b      	ldr	r3, [pc, #300]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801101c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011024:	4947      	ldr	r1, [pc, #284]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011026:	4313      	orrs	r3, r2
 8011028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011034:	2b00      	cmp	r3, #0
 8011036:	d00a      	beq.n	801104e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8011038:	4b42      	ldr	r3, [pc, #264]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801103a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801103e:	f023 0203 	bic.w	r2, r3, #3
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011046:	493f      	ldr	r1, [pc, #252]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011048:	4313      	orrs	r3, r2
 801104a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011056:	2b00      	cmp	r3, #0
 8011058:	d028      	beq.n	80110ac <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801105a:	4b3a      	ldr	r3, [pc, #232]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801105c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011060:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011068:	4936      	ldr	r1, [pc, #216]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801106a:	4313      	orrs	r3, r2
 801106c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011074:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011078:	d106      	bne.n	8011088 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801107a:	4b32      	ldr	r3, [pc, #200]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801107c:	68db      	ldr	r3, [r3, #12]
 801107e:	4a31      	ldr	r2, [pc, #196]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011080:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011084:	60d3      	str	r3, [r2, #12]
 8011086:	e011      	b.n	80110ac <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801108c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011090:	d10c      	bne.n	80110ac <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	3304      	adds	r3, #4
 8011096:	2101      	movs	r1, #1
 8011098:	4618      	mov	r0, r3
 801109a:	f000 fe91 	bl	8011dc0 <RCCEx_PLLSAI1_Config>
 801109e:	4603      	mov	r3, r0
 80110a0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80110a2:	7cfb      	ldrb	r3, [r7, #19]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d001      	beq.n	80110ac <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80110a8:	7cfb      	ldrb	r3, [r7, #19]
 80110aa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d028      	beq.n	801110a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80110b8:	4b22      	ldr	r3, [pc, #136]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80110ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80110be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110c6:	491f      	ldr	r1, [pc, #124]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80110c8:	4313      	orrs	r3, r2
 80110ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80110d6:	d106      	bne.n	80110e6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80110d8:	4b1a      	ldr	r3, [pc, #104]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80110da:	68db      	ldr	r3, [r3, #12]
 80110dc:	4a19      	ldr	r2, [pc, #100]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80110de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80110e2:	60d3      	str	r3, [r2, #12]
 80110e4:	e011      	b.n	801110a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80110ee:	d10c      	bne.n	801110a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	3304      	adds	r3, #4
 80110f4:	2101      	movs	r1, #1
 80110f6:	4618      	mov	r0, r3
 80110f8:	f000 fe62 	bl	8011dc0 <RCCEx_PLLSAI1_Config>
 80110fc:	4603      	mov	r3, r0
 80110fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8011100:	7cfb      	ldrb	r3, [r7, #19]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d001      	beq.n	801110a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8011106:	7cfb      	ldrb	r3, [r7, #19]
 8011108:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011112:	2b00      	cmp	r3, #0
 8011114:	d02a      	beq.n	801116c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8011116:	4b0b      	ldr	r3, [pc, #44]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801111c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011124:	4907      	ldr	r1, [pc, #28]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011126:	4313      	orrs	r3, r2
 8011128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011130:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011134:	d108      	bne.n	8011148 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8011136:	4b03      	ldr	r3, [pc, #12]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011138:	68db      	ldr	r3, [r3, #12]
 801113a:	4a02      	ldr	r2, [pc, #8]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801113c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011140:	60d3      	str	r3, [r2, #12]
 8011142:	e013      	b.n	801116c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8011144:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801114c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011150:	d10c      	bne.n	801116c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	3304      	adds	r3, #4
 8011156:	2101      	movs	r1, #1
 8011158:	4618      	mov	r0, r3
 801115a:	f000 fe31 	bl	8011dc0 <RCCEx_PLLSAI1_Config>
 801115e:	4603      	mov	r3, r0
 8011160:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8011162:	7cfb      	ldrb	r3, [r7, #19]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d001      	beq.n	801116c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8011168:	7cfb      	ldrb	r3, [r7, #19]
 801116a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011174:	2b00      	cmp	r3, #0
 8011176:	d02f      	beq.n	80111d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8011178:	4b2c      	ldr	r3, [pc, #176]	; (801122c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 801117a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801117e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011186:	4929      	ldr	r1, [pc, #164]	; (801122c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8011188:	4313      	orrs	r3, r2
 801118a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011192:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011196:	d10d      	bne.n	80111b4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	3304      	adds	r3, #4
 801119c:	2102      	movs	r1, #2
 801119e:	4618      	mov	r0, r3
 80111a0:	f000 fe0e 	bl	8011dc0 <RCCEx_PLLSAI1_Config>
 80111a4:	4603      	mov	r3, r0
 80111a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80111a8:	7cfb      	ldrb	r3, [r7, #19]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d014      	beq.n	80111d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80111ae:	7cfb      	ldrb	r3, [r7, #19]
 80111b0:	74bb      	strb	r3, [r7, #18]
 80111b2:	e011      	b.n	80111d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80111b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80111bc:	d10c      	bne.n	80111d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	3320      	adds	r3, #32
 80111c2:	2102      	movs	r1, #2
 80111c4:	4618      	mov	r0, r3
 80111c6:	f000 feed 	bl	8011fa4 <RCCEx_PLLSAI2_Config>
 80111ca:	4603      	mov	r3, r0
 80111cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80111ce:	7cfb      	ldrb	r3, [r7, #19]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d001      	beq.n	80111d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80111d4:	7cfb      	ldrb	r3, [r7, #19]
 80111d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d00b      	beq.n	80111fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80111e4:	4b11      	ldr	r3, [pc, #68]	; (801122c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80111e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80111ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80111f4:	490d      	ldr	r1, [pc, #52]	; (801122c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80111f6:	4313      	orrs	r3, r2
 80111f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011204:	2b00      	cmp	r3, #0
 8011206:	d00b      	beq.n	8011220 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8011208:	4b08      	ldr	r3, [pc, #32]	; (801122c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 801120a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801120e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011218:	4904      	ldr	r1, [pc, #16]	; (801122c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 801121a:	4313      	orrs	r3, r2
 801121c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8011220:	7cbb      	ldrb	r3, [r7, #18]
}
 8011222:	4618      	mov	r0, r3
 8011224:	3718      	adds	r7, #24
 8011226:	46bd      	mov	sp, r7
 8011228:	bd80      	pop	{r7, pc}
 801122a:	bf00      	nop
 801122c:	40021000 	.word	0x40021000

08011230 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b088      	sub	sp, #32
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8011238:	2300      	movs	r3, #0
 801123a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011242:	d13e      	bne.n	80112c2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8011244:	4bb4      	ldr	r3, [pc, #720]	; (8011518 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801124a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801124e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8011250:	693b      	ldr	r3, [r7, #16]
 8011252:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011256:	d028      	beq.n	80112aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8011258:	693b      	ldr	r3, [r7, #16]
 801125a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801125e:	f200 858c 	bhi.w	8011d7a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8011262:	693b      	ldr	r3, [r7, #16]
 8011264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011268:	d005      	beq.n	8011276 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 801126a:	693b      	ldr	r3, [r7, #16]
 801126c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011270:	d00e      	beq.n	8011290 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8011272:	f000 bd82 	b.w	8011d7a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011276:	4ba8      	ldr	r3, [pc, #672]	; (8011518 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801127c:	f003 0302 	and.w	r3, r3, #2
 8011280:	2b02      	cmp	r3, #2
 8011282:	f040 857c 	bne.w	8011d7e <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
        frequency = LSE_VALUE;
 8011286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801128a:	61fb      	str	r3, [r7, #28]
      break;
 801128c:	f000 bd77 	b.w	8011d7e <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8011290:	4ba1      	ldr	r3, [pc, #644]	; (8011518 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011296:	f003 0302 	and.w	r3, r3, #2
 801129a:	2b02      	cmp	r3, #2
 801129c:	f040 8571 	bne.w	8011d82 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
          frequency = LSI_VALUE;
 80112a0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80112a4:	61fb      	str	r3, [r7, #28]
      break;
 80112a6:	f000 bd6c 	b.w	8011d82 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80112aa:	4b9b      	ldr	r3, [pc, #620]	; (8011518 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80112b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80112b6:	f040 8566 	bne.w	8011d86 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
        frequency = HSE_VALUE / 32U;
 80112ba:	4b98      	ldr	r3, [pc, #608]	; (801151c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80112bc:	61fb      	str	r3, [r7, #28]
      break;
 80112be:	f000 bd62 	b.w	8011d86 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80112c2:	4b95      	ldr	r3, [pc, #596]	; (8011518 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80112c4:	68db      	ldr	r3, [r3, #12]
 80112c6:	f003 0303 	and.w	r3, r3, #3
 80112ca:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	2b03      	cmp	r3, #3
 80112d0:	d036      	beq.n	8011340 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80112d2:	697b      	ldr	r3, [r7, #20]
 80112d4:	2b03      	cmp	r3, #3
 80112d6:	d840      	bhi.n	801135a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80112d8:	697b      	ldr	r3, [r7, #20]
 80112da:	2b01      	cmp	r3, #1
 80112dc:	d003      	beq.n	80112e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80112de:	697b      	ldr	r3, [r7, #20]
 80112e0:	2b02      	cmp	r3, #2
 80112e2:	d020      	beq.n	8011326 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80112e4:	e039      	b.n	801135a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80112e6:	4b8c      	ldr	r3, [pc, #560]	; (8011518 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	f003 0302 	and.w	r3, r3, #2
 80112ee:	2b02      	cmp	r3, #2
 80112f0:	d116      	bne.n	8011320 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80112f2:	4b89      	ldr	r3, [pc, #548]	; (8011518 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	f003 0308 	and.w	r3, r3, #8
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d005      	beq.n	801130a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80112fe:	4b86      	ldr	r3, [pc, #536]	; (8011518 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	091b      	lsrs	r3, r3, #4
 8011304:	f003 030f 	and.w	r3, r3, #15
 8011308:	e005      	b.n	8011316 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 801130a:	4b83      	ldr	r3, [pc, #524]	; (8011518 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 801130c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011310:	0a1b      	lsrs	r3, r3, #8
 8011312:	f003 030f 	and.w	r3, r3, #15
 8011316:	4a82      	ldr	r2, [pc, #520]	; (8011520 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8011318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801131c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 801131e:	e01f      	b.n	8011360 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8011320:	2300      	movs	r3, #0
 8011322:	61bb      	str	r3, [r7, #24]
      break;
 8011324:	e01c      	b.n	8011360 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011326:	4b7c      	ldr	r3, [pc, #496]	; (8011518 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801132e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011332:	d102      	bne.n	801133a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8011334:	4b7b      	ldr	r3, [pc, #492]	; (8011524 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8011336:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8011338:	e012      	b.n	8011360 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 801133a:	2300      	movs	r3, #0
 801133c:	61bb      	str	r3, [r7, #24]
      break;
 801133e:	e00f      	b.n	8011360 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011340:	4b75      	ldr	r3, [pc, #468]	; (8011518 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011348:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801134c:	d102      	bne.n	8011354 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 801134e:	4b76      	ldr	r3, [pc, #472]	; (8011528 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8011350:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8011352:	e005      	b.n	8011360 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8011354:	2300      	movs	r3, #0
 8011356:	61bb      	str	r3, [r7, #24]
      break;
 8011358:	e002      	b.n	8011360 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 801135a:	2300      	movs	r3, #0
 801135c:	61bb      	str	r3, [r7, #24]
      break;
 801135e:	bf00      	nop
    }

    switch(PeriphClk)
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011366:	f000 842a 	beq.w	8011bbe <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011370:	f200 850b 	bhi.w	8011d8a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 801137a:	f000 80df 	beq.w	801153c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8011384:	f200 8501 	bhi.w	8011d8a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801138e:	f000 80d5 	beq.w	801153c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011398:	f200 84f7 	bhi.w	8011d8a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80113a2:	f000 8377 	beq.w	8011a94 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80113ac:	f200 84ed 	bhi.w	8011d8a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80113b6:	f000 84c3 	beq.w	8011d40 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80113c0:	f200 84e3 	bhi.w	8011d8a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80113ca:	f000 82e6 	beq.w	801199a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80113d4:	f200 84d9 	bhi.w	8011d8a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80113de:	f000 80ad 	beq.w	801153c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80113e8:	f200 84cf 	bhi.w	8011d8a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80113f2:	f000 809b 	beq.w	801152c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80113fc:	f200 84c5 	bhi.w	8011d8a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011406:	d07f      	beq.n	8011508 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801140e:	f200 84bc 	bhi.w	8011d8a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011418:	f000 8448 	beq.w	8011cac <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011422:	f200 84b2 	bhi.w	8011d8a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801142c:	f000 83f0 	beq.w	8011c10 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011436:	f200 84a8 	bhi.w	8011d8a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011440:	f000 8391 	beq.w	8011b66 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801144a:	f200 849e 	bhi.w	8011d8a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	2b80      	cmp	r3, #128	; 0x80
 8011452:	f000 835c 	beq.w	8011b0e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	2b80      	cmp	r3, #128	; 0x80
 801145a:	f200 8496 	bhi.w	8011d8a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	2b20      	cmp	r3, #32
 8011462:	d84b      	bhi.n	80114fc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	2b00      	cmp	r3, #0
 8011468:	f000 848f 	beq.w	8011d8a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	3b01      	subs	r3, #1
 8011470:	2b1f      	cmp	r3, #31
 8011472:	f200 848a 	bhi.w	8011d8a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011476:	a201      	add	r2, pc, #4	; (adr r2, 801147c <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 8011478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801147c:	08011693 	.word	0x08011693
 8011480:	08011703 	.word	0x08011703
 8011484:	08011d8b 	.word	0x08011d8b
 8011488:	08011797 	.word	0x08011797
 801148c:	08011d8b 	.word	0x08011d8b
 8011490:	08011d8b 	.word	0x08011d8b
 8011494:	08011d8b 	.word	0x08011d8b
 8011498:	0801181f 	.word	0x0801181f
 801149c:	08011d8b 	.word	0x08011d8b
 80114a0:	08011d8b 	.word	0x08011d8b
 80114a4:	08011d8b 	.word	0x08011d8b
 80114a8:	08011d8b 	.word	0x08011d8b
 80114ac:	08011d8b 	.word	0x08011d8b
 80114b0:	08011d8b 	.word	0x08011d8b
 80114b4:	08011d8b 	.word	0x08011d8b
 80114b8:	08011897 	.word	0x08011897
 80114bc:	08011d8b 	.word	0x08011d8b
 80114c0:	08011d8b 	.word	0x08011d8b
 80114c4:	08011d8b 	.word	0x08011d8b
 80114c8:	08011d8b 	.word	0x08011d8b
 80114cc:	08011d8b 	.word	0x08011d8b
 80114d0:	08011d8b 	.word	0x08011d8b
 80114d4:	08011d8b 	.word	0x08011d8b
 80114d8:	08011d8b 	.word	0x08011d8b
 80114dc:	08011d8b 	.word	0x08011d8b
 80114e0:	08011d8b 	.word	0x08011d8b
 80114e4:	08011d8b 	.word	0x08011d8b
 80114e8:	08011d8b 	.word	0x08011d8b
 80114ec:	08011d8b 	.word	0x08011d8b
 80114f0:	08011d8b 	.word	0x08011d8b
 80114f4:	08011d8b 	.word	0x08011d8b
 80114f8:	08011919 	.word	0x08011919
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2b40      	cmp	r3, #64	; 0x40
 8011500:	f000 82d9 	beq.w	8011ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8011504:	f000 bc41 	b.w	8011d8a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8011508:	69b9      	ldr	r1, [r7, #24]
 801150a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801150e:	f000 fe25 	bl	801215c <RCCEx_GetSAIxPeriphCLKFreq>
 8011512:	61f8      	str	r0, [r7, #28]
      break;
 8011514:	f000 bc3a 	b.w	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8011518:	40021000 	.word	0x40021000
 801151c:	0003d090 	.word	0x0003d090
 8011520:	0801aba0 	.word	0x0801aba0
 8011524:	00f42400 	.word	0x00f42400
 8011528:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 801152c:	69b9      	ldr	r1, [r7, #24]
 801152e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8011532:	f000 fe13 	bl	801215c <RCCEx_GetSAIxPeriphCLKFreq>
 8011536:	61f8      	str	r0, [r7, #28]
      break;
 8011538:	f000 bc28 	b.w	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 801153c:	4ba6      	ldr	r3, [pc, #664]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 801153e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011542:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8011546:	613b      	str	r3, [r7, #16]
 8011548:	693b      	ldr	r3, [r7, #16]
 801154a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 801154e:	d015      	beq.n	801157c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8011550:	693b      	ldr	r3, [r7, #16]
 8011552:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8011556:	f200 8092 	bhi.w	801167e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 801155a:	693b      	ldr	r3, [r7, #16]
 801155c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011560:	d029      	beq.n	80115b6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8011562:	693b      	ldr	r3, [r7, #16]
 8011564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011568:	f200 8089 	bhi.w	801167e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 801156c:	693b      	ldr	r3, [r7, #16]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d07b      	beq.n	801166a <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 8011572:	693b      	ldr	r3, [r7, #16]
 8011574:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011578:	d04a      	beq.n	8011610 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 801157a:	e080      	b.n	801167e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 801157c:	4b96      	ldr	r3, [pc, #600]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	f003 0302 	and.w	r3, r3, #2
 8011584:	2b02      	cmp	r3, #2
 8011586:	d17c      	bne.n	8011682 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8011588:	4b93      	ldr	r3, [pc, #588]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	f003 0308 	and.w	r3, r3, #8
 8011590:	2b00      	cmp	r3, #0
 8011592:	d005      	beq.n	80115a0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8011594:	4b90      	ldr	r3, [pc, #576]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	091b      	lsrs	r3, r3, #4
 801159a:	f003 030f 	and.w	r3, r3, #15
 801159e:	e005      	b.n	80115ac <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80115a0:	4b8d      	ldr	r3, [pc, #564]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80115a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80115a6:	0a1b      	lsrs	r3, r3, #8
 80115a8:	f003 030f 	and.w	r3, r3, #15
 80115ac:	4a8b      	ldr	r2, [pc, #556]	; (80117dc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80115ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80115b2:	61fb      	str	r3, [r7, #28]
          break;
 80115b4:	e065      	b.n	8011682 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80115b6:	4b88      	ldr	r3, [pc, #544]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80115be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80115c2:	d160      	bne.n	8011686 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80115c4:	4b84      	ldr	r3, [pc, #528]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80115c6:	68db      	ldr	r3, [r3, #12]
 80115c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80115cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80115d0:	d159      	bne.n	8011686 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80115d2:	4b81      	ldr	r3, [pc, #516]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80115d4:	68db      	ldr	r3, [r3, #12]
 80115d6:	0a1b      	lsrs	r3, r3, #8
 80115d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80115dc:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80115de:	69bb      	ldr	r3, [r7, #24]
 80115e0:	68fa      	ldr	r2, [r7, #12]
 80115e2:	fb03 f202 	mul.w	r2, r3, r2
 80115e6:	4b7c      	ldr	r3, [pc, #496]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80115e8:	68db      	ldr	r3, [r3, #12]
 80115ea:	091b      	lsrs	r3, r3, #4
 80115ec:	f003 0307 	and.w	r3, r3, #7
 80115f0:	3301      	adds	r3, #1
 80115f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80115f6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80115f8:	4b77      	ldr	r3, [pc, #476]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80115fa:	68db      	ldr	r3, [r3, #12]
 80115fc:	0d5b      	lsrs	r3, r3, #21
 80115fe:	f003 0303 	and.w	r3, r3, #3
 8011602:	3301      	adds	r3, #1
 8011604:	005b      	lsls	r3, r3, #1
 8011606:	69ba      	ldr	r2, [r7, #24]
 8011608:	fbb2 f3f3 	udiv	r3, r2, r3
 801160c:	61fb      	str	r3, [r7, #28]
          break;
 801160e:	e03a      	b.n	8011686 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8011610:	4b71      	ldr	r3, [pc, #452]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011618:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801161c:	d135      	bne.n	801168a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 801161e:	4b6e      	ldr	r3, [pc, #440]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011620:	691b      	ldr	r3, [r3, #16]
 8011622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801162a:	d12e      	bne.n	801168a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 801162c:	4b6a      	ldr	r3, [pc, #424]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 801162e:	691b      	ldr	r3, [r3, #16]
 8011630:	0a1b      	lsrs	r3, r3, #8
 8011632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011636:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8011638:	69bb      	ldr	r3, [r7, #24]
 801163a:	68fa      	ldr	r2, [r7, #12]
 801163c:	fb03 f202 	mul.w	r2, r3, r2
 8011640:	4b65      	ldr	r3, [pc, #404]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011642:	68db      	ldr	r3, [r3, #12]
 8011644:	091b      	lsrs	r3, r3, #4
 8011646:	f003 0307 	and.w	r3, r3, #7
 801164a:	3301      	adds	r3, #1
 801164c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011650:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8011652:	4b61      	ldr	r3, [pc, #388]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011654:	691b      	ldr	r3, [r3, #16]
 8011656:	0d5b      	lsrs	r3, r3, #21
 8011658:	f003 0303 	and.w	r3, r3, #3
 801165c:	3301      	adds	r3, #1
 801165e:	005b      	lsls	r3, r3, #1
 8011660:	69ba      	ldr	r2, [r7, #24]
 8011662:	fbb2 f3f3 	udiv	r3, r2, r3
 8011666:	61fb      	str	r3, [r7, #28]
          break;
 8011668:	e00f      	b.n	801168a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 801166a:	4b5b      	ldr	r3, [pc, #364]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 801166c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011670:	f003 0302 	and.w	r3, r3, #2
 8011674:	2b02      	cmp	r3, #2
 8011676:	d10a      	bne.n	801168e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 8011678:	4b59      	ldr	r3, [pc, #356]	; (80117e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 801167a:	61fb      	str	r3, [r7, #28]
          break;
 801167c:	e007      	b.n	801168e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 801167e:	bf00      	nop
 8011680:	e384      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011682:	bf00      	nop
 8011684:	e382      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011686:	bf00      	nop
 8011688:	e380      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801168a:	bf00      	nop
 801168c:	e37e      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801168e:	bf00      	nop
        break;
 8011690:	e37c      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8011692:	4b51      	ldr	r3, [pc, #324]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011698:	f003 0303 	and.w	r3, r3, #3
 801169c:	613b      	str	r3, [r7, #16]
 801169e:	693b      	ldr	r3, [r7, #16]
 80116a0:	2b03      	cmp	r3, #3
 80116a2:	d828      	bhi.n	80116f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 80116a4:	a201      	add	r2, pc, #4	; (adr r2, 80116ac <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80116a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116aa:	bf00      	nop
 80116ac:	080116bd 	.word	0x080116bd
 80116b0:	080116c5 	.word	0x080116c5
 80116b4:	080116cd 	.word	0x080116cd
 80116b8:	080116e1 	.word	0x080116e1
          frequency = HAL_RCC_GetPCLK2Freq();
 80116bc:	f7ff fa46 	bl	8010b4c <HAL_RCC_GetPCLK2Freq>
 80116c0:	61f8      	str	r0, [r7, #28]
          break;
 80116c2:	e01d      	b.n	8011700 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 80116c4:	f7ff f994 	bl	80109f0 <HAL_RCC_GetSysClockFreq>
 80116c8:	61f8      	str	r0, [r7, #28]
          break;
 80116ca:	e019      	b.n	8011700 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80116cc:	4b42      	ldr	r3, [pc, #264]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80116d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80116d8:	d10f      	bne.n	80116fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 80116da:	4b42      	ldr	r3, [pc, #264]	; (80117e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 80116dc:	61fb      	str	r3, [r7, #28]
          break;
 80116de:	e00c      	b.n	80116fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80116e0:	4b3d      	ldr	r3, [pc, #244]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80116e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80116e6:	f003 0302 	and.w	r3, r3, #2
 80116ea:	2b02      	cmp	r3, #2
 80116ec:	d107      	bne.n	80116fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 80116ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80116f2:	61fb      	str	r3, [r7, #28]
          break;
 80116f4:	e003      	b.n	80116fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 80116f6:	bf00      	nop
 80116f8:	e348      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80116fa:	bf00      	nop
 80116fc:	e346      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80116fe:	bf00      	nop
        break;
 8011700:	e344      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8011702:	4b35      	ldr	r3, [pc, #212]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011708:	f003 030c 	and.w	r3, r3, #12
 801170c:	613b      	str	r3, [r7, #16]
 801170e:	693b      	ldr	r3, [r7, #16]
 8011710:	2b0c      	cmp	r3, #12
 8011712:	d83a      	bhi.n	801178a <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 8011714:	a201      	add	r2, pc, #4	; (adr r2, 801171c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8011716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801171a:	bf00      	nop
 801171c:	08011751 	.word	0x08011751
 8011720:	0801178b 	.word	0x0801178b
 8011724:	0801178b 	.word	0x0801178b
 8011728:	0801178b 	.word	0x0801178b
 801172c:	08011759 	.word	0x08011759
 8011730:	0801178b 	.word	0x0801178b
 8011734:	0801178b 	.word	0x0801178b
 8011738:	0801178b 	.word	0x0801178b
 801173c:	08011761 	.word	0x08011761
 8011740:	0801178b 	.word	0x0801178b
 8011744:	0801178b 	.word	0x0801178b
 8011748:	0801178b 	.word	0x0801178b
 801174c:	08011775 	.word	0x08011775
          frequency = HAL_RCC_GetPCLK1Freq();
 8011750:	f7ff f9e6 	bl	8010b20 <HAL_RCC_GetPCLK1Freq>
 8011754:	61f8      	str	r0, [r7, #28]
          break;
 8011756:	e01d      	b.n	8011794 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 8011758:	f7ff f94a 	bl	80109f0 <HAL_RCC_GetSysClockFreq>
 801175c:	61f8      	str	r0, [r7, #28]
          break;
 801175e:	e019      	b.n	8011794 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011760:	4b1d      	ldr	r3, [pc, #116]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801176c:	d10f      	bne.n	801178e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 801176e:	4b1d      	ldr	r3, [pc, #116]	; (80117e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8011770:	61fb      	str	r3, [r7, #28]
          break;
 8011772:	e00c      	b.n	801178e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011774:	4b18      	ldr	r3, [pc, #96]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801177a:	f003 0302 	and.w	r3, r3, #2
 801177e:	2b02      	cmp	r3, #2
 8011780:	d107      	bne.n	8011792 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 8011782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011786:	61fb      	str	r3, [r7, #28]
          break;
 8011788:	e003      	b.n	8011792 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 801178a:	bf00      	nop
 801178c:	e2fe      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801178e:	bf00      	nop
 8011790:	e2fc      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011792:	bf00      	nop
        break;
 8011794:	e2fa      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8011796:	4b10      	ldr	r3, [pc, #64]	; (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801179c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80117a0:	613b      	str	r3, [r7, #16]
 80117a2:	693b      	ldr	r3, [r7, #16]
 80117a4:	2b30      	cmp	r3, #48	; 0x30
 80117a6:	d029      	beq.n	80117fc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80117a8:	693b      	ldr	r3, [r7, #16]
 80117aa:	2b30      	cmp	r3, #48	; 0x30
 80117ac:	d831      	bhi.n	8011812 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 80117ae:	693b      	ldr	r3, [r7, #16]
 80117b0:	2b20      	cmp	r3, #32
 80117b2:	d019      	beq.n	80117e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 80117b4:	693b      	ldr	r3, [r7, #16]
 80117b6:	2b20      	cmp	r3, #32
 80117b8:	d82b      	bhi.n	8011812 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 80117ba:	693b      	ldr	r3, [r7, #16]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d003      	beq.n	80117c8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80117c0:	693b      	ldr	r3, [r7, #16]
 80117c2:	2b10      	cmp	r3, #16
 80117c4:	d004      	beq.n	80117d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 80117c6:	e024      	b.n	8011812 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 80117c8:	f7ff f9aa 	bl	8010b20 <HAL_RCC_GetPCLK1Freq>
 80117cc:	61f8      	str	r0, [r7, #28]
          break;
 80117ce:	e025      	b.n	801181c <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          frequency = HAL_RCC_GetSysClockFreq();
 80117d0:	f7ff f90e 	bl	80109f0 <HAL_RCC_GetSysClockFreq>
 80117d4:	61f8      	str	r0, [r7, #28]
          break;
 80117d6:	e021      	b.n	801181c <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 80117d8:	40021000 	.word	0x40021000
 80117dc:	0801aba0 	.word	0x0801aba0
 80117e0:	02dc6c00 	.word	0x02dc6c00
 80117e4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80117e8:	4b8f      	ldr	r3, [pc, #572]	; (8011a28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80117f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80117f4:	d10f      	bne.n	8011816 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
            frequency = HSI_VALUE;
 80117f6:	4b8d      	ldr	r3, [pc, #564]	; (8011a2c <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 80117f8:	61fb      	str	r3, [r7, #28]
          break;
 80117fa:	e00c      	b.n	8011816 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80117fc:	4b8a      	ldr	r3, [pc, #552]	; (8011a28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80117fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011802:	f003 0302 	and.w	r3, r3, #2
 8011806:	2b02      	cmp	r3, #2
 8011808:	d107      	bne.n	801181a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
            frequency = LSE_VALUE;
 801180a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801180e:	61fb      	str	r3, [r7, #28]
          break;
 8011810:	e003      	b.n	801181a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          break;
 8011812:	bf00      	nop
 8011814:	e2ba      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011816:	bf00      	nop
 8011818:	e2b8      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801181a:	bf00      	nop
        break;
 801181c:	e2b6      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 801181e:	4b82      	ldr	r3, [pc, #520]	; (8011a28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011824:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011828:	613b      	str	r3, [r7, #16]
 801182a:	693b      	ldr	r3, [r7, #16]
 801182c:	2bc0      	cmp	r3, #192	; 0xc0
 801182e:	d021      	beq.n	8011874 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8011830:	693b      	ldr	r3, [r7, #16]
 8011832:	2bc0      	cmp	r3, #192	; 0xc0
 8011834:	d829      	bhi.n	801188a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8011836:	693b      	ldr	r3, [r7, #16]
 8011838:	2b80      	cmp	r3, #128	; 0x80
 801183a:	d011      	beq.n	8011860 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 801183c:	693b      	ldr	r3, [r7, #16]
 801183e:	2b80      	cmp	r3, #128	; 0x80
 8011840:	d823      	bhi.n	801188a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8011842:	693b      	ldr	r3, [r7, #16]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d003      	beq.n	8011850 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	2b40      	cmp	r3, #64	; 0x40
 801184c:	d004      	beq.n	8011858 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          break;
 801184e:	e01c      	b.n	801188a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8011850:	f7ff f966 	bl	8010b20 <HAL_RCC_GetPCLK1Freq>
 8011854:	61f8      	str	r0, [r7, #28]
          break;
 8011856:	e01d      	b.n	8011894 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HAL_RCC_GetSysClockFreq();
 8011858:	f7ff f8ca 	bl	80109f0 <HAL_RCC_GetSysClockFreq>
 801185c:	61f8      	str	r0, [r7, #28]
          break;
 801185e:	e019      	b.n	8011894 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011860:	4b71      	ldr	r3, [pc, #452]	; (8011a28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801186c:	d10f      	bne.n	801188e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = HSI_VALUE;
 801186e:	4b6f      	ldr	r3, [pc, #444]	; (8011a2c <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8011870:	61fb      	str	r3, [r7, #28]
          break;
 8011872:	e00c      	b.n	801188e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011874:	4b6c      	ldr	r3, [pc, #432]	; (8011a28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801187a:	f003 0302 	and.w	r3, r3, #2
 801187e:	2b02      	cmp	r3, #2
 8011880:	d107      	bne.n	8011892 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            frequency = LSE_VALUE;
 8011882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011886:	61fb      	str	r3, [r7, #28]
          break;
 8011888:	e003      	b.n	8011892 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
          break;
 801188a:	bf00      	nop
 801188c:	e27e      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801188e:	bf00      	nop
 8011890:	e27c      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011892:	bf00      	nop
        break;
 8011894:	e27a      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8011896:	4b64      	ldr	r3, [pc, #400]	; (8011a28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801189c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80118a0:	613b      	str	r3, [r7, #16]
 80118a2:	693b      	ldr	r3, [r7, #16]
 80118a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80118a8:	d025      	beq.n	80118f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 80118aa:	693b      	ldr	r3, [r7, #16]
 80118ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80118b0:	d82c      	bhi.n	801190c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 80118b2:	693b      	ldr	r3, [r7, #16]
 80118b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80118b8:	d013      	beq.n	80118e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 80118ba:	693b      	ldr	r3, [r7, #16]
 80118bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80118c0:	d824      	bhi.n	801190c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 80118c2:	693b      	ldr	r3, [r7, #16]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d004      	beq.n	80118d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 80118c8:	693b      	ldr	r3, [r7, #16]
 80118ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80118ce:	d004      	beq.n	80118da <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          break;
 80118d0:	e01c      	b.n	801190c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 80118d2:	f7ff f925 	bl	8010b20 <HAL_RCC_GetPCLK1Freq>
 80118d6:	61f8      	str	r0, [r7, #28]
          break;
 80118d8:	e01d      	b.n	8011916 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetSysClockFreq();
 80118da:	f7ff f889 	bl	80109f0 <HAL_RCC_GetSysClockFreq>
 80118de:	61f8      	str	r0, [r7, #28]
          break;
 80118e0:	e019      	b.n	8011916 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80118e2:	4b51      	ldr	r3, [pc, #324]	; (8011a28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80118ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80118ee:	d10f      	bne.n	8011910 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            frequency = HSI_VALUE;
 80118f0:	4b4e      	ldr	r3, [pc, #312]	; (8011a2c <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 80118f2:	61fb      	str	r3, [r7, #28]
          break;
 80118f4:	e00c      	b.n	8011910 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80118f6:	4b4c      	ldr	r3, [pc, #304]	; (8011a28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80118f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118fc:	f003 0302 	and.w	r3, r3, #2
 8011900:	2b02      	cmp	r3, #2
 8011902:	d107      	bne.n	8011914 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
            frequency = LSE_VALUE;
 8011904:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011908:	61fb      	str	r3, [r7, #28]
          break;
 801190a:	e003      	b.n	8011914 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          break;
 801190c:	bf00      	nop
 801190e:	e23d      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011910:	bf00      	nop
 8011912:	e23b      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011914:	bf00      	nop
        break;
 8011916:	e239      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8011918:	4b43      	ldr	r3, [pc, #268]	; (8011a28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 801191a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801191e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8011922:	613b      	str	r3, [r7, #16]
 8011924:	693b      	ldr	r3, [r7, #16]
 8011926:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801192a:	d025      	beq.n	8011978 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 801192c:	693b      	ldr	r3, [r7, #16]
 801192e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011932:	d82c      	bhi.n	801198e <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 8011934:	693b      	ldr	r3, [r7, #16]
 8011936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801193a:	d013      	beq.n	8011964 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 801193c:	693b      	ldr	r3, [r7, #16]
 801193e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011942:	d824      	bhi.n	801198e <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 8011944:	693b      	ldr	r3, [r7, #16]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d004      	beq.n	8011954 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 801194a:	693b      	ldr	r3, [r7, #16]
 801194c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011950:	d004      	beq.n	801195c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
          break;
 8011952:	e01c      	b.n	801198e <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8011954:	f7ff f8e4 	bl	8010b20 <HAL_RCC_GetPCLK1Freq>
 8011958:	61f8      	str	r0, [r7, #28]
          break;
 801195a:	e01d      	b.n	8011998 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          frequency = HAL_RCC_GetSysClockFreq();
 801195c:	f7ff f848 	bl	80109f0 <HAL_RCC_GetSysClockFreq>
 8011960:	61f8      	str	r0, [r7, #28]
          break;
 8011962:	e019      	b.n	8011998 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011964:	4b30      	ldr	r3, [pc, #192]	; (8011a28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801196c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011970:	d10f      	bne.n	8011992 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
            frequency = HSI_VALUE;
 8011972:	4b2e      	ldr	r3, [pc, #184]	; (8011a2c <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8011974:	61fb      	str	r3, [r7, #28]
          break;
 8011976:	e00c      	b.n	8011992 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011978:	4b2b      	ldr	r3, [pc, #172]	; (8011a28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 801197a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801197e:	f003 0302 	and.w	r3, r3, #2
 8011982:	2b02      	cmp	r3, #2
 8011984:	d107      	bne.n	8011996 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            frequency = LSE_VALUE;
 8011986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801198a:	61fb      	str	r3, [r7, #28]
          break;
 801198c:	e003      	b.n	8011996 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
          break;
 801198e:	bf00      	nop
 8011990:	e1fc      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011992:	bf00      	nop
 8011994:	e1fa      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011996:	bf00      	nop
        break;
 8011998:	e1f8      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801199a:	4b23      	ldr	r3, [pc, #140]	; (8011a28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 801199c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80119a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80119a4:	613b      	str	r3, [r7, #16]
 80119a6:	693b      	ldr	r3, [r7, #16]
 80119a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80119ac:	d00c      	beq.n	80119c8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 80119ae:	693b      	ldr	r3, [r7, #16]
 80119b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80119b4:	d868      	bhi.n	8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 80119b6:	693b      	ldr	r3, [r7, #16]
 80119b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80119bc:	d008      	beq.n	80119d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80119be:	693b      	ldr	r3, [r7, #16]
 80119c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80119c4:	d034      	beq.n	8011a30 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
          break;
 80119c6:	e05f      	b.n	8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          frequency = HAL_RCC_GetSysClockFreq();
 80119c8:	f7ff f812 	bl	80109f0 <HAL_RCC_GetSysClockFreq>
 80119cc:	61f8      	str	r0, [r7, #28]
          break;
 80119ce:	e060      	b.n	8011a92 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80119d0:	4b15      	ldr	r3, [pc, #84]	; (8011a28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80119d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80119dc:	d156      	bne.n	8011a8c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 80119de:	4b12      	ldr	r3, [pc, #72]	; (8011a28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80119e0:	691b      	ldr	r3, [r3, #16]
 80119e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d050      	beq.n	8011a8c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80119ea:	4b0f      	ldr	r3, [pc, #60]	; (8011a28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80119ec:	691b      	ldr	r3, [r3, #16]
 80119ee:	0a1b      	lsrs	r3, r3, #8
 80119f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80119f4:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80119f6:	69bb      	ldr	r3, [r7, #24]
 80119f8:	68fa      	ldr	r2, [r7, #12]
 80119fa:	fb03 f202 	mul.w	r2, r3, r2
 80119fe:	4b0a      	ldr	r3, [pc, #40]	; (8011a28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011a00:	68db      	ldr	r3, [r3, #12]
 8011a02:	091b      	lsrs	r3, r3, #4
 8011a04:	f003 0307 	and.w	r3, r3, #7
 8011a08:	3301      	adds	r3, #1
 8011a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a0e:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8011a10:	4b05      	ldr	r3, [pc, #20]	; (8011a28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011a12:	691b      	ldr	r3, [r3, #16]
 8011a14:	0e5b      	lsrs	r3, r3, #25
 8011a16:	f003 0303 	and.w	r3, r3, #3
 8011a1a:	3301      	adds	r3, #1
 8011a1c:	005b      	lsls	r3, r3, #1
 8011a1e:	69ba      	ldr	r2, [r7, #24]
 8011a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a24:	61fb      	str	r3, [r7, #28]
          break;
 8011a26:	e031      	b.n	8011a8c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8011a28:	40021000 	.word	0x40021000
 8011a2c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8011a30:	4b9c      	ldr	r3, [pc, #624]	; (8011ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011a3c:	d128      	bne.n	8011a90 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 8011a3e:	4b99      	ldr	r3, [pc, #612]	; (8011ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011a40:	695b      	ldr	r3, [r3, #20]
 8011a42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d022      	beq.n	8011a90 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8011a4a:	4b96      	ldr	r3, [pc, #600]	; (8011ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011a4c:	695b      	ldr	r3, [r3, #20]
 8011a4e:	0a1b      	lsrs	r3, r3, #8
 8011a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011a54:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8011a56:	69bb      	ldr	r3, [r7, #24]
 8011a58:	68fa      	ldr	r2, [r7, #12]
 8011a5a:	fb03 f202 	mul.w	r2, r3, r2
 8011a5e:	4b91      	ldr	r3, [pc, #580]	; (8011ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011a60:	68db      	ldr	r3, [r3, #12]
 8011a62:	091b      	lsrs	r3, r3, #4
 8011a64:	f003 0307 	and.w	r3, r3, #7
 8011a68:	3301      	adds	r3, #1
 8011a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a6e:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8011a70:	4b8c      	ldr	r3, [pc, #560]	; (8011ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011a72:	695b      	ldr	r3, [r3, #20]
 8011a74:	0e5b      	lsrs	r3, r3, #25
 8011a76:	f003 0303 	and.w	r3, r3, #3
 8011a7a:	3301      	adds	r3, #1
 8011a7c:	005b      	lsls	r3, r3, #1
 8011a7e:	69ba      	ldr	r2, [r7, #24]
 8011a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a84:	61fb      	str	r3, [r7, #28]
          break;
 8011a86:	e003      	b.n	8011a90 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 8011a88:	bf00      	nop
 8011a8a:	e17f      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011a8c:	bf00      	nop
 8011a8e:	e17d      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011a90:	bf00      	nop
        break;
 8011a92:	e17b      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8011a94:	4b83      	ldr	r3, [pc, #524]	; (8011ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011a9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011a9e:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8011aa0:	693b      	ldr	r3, [r7, #16]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d103      	bne.n	8011aae <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          frequency = HAL_RCC_GetPCLK2Freq();
 8011aa6:	f7ff f851 	bl	8010b4c <HAL_RCC_GetPCLK2Freq>
 8011aaa:	61f8      	str	r0, [r7, #28]
        break;
 8011aac:	e16e      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          frequency = HAL_RCC_GetSysClockFreq();
 8011aae:	f7fe ff9f 	bl	80109f0 <HAL_RCC_GetSysClockFreq>
 8011ab2:	61f8      	str	r0, [r7, #28]
        break;
 8011ab4:	e16a      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8011ab6:	4b7b      	ldr	r3, [pc, #492]	; (8011ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011abc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8011ac0:	613b      	str	r3, [r7, #16]
 8011ac2:	693b      	ldr	r3, [r7, #16]
 8011ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011ac8:	d013      	beq.n	8011af2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8011aca:	693b      	ldr	r3, [r7, #16]
 8011acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011ad0:	d819      	bhi.n	8011b06 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8011ad2:	693b      	ldr	r3, [r7, #16]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d004      	beq.n	8011ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8011ad8:	693b      	ldr	r3, [r7, #16]
 8011ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011ade:	d004      	beq.n	8011aea <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8011ae0:	e011      	b.n	8011b06 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8011ae2:	f7ff f81d 	bl	8010b20 <HAL_RCC_GetPCLK1Freq>
 8011ae6:	61f8      	str	r0, [r7, #28]
          break;
 8011ae8:	e010      	b.n	8011b0c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8011aea:	f7fe ff81 	bl	80109f0 <HAL_RCC_GetSysClockFreq>
 8011aee:	61f8      	str	r0, [r7, #28]
          break;
 8011af0:	e00c      	b.n	8011b0c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011af2:	4b6c      	ldr	r3, [pc, #432]	; (8011ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011afe:	d104      	bne.n	8011b0a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
            frequency = HSI_VALUE;
 8011b00:	4b69      	ldr	r3, [pc, #420]	; (8011ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8011b02:	61fb      	str	r3, [r7, #28]
          break;
 8011b04:	e001      	b.n	8011b0a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
 8011b06:	bf00      	nop
 8011b08:	e140      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011b0a:	bf00      	nop
        break;
 8011b0c:	e13e      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8011b0e:	4b65      	ldr	r3, [pc, #404]	; (8011ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011b18:	613b      	str	r3, [r7, #16]
 8011b1a:	693b      	ldr	r3, [r7, #16]
 8011b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011b20:	d013      	beq.n	8011b4a <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 8011b22:	693b      	ldr	r3, [r7, #16]
 8011b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011b28:	d819      	bhi.n	8011b5e <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8011b2a:	693b      	ldr	r3, [r7, #16]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d004      	beq.n	8011b3a <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 8011b30:	693b      	ldr	r3, [r7, #16]
 8011b32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011b36:	d004      	beq.n	8011b42 <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 8011b38:	e011      	b.n	8011b5e <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8011b3a:	f7fe fff1 	bl	8010b20 <HAL_RCC_GetPCLK1Freq>
 8011b3e:	61f8      	str	r0, [r7, #28]
          break;
 8011b40:	e010      	b.n	8011b64 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetSysClockFreq();
 8011b42:	f7fe ff55 	bl	80109f0 <HAL_RCC_GetSysClockFreq>
 8011b46:	61f8      	str	r0, [r7, #28]
          break;
 8011b48:	e00c      	b.n	8011b64 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011b4a:	4b56      	ldr	r3, [pc, #344]	; (8011ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011b56:	d104      	bne.n	8011b62 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = HSI_VALUE;
 8011b58:	4b53      	ldr	r3, [pc, #332]	; (8011ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8011b5a:	61fb      	str	r3, [r7, #28]
          break;
 8011b5c:	e001      	b.n	8011b62 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 8011b5e:	bf00      	nop
 8011b60:	e114      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011b62:	bf00      	nop
        break;
 8011b64:	e112      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8011b66:	4b4f      	ldr	r3, [pc, #316]	; (8011ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8011b70:	613b      	str	r3, [r7, #16]
 8011b72:	693b      	ldr	r3, [r7, #16]
 8011b74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011b78:	d013      	beq.n	8011ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 8011b7a:	693b      	ldr	r3, [r7, #16]
 8011b7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011b80:	d819      	bhi.n	8011bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8011b82:	693b      	ldr	r3, [r7, #16]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d004      	beq.n	8011b92 <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 8011b88:	693b      	ldr	r3, [r7, #16]
 8011b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b8e:	d004      	beq.n	8011b9a <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          break;
 8011b90:	e011      	b.n	8011bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
          frequency = HAL_RCC_GetPCLK1Freq();
 8011b92:	f7fe ffc5 	bl	8010b20 <HAL_RCC_GetPCLK1Freq>
 8011b96:	61f8      	str	r0, [r7, #28]
          break;
 8011b98:	e010      	b.n	8011bbc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = HAL_RCC_GetSysClockFreq();
 8011b9a:	f7fe ff29 	bl	80109f0 <HAL_RCC_GetSysClockFreq>
 8011b9e:	61f8      	str	r0, [r7, #28]
          break;
 8011ba0:	e00c      	b.n	8011bbc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011ba2:	4b40      	ldr	r3, [pc, #256]	; (8011ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011bae:	d104      	bne.n	8011bba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
            frequency = HSI_VALUE;
 8011bb0:	4b3d      	ldr	r3, [pc, #244]	; (8011ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8011bb2:	61fb      	str	r3, [r7, #28]
          break;
 8011bb4:	e001      	b.n	8011bba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
 8011bb6:	bf00      	nop
 8011bb8:	e0e8      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011bba:	bf00      	nop
        break;
 8011bbc:	e0e6      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8011bbe:	4b39      	ldr	r3, [pc, #228]	; (8011ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011bc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011bc4:	f003 0303 	and.w	r3, r3, #3
 8011bc8:	613b      	str	r3, [r7, #16]
 8011bca:	693b      	ldr	r3, [r7, #16]
 8011bcc:	2b02      	cmp	r3, #2
 8011bce:	d011      	beq.n	8011bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8011bd0:	693b      	ldr	r3, [r7, #16]
 8011bd2:	2b02      	cmp	r3, #2
 8011bd4:	d818      	bhi.n	8011c08 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d003      	beq.n	8011be4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	2b01      	cmp	r3, #1
 8011be0:	d004      	beq.n	8011bec <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          break;
 8011be2:	e011      	b.n	8011c08 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8011be4:	f7fe ff9c 	bl	8010b20 <HAL_RCC_GetPCLK1Freq>
 8011be8:	61f8      	str	r0, [r7, #28]
          break;
 8011bea:	e010      	b.n	8011c0e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          frequency = HAL_RCC_GetSysClockFreq();
 8011bec:	f7fe ff00 	bl	80109f0 <HAL_RCC_GetSysClockFreq>
 8011bf0:	61f8      	str	r0, [r7, #28]
          break;
 8011bf2:	e00c      	b.n	8011c0e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011bf4:	4b2b      	ldr	r3, [pc, #172]	; (8011ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011c00:	d104      	bne.n	8011c0c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = HSI_VALUE;
 8011c02:	4b29      	ldr	r3, [pc, #164]	; (8011ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8011c04:	61fb      	str	r3, [r7, #28]
          break;
 8011c06:	e001      	b.n	8011c0c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 8011c08:	bf00      	nop
 8011c0a:	e0bf      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011c0c:	bf00      	nop
        break;
 8011c0e:	e0bd      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8011c10:	4b24      	ldr	r3, [pc, #144]	; (8011ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c16:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8011c1a:	613b      	str	r3, [r7, #16]
 8011c1c:	693b      	ldr	r3, [r7, #16]
 8011c1e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8011c22:	d02c      	beq.n	8011c7e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8011c24:	693b      	ldr	r3, [r7, #16]
 8011c26:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8011c2a:	d833      	bhi.n	8011c94 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8011c2c:	693b      	ldr	r3, [r7, #16]
 8011c2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8011c32:	d01a      	beq.n	8011c6a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8011c34:	693b      	ldr	r3, [r7, #16]
 8011c36:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8011c3a:	d82b      	bhi.n	8011c94 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8011c3c:	693b      	ldr	r3, [r7, #16]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d004      	beq.n	8011c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8011c42:	693b      	ldr	r3, [r7, #16]
 8011c44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011c48:	d004      	beq.n	8011c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 8011c4a:	e023      	b.n	8011c94 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8011c4c:	f7fe ff68 	bl	8010b20 <HAL_RCC_GetPCLK1Freq>
 8011c50:	61f8      	str	r0, [r7, #28]
          break;
 8011c52:	e026      	b.n	8011ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8011c54:	4b13      	ldr	r3, [pc, #76]	; (8011ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011c5a:	f003 0302 	and.w	r3, r3, #2
 8011c5e:	2b02      	cmp	r3, #2
 8011c60:	d11a      	bne.n	8011c98 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 8011c62:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8011c66:	61fb      	str	r3, [r7, #28]
          break;
 8011c68:	e016      	b.n	8011c98 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011c6a:	4b0e      	ldr	r3, [pc, #56]	; (8011ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011c76:	d111      	bne.n	8011c9c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 8011c78:	4b0b      	ldr	r3, [pc, #44]	; (8011ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8011c7a:	61fb      	str	r3, [r7, #28]
          break;
 8011c7c:	e00e      	b.n	8011c9c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011c7e:	4b09      	ldr	r3, [pc, #36]	; (8011ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011c84:	f003 0302 	and.w	r3, r3, #2
 8011c88:	2b02      	cmp	r3, #2
 8011c8a:	d109      	bne.n	8011ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 8011c8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011c90:	61fb      	str	r3, [r7, #28]
          break;
 8011c92:	e005      	b.n	8011ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 8011c94:	bf00      	nop
 8011c96:	e079      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011c98:	bf00      	nop
 8011c9a:	e077      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011c9c:	bf00      	nop
 8011c9e:	e075      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011ca0:	bf00      	nop
        break;
 8011ca2:	e073      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8011ca4:	40021000 	.word	0x40021000
 8011ca8:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8011cac:	4b3a      	ldr	r3, [pc, #232]	; (8011d98 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8011cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011cb2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8011cb6:	613b      	str	r3, [r7, #16]
 8011cb8:	693b      	ldr	r3, [r7, #16]
 8011cba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011cbe:	d02c      	beq.n	8011d1a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 8011cc0:	693b      	ldr	r3, [r7, #16]
 8011cc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011cc6:	d833      	bhi.n	8011d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8011cc8:	693b      	ldr	r3, [r7, #16]
 8011cca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011cce:	d01a      	beq.n	8011d06 <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 8011cd0:	693b      	ldr	r3, [r7, #16]
 8011cd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011cd6:	d82b      	bhi.n	8011d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8011cd8:	693b      	ldr	r3, [r7, #16]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d004      	beq.n	8011ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 8011cde:	693b      	ldr	r3, [r7, #16]
 8011ce0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011ce4:	d004      	beq.n	8011cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8011ce6:	e023      	b.n	8011d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = HAL_RCC_GetPCLK1Freq();
 8011ce8:	f7fe ff1a 	bl	8010b20 <HAL_RCC_GetPCLK1Freq>
 8011cec:	61f8      	str	r0, [r7, #28]
          break;
 8011cee:	e026      	b.n	8011d3e <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8011cf0:	4b29      	ldr	r3, [pc, #164]	; (8011d98 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8011cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011cf6:	f003 0302 	and.w	r3, r3, #2
 8011cfa:	2b02      	cmp	r3, #2
 8011cfc:	d11a      	bne.n	8011d34 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
              frequency = LSI_VALUE;
 8011cfe:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8011d02:	61fb      	str	r3, [r7, #28]
          break;
 8011d04:	e016      	b.n	8011d34 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011d06:	4b24      	ldr	r3, [pc, #144]	; (8011d98 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011d12:	d111      	bne.n	8011d38 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
            frequency = HSI_VALUE;
 8011d14:	4b21      	ldr	r3, [pc, #132]	; (8011d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 8011d16:	61fb      	str	r3, [r7, #28]
          break;
 8011d18:	e00e      	b.n	8011d38 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011d1a:	4b1f      	ldr	r3, [pc, #124]	; (8011d98 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8011d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d20:	f003 0302 	and.w	r3, r3, #2
 8011d24:	2b02      	cmp	r3, #2
 8011d26:	d109      	bne.n	8011d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = LSE_VALUE;
 8011d28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011d2c:	61fb      	str	r3, [r7, #28]
          break;
 8011d2e:	e005      	b.n	8011d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8011d30:	bf00      	nop
 8011d32:	e02b      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011d34:	bf00      	nop
 8011d36:	e029      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011d38:	bf00      	nop
 8011d3a:	e027      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011d3c:	bf00      	nop
        break;
 8011d3e:	e025      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8011d40:	4b15      	ldr	r3, [pc, #84]	; (8011d98 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8011d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011d46:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011d4a:	613b      	str	r3, [r7, #16]
 8011d4c:	693b      	ldr	r3, [r7, #16]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d004      	beq.n	8011d5c <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 8011d52:	693b      	ldr	r3, [r7, #16]
 8011d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011d58:	d004      	beq.n	8011d64 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 8011d5a:	e00d      	b.n	8011d78 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          frequency = HAL_RCC_GetPCLK1Freq();
 8011d5c:	f7fe fee0 	bl	8010b20 <HAL_RCC_GetPCLK1Freq>
 8011d60:	61f8      	str	r0, [r7, #28]
          break;
 8011d62:	e009      	b.n	8011d78 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011d64:	4b0c      	ldr	r3, [pc, #48]	; (8011d98 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011d70:	d101      	bne.n	8011d76 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
            frequency = HSI_VALUE;
 8011d72:	4b0a      	ldr	r3, [pc, #40]	; (8011d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 8011d74:	61fb      	str	r3, [r7, #28]
          break;
 8011d76:	bf00      	nop
        break;
 8011d78:	e008      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8011d7a:	bf00      	nop
 8011d7c:	e006      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8011d7e:	bf00      	nop
 8011d80:	e004      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8011d82:	bf00      	nop
 8011d84:	e002      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8011d86:	bf00      	nop
 8011d88:	e000      	b.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8011d8a:	bf00      	nop
    }
  }

  return(frequency);
 8011d8c:	69fb      	ldr	r3, [r7, #28]
}
 8011d8e:	4618      	mov	r0, r3
 8011d90:	3720      	adds	r7, #32
 8011d92:	46bd      	mov	sp, r7
 8011d94:	bd80      	pop	{r7, pc}
 8011d96:	bf00      	nop
 8011d98:	40021000 	.word	0x40021000
 8011d9c:	00f42400 	.word	0x00f42400

08011da0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8011da0:	b480      	push	{r7}
 8011da2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8011da4:	4b05      	ldr	r3, [pc, #20]	; (8011dbc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	4a04      	ldr	r2, [pc, #16]	; (8011dbc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8011daa:	f043 0304 	orr.w	r3, r3, #4
 8011dae:	6013      	str	r3, [r2, #0]
}
 8011db0:	bf00      	nop
 8011db2:	46bd      	mov	sp, r7
 8011db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db8:	4770      	bx	lr
 8011dba:	bf00      	nop
 8011dbc:	40021000 	.word	0x40021000

08011dc0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b084      	sub	sp, #16
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
 8011dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011dca:	2300      	movs	r3, #0
 8011dcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8011dce:	4b74      	ldr	r3, [pc, #464]	; (8011fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011dd0:	68db      	ldr	r3, [r3, #12]
 8011dd2:	f003 0303 	and.w	r3, r3, #3
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d018      	beq.n	8011e0c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8011dda:	4b71      	ldr	r3, [pc, #452]	; (8011fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011ddc:	68db      	ldr	r3, [r3, #12]
 8011dde:	f003 0203 	and.w	r2, r3, #3
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	429a      	cmp	r2, r3
 8011de8:	d10d      	bne.n	8011e06 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	681b      	ldr	r3, [r3, #0]
       ||
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d009      	beq.n	8011e06 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8011df2:	4b6b      	ldr	r3, [pc, #428]	; (8011fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011df4:	68db      	ldr	r3, [r3, #12]
 8011df6:	091b      	lsrs	r3, r3, #4
 8011df8:	f003 0307 	and.w	r3, r3, #7
 8011dfc:	1c5a      	adds	r2, r3, #1
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	685b      	ldr	r3, [r3, #4]
       ||
 8011e02:	429a      	cmp	r2, r3
 8011e04:	d047      	beq.n	8011e96 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8011e06:	2301      	movs	r3, #1
 8011e08:	73fb      	strb	r3, [r7, #15]
 8011e0a:	e044      	b.n	8011e96 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	2b03      	cmp	r3, #3
 8011e12:	d018      	beq.n	8011e46 <RCCEx_PLLSAI1_Config+0x86>
 8011e14:	2b03      	cmp	r3, #3
 8011e16:	d825      	bhi.n	8011e64 <RCCEx_PLLSAI1_Config+0xa4>
 8011e18:	2b01      	cmp	r3, #1
 8011e1a:	d002      	beq.n	8011e22 <RCCEx_PLLSAI1_Config+0x62>
 8011e1c:	2b02      	cmp	r3, #2
 8011e1e:	d009      	beq.n	8011e34 <RCCEx_PLLSAI1_Config+0x74>
 8011e20:	e020      	b.n	8011e64 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8011e22:	4b5f      	ldr	r3, [pc, #380]	; (8011fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	f003 0302 	and.w	r3, r3, #2
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d11d      	bne.n	8011e6a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8011e2e:	2301      	movs	r3, #1
 8011e30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011e32:	e01a      	b.n	8011e6a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8011e34:	4b5a      	ldr	r3, [pc, #360]	; (8011fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d116      	bne.n	8011e6e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8011e40:	2301      	movs	r3, #1
 8011e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011e44:	e013      	b.n	8011e6e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8011e46:	4b56      	ldr	r3, [pc, #344]	; (8011fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d10f      	bne.n	8011e72 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8011e52:	4b53      	ldr	r3, [pc, #332]	; (8011fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d109      	bne.n	8011e72 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8011e5e:	2301      	movs	r3, #1
 8011e60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011e62:	e006      	b.n	8011e72 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8011e64:	2301      	movs	r3, #1
 8011e66:	73fb      	strb	r3, [r7, #15]
      break;
 8011e68:	e004      	b.n	8011e74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8011e6a:	bf00      	nop
 8011e6c:	e002      	b.n	8011e74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8011e6e:	bf00      	nop
 8011e70:	e000      	b.n	8011e74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8011e72:	bf00      	nop
    }

    if(status == HAL_OK)
 8011e74:	7bfb      	ldrb	r3, [r7, #15]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d10d      	bne.n	8011e96 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8011e7a:	4b49      	ldr	r3, [pc, #292]	; (8011fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011e7c:	68db      	ldr	r3, [r3, #12]
 8011e7e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	6819      	ldr	r1, [r3, #0]
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	685b      	ldr	r3, [r3, #4]
 8011e8a:	3b01      	subs	r3, #1
 8011e8c:	011b      	lsls	r3, r3, #4
 8011e8e:	430b      	orrs	r3, r1
 8011e90:	4943      	ldr	r1, [pc, #268]	; (8011fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011e92:	4313      	orrs	r3, r2
 8011e94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8011e96:	7bfb      	ldrb	r3, [r7, #15]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d17c      	bne.n	8011f96 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8011e9c:	4b40      	ldr	r3, [pc, #256]	; (8011fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	4a3f      	ldr	r2, [pc, #252]	; (8011fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011ea2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011ea6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011ea8:	f7f9 fb22 	bl	800b4f0 <HAL_GetTick>
 8011eac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8011eae:	e009      	b.n	8011ec4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8011eb0:	f7f9 fb1e 	bl	800b4f0 <HAL_GetTick>
 8011eb4:	4602      	mov	r2, r0
 8011eb6:	68bb      	ldr	r3, [r7, #8]
 8011eb8:	1ad3      	subs	r3, r2, r3
 8011eba:	2b02      	cmp	r3, #2
 8011ebc:	d902      	bls.n	8011ec4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8011ebe:	2303      	movs	r3, #3
 8011ec0:	73fb      	strb	r3, [r7, #15]
        break;
 8011ec2:	e005      	b.n	8011ed0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8011ec4:	4b36      	ldr	r3, [pc, #216]	; (8011fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d1ef      	bne.n	8011eb0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8011ed0:	7bfb      	ldrb	r3, [r7, #15]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d15f      	bne.n	8011f96 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8011ed6:	683b      	ldr	r3, [r7, #0]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d110      	bne.n	8011efe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8011edc:	4b30      	ldr	r3, [pc, #192]	; (8011fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011ede:	691b      	ldr	r3, [r3, #16]
 8011ee0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8011ee4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8011ee8:	687a      	ldr	r2, [r7, #4]
 8011eea:	6892      	ldr	r2, [r2, #8]
 8011eec:	0211      	lsls	r1, r2, #8
 8011eee:	687a      	ldr	r2, [r7, #4]
 8011ef0:	68d2      	ldr	r2, [r2, #12]
 8011ef2:	06d2      	lsls	r2, r2, #27
 8011ef4:	430a      	orrs	r2, r1
 8011ef6:	492a      	ldr	r1, [pc, #168]	; (8011fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011ef8:	4313      	orrs	r3, r2
 8011efa:	610b      	str	r3, [r1, #16]
 8011efc:	e027      	b.n	8011f4e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	2b01      	cmp	r3, #1
 8011f02:	d112      	bne.n	8011f2a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8011f04:	4b26      	ldr	r3, [pc, #152]	; (8011fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011f06:	691b      	ldr	r3, [r3, #16]
 8011f08:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8011f0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8011f10:	687a      	ldr	r2, [r7, #4]
 8011f12:	6892      	ldr	r2, [r2, #8]
 8011f14:	0211      	lsls	r1, r2, #8
 8011f16:	687a      	ldr	r2, [r7, #4]
 8011f18:	6912      	ldr	r2, [r2, #16]
 8011f1a:	0852      	lsrs	r2, r2, #1
 8011f1c:	3a01      	subs	r2, #1
 8011f1e:	0552      	lsls	r2, r2, #21
 8011f20:	430a      	orrs	r2, r1
 8011f22:	491f      	ldr	r1, [pc, #124]	; (8011fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011f24:	4313      	orrs	r3, r2
 8011f26:	610b      	str	r3, [r1, #16]
 8011f28:	e011      	b.n	8011f4e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8011f2a:	4b1d      	ldr	r3, [pc, #116]	; (8011fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011f2c:	691b      	ldr	r3, [r3, #16]
 8011f2e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8011f32:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8011f36:	687a      	ldr	r2, [r7, #4]
 8011f38:	6892      	ldr	r2, [r2, #8]
 8011f3a:	0211      	lsls	r1, r2, #8
 8011f3c:	687a      	ldr	r2, [r7, #4]
 8011f3e:	6952      	ldr	r2, [r2, #20]
 8011f40:	0852      	lsrs	r2, r2, #1
 8011f42:	3a01      	subs	r2, #1
 8011f44:	0652      	lsls	r2, r2, #25
 8011f46:	430a      	orrs	r2, r1
 8011f48:	4915      	ldr	r1, [pc, #84]	; (8011fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011f4a:	4313      	orrs	r3, r2
 8011f4c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8011f4e:	4b14      	ldr	r3, [pc, #80]	; (8011fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	4a13      	ldr	r2, [pc, #76]	; (8011fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011f54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011f58:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011f5a:	f7f9 fac9 	bl	800b4f0 <HAL_GetTick>
 8011f5e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8011f60:	e009      	b.n	8011f76 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8011f62:	f7f9 fac5 	bl	800b4f0 <HAL_GetTick>
 8011f66:	4602      	mov	r2, r0
 8011f68:	68bb      	ldr	r3, [r7, #8]
 8011f6a:	1ad3      	subs	r3, r2, r3
 8011f6c:	2b02      	cmp	r3, #2
 8011f6e:	d902      	bls.n	8011f76 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8011f70:	2303      	movs	r3, #3
 8011f72:	73fb      	strb	r3, [r7, #15]
          break;
 8011f74:	e005      	b.n	8011f82 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8011f76:	4b0a      	ldr	r3, [pc, #40]	; (8011fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d0ef      	beq.n	8011f62 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8011f82:	7bfb      	ldrb	r3, [r7, #15]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d106      	bne.n	8011f96 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8011f88:	4b05      	ldr	r3, [pc, #20]	; (8011fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011f8a:	691a      	ldr	r2, [r3, #16]
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	699b      	ldr	r3, [r3, #24]
 8011f90:	4903      	ldr	r1, [pc, #12]	; (8011fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011f92:	4313      	orrs	r3, r2
 8011f94:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8011f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	3710      	adds	r7, #16
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd80      	pop	{r7, pc}
 8011fa0:	40021000 	.word	0x40021000

08011fa4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b084      	sub	sp, #16
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
 8011fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011fae:	2300      	movs	r3, #0
 8011fb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8011fb2:	4b69      	ldr	r3, [pc, #420]	; (8012158 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011fb4:	68db      	ldr	r3, [r3, #12]
 8011fb6:	f003 0303 	and.w	r3, r3, #3
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d018      	beq.n	8011ff0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8011fbe:	4b66      	ldr	r3, [pc, #408]	; (8012158 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011fc0:	68db      	ldr	r3, [r3, #12]
 8011fc2:	f003 0203 	and.w	r2, r3, #3
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	429a      	cmp	r2, r3
 8011fcc:	d10d      	bne.n	8011fea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	681b      	ldr	r3, [r3, #0]
       ||
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d009      	beq.n	8011fea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8011fd6:	4b60      	ldr	r3, [pc, #384]	; (8012158 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011fd8:	68db      	ldr	r3, [r3, #12]
 8011fda:	091b      	lsrs	r3, r3, #4
 8011fdc:	f003 0307 	and.w	r3, r3, #7
 8011fe0:	1c5a      	adds	r2, r3, #1
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	685b      	ldr	r3, [r3, #4]
       ||
 8011fe6:	429a      	cmp	r2, r3
 8011fe8:	d047      	beq.n	801207a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8011fea:	2301      	movs	r3, #1
 8011fec:	73fb      	strb	r3, [r7, #15]
 8011fee:	e044      	b.n	801207a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	2b03      	cmp	r3, #3
 8011ff6:	d018      	beq.n	801202a <RCCEx_PLLSAI2_Config+0x86>
 8011ff8:	2b03      	cmp	r3, #3
 8011ffa:	d825      	bhi.n	8012048 <RCCEx_PLLSAI2_Config+0xa4>
 8011ffc:	2b01      	cmp	r3, #1
 8011ffe:	d002      	beq.n	8012006 <RCCEx_PLLSAI2_Config+0x62>
 8012000:	2b02      	cmp	r3, #2
 8012002:	d009      	beq.n	8012018 <RCCEx_PLLSAI2_Config+0x74>
 8012004:	e020      	b.n	8012048 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8012006:	4b54      	ldr	r3, [pc, #336]	; (8012158 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	f003 0302 	and.w	r3, r3, #2
 801200e:	2b00      	cmp	r3, #0
 8012010:	d11d      	bne.n	801204e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8012012:	2301      	movs	r3, #1
 8012014:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012016:	e01a      	b.n	801204e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8012018:	4b4f      	ldr	r3, [pc, #316]	; (8012158 <RCCEx_PLLSAI2_Config+0x1b4>)
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012020:	2b00      	cmp	r3, #0
 8012022:	d116      	bne.n	8012052 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8012024:	2301      	movs	r3, #1
 8012026:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012028:	e013      	b.n	8012052 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801202a:	4b4b      	ldr	r3, [pc, #300]	; (8012158 <RCCEx_PLLSAI2_Config+0x1b4>)
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012032:	2b00      	cmp	r3, #0
 8012034:	d10f      	bne.n	8012056 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8012036:	4b48      	ldr	r3, [pc, #288]	; (8012158 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801203e:	2b00      	cmp	r3, #0
 8012040:	d109      	bne.n	8012056 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8012042:	2301      	movs	r3, #1
 8012044:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012046:	e006      	b.n	8012056 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8012048:	2301      	movs	r3, #1
 801204a:	73fb      	strb	r3, [r7, #15]
      break;
 801204c:	e004      	b.n	8012058 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 801204e:	bf00      	nop
 8012050:	e002      	b.n	8012058 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8012052:	bf00      	nop
 8012054:	e000      	b.n	8012058 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8012056:	bf00      	nop
    }

    if(status == HAL_OK)
 8012058:	7bfb      	ldrb	r3, [r7, #15]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d10d      	bne.n	801207a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 801205e:	4b3e      	ldr	r3, [pc, #248]	; (8012158 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012060:	68db      	ldr	r3, [r3, #12]
 8012062:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	6819      	ldr	r1, [r3, #0]
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	685b      	ldr	r3, [r3, #4]
 801206e:	3b01      	subs	r3, #1
 8012070:	011b      	lsls	r3, r3, #4
 8012072:	430b      	orrs	r3, r1
 8012074:	4938      	ldr	r1, [pc, #224]	; (8012158 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012076:	4313      	orrs	r3, r2
 8012078:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 801207a:	7bfb      	ldrb	r3, [r7, #15]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d166      	bne.n	801214e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8012080:	4b35      	ldr	r3, [pc, #212]	; (8012158 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	4a34      	ldr	r2, [pc, #208]	; (8012158 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801208a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801208c:	f7f9 fa30 	bl	800b4f0 <HAL_GetTick>
 8012090:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8012092:	e009      	b.n	80120a8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8012094:	f7f9 fa2c 	bl	800b4f0 <HAL_GetTick>
 8012098:	4602      	mov	r2, r0
 801209a:	68bb      	ldr	r3, [r7, #8]
 801209c:	1ad3      	subs	r3, r2, r3
 801209e:	2b02      	cmp	r3, #2
 80120a0:	d902      	bls.n	80120a8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80120a2:	2303      	movs	r3, #3
 80120a4:	73fb      	strb	r3, [r7, #15]
        break;
 80120a6:	e005      	b.n	80120b4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80120a8:	4b2b      	ldr	r3, [pc, #172]	; (8012158 <RCCEx_PLLSAI2_Config+0x1b4>)
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d1ef      	bne.n	8012094 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80120b4:	7bfb      	ldrb	r3, [r7, #15]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d149      	bne.n	801214e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80120ba:	683b      	ldr	r3, [r7, #0]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d110      	bne.n	80120e2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80120c0:	4b25      	ldr	r3, [pc, #148]	; (8012158 <RCCEx_PLLSAI2_Config+0x1b4>)
 80120c2:	695b      	ldr	r3, [r3, #20]
 80120c4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80120c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80120cc:	687a      	ldr	r2, [r7, #4]
 80120ce:	6892      	ldr	r2, [r2, #8]
 80120d0:	0211      	lsls	r1, r2, #8
 80120d2:	687a      	ldr	r2, [r7, #4]
 80120d4:	68d2      	ldr	r2, [r2, #12]
 80120d6:	06d2      	lsls	r2, r2, #27
 80120d8:	430a      	orrs	r2, r1
 80120da:	491f      	ldr	r1, [pc, #124]	; (8012158 <RCCEx_PLLSAI2_Config+0x1b4>)
 80120dc:	4313      	orrs	r3, r2
 80120de:	614b      	str	r3, [r1, #20]
 80120e0:	e011      	b.n	8012106 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80120e2:	4b1d      	ldr	r3, [pc, #116]	; (8012158 <RCCEx_PLLSAI2_Config+0x1b4>)
 80120e4:	695b      	ldr	r3, [r3, #20]
 80120e6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80120ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80120ee:	687a      	ldr	r2, [r7, #4]
 80120f0:	6892      	ldr	r2, [r2, #8]
 80120f2:	0211      	lsls	r1, r2, #8
 80120f4:	687a      	ldr	r2, [r7, #4]
 80120f6:	6912      	ldr	r2, [r2, #16]
 80120f8:	0852      	lsrs	r2, r2, #1
 80120fa:	3a01      	subs	r2, #1
 80120fc:	0652      	lsls	r2, r2, #25
 80120fe:	430a      	orrs	r2, r1
 8012100:	4915      	ldr	r1, [pc, #84]	; (8012158 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012102:	4313      	orrs	r3, r2
 8012104:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8012106:	4b14      	ldr	r3, [pc, #80]	; (8012158 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	4a13      	ldr	r2, [pc, #76]	; (8012158 <RCCEx_PLLSAI2_Config+0x1b4>)
 801210c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012110:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012112:	f7f9 f9ed 	bl	800b4f0 <HAL_GetTick>
 8012116:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8012118:	e009      	b.n	801212e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 801211a:	f7f9 f9e9 	bl	800b4f0 <HAL_GetTick>
 801211e:	4602      	mov	r2, r0
 8012120:	68bb      	ldr	r3, [r7, #8]
 8012122:	1ad3      	subs	r3, r2, r3
 8012124:	2b02      	cmp	r3, #2
 8012126:	d902      	bls.n	801212e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8012128:	2303      	movs	r3, #3
 801212a:	73fb      	strb	r3, [r7, #15]
          break;
 801212c:	e005      	b.n	801213a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 801212e:	4b0a      	ldr	r3, [pc, #40]	; (8012158 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012136:	2b00      	cmp	r3, #0
 8012138:	d0ef      	beq.n	801211a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 801213a:	7bfb      	ldrb	r3, [r7, #15]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d106      	bne.n	801214e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8012140:	4b05      	ldr	r3, [pc, #20]	; (8012158 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012142:	695a      	ldr	r2, [r3, #20]
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	695b      	ldr	r3, [r3, #20]
 8012148:	4903      	ldr	r1, [pc, #12]	; (8012158 <RCCEx_PLLSAI2_Config+0x1b4>)
 801214a:	4313      	orrs	r3, r2
 801214c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 801214e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012150:	4618      	mov	r0, r3
 8012152:	3710      	adds	r7, #16
 8012154:	46bd      	mov	sp, r7
 8012156:	bd80      	pop	{r7, pc}
 8012158:	40021000 	.word	0x40021000

0801215c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 801215c:	b480      	push	{r7}
 801215e:	b089      	sub	sp, #36	; 0x24
 8012160:	af00      	add	r7, sp, #0
 8012162:	6078      	str	r0, [r7, #4]
 8012164:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8012166:	2300      	movs	r3, #0
 8012168:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 801216a:	2300      	movs	r3, #0
 801216c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 801216e:	2300      	movs	r3, #0
 8012170:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012178:	d10c      	bne.n	8012194 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 801217a:	4b77      	ldr	r3, [pc, #476]	; (8012358 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 801217c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012180:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8012184:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8012186:	69bb      	ldr	r3, [r7, #24]
 8012188:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801218c:	d112      	bne.n	80121b4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 801218e:	4b73      	ldr	r3, [pc, #460]	; (801235c <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8012190:	61fb      	str	r3, [r7, #28]
 8012192:	e00f      	b.n	80121b4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801219a:	d10b      	bne.n	80121b4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 801219c:	4b6e      	ldr	r3, [pc, #440]	; (8012358 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 801219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80121a2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80121a6:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80121a8:	69bb      	ldr	r3, [r7, #24]
 80121aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80121ae:	d101      	bne.n	80121b4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80121b0:	4b6a      	ldr	r3, [pc, #424]	; (801235c <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 80121b2:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80121b4:	69fb      	ldr	r3, [r7, #28]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	f040 80c6 	bne.w	8012348 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 80121bc:	683b      	ldr	r3, [r7, #0]
 80121be:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80121c0:	69bb      	ldr	r3, [r7, #24]
 80121c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80121c6:	d003      	beq.n	80121d0 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80121c8:	69bb      	ldr	r3, [r7, #24]
 80121ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80121ce:	d13b      	bne.n	8012248 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80121d0:	4b61      	ldr	r3, [pc, #388]	; (8012358 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80121d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80121dc:	f040 80b3 	bne.w	8012346 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 80121e0:	4b5d      	ldr	r3, [pc, #372]	; (8012358 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80121e2:	68db      	ldr	r3, [r3, #12]
 80121e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	f000 80ac 	beq.w	8012346 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80121ee:	4b5a      	ldr	r3, [pc, #360]	; (8012358 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80121f0:	68db      	ldr	r3, [r3, #12]
 80121f2:	091b      	lsrs	r3, r3, #4
 80121f4:	f003 0307 	and.w	r3, r3, #7
 80121f8:	3301      	adds	r3, #1
 80121fa:	693a      	ldr	r2, [r7, #16]
 80121fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8012200:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8012202:	4b55      	ldr	r3, [pc, #340]	; (8012358 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012204:	68db      	ldr	r3, [r3, #12]
 8012206:	0a1b      	lsrs	r3, r3, #8
 8012208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801220c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 801220e:	4b52      	ldr	r3, [pc, #328]	; (8012358 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012210:	68db      	ldr	r3, [r3, #12]
 8012212:	0edb      	lsrs	r3, r3, #27
 8012214:	f003 031f 	and.w	r3, r3, #31
 8012218:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 801221a:	697b      	ldr	r3, [r7, #20]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d10a      	bne.n	8012236 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8012220:	4b4d      	ldr	r3, [pc, #308]	; (8012358 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012222:	68db      	ldr	r3, [r3, #12]
 8012224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012228:	2b00      	cmp	r3, #0
 801222a:	d002      	beq.n	8012232 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 801222c:	2311      	movs	r3, #17
 801222e:	617b      	str	r3, [r7, #20]
 8012230:	e001      	b.n	8012236 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 8012232:	2307      	movs	r3, #7
 8012234:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8012236:	693b      	ldr	r3, [r7, #16]
 8012238:	68fa      	ldr	r2, [r7, #12]
 801223a:	fb03 f202 	mul.w	r2, r3, r2
 801223e:	697b      	ldr	r3, [r7, #20]
 8012240:	fbb2 f3f3 	udiv	r3, r2, r3
 8012244:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8012246:	e07e      	b.n	8012346 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8012248:	69bb      	ldr	r3, [r7, #24]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d139      	bne.n	80122c2 <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 801224e:	4b42      	ldr	r3, [pc, #264]	; (8012358 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012256:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801225a:	d175      	bne.n	8012348 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 801225c:	4b3e      	ldr	r3, [pc, #248]	; (8012358 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 801225e:	691b      	ldr	r3, [r3, #16]
 8012260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012264:	2b00      	cmp	r3, #0
 8012266:	d06f      	beq.n	8012348 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8012268:	4b3b      	ldr	r3, [pc, #236]	; (8012358 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 801226a:	68db      	ldr	r3, [r3, #12]
 801226c:	091b      	lsrs	r3, r3, #4
 801226e:	f003 0307 	and.w	r3, r3, #7
 8012272:	3301      	adds	r3, #1
 8012274:	693a      	ldr	r2, [r7, #16]
 8012276:	fbb2 f3f3 	udiv	r3, r2, r3
 801227a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 801227c:	4b36      	ldr	r3, [pc, #216]	; (8012358 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 801227e:	691b      	ldr	r3, [r3, #16]
 8012280:	0a1b      	lsrs	r3, r3, #8
 8012282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012286:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8012288:	4b33      	ldr	r3, [pc, #204]	; (8012358 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 801228a:	691b      	ldr	r3, [r3, #16]
 801228c:	0edb      	lsrs	r3, r3, #27
 801228e:	f003 031f 	and.w	r3, r3, #31
 8012292:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8012294:	697b      	ldr	r3, [r7, #20]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d10a      	bne.n	80122b0 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 801229a:	4b2f      	ldr	r3, [pc, #188]	; (8012358 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 801229c:	691b      	ldr	r3, [r3, #16]
 801229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d002      	beq.n	80122ac <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 80122a6:	2311      	movs	r3, #17
 80122a8:	617b      	str	r3, [r7, #20]
 80122aa:	e001      	b.n	80122b0 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 80122ac:	2307      	movs	r3, #7
 80122ae:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80122b0:	693b      	ldr	r3, [r7, #16]
 80122b2:	68fa      	ldr	r2, [r7, #12]
 80122b4:	fb03 f202 	mul.w	r2, r3, r2
 80122b8:	697b      	ldr	r3, [r7, #20]
 80122ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80122be:	61fb      	str	r3, [r7, #28]
 80122c0:	e042      	b.n	8012348 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80122c2:	69bb      	ldr	r3, [r7, #24]
 80122c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80122c8:	d003      	beq.n	80122d2 <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 80122ca:	69bb      	ldr	r3, [r7, #24]
 80122cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80122d0:	d13a      	bne.n	8012348 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80122d2:	4b21      	ldr	r3, [pc, #132]	; (8012358 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80122da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80122de:	d133      	bne.n	8012348 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 80122e0:	4b1d      	ldr	r3, [pc, #116]	; (8012358 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80122e2:	695b      	ldr	r3, [r3, #20]
 80122e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d02d      	beq.n	8012348 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80122ec:	4b1a      	ldr	r3, [pc, #104]	; (8012358 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80122ee:	68db      	ldr	r3, [r3, #12]
 80122f0:	091b      	lsrs	r3, r3, #4
 80122f2:	f003 0307 	and.w	r3, r3, #7
 80122f6:	3301      	adds	r3, #1
 80122f8:	693a      	ldr	r2, [r7, #16]
 80122fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80122fe:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8012300:	4b15      	ldr	r3, [pc, #84]	; (8012358 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012302:	695b      	ldr	r3, [r3, #20]
 8012304:	0a1b      	lsrs	r3, r3, #8
 8012306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801230a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 801230c:	4b12      	ldr	r3, [pc, #72]	; (8012358 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 801230e:	695b      	ldr	r3, [r3, #20]
 8012310:	0edb      	lsrs	r3, r3, #27
 8012312:	f003 031f 	and.w	r3, r3, #31
 8012316:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8012318:	697b      	ldr	r3, [r7, #20]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d10a      	bne.n	8012334 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 801231e:	4b0e      	ldr	r3, [pc, #56]	; (8012358 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012320:	695b      	ldr	r3, [r3, #20]
 8012322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012326:	2b00      	cmp	r3, #0
 8012328:	d002      	beq.n	8012330 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 801232a:	2311      	movs	r3, #17
 801232c:	617b      	str	r3, [r7, #20]
 801232e:	e001      	b.n	8012334 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8012330:	2307      	movs	r3, #7
 8012332:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8012334:	693b      	ldr	r3, [r7, #16]
 8012336:	68fa      	ldr	r2, [r7, #12]
 8012338:	fb03 f202 	mul.w	r2, r3, r2
 801233c:	697b      	ldr	r3, [r7, #20]
 801233e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012342:	61fb      	str	r3, [r7, #28]
 8012344:	e000      	b.n	8012348 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8012346:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8012348:	69fb      	ldr	r3, [r7, #28]
}
 801234a:	4618      	mov	r0, r3
 801234c:	3724      	adds	r7, #36	; 0x24
 801234e:	46bd      	mov	sp, r7
 8012350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012354:	4770      	bx	lr
 8012356:	bf00      	nop
 8012358:	40021000 	.word	0x40021000
 801235c:	001fff68 	.word	0x001fff68

08012360 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8012360:	b580      	push	{r7, lr}
 8012362:	b088      	sub	sp, #32
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d101      	bne.n	8012372 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 801236e:	2301      	movs	r3, #1
 8012370:	e155      	b.n	801261e <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8012378:	b2db      	uxtb	r3, r3
 801237a:	2b00      	cmp	r3, #0
 801237c:	d106      	bne.n	801238c <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	2200      	movs	r2, #0
 8012382:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8012386:	6878      	ldr	r0, [r7, #4]
 8012388:	f7f0 f964 	bl	8002654 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 801238c:	6878      	ldr	r0, [r7, #4]
 801238e:	f000 f959 	bl	8012644 <SAI_Disable>
 8012392:	4603      	mov	r3, r0
 8012394:	2b00      	cmp	r3, #0
 8012396:	d001      	beq.n	801239c <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8012398:	2301      	movs	r3, #1
 801239a:	e140      	b.n	801261e <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2202      	movs	r2, #2
 80123a0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	68db      	ldr	r3, [r3, #12]
 80123a8:	2b02      	cmp	r3, #2
 80123aa:	d00c      	beq.n	80123c6 <HAL_SAI_Init+0x66>
 80123ac:	2b02      	cmp	r3, #2
 80123ae:	d80d      	bhi.n	80123cc <HAL_SAI_Init+0x6c>
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d002      	beq.n	80123ba <HAL_SAI_Init+0x5a>
 80123b4:	2b01      	cmp	r3, #1
 80123b6:	d003      	beq.n	80123c0 <HAL_SAI_Init+0x60>
 80123b8:	e008      	b.n	80123cc <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80123ba:	2300      	movs	r3, #0
 80123bc:	61fb      	str	r3, [r7, #28]
      break;
 80123be:	e008      	b.n	80123d2 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80123c0:	2310      	movs	r3, #16
 80123c2:	61fb      	str	r3, [r7, #28]
      break;
 80123c4:	e005      	b.n	80123d2 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80123c6:	2320      	movs	r3, #32
 80123c8:	61fb      	str	r3, [r7, #28]
      break;
 80123ca:	e002      	b.n	80123d2 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 80123cc:	2300      	movs	r3, #0
 80123ce:	61fb      	str	r3, [r7, #28]
      break;
 80123d0:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	689b      	ldr	r3, [r3, #8]
 80123d6:	2b03      	cmp	r3, #3
 80123d8:	d81d      	bhi.n	8012416 <HAL_SAI_Init+0xb6>
 80123da:	a201      	add	r2, pc, #4	; (adr r2, 80123e0 <HAL_SAI_Init+0x80>)
 80123dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123e0:	080123f1 	.word	0x080123f1
 80123e4:	080123f7 	.word	0x080123f7
 80123e8:	080123ff 	.word	0x080123ff
 80123ec:	08012407 	.word	0x08012407
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80123f0:	2300      	movs	r3, #0
 80123f2:	617b      	str	r3, [r7, #20]
      break;
 80123f4:	e012      	b.n	801241c <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80123f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80123fa:	617b      	str	r3, [r7, #20]
      break;
 80123fc:	e00e      	b.n	801241c <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80123fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012402:	617b      	str	r3, [r7, #20]
      break;
 8012404:	e00a      	b.n	801241c <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8012406:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801240a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 801240c:	69fb      	ldr	r3, [r7, #28]
 801240e:	f043 0301 	orr.w	r3, r3, #1
 8012412:	61fb      	str	r3, [r7, #28]
      break;
 8012414:	e002      	b.n	801241c <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8012416:	2300      	movs	r3, #0
 8012418:	617b      	str	r3, [r7, #20]
      break;
 801241a:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	4a81      	ldr	r2, [pc, #516]	; (8012628 <HAL_SAI_Init+0x2c8>)
 8012422:	4293      	cmp	r3, r2
 8012424:	d004      	beq.n	8012430 <HAL_SAI_Init+0xd0>
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	4a80      	ldr	r2, [pc, #512]	; (801262c <HAL_SAI_Init+0x2cc>)
 801242c:	4293      	cmp	r3, r2
 801242e:	d103      	bne.n	8012438 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8012430:	4a7f      	ldr	r2, [pc, #508]	; (8012630 <HAL_SAI_Init+0x2d0>)
 8012432:	69fb      	ldr	r3, [r7, #28]
 8012434:	6013      	str	r3, [r2, #0]
 8012436:	e002      	b.n	801243e <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8012438:	4a7e      	ldr	r2, [pc, #504]	; (8012634 <HAL_SAI_Init+0x2d4>)
 801243a:	69fb      	ldr	r3, [r7, #28]
 801243c:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	69db      	ldr	r3, [r3, #28]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d041      	beq.n	80124ca <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	4a77      	ldr	r2, [pc, #476]	; (8012628 <HAL_SAI_Init+0x2c8>)
 801244c:	4293      	cmp	r3, r2
 801244e:	d004      	beq.n	801245a <HAL_SAI_Init+0xfa>
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	4a75      	ldr	r2, [pc, #468]	; (801262c <HAL_SAI_Init+0x2cc>)
 8012456:	4293      	cmp	r3, r2
 8012458:	d105      	bne.n	8012466 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 801245a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801245e:	f7fe fee7 	bl	8011230 <HAL_RCCEx_GetPeriphCLKFreq>
 8012462:	6138      	str	r0, [r7, #16]
 8012464:	e004      	b.n	8012470 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8012466:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801246a:	f7fe fee1 	bl	8011230 <HAL_RCCEx_GetPeriphCLKFreq>
 801246e:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8012470:	693a      	ldr	r2, [r7, #16]
 8012472:	4613      	mov	r3, r2
 8012474:	009b      	lsls	r3, r3, #2
 8012476:	4413      	add	r3, r2
 8012478:	005b      	lsls	r3, r3, #1
 801247a:	461a      	mov	r2, r3
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	69db      	ldr	r3, [r3, #28]
 8012480:	025b      	lsls	r3, r3, #9
 8012482:	fbb2 f3f3 	udiv	r3, r2, r3
 8012486:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	4a6b      	ldr	r2, [pc, #428]	; (8012638 <HAL_SAI_Init+0x2d8>)
 801248c:	fba2 2303 	umull	r2, r3, r2, r3
 8012490:	08da      	lsrs	r2, r3, #3
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8012496:	68f9      	ldr	r1, [r7, #12]
 8012498:	4b67      	ldr	r3, [pc, #412]	; (8012638 <HAL_SAI_Init+0x2d8>)
 801249a:	fba3 2301 	umull	r2, r3, r3, r1
 801249e:	08da      	lsrs	r2, r3, #3
 80124a0:	4613      	mov	r3, r2
 80124a2:	009b      	lsls	r3, r3, #2
 80124a4:	4413      	add	r3, r2
 80124a6:	005b      	lsls	r3, r3, #1
 80124a8:	1aca      	subs	r2, r1, r3
 80124aa:	2a08      	cmp	r2, #8
 80124ac:	d904      	bls.n	80124b8 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	6a1b      	ldr	r3, [r3, #32]
 80124b2:	1c5a      	adds	r2, r3, #1
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124bc:	2b04      	cmp	r3, #4
 80124be:	d104      	bne.n	80124ca <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	6a1b      	ldr	r3, [r3, #32]
 80124c4:	085a      	lsrs	r2, r3, #1
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	685b      	ldr	r3, [r3, #4]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d003      	beq.n	80124da <HAL_SAI_Init+0x17a>
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	685b      	ldr	r3, [r3, #4]
 80124d6:	2b02      	cmp	r3, #2
 80124d8:	d109      	bne.n	80124ee <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124de:	2b01      	cmp	r3, #1
 80124e0:	d101      	bne.n	80124e6 <HAL_SAI_Init+0x186>
 80124e2:	2300      	movs	r3, #0
 80124e4:	e001      	b.n	80124ea <HAL_SAI_Init+0x18a>
 80124e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80124ea:	61bb      	str	r3, [r7, #24]
 80124ec:	e008      	b.n	8012500 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124f2:	2b01      	cmp	r3, #1
 80124f4:	d102      	bne.n	80124fc <HAL_SAI_Init+0x19c>
 80124f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80124fa:	e000      	b.n	80124fe <HAL_SAI_Init+0x19e>
 80124fc:	2300      	movs	r3, #0
 80124fe:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	6819      	ldr	r1, [r3, #0]
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	681a      	ldr	r2, [r3, #0]
 801250a:	4b4c      	ldr	r3, [pc, #304]	; (801263c <HAL_SAI_Init+0x2dc>)
 801250c:	400b      	ands	r3, r1
 801250e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	6819      	ldr	r1, [r3, #0]
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	685a      	ldr	r2, [r3, #4]
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801251e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8012524:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801252a:	431a      	orrs	r2, r3
 801252c:	69bb      	ldr	r3, [r7, #24]
 801252e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8012530:	697b      	ldr	r3, [r7, #20]
 8012532:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8012538:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	691b      	ldr	r3, [r3, #16]
 801253e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8012544:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	6a1b      	ldr	r3, [r3, #32]
 801254a:	051b      	lsls	r3, r3, #20
 801254c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	430a      	orrs	r2, r1
 8012554:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	685b      	ldr	r3, [r3, #4]
 801255c:	687a      	ldr	r2, [r7, #4]
 801255e:	6812      	ldr	r2, [r2, #0]
 8012560:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8012564:	f023 030f 	bic.w	r3, r3, #15
 8012568:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	6859      	ldr	r1, [r3, #4]
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	699a      	ldr	r2, [r3, #24]
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012578:	431a      	orrs	r2, r3
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801257e:	431a      	orrs	r2, r3
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	430a      	orrs	r2, r1
 8012586:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	6899      	ldr	r1, [r3, #8]
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	681a      	ldr	r2, [r3, #0]
 8012592:	4b2b      	ldr	r3, [pc, #172]	; (8012640 <HAL_SAI_Init+0x2e0>)
 8012594:	400b      	ands	r3, r1
 8012596:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	6899      	ldr	r1, [r3, #8]
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125a2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80125a8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80125ae:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 80125b4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80125ba:	3b01      	subs	r3, #1
 80125bc:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80125be:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	430a      	orrs	r2, r1
 80125c6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	68d9      	ldr	r1, [r3, #12]
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	681a      	ldr	r2, [r3, #0]
 80125d2:	f24f 0320 	movw	r3, #61472	; 0xf020
 80125d6:	400b      	ands	r3, r1
 80125d8:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	68d9      	ldr	r1, [r3, #12]
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80125e8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80125ee:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80125f0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80125f6:	3b01      	subs	r3, #1
 80125f8:	021b      	lsls	r3, r3, #8
 80125fa:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	430a      	orrs	r2, r1
 8012602:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	2200      	movs	r2, #0
 8012608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	2201      	movs	r2, #1
 8012610:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	2200      	movs	r2, #0
 8012618:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801261c:	2300      	movs	r3, #0
}
 801261e:	4618      	mov	r0, r3
 8012620:	3720      	adds	r7, #32
 8012622:	46bd      	mov	sp, r7
 8012624:	bd80      	pop	{r7, pc}
 8012626:	bf00      	nop
 8012628:	40015404 	.word	0x40015404
 801262c:	40015424 	.word	0x40015424
 8012630:	40015400 	.word	0x40015400
 8012634:	40015800 	.word	0x40015800
 8012638:	cccccccd 	.word	0xcccccccd
 801263c:	ff05c010 	.word	0xff05c010
 8012640:	fff88000 	.word	0xfff88000

08012644 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8012644:	b480      	push	{r7}
 8012646:	b085      	sub	sp, #20
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 801264c:	4b18      	ldr	r3, [pc, #96]	; (80126b0 <SAI_Disable+0x6c>)
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	4a18      	ldr	r2, [pc, #96]	; (80126b4 <SAI_Disable+0x70>)
 8012652:	fba2 2303 	umull	r2, r3, r2, r3
 8012656:	0b1b      	lsrs	r3, r3, #12
 8012658:	009b      	lsls	r3, r3, #2
 801265a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 801265c:	2300      	movs	r3, #0
 801265e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	681a      	ldr	r2, [r3, #0]
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801266e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d10a      	bne.n	801268c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801267c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8012686:	2303      	movs	r3, #3
 8012688:	72fb      	strb	r3, [r7, #11]
      break;
 801268a:	e009      	b.n	80126a0 <SAI_Disable+0x5c>
    }
    count--;
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	3b01      	subs	r3, #1
 8012690:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801269c:	2b00      	cmp	r3, #0
 801269e:	d1e7      	bne.n	8012670 <SAI_Disable+0x2c>

  return status;
 80126a0:	7afb      	ldrb	r3, [r7, #11]
}
 80126a2:	4618      	mov	r0, r3
 80126a4:	3714      	adds	r7, #20
 80126a6:	46bd      	mov	sp, r7
 80126a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ac:	4770      	bx	lr
 80126ae:	bf00      	nop
 80126b0:	20000194 	.word	0x20000194
 80126b4:	95cbec1b 	.word	0x95cbec1b

080126b8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b082      	sub	sp, #8
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d101      	bne.n	80126ca <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80126c6:	2301      	movs	r3, #1
 80126c8:	e022      	b.n	8012710 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80126d0:	b2db      	uxtb	r3, r3
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d105      	bne.n	80126e2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	2200      	movs	r2, #0
 80126da:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80126dc:	6878      	ldr	r0, [r7, #4]
 80126de:	f7f0 f863 	bl	80027a8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	2203      	movs	r2, #3
 80126e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80126ea:	6878      	ldr	r0, [r7, #4]
 80126ec:	f000 f814 	bl	8012718 <HAL_SD_InitCard>
 80126f0:	4603      	mov	r3, r0
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d001      	beq.n	80126fa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80126f6:	2301      	movs	r3, #1
 80126f8:	e00a      	b.n	8012710 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	2200      	movs	r2, #0
 80126fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	2200      	movs	r2, #0
 8012704:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	2201      	movs	r2, #1
 801270a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 801270e:	2300      	movs	r3, #0
}
 8012710:	4618      	mov	r0, r3
 8012712:	3708      	adds	r7, #8
 8012714:	46bd      	mov	sp, r7
 8012716:	bd80      	pop	{r7, pc}

08012718 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8012718:	b5b0      	push	{r4, r5, r7, lr}
 801271a:	b08e      	sub	sp, #56	; 0x38
 801271c:	af04      	add	r7, sp, #16
 801271e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8012720:	2300      	movs	r3, #0
 8012722:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8012724:	2300      	movs	r3, #0
 8012726:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8012728:	2300      	movs	r3, #0
 801272a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 801272c:	2300      	movs	r3, #0
 801272e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8012730:	2300      	movs	r3, #0
 8012732:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8012734:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8012738:	f7fe fd7a 	bl	8011230 <HAL_RCCEx_GetPeriphCLKFreq>
 801273c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 801273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012740:	2b00      	cmp	r3, #0
 8012742:	d109      	bne.n	8012758 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	2201      	movs	r2, #1
 8012748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8012752:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8012754:	2301      	movs	r3, #1
 8012756:	e07b      	b.n	8012850 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8012758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801275a:	09db      	lsrs	r3, r3, #7
 801275c:	4a3e      	ldr	r2, [pc, #248]	; (8012858 <HAL_SD_InitCard+0x140>)
 801275e:	fba2 2303 	umull	r2, r3, r2, r3
 8012762:	091b      	lsrs	r3, r3, #4
 8012764:	3b02      	subs	r3, #2
 8012766:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	681d      	ldr	r5, [r3, #0]
 801276c:	466c      	mov	r4, sp
 801276e:	f107 0314 	add.w	r3, r7, #20
 8012772:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012776:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801277a:	f107 0308 	add.w	r3, r7, #8
 801277e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012780:	4628      	mov	r0, r5
 8012782:	f002 fcc5 	bl	8015110 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	685a      	ldr	r2, [r3, #4]
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012794:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	4618      	mov	r0, r3
 801279c:	f002 fcf2 	bl	8015184 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	685a      	ldr	r2, [r3, #4]
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80127ae:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 80127b0:	69fb      	ldr	r3, [r7, #28]
 80127b2:	3302      	adds	r3, #2
 80127b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80127ba:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80127bc:	4a27      	ldr	r2, [pc, #156]	; (801285c <HAL_SD_InitCard+0x144>)
 80127be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80127c4:	3301      	adds	r3, #1
 80127c6:	4618      	mov	r0, r3
 80127c8:	f7f8 fe9e 	bl	800b508 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80127cc:	6878      	ldr	r0, [r7, #4]
 80127ce:	f000 fb77 	bl	8012ec0 <SD_PowerON>
 80127d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80127d4:	6a3b      	ldr	r3, [r7, #32]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d00b      	beq.n	80127f2 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	2201      	movs	r2, #1
 80127de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80127e6:	6a3b      	ldr	r3, [r7, #32]
 80127e8:	431a      	orrs	r2, r3
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80127ee:	2301      	movs	r3, #1
 80127f0:	e02e      	b.n	8012850 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80127f2:	6878      	ldr	r0, [r7, #4]
 80127f4:	f000 fa96 	bl	8012d24 <SD_InitCard>
 80127f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80127fa:	6a3b      	ldr	r3, [r7, #32]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d00b      	beq.n	8012818 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	2201      	movs	r2, #1
 8012804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801280c:	6a3b      	ldr	r3, [r7, #32]
 801280e:	431a      	orrs	r2, r3
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8012814:	2301      	movs	r3, #1
 8012816:	e01b      	b.n	8012850 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012820:	4618      	mov	r0, r3
 8012822:	f002 fd42 	bl	80152aa <SDMMC_CmdBlockLength>
 8012826:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8012828:	6a3b      	ldr	r3, [r7, #32]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d00f      	beq.n	801284e <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	4a0b      	ldr	r2, [pc, #44]	; (8012860 <HAL_SD_InitCard+0x148>)
 8012834:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801283a:	6a3b      	ldr	r3, [r7, #32]
 801283c:	431a      	orrs	r2, r3
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	2201      	movs	r2, #1
 8012846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801284a:	2301      	movs	r3, #1
 801284c:	e000      	b.n	8012850 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 801284e:	2300      	movs	r3, #0
}
 8012850:	4618      	mov	r0, r3
 8012852:	3728      	adds	r7, #40	; 0x28
 8012854:	46bd      	mov	sp, r7
 8012856:	bdb0      	pop	{r4, r5, r7, pc}
 8012858:	014f8b59 	.word	0x014f8b59
 801285c:	00012110 	.word	0x00012110
 8012860:	004005ff 	.word	0x004005ff

08012864 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8012864:	b480      	push	{r7}
 8012866:	b083      	sub	sp, #12
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
 801286c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012872:	0f9b      	lsrs	r3, r3, #30
 8012874:	b2da      	uxtb	r2, r3
 8012876:	683b      	ldr	r3, [r7, #0]
 8012878:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801287e:	0e9b      	lsrs	r3, r3, #26
 8012880:	b2db      	uxtb	r3, r3
 8012882:	f003 030f 	and.w	r3, r3, #15
 8012886:	b2da      	uxtb	r2, r3
 8012888:	683b      	ldr	r3, [r7, #0]
 801288a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012890:	0e1b      	lsrs	r3, r3, #24
 8012892:	b2db      	uxtb	r3, r3
 8012894:	f003 0303 	and.w	r3, r3, #3
 8012898:	b2da      	uxtb	r2, r3
 801289a:	683b      	ldr	r3, [r7, #0]
 801289c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80128a2:	0c1b      	lsrs	r3, r3, #16
 80128a4:	b2da      	uxtb	r2, r3
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80128ae:	0a1b      	lsrs	r3, r3, #8
 80128b0:	b2da      	uxtb	r2, r3
 80128b2:	683b      	ldr	r3, [r7, #0]
 80128b4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80128ba:	b2da      	uxtb	r2, r3
 80128bc:	683b      	ldr	r3, [r7, #0]
 80128be:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80128c4:	0d1b      	lsrs	r3, r3, #20
 80128c6:	b29a      	uxth	r2, r3
 80128c8:	683b      	ldr	r3, [r7, #0]
 80128ca:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80128d0:	0c1b      	lsrs	r3, r3, #16
 80128d2:	b2db      	uxtb	r3, r3
 80128d4:	f003 030f 	and.w	r3, r3, #15
 80128d8:	b2da      	uxtb	r2, r3
 80128da:	683b      	ldr	r3, [r7, #0]
 80128dc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80128e2:	0bdb      	lsrs	r3, r3, #15
 80128e4:	b2db      	uxtb	r3, r3
 80128e6:	f003 0301 	and.w	r3, r3, #1
 80128ea:	b2da      	uxtb	r2, r3
 80128ec:	683b      	ldr	r3, [r7, #0]
 80128ee:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80128f4:	0b9b      	lsrs	r3, r3, #14
 80128f6:	b2db      	uxtb	r3, r3
 80128f8:	f003 0301 	and.w	r3, r3, #1
 80128fc:	b2da      	uxtb	r2, r3
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012906:	0b5b      	lsrs	r3, r3, #13
 8012908:	b2db      	uxtb	r3, r3
 801290a:	f003 0301 	and.w	r3, r3, #1
 801290e:	b2da      	uxtb	r2, r3
 8012910:	683b      	ldr	r3, [r7, #0]
 8012912:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012918:	0b1b      	lsrs	r3, r3, #12
 801291a:	b2db      	uxtb	r3, r3
 801291c:	f003 0301 	and.w	r3, r3, #1
 8012920:	b2da      	uxtb	r2, r3
 8012922:	683b      	ldr	r3, [r7, #0]
 8012924:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	2200      	movs	r2, #0
 801292a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012930:	2b00      	cmp	r3, #0
 8012932:	d163      	bne.n	80129fc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012938:	009a      	lsls	r2, r3, #2
 801293a:	f640 73fc 	movw	r3, #4092	; 0xffc
 801293e:	4013      	ands	r3, r2
 8012940:	687a      	ldr	r2, [r7, #4]
 8012942:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8012944:	0f92      	lsrs	r2, r2, #30
 8012946:	431a      	orrs	r2, r3
 8012948:	683b      	ldr	r3, [r7, #0]
 801294a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012950:	0edb      	lsrs	r3, r3, #27
 8012952:	b2db      	uxtb	r3, r3
 8012954:	f003 0307 	and.w	r3, r3, #7
 8012958:	b2da      	uxtb	r2, r3
 801295a:	683b      	ldr	r3, [r7, #0]
 801295c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012962:	0e1b      	lsrs	r3, r3, #24
 8012964:	b2db      	uxtb	r3, r3
 8012966:	f003 0307 	and.w	r3, r3, #7
 801296a:	b2da      	uxtb	r2, r3
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012974:	0d5b      	lsrs	r3, r3, #21
 8012976:	b2db      	uxtb	r3, r3
 8012978:	f003 0307 	and.w	r3, r3, #7
 801297c:	b2da      	uxtb	r2, r3
 801297e:	683b      	ldr	r3, [r7, #0]
 8012980:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012986:	0c9b      	lsrs	r3, r3, #18
 8012988:	b2db      	uxtb	r3, r3
 801298a:	f003 0307 	and.w	r3, r3, #7
 801298e:	b2da      	uxtb	r2, r3
 8012990:	683b      	ldr	r3, [r7, #0]
 8012992:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012998:	0bdb      	lsrs	r3, r3, #15
 801299a:	b2db      	uxtb	r3, r3
 801299c:	f003 0307 	and.w	r3, r3, #7
 80129a0:	b2da      	uxtb	r2, r3
 80129a2:	683b      	ldr	r3, [r7, #0]
 80129a4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80129a6:	683b      	ldr	r3, [r7, #0]
 80129a8:	691b      	ldr	r3, [r3, #16]
 80129aa:	1c5a      	adds	r2, r3, #1
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80129b0:	683b      	ldr	r3, [r7, #0]
 80129b2:	7e1b      	ldrb	r3, [r3, #24]
 80129b4:	b2db      	uxtb	r3, r3
 80129b6:	f003 0307 	and.w	r3, r3, #7
 80129ba:	3302      	adds	r3, #2
 80129bc:	2201      	movs	r2, #1
 80129be:	fa02 f303 	lsl.w	r3, r2, r3
 80129c2:	687a      	ldr	r2, [r7, #4]
 80129c4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80129c6:	fb03 f202 	mul.w	r2, r3, r2
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80129ce:	683b      	ldr	r3, [r7, #0]
 80129d0:	7a1b      	ldrb	r3, [r3, #8]
 80129d2:	b2db      	uxtb	r3, r3
 80129d4:	f003 030f 	and.w	r3, r3, #15
 80129d8:	2201      	movs	r2, #1
 80129da:	409a      	lsls	r2, r3
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80129e4:	687a      	ldr	r2, [r7, #4]
 80129e6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80129e8:	0a52      	lsrs	r2, r2, #9
 80129ea:	fb03 f202 	mul.w	r2, r3, r2
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80129f8:	661a      	str	r2, [r3, #96]	; 0x60
 80129fa:	e031      	b.n	8012a60 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a00:	2b01      	cmp	r3, #1
 8012a02:	d11d      	bne.n	8012a40 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012a08:	041b      	lsls	r3, r3, #16
 8012a0a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a12:	0c1b      	lsrs	r3, r3, #16
 8012a14:	431a      	orrs	r2, r3
 8012a16:	683b      	ldr	r3, [r7, #0]
 8012a18:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	691b      	ldr	r3, [r3, #16]
 8012a1e:	3301      	adds	r3, #1
 8012a20:	029a      	lsls	r2, r3, #10
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012a34:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	661a      	str	r2, [r3, #96]	; 0x60
 8012a3e:	e00f      	b.n	8012a60 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	4a58      	ldr	r2, [pc, #352]	; (8012ba8 <HAL_SD_GetCardCSD+0x344>)
 8012a46:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a4c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	2201      	movs	r2, #1
 8012a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8012a5c:	2301      	movs	r3, #1
 8012a5e:	e09d      	b.n	8012b9c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a64:	0b9b      	lsrs	r3, r3, #14
 8012a66:	b2db      	uxtb	r3, r3
 8012a68:	f003 0301 	and.w	r3, r3, #1
 8012a6c:	b2da      	uxtb	r2, r3
 8012a6e:	683b      	ldr	r3, [r7, #0]
 8012a70:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a76:	09db      	lsrs	r3, r3, #7
 8012a78:	b2db      	uxtb	r3, r3
 8012a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012a7e:	b2da      	uxtb	r2, r3
 8012a80:	683b      	ldr	r3, [r7, #0]
 8012a82:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a88:	b2db      	uxtb	r3, r3
 8012a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012a8e:	b2da      	uxtb	r2, r3
 8012a90:	683b      	ldr	r3, [r7, #0]
 8012a92:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a98:	0fdb      	lsrs	r3, r3, #31
 8012a9a:	b2da      	uxtb	r2, r3
 8012a9c:	683b      	ldr	r3, [r7, #0]
 8012a9e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012aa4:	0f5b      	lsrs	r3, r3, #29
 8012aa6:	b2db      	uxtb	r3, r3
 8012aa8:	f003 0303 	and.w	r3, r3, #3
 8012aac:	b2da      	uxtb	r2, r3
 8012aae:	683b      	ldr	r3, [r7, #0]
 8012ab0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ab6:	0e9b      	lsrs	r3, r3, #26
 8012ab8:	b2db      	uxtb	r3, r3
 8012aba:	f003 0307 	and.w	r3, r3, #7
 8012abe:	b2da      	uxtb	r2, r3
 8012ac0:	683b      	ldr	r3, [r7, #0]
 8012ac2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ac8:	0d9b      	lsrs	r3, r3, #22
 8012aca:	b2db      	uxtb	r3, r3
 8012acc:	f003 030f 	and.w	r3, r3, #15
 8012ad0:	b2da      	uxtb	r2, r3
 8012ad2:	683b      	ldr	r3, [r7, #0]
 8012ad4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ada:	0d5b      	lsrs	r3, r3, #21
 8012adc:	b2db      	uxtb	r3, r3
 8012ade:	f003 0301 	and.w	r3, r3, #1
 8012ae2:	b2da      	uxtb	r2, r3
 8012ae4:	683b      	ldr	r3, [r7, #0]
 8012ae6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8012aea:	683b      	ldr	r3, [r7, #0]
 8012aec:	2200      	movs	r2, #0
 8012aee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012af6:	0c1b      	lsrs	r3, r3, #16
 8012af8:	b2db      	uxtb	r3, r3
 8012afa:	f003 0301 	and.w	r3, r3, #1
 8012afe:	b2da      	uxtb	r2, r3
 8012b00:	683b      	ldr	r3, [r7, #0]
 8012b02:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b0a:	0bdb      	lsrs	r3, r3, #15
 8012b0c:	b2db      	uxtb	r3, r3
 8012b0e:	f003 0301 	and.w	r3, r3, #1
 8012b12:	b2da      	uxtb	r2, r3
 8012b14:	683b      	ldr	r3, [r7, #0]
 8012b16:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b1e:	0b9b      	lsrs	r3, r3, #14
 8012b20:	b2db      	uxtb	r3, r3
 8012b22:	f003 0301 	and.w	r3, r3, #1
 8012b26:	b2da      	uxtb	r2, r3
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b32:	0b5b      	lsrs	r3, r3, #13
 8012b34:	b2db      	uxtb	r3, r3
 8012b36:	f003 0301 	and.w	r3, r3, #1
 8012b3a:	b2da      	uxtb	r2, r3
 8012b3c:	683b      	ldr	r3, [r7, #0]
 8012b3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b46:	0b1b      	lsrs	r3, r3, #12
 8012b48:	b2db      	uxtb	r3, r3
 8012b4a:	f003 0301 	and.w	r3, r3, #1
 8012b4e:	b2da      	uxtb	r2, r3
 8012b50:	683b      	ldr	r3, [r7, #0]
 8012b52:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b5a:	0a9b      	lsrs	r3, r3, #10
 8012b5c:	b2db      	uxtb	r3, r3
 8012b5e:	f003 0303 	and.w	r3, r3, #3
 8012b62:	b2da      	uxtb	r2, r3
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b6e:	0a1b      	lsrs	r3, r3, #8
 8012b70:	b2db      	uxtb	r3, r3
 8012b72:	f003 0303 	and.w	r3, r3, #3
 8012b76:	b2da      	uxtb	r2, r3
 8012b78:	683b      	ldr	r3, [r7, #0]
 8012b7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b82:	085b      	lsrs	r3, r3, #1
 8012b84:	b2db      	uxtb	r3, r3
 8012b86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012b8a:	b2da      	uxtb	r2, r3
 8012b8c:	683b      	ldr	r3, [r7, #0]
 8012b8e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8012b92:	683b      	ldr	r3, [r7, #0]
 8012b94:	2201      	movs	r2, #1
 8012b96:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8012b9a:	2300      	movs	r3, #0
}
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	370c      	adds	r7, #12
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba6:	4770      	bx	lr
 8012ba8:	004005ff 	.word	0x004005ff

08012bac <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8012bac:	b5b0      	push	{r4, r5, r7, lr}
 8012bae:	b090      	sub	sp, #64	; 0x40
 8012bb0:	af04      	add	r7, sp, #16
 8012bb2:	6078      	str	r0, [r7, #4]
 8012bb4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	2203      	movs	r2, #3
 8012bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012bc8:	2b03      	cmp	r3, #3
 8012bca:	d02e      	beq.n	8012c2a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8012bcc:	683b      	ldr	r3, [r7, #0]
 8012bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012bd2:	d106      	bne.n	8012be2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bd8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	639a      	str	r2, [r3, #56]	; 0x38
 8012be0:	e029      	b.n	8012c36 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8012be2:	683b      	ldr	r3, [r7, #0]
 8012be4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012be8:	d10a      	bne.n	8012c00 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8012bea:	6878      	ldr	r0, [r7, #4]
 8012bec:	f000 f9f6 	bl	8012fdc <SD_WideBus_Enable>
 8012bf0:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bf8:	431a      	orrs	r2, r3
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	639a      	str	r2, [r3, #56]	; 0x38
 8012bfe:	e01a      	b.n	8012c36 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d10a      	bne.n	8012c1c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8012c06:	6878      	ldr	r0, [r7, #4]
 8012c08:	f000 fa33 	bl	8013072 <SD_WideBus_Disable>
 8012c0c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c14:	431a      	orrs	r2, r3
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	639a      	str	r2, [r3, #56]	; 0x38
 8012c1a:	e00c      	b.n	8012c36 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c20:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	639a      	str	r2, [r3, #56]	; 0x38
 8012c28:	e005      	b.n	8012c36 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c2e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d007      	beq.n	8012c4e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	4a35      	ldr	r2, [pc, #212]	; (8012d18 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8012c44:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8012c46:	2301      	movs	r3, #1
 8012c48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8012c4c:	e042      	b.n	8012cd4 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8012c4e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8012c52:	f7fe faed 	bl	8011230 <HAL_RCCEx_GetPeriphCLKFreq>
 8012c56:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8012c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d031      	beq.n	8012cc2 <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	685b      	ldr	r3, [r3, #4]
 8012c62:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	689b      	ldr	r3, [r3, #8]
 8012c68:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	68db      	ldr	r3, [r3, #12]
 8012c6e:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8012c70:	683b      	ldr	r3, [r7, #0]
 8012c72:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	695b      	ldr	r3, [r3, #20]
 8012c78:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	699b      	ldr	r3, [r3, #24]
 8012c7e:	3302      	adds	r3, #2
 8012c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8012c86:	4a25      	ldr	r2, [pc, #148]	; (8012d1c <HAL_SD_ConfigWideBusOperation+0x170>)
 8012c88:	4293      	cmp	r3, r2
 8012c8a:	d907      	bls.n	8012c9c <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8012c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c8e:	4a24      	ldr	r2, [pc, #144]	; (8012d20 <HAL_SD_ConfigWideBusOperation+0x174>)
 8012c90:	fba2 2303 	umull	r2, r3, r2, r3
 8012c94:	0ddb      	lsrs	r3, r3, #23
 8012c96:	3b02      	subs	r3, #2
 8012c98:	623b      	str	r3, [r7, #32]
 8012c9a:	e002      	b.n	8012ca2 <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	699b      	ldr	r3, [r3, #24]
 8012ca0:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	681d      	ldr	r5, [r3, #0]
 8012ca6:	466c      	mov	r4, sp
 8012ca8:	f107 0318 	add.w	r3, r7, #24
 8012cac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012cb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012cb4:	f107 030c 	add.w	r3, r7, #12
 8012cb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012cba:	4628      	mov	r0, r5
 8012cbc:	f002 fa28 	bl	8015110 <SDMMC_Init>
 8012cc0:	e008      	b.n	8012cd4 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012cc6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8012cce:	2301      	movs	r3, #1
 8012cd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012cdc:	4618      	mov	r0, r3
 8012cde:	f002 fae4 	bl	80152aa <SDMMC_CmdBlockLength>
 8012ce2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8012ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d00c      	beq.n	8012d04 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	4a0a      	ldr	r2, [pc, #40]	; (8012d18 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8012cf0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cf8:	431a      	orrs	r2, r3
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8012cfe:	2301      	movs	r3, #1
 8012d00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	2201      	movs	r2, #1
 8012d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8012d0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012d10:	4618      	mov	r0, r3
 8012d12:	3730      	adds	r7, #48	; 0x30
 8012d14:	46bd      	mov	sp, r7
 8012d16:	bdb0      	pop	{r4, r5, r7, pc}
 8012d18:	004005ff 	.word	0x004005ff
 8012d1c:	017d7840 	.word	0x017d7840
 8012d20:	55e63b89 	.word	0x55e63b89

08012d24 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8012d24:	b5b0      	push	{r4, r5, r7, lr}
 8012d26:	b094      	sub	sp, #80	; 0x50
 8012d28:	af04      	add	r7, sp, #16
 8012d2a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8012d2c:	2301      	movs	r3, #1
 8012d2e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	4618      	mov	r0, r3
 8012d36:	f002 fa34 	bl	80151a2 <SDMMC_GetPowerState>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d102      	bne.n	8012d46 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8012d40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8012d44:	e0b8      	b.n	8012eb8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d4a:	2b03      	cmp	r3, #3
 8012d4c:	d02f      	beq.n	8012dae <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	4618      	mov	r0, r3
 8012d54:	f002 fbb3 	bl	80154be <SDMMC_CmdSendCID>
 8012d58:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8012d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d001      	beq.n	8012d64 <SD_InitCard+0x40>
    {
      return errorstate;
 8012d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d62:	e0a9      	b.n	8012eb8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	2100      	movs	r1, #0
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f002 fa5e 	bl	801522c <SDMMC_GetResponse>
 8012d70:	4602      	mov	r2, r0
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	2104      	movs	r1, #4
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	f002 fa55 	bl	801522c <SDMMC_GetResponse>
 8012d82:	4602      	mov	r2, r0
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	2108      	movs	r1, #8
 8012d8e:	4618      	mov	r0, r3
 8012d90:	f002 fa4c 	bl	801522c <SDMMC_GetResponse>
 8012d94:	4602      	mov	r2, r0
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	210c      	movs	r1, #12
 8012da0:	4618      	mov	r0, r3
 8012da2:	f002 fa43 	bl	801522c <SDMMC_GetResponse>
 8012da6:	4602      	mov	r2, r0
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012db2:	2b03      	cmp	r3, #3
 8012db4:	d00d      	beq.n	8012dd2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	f107 020e 	add.w	r2, r7, #14
 8012dbe:	4611      	mov	r1, r2
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f002 fbb9 	bl	8015538 <SDMMC_CmdSetRelAdd>
 8012dc6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8012dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d001      	beq.n	8012dd2 <SD_InitCard+0xae>
    {
      return errorstate;
 8012dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012dd0:	e072      	b.n	8012eb8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012dd6:	2b03      	cmp	r3, #3
 8012dd8:	d036      	beq.n	8012e48 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8012dda:	89fb      	ldrh	r3, [r7, #14]
 8012ddc:	461a      	mov	r2, r3
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	681a      	ldr	r2, [r3, #0]
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012dea:	041b      	lsls	r3, r3, #16
 8012dec:	4619      	mov	r1, r3
 8012dee:	4610      	mov	r0, r2
 8012df0:	f002 fb83 	bl	80154fa <SDMMC_CmdSendCSD>
 8012df4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8012df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d001      	beq.n	8012e00 <SD_InitCard+0xdc>
    {
      return errorstate;
 8012dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012dfe:	e05b      	b.n	8012eb8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	2100      	movs	r1, #0
 8012e06:	4618      	mov	r0, r3
 8012e08:	f002 fa10 	bl	801522c <SDMMC_GetResponse>
 8012e0c:	4602      	mov	r2, r0
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	2104      	movs	r1, #4
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f002 fa07 	bl	801522c <SDMMC_GetResponse>
 8012e1e:	4602      	mov	r2, r0
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	2108      	movs	r1, #8
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f002 f9fe 	bl	801522c <SDMMC_GetResponse>
 8012e30:	4602      	mov	r2, r0
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	210c      	movs	r1, #12
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	f002 f9f5 	bl	801522c <SDMMC_GetResponse>
 8012e42:	4602      	mov	r2, r0
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	2104      	movs	r1, #4
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f002 f9ec 	bl	801522c <SDMMC_GetResponse>
 8012e54:	4603      	mov	r3, r0
 8012e56:	0d1a      	lsrs	r2, r3, #20
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8012e5c:	f107 0310 	add.w	r3, r7, #16
 8012e60:	4619      	mov	r1, r3
 8012e62:	6878      	ldr	r0, [r7, #4]
 8012e64:	f7ff fcfe 	bl	8012864 <HAL_SD_GetCardCSD>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d002      	beq.n	8012e74 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8012e6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012e72:	e021      	b.n	8012eb8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	6819      	ldr	r1, [r3, #0]
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e7c:	041b      	lsls	r3, r3, #16
 8012e7e:	2200      	movs	r2, #0
 8012e80:	461c      	mov	r4, r3
 8012e82:	4615      	mov	r5, r2
 8012e84:	4622      	mov	r2, r4
 8012e86:	462b      	mov	r3, r5
 8012e88:	4608      	mov	r0, r1
 8012e8a:	f002 fa30 	bl	80152ee <SDMMC_CmdSelDesel>
 8012e8e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8012e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d001      	beq.n	8012e9a <SD_InitCard+0x176>
  {
    return errorstate;
 8012e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e98:	e00e      	b.n	8012eb8 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	681d      	ldr	r5, [r3, #0]
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	466c      	mov	r4, sp
 8012ea2:	f103 0210 	add.w	r2, r3, #16
 8012ea6:	ca07      	ldmia	r2, {r0, r1, r2}
 8012ea8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012eac:	3304      	adds	r3, #4
 8012eae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012eb0:	4628      	mov	r0, r5
 8012eb2:	f002 f92d 	bl	8015110 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8012eb6:	2300      	movs	r3, #0
}
 8012eb8:	4618      	mov	r0, r3
 8012eba:	3740      	adds	r7, #64	; 0x40
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	bdb0      	pop	{r4, r5, r7, pc}

08012ec0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b086      	sub	sp, #24
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012ec8:	2300      	movs	r3, #0
 8012eca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	617b      	str	r3, [r7, #20]
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	4618      	mov	r0, r3
 8012eda:	f002 fa2b 	bl	8015334 <SDMMC_CmdGoIdleState>
 8012ede:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d001      	beq.n	8012eea <SD_PowerON+0x2a>
  {
    return errorstate;
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	e072      	b.n	8012fd0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	4618      	mov	r0, r3
 8012ef0:	f002 fa3e 	bl	8015370 <SDMMC_CmdOperCond>
 8012ef4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d00d      	beq.n	8012f18 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	2200      	movs	r2, #0
 8012f00:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	4618      	mov	r0, r3
 8012f08:	f002 fa14 	bl	8015334 <SDMMC_CmdGoIdleState>
 8012f0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d004      	beq.n	8012f1e <SD_PowerON+0x5e>
    {
      return errorstate;
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	e05b      	b.n	8012fd0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	2201      	movs	r2, #1
 8012f1c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012f22:	2b01      	cmp	r3, #1
 8012f24:	d137      	bne.n	8012f96 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	2100      	movs	r1, #0
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	f002 fa3e 	bl	80153ae <SDMMC_CmdAppCommand>
 8012f32:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d02d      	beq.n	8012f96 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8012f3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012f3e:	e047      	b.n	8012fd0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	2100      	movs	r1, #0
 8012f46:	4618      	mov	r0, r3
 8012f48:	f002 fa31 	bl	80153ae <SDMMC_CmdAppCommand>
 8012f4c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d001      	beq.n	8012f58 <SD_PowerON+0x98>
    {
      return errorstate;
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	e03b      	b.n	8012fd0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	491e      	ldr	r1, [pc, #120]	; (8012fd8 <SD_PowerON+0x118>)
 8012f5e:	4618      	mov	r0, r3
 8012f60:	f002 fa47 	bl	80153f2 <SDMMC_CmdAppOperCommand>
 8012f64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d002      	beq.n	8012f72 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8012f6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012f70:	e02e      	b.n	8012fd0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	2100      	movs	r1, #0
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f002 f957 	bl	801522c <SDMMC_GetResponse>
 8012f7e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8012f80:	697b      	ldr	r3, [r7, #20]
 8012f82:	0fdb      	lsrs	r3, r3, #31
 8012f84:	2b01      	cmp	r3, #1
 8012f86:	d101      	bne.n	8012f8c <SD_PowerON+0xcc>
 8012f88:	2301      	movs	r3, #1
 8012f8a:	e000      	b.n	8012f8e <SD_PowerON+0xce>
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	613b      	str	r3, [r7, #16]

    count++;
 8012f90:	68bb      	ldr	r3, [r7, #8]
 8012f92:	3301      	adds	r3, #1
 8012f94:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8012f96:	68bb      	ldr	r3, [r7, #8]
 8012f98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012f9c:	4293      	cmp	r3, r2
 8012f9e:	d802      	bhi.n	8012fa6 <SD_PowerON+0xe6>
 8012fa0:	693b      	ldr	r3, [r7, #16]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d0cc      	beq.n	8012f40 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8012fa6:	68bb      	ldr	r3, [r7, #8]
 8012fa8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012fac:	4293      	cmp	r3, r2
 8012fae:	d902      	bls.n	8012fb6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8012fb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8012fb4:	e00c      	b.n	8012fd0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8012fb6:	697b      	ldr	r3, [r7, #20]
 8012fb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d003      	beq.n	8012fc8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	2201      	movs	r2, #1
 8012fc4:	645a      	str	r2, [r3, #68]	; 0x44
 8012fc6:	e002      	b.n	8012fce <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	2200      	movs	r2, #0
 8012fcc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8012fce:	2300      	movs	r3, #0
}
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	3718      	adds	r7, #24
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}
 8012fd8:	c1100000 	.word	0xc1100000

08012fdc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b086      	sub	sp, #24
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	60fb      	str	r3, [r7, #12]
 8012fe8:	2300      	movs	r3, #0
 8012fea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	2100      	movs	r1, #0
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f002 f91a 	bl	801522c <SDMMC_GetResponse>
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012ffe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8013002:	d102      	bne.n	801300a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8013004:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013008:	e02f      	b.n	801306a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801300a:	f107 030c 	add.w	r3, r7, #12
 801300e:	4619      	mov	r1, r3
 8013010:	6878      	ldr	r0, [r7, #4]
 8013012:	f000 f879 	bl	8013108 <SD_FindSCR>
 8013016:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8013018:	697b      	ldr	r3, [r7, #20]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d001      	beq.n	8013022 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 801301e:	697b      	ldr	r3, [r7, #20]
 8013020:	e023      	b.n	801306a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8013022:	693b      	ldr	r3, [r7, #16]
 8013024:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013028:	2b00      	cmp	r3, #0
 801302a:	d01c      	beq.n	8013066 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	681a      	ldr	r2, [r3, #0]
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013034:	041b      	lsls	r3, r3, #16
 8013036:	4619      	mov	r1, r3
 8013038:	4610      	mov	r0, r2
 801303a:	f002 f9b8 	bl	80153ae <SDMMC_CmdAppCommand>
 801303e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013040:	697b      	ldr	r3, [r7, #20]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d001      	beq.n	801304a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8013046:	697b      	ldr	r3, [r7, #20]
 8013048:	e00f      	b.n	801306a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	2102      	movs	r1, #2
 8013050:	4618      	mov	r0, r3
 8013052:	f002 f9f1 	bl	8015438 <SDMMC_CmdBusWidth>
 8013056:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013058:	697b      	ldr	r3, [r7, #20]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d001      	beq.n	8013062 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 801305e:	697b      	ldr	r3, [r7, #20]
 8013060:	e003      	b.n	801306a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8013062:	2300      	movs	r3, #0
 8013064:	e001      	b.n	801306a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8013066:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 801306a:	4618      	mov	r0, r3
 801306c:	3718      	adds	r7, #24
 801306e:	46bd      	mov	sp, r7
 8013070:	bd80      	pop	{r7, pc}

08013072 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8013072:	b580      	push	{r7, lr}
 8013074:	b086      	sub	sp, #24
 8013076:	af00      	add	r7, sp, #0
 8013078:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 801307a:	2300      	movs	r3, #0
 801307c:	60fb      	str	r3, [r7, #12]
 801307e:	2300      	movs	r3, #0
 8013080:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	2100      	movs	r1, #0
 8013088:	4618      	mov	r0, r3
 801308a:	f002 f8cf 	bl	801522c <SDMMC_GetResponse>
 801308e:	4603      	mov	r3, r0
 8013090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013094:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8013098:	d102      	bne.n	80130a0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801309a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801309e:	e02f      	b.n	8013100 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80130a0:	f107 030c 	add.w	r3, r7, #12
 80130a4:	4619      	mov	r1, r3
 80130a6:	6878      	ldr	r0, [r7, #4]
 80130a8:	f000 f82e 	bl	8013108 <SD_FindSCR>
 80130ac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80130ae:	697b      	ldr	r3, [r7, #20]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d001      	beq.n	80130b8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80130b4:	697b      	ldr	r3, [r7, #20]
 80130b6:	e023      	b.n	8013100 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80130b8:	693b      	ldr	r3, [r7, #16]
 80130ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d01c      	beq.n	80130fc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	681a      	ldr	r2, [r3, #0]
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80130ca:	041b      	lsls	r3, r3, #16
 80130cc:	4619      	mov	r1, r3
 80130ce:	4610      	mov	r0, r2
 80130d0:	f002 f96d 	bl	80153ae <SDMMC_CmdAppCommand>
 80130d4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80130d6:	697b      	ldr	r3, [r7, #20]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d001      	beq.n	80130e0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80130dc:	697b      	ldr	r3, [r7, #20]
 80130de:	e00f      	b.n	8013100 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	2100      	movs	r1, #0
 80130e6:	4618      	mov	r0, r3
 80130e8:	f002 f9a6 	bl	8015438 <SDMMC_CmdBusWidth>
 80130ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80130ee:	697b      	ldr	r3, [r7, #20]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d001      	beq.n	80130f8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80130f4:	697b      	ldr	r3, [r7, #20]
 80130f6:	e003      	b.n	8013100 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80130f8:	2300      	movs	r3, #0
 80130fa:	e001      	b.n	8013100 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80130fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8013100:	4618      	mov	r0, r3
 8013102:	3718      	adds	r7, #24
 8013104:	46bd      	mov	sp, r7
 8013106:	bd80      	pop	{r7, pc}

08013108 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8013108:	b590      	push	{r4, r7, lr}
 801310a:	b08f      	sub	sp, #60	; 0x3c
 801310c:	af00      	add	r7, sp, #0
 801310e:	6078      	str	r0, [r7, #4]
 8013110:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8013112:	f7f8 f9ed 	bl	800b4f0 <HAL_GetTick>
 8013116:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8013118:	2300      	movs	r3, #0
 801311a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 801311c:	2300      	movs	r3, #0
 801311e:	60bb      	str	r3, [r7, #8]
 8013120:	2300      	movs	r3, #0
 8013122:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8013124:	683b      	ldr	r3, [r7, #0]
 8013126:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	2108      	movs	r1, #8
 801312e:	4618      	mov	r0, r3
 8013130:	f002 f8bb 	bl	80152aa <SDMMC_CmdBlockLength>
 8013134:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8013136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013138:	2b00      	cmp	r3, #0
 801313a:	d001      	beq.n	8013140 <SD_FindSCR+0x38>
  {
    return errorstate;
 801313c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801313e:	e0a9      	b.n	8013294 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	681a      	ldr	r2, [r3, #0]
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013148:	041b      	lsls	r3, r3, #16
 801314a:	4619      	mov	r1, r3
 801314c:	4610      	mov	r0, r2
 801314e:	f002 f92e 	bl	80153ae <SDMMC_CmdAppCommand>
 8013152:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8013154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013156:	2b00      	cmp	r3, #0
 8013158:	d001      	beq.n	801315e <SD_FindSCR+0x56>
  {
    return errorstate;
 801315a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801315c:	e09a      	b.n	8013294 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801315e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013162:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8013164:	2308      	movs	r3, #8
 8013166:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8013168:	2330      	movs	r3, #48	; 0x30
 801316a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801316c:	2302      	movs	r3, #2
 801316e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8013170:	2300      	movs	r3, #0
 8013172:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8013174:	2301      	movs	r3, #1
 8013176:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	f107 0210 	add.w	r2, r7, #16
 8013180:	4611      	mov	r1, r2
 8013182:	4618      	mov	r0, r3
 8013184:	f002 f865 	bl	8015252 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	4618      	mov	r0, r3
 801318e:	f002 f975 	bl	801547c <SDMMC_CmdSendSCR>
 8013192:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8013194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013196:	2b00      	cmp	r3, #0
 8013198:	d022      	beq.n	80131e0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 801319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801319c:	e07a      	b.n	8013294 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d00e      	beq.n	80131ca <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	6819      	ldr	r1, [r3, #0]
 80131b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131b2:	009b      	lsls	r3, r3, #2
 80131b4:	f107 0208 	add.w	r2, r7, #8
 80131b8:	18d4      	adds	r4, r2, r3
 80131ba:	4608      	mov	r0, r1
 80131bc:	f001 ffd5 	bl	801516a <SDMMC_ReadFIFO>
 80131c0:	4603      	mov	r3, r0
 80131c2:	6023      	str	r3, [r4, #0]
      index++;
 80131c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131c6:	3301      	adds	r3, #1
 80131c8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80131ca:	f7f8 f991 	bl	800b4f0 <HAL_GetTick>
 80131ce:	4602      	mov	r2, r0
 80131d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131d2:	1ad3      	subs	r3, r2, r3
 80131d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80131d8:	d102      	bne.n	80131e0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80131da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80131de:	e059      	b.n	8013294 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80131e6:	f240 432a 	movw	r3, #1066	; 0x42a
 80131ea:	4013      	ands	r3, r2
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d0d6      	beq.n	801319e <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131f6:	f003 0308 	and.w	r3, r3, #8
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d005      	beq.n	801320a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	2208      	movs	r2, #8
 8013204:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8013206:	2308      	movs	r3, #8
 8013208:	e044      	b.n	8013294 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013210:	f003 0302 	and.w	r3, r3, #2
 8013214:	2b00      	cmp	r3, #0
 8013216:	d005      	beq.n	8013224 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	2202      	movs	r2, #2
 801321e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8013220:	2302      	movs	r3, #2
 8013222:	e037      	b.n	8013294 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801322a:	f003 0320 	and.w	r3, r3, #32
 801322e:	2b00      	cmp	r3, #0
 8013230:	d005      	beq.n	801323e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	2220      	movs	r2, #32
 8013238:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 801323a:	2320      	movs	r3, #32
 801323c:	e02a      	b.n	8013294 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	f240 523a 	movw	r2, #1338	; 0x53a
 8013246:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	061a      	lsls	r2, r3, #24
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	021b      	lsls	r3, r3, #8
 8013250:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013254:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	0a1b      	lsrs	r3, r3, #8
 801325a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 801325e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	0e1b      	lsrs	r3, r3, #24
 8013264:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8013266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013268:	601a      	str	r2, [r3, #0]
    scr++;
 801326a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801326c:	3304      	adds	r3, #4
 801326e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	061a      	lsls	r2, r3, #24
 8013274:	68bb      	ldr	r3, [r7, #8]
 8013276:	021b      	lsls	r3, r3, #8
 8013278:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801327c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801327e:	68bb      	ldr	r3, [r7, #8]
 8013280:	0a1b      	lsrs	r3, r3, #8
 8013282:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8013286:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8013288:	68bb      	ldr	r3, [r7, #8]
 801328a:	0e1b      	lsrs	r3, r3, #24
 801328c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801328e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013290:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8013292:	2300      	movs	r3, #0
}
 8013294:	4618      	mov	r0, r3
 8013296:	373c      	adds	r7, #60	; 0x3c
 8013298:	46bd      	mov	sp, r7
 801329a:	bd90      	pop	{r4, r7, pc}

0801329c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b084      	sub	sp, #16
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d101      	bne.n	80132ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80132aa:	2301      	movs	r3, #1
 80132ac:	e095      	b.n	80133da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d108      	bne.n	80132c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	685b      	ldr	r3, [r3, #4]
 80132ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80132be:	d009      	beq.n	80132d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	2200      	movs	r2, #0
 80132c4:	61da      	str	r2, [r3, #28]
 80132c6:	e005      	b.n	80132d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2200      	movs	r2, #0
 80132cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	2200      	movs	r2, #0
 80132d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	2200      	movs	r2, #0
 80132d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80132e0:	b2db      	uxtb	r3, r3
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d106      	bne.n	80132f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	2200      	movs	r2, #0
 80132ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80132ee:	6878      	ldr	r0, [r7, #4]
 80132f0:	f7ef fb38 	bl	8002964 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	2202      	movs	r2, #2
 80132f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	681a      	ldr	r2, [r3, #0]
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801330a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	68db      	ldr	r3, [r3, #12]
 8013310:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013314:	d902      	bls.n	801331c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8013316:	2300      	movs	r3, #0
 8013318:	60fb      	str	r3, [r7, #12]
 801331a:	e002      	b.n	8013322 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801331c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013320:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	68db      	ldr	r3, [r3, #12]
 8013326:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801332a:	d007      	beq.n	801333c <HAL_SPI_Init+0xa0>
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	68db      	ldr	r3, [r3, #12]
 8013330:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013334:	d002      	beq.n	801333c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	2200      	movs	r2, #0
 801333a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	685b      	ldr	r3, [r3, #4]
 8013340:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	689b      	ldr	r3, [r3, #8]
 8013348:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801334c:	431a      	orrs	r2, r3
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	691b      	ldr	r3, [r3, #16]
 8013352:	f003 0302 	and.w	r3, r3, #2
 8013356:	431a      	orrs	r2, r3
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	695b      	ldr	r3, [r3, #20]
 801335c:	f003 0301 	and.w	r3, r3, #1
 8013360:	431a      	orrs	r2, r3
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	699b      	ldr	r3, [r3, #24]
 8013366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801336a:	431a      	orrs	r2, r3
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	69db      	ldr	r3, [r3, #28]
 8013370:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013374:	431a      	orrs	r2, r3
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	6a1b      	ldr	r3, [r3, #32]
 801337a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801337e:	ea42 0103 	orr.w	r1, r2, r3
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013386:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	430a      	orrs	r2, r1
 8013390:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	699b      	ldr	r3, [r3, #24]
 8013396:	0c1b      	lsrs	r3, r3, #16
 8013398:	f003 0204 	and.w	r2, r3, #4
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133a0:	f003 0310 	and.w	r3, r3, #16
 80133a4:	431a      	orrs	r2, r3
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133aa:	f003 0308 	and.w	r3, r3, #8
 80133ae:	431a      	orrs	r2, r3
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	68db      	ldr	r3, [r3, #12]
 80133b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80133b8:	ea42 0103 	orr.w	r1, r2, r3
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	430a      	orrs	r2, r1
 80133c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	2200      	movs	r2, #0
 80133ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	2201      	movs	r2, #1
 80133d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80133d8:	2300      	movs	r3, #0
}
 80133da:	4618      	mov	r0, r3
 80133dc:	3710      	adds	r7, #16
 80133de:	46bd      	mov	sp, r7
 80133e0:	bd80      	pop	{r7, pc}

080133e2 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80133e2:	b580      	push	{r7, lr}
 80133e4:	b084      	sub	sp, #16
 80133e6:	af00      	add	r7, sp, #0
 80133e8:	60f8      	str	r0, [r7, #12]
 80133ea:	60b9      	str	r1, [r7, #8]
 80133ec:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d101      	bne.n	80133f8 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80133f4:	2301      	movs	r3, #1
 80133f6:	e038      	b.n	801346a <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80133fe:	b2db      	uxtb	r3, r3
 8013400:	2b00      	cmp	r3, #0
 8013402:	d106      	bne.n	8013412 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	2200      	movs	r2, #0
 8013408:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 801340c:	68f8      	ldr	r0, [r7, #12]
 801340e:	f7ee f8d1 	bl	80015b4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	681a      	ldr	r2, [r3, #0]
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	3308      	adds	r3, #8
 801341a:	4619      	mov	r1, r3
 801341c:	4610      	mov	r0, r2
 801341e:	f001 fd5f 	bl	8014ee0 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	6818      	ldr	r0, [r3, #0]
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	689b      	ldr	r3, [r3, #8]
 801342a:	461a      	mov	r2, r3
 801342c:	68b9      	ldr	r1, [r7, #8]
 801342e:	f001 fde7 	bl	8015000 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	6858      	ldr	r0, [r3, #4]
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	689a      	ldr	r2, [r3, #8]
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801343e:	6879      	ldr	r1, [r7, #4]
 8013440:	f001 fe2e 	bl	80150a0 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	68fa      	ldr	r2, [r7, #12]
 801344a:	6892      	ldr	r2, [r2, #8]
 801344c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	68fa      	ldr	r2, [r7, #12]
 8013456:	6892      	ldr	r2, [r2, #8]
 8013458:	f041 0101 	orr.w	r1, r1, #1
 801345c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	2201      	movs	r2, #1
 8013464:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8013468:	2300      	movs	r3, #0
}
 801346a:	4618      	mov	r0, r3
 801346c:	3710      	adds	r7, #16
 801346e:	46bd      	mov	sp, r7
 8013470:	bd80      	pop	{r7, pc}

08013472 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013472:	b580      	push	{r7, lr}
 8013474:	b082      	sub	sp, #8
 8013476:	af00      	add	r7, sp, #0
 8013478:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d101      	bne.n	8013484 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013480:	2301      	movs	r3, #1
 8013482:	e049      	b.n	8013518 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801348a:	b2db      	uxtb	r3, r3
 801348c:	2b00      	cmp	r3, #0
 801348e:	d106      	bne.n	801349e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	2200      	movs	r2, #0
 8013494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013498:	6878      	ldr	r0, [r7, #4]
 801349a:	f7ef fc6f 	bl	8002d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	2202      	movs	r2, #2
 80134a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	681a      	ldr	r2, [r3, #0]
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	3304      	adds	r3, #4
 80134ae:	4619      	mov	r1, r3
 80134b0:	4610      	mov	r0, r2
 80134b2:	f000 fbad 	bl	8013c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	2201      	movs	r2, #1
 80134ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	2201      	movs	r2, #1
 80134c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	2201      	movs	r2, #1
 80134ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	2201      	movs	r2, #1
 80134d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	2201      	movs	r2, #1
 80134da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	2201      	movs	r2, #1
 80134e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	2201      	movs	r2, #1
 80134ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	2201      	movs	r2, #1
 80134f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	2201      	movs	r2, #1
 80134fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	2201      	movs	r2, #1
 8013502:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	2201      	movs	r2, #1
 801350a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	2201      	movs	r2, #1
 8013512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013516:	2300      	movs	r3, #0
}
 8013518:	4618      	mov	r0, r3
 801351a:	3708      	adds	r7, #8
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}

08013520 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013520:	b480      	push	{r7}
 8013522:	b085      	sub	sp, #20
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801352e:	b2db      	uxtb	r3, r3
 8013530:	2b01      	cmp	r3, #1
 8013532:	d001      	beq.n	8013538 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8013534:	2301      	movs	r3, #1
 8013536:	e04f      	b.n	80135d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	2202      	movs	r2, #2
 801353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	68da      	ldr	r2, [r3, #12]
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	f042 0201 	orr.w	r2, r2, #1
 801354e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	4a23      	ldr	r2, [pc, #140]	; (80135e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8013556:	4293      	cmp	r3, r2
 8013558:	d01d      	beq.n	8013596 <HAL_TIM_Base_Start_IT+0x76>
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013562:	d018      	beq.n	8013596 <HAL_TIM_Base_Start_IT+0x76>
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	4a1f      	ldr	r2, [pc, #124]	; (80135e8 <HAL_TIM_Base_Start_IT+0xc8>)
 801356a:	4293      	cmp	r3, r2
 801356c:	d013      	beq.n	8013596 <HAL_TIM_Base_Start_IT+0x76>
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	4a1e      	ldr	r2, [pc, #120]	; (80135ec <HAL_TIM_Base_Start_IT+0xcc>)
 8013574:	4293      	cmp	r3, r2
 8013576:	d00e      	beq.n	8013596 <HAL_TIM_Base_Start_IT+0x76>
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	4a1c      	ldr	r2, [pc, #112]	; (80135f0 <HAL_TIM_Base_Start_IT+0xd0>)
 801357e:	4293      	cmp	r3, r2
 8013580:	d009      	beq.n	8013596 <HAL_TIM_Base_Start_IT+0x76>
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	4a1b      	ldr	r2, [pc, #108]	; (80135f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8013588:	4293      	cmp	r3, r2
 801358a:	d004      	beq.n	8013596 <HAL_TIM_Base_Start_IT+0x76>
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	4a19      	ldr	r2, [pc, #100]	; (80135f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8013592:	4293      	cmp	r3, r2
 8013594:	d115      	bne.n	80135c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	689a      	ldr	r2, [r3, #8]
 801359c:	4b17      	ldr	r3, [pc, #92]	; (80135fc <HAL_TIM_Base_Start_IT+0xdc>)
 801359e:	4013      	ands	r3, r2
 80135a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	2b06      	cmp	r3, #6
 80135a6:	d015      	beq.n	80135d4 <HAL_TIM_Base_Start_IT+0xb4>
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80135ae:	d011      	beq.n	80135d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	681a      	ldr	r2, [r3, #0]
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	f042 0201 	orr.w	r2, r2, #1
 80135be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80135c0:	e008      	b.n	80135d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	681a      	ldr	r2, [r3, #0]
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	f042 0201 	orr.w	r2, r2, #1
 80135d0:	601a      	str	r2, [r3, #0]
 80135d2:	e000      	b.n	80135d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80135d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80135d6:	2300      	movs	r3, #0
}
 80135d8:	4618      	mov	r0, r3
 80135da:	3714      	adds	r7, #20
 80135dc:	46bd      	mov	sp, r7
 80135de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e2:	4770      	bx	lr
 80135e4:	40012c00 	.word	0x40012c00
 80135e8:	40000400 	.word	0x40000400
 80135ec:	40000800 	.word	0x40000800
 80135f0:	40000c00 	.word	0x40000c00
 80135f4:	40013400 	.word	0x40013400
 80135f8:	40014000 	.word	0x40014000
 80135fc:	00010007 	.word	0x00010007

08013600 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013600:	b580      	push	{r7, lr}
 8013602:	b082      	sub	sp, #8
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d101      	bne.n	8013612 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801360e:	2301      	movs	r3, #1
 8013610:	e049      	b.n	80136a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013618:	b2db      	uxtb	r3, r3
 801361a:	2b00      	cmp	r3, #0
 801361c:	d106      	bne.n	801362c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	2200      	movs	r2, #0
 8013622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8013626:	6878      	ldr	r0, [r7, #4]
 8013628:	f7f7 fc72 	bl	800af10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	2202      	movs	r2, #2
 8013630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	681a      	ldr	r2, [r3, #0]
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	3304      	adds	r3, #4
 801363c:	4619      	mov	r1, r3
 801363e:	4610      	mov	r0, r2
 8013640:	f000 fae6 	bl	8013c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	2201      	movs	r2, #1
 8013648:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	2201      	movs	r2, #1
 8013650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	2201      	movs	r2, #1
 8013658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	2201      	movs	r2, #1
 8013660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	2201      	movs	r2, #1
 8013668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	2201      	movs	r2, #1
 8013670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	2201      	movs	r2, #1
 8013678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	2201      	movs	r2, #1
 8013680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	2201      	movs	r2, #1
 8013688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	2201      	movs	r2, #1
 8013690:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	2201      	movs	r2, #1
 8013698:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	2201      	movs	r2, #1
 80136a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80136a4:	2300      	movs	r3, #0
}
 80136a6:	4618      	mov	r0, r3
 80136a8:	3708      	adds	r7, #8
 80136aa:	46bd      	mov	sp, r7
 80136ac:	bd80      	pop	{r7, pc}
	...

080136b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b084      	sub	sp, #16
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
 80136b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80136ba:	683b      	ldr	r3, [r7, #0]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d109      	bne.n	80136d4 <HAL_TIM_PWM_Start+0x24>
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80136c6:	b2db      	uxtb	r3, r3
 80136c8:	2b01      	cmp	r3, #1
 80136ca:	bf14      	ite	ne
 80136cc:	2301      	movne	r3, #1
 80136ce:	2300      	moveq	r3, #0
 80136d0:	b2db      	uxtb	r3, r3
 80136d2:	e03c      	b.n	801374e <HAL_TIM_PWM_Start+0x9e>
 80136d4:	683b      	ldr	r3, [r7, #0]
 80136d6:	2b04      	cmp	r3, #4
 80136d8:	d109      	bne.n	80136ee <HAL_TIM_PWM_Start+0x3e>
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80136e0:	b2db      	uxtb	r3, r3
 80136e2:	2b01      	cmp	r3, #1
 80136e4:	bf14      	ite	ne
 80136e6:	2301      	movne	r3, #1
 80136e8:	2300      	moveq	r3, #0
 80136ea:	b2db      	uxtb	r3, r3
 80136ec:	e02f      	b.n	801374e <HAL_TIM_PWM_Start+0x9e>
 80136ee:	683b      	ldr	r3, [r7, #0]
 80136f0:	2b08      	cmp	r3, #8
 80136f2:	d109      	bne.n	8013708 <HAL_TIM_PWM_Start+0x58>
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80136fa:	b2db      	uxtb	r3, r3
 80136fc:	2b01      	cmp	r3, #1
 80136fe:	bf14      	ite	ne
 8013700:	2301      	movne	r3, #1
 8013702:	2300      	moveq	r3, #0
 8013704:	b2db      	uxtb	r3, r3
 8013706:	e022      	b.n	801374e <HAL_TIM_PWM_Start+0x9e>
 8013708:	683b      	ldr	r3, [r7, #0]
 801370a:	2b0c      	cmp	r3, #12
 801370c:	d109      	bne.n	8013722 <HAL_TIM_PWM_Start+0x72>
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013714:	b2db      	uxtb	r3, r3
 8013716:	2b01      	cmp	r3, #1
 8013718:	bf14      	ite	ne
 801371a:	2301      	movne	r3, #1
 801371c:	2300      	moveq	r3, #0
 801371e:	b2db      	uxtb	r3, r3
 8013720:	e015      	b.n	801374e <HAL_TIM_PWM_Start+0x9e>
 8013722:	683b      	ldr	r3, [r7, #0]
 8013724:	2b10      	cmp	r3, #16
 8013726:	d109      	bne.n	801373c <HAL_TIM_PWM_Start+0x8c>
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801372e:	b2db      	uxtb	r3, r3
 8013730:	2b01      	cmp	r3, #1
 8013732:	bf14      	ite	ne
 8013734:	2301      	movne	r3, #1
 8013736:	2300      	moveq	r3, #0
 8013738:	b2db      	uxtb	r3, r3
 801373a:	e008      	b.n	801374e <HAL_TIM_PWM_Start+0x9e>
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013742:	b2db      	uxtb	r3, r3
 8013744:	2b01      	cmp	r3, #1
 8013746:	bf14      	ite	ne
 8013748:	2301      	movne	r3, #1
 801374a:	2300      	moveq	r3, #0
 801374c:	b2db      	uxtb	r3, r3
 801374e:	2b00      	cmp	r3, #0
 8013750:	d001      	beq.n	8013756 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8013752:	2301      	movs	r3, #1
 8013754:	e09c      	b.n	8013890 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013756:	683b      	ldr	r3, [r7, #0]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d104      	bne.n	8013766 <HAL_TIM_PWM_Start+0xb6>
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	2202      	movs	r2, #2
 8013760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013764:	e023      	b.n	80137ae <HAL_TIM_PWM_Start+0xfe>
 8013766:	683b      	ldr	r3, [r7, #0]
 8013768:	2b04      	cmp	r3, #4
 801376a:	d104      	bne.n	8013776 <HAL_TIM_PWM_Start+0xc6>
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	2202      	movs	r2, #2
 8013770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013774:	e01b      	b.n	80137ae <HAL_TIM_PWM_Start+0xfe>
 8013776:	683b      	ldr	r3, [r7, #0]
 8013778:	2b08      	cmp	r3, #8
 801377a:	d104      	bne.n	8013786 <HAL_TIM_PWM_Start+0xd6>
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	2202      	movs	r2, #2
 8013780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013784:	e013      	b.n	80137ae <HAL_TIM_PWM_Start+0xfe>
 8013786:	683b      	ldr	r3, [r7, #0]
 8013788:	2b0c      	cmp	r3, #12
 801378a:	d104      	bne.n	8013796 <HAL_TIM_PWM_Start+0xe6>
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	2202      	movs	r2, #2
 8013790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013794:	e00b      	b.n	80137ae <HAL_TIM_PWM_Start+0xfe>
 8013796:	683b      	ldr	r3, [r7, #0]
 8013798:	2b10      	cmp	r3, #16
 801379a:	d104      	bne.n	80137a6 <HAL_TIM_PWM_Start+0xf6>
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	2202      	movs	r2, #2
 80137a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80137a4:	e003      	b.n	80137ae <HAL_TIM_PWM_Start+0xfe>
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	2202      	movs	r2, #2
 80137aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	2201      	movs	r2, #1
 80137b4:	6839      	ldr	r1, [r7, #0]
 80137b6:	4618      	mov	r0, r3
 80137b8:	f000 fd9a 	bl	80142f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	4a35      	ldr	r2, [pc, #212]	; (8013898 <HAL_TIM_PWM_Start+0x1e8>)
 80137c2:	4293      	cmp	r3, r2
 80137c4:	d013      	beq.n	80137ee <HAL_TIM_PWM_Start+0x13e>
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	4a34      	ldr	r2, [pc, #208]	; (801389c <HAL_TIM_PWM_Start+0x1ec>)
 80137cc:	4293      	cmp	r3, r2
 80137ce:	d00e      	beq.n	80137ee <HAL_TIM_PWM_Start+0x13e>
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	4a32      	ldr	r2, [pc, #200]	; (80138a0 <HAL_TIM_PWM_Start+0x1f0>)
 80137d6:	4293      	cmp	r3, r2
 80137d8:	d009      	beq.n	80137ee <HAL_TIM_PWM_Start+0x13e>
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	4a31      	ldr	r2, [pc, #196]	; (80138a4 <HAL_TIM_PWM_Start+0x1f4>)
 80137e0:	4293      	cmp	r3, r2
 80137e2:	d004      	beq.n	80137ee <HAL_TIM_PWM_Start+0x13e>
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	4a2f      	ldr	r2, [pc, #188]	; (80138a8 <HAL_TIM_PWM_Start+0x1f8>)
 80137ea:	4293      	cmp	r3, r2
 80137ec:	d101      	bne.n	80137f2 <HAL_TIM_PWM_Start+0x142>
 80137ee:	2301      	movs	r3, #1
 80137f0:	e000      	b.n	80137f4 <HAL_TIM_PWM_Start+0x144>
 80137f2:	2300      	movs	r3, #0
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d007      	beq.n	8013808 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013806:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	4a22      	ldr	r2, [pc, #136]	; (8013898 <HAL_TIM_PWM_Start+0x1e8>)
 801380e:	4293      	cmp	r3, r2
 8013810:	d01d      	beq.n	801384e <HAL_TIM_PWM_Start+0x19e>
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801381a:	d018      	beq.n	801384e <HAL_TIM_PWM_Start+0x19e>
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	4a22      	ldr	r2, [pc, #136]	; (80138ac <HAL_TIM_PWM_Start+0x1fc>)
 8013822:	4293      	cmp	r3, r2
 8013824:	d013      	beq.n	801384e <HAL_TIM_PWM_Start+0x19e>
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	4a21      	ldr	r2, [pc, #132]	; (80138b0 <HAL_TIM_PWM_Start+0x200>)
 801382c:	4293      	cmp	r3, r2
 801382e:	d00e      	beq.n	801384e <HAL_TIM_PWM_Start+0x19e>
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	4a1f      	ldr	r2, [pc, #124]	; (80138b4 <HAL_TIM_PWM_Start+0x204>)
 8013836:	4293      	cmp	r3, r2
 8013838:	d009      	beq.n	801384e <HAL_TIM_PWM_Start+0x19e>
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	4a17      	ldr	r2, [pc, #92]	; (801389c <HAL_TIM_PWM_Start+0x1ec>)
 8013840:	4293      	cmp	r3, r2
 8013842:	d004      	beq.n	801384e <HAL_TIM_PWM_Start+0x19e>
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	4a15      	ldr	r2, [pc, #84]	; (80138a0 <HAL_TIM_PWM_Start+0x1f0>)
 801384a:	4293      	cmp	r3, r2
 801384c:	d115      	bne.n	801387a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	689a      	ldr	r2, [r3, #8]
 8013854:	4b18      	ldr	r3, [pc, #96]	; (80138b8 <HAL_TIM_PWM_Start+0x208>)
 8013856:	4013      	ands	r3, r2
 8013858:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	2b06      	cmp	r3, #6
 801385e:	d015      	beq.n	801388c <HAL_TIM_PWM_Start+0x1dc>
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013866:	d011      	beq.n	801388c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	681a      	ldr	r2, [r3, #0]
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	f042 0201 	orr.w	r2, r2, #1
 8013876:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013878:	e008      	b.n	801388c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	681a      	ldr	r2, [r3, #0]
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	f042 0201 	orr.w	r2, r2, #1
 8013888:	601a      	str	r2, [r3, #0]
 801388a:	e000      	b.n	801388e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801388c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801388e:	2300      	movs	r3, #0
}
 8013890:	4618      	mov	r0, r3
 8013892:	3710      	adds	r7, #16
 8013894:	46bd      	mov	sp, r7
 8013896:	bd80      	pop	{r7, pc}
 8013898:	40012c00 	.word	0x40012c00
 801389c:	40013400 	.word	0x40013400
 80138a0:	40014000 	.word	0x40014000
 80138a4:	40014400 	.word	0x40014400
 80138a8:	40014800 	.word	0x40014800
 80138ac:	40000400 	.word	0x40000400
 80138b0:	40000800 	.word	0x40000800
 80138b4:	40000c00 	.word	0x40000c00
 80138b8:	00010007 	.word	0x00010007

080138bc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80138bc:	b580      	push	{r7, lr}
 80138be:	b082      	sub	sp, #8
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
 80138c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	2200      	movs	r2, #0
 80138cc:	6839      	ldr	r1, [r7, #0]
 80138ce:	4618      	mov	r0, r3
 80138d0:	f000 fd0e 	bl	80142f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	4a3e      	ldr	r2, [pc, #248]	; (80139d4 <HAL_TIM_PWM_Stop+0x118>)
 80138da:	4293      	cmp	r3, r2
 80138dc:	d013      	beq.n	8013906 <HAL_TIM_PWM_Stop+0x4a>
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	4a3d      	ldr	r2, [pc, #244]	; (80139d8 <HAL_TIM_PWM_Stop+0x11c>)
 80138e4:	4293      	cmp	r3, r2
 80138e6:	d00e      	beq.n	8013906 <HAL_TIM_PWM_Stop+0x4a>
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	4a3b      	ldr	r2, [pc, #236]	; (80139dc <HAL_TIM_PWM_Stop+0x120>)
 80138ee:	4293      	cmp	r3, r2
 80138f0:	d009      	beq.n	8013906 <HAL_TIM_PWM_Stop+0x4a>
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	4a3a      	ldr	r2, [pc, #232]	; (80139e0 <HAL_TIM_PWM_Stop+0x124>)
 80138f8:	4293      	cmp	r3, r2
 80138fa:	d004      	beq.n	8013906 <HAL_TIM_PWM_Stop+0x4a>
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	4a38      	ldr	r2, [pc, #224]	; (80139e4 <HAL_TIM_PWM_Stop+0x128>)
 8013902:	4293      	cmp	r3, r2
 8013904:	d101      	bne.n	801390a <HAL_TIM_PWM_Stop+0x4e>
 8013906:	2301      	movs	r3, #1
 8013908:	e000      	b.n	801390c <HAL_TIM_PWM_Stop+0x50>
 801390a:	2300      	movs	r3, #0
 801390c:	2b00      	cmp	r3, #0
 801390e:	d017      	beq.n	8013940 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	6a1a      	ldr	r2, [r3, #32]
 8013916:	f241 1311 	movw	r3, #4369	; 0x1111
 801391a:	4013      	ands	r3, r2
 801391c:	2b00      	cmp	r3, #0
 801391e:	d10f      	bne.n	8013940 <HAL_TIM_PWM_Stop+0x84>
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	6a1a      	ldr	r2, [r3, #32]
 8013926:	f240 4344 	movw	r3, #1092	; 0x444
 801392a:	4013      	ands	r3, r2
 801392c:	2b00      	cmp	r3, #0
 801392e:	d107      	bne.n	8013940 <HAL_TIM_PWM_Stop+0x84>
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801393e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	6a1a      	ldr	r2, [r3, #32]
 8013946:	f241 1311 	movw	r3, #4369	; 0x1111
 801394a:	4013      	ands	r3, r2
 801394c:	2b00      	cmp	r3, #0
 801394e:	d10f      	bne.n	8013970 <HAL_TIM_PWM_Stop+0xb4>
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	6a1a      	ldr	r2, [r3, #32]
 8013956:	f240 4344 	movw	r3, #1092	; 0x444
 801395a:	4013      	ands	r3, r2
 801395c:	2b00      	cmp	r3, #0
 801395e:	d107      	bne.n	8013970 <HAL_TIM_PWM_Stop+0xb4>
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	681a      	ldr	r2, [r3, #0]
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	f022 0201 	bic.w	r2, r2, #1
 801396e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8013970:	683b      	ldr	r3, [r7, #0]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d104      	bne.n	8013980 <HAL_TIM_PWM_Stop+0xc4>
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	2201      	movs	r2, #1
 801397a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801397e:	e023      	b.n	80139c8 <HAL_TIM_PWM_Stop+0x10c>
 8013980:	683b      	ldr	r3, [r7, #0]
 8013982:	2b04      	cmp	r3, #4
 8013984:	d104      	bne.n	8013990 <HAL_TIM_PWM_Stop+0xd4>
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	2201      	movs	r2, #1
 801398a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801398e:	e01b      	b.n	80139c8 <HAL_TIM_PWM_Stop+0x10c>
 8013990:	683b      	ldr	r3, [r7, #0]
 8013992:	2b08      	cmp	r3, #8
 8013994:	d104      	bne.n	80139a0 <HAL_TIM_PWM_Stop+0xe4>
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	2201      	movs	r2, #1
 801399a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801399e:	e013      	b.n	80139c8 <HAL_TIM_PWM_Stop+0x10c>
 80139a0:	683b      	ldr	r3, [r7, #0]
 80139a2:	2b0c      	cmp	r3, #12
 80139a4:	d104      	bne.n	80139b0 <HAL_TIM_PWM_Stop+0xf4>
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	2201      	movs	r2, #1
 80139aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80139ae:	e00b      	b.n	80139c8 <HAL_TIM_PWM_Stop+0x10c>
 80139b0:	683b      	ldr	r3, [r7, #0]
 80139b2:	2b10      	cmp	r3, #16
 80139b4:	d104      	bne.n	80139c0 <HAL_TIM_PWM_Stop+0x104>
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	2201      	movs	r2, #1
 80139ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80139be:	e003      	b.n	80139c8 <HAL_TIM_PWM_Stop+0x10c>
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	2201      	movs	r2, #1
 80139c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80139c8:	2300      	movs	r3, #0
}
 80139ca:	4618      	mov	r0, r3
 80139cc:	3708      	adds	r7, #8
 80139ce:	46bd      	mov	sp, r7
 80139d0:	bd80      	pop	{r7, pc}
 80139d2:	bf00      	nop
 80139d4:	40012c00 	.word	0x40012c00
 80139d8:	40013400 	.word	0x40013400
 80139dc:	40014000 	.word	0x40014000
 80139e0:	40014400 	.word	0x40014400
 80139e4:	40014800 	.word	0x40014800

080139e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b086      	sub	sp, #24
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	60f8      	str	r0, [r7, #12]
 80139f0:	60b9      	str	r1, [r7, #8]
 80139f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80139f4:	2300      	movs	r3, #0
 80139f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80139fe:	2b01      	cmp	r3, #1
 8013a00:	d101      	bne.n	8013a06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8013a02:	2302      	movs	r3, #2
 8013a04:	e0ff      	b.n	8013c06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	2201      	movs	r2, #1
 8013a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	2b14      	cmp	r3, #20
 8013a12:	f200 80f0 	bhi.w	8013bf6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8013a16:	a201      	add	r2, pc, #4	; (adr r2, 8013a1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8013a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a1c:	08013a71 	.word	0x08013a71
 8013a20:	08013bf7 	.word	0x08013bf7
 8013a24:	08013bf7 	.word	0x08013bf7
 8013a28:	08013bf7 	.word	0x08013bf7
 8013a2c:	08013ab1 	.word	0x08013ab1
 8013a30:	08013bf7 	.word	0x08013bf7
 8013a34:	08013bf7 	.word	0x08013bf7
 8013a38:	08013bf7 	.word	0x08013bf7
 8013a3c:	08013af3 	.word	0x08013af3
 8013a40:	08013bf7 	.word	0x08013bf7
 8013a44:	08013bf7 	.word	0x08013bf7
 8013a48:	08013bf7 	.word	0x08013bf7
 8013a4c:	08013b33 	.word	0x08013b33
 8013a50:	08013bf7 	.word	0x08013bf7
 8013a54:	08013bf7 	.word	0x08013bf7
 8013a58:	08013bf7 	.word	0x08013bf7
 8013a5c:	08013b75 	.word	0x08013b75
 8013a60:	08013bf7 	.word	0x08013bf7
 8013a64:	08013bf7 	.word	0x08013bf7
 8013a68:	08013bf7 	.word	0x08013bf7
 8013a6c:	08013bb5 	.word	0x08013bb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	68b9      	ldr	r1, [r7, #8]
 8013a76:	4618      	mov	r0, r3
 8013a78:	f000 f964 	bl	8013d44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	699a      	ldr	r2, [r3, #24]
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	f042 0208 	orr.w	r2, r2, #8
 8013a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	699a      	ldr	r2, [r3, #24]
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	f022 0204 	bic.w	r2, r2, #4
 8013a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	6999      	ldr	r1, [r3, #24]
 8013aa2:	68bb      	ldr	r3, [r7, #8]
 8013aa4:	691a      	ldr	r2, [r3, #16]
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	430a      	orrs	r2, r1
 8013aac:	619a      	str	r2, [r3, #24]
      break;
 8013aae:	e0a5      	b.n	8013bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	68b9      	ldr	r1, [r7, #8]
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f000 f9d4 	bl	8013e64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	699a      	ldr	r2, [r3, #24]
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	699a      	ldr	r2, [r3, #24]
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	6999      	ldr	r1, [r3, #24]
 8013ae2:	68bb      	ldr	r3, [r7, #8]
 8013ae4:	691b      	ldr	r3, [r3, #16]
 8013ae6:	021a      	lsls	r2, r3, #8
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	430a      	orrs	r2, r1
 8013aee:	619a      	str	r2, [r3, #24]
      break;
 8013af0:	e084      	b.n	8013bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	68b9      	ldr	r1, [r7, #8]
 8013af8:	4618      	mov	r0, r3
 8013afa:	f000 fa3d 	bl	8013f78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	69da      	ldr	r2, [r3, #28]
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	f042 0208 	orr.w	r2, r2, #8
 8013b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	69da      	ldr	r2, [r3, #28]
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	f022 0204 	bic.w	r2, r2, #4
 8013b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	69d9      	ldr	r1, [r3, #28]
 8013b24:	68bb      	ldr	r3, [r7, #8]
 8013b26:	691a      	ldr	r2, [r3, #16]
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	430a      	orrs	r2, r1
 8013b2e:	61da      	str	r2, [r3, #28]
      break;
 8013b30:	e064      	b.n	8013bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	68b9      	ldr	r1, [r7, #8]
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f000 faa5 	bl	8014088 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	69da      	ldr	r2, [r3, #28]
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	69da      	ldr	r2, [r3, #28]
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	69d9      	ldr	r1, [r3, #28]
 8013b64:	68bb      	ldr	r3, [r7, #8]
 8013b66:	691b      	ldr	r3, [r3, #16]
 8013b68:	021a      	lsls	r2, r3, #8
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	430a      	orrs	r2, r1
 8013b70:	61da      	str	r2, [r3, #28]
      break;
 8013b72:	e043      	b.n	8013bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	68b9      	ldr	r1, [r7, #8]
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f000 faee 	bl	801415c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	f042 0208 	orr.w	r2, r2, #8
 8013b8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	f022 0204 	bic.w	r2, r2, #4
 8013b9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013ba6:	68bb      	ldr	r3, [r7, #8]
 8013ba8:	691a      	ldr	r2, [r3, #16]
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	430a      	orrs	r2, r1
 8013bb0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8013bb2:	e023      	b.n	8013bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	68b9      	ldr	r1, [r7, #8]
 8013bba:	4618      	mov	r0, r3
 8013bbc:	f000 fb32 	bl	8014224 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013bce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013bde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013be6:	68bb      	ldr	r3, [r7, #8]
 8013be8:	691b      	ldr	r3, [r3, #16]
 8013bea:	021a      	lsls	r2, r3, #8
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	430a      	orrs	r2, r1
 8013bf2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8013bf4:	e002      	b.n	8013bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8013bf6:	2301      	movs	r3, #1
 8013bf8:	75fb      	strb	r3, [r7, #23]
      break;
 8013bfa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	2200      	movs	r2, #0
 8013c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c06:	4618      	mov	r0, r3
 8013c08:	3718      	adds	r7, #24
 8013c0a:	46bd      	mov	sp, r7
 8013c0c:	bd80      	pop	{r7, pc}
 8013c0e:	bf00      	nop

08013c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8013c10:	b480      	push	{r7}
 8013c12:	b085      	sub	sp, #20
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	6078      	str	r0, [r7, #4]
 8013c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	4a40      	ldr	r2, [pc, #256]	; (8013d24 <TIM_Base_SetConfig+0x114>)
 8013c24:	4293      	cmp	r3, r2
 8013c26:	d013      	beq.n	8013c50 <TIM_Base_SetConfig+0x40>
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013c2e:	d00f      	beq.n	8013c50 <TIM_Base_SetConfig+0x40>
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	4a3d      	ldr	r2, [pc, #244]	; (8013d28 <TIM_Base_SetConfig+0x118>)
 8013c34:	4293      	cmp	r3, r2
 8013c36:	d00b      	beq.n	8013c50 <TIM_Base_SetConfig+0x40>
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	4a3c      	ldr	r2, [pc, #240]	; (8013d2c <TIM_Base_SetConfig+0x11c>)
 8013c3c:	4293      	cmp	r3, r2
 8013c3e:	d007      	beq.n	8013c50 <TIM_Base_SetConfig+0x40>
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	4a3b      	ldr	r2, [pc, #236]	; (8013d30 <TIM_Base_SetConfig+0x120>)
 8013c44:	4293      	cmp	r3, r2
 8013c46:	d003      	beq.n	8013c50 <TIM_Base_SetConfig+0x40>
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	4a3a      	ldr	r2, [pc, #232]	; (8013d34 <TIM_Base_SetConfig+0x124>)
 8013c4c:	4293      	cmp	r3, r2
 8013c4e:	d108      	bne.n	8013c62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013c58:	683b      	ldr	r3, [r7, #0]
 8013c5a:	685b      	ldr	r3, [r3, #4]
 8013c5c:	68fa      	ldr	r2, [r7, #12]
 8013c5e:	4313      	orrs	r3, r2
 8013c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	4a2f      	ldr	r2, [pc, #188]	; (8013d24 <TIM_Base_SetConfig+0x114>)
 8013c66:	4293      	cmp	r3, r2
 8013c68:	d01f      	beq.n	8013caa <TIM_Base_SetConfig+0x9a>
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013c70:	d01b      	beq.n	8013caa <TIM_Base_SetConfig+0x9a>
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	4a2c      	ldr	r2, [pc, #176]	; (8013d28 <TIM_Base_SetConfig+0x118>)
 8013c76:	4293      	cmp	r3, r2
 8013c78:	d017      	beq.n	8013caa <TIM_Base_SetConfig+0x9a>
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	4a2b      	ldr	r2, [pc, #172]	; (8013d2c <TIM_Base_SetConfig+0x11c>)
 8013c7e:	4293      	cmp	r3, r2
 8013c80:	d013      	beq.n	8013caa <TIM_Base_SetConfig+0x9a>
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	4a2a      	ldr	r2, [pc, #168]	; (8013d30 <TIM_Base_SetConfig+0x120>)
 8013c86:	4293      	cmp	r3, r2
 8013c88:	d00f      	beq.n	8013caa <TIM_Base_SetConfig+0x9a>
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	4a29      	ldr	r2, [pc, #164]	; (8013d34 <TIM_Base_SetConfig+0x124>)
 8013c8e:	4293      	cmp	r3, r2
 8013c90:	d00b      	beq.n	8013caa <TIM_Base_SetConfig+0x9a>
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	4a28      	ldr	r2, [pc, #160]	; (8013d38 <TIM_Base_SetConfig+0x128>)
 8013c96:	4293      	cmp	r3, r2
 8013c98:	d007      	beq.n	8013caa <TIM_Base_SetConfig+0x9a>
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	4a27      	ldr	r2, [pc, #156]	; (8013d3c <TIM_Base_SetConfig+0x12c>)
 8013c9e:	4293      	cmp	r3, r2
 8013ca0:	d003      	beq.n	8013caa <TIM_Base_SetConfig+0x9a>
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	4a26      	ldr	r2, [pc, #152]	; (8013d40 <TIM_Base_SetConfig+0x130>)
 8013ca6:	4293      	cmp	r3, r2
 8013ca8:	d108      	bne.n	8013cbc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013cb2:	683b      	ldr	r3, [r7, #0]
 8013cb4:	68db      	ldr	r3, [r3, #12]
 8013cb6:	68fa      	ldr	r2, [r7, #12]
 8013cb8:	4313      	orrs	r3, r2
 8013cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013cc2:	683b      	ldr	r3, [r7, #0]
 8013cc4:	695b      	ldr	r3, [r3, #20]
 8013cc6:	4313      	orrs	r3, r2
 8013cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	68fa      	ldr	r2, [r7, #12]
 8013cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013cd0:	683b      	ldr	r3, [r7, #0]
 8013cd2:	689a      	ldr	r2, [r3, #8]
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013cd8:	683b      	ldr	r3, [r7, #0]
 8013cda:	681a      	ldr	r2, [r3, #0]
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	4a10      	ldr	r2, [pc, #64]	; (8013d24 <TIM_Base_SetConfig+0x114>)
 8013ce4:	4293      	cmp	r3, r2
 8013ce6:	d00f      	beq.n	8013d08 <TIM_Base_SetConfig+0xf8>
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	4a12      	ldr	r2, [pc, #72]	; (8013d34 <TIM_Base_SetConfig+0x124>)
 8013cec:	4293      	cmp	r3, r2
 8013cee:	d00b      	beq.n	8013d08 <TIM_Base_SetConfig+0xf8>
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	4a11      	ldr	r2, [pc, #68]	; (8013d38 <TIM_Base_SetConfig+0x128>)
 8013cf4:	4293      	cmp	r3, r2
 8013cf6:	d007      	beq.n	8013d08 <TIM_Base_SetConfig+0xf8>
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	4a10      	ldr	r2, [pc, #64]	; (8013d3c <TIM_Base_SetConfig+0x12c>)
 8013cfc:	4293      	cmp	r3, r2
 8013cfe:	d003      	beq.n	8013d08 <TIM_Base_SetConfig+0xf8>
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	4a0f      	ldr	r2, [pc, #60]	; (8013d40 <TIM_Base_SetConfig+0x130>)
 8013d04:	4293      	cmp	r3, r2
 8013d06:	d103      	bne.n	8013d10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013d08:	683b      	ldr	r3, [r7, #0]
 8013d0a:	691a      	ldr	r2, [r3, #16]
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	2201      	movs	r2, #1
 8013d14:	615a      	str	r2, [r3, #20]
}
 8013d16:	bf00      	nop
 8013d18:	3714      	adds	r7, #20
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d20:	4770      	bx	lr
 8013d22:	bf00      	nop
 8013d24:	40012c00 	.word	0x40012c00
 8013d28:	40000400 	.word	0x40000400
 8013d2c:	40000800 	.word	0x40000800
 8013d30:	40000c00 	.word	0x40000c00
 8013d34:	40013400 	.word	0x40013400
 8013d38:	40014000 	.word	0x40014000
 8013d3c:	40014400 	.word	0x40014400
 8013d40:	40014800 	.word	0x40014800

08013d44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013d44:	b480      	push	{r7}
 8013d46:	b087      	sub	sp, #28
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
 8013d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	6a1b      	ldr	r3, [r3, #32]
 8013d52:	f023 0201 	bic.w	r2, r3, #1
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	6a1b      	ldr	r3, [r3, #32]
 8013d5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	685b      	ldr	r3, [r3, #4]
 8013d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	699b      	ldr	r3, [r3, #24]
 8013d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	f023 0303 	bic.w	r3, r3, #3
 8013d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013d80:	683b      	ldr	r3, [r7, #0]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	68fa      	ldr	r2, [r7, #12]
 8013d86:	4313      	orrs	r3, r2
 8013d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013d8a:	697b      	ldr	r3, [r7, #20]
 8013d8c:	f023 0302 	bic.w	r3, r3, #2
 8013d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013d92:	683b      	ldr	r3, [r7, #0]
 8013d94:	689b      	ldr	r3, [r3, #8]
 8013d96:	697a      	ldr	r2, [r7, #20]
 8013d98:	4313      	orrs	r3, r2
 8013d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	4a2c      	ldr	r2, [pc, #176]	; (8013e50 <TIM_OC1_SetConfig+0x10c>)
 8013da0:	4293      	cmp	r3, r2
 8013da2:	d00f      	beq.n	8013dc4 <TIM_OC1_SetConfig+0x80>
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	4a2b      	ldr	r2, [pc, #172]	; (8013e54 <TIM_OC1_SetConfig+0x110>)
 8013da8:	4293      	cmp	r3, r2
 8013daa:	d00b      	beq.n	8013dc4 <TIM_OC1_SetConfig+0x80>
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	4a2a      	ldr	r2, [pc, #168]	; (8013e58 <TIM_OC1_SetConfig+0x114>)
 8013db0:	4293      	cmp	r3, r2
 8013db2:	d007      	beq.n	8013dc4 <TIM_OC1_SetConfig+0x80>
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	4a29      	ldr	r2, [pc, #164]	; (8013e5c <TIM_OC1_SetConfig+0x118>)
 8013db8:	4293      	cmp	r3, r2
 8013dba:	d003      	beq.n	8013dc4 <TIM_OC1_SetConfig+0x80>
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	4a28      	ldr	r2, [pc, #160]	; (8013e60 <TIM_OC1_SetConfig+0x11c>)
 8013dc0:	4293      	cmp	r3, r2
 8013dc2:	d10c      	bne.n	8013dde <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013dc4:	697b      	ldr	r3, [r7, #20]
 8013dc6:	f023 0308 	bic.w	r3, r3, #8
 8013dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013dcc:	683b      	ldr	r3, [r7, #0]
 8013dce:	68db      	ldr	r3, [r3, #12]
 8013dd0:	697a      	ldr	r2, [r7, #20]
 8013dd2:	4313      	orrs	r3, r2
 8013dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013dd6:	697b      	ldr	r3, [r7, #20]
 8013dd8:	f023 0304 	bic.w	r3, r3, #4
 8013ddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	4a1b      	ldr	r2, [pc, #108]	; (8013e50 <TIM_OC1_SetConfig+0x10c>)
 8013de2:	4293      	cmp	r3, r2
 8013de4:	d00f      	beq.n	8013e06 <TIM_OC1_SetConfig+0xc2>
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	4a1a      	ldr	r2, [pc, #104]	; (8013e54 <TIM_OC1_SetConfig+0x110>)
 8013dea:	4293      	cmp	r3, r2
 8013dec:	d00b      	beq.n	8013e06 <TIM_OC1_SetConfig+0xc2>
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	4a19      	ldr	r2, [pc, #100]	; (8013e58 <TIM_OC1_SetConfig+0x114>)
 8013df2:	4293      	cmp	r3, r2
 8013df4:	d007      	beq.n	8013e06 <TIM_OC1_SetConfig+0xc2>
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	4a18      	ldr	r2, [pc, #96]	; (8013e5c <TIM_OC1_SetConfig+0x118>)
 8013dfa:	4293      	cmp	r3, r2
 8013dfc:	d003      	beq.n	8013e06 <TIM_OC1_SetConfig+0xc2>
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	4a17      	ldr	r2, [pc, #92]	; (8013e60 <TIM_OC1_SetConfig+0x11c>)
 8013e02:	4293      	cmp	r3, r2
 8013e04:	d111      	bne.n	8013e2a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013e06:	693b      	ldr	r3, [r7, #16]
 8013e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013e0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013e0e:	693b      	ldr	r3, [r7, #16]
 8013e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013e14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013e16:	683b      	ldr	r3, [r7, #0]
 8013e18:	695b      	ldr	r3, [r3, #20]
 8013e1a:	693a      	ldr	r2, [r7, #16]
 8013e1c:	4313      	orrs	r3, r2
 8013e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013e20:	683b      	ldr	r3, [r7, #0]
 8013e22:	699b      	ldr	r3, [r3, #24]
 8013e24:	693a      	ldr	r2, [r7, #16]
 8013e26:	4313      	orrs	r3, r2
 8013e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	693a      	ldr	r2, [r7, #16]
 8013e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	68fa      	ldr	r2, [r7, #12]
 8013e34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013e36:	683b      	ldr	r3, [r7, #0]
 8013e38:	685a      	ldr	r2, [r3, #4]
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	697a      	ldr	r2, [r7, #20]
 8013e42:	621a      	str	r2, [r3, #32]
}
 8013e44:	bf00      	nop
 8013e46:	371c      	adds	r7, #28
 8013e48:	46bd      	mov	sp, r7
 8013e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e4e:	4770      	bx	lr
 8013e50:	40012c00 	.word	0x40012c00
 8013e54:	40013400 	.word	0x40013400
 8013e58:	40014000 	.word	0x40014000
 8013e5c:	40014400 	.word	0x40014400
 8013e60:	40014800 	.word	0x40014800

08013e64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013e64:	b480      	push	{r7}
 8013e66:	b087      	sub	sp, #28
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	6078      	str	r0, [r7, #4]
 8013e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	6a1b      	ldr	r3, [r3, #32]
 8013e72:	f023 0210 	bic.w	r2, r3, #16
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	6a1b      	ldr	r3, [r3, #32]
 8013e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	685b      	ldr	r3, [r3, #4]
 8013e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	699b      	ldr	r3, [r3, #24]
 8013e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013ea0:	683b      	ldr	r3, [r7, #0]
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	021b      	lsls	r3, r3, #8
 8013ea6:	68fa      	ldr	r2, [r7, #12]
 8013ea8:	4313      	orrs	r3, r2
 8013eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013eac:	697b      	ldr	r3, [r7, #20]
 8013eae:	f023 0320 	bic.w	r3, r3, #32
 8013eb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013eb4:	683b      	ldr	r3, [r7, #0]
 8013eb6:	689b      	ldr	r3, [r3, #8]
 8013eb8:	011b      	lsls	r3, r3, #4
 8013eba:	697a      	ldr	r2, [r7, #20]
 8013ebc:	4313      	orrs	r3, r2
 8013ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	4a28      	ldr	r2, [pc, #160]	; (8013f64 <TIM_OC2_SetConfig+0x100>)
 8013ec4:	4293      	cmp	r3, r2
 8013ec6:	d003      	beq.n	8013ed0 <TIM_OC2_SetConfig+0x6c>
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	4a27      	ldr	r2, [pc, #156]	; (8013f68 <TIM_OC2_SetConfig+0x104>)
 8013ecc:	4293      	cmp	r3, r2
 8013ece:	d10d      	bne.n	8013eec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013ed0:	697b      	ldr	r3, [r7, #20]
 8013ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013ed8:	683b      	ldr	r3, [r7, #0]
 8013eda:	68db      	ldr	r3, [r3, #12]
 8013edc:	011b      	lsls	r3, r3, #4
 8013ede:	697a      	ldr	r2, [r7, #20]
 8013ee0:	4313      	orrs	r3, r2
 8013ee2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013ee4:	697b      	ldr	r3, [r7, #20]
 8013ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013eea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	4a1d      	ldr	r2, [pc, #116]	; (8013f64 <TIM_OC2_SetConfig+0x100>)
 8013ef0:	4293      	cmp	r3, r2
 8013ef2:	d00f      	beq.n	8013f14 <TIM_OC2_SetConfig+0xb0>
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	4a1c      	ldr	r2, [pc, #112]	; (8013f68 <TIM_OC2_SetConfig+0x104>)
 8013ef8:	4293      	cmp	r3, r2
 8013efa:	d00b      	beq.n	8013f14 <TIM_OC2_SetConfig+0xb0>
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	4a1b      	ldr	r2, [pc, #108]	; (8013f6c <TIM_OC2_SetConfig+0x108>)
 8013f00:	4293      	cmp	r3, r2
 8013f02:	d007      	beq.n	8013f14 <TIM_OC2_SetConfig+0xb0>
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	4a1a      	ldr	r2, [pc, #104]	; (8013f70 <TIM_OC2_SetConfig+0x10c>)
 8013f08:	4293      	cmp	r3, r2
 8013f0a:	d003      	beq.n	8013f14 <TIM_OC2_SetConfig+0xb0>
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	4a19      	ldr	r2, [pc, #100]	; (8013f74 <TIM_OC2_SetConfig+0x110>)
 8013f10:	4293      	cmp	r3, r2
 8013f12:	d113      	bne.n	8013f3c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013f14:	693b      	ldr	r3, [r7, #16]
 8013f16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013f1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013f1c:	693b      	ldr	r3, [r7, #16]
 8013f1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013f22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013f24:	683b      	ldr	r3, [r7, #0]
 8013f26:	695b      	ldr	r3, [r3, #20]
 8013f28:	009b      	lsls	r3, r3, #2
 8013f2a:	693a      	ldr	r2, [r7, #16]
 8013f2c:	4313      	orrs	r3, r2
 8013f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013f30:	683b      	ldr	r3, [r7, #0]
 8013f32:	699b      	ldr	r3, [r3, #24]
 8013f34:	009b      	lsls	r3, r3, #2
 8013f36:	693a      	ldr	r2, [r7, #16]
 8013f38:	4313      	orrs	r3, r2
 8013f3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	693a      	ldr	r2, [r7, #16]
 8013f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	68fa      	ldr	r2, [r7, #12]
 8013f46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013f48:	683b      	ldr	r3, [r7, #0]
 8013f4a:	685a      	ldr	r2, [r3, #4]
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	697a      	ldr	r2, [r7, #20]
 8013f54:	621a      	str	r2, [r3, #32]
}
 8013f56:	bf00      	nop
 8013f58:	371c      	adds	r7, #28
 8013f5a:	46bd      	mov	sp, r7
 8013f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f60:	4770      	bx	lr
 8013f62:	bf00      	nop
 8013f64:	40012c00 	.word	0x40012c00
 8013f68:	40013400 	.word	0x40013400
 8013f6c:	40014000 	.word	0x40014000
 8013f70:	40014400 	.word	0x40014400
 8013f74:	40014800 	.word	0x40014800

08013f78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013f78:	b480      	push	{r7}
 8013f7a:	b087      	sub	sp, #28
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	6078      	str	r0, [r7, #4]
 8013f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	6a1b      	ldr	r3, [r3, #32]
 8013f86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	6a1b      	ldr	r3, [r3, #32]
 8013f92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	685b      	ldr	r3, [r3, #4]
 8013f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	69db      	ldr	r3, [r3, #28]
 8013f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	f023 0303 	bic.w	r3, r3, #3
 8013fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013fb4:	683b      	ldr	r3, [r7, #0]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	68fa      	ldr	r2, [r7, #12]
 8013fba:	4313      	orrs	r3, r2
 8013fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013fbe:	697b      	ldr	r3, [r7, #20]
 8013fc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013fc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013fc6:	683b      	ldr	r3, [r7, #0]
 8013fc8:	689b      	ldr	r3, [r3, #8]
 8013fca:	021b      	lsls	r3, r3, #8
 8013fcc:	697a      	ldr	r2, [r7, #20]
 8013fce:	4313      	orrs	r3, r2
 8013fd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	4a27      	ldr	r2, [pc, #156]	; (8014074 <TIM_OC3_SetConfig+0xfc>)
 8013fd6:	4293      	cmp	r3, r2
 8013fd8:	d003      	beq.n	8013fe2 <TIM_OC3_SetConfig+0x6a>
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	4a26      	ldr	r2, [pc, #152]	; (8014078 <TIM_OC3_SetConfig+0x100>)
 8013fde:	4293      	cmp	r3, r2
 8013fe0:	d10d      	bne.n	8013ffe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013fe2:	697b      	ldr	r3, [r7, #20]
 8013fe4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013fe8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013fea:	683b      	ldr	r3, [r7, #0]
 8013fec:	68db      	ldr	r3, [r3, #12]
 8013fee:	021b      	lsls	r3, r3, #8
 8013ff0:	697a      	ldr	r2, [r7, #20]
 8013ff2:	4313      	orrs	r3, r2
 8013ff4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013ff6:	697b      	ldr	r3, [r7, #20]
 8013ff8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013ffc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	4a1c      	ldr	r2, [pc, #112]	; (8014074 <TIM_OC3_SetConfig+0xfc>)
 8014002:	4293      	cmp	r3, r2
 8014004:	d00f      	beq.n	8014026 <TIM_OC3_SetConfig+0xae>
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	4a1b      	ldr	r2, [pc, #108]	; (8014078 <TIM_OC3_SetConfig+0x100>)
 801400a:	4293      	cmp	r3, r2
 801400c:	d00b      	beq.n	8014026 <TIM_OC3_SetConfig+0xae>
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	4a1a      	ldr	r2, [pc, #104]	; (801407c <TIM_OC3_SetConfig+0x104>)
 8014012:	4293      	cmp	r3, r2
 8014014:	d007      	beq.n	8014026 <TIM_OC3_SetConfig+0xae>
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	4a19      	ldr	r2, [pc, #100]	; (8014080 <TIM_OC3_SetConfig+0x108>)
 801401a:	4293      	cmp	r3, r2
 801401c:	d003      	beq.n	8014026 <TIM_OC3_SetConfig+0xae>
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	4a18      	ldr	r2, [pc, #96]	; (8014084 <TIM_OC3_SetConfig+0x10c>)
 8014022:	4293      	cmp	r3, r2
 8014024:	d113      	bne.n	801404e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8014026:	693b      	ldr	r3, [r7, #16]
 8014028:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801402c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801402e:	693b      	ldr	r3, [r7, #16]
 8014030:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8014036:	683b      	ldr	r3, [r7, #0]
 8014038:	695b      	ldr	r3, [r3, #20]
 801403a:	011b      	lsls	r3, r3, #4
 801403c:	693a      	ldr	r2, [r7, #16]
 801403e:	4313      	orrs	r3, r2
 8014040:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8014042:	683b      	ldr	r3, [r7, #0]
 8014044:	699b      	ldr	r3, [r3, #24]
 8014046:	011b      	lsls	r3, r3, #4
 8014048:	693a      	ldr	r2, [r7, #16]
 801404a:	4313      	orrs	r3, r2
 801404c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	693a      	ldr	r2, [r7, #16]
 8014052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	68fa      	ldr	r2, [r7, #12]
 8014058:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801405a:	683b      	ldr	r3, [r7, #0]
 801405c:	685a      	ldr	r2, [r3, #4]
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	697a      	ldr	r2, [r7, #20]
 8014066:	621a      	str	r2, [r3, #32]
}
 8014068:	bf00      	nop
 801406a:	371c      	adds	r7, #28
 801406c:	46bd      	mov	sp, r7
 801406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014072:	4770      	bx	lr
 8014074:	40012c00 	.word	0x40012c00
 8014078:	40013400 	.word	0x40013400
 801407c:	40014000 	.word	0x40014000
 8014080:	40014400 	.word	0x40014400
 8014084:	40014800 	.word	0x40014800

08014088 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014088:	b480      	push	{r7}
 801408a:	b087      	sub	sp, #28
 801408c:	af00      	add	r7, sp, #0
 801408e:	6078      	str	r0, [r7, #4]
 8014090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	6a1b      	ldr	r3, [r3, #32]
 8014096:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	6a1b      	ldr	r3, [r3, #32]
 80140a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	685b      	ldr	r3, [r3, #4]
 80140a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	69db      	ldr	r3, [r3, #28]
 80140ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80140b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80140ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80140c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80140c4:	683b      	ldr	r3, [r7, #0]
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	021b      	lsls	r3, r3, #8
 80140ca:	68fa      	ldr	r2, [r7, #12]
 80140cc:	4313      	orrs	r3, r2
 80140ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80140d0:	693b      	ldr	r3, [r7, #16]
 80140d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80140d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80140d8:	683b      	ldr	r3, [r7, #0]
 80140da:	689b      	ldr	r3, [r3, #8]
 80140dc:	031b      	lsls	r3, r3, #12
 80140de:	693a      	ldr	r2, [r7, #16]
 80140e0:	4313      	orrs	r3, r2
 80140e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	4a18      	ldr	r2, [pc, #96]	; (8014148 <TIM_OC4_SetConfig+0xc0>)
 80140e8:	4293      	cmp	r3, r2
 80140ea:	d00f      	beq.n	801410c <TIM_OC4_SetConfig+0x84>
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	4a17      	ldr	r2, [pc, #92]	; (801414c <TIM_OC4_SetConfig+0xc4>)
 80140f0:	4293      	cmp	r3, r2
 80140f2:	d00b      	beq.n	801410c <TIM_OC4_SetConfig+0x84>
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	4a16      	ldr	r2, [pc, #88]	; (8014150 <TIM_OC4_SetConfig+0xc8>)
 80140f8:	4293      	cmp	r3, r2
 80140fa:	d007      	beq.n	801410c <TIM_OC4_SetConfig+0x84>
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	4a15      	ldr	r2, [pc, #84]	; (8014154 <TIM_OC4_SetConfig+0xcc>)
 8014100:	4293      	cmp	r3, r2
 8014102:	d003      	beq.n	801410c <TIM_OC4_SetConfig+0x84>
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	4a14      	ldr	r2, [pc, #80]	; (8014158 <TIM_OC4_SetConfig+0xd0>)
 8014108:	4293      	cmp	r3, r2
 801410a:	d109      	bne.n	8014120 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801410c:	697b      	ldr	r3, [r7, #20]
 801410e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014112:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014114:	683b      	ldr	r3, [r7, #0]
 8014116:	695b      	ldr	r3, [r3, #20]
 8014118:	019b      	lsls	r3, r3, #6
 801411a:	697a      	ldr	r2, [r7, #20]
 801411c:	4313      	orrs	r3, r2
 801411e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	697a      	ldr	r2, [r7, #20]
 8014124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	68fa      	ldr	r2, [r7, #12]
 801412a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801412c:	683b      	ldr	r3, [r7, #0]
 801412e:	685a      	ldr	r2, [r3, #4]
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	693a      	ldr	r2, [r7, #16]
 8014138:	621a      	str	r2, [r3, #32]
}
 801413a:	bf00      	nop
 801413c:	371c      	adds	r7, #28
 801413e:	46bd      	mov	sp, r7
 8014140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014144:	4770      	bx	lr
 8014146:	bf00      	nop
 8014148:	40012c00 	.word	0x40012c00
 801414c:	40013400 	.word	0x40013400
 8014150:	40014000 	.word	0x40014000
 8014154:	40014400 	.word	0x40014400
 8014158:	40014800 	.word	0x40014800

0801415c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801415c:	b480      	push	{r7}
 801415e:	b087      	sub	sp, #28
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
 8014164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	6a1b      	ldr	r3, [r3, #32]
 801416a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	6a1b      	ldr	r3, [r3, #32]
 8014176:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	685b      	ldr	r3, [r3, #4]
 801417c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801418a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801418e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014190:	683b      	ldr	r3, [r7, #0]
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	68fa      	ldr	r2, [r7, #12]
 8014196:	4313      	orrs	r3, r2
 8014198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801419a:	693b      	ldr	r3, [r7, #16]
 801419c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80141a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80141a2:	683b      	ldr	r3, [r7, #0]
 80141a4:	689b      	ldr	r3, [r3, #8]
 80141a6:	041b      	lsls	r3, r3, #16
 80141a8:	693a      	ldr	r2, [r7, #16]
 80141aa:	4313      	orrs	r3, r2
 80141ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	4a17      	ldr	r2, [pc, #92]	; (8014210 <TIM_OC5_SetConfig+0xb4>)
 80141b2:	4293      	cmp	r3, r2
 80141b4:	d00f      	beq.n	80141d6 <TIM_OC5_SetConfig+0x7a>
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	4a16      	ldr	r2, [pc, #88]	; (8014214 <TIM_OC5_SetConfig+0xb8>)
 80141ba:	4293      	cmp	r3, r2
 80141bc:	d00b      	beq.n	80141d6 <TIM_OC5_SetConfig+0x7a>
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	4a15      	ldr	r2, [pc, #84]	; (8014218 <TIM_OC5_SetConfig+0xbc>)
 80141c2:	4293      	cmp	r3, r2
 80141c4:	d007      	beq.n	80141d6 <TIM_OC5_SetConfig+0x7a>
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	4a14      	ldr	r2, [pc, #80]	; (801421c <TIM_OC5_SetConfig+0xc0>)
 80141ca:	4293      	cmp	r3, r2
 80141cc:	d003      	beq.n	80141d6 <TIM_OC5_SetConfig+0x7a>
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	4a13      	ldr	r2, [pc, #76]	; (8014220 <TIM_OC5_SetConfig+0xc4>)
 80141d2:	4293      	cmp	r3, r2
 80141d4:	d109      	bne.n	80141ea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80141d6:	697b      	ldr	r3, [r7, #20]
 80141d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80141dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80141de:	683b      	ldr	r3, [r7, #0]
 80141e0:	695b      	ldr	r3, [r3, #20]
 80141e2:	021b      	lsls	r3, r3, #8
 80141e4:	697a      	ldr	r2, [r7, #20]
 80141e6:	4313      	orrs	r3, r2
 80141e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	697a      	ldr	r2, [r7, #20]
 80141ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	68fa      	ldr	r2, [r7, #12]
 80141f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80141f6:	683b      	ldr	r3, [r7, #0]
 80141f8:	685a      	ldr	r2, [r3, #4]
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	693a      	ldr	r2, [r7, #16]
 8014202:	621a      	str	r2, [r3, #32]
}
 8014204:	bf00      	nop
 8014206:	371c      	adds	r7, #28
 8014208:	46bd      	mov	sp, r7
 801420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801420e:	4770      	bx	lr
 8014210:	40012c00 	.word	0x40012c00
 8014214:	40013400 	.word	0x40013400
 8014218:	40014000 	.word	0x40014000
 801421c:	40014400 	.word	0x40014400
 8014220:	40014800 	.word	0x40014800

08014224 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8014224:	b480      	push	{r7}
 8014226:	b087      	sub	sp, #28
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
 801422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	6a1b      	ldr	r3, [r3, #32]
 8014232:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	6a1b      	ldr	r3, [r3, #32]
 801423e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	685b      	ldr	r3, [r3, #4]
 8014244:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014258:	683b      	ldr	r3, [r7, #0]
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	021b      	lsls	r3, r3, #8
 801425e:	68fa      	ldr	r2, [r7, #12]
 8014260:	4313      	orrs	r3, r2
 8014262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8014264:	693b      	ldr	r3, [r7, #16]
 8014266:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801426a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801426c:	683b      	ldr	r3, [r7, #0]
 801426e:	689b      	ldr	r3, [r3, #8]
 8014270:	051b      	lsls	r3, r3, #20
 8014272:	693a      	ldr	r2, [r7, #16]
 8014274:	4313      	orrs	r3, r2
 8014276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	4a18      	ldr	r2, [pc, #96]	; (80142dc <TIM_OC6_SetConfig+0xb8>)
 801427c:	4293      	cmp	r3, r2
 801427e:	d00f      	beq.n	80142a0 <TIM_OC6_SetConfig+0x7c>
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	4a17      	ldr	r2, [pc, #92]	; (80142e0 <TIM_OC6_SetConfig+0xbc>)
 8014284:	4293      	cmp	r3, r2
 8014286:	d00b      	beq.n	80142a0 <TIM_OC6_SetConfig+0x7c>
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	4a16      	ldr	r2, [pc, #88]	; (80142e4 <TIM_OC6_SetConfig+0xc0>)
 801428c:	4293      	cmp	r3, r2
 801428e:	d007      	beq.n	80142a0 <TIM_OC6_SetConfig+0x7c>
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	4a15      	ldr	r2, [pc, #84]	; (80142e8 <TIM_OC6_SetConfig+0xc4>)
 8014294:	4293      	cmp	r3, r2
 8014296:	d003      	beq.n	80142a0 <TIM_OC6_SetConfig+0x7c>
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	4a14      	ldr	r2, [pc, #80]	; (80142ec <TIM_OC6_SetConfig+0xc8>)
 801429c:	4293      	cmp	r3, r2
 801429e:	d109      	bne.n	80142b4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80142a0:	697b      	ldr	r3, [r7, #20]
 80142a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80142a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80142a8:	683b      	ldr	r3, [r7, #0]
 80142aa:	695b      	ldr	r3, [r3, #20]
 80142ac:	029b      	lsls	r3, r3, #10
 80142ae:	697a      	ldr	r2, [r7, #20]
 80142b0:	4313      	orrs	r3, r2
 80142b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	697a      	ldr	r2, [r7, #20]
 80142b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	68fa      	ldr	r2, [r7, #12]
 80142be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80142c0:	683b      	ldr	r3, [r7, #0]
 80142c2:	685a      	ldr	r2, [r3, #4]
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	693a      	ldr	r2, [r7, #16]
 80142cc:	621a      	str	r2, [r3, #32]
}
 80142ce:	bf00      	nop
 80142d0:	371c      	adds	r7, #28
 80142d2:	46bd      	mov	sp, r7
 80142d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d8:	4770      	bx	lr
 80142da:	bf00      	nop
 80142dc:	40012c00 	.word	0x40012c00
 80142e0:	40013400 	.word	0x40013400
 80142e4:	40014000 	.word	0x40014000
 80142e8:	40014400 	.word	0x40014400
 80142ec:	40014800 	.word	0x40014800

080142f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80142f0:	b480      	push	{r7}
 80142f2:	b087      	sub	sp, #28
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	60f8      	str	r0, [r7, #12]
 80142f8:	60b9      	str	r1, [r7, #8]
 80142fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80142fc:	68bb      	ldr	r3, [r7, #8]
 80142fe:	f003 031f 	and.w	r3, r3, #31
 8014302:	2201      	movs	r2, #1
 8014304:	fa02 f303 	lsl.w	r3, r2, r3
 8014308:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	6a1a      	ldr	r2, [r3, #32]
 801430e:	697b      	ldr	r3, [r7, #20]
 8014310:	43db      	mvns	r3, r3
 8014312:	401a      	ands	r2, r3
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	6a1a      	ldr	r2, [r3, #32]
 801431c:	68bb      	ldr	r3, [r7, #8]
 801431e:	f003 031f 	and.w	r3, r3, #31
 8014322:	6879      	ldr	r1, [r7, #4]
 8014324:	fa01 f303 	lsl.w	r3, r1, r3
 8014328:	431a      	orrs	r2, r3
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	621a      	str	r2, [r3, #32]
}
 801432e:	bf00      	nop
 8014330:	371c      	adds	r7, #28
 8014332:	46bd      	mov	sp, r7
 8014334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014338:	4770      	bx	lr
	...

0801433c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801433c:	b480      	push	{r7}
 801433e:	b085      	sub	sp, #20
 8014340:	af00      	add	r7, sp, #0
 8014342:	6078      	str	r0, [r7, #4]
 8014344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801434c:	2b01      	cmp	r3, #1
 801434e:	d101      	bne.n	8014354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014350:	2302      	movs	r3, #2
 8014352:	e068      	b.n	8014426 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	2201      	movs	r2, #1
 8014358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	2202      	movs	r2, #2
 8014360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	685b      	ldr	r3, [r3, #4]
 801436a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	689b      	ldr	r3, [r3, #8]
 8014372:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	4a2e      	ldr	r2, [pc, #184]	; (8014434 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801437a:	4293      	cmp	r3, r2
 801437c:	d004      	beq.n	8014388 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	4a2d      	ldr	r2, [pc, #180]	; (8014438 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8014384:	4293      	cmp	r3, r2
 8014386:	d108      	bne.n	801439a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801438e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8014390:	683b      	ldr	r3, [r7, #0]
 8014392:	685b      	ldr	r3, [r3, #4]
 8014394:	68fa      	ldr	r2, [r7, #12]
 8014396:	4313      	orrs	r3, r2
 8014398:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80143a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80143a2:	683b      	ldr	r3, [r7, #0]
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	68fa      	ldr	r2, [r7, #12]
 80143a8:	4313      	orrs	r3, r2
 80143aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	68fa      	ldr	r2, [r7, #12]
 80143b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	4a1e      	ldr	r2, [pc, #120]	; (8014434 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80143ba:	4293      	cmp	r3, r2
 80143bc:	d01d      	beq.n	80143fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80143c6:	d018      	beq.n	80143fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	4a1b      	ldr	r2, [pc, #108]	; (801443c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80143ce:	4293      	cmp	r3, r2
 80143d0:	d013      	beq.n	80143fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	4a1a      	ldr	r2, [pc, #104]	; (8014440 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80143d8:	4293      	cmp	r3, r2
 80143da:	d00e      	beq.n	80143fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	4a18      	ldr	r2, [pc, #96]	; (8014444 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80143e2:	4293      	cmp	r3, r2
 80143e4:	d009      	beq.n	80143fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	4a13      	ldr	r2, [pc, #76]	; (8014438 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80143ec:	4293      	cmp	r3, r2
 80143ee:	d004      	beq.n	80143fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	4a14      	ldr	r2, [pc, #80]	; (8014448 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80143f6:	4293      	cmp	r3, r2
 80143f8:	d10c      	bne.n	8014414 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80143fa:	68bb      	ldr	r3, [r7, #8]
 80143fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014400:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8014402:	683b      	ldr	r3, [r7, #0]
 8014404:	689b      	ldr	r3, [r3, #8]
 8014406:	68ba      	ldr	r2, [r7, #8]
 8014408:	4313      	orrs	r3, r2
 801440a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	68ba      	ldr	r2, [r7, #8]
 8014412:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	2201      	movs	r2, #1
 8014418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	2200      	movs	r2, #0
 8014420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014424:	2300      	movs	r3, #0
}
 8014426:	4618      	mov	r0, r3
 8014428:	3714      	adds	r7, #20
 801442a:	46bd      	mov	sp, r7
 801442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014430:	4770      	bx	lr
 8014432:	bf00      	nop
 8014434:	40012c00 	.word	0x40012c00
 8014438:	40013400 	.word	0x40013400
 801443c:	40000400 	.word	0x40000400
 8014440:	40000800 	.word	0x40000800
 8014444:	40000c00 	.word	0x40000c00
 8014448:	40014000 	.word	0x40014000

0801444c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801444c:	b580      	push	{r7, lr}
 801444e:	b082      	sub	sp, #8
 8014450:	af00      	add	r7, sp, #0
 8014452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d101      	bne.n	801445e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801445a:	2301      	movs	r3, #1
 801445c:	e040      	b.n	80144e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014462:	2b00      	cmp	r3, #0
 8014464:	d106      	bne.n	8014474 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	2200      	movs	r2, #0
 801446a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801446e:	6878      	ldr	r0, [r7, #4]
 8014470:	f7ee fd32 	bl	8002ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	2224      	movs	r2, #36	; 0x24
 8014478:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	681a      	ldr	r2, [r3, #0]
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	f022 0201 	bic.w	r2, r2, #1
 8014488:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801448a:	6878      	ldr	r0, [r7, #4]
 801448c:	f000 f8c0 	bl	8014610 <UART_SetConfig>
 8014490:	4603      	mov	r3, r0
 8014492:	2b01      	cmp	r3, #1
 8014494:	d101      	bne.n	801449a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8014496:	2301      	movs	r3, #1
 8014498:	e022      	b.n	80144e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d002      	beq.n	80144a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80144a2:	6878      	ldr	r0, [r7, #4]
 80144a4:	f000 fb6c 	bl	8014b80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	685a      	ldr	r2, [r3, #4]
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80144b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	689a      	ldr	r2, [r3, #8]
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80144c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	681a      	ldr	r2, [r3, #0]
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	f042 0201 	orr.w	r2, r2, #1
 80144d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80144d8:	6878      	ldr	r0, [r7, #4]
 80144da:	f000 fbf3 	bl	8014cc4 <UART_CheckIdleState>
 80144de:	4603      	mov	r3, r0
}
 80144e0:	4618      	mov	r0, r3
 80144e2:	3708      	adds	r7, #8
 80144e4:	46bd      	mov	sp, r7
 80144e6:	bd80      	pop	{r7, pc}

080144e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b08a      	sub	sp, #40	; 0x28
 80144ec:	af02      	add	r7, sp, #8
 80144ee:	60f8      	str	r0, [r7, #12]
 80144f0:	60b9      	str	r1, [r7, #8]
 80144f2:	603b      	str	r3, [r7, #0]
 80144f4:	4613      	mov	r3, r2
 80144f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80144fc:	2b20      	cmp	r3, #32
 80144fe:	f040 8082 	bne.w	8014606 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8014502:	68bb      	ldr	r3, [r7, #8]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d002      	beq.n	801450e <HAL_UART_Transmit+0x26>
 8014508:	88fb      	ldrh	r3, [r7, #6]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d101      	bne.n	8014512 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801450e:	2301      	movs	r3, #1
 8014510:	e07a      	b.n	8014608 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8014518:	2b01      	cmp	r3, #1
 801451a:	d101      	bne.n	8014520 <HAL_UART_Transmit+0x38>
 801451c:	2302      	movs	r3, #2
 801451e:	e073      	b.n	8014608 <HAL_UART_Transmit+0x120>
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	2201      	movs	r2, #1
 8014524:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	2200      	movs	r2, #0
 801452c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	2221      	movs	r2, #33	; 0x21
 8014534:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014536:	f7f6 ffdb 	bl	800b4f0 <HAL_GetTick>
 801453a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	88fa      	ldrh	r2, [r7, #6]
 8014540:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	88fa      	ldrh	r2, [r7, #6]
 8014548:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	689b      	ldr	r3, [r3, #8]
 8014550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014554:	d108      	bne.n	8014568 <HAL_UART_Transmit+0x80>
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	691b      	ldr	r3, [r3, #16]
 801455a:	2b00      	cmp	r3, #0
 801455c:	d104      	bne.n	8014568 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 801455e:	2300      	movs	r3, #0
 8014560:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8014562:	68bb      	ldr	r3, [r7, #8]
 8014564:	61bb      	str	r3, [r7, #24]
 8014566:	e003      	b.n	8014570 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8014568:	68bb      	ldr	r3, [r7, #8]
 801456a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801456c:	2300      	movs	r3, #0
 801456e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	2200      	movs	r2, #0
 8014574:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8014578:	e02d      	b.n	80145d6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801457a:	683b      	ldr	r3, [r7, #0]
 801457c:	9300      	str	r3, [sp, #0]
 801457e:	697b      	ldr	r3, [r7, #20]
 8014580:	2200      	movs	r2, #0
 8014582:	2180      	movs	r1, #128	; 0x80
 8014584:	68f8      	ldr	r0, [r7, #12]
 8014586:	f000 fbe6 	bl	8014d56 <UART_WaitOnFlagUntilTimeout>
 801458a:	4603      	mov	r3, r0
 801458c:	2b00      	cmp	r3, #0
 801458e:	d001      	beq.n	8014594 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8014590:	2303      	movs	r3, #3
 8014592:	e039      	b.n	8014608 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8014594:	69fb      	ldr	r3, [r7, #28]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d10b      	bne.n	80145b2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801459a:	69bb      	ldr	r3, [r7, #24]
 801459c:	881a      	ldrh	r2, [r3, #0]
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80145a6:	b292      	uxth	r2, r2
 80145a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80145aa:	69bb      	ldr	r3, [r7, #24]
 80145ac:	3302      	adds	r3, #2
 80145ae:	61bb      	str	r3, [r7, #24]
 80145b0:	e008      	b.n	80145c4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80145b2:	69fb      	ldr	r3, [r7, #28]
 80145b4:	781a      	ldrb	r2, [r3, #0]
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	b292      	uxth	r2, r2
 80145bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80145be:	69fb      	ldr	r3, [r7, #28]
 80145c0:	3301      	adds	r3, #1
 80145c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80145ca:	b29b      	uxth	r3, r3
 80145cc:	3b01      	subs	r3, #1
 80145ce:	b29a      	uxth	r2, r3
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80145dc:	b29b      	uxth	r3, r3
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d1cb      	bne.n	801457a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80145e2:	683b      	ldr	r3, [r7, #0]
 80145e4:	9300      	str	r3, [sp, #0]
 80145e6:	697b      	ldr	r3, [r7, #20]
 80145e8:	2200      	movs	r2, #0
 80145ea:	2140      	movs	r1, #64	; 0x40
 80145ec:	68f8      	ldr	r0, [r7, #12]
 80145ee:	f000 fbb2 	bl	8014d56 <UART_WaitOnFlagUntilTimeout>
 80145f2:	4603      	mov	r3, r0
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d001      	beq.n	80145fc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80145f8:	2303      	movs	r3, #3
 80145fa:	e005      	b.n	8014608 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	2220      	movs	r2, #32
 8014600:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8014602:	2300      	movs	r3, #0
 8014604:	e000      	b.n	8014608 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8014606:	2302      	movs	r3, #2
  }
}
 8014608:	4618      	mov	r0, r3
 801460a:	3720      	adds	r7, #32
 801460c:	46bd      	mov	sp, r7
 801460e:	bd80      	pop	{r7, pc}

08014610 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014614:	b08a      	sub	sp, #40	; 0x28
 8014616:	af00      	add	r7, sp, #0
 8014618:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801461a:	2300      	movs	r3, #0
 801461c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	689a      	ldr	r2, [r3, #8]
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	691b      	ldr	r3, [r3, #16]
 8014628:	431a      	orrs	r2, r3
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	695b      	ldr	r3, [r3, #20]
 801462e:	431a      	orrs	r2, r3
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	69db      	ldr	r3, [r3, #28]
 8014634:	4313      	orrs	r3, r2
 8014636:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	681a      	ldr	r2, [r3, #0]
 801463e:	4ba4      	ldr	r3, [pc, #656]	; (80148d0 <UART_SetConfig+0x2c0>)
 8014640:	4013      	ands	r3, r2
 8014642:	68fa      	ldr	r2, [r7, #12]
 8014644:	6812      	ldr	r2, [r2, #0]
 8014646:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014648:	430b      	orrs	r3, r1
 801464a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	685b      	ldr	r3, [r3, #4]
 8014652:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	68da      	ldr	r2, [r3, #12]
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	430a      	orrs	r2, r1
 8014660:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	699b      	ldr	r3, [r3, #24]
 8014666:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	4a99      	ldr	r2, [pc, #612]	; (80148d4 <UART_SetConfig+0x2c4>)
 801466e:	4293      	cmp	r3, r2
 8014670:	d004      	beq.n	801467c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	6a1b      	ldr	r3, [r3, #32]
 8014676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014678:	4313      	orrs	r3, r2
 801467a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	689b      	ldr	r3, [r3, #8]
 8014682:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801468c:	430a      	orrs	r2, r1
 801468e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	4a90      	ldr	r2, [pc, #576]	; (80148d8 <UART_SetConfig+0x2c8>)
 8014696:	4293      	cmp	r3, r2
 8014698:	d126      	bne.n	80146e8 <UART_SetConfig+0xd8>
 801469a:	4b90      	ldr	r3, [pc, #576]	; (80148dc <UART_SetConfig+0x2cc>)
 801469c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80146a0:	f003 0303 	and.w	r3, r3, #3
 80146a4:	2b03      	cmp	r3, #3
 80146a6:	d81b      	bhi.n	80146e0 <UART_SetConfig+0xd0>
 80146a8:	a201      	add	r2, pc, #4	; (adr r2, 80146b0 <UART_SetConfig+0xa0>)
 80146aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146ae:	bf00      	nop
 80146b0:	080146c1 	.word	0x080146c1
 80146b4:	080146d1 	.word	0x080146d1
 80146b8:	080146c9 	.word	0x080146c9
 80146bc:	080146d9 	.word	0x080146d9
 80146c0:	2301      	movs	r3, #1
 80146c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80146c6:	e116      	b.n	80148f6 <UART_SetConfig+0x2e6>
 80146c8:	2302      	movs	r3, #2
 80146ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80146ce:	e112      	b.n	80148f6 <UART_SetConfig+0x2e6>
 80146d0:	2304      	movs	r3, #4
 80146d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80146d6:	e10e      	b.n	80148f6 <UART_SetConfig+0x2e6>
 80146d8:	2308      	movs	r3, #8
 80146da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80146de:	e10a      	b.n	80148f6 <UART_SetConfig+0x2e6>
 80146e0:	2310      	movs	r3, #16
 80146e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80146e6:	e106      	b.n	80148f6 <UART_SetConfig+0x2e6>
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	4a7c      	ldr	r2, [pc, #496]	; (80148e0 <UART_SetConfig+0x2d0>)
 80146ee:	4293      	cmp	r3, r2
 80146f0:	d138      	bne.n	8014764 <UART_SetConfig+0x154>
 80146f2:	4b7a      	ldr	r3, [pc, #488]	; (80148dc <UART_SetConfig+0x2cc>)
 80146f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80146f8:	f003 030c 	and.w	r3, r3, #12
 80146fc:	2b0c      	cmp	r3, #12
 80146fe:	d82d      	bhi.n	801475c <UART_SetConfig+0x14c>
 8014700:	a201      	add	r2, pc, #4	; (adr r2, 8014708 <UART_SetConfig+0xf8>)
 8014702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014706:	bf00      	nop
 8014708:	0801473d 	.word	0x0801473d
 801470c:	0801475d 	.word	0x0801475d
 8014710:	0801475d 	.word	0x0801475d
 8014714:	0801475d 	.word	0x0801475d
 8014718:	0801474d 	.word	0x0801474d
 801471c:	0801475d 	.word	0x0801475d
 8014720:	0801475d 	.word	0x0801475d
 8014724:	0801475d 	.word	0x0801475d
 8014728:	08014745 	.word	0x08014745
 801472c:	0801475d 	.word	0x0801475d
 8014730:	0801475d 	.word	0x0801475d
 8014734:	0801475d 	.word	0x0801475d
 8014738:	08014755 	.word	0x08014755
 801473c:	2300      	movs	r3, #0
 801473e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014742:	e0d8      	b.n	80148f6 <UART_SetConfig+0x2e6>
 8014744:	2302      	movs	r3, #2
 8014746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801474a:	e0d4      	b.n	80148f6 <UART_SetConfig+0x2e6>
 801474c:	2304      	movs	r3, #4
 801474e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014752:	e0d0      	b.n	80148f6 <UART_SetConfig+0x2e6>
 8014754:	2308      	movs	r3, #8
 8014756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801475a:	e0cc      	b.n	80148f6 <UART_SetConfig+0x2e6>
 801475c:	2310      	movs	r3, #16
 801475e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014762:	e0c8      	b.n	80148f6 <UART_SetConfig+0x2e6>
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	4a5e      	ldr	r2, [pc, #376]	; (80148e4 <UART_SetConfig+0x2d4>)
 801476a:	4293      	cmp	r3, r2
 801476c:	d125      	bne.n	80147ba <UART_SetConfig+0x1aa>
 801476e:	4b5b      	ldr	r3, [pc, #364]	; (80148dc <UART_SetConfig+0x2cc>)
 8014770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014774:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8014778:	2b30      	cmp	r3, #48	; 0x30
 801477a:	d016      	beq.n	80147aa <UART_SetConfig+0x19a>
 801477c:	2b30      	cmp	r3, #48	; 0x30
 801477e:	d818      	bhi.n	80147b2 <UART_SetConfig+0x1a2>
 8014780:	2b20      	cmp	r3, #32
 8014782:	d00a      	beq.n	801479a <UART_SetConfig+0x18a>
 8014784:	2b20      	cmp	r3, #32
 8014786:	d814      	bhi.n	80147b2 <UART_SetConfig+0x1a2>
 8014788:	2b00      	cmp	r3, #0
 801478a:	d002      	beq.n	8014792 <UART_SetConfig+0x182>
 801478c:	2b10      	cmp	r3, #16
 801478e:	d008      	beq.n	80147a2 <UART_SetConfig+0x192>
 8014790:	e00f      	b.n	80147b2 <UART_SetConfig+0x1a2>
 8014792:	2300      	movs	r3, #0
 8014794:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014798:	e0ad      	b.n	80148f6 <UART_SetConfig+0x2e6>
 801479a:	2302      	movs	r3, #2
 801479c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80147a0:	e0a9      	b.n	80148f6 <UART_SetConfig+0x2e6>
 80147a2:	2304      	movs	r3, #4
 80147a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80147a8:	e0a5      	b.n	80148f6 <UART_SetConfig+0x2e6>
 80147aa:	2308      	movs	r3, #8
 80147ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80147b0:	e0a1      	b.n	80148f6 <UART_SetConfig+0x2e6>
 80147b2:	2310      	movs	r3, #16
 80147b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80147b8:	e09d      	b.n	80148f6 <UART_SetConfig+0x2e6>
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	4a4a      	ldr	r2, [pc, #296]	; (80148e8 <UART_SetConfig+0x2d8>)
 80147c0:	4293      	cmp	r3, r2
 80147c2:	d125      	bne.n	8014810 <UART_SetConfig+0x200>
 80147c4:	4b45      	ldr	r3, [pc, #276]	; (80148dc <UART_SetConfig+0x2cc>)
 80147c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80147ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80147ce:	2bc0      	cmp	r3, #192	; 0xc0
 80147d0:	d016      	beq.n	8014800 <UART_SetConfig+0x1f0>
 80147d2:	2bc0      	cmp	r3, #192	; 0xc0
 80147d4:	d818      	bhi.n	8014808 <UART_SetConfig+0x1f8>
 80147d6:	2b80      	cmp	r3, #128	; 0x80
 80147d8:	d00a      	beq.n	80147f0 <UART_SetConfig+0x1e0>
 80147da:	2b80      	cmp	r3, #128	; 0x80
 80147dc:	d814      	bhi.n	8014808 <UART_SetConfig+0x1f8>
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d002      	beq.n	80147e8 <UART_SetConfig+0x1d8>
 80147e2:	2b40      	cmp	r3, #64	; 0x40
 80147e4:	d008      	beq.n	80147f8 <UART_SetConfig+0x1e8>
 80147e6:	e00f      	b.n	8014808 <UART_SetConfig+0x1f8>
 80147e8:	2300      	movs	r3, #0
 80147ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80147ee:	e082      	b.n	80148f6 <UART_SetConfig+0x2e6>
 80147f0:	2302      	movs	r3, #2
 80147f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80147f6:	e07e      	b.n	80148f6 <UART_SetConfig+0x2e6>
 80147f8:	2304      	movs	r3, #4
 80147fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80147fe:	e07a      	b.n	80148f6 <UART_SetConfig+0x2e6>
 8014800:	2308      	movs	r3, #8
 8014802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014806:	e076      	b.n	80148f6 <UART_SetConfig+0x2e6>
 8014808:	2310      	movs	r3, #16
 801480a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801480e:	e072      	b.n	80148f6 <UART_SetConfig+0x2e6>
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	4a35      	ldr	r2, [pc, #212]	; (80148ec <UART_SetConfig+0x2dc>)
 8014816:	4293      	cmp	r3, r2
 8014818:	d12a      	bne.n	8014870 <UART_SetConfig+0x260>
 801481a:	4b30      	ldr	r3, [pc, #192]	; (80148dc <UART_SetConfig+0x2cc>)
 801481c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014820:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014824:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014828:	d01a      	beq.n	8014860 <UART_SetConfig+0x250>
 801482a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801482e:	d81b      	bhi.n	8014868 <UART_SetConfig+0x258>
 8014830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014834:	d00c      	beq.n	8014850 <UART_SetConfig+0x240>
 8014836:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801483a:	d815      	bhi.n	8014868 <UART_SetConfig+0x258>
 801483c:	2b00      	cmp	r3, #0
 801483e:	d003      	beq.n	8014848 <UART_SetConfig+0x238>
 8014840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014844:	d008      	beq.n	8014858 <UART_SetConfig+0x248>
 8014846:	e00f      	b.n	8014868 <UART_SetConfig+0x258>
 8014848:	2300      	movs	r3, #0
 801484a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801484e:	e052      	b.n	80148f6 <UART_SetConfig+0x2e6>
 8014850:	2302      	movs	r3, #2
 8014852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014856:	e04e      	b.n	80148f6 <UART_SetConfig+0x2e6>
 8014858:	2304      	movs	r3, #4
 801485a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801485e:	e04a      	b.n	80148f6 <UART_SetConfig+0x2e6>
 8014860:	2308      	movs	r3, #8
 8014862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014866:	e046      	b.n	80148f6 <UART_SetConfig+0x2e6>
 8014868:	2310      	movs	r3, #16
 801486a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801486e:	e042      	b.n	80148f6 <UART_SetConfig+0x2e6>
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	4a17      	ldr	r2, [pc, #92]	; (80148d4 <UART_SetConfig+0x2c4>)
 8014876:	4293      	cmp	r3, r2
 8014878:	d13a      	bne.n	80148f0 <UART_SetConfig+0x2e0>
 801487a:	4b18      	ldr	r3, [pc, #96]	; (80148dc <UART_SetConfig+0x2cc>)
 801487c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014880:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8014884:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8014888:	d01a      	beq.n	80148c0 <UART_SetConfig+0x2b0>
 801488a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801488e:	d81b      	bhi.n	80148c8 <UART_SetConfig+0x2b8>
 8014890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014894:	d00c      	beq.n	80148b0 <UART_SetConfig+0x2a0>
 8014896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801489a:	d815      	bhi.n	80148c8 <UART_SetConfig+0x2b8>
 801489c:	2b00      	cmp	r3, #0
 801489e:	d003      	beq.n	80148a8 <UART_SetConfig+0x298>
 80148a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80148a4:	d008      	beq.n	80148b8 <UART_SetConfig+0x2a8>
 80148a6:	e00f      	b.n	80148c8 <UART_SetConfig+0x2b8>
 80148a8:	2300      	movs	r3, #0
 80148aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80148ae:	e022      	b.n	80148f6 <UART_SetConfig+0x2e6>
 80148b0:	2302      	movs	r3, #2
 80148b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80148b6:	e01e      	b.n	80148f6 <UART_SetConfig+0x2e6>
 80148b8:	2304      	movs	r3, #4
 80148ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80148be:	e01a      	b.n	80148f6 <UART_SetConfig+0x2e6>
 80148c0:	2308      	movs	r3, #8
 80148c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80148c6:	e016      	b.n	80148f6 <UART_SetConfig+0x2e6>
 80148c8:	2310      	movs	r3, #16
 80148ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80148ce:	e012      	b.n	80148f6 <UART_SetConfig+0x2e6>
 80148d0:	efff69f3 	.word	0xefff69f3
 80148d4:	40008000 	.word	0x40008000
 80148d8:	40013800 	.word	0x40013800
 80148dc:	40021000 	.word	0x40021000
 80148e0:	40004400 	.word	0x40004400
 80148e4:	40004800 	.word	0x40004800
 80148e8:	40004c00 	.word	0x40004c00
 80148ec:	40005000 	.word	0x40005000
 80148f0:	2310      	movs	r3, #16
 80148f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	4a9f      	ldr	r2, [pc, #636]	; (8014b78 <UART_SetConfig+0x568>)
 80148fc:	4293      	cmp	r3, r2
 80148fe:	d17a      	bne.n	80149f6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8014900:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014904:	2b08      	cmp	r3, #8
 8014906:	d824      	bhi.n	8014952 <UART_SetConfig+0x342>
 8014908:	a201      	add	r2, pc, #4	; (adr r2, 8014910 <UART_SetConfig+0x300>)
 801490a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801490e:	bf00      	nop
 8014910:	08014935 	.word	0x08014935
 8014914:	08014953 	.word	0x08014953
 8014918:	0801493d 	.word	0x0801493d
 801491c:	08014953 	.word	0x08014953
 8014920:	08014943 	.word	0x08014943
 8014924:	08014953 	.word	0x08014953
 8014928:	08014953 	.word	0x08014953
 801492c:	08014953 	.word	0x08014953
 8014930:	0801494b 	.word	0x0801494b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014934:	f7fc f8f4 	bl	8010b20 <HAL_RCC_GetPCLK1Freq>
 8014938:	61f8      	str	r0, [r7, #28]
        break;
 801493a:	e010      	b.n	801495e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801493c:	4b8f      	ldr	r3, [pc, #572]	; (8014b7c <UART_SetConfig+0x56c>)
 801493e:	61fb      	str	r3, [r7, #28]
        break;
 8014940:	e00d      	b.n	801495e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014942:	f7fc f855 	bl	80109f0 <HAL_RCC_GetSysClockFreq>
 8014946:	61f8      	str	r0, [r7, #28]
        break;
 8014948:	e009      	b.n	801495e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801494a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801494e:	61fb      	str	r3, [r7, #28]
        break;
 8014950:	e005      	b.n	801495e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8014952:	2300      	movs	r3, #0
 8014954:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8014956:	2301      	movs	r3, #1
 8014958:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 801495c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801495e:	69fb      	ldr	r3, [r7, #28]
 8014960:	2b00      	cmp	r3, #0
 8014962:	f000 80fb 	beq.w	8014b5c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	685a      	ldr	r2, [r3, #4]
 801496a:	4613      	mov	r3, r2
 801496c:	005b      	lsls	r3, r3, #1
 801496e:	4413      	add	r3, r2
 8014970:	69fa      	ldr	r2, [r7, #28]
 8014972:	429a      	cmp	r2, r3
 8014974:	d305      	bcc.n	8014982 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	685b      	ldr	r3, [r3, #4]
 801497a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801497c:	69fa      	ldr	r2, [r7, #28]
 801497e:	429a      	cmp	r2, r3
 8014980:	d903      	bls.n	801498a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8014982:	2301      	movs	r3, #1
 8014984:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014988:	e0e8      	b.n	8014b5c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801498a:	69fb      	ldr	r3, [r7, #28]
 801498c:	2200      	movs	r2, #0
 801498e:	461c      	mov	r4, r3
 8014990:	4615      	mov	r5, r2
 8014992:	f04f 0200 	mov.w	r2, #0
 8014996:	f04f 0300 	mov.w	r3, #0
 801499a:	022b      	lsls	r3, r5, #8
 801499c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80149a0:	0222      	lsls	r2, r4, #8
 80149a2:	68f9      	ldr	r1, [r7, #12]
 80149a4:	6849      	ldr	r1, [r1, #4]
 80149a6:	0849      	lsrs	r1, r1, #1
 80149a8:	2000      	movs	r0, #0
 80149aa:	4688      	mov	r8, r1
 80149ac:	4681      	mov	r9, r0
 80149ae:	eb12 0a08 	adds.w	sl, r2, r8
 80149b2:	eb43 0b09 	adc.w	fp, r3, r9
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	685b      	ldr	r3, [r3, #4]
 80149ba:	2200      	movs	r2, #0
 80149bc:	603b      	str	r3, [r7, #0]
 80149be:	607a      	str	r2, [r7, #4]
 80149c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80149c4:	4650      	mov	r0, sl
 80149c6:	4659      	mov	r1, fp
 80149c8:	f7eb ffa0 	bl	800090c <__aeabi_uldivmod>
 80149cc:	4602      	mov	r2, r0
 80149ce:	460b      	mov	r3, r1
 80149d0:	4613      	mov	r3, r2
 80149d2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80149d4:	69bb      	ldr	r3, [r7, #24]
 80149d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80149da:	d308      	bcc.n	80149ee <UART_SetConfig+0x3de>
 80149dc:	69bb      	ldr	r3, [r7, #24]
 80149de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80149e2:	d204      	bcs.n	80149ee <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	69ba      	ldr	r2, [r7, #24]
 80149ea:	60da      	str	r2, [r3, #12]
 80149ec:	e0b6      	b.n	8014b5c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80149ee:	2301      	movs	r3, #1
 80149f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80149f4:	e0b2      	b.n	8014b5c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	69db      	ldr	r3, [r3, #28]
 80149fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80149fe:	d15e      	bne.n	8014abe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8014a00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014a04:	2b08      	cmp	r3, #8
 8014a06:	d828      	bhi.n	8014a5a <UART_SetConfig+0x44a>
 8014a08:	a201      	add	r2, pc, #4	; (adr r2, 8014a10 <UART_SetConfig+0x400>)
 8014a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a0e:	bf00      	nop
 8014a10:	08014a35 	.word	0x08014a35
 8014a14:	08014a3d 	.word	0x08014a3d
 8014a18:	08014a45 	.word	0x08014a45
 8014a1c:	08014a5b 	.word	0x08014a5b
 8014a20:	08014a4b 	.word	0x08014a4b
 8014a24:	08014a5b 	.word	0x08014a5b
 8014a28:	08014a5b 	.word	0x08014a5b
 8014a2c:	08014a5b 	.word	0x08014a5b
 8014a30:	08014a53 	.word	0x08014a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014a34:	f7fc f874 	bl	8010b20 <HAL_RCC_GetPCLK1Freq>
 8014a38:	61f8      	str	r0, [r7, #28]
        break;
 8014a3a:	e014      	b.n	8014a66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014a3c:	f7fc f886 	bl	8010b4c <HAL_RCC_GetPCLK2Freq>
 8014a40:	61f8      	str	r0, [r7, #28]
        break;
 8014a42:	e010      	b.n	8014a66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8014a44:	4b4d      	ldr	r3, [pc, #308]	; (8014b7c <UART_SetConfig+0x56c>)
 8014a46:	61fb      	str	r3, [r7, #28]
        break;
 8014a48:	e00d      	b.n	8014a66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014a4a:	f7fb ffd1 	bl	80109f0 <HAL_RCC_GetSysClockFreq>
 8014a4e:	61f8      	str	r0, [r7, #28]
        break;
 8014a50:	e009      	b.n	8014a66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014a56:	61fb      	str	r3, [r7, #28]
        break;
 8014a58:	e005      	b.n	8014a66 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8014a5e:	2301      	movs	r3, #1
 8014a60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8014a64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8014a66:	69fb      	ldr	r3, [r7, #28]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d077      	beq.n	8014b5c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8014a6c:	69fb      	ldr	r3, [r7, #28]
 8014a6e:	005a      	lsls	r2, r3, #1
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	685b      	ldr	r3, [r3, #4]
 8014a74:	085b      	lsrs	r3, r3, #1
 8014a76:	441a      	add	r2, r3
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	685b      	ldr	r3, [r3, #4]
 8014a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014a80:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014a82:	69bb      	ldr	r3, [r7, #24]
 8014a84:	2b0f      	cmp	r3, #15
 8014a86:	d916      	bls.n	8014ab6 <UART_SetConfig+0x4a6>
 8014a88:	69bb      	ldr	r3, [r7, #24]
 8014a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014a8e:	d212      	bcs.n	8014ab6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014a90:	69bb      	ldr	r3, [r7, #24]
 8014a92:	b29b      	uxth	r3, r3
 8014a94:	f023 030f 	bic.w	r3, r3, #15
 8014a98:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8014a9a:	69bb      	ldr	r3, [r7, #24]
 8014a9c:	085b      	lsrs	r3, r3, #1
 8014a9e:	b29b      	uxth	r3, r3
 8014aa0:	f003 0307 	and.w	r3, r3, #7
 8014aa4:	b29a      	uxth	r2, r3
 8014aa6:	8afb      	ldrh	r3, [r7, #22]
 8014aa8:	4313      	orrs	r3, r2
 8014aaa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	8afa      	ldrh	r2, [r7, #22]
 8014ab2:	60da      	str	r2, [r3, #12]
 8014ab4:	e052      	b.n	8014b5c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8014ab6:	2301      	movs	r3, #1
 8014ab8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014abc:	e04e      	b.n	8014b5c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8014abe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014ac2:	2b08      	cmp	r3, #8
 8014ac4:	d827      	bhi.n	8014b16 <UART_SetConfig+0x506>
 8014ac6:	a201      	add	r2, pc, #4	; (adr r2, 8014acc <UART_SetConfig+0x4bc>)
 8014ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014acc:	08014af1 	.word	0x08014af1
 8014ad0:	08014af9 	.word	0x08014af9
 8014ad4:	08014b01 	.word	0x08014b01
 8014ad8:	08014b17 	.word	0x08014b17
 8014adc:	08014b07 	.word	0x08014b07
 8014ae0:	08014b17 	.word	0x08014b17
 8014ae4:	08014b17 	.word	0x08014b17
 8014ae8:	08014b17 	.word	0x08014b17
 8014aec:	08014b0f 	.word	0x08014b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014af0:	f7fc f816 	bl	8010b20 <HAL_RCC_GetPCLK1Freq>
 8014af4:	61f8      	str	r0, [r7, #28]
        break;
 8014af6:	e014      	b.n	8014b22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014af8:	f7fc f828 	bl	8010b4c <HAL_RCC_GetPCLK2Freq>
 8014afc:	61f8      	str	r0, [r7, #28]
        break;
 8014afe:	e010      	b.n	8014b22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8014b00:	4b1e      	ldr	r3, [pc, #120]	; (8014b7c <UART_SetConfig+0x56c>)
 8014b02:	61fb      	str	r3, [r7, #28]
        break;
 8014b04:	e00d      	b.n	8014b22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014b06:	f7fb ff73 	bl	80109f0 <HAL_RCC_GetSysClockFreq>
 8014b0a:	61f8      	str	r0, [r7, #28]
        break;
 8014b0c:	e009      	b.n	8014b22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014b12:	61fb      	str	r3, [r7, #28]
        break;
 8014b14:	e005      	b.n	8014b22 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8014b16:	2300      	movs	r3, #0
 8014b18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8014b1a:	2301      	movs	r3, #1
 8014b1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8014b20:	bf00      	nop
    }

    if (pclk != 0U)
 8014b22:	69fb      	ldr	r3, [r7, #28]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d019      	beq.n	8014b5c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	685b      	ldr	r3, [r3, #4]
 8014b2c:	085a      	lsrs	r2, r3, #1
 8014b2e:	69fb      	ldr	r3, [r7, #28]
 8014b30:	441a      	add	r2, r3
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	685b      	ldr	r3, [r3, #4]
 8014b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8014b3a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014b3c:	69bb      	ldr	r3, [r7, #24]
 8014b3e:	2b0f      	cmp	r3, #15
 8014b40:	d909      	bls.n	8014b56 <UART_SetConfig+0x546>
 8014b42:	69bb      	ldr	r3, [r7, #24]
 8014b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014b48:	d205      	bcs.n	8014b56 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014b4a:	69bb      	ldr	r3, [r7, #24]
 8014b4c:	b29a      	uxth	r2, r3
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	60da      	str	r2, [r3, #12]
 8014b54:	e002      	b.n	8014b5c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8014b56:	2301      	movs	r3, #1
 8014b58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	2200      	movs	r2, #0
 8014b60:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	2200      	movs	r2, #0
 8014b66:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8014b68:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	3728      	adds	r7, #40	; 0x28
 8014b70:	46bd      	mov	sp, r7
 8014b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014b76:	bf00      	nop
 8014b78:	40008000 	.word	0x40008000
 8014b7c:	00f42400 	.word	0x00f42400

08014b80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014b80:	b480      	push	{r7}
 8014b82:	b083      	sub	sp, #12
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b8c:	f003 0301 	and.w	r3, r3, #1
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d00a      	beq.n	8014baa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	685b      	ldr	r3, [r3, #4]
 8014b9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	430a      	orrs	r2, r1
 8014ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bae:	f003 0302 	and.w	r3, r3, #2
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d00a      	beq.n	8014bcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	685b      	ldr	r3, [r3, #4]
 8014bbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	430a      	orrs	r2, r1
 8014bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bd0:	f003 0304 	and.w	r3, r3, #4
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d00a      	beq.n	8014bee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	685b      	ldr	r3, [r3, #4]
 8014bde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	430a      	orrs	r2, r1
 8014bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bf2:	f003 0308 	and.w	r3, r3, #8
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d00a      	beq.n	8014c10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	685b      	ldr	r3, [r3, #4]
 8014c00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	430a      	orrs	r2, r1
 8014c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c14:	f003 0310 	and.w	r3, r3, #16
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d00a      	beq.n	8014c32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	689b      	ldr	r3, [r3, #8]
 8014c22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	430a      	orrs	r2, r1
 8014c30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c36:	f003 0320 	and.w	r3, r3, #32
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d00a      	beq.n	8014c54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	689b      	ldr	r3, [r3, #8]
 8014c44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	430a      	orrs	r2, r1
 8014c52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d01a      	beq.n	8014c96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	685b      	ldr	r3, [r3, #4]
 8014c66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	430a      	orrs	r2, r1
 8014c74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014c7e:	d10a      	bne.n	8014c96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	685b      	ldr	r3, [r3, #4]
 8014c86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	430a      	orrs	r2, r1
 8014c94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d00a      	beq.n	8014cb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	685b      	ldr	r3, [r3, #4]
 8014ca8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	430a      	orrs	r2, r1
 8014cb6:	605a      	str	r2, [r3, #4]
  }
}
 8014cb8:	bf00      	nop
 8014cba:	370c      	adds	r7, #12
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc2:	4770      	bx	lr

08014cc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b086      	sub	sp, #24
 8014cc8:	af02      	add	r7, sp, #8
 8014cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	2200      	movs	r2, #0
 8014cd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014cd4:	f7f6 fc0c 	bl	800b4f0 <HAL_GetTick>
 8014cd8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	f003 0308 	and.w	r3, r3, #8
 8014ce4:	2b08      	cmp	r3, #8
 8014ce6:	d10e      	bne.n	8014d06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014ce8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014cec:	9300      	str	r3, [sp, #0]
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	2200      	movs	r2, #0
 8014cf2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014cf6:	6878      	ldr	r0, [r7, #4]
 8014cf8:	f000 f82d 	bl	8014d56 <UART_WaitOnFlagUntilTimeout>
 8014cfc:	4603      	mov	r3, r0
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d001      	beq.n	8014d06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014d02:	2303      	movs	r3, #3
 8014d04:	e023      	b.n	8014d4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	f003 0304 	and.w	r3, r3, #4
 8014d10:	2b04      	cmp	r3, #4
 8014d12:	d10e      	bne.n	8014d32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014d14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014d18:	9300      	str	r3, [sp, #0]
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8014d22:	6878      	ldr	r0, [r7, #4]
 8014d24:	f000 f817 	bl	8014d56 <UART_WaitOnFlagUntilTimeout>
 8014d28:	4603      	mov	r3, r0
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d001      	beq.n	8014d32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014d2e:	2303      	movs	r3, #3
 8014d30:	e00d      	b.n	8014d4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	2220      	movs	r2, #32
 8014d36:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	2220      	movs	r2, #32
 8014d3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	2200      	movs	r2, #0
 8014d42:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	2200      	movs	r2, #0
 8014d48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8014d4c:	2300      	movs	r3, #0
}
 8014d4e:	4618      	mov	r0, r3
 8014d50:	3710      	adds	r7, #16
 8014d52:	46bd      	mov	sp, r7
 8014d54:	bd80      	pop	{r7, pc}

08014d56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014d56:	b580      	push	{r7, lr}
 8014d58:	b09c      	sub	sp, #112	; 0x70
 8014d5a:	af00      	add	r7, sp, #0
 8014d5c:	60f8      	str	r0, [r7, #12]
 8014d5e:	60b9      	str	r1, [r7, #8]
 8014d60:	603b      	str	r3, [r7, #0]
 8014d62:	4613      	mov	r3, r2
 8014d64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014d66:	e0a5      	b.n	8014eb4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014d6e:	f000 80a1 	beq.w	8014eb4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014d72:	f7f6 fbbd 	bl	800b4f0 <HAL_GetTick>
 8014d76:	4602      	mov	r2, r0
 8014d78:	683b      	ldr	r3, [r7, #0]
 8014d7a:	1ad3      	subs	r3, r2, r3
 8014d7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014d7e:	429a      	cmp	r2, r3
 8014d80:	d302      	bcc.n	8014d88 <UART_WaitOnFlagUntilTimeout+0x32>
 8014d82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d13e      	bne.n	8014e06 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d90:	e853 3f00 	ldrex	r3, [r3]
 8014d94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8014d9c:	667b      	str	r3, [r7, #100]	; 0x64
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	461a      	mov	r2, r3
 8014da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014da6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014da8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014daa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014dac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014dae:	e841 2300 	strex	r3, r2, [r1]
 8014db2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8014db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d1e6      	bne.n	8014d88 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	3308      	adds	r3, #8
 8014dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014dc4:	e853 3f00 	ldrex	r3, [r3]
 8014dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dcc:	f023 0301 	bic.w	r3, r3, #1
 8014dd0:	663b      	str	r3, [r7, #96]	; 0x60
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	3308      	adds	r3, #8
 8014dd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014dda:	64ba      	str	r2, [r7, #72]	; 0x48
 8014ddc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014dde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014de0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014de2:	e841 2300 	strex	r3, r2, [r1]
 8014de6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8014de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d1e5      	bne.n	8014dba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	2220      	movs	r2, #32
 8014df2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	2220      	movs	r2, #32
 8014df8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	2200      	movs	r2, #0
 8014dfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8014e02:	2303      	movs	r3, #3
 8014e04:	e067      	b.n	8014ed6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	f003 0304 	and.w	r3, r3, #4
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d04f      	beq.n	8014eb4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	69db      	ldr	r3, [r3, #28]
 8014e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014e22:	d147      	bne.n	8014eb4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014e2c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e36:	e853 3f00 	ldrex	r3, [r3]
 8014e3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8014e42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	461a      	mov	r2, r3
 8014e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014e4c:	637b      	str	r3, [r7, #52]	; 0x34
 8014e4e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014e52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014e54:	e841 2300 	strex	r3, r2, [r1]
 8014e58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8014e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d1e6      	bne.n	8014e2e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	3308      	adds	r3, #8
 8014e66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e68:	697b      	ldr	r3, [r7, #20]
 8014e6a:	e853 3f00 	ldrex	r3, [r3]
 8014e6e:	613b      	str	r3, [r7, #16]
   return(result);
 8014e70:	693b      	ldr	r3, [r7, #16]
 8014e72:	f023 0301 	bic.w	r3, r3, #1
 8014e76:	66bb      	str	r3, [r7, #104]	; 0x68
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	3308      	adds	r3, #8
 8014e7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014e80:	623a      	str	r2, [r7, #32]
 8014e82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e84:	69f9      	ldr	r1, [r7, #28]
 8014e86:	6a3a      	ldr	r2, [r7, #32]
 8014e88:	e841 2300 	strex	r3, r2, [r1]
 8014e8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8014e8e:	69bb      	ldr	r3, [r7, #24]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d1e5      	bne.n	8014e60 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	2220      	movs	r2, #32
 8014e98:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8014e9a:	68fb      	ldr	r3, [r7, #12]
 8014e9c:	2220      	movs	r2, #32
 8014e9e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	2220      	movs	r2, #32
 8014ea4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	2200      	movs	r2, #0
 8014eac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8014eb0:	2303      	movs	r3, #3
 8014eb2:	e010      	b.n	8014ed6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	69da      	ldr	r2, [r3, #28]
 8014eba:	68bb      	ldr	r3, [r7, #8]
 8014ebc:	4013      	ands	r3, r2
 8014ebe:	68ba      	ldr	r2, [r7, #8]
 8014ec0:	429a      	cmp	r2, r3
 8014ec2:	bf0c      	ite	eq
 8014ec4:	2301      	moveq	r3, #1
 8014ec6:	2300      	movne	r3, #0
 8014ec8:	b2db      	uxtb	r3, r3
 8014eca:	461a      	mov	r2, r3
 8014ecc:	79fb      	ldrb	r3, [r7, #7]
 8014ece:	429a      	cmp	r2, r3
 8014ed0:	f43f af4a 	beq.w	8014d68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014ed4:	2300      	movs	r3, #0
}
 8014ed6:	4618      	mov	r0, r3
 8014ed8:	3770      	adds	r7, #112	; 0x70
 8014eda:	46bd      	mov	sp, r7
 8014edc:	bd80      	pop	{r7, pc}
	...

08014ee0 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8014ee0:	b480      	push	{r7}
 8014ee2:	b087      	sub	sp, #28
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]
 8014ee8:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8014eea:	683b      	ldr	r3, [r7, #0]
 8014eec:	681a      	ldr	r2, [r3, #0]
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ef4:	683a      	ldr	r2, [r7, #0]
 8014ef6:	6812      	ldr	r2, [r2, #0]
 8014ef8:	f023 0101 	bic.w	r1, r3, #1
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8014f02:	683b      	ldr	r3, [r7, #0]
 8014f04:	689b      	ldr	r3, [r3, #8]
 8014f06:	2b08      	cmp	r3, #8
 8014f08:	d102      	bne.n	8014f10 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8014f0a:	2340      	movs	r3, #64	; 0x40
 8014f0c:	617b      	str	r3, [r7, #20]
 8014f0e:	e001      	b.n	8014f14 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8014f10:	2300      	movs	r3, #0
 8014f12:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8014f14:	683b      	ldr	r3, [r7, #0]
 8014f16:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8014f18:	697b      	ldr	r3, [r7, #20]
 8014f1a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8014f1c:	683b      	ldr	r3, [r7, #0]
 8014f1e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8014f20:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8014f22:	683b      	ldr	r3, [r7, #0]
 8014f24:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8014f26:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8014f28:	683b      	ldr	r3, [r7, #0]
 8014f2a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8014f2c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8014f2e:	683b      	ldr	r3, [r7, #0]
 8014f30:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8014f32:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8014f34:	683b      	ldr	r3, [r7, #0]
 8014f36:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8014f38:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8014f3a:	683b      	ldr	r3, [r7, #0]
 8014f3c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8014f3e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8014f40:	683b      	ldr	r3, [r7, #0]
 8014f42:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8014f44:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8014f46:	683b      	ldr	r3, [r7, #0]
 8014f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8014f4a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8014f4c:	683b      	ldr	r3, [r7, #0]
 8014f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8014f50:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8014f52:	683b      	ldr	r3, [r7, #0]
 8014f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8014f56:	4313      	orrs	r3, r2
 8014f58:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8014f5a:	683b      	ldr	r3, [r7, #0]
 8014f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f5e:	693a      	ldr	r2, [r7, #16]
 8014f60:	4313      	orrs	r3, r2
 8014f62:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8014f64:	683b      	ldr	r3, [r7, #0]
 8014f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f68:	693a      	ldr	r2, [r7, #16]
 8014f6a:	4313      	orrs	r3, r2
 8014f6c:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 8014f6e:	683b      	ldr	r3, [r7, #0]
 8014f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f72:	693a      	ldr	r2, [r7, #16]
 8014f74:	4313      	orrs	r3, r2
 8014f76:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8014f78:	4b20      	ldr	r3, [pc, #128]	; (8014ffc <FMC_NORSRAM_Init+0x11c>)
 8014f7a:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014f82:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014f8a:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8014f92:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8014f94:	683b      	ldr	r3, [r7, #0]
 8014f96:	681a      	ldr	r2, [r3, #0]
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	43db      	mvns	r3, r3
 8014fa2:	ea02 0103 	and.w	r1, r2, r3
 8014fa6:	683b      	ldr	r3, [r7, #0]
 8014fa8:	681a      	ldr	r2, [r3, #0]
 8014faa:	693b      	ldr	r3, [r7, #16]
 8014fac:	4319      	orrs	r1, r3
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8014fb4:	683b      	ldr	r3, [r7, #0]
 8014fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014fbc:	d10c      	bne.n	8014fd8 <FMC_NORSRAM_Init+0xf8>
 8014fbe:	683b      	ldr	r3, [r7, #0]
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d008      	beq.n	8014fd8 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8014fce:	683b      	ldr	r3, [r7, #0]
 8014fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fd2:	431a      	orrs	r2, r3
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8014fd8:	683b      	ldr	r3, [r7, #0]
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d006      	beq.n	8014fee <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	681a      	ldr	r2, [r3, #0]
 8014fe4:	683b      	ldr	r3, [r7, #0]
 8014fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014fe8:	431a      	orrs	r2, r3
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8014fee:	2300      	movs	r3, #0
}
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	371c      	adds	r7, #28
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ffa:	4770      	bx	lr
 8014ffc:	0008fb7f 	.word	0x0008fb7f

08015000 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8015000:	b480      	push	{r7}
 8015002:	b087      	sub	sp, #28
 8015004:	af00      	add	r7, sp, #0
 8015006:	60f8      	str	r0, [r7, #12]
 8015008:	60b9      	str	r1, [r7, #8]
 801500a:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	1c5a      	adds	r2, r3, #1
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015016:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 801501a:	68bb      	ldr	r3, [r7, #8]
 801501c:	681a      	ldr	r2, [r3, #0]
 801501e:	68bb      	ldr	r3, [r7, #8]
 8015020:	685b      	ldr	r3, [r3, #4]
 8015022:	011b      	lsls	r3, r3, #4
 8015024:	431a      	orrs	r2, r3
 8015026:	68bb      	ldr	r3, [r7, #8]
 8015028:	689b      	ldr	r3, [r3, #8]
 801502a:	021b      	lsls	r3, r3, #8
 801502c:	431a      	orrs	r2, r3
 801502e:	68bb      	ldr	r3, [r7, #8]
 8015030:	691b      	ldr	r3, [r3, #16]
 8015032:	041b      	lsls	r3, r3, #16
 8015034:	431a      	orrs	r2, r3
 8015036:	68bb      	ldr	r3, [r7, #8]
 8015038:	695b      	ldr	r3, [r3, #20]
 801503a:	3b01      	subs	r3, #1
 801503c:	051b      	lsls	r3, r3, #20
 801503e:	431a      	orrs	r2, r3
 8015040:	68bb      	ldr	r3, [r7, #8]
 8015042:	699b      	ldr	r3, [r3, #24]
 8015044:	3b02      	subs	r3, #2
 8015046:	061b      	lsls	r3, r3, #24
 8015048:	431a      	orrs	r2, r3
 801504a:	68bb      	ldr	r3, [r7, #8]
 801504c:	69db      	ldr	r3, [r3, #28]
 801504e:	4313      	orrs	r3, r2
 8015050:	687a      	ldr	r2, [r7, #4]
 8015052:	3201      	adds	r2, #1
 8015054:	4319      	orrs	r1, r3
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015064:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015068:	d113      	bne.n	8015092 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	685b      	ldr	r3, [r3, #4]
 801506e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8015072:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8015074:	68bb      	ldr	r3, [r7, #8]
 8015076:	695b      	ldr	r3, [r3, #20]
 8015078:	3b01      	subs	r3, #1
 801507a:	051b      	lsls	r3, r3, #20
 801507c:	697a      	ldr	r2, [r7, #20]
 801507e:	4313      	orrs	r3, r2
 8015080:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	685b      	ldr	r3, [r3, #4]
 8015086:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801508a:	697b      	ldr	r3, [r7, #20]
 801508c:	431a      	orrs	r2, r3
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8015092:	2300      	movs	r3, #0
}
 8015094:	4618      	mov	r0, r3
 8015096:	371c      	adds	r7, #28
 8015098:	46bd      	mov	sp, r7
 801509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509e:	4770      	bx	lr

080150a0 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80150a0:	b480      	push	{r7}
 80150a2:	b085      	sub	sp, #20
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	60f8      	str	r0, [r7, #12]
 80150a8:	60b9      	str	r1, [r7, #8]
 80150aa:	607a      	str	r2, [r7, #4]
 80150ac:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80150ae:	683b      	ldr	r3, [r7, #0]
 80150b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80150b4:	d11d      	bne.n	80150f2 <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	687a      	ldr	r2, [r7, #4]
 80150ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80150be:	4b13      	ldr	r3, [pc, #76]	; (801510c <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80150c0:	4013      	ands	r3, r2
 80150c2:	68ba      	ldr	r2, [r7, #8]
 80150c4:	6811      	ldr	r1, [r2, #0]
 80150c6:	68ba      	ldr	r2, [r7, #8]
 80150c8:	6852      	ldr	r2, [r2, #4]
 80150ca:	0112      	lsls	r2, r2, #4
 80150cc:	4311      	orrs	r1, r2
 80150ce:	68ba      	ldr	r2, [r7, #8]
 80150d0:	6892      	ldr	r2, [r2, #8]
 80150d2:	0212      	lsls	r2, r2, #8
 80150d4:	4311      	orrs	r1, r2
 80150d6:	68ba      	ldr	r2, [r7, #8]
 80150d8:	69d2      	ldr	r2, [r2, #28]
 80150da:	4311      	orrs	r1, r2
 80150dc:	68ba      	ldr	r2, [r7, #8]
 80150de:	6912      	ldr	r2, [r2, #16]
 80150e0:	0412      	lsls	r2, r2, #16
 80150e2:	430a      	orrs	r2, r1
 80150e4:	ea43 0102 	orr.w	r1, r3, r2
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	687a      	ldr	r2, [r7, #4]
 80150ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80150f0:	e005      	b.n	80150fe <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	687a      	ldr	r2, [r7, #4]
 80150f6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80150fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80150fe:	2300      	movs	r3, #0
}
 8015100:	4618      	mov	r0, r3
 8015102:	3714      	adds	r7, #20
 8015104:	46bd      	mov	sp, r7
 8015106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801510a:	4770      	bx	lr
 801510c:	cff00000 	.word	0xcff00000

08015110 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8015110:	b084      	sub	sp, #16
 8015112:	b480      	push	{r7}
 8015114:	b085      	sub	sp, #20
 8015116:	af00      	add	r7, sp, #0
 8015118:	6078      	str	r0, [r7, #4]
 801511a:	f107 001c 	add.w	r0, r7, #28
 801511e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8015122:	2300      	movs	r3, #0
 8015124:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8015126:	6a3b      	ldr	r3, [r7, #32]
 8015128:	68fa      	ldr	r2, [r7, #12]
 801512a:	4313      	orrs	r3, r2
 801512c:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 801512e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8015130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8015132:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8015134:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8015136:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8015138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 801513a:	431a      	orrs	r2, r3
             Init.ClockDiv
 801513c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 801513e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8015140:	68fa      	ldr	r2, [r7, #12]
 8015142:	4313      	orrs	r3, r2
 8015144:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	685b      	ldr	r3, [r3, #4]
 801514a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 801514e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015152:	68fa      	ldr	r2, [r7, #12]
 8015154:	431a      	orrs	r2, r3
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801515a:	2300      	movs	r3, #0
}
 801515c:	4618      	mov	r0, r3
 801515e:	3714      	adds	r7, #20
 8015160:	46bd      	mov	sp, r7
 8015162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015166:	b004      	add	sp, #16
 8015168:	4770      	bx	lr

0801516a <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 801516a:	b480      	push	{r7}
 801516c:	b083      	sub	sp, #12
 801516e:	af00      	add	r7, sp, #0
 8015170:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8015178:	4618      	mov	r0, r3
 801517a:	370c      	adds	r7, #12
 801517c:	46bd      	mov	sp, r7
 801517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015182:	4770      	bx	lr

08015184 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8015184:	b580      	push	{r7, lr}
 8015186:	b082      	sub	sp, #8
 8015188:	af00      	add	r7, sp, #0
 801518a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	2203      	movs	r2, #3
 8015190:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8015192:	2002      	movs	r0, #2
 8015194:	f7f6 f9b8 	bl	800b508 <HAL_Delay>

  return HAL_OK;
 8015198:	2300      	movs	r3, #0
}
 801519a:	4618      	mov	r0, r3
 801519c:	3708      	adds	r7, #8
 801519e:	46bd      	mov	sp, r7
 80151a0:	bd80      	pop	{r7, pc}

080151a2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80151a2:	b480      	push	{r7}
 80151a4:	b083      	sub	sp, #12
 80151a6:	af00      	add	r7, sp, #0
 80151a8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	f003 0303 	and.w	r3, r3, #3
}
 80151b2:	4618      	mov	r0, r3
 80151b4:	370c      	adds	r7, #12
 80151b6:	46bd      	mov	sp, r7
 80151b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151bc:	4770      	bx	lr

080151be <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80151be:	b480      	push	{r7}
 80151c0:	b085      	sub	sp, #20
 80151c2:	af00      	add	r7, sp, #0
 80151c4:	6078      	str	r0, [r7, #4]
 80151c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80151c8:	2300      	movs	r3, #0
 80151ca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80151cc:	683b      	ldr	r3, [r7, #0]
 80151ce:	681a      	ldr	r2, [r3, #0]
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80151d4:	683b      	ldr	r3, [r7, #0]
 80151d6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80151d8:	683b      	ldr	r3, [r7, #0]
 80151da:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80151dc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80151de:	683b      	ldr	r3, [r7, #0]
 80151e0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80151e2:	431a      	orrs	r2, r3
                       Command->CPSM);
 80151e4:	683b      	ldr	r3, [r7, #0]
 80151e6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80151e8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80151ea:	68fa      	ldr	r2, [r7, #12]
 80151ec:	4313      	orrs	r3, r2
 80151ee:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	68db      	ldr	r3, [r3, #12]
 80151f4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80151f8:	f023 030f 	bic.w	r3, r3, #15
 80151fc:	68fa      	ldr	r2, [r7, #12]
 80151fe:	431a      	orrs	r2, r3
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8015204:	2300      	movs	r3, #0
}
 8015206:	4618      	mov	r0, r3
 8015208:	3714      	adds	r7, #20
 801520a:	46bd      	mov	sp, r7
 801520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015210:	4770      	bx	lr

08015212 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8015212:	b480      	push	{r7}
 8015214:	b083      	sub	sp, #12
 8015216:	af00      	add	r7, sp, #0
 8015218:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	691b      	ldr	r3, [r3, #16]
 801521e:	b2db      	uxtb	r3, r3
}
 8015220:	4618      	mov	r0, r3
 8015222:	370c      	adds	r7, #12
 8015224:	46bd      	mov	sp, r7
 8015226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801522a:	4770      	bx	lr

0801522c <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801522c:	b480      	push	{r7}
 801522e:	b085      	sub	sp, #20
 8015230:	af00      	add	r7, sp, #0
 8015232:	6078      	str	r0, [r7, #4]
 8015234:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	3314      	adds	r3, #20
 801523a:	461a      	mov	r2, r3
 801523c:	683b      	ldr	r3, [r7, #0]
 801523e:	4413      	add	r3, r2
 8015240:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	681b      	ldr	r3, [r3, #0]
}
 8015246:	4618      	mov	r0, r3
 8015248:	3714      	adds	r7, #20
 801524a:	46bd      	mov	sp, r7
 801524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015250:	4770      	bx	lr

08015252 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8015252:	b480      	push	{r7}
 8015254:	b085      	sub	sp, #20
 8015256:	af00      	add	r7, sp, #0
 8015258:	6078      	str	r0, [r7, #4]
 801525a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801525c:	2300      	movs	r3, #0
 801525e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8015260:	683b      	ldr	r3, [r7, #0]
 8015262:	681a      	ldr	r2, [r3, #0]
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8015268:	683b      	ldr	r3, [r7, #0]
 801526a:	685a      	ldr	r2, [r3, #4]
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8015270:	683b      	ldr	r3, [r7, #0]
 8015272:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8015274:	683b      	ldr	r3, [r7, #0]
 8015276:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8015278:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 801527a:	683b      	ldr	r3, [r7, #0]
 801527c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801527e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8015280:	683b      	ldr	r3, [r7, #0]
 8015282:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8015284:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8015286:	68fa      	ldr	r2, [r7, #12]
 8015288:	4313      	orrs	r3, r2
 801528a:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015290:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	431a      	orrs	r2, r3
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801529c:	2300      	movs	r3, #0

}
 801529e:	4618      	mov	r0, r3
 80152a0:	3714      	adds	r7, #20
 80152a2:	46bd      	mov	sp, r7
 80152a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a8:	4770      	bx	lr

080152aa <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80152aa:	b580      	push	{r7, lr}
 80152ac:	b088      	sub	sp, #32
 80152ae:	af00      	add	r7, sp, #0
 80152b0:	6078      	str	r0, [r7, #4]
 80152b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80152b4:	683b      	ldr	r3, [r7, #0]
 80152b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80152b8:	2310      	movs	r3, #16
 80152ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80152bc:	2340      	movs	r3, #64	; 0x40
 80152be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80152c0:	2300      	movs	r3, #0
 80152c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80152c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80152c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80152ca:	f107 0308 	add.w	r3, r7, #8
 80152ce:	4619      	mov	r1, r3
 80152d0:	6878      	ldr	r0, [r7, #4]
 80152d2:	f7ff ff74 	bl	80151be <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80152d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80152da:	2110      	movs	r1, #16
 80152dc:	6878      	ldr	r0, [r7, #4]
 80152de:	f000 f94d 	bl	801557c <SDMMC_GetCmdResp1>
 80152e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80152e4:	69fb      	ldr	r3, [r7, #28]
}
 80152e6:	4618      	mov	r0, r3
 80152e8:	3720      	adds	r7, #32
 80152ea:	46bd      	mov	sp, r7
 80152ec:	bd80      	pop	{r7, pc}

080152ee <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80152ee:	b580      	push	{r7, lr}
 80152f0:	b08a      	sub	sp, #40	; 0x28
 80152f2:	af00      	add	r7, sp, #0
 80152f4:	60f8      	str	r0, [r7, #12]
 80152f6:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80152fa:	683b      	ldr	r3, [r7, #0]
 80152fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80152fe:	2307      	movs	r3, #7
 8015300:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015302:	2340      	movs	r3, #64	; 0x40
 8015304:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015306:	2300      	movs	r3, #0
 8015308:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801530a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801530e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015310:	f107 0310 	add.w	r3, r7, #16
 8015314:	4619      	mov	r1, r3
 8015316:	68f8      	ldr	r0, [r7, #12]
 8015318:	f7ff ff51 	bl	80151be <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801531c:	f241 3288 	movw	r2, #5000	; 0x1388
 8015320:	2107      	movs	r1, #7
 8015322:	68f8      	ldr	r0, [r7, #12]
 8015324:	f000 f92a 	bl	801557c <SDMMC_GetCmdResp1>
 8015328:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 801532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801532c:	4618      	mov	r0, r3
 801532e:	3728      	adds	r7, #40	; 0x28
 8015330:	46bd      	mov	sp, r7
 8015332:	bd80      	pop	{r7, pc}

08015334 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8015334:	b580      	push	{r7, lr}
 8015336:	b088      	sub	sp, #32
 8015338:	af00      	add	r7, sp, #0
 801533a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801533c:	2300      	movs	r3, #0
 801533e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8015340:	2300      	movs	r3, #0
 8015342:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8015344:	2300      	movs	r3, #0
 8015346:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015348:	2300      	movs	r3, #0
 801534a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801534c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015350:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015352:	f107 0308 	add.w	r3, r7, #8
 8015356:	4619      	mov	r1, r3
 8015358:	6878      	ldr	r0, [r7, #4]
 801535a:	f7ff ff30 	bl	80151be <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801535e:	6878      	ldr	r0, [r7, #4]
 8015360:	f000 fb44 	bl	80159ec <SDMMC_GetCmdError>
 8015364:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015366:	69fb      	ldr	r3, [r7, #28]
}
 8015368:	4618      	mov	r0, r3
 801536a:	3720      	adds	r7, #32
 801536c:	46bd      	mov	sp, r7
 801536e:	bd80      	pop	{r7, pc}

08015370 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8015370:	b580      	push	{r7, lr}
 8015372:	b088      	sub	sp, #32
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8015378:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801537c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801537e:	2308      	movs	r3, #8
 8015380:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015382:	2340      	movs	r3, #64	; 0x40
 8015384:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015386:	2300      	movs	r3, #0
 8015388:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801538a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801538e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015390:	f107 0308 	add.w	r3, r7, #8
 8015394:	4619      	mov	r1, r3
 8015396:	6878      	ldr	r0, [r7, #4]
 8015398:	f7ff ff11 	bl	80151be <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801539c:	6878      	ldr	r0, [r7, #4]
 801539e:	f000 fad7 	bl	8015950 <SDMMC_GetCmdResp7>
 80153a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80153a4:	69fb      	ldr	r3, [r7, #28]
}
 80153a6:	4618      	mov	r0, r3
 80153a8:	3720      	adds	r7, #32
 80153aa:	46bd      	mov	sp, r7
 80153ac:	bd80      	pop	{r7, pc}

080153ae <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80153ae:	b580      	push	{r7, lr}
 80153b0:	b088      	sub	sp, #32
 80153b2:	af00      	add	r7, sp, #0
 80153b4:	6078      	str	r0, [r7, #4]
 80153b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80153b8:	683b      	ldr	r3, [r7, #0]
 80153ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80153bc:	2337      	movs	r3, #55	; 0x37
 80153be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80153c0:	2340      	movs	r3, #64	; 0x40
 80153c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80153c4:	2300      	movs	r3, #0
 80153c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80153c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80153cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80153ce:	f107 0308 	add.w	r3, r7, #8
 80153d2:	4619      	mov	r1, r3
 80153d4:	6878      	ldr	r0, [r7, #4]
 80153d6:	f7ff fef2 	bl	80151be <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80153da:	f241 3288 	movw	r2, #5000	; 0x1388
 80153de:	2137      	movs	r1, #55	; 0x37
 80153e0:	6878      	ldr	r0, [r7, #4]
 80153e2:	f000 f8cb 	bl	801557c <SDMMC_GetCmdResp1>
 80153e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80153e8:	69fb      	ldr	r3, [r7, #28]
}
 80153ea:	4618      	mov	r0, r3
 80153ec:	3720      	adds	r7, #32
 80153ee:	46bd      	mov	sp, r7
 80153f0:	bd80      	pop	{r7, pc}

080153f2 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80153f2:	b580      	push	{r7, lr}
 80153f4:	b088      	sub	sp, #32
 80153f6:	af00      	add	r7, sp, #0
 80153f8:	6078      	str	r0, [r7, #4]
 80153fa:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80153fc:	683b      	ldr	r3, [r7, #0]
 80153fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015406:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8015408:	2329      	movs	r3, #41	; 0x29
 801540a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801540c:	2340      	movs	r3, #64	; 0x40
 801540e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015410:	2300      	movs	r3, #0
 8015412:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015418:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801541a:	f107 0308 	add.w	r3, r7, #8
 801541e:	4619      	mov	r1, r3
 8015420:	6878      	ldr	r0, [r7, #4]
 8015422:	f7ff fecc 	bl	80151be <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8015426:	6878      	ldr	r0, [r7, #4]
 8015428:	f000 f9de 	bl	80157e8 <SDMMC_GetCmdResp3>
 801542c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801542e:	69fb      	ldr	r3, [r7, #28]
}
 8015430:	4618      	mov	r0, r3
 8015432:	3720      	adds	r7, #32
 8015434:	46bd      	mov	sp, r7
 8015436:	bd80      	pop	{r7, pc}

08015438 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b088      	sub	sp, #32
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
 8015440:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8015442:	683b      	ldr	r3, [r7, #0]
 8015444:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8015446:	2306      	movs	r3, #6
 8015448:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801544a:	2340      	movs	r3, #64	; 0x40
 801544c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801544e:	2300      	movs	r3, #0
 8015450:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015456:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015458:	f107 0308 	add.w	r3, r7, #8
 801545c:	4619      	mov	r1, r3
 801545e:	6878      	ldr	r0, [r7, #4]
 8015460:	f7ff fead 	bl	80151be <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8015464:	f241 3288 	movw	r2, #5000	; 0x1388
 8015468:	2106      	movs	r1, #6
 801546a:	6878      	ldr	r0, [r7, #4]
 801546c:	f000 f886 	bl	801557c <SDMMC_GetCmdResp1>
 8015470:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015472:	69fb      	ldr	r3, [r7, #28]
}
 8015474:	4618      	mov	r0, r3
 8015476:	3720      	adds	r7, #32
 8015478:	46bd      	mov	sp, r7
 801547a:	bd80      	pop	{r7, pc}

0801547c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801547c:	b580      	push	{r7, lr}
 801547e:	b088      	sub	sp, #32
 8015480:	af00      	add	r7, sp, #0
 8015482:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8015484:	2300      	movs	r3, #0
 8015486:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8015488:	2333      	movs	r3, #51	; 0x33
 801548a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801548c:	2340      	movs	r3, #64	; 0x40
 801548e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015490:	2300      	movs	r3, #0
 8015492:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015498:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801549a:	f107 0308 	add.w	r3, r7, #8
 801549e:	4619      	mov	r1, r3
 80154a0:	6878      	ldr	r0, [r7, #4]
 80154a2:	f7ff fe8c 	bl	80151be <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80154a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80154aa:	2133      	movs	r1, #51	; 0x33
 80154ac:	6878      	ldr	r0, [r7, #4]
 80154ae:	f000 f865 	bl	801557c <SDMMC_GetCmdResp1>
 80154b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80154b4:	69fb      	ldr	r3, [r7, #28]
}
 80154b6:	4618      	mov	r0, r3
 80154b8:	3720      	adds	r7, #32
 80154ba:	46bd      	mov	sp, r7
 80154bc:	bd80      	pop	{r7, pc}

080154be <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80154be:	b580      	push	{r7, lr}
 80154c0:	b088      	sub	sp, #32
 80154c2:	af00      	add	r7, sp, #0
 80154c4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80154c6:	2300      	movs	r3, #0
 80154c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80154ca:	2302      	movs	r3, #2
 80154cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80154ce:	23c0      	movs	r3, #192	; 0xc0
 80154d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80154d2:	2300      	movs	r3, #0
 80154d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80154d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80154da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80154dc:	f107 0308 	add.w	r3, r7, #8
 80154e0:	4619      	mov	r1, r3
 80154e2:	6878      	ldr	r0, [r7, #4]
 80154e4:	f7ff fe6b 	bl	80151be <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80154e8:	6878      	ldr	r0, [r7, #4]
 80154ea:	f000 f935 	bl	8015758 <SDMMC_GetCmdResp2>
 80154ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80154f0:	69fb      	ldr	r3, [r7, #28]
}
 80154f2:	4618      	mov	r0, r3
 80154f4:	3720      	adds	r7, #32
 80154f6:	46bd      	mov	sp, r7
 80154f8:	bd80      	pop	{r7, pc}

080154fa <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80154fa:	b580      	push	{r7, lr}
 80154fc:	b088      	sub	sp, #32
 80154fe:	af00      	add	r7, sp, #0
 8015500:	6078      	str	r0, [r7, #4]
 8015502:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8015504:	683b      	ldr	r3, [r7, #0]
 8015506:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8015508:	2309      	movs	r3, #9
 801550a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801550c:	23c0      	movs	r3, #192	; 0xc0
 801550e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015510:	2300      	movs	r3, #0
 8015512:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015518:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801551a:	f107 0308 	add.w	r3, r7, #8
 801551e:	4619      	mov	r1, r3
 8015520:	6878      	ldr	r0, [r7, #4]
 8015522:	f7ff fe4c 	bl	80151be <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8015526:	6878      	ldr	r0, [r7, #4]
 8015528:	f000 f916 	bl	8015758 <SDMMC_GetCmdResp2>
 801552c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801552e:	69fb      	ldr	r3, [r7, #28]
}
 8015530:	4618      	mov	r0, r3
 8015532:	3720      	adds	r7, #32
 8015534:	46bd      	mov	sp, r7
 8015536:	bd80      	pop	{r7, pc}

08015538 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8015538:	b580      	push	{r7, lr}
 801553a:	b088      	sub	sp, #32
 801553c:	af00      	add	r7, sp, #0
 801553e:	6078      	str	r0, [r7, #4]
 8015540:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8015542:	2300      	movs	r3, #0
 8015544:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8015546:	2303      	movs	r3, #3
 8015548:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801554a:	2340      	movs	r3, #64	; 0x40
 801554c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801554e:	2300      	movs	r3, #0
 8015550:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015556:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015558:	f107 0308 	add.w	r3, r7, #8
 801555c:	4619      	mov	r1, r3
 801555e:	6878      	ldr	r0, [r7, #4]
 8015560:	f7ff fe2d 	bl	80151be <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8015564:	683a      	ldr	r2, [r7, #0]
 8015566:	2103      	movs	r1, #3
 8015568:	6878      	ldr	r0, [r7, #4]
 801556a:	f000 f97b 	bl	8015864 <SDMMC_GetCmdResp6>
 801556e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015570:	69fb      	ldr	r3, [r7, #28]
}
 8015572:	4618      	mov	r0, r3
 8015574:	3720      	adds	r7, #32
 8015576:	46bd      	mov	sp, r7
 8015578:	bd80      	pop	{r7, pc}
	...

0801557c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 801557c:	b580      	push	{r7, lr}
 801557e:	b088      	sub	sp, #32
 8015580:	af00      	add	r7, sp, #0
 8015582:	60f8      	str	r0, [r7, #12]
 8015584:	460b      	mov	r3, r1
 8015586:	607a      	str	r2, [r7, #4]
 8015588:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801558a:	4b70      	ldr	r3, [pc, #448]	; (801574c <SDMMC_GetCmdResp1+0x1d0>)
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	4a70      	ldr	r2, [pc, #448]	; (8015750 <SDMMC_GetCmdResp1+0x1d4>)
 8015590:	fba2 2303 	umull	r2, r3, r2, r3
 8015594:	0a5a      	lsrs	r2, r3, #9
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	fb02 f303 	mul.w	r3, r2, r3
 801559c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801559e:	69fb      	ldr	r3, [r7, #28]
 80155a0:	1e5a      	subs	r2, r3, #1
 80155a2:	61fa      	str	r2, [r7, #28]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d102      	bne.n	80155ae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80155a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80155ac:	e0c9      	b.n	8015742 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80155b2:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80155b4:	69bb      	ldr	r3, [r7, #24]
 80155b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d0ef      	beq.n	801559e <SDMMC_GetCmdResp1+0x22>
 80155be:	69bb      	ldr	r3, [r7, #24]
 80155c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d1ea      	bne.n	801559e <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80155cc:	f003 0304 	and.w	r3, r3, #4
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d004      	beq.n	80155de <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	2204      	movs	r2, #4
 80155d8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80155da:	2304      	movs	r3, #4
 80155dc:	e0b1      	b.n	8015742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80155e2:	f003 0301 	and.w	r3, r3, #1
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d004      	beq.n	80155f4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	2201      	movs	r2, #1
 80155ee:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80155f0:	2301      	movs	r3, #1
 80155f2:	e0a6      	b.n	8015742 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	22c5      	movs	r2, #197	; 0xc5
 80155f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80155fa:	68f8      	ldr	r0, [r7, #12]
 80155fc:	f7ff fe09 	bl	8015212 <SDMMC_GetCommandResponse>
 8015600:	4603      	mov	r3, r0
 8015602:	461a      	mov	r2, r3
 8015604:	7afb      	ldrb	r3, [r7, #11]
 8015606:	4293      	cmp	r3, r2
 8015608:	d001      	beq.n	801560e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801560a:	2301      	movs	r3, #1
 801560c:	e099      	b.n	8015742 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801560e:	2100      	movs	r1, #0
 8015610:	68f8      	ldr	r0, [r7, #12]
 8015612:	f7ff fe0b 	bl	801522c <SDMMC_GetResponse>
 8015616:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8015618:	697a      	ldr	r2, [r7, #20]
 801561a:	4b4e      	ldr	r3, [pc, #312]	; (8015754 <SDMMC_GetCmdResp1+0x1d8>)
 801561c:	4013      	ands	r3, r2
 801561e:	2b00      	cmp	r3, #0
 8015620:	d101      	bne.n	8015626 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8015622:	2300      	movs	r3, #0
 8015624:	e08d      	b.n	8015742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8015626:	697b      	ldr	r3, [r7, #20]
 8015628:	2b00      	cmp	r3, #0
 801562a:	da02      	bge.n	8015632 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801562c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015630:	e087      	b.n	8015742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8015632:	697b      	ldr	r3, [r7, #20]
 8015634:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8015638:	2b00      	cmp	r3, #0
 801563a:	d001      	beq.n	8015640 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801563c:	2340      	movs	r3, #64	; 0x40
 801563e:	e080      	b.n	8015742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8015640:	697b      	ldr	r3, [r7, #20]
 8015642:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015646:	2b00      	cmp	r3, #0
 8015648:	d001      	beq.n	801564e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801564a:	2380      	movs	r3, #128	; 0x80
 801564c:	e079      	b.n	8015742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801564e:	697b      	ldr	r3, [r7, #20]
 8015650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015654:	2b00      	cmp	r3, #0
 8015656:	d002      	beq.n	801565e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8015658:	f44f 7380 	mov.w	r3, #256	; 0x100
 801565c:	e071      	b.n	8015742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801565e:	697b      	ldr	r3, [r7, #20]
 8015660:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015664:	2b00      	cmp	r3, #0
 8015666:	d002      	beq.n	801566e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8015668:	f44f 7300 	mov.w	r3, #512	; 0x200
 801566c:	e069      	b.n	8015742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801566e:	697b      	ldr	r3, [r7, #20]
 8015670:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8015674:	2b00      	cmp	r3, #0
 8015676:	d002      	beq.n	801567e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8015678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801567c:	e061      	b.n	8015742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801567e:	697b      	ldr	r3, [r7, #20]
 8015680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015684:	2b00      	cmp	r3, #0
 8015686:	d002      	beq.n	801568e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8015688:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801568c:	e059      	b.n	8015742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801568e:	697b      	ldr	r3, [r7, #20]
 8015690:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015694:	2b00      	cmp	r3, #0
 8015696:	d002      	beq.n	801569e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8015698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801569c:	e051      	b.n	8015742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801569e:	697b      	ldr	r3, [r7, #20]
 80156a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d002      	beq.n	80156ae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80156a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80156ac:	e049      	b.n	8015742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80156ae:	697b      	ldr	r3, [r7, #20]
 80156b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d002      	beq.n	80156be <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80156b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80156bc:	e041      	b.n	8015742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80156be:	697b      	ldr	r3, [r7, #20]
 80156c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d002      	beq.n	80156ce <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80156c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80156cc:	e039      	b.n	8015742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80156ce:	697b      	ldr	r3, [r7, #20]
 80156d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d002      	beq.n	80156de <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80156d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80156dc:	e031      	b.n	8015742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80156de:	697b      	ldr	r3, [r7, #20]
 80156e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d002      	beq.n	80156ee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80156e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80156ec:	e029      	b.n	8015742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80156ee:	697b      	ldr	r3, [r7, #20]
 80156f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d002      	beq.n	80156fe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80156f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80156fc:	e021      	b.n	8015742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80156fe:	697b      	ldr	r3, [r7, #20]
 8015700:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015704:	2b00      	cmp	r3, #0
 8015706:	d002      	beq.n	801570e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8015708:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801570c:	e019      	b.n	8015742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801570e:	697b      	ldr	r3, [r7, #20]
 8015710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015714:	2b00      	cmp	r3, #0
 8015716:	d002      	beq.n	801571e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8015718:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801571c:	e011      	b.n	8015742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801571e:	697b      	ldr	r3, [r7, #20]
 8015720:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015724:	2b00      	cmp	r3, #0
 8015726:	d002      	beq.n	801572e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8015728:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801572c:	e009      	b.n	8015742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801572e:	697b      	ldr	r3, [r7, #20]
 8015730:	f003 0308 	and.w	r3, r3, #8
 8015734:	2b00      	cmp	r3, #0
 8015736:	d002      	beq.n	801573e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8015738:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801573c:	e001      	b.n	8015742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801573e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8015742:	4618      	mov	r0, r3
 8015744:	3720      	adds	r7, #32
 8015746:	46bd      	mov	sp, r7
 8015748:	bd80      	pop	{r7, pc}
 801574a:	bf00      	nop
 801574c:	20000194 	.word	0x20000194
 8015750:	10624dd3 	.word	0x10624dd3
 8015754:	fdffe008 	.word	0xfdffe008

08015758 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8015758:	b480      	push	{r7}
 801575a:	b085      	sub	sp, #20
 801575c:	af00      	add	r7, sp, #0
 801575e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8015760:	4b1f      	ldr	r3, [pc, #124]	; (80157e0 <SDMMC_GetCmdResp2+0x88>)
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	4a1f      	ldr	r2, [pc, #124]	; (80157e4 <SDMMC_GetCmdResp2+0x8c>)
 8015766:	fba2 2303 	umull	r2, r3, r2, r3
 801576a:	0a5b      	lsrs	r3, r3, #9
 801576c:	f241 3288 	movw	r2, #5000	; 0x1388
 8015770:	fb02 f303 	mul.w	r3, r2, r3
 8015774:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	1e5a      	subs	r2, r3, #1
 801577a:	60fa      	str	r2, [r7, #12]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d102      	bne.n	8015786 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8015780:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015784:	e026      	b.n	80157d4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801578a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801578c:	68bb      	ldr	r3, [r7, #8]
 801578e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8015792:	2b00      	cmp	r3, #0
 8015794:	d0ef      	beq.n	8015776 <SDMMC_GetCmdResp2+0x1e>
 8015796:	68bb      	ldr	r3, [r7, #8]
 8015798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801579c:	2b00      	cmp	r3, #0
 801579e:	d1ea      	bne.n	8015776 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80157a4:	f003 0304 	and.w	r3, r3, #4
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d004      	beq.n	80157b6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	2204      	movs	r2, #4
 80157b0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80157b2:	2304      	movs	r3, #4
 80157b4:	e00e      	b.n	80157d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80157ba:	f003 0301 	and.w	r3, r3, #1
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d004      	beq.n	80157cc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	2201      	movs	r2, #1
 80157c6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80157c8:	2301      	movs	r3, #1
 80157ca:	e003      	b.n	80157d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	22c5      	movs	r2, #197	; 0xc5
 80157d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80157d2:	2300      	movs	r3, #0
}
 80157d4:	4618      	mov	r0, r3
 80157d6:	3714      	adds	r7, #20
 80157d8:	46bd      	mov	sp, r7
 80157da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157de:	4770      	bx	lr
 80157e0:	20000194 	.word	0x20000194
 80157e4:	10624dd3 	.word	0x10624dd3

080157e8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80157e8:	b480      	push	{r7}
 80157ea:	b085      	sub	sp, #20
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80157f0:	4b1a      	ldr	r3, [pc, #104]	; (801585c <SDMMC_GetCmdResp3+0x74>)
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	4a1a      	ldr	r2, [pc, #104]	; (8015860 <SDMMC_GetCmdResp3+0x78>)
 80157f6:	fba2 2303 	umull	r2, r3, r2, r3
 80157fa:	0a5b      	lsrs	r3, r3, #9
 80157fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8015800:	fb02 f303 	mul.w	r3, r2, r3
 8015804:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	1e5a      	subs	r2, r3, #1
 801580a:	60fa      	str	r2, [r7, #12]
 801580c:	2b00      	cmp	r3, #0
 801580e:	d102      	bne.n	8015816 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8015810:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015814:	e01b      	b.n	801584e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801581a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801581c:	68bb      	ldr	r3, [r7, #8]
 801581e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8015822:	2b00      	cmp	r3, #0
 8015824:	d0ef      	beq.n	8015806 <SDMMC_GetCmdResp3+0x1e>
 8015826:	68bb      	ldr	r3, [r7, #8]
 8015828:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801582c:	2b00      	cmp	r3, #0
 801582e:	d1ea      	bne.n	8015806 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015834:	f003 0304 	and.w	r3, r3, #4
 8015838:	2b00      	cmp	r3, #0
 801583a:	d004      	beq.n	8015846 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	2204      	movs	r2, #4
 8015840:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8015842:	2304      	movs	r3, #4
 8015844:	e003      	b.n	801584e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	22c5      	movs	r2, #197	; 0xc5
 801584a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801584c:	2300      	movs	r3, #0
}
 801584e:	4618      	mov	r0, r3
 8015850:	3714      	adds	r7, #20
 8015852:	46bd      	mov	sp, r7
 8015854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015858:	4770      	bx	lr
 801585a:	bf00      	nop
 801585c:	20000194 	.word	0x20000194
 8015860:	10624dd3 	.word	0x10624dd3

08015864 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8015864:	b580      	push	{r7, lr}
 8015866:	b088      	sub	sp, #32
 8015868:	af00      	add	r7, sp, #0
 801586a:	60f8      	str	r0, [r7, #12]
 801586c:	460b      	mov	r3, r1
 801586e:	607a      	str	r2, [r7, #4]
 8015870:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8015872:	4b35      	ldr	r3, [pc, #212]	; (8015948 <SDMMC_GetCmdResp6+0xe4>)
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	4a35      	ldr	r2, [pc, #212]	; (801594c <SDMMC_GetCmdResp6+0xe8>)
 8015878:	fba2 2303 	umull	r2, r3, r2, r3
 801587c:	0a5b      	lsrs	r3, r3, #9
 801587e:	f241 3288 	movw	r2, #5000	; 0x1388
 8015882:	fb02 f303 	mul.w	r3, r2, r3
 8015886:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8015888:	69fb      	ldr	r3, [r7, #28]
 801588a:	1e5a      	subs	r2, r3, #1
 801588c:	61fa      	str	r2, [r7, #28]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d102      	bne.n	8015898 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8015892:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015896:	e052      	b.n	801593e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801589c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801589e:	69bb      	ldr	r3, [r7, #24]
 80158a0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d0ef      	beq.n	8015888 <SDMMC_GetCmdResp6+0x24>
 80158a8:	69bb      	ldr	r3, [r7, #24]
 80158aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d1ea      	bne.n	8015888 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80158b6:	f003 0304 	and.w	r3, r3, #4
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d004      	beq.n	80158c8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	2204      	movs	r2, #4
 80158c2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80158c4:	2304      	movs	r3, #4
 80158c6:	e03a      	b.n	801593e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80158cc:	f003 0301 	and.w	r3, r3, #1
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d004      	beq.n	80158de <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	2201      	movs	r2, #1
 80158d8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80158da:	2301      	movs	r3, #1
 80158dc:	e02f      	b.n	801593e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80158de:	68f8      	ldr	r0, [r7, #12]
 80158e0:	f7ff fc97 	bl	8015212 <SDMMC_GetCommandResponse>
 80158e4:	4603      	mov	r3, r0
 80158e6:	461a      	mov	r2, r3
 80158e8:	7afb      	ldrb	r3, [r7, #11]
 80158ea:	4293      	cmp	r3, r2
 80158ec:	d001      	beq.n	80158f2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80158ee:	2301      	movs	r3, #1
 80158f0:	e025      	b.n	801593e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	22c5      	movs	r2, #197	; 0xc5
 80158f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80158f8:	2100      	movs	r1, #0
 80158fa:	68f8      	ldr	r0, [r7, #12]
 80158fc:	f7ff fc96 	bl	801522c <SDMMC_GetResponse>
 8015900:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8015902:	697b      	ldr	r3, [r7, #20]
 8015904:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8015908:	2b00      	cmp	r3, #0
 801590a:	d106      	bne.n	801591a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 801590c:	697b      	ldr	r3, [r7, #20]
 801590e:	0c1b      	lsrs	r3, r3, #16
 8015910:	b29a      	uxth	r2, r3
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8015916:	2300      	movs	r3, #0
 8015918:	e011      	b.n	801593e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801591a:	697b      	ldr	r3, [r7, #20]
 801591c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015920:	2b00      	cmp	r3, #0
 8015922:	d002      	beq.n	801592a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8015924:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8015928:	e009      	b.n	801593e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801592a:	697b      	ldr	r3, [r7, #20]
 801592c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015930:	2b00      	cmp	r3, #0
 8015932:	d002      	beq.n	801593a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8015934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015938:	e001      	b.n	801593e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801593a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801593e:	4618      	mov	r0, r3
 8015940:	3720      	adds	r7, #32
 8015942:	46bd      	mov	sp, r7
 8015944:	bd80      	pop	{r7, pc}
 8015946:	bf00      	nop
 8015948:	20000194 	.word	0x20000194
 801594c:	10624dd3 	.word	0x10624dd3

08015950 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8015950:	b480      	push	{r7}
 8015952:	b085      	sub	sp, #20
 8015954:	af00      	add	r7, sp, #0
 8015956:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8015958:	4b22      	ldr	r3, [pc, #136]	; (80159e4 <SDMMC_GetCmdResp7+0x94>)
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	4a22      	ldr	r2, [pc, #136]	; (80159e8 <SDMMC_GetCmdResp7+0x98>)
 801595e:	fba2 2303 	umull	r2, r3, r2, r3
 8015962:	0a5b      	lsrs	r3, r3, #9
 8015964:	f241 3288 	movw	r2, #5000	; 0x1388
 8015968:	fb02 f303 	mul.w	r3, r2, r3
 801596c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	1e5a      	subs	r2, r3, #1
 8015972:	60fa      	str	r2, [r7, #12]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d102      	bne.n	801597e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8015978:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801597c:	e02c      	b.n	80159d8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015982:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8015984:	68bb      	ldr	r3, [r7, #8]
 8015986:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801598a:	2b00      	cmp	r3, #0
 801598c:	d0ef      	beq.n	801596e <SDMMC_GetCmdResp7+0x1e>
 801598e:	68bb      	ldr	r3, [r7, #8]
 8015990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8015994:	2b00      	cmp	r3, #0
 8015996:	d1ea      	bne.n	801596e <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801599c:	f003 0304 	and.w	r3, r3, #4
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d004      	beq.n	80159ae <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	2204      	movs	r2, #4
 80159a8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80159aa:	2304      	movs	r3, #4
 80159ac:	e014      	b.n	80159d8 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80159b2:	f003 0301 	and.w	r3, r3, #1
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d004      	beq.n	80159c4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	2201      	movs	r2, #1
 80159be:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80159c0:	2301      	movs	r3, #1
 80159c2:	e009      	b.n	80159d8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80159c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d002      	beq.n	80159d6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	2240      	movs	r2, #64	; 0x40
 80159d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80159d6:	2300      	movs	r3, #0

}
 80159d8:	4618      	mov	r0, r3
 80159da:	3714      	adds	r7, #20
 80159dc:	46bd      	mov	sp, r7
 80159de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e2:	4770      	bx	lr
 80159e4:	20000194 	.word	0x20000194
 80159e8:	10624dd3 	.word	0x10624dd3

080159ec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80159ec:	b480      	push	{r7}
 80159ee:	b085      	sub	sp, #20
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80159f4:	4b11      	ldr	r3, [pc, #68]	; (8015a3c <SDMMC_GetCmdError+0x50>)
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	4a11      	ldr	r2, [pc, #68]	; (8015a40 <SDMMC_GetCmdError+0x54>)
 80159fa:	fba2 2303 	umull	r2, r3, r2, r3
 80159fe:	0a5b      	lsrs	r3, r3, #9
 8015a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8015a04:	fb02 f303 	mul.w	r3, r2, r3
 8015a08:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	1e5a      	subs	r2, r3, #1
 8015a0e:	60fa      	str	r2, [r7, #12]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d102      	bne.n	8015a1a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8015a14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015a18:	e009      	b.n	8015a2e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d0f1      	beq.n	8015a0a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	22c5      	movs	r2, #197	; 0xc5
 8015a2a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8015a2c:	2300      	movs	r3, #0
}
 8015a2e:	4618      	mov	r0, r3
 8015a30:	3714      	adds	r7, #20
 8015a32:	46bd      	mov	sp, r7
 8015a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a38:	4770      	bx	lr
 8015a3a:	bf00      	nop
 8015a3c:	20000194 	.word	0x20000194
 8015a40:	10624dd3 	.word	0x10624dd3

08015a44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8015a44:	b084      	sub	sp, #16
 8015a46:	b580      	push	{r7, lr}
 8015a48:	b084      	sub	sp, #16
 8015a4a:	af00      	add	r7, sp, #0
 8015a4c:	6078      	str	r0, [r7, #4]
 8015a4e:	f107 001c 	add.w	r0, r7, #28
 8015a52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	68db      	ldr	r3, [r3, #12]
 8015a5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8015a62:	6878      	ldr	r0, [r7, #4]
 8015a64:	f001 faf6 	bl	8017054 <USB_CoreReset>
 8015a68:	4603      	mov	r3, r0
 8015a6a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8015a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d106      	bne.n	8015a80 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	639a      	str	r2, [r3, #56]	; 0x38
 8015a7e:	e005      	b.n	8015a8c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8015a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a8e:	4618      	mov	r0, r3
 8015a90:	3710      	adds	r7, #16
 8015a92:	46bd      	mov	sp, r7
 8015a94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015a98:	b004      	add	sp, #16
 8015a9a:	4770      	bx	lr

08015a9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8015a9c:	b480      	push	{r7}
 8015a9e:	b087      	sub	sp, #28
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	60f8      	str	r0, [r7, #12]
 8015aa4:	60b9      	str	r1, [r7, #8]
 8015aa6:	4613      	mov	r3, r2
 8015aa8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8015aaa:	79fb      	ldrb	r3, [r7, #7]
 8015aac:	2b02      	cmp	r3, #2
 8015aae:	d165      	bne.n	8015b7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8015ab0:	68bb      	ldr	r3, [r7, #8]
 8015ab2:	4a3e      	ldr	r2, [pc, #248]	; (8015bac <USB_SetTurnaroundTime+0x110>)
 8015ab4:	4293      	cmp	r3, r2
 8015ab6:	d906      	bls.n	8015ac6 <USB_SetTurnaroundTime+0x2a>
 8015ab8:	68bb      	ldr	r3, [r7, #8]
 8015aba:	4a3d      	ldr	r2, [pc, #244]	; (8015bb0 <USB_SetTurnaroundTime+0x114>)
 8015abc:	4293      	cmp	r3, r2
 8015abe:	d202      	bcs.n	8015ac6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8015ac0:	230f      	movs	r3, #15
 8015ac2:	617b      	str	r3, [r7, #20]
 8015ac4:	e05c      	b.n	8015b80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8015ac6:	68bb      	ldr	r3, [r7, #8]
 8015ac8:	4a39      	ldr	r2, [pc, #228]	; (8015bb0 <USB_SetTurnaroundTime+0x114>)
 8015aca:	4293      	cmp	r3, r2
 8015acc:	d306      	bcc.n	8015adc <USB_SetTurnaroundTime+0x40>
 8015ace:	68bb      	ldr	r3, [r7, #8]
 8015ad0:	4a38      	ldr	r2, [pc, #224]	; (8015bb4 <USB_SetTurnaroundTime+0x118>)
 8015ad2:	4293      	cmp	r3, r2
 8015ad4:	d202      	bcs.n	8015adc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8015ad6:	230e      	movs	r3, #14
 8015ad8:	617b      	str	r3, [r7, #20]
 8015ada:	e051      	b.n	8015b80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8015adc:	68bb      	ldr	r3, [r7, #8]
 8015ade:	4a35      	ldr	r2, [pc, #212]	; (8015bb4 <USB_SetTurnaroundTime+0x118>)
 8015ae0:	4293      	cmp	r3, r2
 8015ae2:	d306      	bcc.n	8015af2 <USB_SetTurnaroundTime+0x56>
 8015ae4:	68bb      	ldr	r3, [r7, #8]
 8015ae6:	4a34      	ldr	r2, [pc, #208]	; (8015bb8 <USB_SetTurnaroundTime+0x11c>)
 8015ae8:	4293      	cmp	r3, r2
 8015aea:	d202      	bcs.n	8015af2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8015aec:	230d      	movs	r3, #13
 8015aee:	617b      	str	r3, [r7, #20]
 8015af0:	e046      	b.n	8015b80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8015af2:	68bb      	ldr	r3, [r7, #8]
 8015af4:	4a30      	ldr	r2, [pc, #192]	; (8015bb8 <USB_SetTurnaroundTime+0x11c>)
 8015af6:	4293      	cmp	r3, r2
 8015af8:	d306      	bcc.n	8015b08 <USB_SetTurnaroundTime+0x6c>
 8015afa:	68bb      	ldr	r3, [r7, #8]
 8015afc:	4a2f      	ldr	r2, [pc, #188]	; (8015bbc <USB_SetTurnaroundTime+0x120>)
 8015afe:	4293      	cmp	r3, r2
 8015b00:	d802      	bhi.n	8015b08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8015b02:	230c      	movs	r3, #12
 8015b04:	617b      	str	r3, [r7, #20]
 8015b06:	e03b      	b.n	8015b80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8015b08:	68bb      	ldr	r3, [r7, #8]
 8015b0a:	4a2c      	ldr	r2, [pc, #176]	; (8015bbc <USB_SetTurnaroundTime+0x120>)
 8015b0c:	4293      	cmp	r3, r2
 8015b0e:	d906      	bls.n	8015b1e <USB_SetTurnaroundTime+0x82>
 8015b10:	68bb      	ldr	r3, [r7, #8]
 8015b12:	4a2b      	ldr	r2, [pc, #172]	; (8015bc0 <USB_SetTurnaroundTime+0x124>)
 8015b14:	4293      	cmp	r3, r2
 8015b16:	d802      	bhi.n	8015b1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8015b18:	230b      	movs	r3, #11
 8015b1a:	617b      	str	r3, [r7, #20]
 8015b1c:	e030      	b.n	8015b80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8015b1e:	68bb      	ldr	r3, [r7, #8]
 8015b20:	4a27      	ldr	r2, [pc, #156]	; (8015bc0 <USB_SetTurnaroundTime+0x124>)
 8015b22:	4293      	cmp	r3, r2
 8015b24:	d906      	bls.n	8015b34 <USB_SetTurnaroundTime+0x98>
 8015b26:	68bb      	ldr	r3, [r7, #8]
 8015b28:	4a26      	ldr	r2, [pc, #152]	; (8015bc4 <USB_SetTurnaroundTime+0x128>)
 8015b2a:	4293      	cmp	r3, r2
 8015b2c:	d802      	bhi.n	8015b34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8015b2e:	230a      	movs	r3, #10
 8015b30:	617b      	str	r3, [r7, #20]
 8015b32:	e025      	b.n	8015b80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8015b34:	68bb      	ldr	r3, [r7, #8]
 8015b36:	4a23      	ldr	r2, [pc, #140]	; (8015bc4 <USB_SetTurnaroundTime+0x128>)
 8015b38:	4293      	cmp	r3, r2
 8015b3a:	d906      	bls.n	8015b4a <USB_SetTurnaroundTime+0xae>
 8015b3c:	68bb      	ldr	r3, [r7, #8]
 8015b3e:	4a22      	ldr	r2, [pc, #136]	; (8015bc8 <USB_SetTurnaroundTime+0x12c>)
 8015b40:	4293      	cmp	r3, r2
 8015b42:	d202      	bcs.n	8015b4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8015b44:	2309      	movs	r3, #9
 8015b46:	617b      	str	r3, [r7, #20]
 8015b48:	e01a      	b.n	8015b80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8015b4a:	68bb      	ldr	r3, [r7, #8]
 8015b4c:	4a1e      	ldr	r2, [pc, #120]	; (8015bc8 <USB_SetTurnaroundTime+0x12c>)
 8015b4e:	4293      	cmp	r3, r2
 8015b50:	d306      	bcc.n	8015b60 <USB_SetTurnaroundTime+0xc4>
 8015b52:	68bb      	ldr	r3, [r7, #8]
 8015b54:	4a1d      	ldr	r2, [pc, #116]	; (8015bcc <USB_SetTurnaroundTime+0x130>)
 8015b56:	4293      	cmp	r3, r2
 8015b58:	d802      	bhi.n	8015b60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8015b5a:	2308      	movs	r3, #8
 8015b5c:	617b      	str	r3, [r7, #20]
 8015b5e:	e00f      	b.n	8015b80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8015b60:	68bb      	ldr	r3, [r7, #8]
 8015b62:	4a1a      	ldr	r2, [pc, #104]	; (8015bcc <USB_SetTurnaroundTime+0x130>)
 8015b64:	4293      	cmp	r3, r2
 8015b66:	d906      	bls.n	8015b76 <USB_SetTurnaroundTime+0xda>
 8015b68:	68bb      	ldr	r3, [r7, #8]
 8015b6a:	4a19      	ldr	r2, [pc, #100]	; (8015bd0 <USB_SetTurnaroundTime+0x134>)
 8015b6c:	4293      	cmp	r3, r2
 8015b6e:	d202      	bcs.n	8015b76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8015b70:	2307      	movs	r3, #7
 8015b72:	617b      	str	r3, [r7, #20]
 8015b74:	e004      	b.n	8015b80 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8015b76:	2306      	movs	r3, #6
 8015b78:	617b      	str	r3, [r7, #20]
 8015b7a:	e001      	b.n	8015b80 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8015b7c:	2309      	movs	r3, #9
 8015b7e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	68db      	ldr	r3, [r3, #12]
 8015b84:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	68da      	ldr	r2, [r3, #12]
 8015b90:	697b      	ldr	r3, [r7, #20]
 8015b92:	029b      	lsls	r3, r3, #10
 8015b94:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8015b98:	431a      	orrs	r2, r3
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8015b9e:	2300      	movs	r3, #0
}
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	371c      	adds	r7, #28
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015baa:	4770      	bx	lr
 8015bac:	00d8acbf 	.word	0x00d8acbf
 8015bb0:	00e4e1c0 	.word	0x00e4e1c0
 8015bb4:	00f42400 	.word	0x00f42400
 8015bb8:	01067380 	.word	0x01067380
 8015bbc:	011a499f 	.word	0x011a499f
 8015bc0:	01312cff 	.word	0x01312cff
 8015bc4:	014ca43f 	.word	0x014ca43f
 8015bc8:	016e3600 	.word	0x016e3600
 8015bcc:	01a6ab1f 	.word	0x01a6ab1f
 8015bd0:	01e84800 	.word	0x01e84800

08015bd4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8015bd4:	b480      	push	{r7}
 8015bd6:	b083      	sub	sp, #12
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	689b      	ldr	r3, [r3, #8]
 8015be0:	f043 0201 	orr.w	r2, r3, #1
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8015be8:	2300      	movs	r3, #0
}
 8015bea:	4618      	mov	r0, r3
 8015bec:	370c      	adds	r7, #12
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf4:	4770      	bx	lr

08015bf6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8015bf6:	b480      	push	{r7}
 8015bf8:	b083      	sub	sp, #12
 8015bfa:	af00      	add	r7, sp, #0
 8015bfc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	689b      	ldr	r3, [r3, #8]
 8015c02:	f023 0201 	bic.w	r2, r3, #1
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8015c0a:	2300      	movs	r3, #0
}
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	370c      	adds	r7, #12
 8015c10:	46bd      	mov	sp, r7
 8015c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c16:	4770      	bx	lr

08015c18 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8015c18:	b580      	push	{r7, lr}
 8015c1a:	b084      	sub	sp, #16
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	6078      	str	r0, [r7, #4]
 8015c20:	460b      	mov	r3, r1
 8015c22:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8015c24:	2300      	movs	r3, #0
 8015c26:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	68db      	ldr	r3, [r3, #12]
 8015c2c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8015c34:	78fb      	ldrb	r3, [r7, #3]
 8015c36:	2b01      	cmp	r3, #1
 8015c38:	d115      	bne.n	8015c66 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	68db      	ldr	r3, [r3, #12]
 8015c3e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8015c46:	2001      	movs	r0, #1
 8015c48:	f7f5 fc5e 	bl	800b508 <HAL_Delay>
      ms++;
 8015c4c:	68fb      	ldr	r3, [r7, #12]
 8015c4e:	3301      	adds	r3, #1
 8015c50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8015c52:	6878      	ldr	r0, [r7, #4]
 8015c54:	f001 f985 	bl	8016f62 <USB_GetMode>
 8015c58:	4603      	mov	r3, r0
 8015c5a:	2b01      	cmp	r3, #1
 8015c5c:	d01e      	beq.n	8015c9c <USB_SetCurrentMode+0x84>
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	2b31      	cmp	r3, #49	; 0x31
 8015c62:	d9f0      	bls.n	8015c46 <USB_SetCurrentMode+0x2e>
 8015c64:	e01a      	b.n	8015c9c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8015c66:	78fb      	ldrb	r3, [r7, #3]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d115      	bne.n	8015c98 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	68db      	ldr	r3, [r3, #12]
 8015c70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8015c78:	2001      	movs	r0, #1
 8015c7a:	f7f5 fc45 	bl	800b508 <HAL_Delay>
      ms++;
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	3301      	adds	r3, #1
 8015c82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8015c84:	6878      	ldr	r0, [r7, #4]
 8015c86:	f001 f96c 	bl	8016f62 <USB_GetMode>
 8015c8a:	4603      	mov	r3, r0
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d005      	beq.n	8015c9c <USB_SetCurrentMode+0x84>
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	2b31      	cmp	r3, #49	; 0x31
 8015c94:	d9f0      	bls.n	8015c78 <USB_SetCurrentMode+0x60>
 8015c96:	e001      	b.n	8015c9c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8015c98:	2301      	movs	r3, #1
 8015c9a:	e005      	b.n	8015ca8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	2b32      	cmp	r3, #50	; 0x32
 8015ca0:	d101      	bne.n	8015ca6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8015ca2:	2301      	movs	r3, #1
 8015ca4:	e000      	b.n	8015ca8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8015ca6:	2300      	movs	r3, #0
}
 8015ca8:	4618      	mov	r0, r3
 8015caa:	3710      	adds	r7, #16
 8015cac:	46bd      	mov	sp, r7
 8015cae:	bd80      	pop	{r7, pc}

08015cb0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8015cb0:	b084      	sub	sp, #16
 8015cb2:	b580      	push	{r7, lr}
 8015cb4:	b086      	sub	sp, #24
 8015cb6:	af00      	add	r7, sp, #0
 8015cb8:	6078      	str	r0, [r7, #4]
 8015cba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8015cbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8015cca:	2300      	movs	r3, #0
 8015ccc:	613b      	str	r3, [r7, #16]
 8015cce:	e009      	b.n	8015ce4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8015cd0:	687a      	ldr	r2, [r7, #4]
 8015cd2:	693b      	ldr	r3, [r7, #16]
 8015cd4:	3340      	adds	r3, #64	; 0x40
 8015cd6:	009b      	lsls	r3, r3, #2
 8015cd8:	4413      	add	r3, r2
 8015cda:	2200      	movs	r2, #0
 8015cdc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8015cde:	693b      	ldr	r3, [r7, #16]
 8015ce0:	3301      	adds	r3, #1
 8015ce2:	613b      	str	r3, [r7, #16]
 8015ce4:	693b      	ldr	r3, [r7, #16]
 8015ce6:	2b0e      	cmp	r3, #14
 8015ce8:	d9f2      	bls.n	8015cd0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8015cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d11c      	bne.n	8015d2a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015cf6:	685b      	ldr	r3, [r3, #4]
 8015cf8:	68fa      	ldr	r2, [r7, #12]
 8015cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015cfe:	f043 0302 	orr.w	r3, r3, #2
 8015d02:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d08:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	601a      	str	r2, [r3, #0]
 8015d28:	e005      	b.n	8015d36 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d2e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015d3c:	461a      	mov	r2, r3
 8015d3e:	2300      	movs	r3, #0
 8015d40:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015d48:	4619      	mov	r1, r3
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015d50:	461a      	mov	r2, r3
 8015d52:	680b      	ldr	r3, [r1, #0]
 8015d54:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8015d56:	2103      	movs	r1, #3
 8015d58:	6878      	ldr	r0, [r7, #4]
 8015d5a:	f000 f959 	bl	8016010 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8015d5e:	2110      	movs	r1, #16
 8015d60:	6878      	ldr	r0, [r7, #4]
 8015d62:	f000 f8f1 	bl	8015f48 <USB_FlushTxFifo>
 8015d66:	4603      	mov	r3, r0
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d001      	beq.n	8015d70 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8015d6c:	2301      	movs	r3, #1
 8015d6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8015d70:	6878      	ldr	r0, [r7, #4]
 8015d72:	f000 f91d 	bl	8015fb0 <USB_FlushRxFifo>
 8015d76:	4603      	mov	r3, r0
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d001      	beq.n	8015d80 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8015d7c:	2301      	movs	r3, #1
 8015d7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015d86:	461a      	mov	r2, r3
 8015d88:	2300      	movs	r3, #0
 8015d8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015d92:	461a      	mov	r2, r3
 8015d94:	2300      	movs	r3, #0
 8015d96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015d9e:	461a      	mov	r2, r3
 8015da0:	2300      	movs	r3, #0
 8015da2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015da4:	2300      	movs	r3, #0
 8015da6:	613b      	str	r3, [r7, #16]
 8015da8:	e043      	b.n	8015e32 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015daa:	693b      	ldr	r3, [r7, #16]
 8015dac:	015a      	lsls	r2, r3, #5
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	4413      	add	r3, r2
 8015db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015dc0:	d118      	bne.n	8015df4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8015dc2:	693b      	ldr	r3, [r7, #16]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d10a      	bne.n	8015dde <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8015dc8:	693b      	ldr	r3, [r7, #16]
 8015dca:	015a      	lsls	r2, r3, #5
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	4413      	add	r3, r2
 8015dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015dd4:	461a      	mov	r2, r3
 8015dd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8015dda:	6013      	str	r3, [r2, #0]
 8015ddc:	e013      	b.n	8015e06 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8015dde:	693b      	ldr	r3, [r7, #16]
 8015de0:	015a      	lsls	r2, r3, #5
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	4413      	add	r3, r2
 8015de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015dea:	461a      	mov	r2, r3
 8015dec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8015df0:	6013      	str	r3, [r2, #0]
 8015df2:	e008      	b.n	8015e06 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8015df4:	693b      	ldr	r3, [r7, #16]
 8015df6:	015a      	lsls	r2, r3, #5
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	4413      	add	r3, r2
 8015dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015e00:	461a      	mov	r2, r3
 8015e02:	2300      	movs	r3, #0
 8015e04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8015e06:	693b      	ldr	r3, [r7, #16]
 8015e08:	015a      	lsls	r2, r3, #5
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	4413      	add	r3, r2
 8015e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015e12:	461a      	mov	r2, r3
 8015e14:	2300      	movs	r3, #0
 8015e16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8015e18:	693b      	ldr	r3, [r7, #16]
 8015e1a:	015a      	lsls	r2, r3, #5
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	4413      	add	r3, r2
 8015e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015e24:	461a      	mov	r2, r3
 8015e26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8015e2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015e2c:	693b      	ldr	r3, [r7, #16]
 8015e2e:	3301      	adds	r3, #1
 8015e30:	613b      	str	r3, [r7, #16]
 8015e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e34:	693a      	ldr	r2, [r7, #16]
 8015e36:	429a      	cmp	r2, r3
 8015e38:	d3b7      	bcc.n	8015daa <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	613b      	str	r3, [r7, #16]
 8015e3e:	e043      	b.n	8015ec8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015e40:	693b      	ldr	r3, [r7, #16]
 8015e42:	015a      	lsls	r2, r3, #5
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	4413      	add	r3, r2
 8015e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015e52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015e56:	d118      	bne.n	8015e8a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8015e58:	693b      	ldr	r3, [r7, #16]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d10a      	bne.n	8015e74 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8015e5e:	693b      	ldr	r3, [r7, #16]
 8015e60:	015a      	lsls	r2, r3, #5
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	4413      	add	r3, r2
 8015e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015e6a:	461a      	mov	r2, r3
 8015e6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8015e70:	6013      	str	r3, [r2, #0]
 8015e72:	e013      	b.n	8015e9c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8015e74:	693b      	ldr	r3, [r7, #16]
 8015e76:	015a      	lsls	r2, r3, #5
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	4413      	add	r3, r2
 8015e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015e80:	461a      	mov	r2, r3
 8015e82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8015e86:	6013      	str	r3, [r2, #0]
 8015e88:	e008      	b.n	8015e9c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8015e8a:	693b      	ldr	r3, [r7, #16]
 8015e8c:	015a      	lsls	r2, r3, #5
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	4413      	add	r3, r2
 8015e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015e96:	461a      	mov	r2, r3
 8015e98:	2300      	movs	r3, #0
 8015e9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8015e9c:	693b      	ldr	r3, [r7, #16]
 8015e9e:	015a      	lsls	r2, r3, #5
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	4413      	add	r3, r2
 8015ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015ea8:	461a      	mov	r2, r3
 8015eaa:	2300      	movs	r3, #0
 8015eac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8015eae:	693b      	ldr	r3, [r7, #16]
 8015eb0:	015a      	lsls	r2, r3, #5
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	4413      	add	r3, r2
 8015eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015eba:	461a      	mov	r2, r3
 8015ebc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8015ec0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015ec2:	693b      	ldr	r3, [r7, #16]
 8015ec4:	3301      	adds	r3, #1
 8015ec6:	613b      	str	r3, [r7, #16]
 8015ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eca:	693a      	ldr	r2, [r7, #16]
 8015ecc:	429a      	cmp	r2, r3
 8015ece:	d3b7      	bcc.n	8015e40 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015ed6:	691b      	ldr	r3, [r3, #16]
 8015ed8:	68fa      	ldr	r2, [r7, #12]
 8015eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015ede:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015ee2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	2200      	movs	r2, #0
 8015ee8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8015ef0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	699b      	ldr	r3, [r3, #24]
 8015ef6:	f043 0210 	orr.w	r2, r3, #16
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	699a      	ldr	r2, [r3, #24]
 8015f02:	4b10      	ldr	r3, [pc, #64]	; (8015f44 <USB_DevInit+0x294>)
 8015f04:	4313      	orrs	r3, r2
 8015f06:	687a      	ldr	r2, [r7, #4]
 8015f08:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8015f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d005      	beq.n	8015f1c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	699b      	ldr	r3, [r3, #24]
 8015f14:	f043 0208 	orr.w	r2, r3, #8
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8015f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015f1e:	2b01      	cmp	r3, #1
 8015f20:	d107      	bne.n	8015f32 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	699b      	ldr	r3, [r3, #24]
 8015f26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015f2a:	f043 0304 	orr.w	r3, r3, #4
 8015f2e:	687a      	ldr	r2, [r7, #4]
 8015f30:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8015f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f34:	4618      	mov	r0, r3
 8015f36:	3718      	adds	r7, #24
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015f3e:	b004      	add	sp, #16
 8015f40:	4770      	bx	lr
 8015f42:	bf00      	nop
 8015f44:	803c3800 	.word	0x803c3800

08015f48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8015f48:	b480      	push	{r7}
 8015f4a:	b085      	sub	sp, #20
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	6078      	str	r0, [r7, #4]
 8015f50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8015f52:	2300      	movs	r3, #0
 8015f54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	3301      	adds	r3, #1
 8015f5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	4a13      	ldr	r2, [pc, #76]	; (8015fac <USB_FlushTxFifo+0x64>)
 8015f60:	4293      	cmp	r3, r2
 8015f62:	d901      	bls.n	8015f68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8015f64:	2303      	movs	r3, #3
 8015f66:	e01b      	b.n	8015fa0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	691b      	ldr	r3, [r3, #16]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	daf2      	bge.n	8015f56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8015f70:	2300      	movs	r3, #0
 8015f72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8015f74:	683b      	ldr	r3, [r7, #0]
 8015f76:	019b      	lsls	r3, r3, #6
 8015f78:	f043 0220 	orr.w	r2, r3, #32
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	3301      	adds	r3, #1
 8015f84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	4a08      	ldr	r2, [pc, #32]	; (8015fac <USB_FlushTxFifo+0x64>)
 8015f8a:	4293      	cmp	r3, r2
 8015f8c:	d901      	bls.n	8015f92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8015f8e:	2303      	movs	r3, #3
 8015f90:	e006      	b.n	8015fa0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	691b      	ldr	r3, [r3, #16]
 8015f96:	f003 0320 	and.w	r3, r3, #32
 8015f9a:	2b20      	cmp	r3, #32
 8015f9c:	d0f0      	beq.n	8015f80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8015f9e:	2300      	movs	r3, #0
}
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	3714      	adds	r7, #20
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015faa:	4770      	bx	lr
 8015fac:	00030d40 	.word	0x00030d40

08015fb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8015fb0:	b480      	push	{r7}
 8015fb2:	b085      	sub	sp, #20
 8015fb4:	af00      	add	r7, sp, #0
 8015fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015fb8:	2300      	movs	r3, #0
 8015fba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	3301      	adds	r3, #1
 8015fc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	4a11      	ldr	r2, [pc, #68]	; (801600c <USB_FlushRxFifo+0x5c>)
 8015fc6:	4293      	cmp	r3, r2
 8015fc8:	d901      	bls.n	8015fce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8015fca:	2303      	movs	r3, #3
 8015fcc:	e018      	b.n	8016000 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	691b      	ldr	r3, [r3, #16]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	daf2      	bge.n	8015fbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	2210      	movs	r2, #16
 8015fde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	3301      	adds	r3, #1
 8015fe4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	4a08      	ldr	r2, [pc, #32]	; (801600c <USB_FlushRxFifo+0x5c>)
 8015fea:	4293      	cmp	r3, r2
 8015fec:	d901      	bls.n	8015ff2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8015fee:	2303      	movs	r3, #3
 8015ff0:	e006      	b.n	8016000 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	691b      	ldr	r3, [r3, #16]
 8015ff6:	f003 0310 	and.w	r3, r3, #16
 8015ffa:	2b10      	cmp	r3, #16
 8015ffc:	d0f0      	beq.n	8015fe0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8015ffe:	2300      	movs	r3, #0
}
 8016000:	4618      	mov	r0, r3
 8016002:	3714      	adds	r7, #20
 8016004:	46bd      	mov	sp, r7
 8016006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801600a:	4770      	bx	lr
 801600c:	00030d40 	.word	0x00030d40

08016010 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8016010:	b480      	push	{r7}
 8016012:	b085      	sub	sp, #20
 8016014:	af00      	add	r7, sp, #0
 8016016:	6078      	str	r0, [r7, #4]
 8016018:	460b      	mov	r3, r1
 801601a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016026:	681a      	ldr	r2, [r3, #0]
 8016028:	78fb      	ldrb	r3, [r7, #3]
 801602a:	68f9      	ldr	r1, [r7, #12]
 801602c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016030:	4313      	orrs	r3, r2
 8016032:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8016034:	2300      	movs	r3, #0
}
 8016036:	4618      	mov	r0, r3
 8016038:	3714      	adds	r7, #20
 801603a:	46bd      	mov	sp, r7
 801603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016040:	4770      	bx	lr

08016042 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8016042:	b480      	push	{r7}
 8016044:	b087      	sub	sp, #28
 8016046:	af00      	add	r7, sp, #0
 8016048:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801604e:	693b      	ldr	r3, [r7, #16]
 8016050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016054:	689b      	ldr	r3, [r3, #8]
 8016056:	f003 0306 	and.w	r3, r3, #6
 801605a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	2b02      	cmp	r3, #2
 8016060:	d002      	beq.n	8016068 <USB_GetDevSpeed+0x26>
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	2b06      	cmp	r3, #6
 8016066:	d102      	bne.n	801606e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8016068:	2302      	movs	r3, #2
 801606a:	75fb      	strb	r3, [r7, #23]
 801606c:	e001      	b.n	8016072 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 801606e:	230f      	movs	r3, #15
 8016070:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8016072:	7dfb      	ldrb	r3, [r7, #23]
}
 8016074:	4618      	mov	r0, r3
 8016076:	371c      	adds	r7, #28
 8016078:	46bd      	mov	sp, r7
 801607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801607e:	4770      	bx	lr

08016080 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016080:	b480      	push	{r7}
 8016082:	b085      	sub	sp, #20
 8016084:	af00      	add	r7, sp, #0
 8016086:	6078      	str	r0, [r7, #4]
 8016088:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801608e:	683b      	ldr	r3, [r7, #0]
 8016090:	781b      	ldrb	r3, [r3, #0]
 8016092:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8016094:	683b      	ldr	r3, [r7, #0]
 8016096:	785b      	ldrb	r3, [r3, #1]
 8016098:	2b01      	cmp	r3, #1
 801609a:	d13a      	bne.n	8016112 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80160a2:	69da      	ldr	r2, [r3, #28]
 80160a4:	683b      	ldr	r3, [r7, #0]
 80160a6:	781b      	ldrb	r3, [r3, #0]
 80160a8:	f003 030f 	and.w	r3, r3, #15
 80160ac:	2101      	movs	r1, #1
 80160ae:	fa01 f303 	lsl.w	r3, r1, r3
 80160b2:	b29b      	uxth	r3, r3
 80160b4:	68f9      	ldr	r1, [r7, #12]
 80160b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80160ba:	4313      	orrs	r3, r2
 80160bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80160be:	68bb      	ldr	r3, [r7, #8]
 80160c0:	015a      	lsls	r2, r3, #5
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	4413      	add	r3, r2
 80160c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d155      	bne.n	8016180 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80160d4:	68bb      	ldr	r3, [r7, #8]
 80160d6:	015a      	lsls	r2, r3, #5
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	4413      	add	r3, r2
 80160dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80160e0:	681a      	ldr	r2, [r3, #0]
 80160e2:	683b      	ldr	r3, [r7, #0]
 80160e4:	68db      	ldr	r3, [r3, #12]
 80160e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80160ea:	683b      	ldr	r3, [r7, #0]
 80160ec:	791b      	ldrb	r3, [r3, #4]
 80160ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80160f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80160f2:	68bb      	ldr	r3, [r7, #8]
 80160f4:	059b      	lsls	r3, r3, #22
 80160f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80160f8:	4313      	orrs	r3, r2
 80160fa:	68ba      	ldr	r2, [r7, #8]
 80160fc:	0151      	lsls	r1, r2, #5
 80160fe:	68fa      	ldr	r2, [r7, #12]
 8016100:	440a      	add	r2, r1
 8016102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801610a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801610e:	6013      	str	r3, [r2, #0]
 8016110:	e036      	b.n	8016180 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016118:	69da      	ldr	r2, [r3, #28]
 801611a:	683b      	ldr	r3, [r7, #0]
 801611c:	781b      	ldrb	r3, [r3, #0]
 801611e:	f003 030f 	and.w	r3, r3, #15
 8016122:	2101      	movs	r1, #1
 8016124:	fa01 f303 	lsl.w	r3, r1, r3
 8016128:	041b      	lsls	r3, r3, #16
 801612a:	68f9      	ldr	r1, [r7, #12]
 801612c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016130:	4313      	orrs	r3, r2
 8016132:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8016134:	68bb      	ldr	r3, [r7, #8]
 8016136:	015a      	lsls	r2, r3, #5
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	4413      	add	r3, r2
 801613c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016146:	2b00      	cmp	r3, #0
 8016148:	d11a      	bne.n	8016180 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801614a:	68bb      	ldr	r3, [r7, #8]
 801614c:	015a      	lsls	r2, r3, #5
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	4413      	add	r3, r2
 8016152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016156:	681a      	ldr	r2, [r3, #0]
 8016158:	683b      	ldr	r3, [r7, #0]
 801615a:	68db      	ldr	r3, [r3, #12]
 801615c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8016160:	683b      	ldr	r3, [r7, #0]
 8016162:	791b      	ldrb	r3, [r3, #4]
 8016164:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8016166:	430b      	orrs	r3, r1
 8016168:	4313      	orrs	r3, r2
 801616a:	68ba      	ldr	r2, [r7, #8]
 801616c:	0151      	lsls	r1, r2, #5
 801616e:	68fa      	ldr	r2, [r7, #12]
 8016170:	440a      	add	r2, r1
 8016172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801617a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801617e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8016180:	2300      	movs	r3, #0
}
 8016182:	4618      	mov	r0, r3
 8016184:	3714      	adds	r7, #20
 8016186:	46bd      	mov	sp, r7
 8016188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801618c:	4770      	bx	lr
	...

08016190 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016190:	b480      	push	{r7}
 8016192:	b085      	sub	sp, #20
 8016194:	af00      	add	r7, sp, #0
 8016196:	6078      	str	r0, [r7, #4]
 8016198:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801619e:	683b      	ldr	r3, [r7, #0]
 80161a0:	781b      	ldrb	r3, [r3, #0]
 80161a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80161a4:	683b      	ldr	r3, [r7, #0]
 80161a6:	785b      	ldrb	r3, [r3, #1]
 80161a8:	2b01      	cmp	r3, #1
 80161aa:	d161      	bne.n	8016270 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80161ac:	68bb      	ldr	r3, [r7, #8]
 80161ae:	015a      	lsls	r2, r3, #5
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	4413      	add	r3, r2
 80161b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80161be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80161c2:	d11f      	bne.n	8016204 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80161c4:	68bb      	ldr	r3, [r7, #8]
 80161c6:	015a      	lsls	r2, r3, #5
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	4413      	add	r3, r2
 80161cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	68ba      	ldr	r2, [r7, #8]
 80161d4:	0151      	lsls	r1, r2, #5
 80161d6:	68fa      	ldr	r2, [r7, #12]
 80161d8:	440a      	add	r2, r1
 80161da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80161de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80161e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80161e4:	68bb      	ldr	r3, [r7, #8]
 80161e6:	015a      	lsls	r2, r3, #5
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	4413      	add	r3, r2
 80161ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	68ba      	ldr	r2, [r7, #8]
 80161f4:	0151      	lsls	r1, r2, #5
 80161f6:	68fa      	ldr	r2, [r7, #12]
 80161f8:	440a      	add	r2, r1
 80161fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80161fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8016202:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801620a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801620c:	683b      	ldr	r3, [r7, #0]
 801620e:	781b      	ldrb	r3, [r3, #0]
 8016210:	f003 030f 	and.w	r3, r3, #15
 8016214:	2101      	movs	r1, #1
 8016216:	fa01 f303 	lsl.w	r3, r1, r3
 801621a:	b29b      	uxth	r3, r3
 801621c:	43db      	mvns	r3, r3
 801621e:	68f9      	ldr	r1, [r7, #12]
 8016220:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016224:	4013      	ands	r3, r2
 8016226:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801622e:	69da      	ldr	r2, [r3, #28]
 8016230:	683b      	ldr	r3, [r7, #0]
 8016232:	781b      	ldrb	r3, [r3, #0]
 8016234:	f003 030f 	and.w	r3, r3, #15
 8016238:	2101      	movs	r1, #1
 801623a:	fa01 f303 	lsl.w	r3, r1, r3
 801623e:	b29b      	uxth	r3, r3
 8016240:	43db      	mvns	r3, r3
 8016242:	68f9      	ldr	r1, [r7, #12]
 8016244:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016248:	4013      	ands	r3, r2
 801624a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801624c:	68bb      	ldr	r3, [r7, #8]
 801624e:	015a      	lsls	r2, r3, #5
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	4413      	add	r3, r2
 8016254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016258:	681a      	ldr	r2, [r3, #0]
 801625a:	68bb      	ldr	r3, [r7, #8]
 801625c:	0159      	lsls	r1, r3, #5
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	440b      	add	r3, r1
 8016262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016266:	4619      	mov	r1, r3
 8016268:	4b35      	ldr	r3, [pc, #212]	; (8016340 <USB_DeactivateEndpoint+0x1b0>)
 801626a:	4013      	ands	r3, r2
 801626c:	600b      	str	r3, [r1, #0]
 801626e:	e060      	b.n	8016332 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016270:	68bb      	ldr	r3, [r7, #8]
 8016272:	015a      	lsls	r2, r3, #5
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	4413      	add	r3, r2
 8016278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016282:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016286:	d11f      	bne.n	80162c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8016288:	68bb      	ldr	r3, [r7, #8]
 801628a:	015a      	lsls	r2, r3, #5
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	4413      	add	r3, r2
 8016290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	68ba      	ldr	r2, [r7, #8]
 8016298:	0151      	lsls	r1, r2, #5
 801629a:	68fa      	ldr	r2, [r7, #12]
 801629c:	440a      	add	r2, r1
 801629e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80162a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80162a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80162a8:	68bb      	ldr	r3, [r7, #8]
 80162aa:	015a      	lsls	r2, r3, #5
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	4413      	add	r3, r2
 80162b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	68ba      	ldr	r2, [r7, #8]
 80162b8:	0151      	lsls	r1, r2, #5
 80162ba:	68fa      	ldr	r2, [r7, #12]
 80162bc:	440a      	add	r2, r1
 80162be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80162c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80162c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80162ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80162d0:	683b      	ldr	r3, [r7, #0]
 80162d2:	781b      	ldrb	r3, [r3, #0]
 80162d4:	f003 030f 	and.w	r3, r3, #15
 80162d8:	2101      	movs	r1, #1
 80162da:	fa01 f303 	lsl.w	r3, r1, r3
 80162de:	041b      	lsls	r3, r3, #16
 80162e0:	43db      	mvns	r3, r3
 80162e2:	68f9      	ldr	r1, [r7, #12]
 80162e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80162e8:	4013      	ands	r3, r2
 80162ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80162f2:	69da      	ldr	r2, [r3, #28]
 80162f4:	683b      	ldr	r3, [r7, #0]
 80162f6:	781b      	ldrb	r3, [r3, #0]
 80162f8:	f003 030f 	and.w	r3, r3, #15
 80162fc:	2101      	movs	r1, #1
 80162fe:	fa01 f303 	lsl.w	r3, r1, r3
 8016302:	041b      	lsls	r3, r3, #16
 8016304:	43db      	mvns	r3, r3
 8016306:	68f9      	ldr	r1, [r7, #12]
 8016308:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801630c:	4013      	ands	r3, r2
 801630e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8016310:	68bb      	ldr	r3, [r7, #8]
 8016312:	015a      	lsls	r2, r3, #5
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	4413      	add	r3, r2
 8016318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801631c:	681a      	ldr	r2, [r3, #0]
 801631e:	68bb      	ldr	r3, [r7, #8]
 8016320:	0159      	lsls	r1, r3, #5
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	440b      	add	r3, r1
 8016326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801632a:	4619      	mov	r1, r3
 801632c:	4b05      	ldr	r3, [pc, #20]	; (8016344 <USB_DeactivateEndpoint+0x1b4>)
 801632e:	4013      	ands	r3, r2
 8016330:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8016332:	2300      	movs	r3, #0
}
 8016334:	4618      	mov	r0, r3
 8016336:	3714      	adds	r7, #20
 8016338:	46bd      	mov	sp, r7
 801633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801633e:	4770      	bx	lr
 8016340:	ec337800 	.word	0xec337800
 8016344:	eff37800 	.word	0xeff37800

08016348 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016348:	b580      	push	{r7, lr}
 801634a:	b086      	sub	sp, #24
 801634c:	af00      	add	r7, sp, #0
 801634e:	6078      	str	r0, [r7, #4]
 8016350:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8016356:	683b      	ldr	r3, [r7, #0]
 8016358:	781b      	ldrb	r3, [r3, #0]
 801635a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801635c:	683b      	ldr	r3, [r7, #0]
 801635e:	785b      	ldrb	r3, [r3, #1]
 8016360:	2b01      	cmp	r3, #1
 8016362:	f040 810a 	bne.w	801657a <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8016366:	683b      	ldr	r3, [r7, #0]
 8016368:	699b      	ldr	r3, [r3, #24]
 801636a:	2b00      	cmp	r3, #0
 801636c:	d132      	bne.n	80163d4 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801636e:	693b      	ldr	r3, [r7, #16]
 8016370:	015a      	lsls	r2, r3, #5
 8016372:	697b      	ldr	r3, [r7, #20]
 8016374:	4413      	add	r3, r2
 8016376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801637a:	691b      	ldr	r3, [r3, #16]
 801637c:	693a      	ldr	r2, [r7, #16]
 801637e:	0151      	lsls	r1, r2, #5
 8016380:	697a      	ldr	r2, [r7, #20]
 8016382:	440a      	add	r2, r1
 8016384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016388:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801638c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8016390:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8016392:	693b      	ldr	r3, [r7, #16]
 8016394:	015a      	lsls	r2, r3, #5
 8016396:	697b      	ldr	r3, [r7, #20]
 8016398:	4413      	add	r3, r2
 801639a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801639e:	691b      	ldr	r3, [r3, #16]
 80163a0:	693a      	ldr	r2, [r7, #16]
 80163a2:	0151      	lsls	r1, r2, #5
 80163a4:	697a      	ldr	r2, [r7, #20]
 80163a6:	440a      	add	r2, r1
 80163a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80163ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80163b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80163b2:	693b      	ldr	r3, [r7, #16]
 80163b4:	015a      	lsls	r2, r3, #5
 80163b6:	697b      	ldr	r3, [r7, #20]
 80163b8:	4413      	add	r3, r2
 80163ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80163be:	691b      	ldr	r3, [r3, #16]
 80163c0:	693a      	ldr	r2, [r7, #16]
 80163c2:	0151      	lsls	r1, r2, #5
 80163c4:	697a      	ldr	r2, [r7, #20]
 80163c6:	440a      	add	r2, r1
 80163c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80163cc:	0cdb      	lsrs	r3, r3, #19
 80163ce:	04db      	lsls	r3, r3, #19
 80163d0:	6113      	str	r3, [r2, #16]
 80163d2:	e074      	b.n	80164be <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80163d4:	693b      	ldr	r3, [r7, #16]
 80163d6:	015a      	lsls	r2, r3, #5
 80163d8:	697b      	ldr	r3, [r7, #20]
 80163da:	4413      	add	r3, r2
 80163dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80163e0:	691b      	ldr	r3, [r3, #16]
 80163e2:	693a      	ldr	r2, [r7, #16]
 80163e4:	0151      	lsls	r1, r2, #5
 80163e6:	697a      	ldr	r2, [r7, #20]
 80163e8:	440a      	add	r2, r1
 80163ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80163ee:	0cdb      	lsrs	r3, r3, #19
 80163f0:	04db      	lsls	r3, r3, #19
 80163f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80163f4:	693b      	ldr	r3, [r7, #16]
 80163f6:	015a      	lsls	r2, r3, #5
 80163f8:	697b      	ldr	r3, [r7, #20]
 80163fa:	4413      	add	r3, r2
 80163fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016400:	691b      	ldr	r3, [r3, #16]
 8016402:	693a      	ldr	r2, [r7, #16]
 8016404:	0151      	lsls	r1, r2, #5
 8016406:	697a      	ldr	r2, [r7, #20]
 8016408:	440a      	add	r2, r1
 801640a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801640e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8016412:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8016416:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8016418:	693b      	ldr	r3, [r7, #16]
 801641a:	015a      	lsls	r2, r3, #5
 801641c:	697b      	ldr	r3, [r7, #20]
 801641e:	4413      	add	r3, r2
 8016420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016424:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8016426:	683b      	ldr	r3, [r7, #0]
 8016428:	6999      	ldr	r1, [r3, #24]
 801642a:	683b      	ldr	r3, [r7, #0]
 801642c:	68db      	ldr	r3, [r3, #12]
 801642e:	440b      	add	r3, r1
 8016430:	1e59      	subs	r1, r3, #1
 8016432:	683b      	ldr	r3, [r7, #0]
 8016434:	68db      	ldr	r3, [r3, #12]
 8016436:	fbb1 f3f3 	udiv	r3, r1, r3
 801643a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801643c:	4b9e      	ldr	r3, [pc, #632]	; (80166b8 <USB_EPStartXfer+0x370>)
 801643e:	400b      	ands	r3, r1
 8016440:	6939      	ldr	r1, [r7, #16]
 8016442:	0148      	lsls	r0, r1, #5
 8016444:	6979      	ldr	r1, [r7, #20]
 8016446:	4401      	add	r1, r0
 8016448:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801644c:	4313      	orrs	r3, r2
 801644e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8016450:	693b      	ldr	r3, [r7, #16]
 8016452:	015a      	lsls	r2, r3, #5
 8016454:	697b      	ldr	r3, [r7, #20]
 8016456:	4413      	add	r3, r2
 8016458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801645c:	691a      	ldr	r2, [r3, #16]
 801645e:	683b      	ldr	r3, [r7, #0]
 8016460:	699b      	ldr	r3, [r3, #24]
 8016462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016466:	6939      	ldr	r1, [r7, #16]
 8016468:	0148      	lsls	r0, r1, #5
 801646a:	6979      	ldr	r1, [r7, #20]
 801646c:	4401      	add	r1, r0
 801646e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8016472:	4313      	orrs	r3, r2
 8016474:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8016476:	683b      	ldr	r3, [r7, #0]
 8016478:	791b      	ldrb	r3, [r3, #4]
 801647a:	2b01      	cmp	r3, #1
 801647c:	d11f      	bne.n	80164be <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801647e:	693b      	ldr	r3, [r7, #16]
 8016480:	015a      	lsls	r2, r3, #5
 8016482:	697b      	ldr	r3, [r7, #20]
 8016484:	4413      	add	r3, r2
 8016486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801648a:	691b      	ldr	r3, [r3, #16]
 801648c:	693a      	ldr	r2, [r7, #16]
 801648e:	0151      	lsls	r1, r2, #5
 8016490:	697a      	ldr	r2, [r7, #20]
 8016492:	440a      	add	r2, r1
 8016494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016498:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801649c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801649e:	693b      	ldr	r3, [r7, #16]
 80164a0:	015a      	lsls	r2, r3, #5
 80164a2:	697b      	ldr	r3, [r7, #20]
 80164a4:	4413      	add	r3, r2
 80164a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80164aa:	691b      	ldr	r3, [r3, #16]
 80164ac:	693a      	ldr	r2, [r7, #16]
 80164ae:	0151      	lsls	r1, r2, #5
 80164b0:	697a      	ldr	r2, [r7, #20]
 80164b2:	440a      	add	r2, r1
 80164b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80164b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80164bc:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80164be:	693b      	ldr	r3, [r7, #16]
 80164c0:	015a      	lsls	r2, r3, #5
 80164c2:	697b      	ldr	r3, [r7, #20]
 80164c4:	4413      	add	r3, r2
 80164c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	693a      	ldr	r2, [r7, #16]
 80164ce:	0151      	lsls	r1, r2, #5
 80164d0:	697a      	ldr	r2, [r7, #20]
 80164d2:	440a      	add	r2, r1
 80164d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80164d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80164dc:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80164de:	683b      	ldr	r3, [r7, #0]
 80164e0:	791b      	ldrb	r3, [r3, #4]
 80164e2:	2b01      	cmp	r3, #1
 80164e4:	d015      	beq.n	8016512 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80164e6:	683b      	ldr	r3, [r7, #0]
 80164e8:	699b      	ldr	r3, [r3, #24]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	f000 8106 	beq.w	80166fc <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80164f0:	697b      	ldr	r3, [r7, #20]
 80164f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80164f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80164f8:	683b      	ldr	r3, [r7, #0]
 80164fa:	781b      	ldrb	r3, [r3, #0]
 80164fc:	f003 030f 	and.w	r3, r3, #15
 8016500:	2101      	movs	r1, #1
 8016502:	fa01 f303 	lsl.w	r3, r1, r3
 8016506:	6979      	ldr	r1, [r7, #20]
 8016508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801650c:	4313      	orrs	r3, r2
 801650e:	634b      	str	r3, [r1, #52]	; 0x34
 8016510:	e0f4      	b.n	80166fc <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8016512:	697b      	ldr	r3, [r7, #20]
 8016514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016518:	689b      	ldr	r3, [r3, #8]
 801651a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801651e:	2b00      	cmp	r3, #0
 8016520:	d110      	bne.n	8016544 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8016522:	693b      	ldr	r3, [r7, #16]
 8016524:	015a      	lsls	r2, r3, #5
 8016526:	697b      	ldr	r3, [r7, #20]
 8016528:	4413      	add	r3, r2
 801652a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	693a      	ldr	r2, [r7, #16]
 8016532:	0151      	lsls	r1, r2, #5
 8016534:	697a      	ldr	r2, [r7, #20]
 8016536:	440a      	add	r2, r1
 8016538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801653c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016540:	6013      	str	r3, [r2, #0]
 8016542:	e00f      	b.n	8016564 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8016544:	693b      	ldr	r3, [r7, #16]
 8016546:	015a      	lsls	r2, r3, #5
 8016548:	697b      	ldr	r3, [r7, #20]
 801654a:	4413      	add	r3, r2
 801654c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	693a      	ldr	r2, [r7, #16]
 8016554:	0151      	lsls	r1, r2, #5
 8016556:	697a      	ldr	r2, [r7, #20]
 8016558:	440a      	add	r2, r1
 801655a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801655e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016562:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8016564:	683b      	ldr	r3, [r7, #0]
 8016566:	6919      	ldr	r1, [r3, #16]
 8016568:	683b      	ldr	r3, [r7, #0]
 801656a:	781a      	ldrb	r2, [r3, #0]
 801656c:	683b      	ldr	r3, [r7, #0]
 801656e:	699b      	ldr	r3, [r3, #24]
 8016570:	b29b      	uxth	r3, r3
 8016572:	6878      	ldr	r0, [r7, #4]
 8016574:	f000 fa94 	bl	8016aa0 <USB_WritePacket>
 8016578:	e0c0      	b.n	80166fc <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801657a:	693b      	ldr	r3, [r7, #16]
 801657c:	015a      	lsls	r2, r3, #5
 801657e:	697b      	ldr	r3, [r7, #20]
 8016580:	4413      	add	r3, r2
 8016582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016586:	691b      	ldr	r3, [r3, #16]
 8016588:	693a      	ldr	r2, [r7, #16]
 801658a:	0151      	lsls	r1, r2, #5
 801658c:	697a      	ldr	r2, [r7, #20]
 801658e:	440a      	add	r2, r1
 8016590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016594:	0cdb      	lsrs	r3, r3, #19
 8016596:	04db      	lsls	r3, r3, #19
 8016598:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801659a:	693b      	ldr	r3, [r7, #16]
 801659c:	015a      	lsls	r2, r3, #5
 801659e:	697b      	ldr	r3, [r7, #20]
 80165a0:	4413      	add	r3, r2
 80165a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80165a6:	691b      	ldr	r3, [r3, #16]
 80165a8:	693a      	ldr	r2, [r7, #16]
 80165aa:	0151      	lsls	r1, r2, #5
 80165ac:	697a      	ldr	r2, [r7, #20]
 80165ae:	440a      	add	r2, r1
 80165b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80165b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80165b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80165bc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80165be:	683b      	ldr	r3, [r7, #0]
 80165c0:	699b      	ldr	r3, [r3, #24]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d123      	bne.n	801660e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80165c6:	693b      	ldr	r3, [r7, #16]
 80165c8:	015a      	lsls	r2, r3, #5
 80165ca:	697b      	ldr	r3, [r7, #20]
 80165cc:	4413      	add	r3, r2
 80165ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80165d2:	691a      	ldr	r2, [r3, #16]
 80165d4:	683b      	ldr	r3, [r7, #0]
 80165d6:	68db      	ldr	r3, [r3, #12]
 80165d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80165dc:	6939      	ldr	r1, [r7, #16]
 80165de:	0148      	lsls	r0, r1, #5
 80165e0:	6979      	ldr	r1, [r7, #20]
 80165e2:	4401      	add	r1, r0
 80165e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80165e8:	4313      	orrs	r3, r2
 80165ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80165ec:	693b      	ldr	r3, [r7, #16]
 80165ee:	015a      	lsls	r2, r3, #5
 80165f0:	697b      	ldr	r3, [r7, #20]
 80165f2:	4413      	add	r3, r2
 80165f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80165f8:	691b      	ldr	r3, [r3, #16]
 80165fa:	693a      	ldr	r2, [r7, #16]
 80165fc:	0151      	lsls	r1, r2, #5
 80165fe:	697a      	ldr	r2, [r7, #20]
 8016600:	440a      	add	r2, r1
 8016602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016606:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801660a:	6113      	str	r3, [r2, #16]
 801660c:	e037      	b.n	801667e <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801660e:	683b      	ldr	r3, [r7, #0]
 8016610:	699a      	ldr	r2, [r3, #24]
 8016612:	683b      	ldr	r3, [r7, #0]
 8016614:	68db      	ldr	r3, [r3, #12]
 8016616:	4413      	add	r3, r2
 8016618:	1e5a      	subs	r2, r3, #1
 801661a:	683b      	ldr	r3, [r7, #0]
 801661c:	68db      	ldr	r3, [r3, #12]
 801661e:	fbb2 f3f3 	udiv	r3, r2, r3
 8016622:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8016624:	683b      	ldr	r3, [r7, #0]
 8016626:	68db      	ldr	r3, [r3, #12]
 8016628:	89fa      	ldrh	r2, [r7, #14]
 801662a:	fb03 f202 	mul.w	r2, r3, r2
 801662e:	683b      	ldr	r3, [r7, #0]
 8016630:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8016632:	693b      	ldr	r3, [r7, #16]
 8016634:	015a      	lsls	r2, r3, #5
 8016636:	697b      	ldr	r3, [r7, #20]
 8016638:	4413      	add	r3, r2
 801663a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801663e:	691a      	ldr	r2, [r3, #16]
 8016640:	89fb      	ldrh	r3, [r7, #14]
 8016642:	04d9      	lsls	r1, r3, #19
 8016644:	4b1c      	ldr	r3, [pc, #112]	; (80166b8 <USB_EPStartXfer+0x370>)
 8016646:	400b      	ands	r3, r1
 8016648:	6939      	ldr	r1, [r7, #16]
 801664a:	0148      	lsls	r0, r1, #5
 801664c:	6979      	ldr	r1, [r7, #20]
 801664e:	4401      	add	r1, r0
 8016650:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8016654:	4313      	orrs	r3, r2
 8016656:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8016658:	693b      	ldr	r3, [r7, #16]
 801665a:	015a      	lsls	r2, r3, #5
 801665c:	697b      	ldr	r3, [r7, #20]
 801665e:	4413      	add	r3, r2
 8016660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016664:	691a      	ldr	r2, [r3, #16]
 8016666:	683b      	ldr	r3, [r7, #0]
 8016668:	69db      	ldr	r3, [r3, #28]
 801666a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801666e:	6939      	ldr	r1, [r7, #16]
 8016670:	0148      	lsls	r0, r1, #5
 8016672:	6979      	ldr	r1, [r7, #20]
 8016674:	4401      	add	r1, r0
 8016676:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801667a:	4313      	orrs	r3, r2
 801667c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 801667e:	683b      	ldr	r3, [r7, #0]
 8016680:	791b      	ldrb	r3, [r3, #4]
 8016682:	2b01      	cmp	r3, #1
 8016684:	d12a      	bne.n	80166dc <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8016686:	697b      	ldr	r3, [r7, #20]
 8016688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801668c:	689b      	ldr	r3, [r3, #8]
 801668e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016692:	2b00      	cmp	r3, #0
 8016694:	d112      	bne.n	80166bc <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8016696:	693b      	ldr	r3, [r7, #16]
 8016698:	015a      	lsls	r2, r3, #5
 801669a:	697b      	ldr	r3, [r7, #20]
 801669c:	4413      	add	r3, r2
 801669e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	693a      	ldr	r2, [r7, #16]
 80166a6:	0151      	lsls	r1, r2, #5
 80166a8:	697a      	ldr	r2, [r7, #20]
 80166aa:	440a      	add	r2, r1
 80166ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80166b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80166b4:	6013      	str	r3, [r2, #0]
 80166b6:	e011      	b.n	80166dc <USB_EPStartXfer+0x394>
 80166b8:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80166bc:	693b      	ldr	r3, [r7, #16]
 80166be:	015a      	lsls	r2, r3, #5
 80166c0:	697b      	ldr	r3, [r7, #20]
 80166c2:	4413      	add	r3, r2
 80166c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	693a      	ldr	r2, [r7, #16]
 80166cc:	0151      	lsls	r1, r2, #5
 80166ce:	697a      	ldr	r2, [r7, #20]
 80166d0:	440a      	add	r2, r1
 80166d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80166d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80166da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80166dc:	693b      	ldr	r3, [r7, #16]
 80166de:	015a      	lsls	r2, r3, #5
 80166e0:	697b      	ldr	r3, [r7, #20]
 80166e2:	4413      	add	r3, r2
 80166e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	693a      	ldr	r2, [r7, #16]
 80166ec:	0151      	lsls	r1, r2, #5
 80166ee:	697a      	ldr	r2, [r7, #20]
 80166f0:	440a      	add	r2, r1
 80166f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80166f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80166fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80166fc:	2300      	movs	r3, #0
}
 80166fe:	4618      	mov	r0, r3
 8016700:	3718      	adds	r7, #24
 8016702:	46bd      	mov	sp, r7
 8016704:	bd80      	pop	{r7, pc}
 8016706:	bf00      	nop

08016708 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016708:	b480      	push	{r7}
 801670a:	b085      	sub	sp, #20
 801670c:	af00      	add	r7, sp, #0
 801670e:	6078      	str	r0, [r7, #4]
 8016710:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016716:	683b      	ldr	r3, [r7, #0]
 8016718:	781b      	ldrb	r3, [r3, #0]
 801671a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801671c:	683b      	ldr	r3, [r7, #0]
 801671e:	785b      	ldrb	r3, [r3, #1]
 8016720:	2b01      	cmp	r3, #1
 8016722:	f040 80ab 	bne.w	801687c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8016726:	683b      	ldr	r3, [r7, #0]
 8016728:	699b      	ldr	r3, [r3, #24]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d132      	bne.n	8016794 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801672e:	68bb      	ldr	r3, [r7, #8]
 8016730:	015a      	lsls	r2, r3, #5
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	4413      	add	r3, r2
 8016736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801673a:	691b      	ldr	r3, [r3, #16]
 801673c:	68ba      	ldr	r2, [r7, #8]
 801673e:	0151      	lsls	r1, r2, #5
 8016740:	68fa      	ldr	r2, [r7, #12]
 8016742:	440a      	add	r2, r1
 8016744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016748:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801674c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8016750:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8016752:	68bb      	ldr	r3, [r7, #8]
 8016754:	015a      	lsls	r2, r3, #5
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	4413      	add	r3, r2
 801675a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801675e:	691b      	ldr	r3, [r3, #16]
 8016760:	68ba      	ldr	r2, [r7, #8]
 8016762:	0151      	lsls	r1, r2, #5
 8016764:	68fa      	ldr	r2, [r7, #12]
 8016766:	440a      	add	r2, r1
 8016768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801676c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016770:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8016772:	68bb      	ldr	r3, [r7, #8]
 8016774:	015a      	lsls	r2, r3, #5
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	4413      	add	r3, r2
 801677a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801677e:	691b      	ldr	r3, [r3, #16]
 8016780:	68ba      	ldr	r2, [r7, #8]
 8016782:	0151      	lsls	r1, r2, #5
 8016784:	68fa      	ldr	r2, [r7, #12]
 8016786:	440a      	add	r2, r1
 8016788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801678c:	0cdb      	lsrs	r3, r3, #19
 801678e:	04db      	lsls	r3, r3, #19
 8016790:	6113      	str	r3, [r2, #16]
 8016792:	e04e      	b.n	8016832 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8016794:	68bb      	ldr	r3, [r7, #8]
 8016796:	015a      	lsls	r2, r3, #5
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	4413      	add	r3, r2
 801679c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80167a0:	691b      	ldr	r3, [r3, #16]
 80167a2:	68ba      	ldr	r2, [r7, #8]
 80167a4:	0151      	lsls	r1, r2, #5
 80167a6:	68fa      	ldr	r2, [r7, #12]
 80167a8:	440a      	add	r2, r1
 80167aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80167ae:	0cdb      	lsrs	r3, r3, #19
 80167b0:	04db      	lsls	r3, r3, #19
 80167b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80167b4:	68bb      	ldr	r3, [r7, #8]
 80167b6:	015a      	lsls	r2, r3, #5
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	4413      	add	r3, r2
 80167bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80167c0:	691b      	ldr	r3, [r3, #16]
 80167c2:	68ba      	ldr	r2, [r7, #8]
 80167c4:	0151      	lsls	r1, r2, #5
 80167c6:	68fa      	ldr	r2, [r7, #12]
 80167c8:	440a      	add	r2, r1
 80167ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80167ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80167d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80167d6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80167d8:	683b      	ldr	r3, [r7, #0]
 80167da:	699a      	ldr	r2, [r3, #24]
 80167dc:	683b      	ldr	r3, [r7, #0]
 80167de:	68db      	ldr	r3, [r3, #12]
 80167e0:	429a      	cmp	r2, r3
 80167e2:	d903      	bls.n	80167ec <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 80167e4:	683b      	ldr	r3, [r7, #0]
 80167e6:	68da      	ldr	r2, [r3, #12]
 80167e8:	683b      	ldr	r3, [r7, #0]
 80167ea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80167ec:	68bb      	ldr	r3, [r7, #8]
 80167ee:	015a      	lsls	r2, r3, #5
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	4413      	add	r3, r2
 80167f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80167f8:	691b      	ldr	r3, [r3, #16]
 80167fa:	68ba      	ldr	r2, [r7, #8]
 80167fc:	0151      	lsls	r1, r2, #5
 80167fe:	68fa      	ldr	r2, [r7, #12]
 8016800:	440a      	add	r2, r1
 8016802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016806:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801680a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801680c:	68bb      	ldr	r3, [r7, #8]
 801680e:	015a      	lsls	r2, r3, #5
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	4413      	add	r3, r2
 8016814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016818:	691a      	ldr	r2, [r3, #16]
 801681a:	683b      	ldr	r3, [r7, #0]
 801681c:	699b      	ldr	r3, [r3, #24]
 801681e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016822:	68b9      	ldr	r1, [r7, #8]
 8016824:	0148      	lsls	r0, r1, #5
 8016826:	68f9      	ldr	r1, [r7, #12]
 8016828:	4401      	add	r1, r0
 801682a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801682e:	4313      	orrs	r3, r2
 8016830:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8016832:	68bb      	ldr	r3, [r7, #8]
 8016834:	015a      	lsls	r2, r3, #5
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	4413      	add	r3, r2
 801683a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	68ba      	ldr	r2, [r7, #8]
 8016842:	0151      	lsls	r1, r2, #5
 8016844:	68fa      	ldr	r2, [r7, #12]
 8016846:	440a      	add	r2, r1
 8016848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801684c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8016850:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8016852:	683b      	ldr	r3, [r7, #0]
 8016854:	699b      	ldr	r3, [r3, #24]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d071      	beq.n	801693e <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016862:	683b      	ldr	r3, [r7, #0]
 8016864:	781b      	ldrb	r3, [r3, #0]
 8016866:	f003 030f 	and.w	r3, r3, #15
 801686a:	2101      	movs	r1, #1
 801686c:	fa01 f303 	lsl.w	r3, r1, r3
 8016870:	68f9      	ldr	r1, [r7, #12]
 8016872:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016876:	4313      	orrs	r3, r2
 8016878:	634b      	str	r3, [r1, #52]	; 0x34
 801687a:	e060      	b.n	801693e <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801687c:	68bb      	ldr	r3, [r7, #8]
 801687e:	015a      	lsls	r2, r3, #5
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	4413      	add	r3, r2
 8016884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016888:	691b      	ldr	r3, [r3, #16]
 801688a:	68ba      	ldr	r2, [r7, #8]
 801688c:	0151      	lsls	r1, r2, #5
 801688e:	68fa      	ldr	r2, [r7, #12]
 8016890:	440a      	add	r2, r1
 8016892:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016896:	0cdb      	lsrs	r3, r3, #19
 8016898:	04db      	lsls	r3, r3, #19
 801689a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801689c:	68bb      	ldr	r3, [r7, #8]
 801689e:	015a      	lsls	r2, r3, #5
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	4413      	add	r3, r2
 80168a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80168a8:	691b      	ldr	r3, [r3, #16]
 80168aa:	68ba      	ldr	r2, [r7, #8]
 80168ac:	0151      	lsls	r1, r2, #5
 80168ae:	68fa      	ldr	r2, [r7, #12]
 80168b0:	440a      	add	r2, r1
 80168b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80168b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80168ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80168be:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80168c0:	683b      	ldr	r3, [r7, #0]
 80168c2:	699b      	ldr	r3, [r3, #24]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d003      	beq.n	80168d0 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80168c8:	683b      	ldr	r3, [r7, #0]
 80168ca:	68da      	ldr	r2, [r3, #12]
 80168cc:	683b      	ldr	r3, [r7, #0]
 80168ce:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80168d0:	683b      	ldr	r3, [r7, #0]
 80168d2:	68da      	ldr	r2, [r3, #12]
 80168d4:	683b      	ldr	r3, [r7, #0]
 80168d6:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80168d8:	68bb      	ldr	r3, [r7, #8]
 80168da:	015a      	lsls	r2, r3, #5
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	4413      	add	r3, r2
 80168e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80168e4:	691b      	ldr	r3, [r3, #16]
 80168e6:	68ba      	ldr	r2, [r7, #8]
 80168e8:	0151      	lsls	r1, r2, #5
 80168ea:	68fa      	ldr	r2, [r7, #12]
 80168ec:	440a      	add	r2, r1
 80168ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80168f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80168f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80168f8:	68bb      	ldr	r3, [r7, #8]
 80168fa:	015a      	lsls	r2, r3, #5
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	4413      	add	r3, r2
 8016900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016904:	691a      	ldr	r2, [r3, #16]
 8016906:	683b      	ldr	r3, [r7, #0]
 8016908:	69db      	ldr	r3, [r3, #28]
 801690a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801690e:	68b9      	ldr	r1, [r7, #8]
 8016910:	0148      	lsls	r0, r1, #5
 8016912:	68f9      	ldr	r1, [r7, #12]
 8016914:	4401      	add	r1, r0
 8016916:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801691a:	4313      	orrs	r3, r2
 801691c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801691e:	68bb      	ldr	r3, [r7, #8]
 8016920:	015a      	lsls	r2, r3, #5
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	4413      	add	r3, r2
 8016926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	68ba      	ldr	r2, [r7, #8]
 801692e:	0151      	lsls	r1, r2, #5
 8016930:	68fa      	ldr	r2, [r7, #12]
 8016932:	440a      	add	r2, r1
 8016934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016938:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801693c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801693e:	2300      	movs	r3, #0
}
 8016940:	4618      	mov	r0, r3
 8016942:	3714      	adds	r7, #20
 8016944:	46bd      	mov	sp, r7
 8016946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801694a:	4770      	bx	lr

0801694c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801694c:	b480      	push	{r7}
 801694e:	b087      	sub	sp, #28
 8016950:	af00      	add	r7, sp, #0
 8016952:	6078      	str	r0, [r7, #4]
 8016954:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8016956:	2300      	movs	r3, #0
 8016958:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801695a:	2300      	movs	r3, #0
 801695c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8016962:	683b      	ldr	r3, [r7, #0]
 8016964:	785b      	ldrb	r3, [r3, #1]
 8016966:	2b01      	cmp	r3, #1
 8016968:	d14a      	bne.n	8016a00 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801696a:	683b      	ldr	r3, [r7, #0]
 801696c:	781b      	ldrb	r3, [r3, #0]
 801696e:	015a      	lsls	r2, r3, #5
 8016970:	693b      	ldr	r3, [r7, #16]
 8016972:	4413      	add	r3, r2
 8016974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801697e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016982:	f040 8086 	bne.w	8016a92 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8016986:	683b      	ldr	r3, [r7, #0]
 8016988:	781b      	ldrb	r3, [r3, #0]
 801698a:	015a      	lsls	r2, r3, #5
 801698c:	693b      	ldr	r3, [r7, #16]
 801698e:	4413      	add	r3, r2
 8016990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	683a      	ldr	r2, [r7, #0]
 8016998:	7812      	ldrb	r2, [r2, #0]
 801699a:	0151      	lsls	r1, r2, #5
 801699c:	693a      	ldr	r2, [r7, #16]
 801699e:	440a      	add	r2, r1
 80169a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80169a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80169a8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80169aa:	683b      	ldr	r3, [r7, #0]
 80169ac:	781b      	ldrb	r3, [r3, #0]
 80169ae:	015a      	lsls	r2, r3, #5
 80169b0:	693b      	ldr	r3, [r7, #16]
 80169b2:	4413      	add	r3, r2
 80169b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	683a      	ldr	r2, [r7, #0]
 80169bc:	7812      	ldrb	r2, [r2, #0]
 80169be:	0151      	lsls	r1, r2, #5
 80169c0:	693a      	ldr	r2, [r7, #16]
 80169c2:	440a      	add	r2, r1
 80169c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80169c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80169cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	3301      	adds	r3, #1
 80169d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80169da:	4293      	cmp	r3, r2
 80169dc:	d902      	bls.n	80169e4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80169de:	2301      	movs	r3, #1
 80169e0:	75fb      	strb	r3, [r7, #23]
          break;
 80169e2:	e056      	b.n	8016a92 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80169e4:	683b      	ldr	r3, [r7, #0]
 80169e6:	781b      	ldrb	r3, [r3, #0]
 80169e8:	015a      	lsls	r2, r3, #5
 80169ea:	693b      	ldr	r3, [r7, #16]
 80169ec:	4413      	add	r3, r2
 80169ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80169f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80169fc:	d0e7      	beq.n	80169ce <USB_EPStopXfer+0x82>
 80169fe:	e048      	b.n	8016a92 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016a00:	683b      	ldr	r3, [r7, #0]
 8016a02:	781b      	ldrb	r3, [r3, #0]
 8016a04:	015a      	lsls	r2, r3, #5
 8016a06:	693b      	ldr	r3, [r7, #16]
 8016a08:	4413      	add	r3, r2
 8016a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016a14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016a18:	d13b      	bne.n	8016a92 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8016a1a:	683b      	ldr	r3, [r7, #0]
 8016a1c:	781b      	ldrb	r3, [r3, #0]
 8016a1e:	015a      	lsls	r2, r3, #5
 8016a20:	693b      	ldr	r3, [r7, #16]
 8016a22:	4413      	add	r3, r2
 8016a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	683a      	ldr	r2, [r7, #0]
 8016a2c:	7812      	ldrb	r2, [r2, #0]
 8016a2e:	0151      	lsls	r1, r2, #5
 8016a30:	693a      	ldr	r2, [r7, #16]
 8016a32:	440a      	add	r2, r1
 8016a34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016a38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8016a3c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8016a3e:	683b      	ldr	r3, [r7, #0]
 8016a40:	781b      	ldrb	r3, [r3, #0]
 8016a42:	015a      	lsls	r2, r3, #5
 8016a44:	693b      	ldr	r3, [r7, #16]
 8016a46:	4413      	add	r3, r2
 8016a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	683a      	ldr	r2, [r7, #0]
 8016a50:	7812      	ldrb	r2, [r2, #0]
 8016a52:	0151      	lsls	r1, r2, #5
 8016a54:	693a      	ldr	r2, [r7, #16]
 8016a56:	440a      	add	r2, r1
 8016a58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016a5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8016a60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	3301      	adds	r3, #1
 8016a66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8016a6e:	4293      	cmp	r3, r2
 8016a70:	d902      	bls.n	8016a78 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8016a72:	2301      	movs	r3, #1
 8016a74:	75fb      	strb	r3, [r7, #23]
          break;
 8016a76:	e00c      	b.n	8016a92 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8016a78:	683b      	ldr	r3, [r7, #0]
 8016a7a:	781b      	ldrb	r3, [r3, #0]
 8016a7c:	015a      	lsls	r2, r3, #5
 8016a7e:	693b      	ldr	r3, [r7, #16]
 8016a80:	4413      	add	r3, r2
 8016a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016a8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016a90:	d0e7      	beq.n	8016a62 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8016a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a94:	4618      	mov	r0, r3
 8016a96:	371c      	adds	r7, #28
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a9e:	4770      	bx	lr

08016aa0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8016aa0:	b480      	push	{r7}
 8016aa2:	b089      	sub	sp, #36	; 0x24
 8016aa4:	af00      	add	r7, sp, #0
 8016aa6:	60f8      	str	r0, [r7, #12]
 8016aa8:	60b9      	str	r1, [r7, #8]
 8016aaa:	4611      	mov	r1, r2
 8016aac:	461a      	mov	r2, r3
 8016aae:	460b      	mov	r3, r1
 8016ab0:	71fb      	strb	r3, [r7, #7]
 8016ab2:	4613      	mov	r3, r2
 8016ab4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8016aba:	68bb      	ldr	r3, [r7, #8]
 8016abc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8016abe:	88bb      	ldrh	r3, [r7, #4]
 8016ac0:	3303      	adds	r3, #3
 8016ac2:	089b      	lsrs	r3, r3, #2
 8016ac4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	61bb      	str	r3, [r7, #24]
 8016aca:	e018      	b.n	8016afe <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8016acc:	79fb      	ldrb	r3, [r7, #7]
 8016ace:	031a      	lsls	r2, r3, #12
 8016ad0:	697b      	ldr	r3, [r7, #20]
 8016ad2:	4413      	add	r3, r2
 8016ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016ad8:	461a      	mov	r2, r3
 8016ada:	69fb      	ldr	r3, [r7, #28]
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	6013      	str	r3, [r2, #0]
    pSrc++;
 8016ae0:	69fb      	ldr	r3, [r7, #28]
 8016ae2:	3301      	adds	r3, #1
 8016ae4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8016ae6:	69fb      	ldr	r3, [r7, #28]
 8016ae8:	3301      	adds	r3, #1
 8016aea:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8016aec:	69fb      	ldr	r3, [r7, #28]
 8016aee:	3301      	adds	r3, #1
 8016af0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8016af2:	69fb      	ldr	r3, [r7, #28]
 8016af4:	3301      	adds	r3, #1
 8016af6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8016af8:	69bb      	ldr	r3, [r7, #24]
 8016afa:	3301      	adds	r3, #1
 8016afc:	61bb      	str	r3, [r7, #24]
 8016afe:	69ba      	ldr	r2, [r7, #24]
 8016b00:	693b      	ldr	r3, [r7, #16]
 8016b02:	429a      	cmp	r2, r3
 8016b04:	d3e2      	bcc.n	8016acc <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8016b06:	2300      	movs	r3, #0
}
 8016b08:	4618      	mov	r0, r3
 8016b0a:	3724      	adds	r7, #36	; 0x24
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b12:	4770      	bx	lr

08016b14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8016b14:	b480      	push	{r7}
 8016b16:	b08b      	sub	sp, #44	; 0x2c
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	60f8      	str	r0, [r7, #12]
 8016b1c:	60b9      	str	r1, [r7, #8]
 8016b1e:	4613      	mov	r3, r2
 8016b20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8016b26:	68bb      	ldr	r3, [r7, #8]
 8016b28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8016b2a:	88fb      	ldrh	r3, [r7, #6]
 8016b2c:	089b      	lsrs	r3, r3, #2
 8016b2e:	b29b      	uxth	r3, r3
 8016b30:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8016b32:	88fb      	ldrh	r3, [r7, #6]
 8016b34:	f003 0303 	and.w	r3, r3, #3
 8016b38:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	623b      	str	r3, [r7, #32]
 8016b3e:	e014      	b.n	8016b6a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8016b40:	69bb      	ldr	r3, [r7, #24]
 8016b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016b46:	681a      	ldr	r2, [r3, #0]
 8016b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b4a:	601a      	str	r2, [r3, #0]
    pDest++;
 8016b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b4e:	3301      	adds	r3, #1
 8016b50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8016b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b54:	3301      	adds	r3, #1
 8016b56:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8016b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b5a:	3301      	adds	r3, #1
 8016b5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8016b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b60:	3301      	adds	r3, #1
 8016b62:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8016b64:	6a3b      	ldr	r3, [r7, #32]
 8016b66:	3301      	adds	r3, #1
 8016b68:	623b      	str	r3, [r7, #32]
 8016b6a:	6a3a      	ldr	r2, [r7, #32]
 8016b6c:	697b      	ldr	r3, [r7, #20]
 8016b6e:	429a      	cmp	r2, r3
 8016b70:	d3e6      	bcc.n	8016b40 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8016b72:	8bfb      	ldrh	r3, [r7, #30]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d01e      	beq.n	8016bb6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8016b78:	2300      	movs	r3, #0
 8016b7a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8016b7c:	69bb      	ldr	r3, [r7, #24]
 8016b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016b82:	461a      	mov	r2, r3
 8016b84:	f107 0310 	add.w	r3, r7, #16
 8016b88:	6812      	ldr	r2, [r2, #0]
 8016b8a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8016b8c:	693a      	ldr	r2, [r7, #16]
 8016b8e:	6a3b      	ldr	r3, [r7, #32]
 8016b90:	b2db      	uxtb	r3, r3
 8016b92:	00db      	lsls	r3, r3, #3
 8016b94:	fa22 f303 	lsr.w	r3, r2, r3
 8016b98:	b2da      	uxtb	r2, r3
 8016b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b9c:	701a      	strb	r2, [r3, #0]
      i++;
 8016b9e:	6a3b      	ldr	r3, [r7, #32]
 8016ba0:	3301      	adds	r3, #1
 8016ba2:	623b      	str	r3, [r7, #32]
      pDest++;
 8016ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ba6:	3301      	adds	r3, #1
 8016ba8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8016baa:	8bfb      	ldrh	r3, [r7, #30]
 8016bac:	3b01      	subs	r3, #1
 8016bae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8016bb0:	8bfb      	ldrh	r3, [r7, #30]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d1ea      	bne.n	8016b8c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8016bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016bb8:	4618      	mov	r0, r3
 8016bba:	372c      	adds	r7, #44	; 0x2c
 8016bbc:	46bd      	mov	sp, r7
 8016bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc2:	4770      	bx	lr

08016bc4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016bc4:	b480      	push	{r7}
 8016bc6:	b085      	sub	sp, #20
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	6078      	str	r0, [r7, #4]
 8016bcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016bd2:	683b      	ldr	r3, [r7, #0]
 8016bd4:	781b      	ldrb	r3, [r3, #0]
 8016bd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8016bd8:	683b      	ldr	r3, [r7, #0]
 8016bda:	785b      	ldrb	r3, [r3, #1]
 8016bdc:	2b01      	cmp	r3, #1
 8016bde:	d12c      	bne.n	8016c3a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8016be0:	68bb      	ldr	r3, [r7, #8]
 8016be2:	015a      	lsls	r2, r3, #5
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	4413      	add	r3, r2
 8016be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	db12      	blt.n	8016c18 <USB_EPSetStall+0x54>
 8016bf2:	68bb      	ldr	r3, [r7, #8]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d00f      	beq.n	8016c18 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8016bf8:	68bb      	ldr	r3, [r7, #8]
 8016bfa:	015a      	lsls	r2, r3, #5
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	4413      	add	r3, r2
 8016c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	68ba      	ldr	r2, [r7, #8]
 8016c08:	0151      	lsls	r1, r2, #5
 8016c0a:	68fa      	ldr	r2, [r7, #12]
 8016c0c:	440a      	add	r2, r1
 8016c0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016c12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8016c16:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8016c18:	68bb      	ldr	r3, [r7, #8]
 8016c1a:	015a      	lsls	r2, r3, #5
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	4413      	add	r3, r2
 8016c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	68ba      	ldr	r2, [r7, #8]
 8016c28:	0151      	lsls	r1, r2, #5
 8016c2a:	68fa      	ldr	r2, [r7, #12]
 8016c2c:	440a      	add	r2, r1
 8016c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016c32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8016c36:	6013      	str	r3, [r2, #0]
 8016c38:	e02b      	b.n	8016c92 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8016c3a:	68bb      	ldr	r3, [r7, #8]
 8016c3c:	015a      	lsls	r2, r3, #5
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	4413      	add	r3, r2
 8016c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	db12      	blt.n	8016c72 <USB_EPSetStall+0xae>
 8016c4c:	68bb      	ldr	r3, [r7, #8]
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d00f      	beq.n	8016c72 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8016c52:	68bb      	ldr	r3, [r7, #8]
 8016c54:	015a      	lsls	r2, r3, #5
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	4413      	add	r3, r2
 8016c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	68ba      	ldr	r2, [r7, #8]
 8016c62:	0151      	lsls	r1, r2, #5
 8016c64:	68fa      	ldr	r2, [r7, #12]
 8016c66:	440a      	add	r2, r1
 8016c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016c6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8016c70:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8016c72:	68bb      	ldr	r3, [r7, #8]
 8016c74:	015a      	lsls	r2, r3, #5
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	4413      	add	r3, r2
 8016c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	68ba      	ldr	r2, [r7, #8]
 8016c82:	0151      	lsls	r1, r2, #5
 8016c84:	68fa      	ldr	r2, [r7, #12]
 8016c86:	440a      	add	r2, r1
 8016c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016c8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8016c90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8016c92:	2300      	movs	r3, #0
}
 8016c94:	4618      	mov	r0, r3
 8016c96:	3714      	adds	r7, #20
 8016c98:	46bd      	mov	sp, r7
 8016c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c9e:	4770      	bx	lr

08016ca0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016ca0:	b480      	push	{r7}
 8016ca2:	b085      	sub	sp, #20
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	6078      	str	r0, [r7, #4]
 8016ca8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016cae:	683b      	ldr	r3, [r7, #0]
 8016cb0:	781b      	ldrb	r3, [r3, #0]
 8016cb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8016cb4:	683b      	ldr	r3, [r7, #0]
 8016cb6:	785b      	ldrb	r3, [r3, #1]
 8016cb8:	2b01      	cmp	r3, #1
 8016cba:	d128      	bne.n	8016d0e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8016cbc:	68bb      	ldr	r3, [r7, #8]
 8016cbe:	015a      	lsls	r2, r3, #5
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	4413      	add	r3, r2
 8016cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	68ba      	ldr	r2, [r7, #8]
 8016ccc:	0151      	lsls	r1, r2, #5
 8016cce:	68fa      	ldr	r2, [r7, #12]
 8016cd0:	440a      	add	r2, r1
 8016cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016cd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8016cda:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8016cdc:	683b      	ldr	r3, [r7, #0]
 8016cde:	791b      	ldrb	r3, [r3, #4]
 8016ce0:	2b03      	cmp	r3, #3
 8016ce2:	d003      	beq.n	8016cec <USB_EPClearStall+0x4c>
 8016ce4:	683b      	ldr	r3, [r7, #0]
 8016ce6:	791b      	ldrb	r3, [r3, #4]
 8016ce8:	2b02      	cmp	r3, #2
 8016cea:	d138      	bne.n	8016d5e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8016cec:	68bb      	ldr	r3, [r7, #8]
 8016cee:	015a      	lsls	r2, r3, #5
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	4413      	add	r3, r2
 8016cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	68ba      	ldr	r2, [r7, #8]
 8016cfc:	0151      	lsls	r1, r2, #5
 8016cfe:	68fa      	ldr	r2, [r7, #12]
 8016d00:	440a      	add	r2, r1
 8016d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016d0a:	6013      	str	r3, [r2, #0]
 8016d0c:	e027      	b.n	8016d5e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8016d0e:	68bb      	ldr	r3, [r7, #8]
 8016d10:	015a      	lsls	r2, r3, #5
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	4413      	add	r3, r2
 8016d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016d1a:	681b      	ldr	r3, [r3, #0]
 8016d1c:	68ba      	ldr	r2, [r7, #8]
 8016d1e:	0151      	lsls	r1, r2, #5
 8016d20:	68fa      	ldr	r2, [r7, #12]
 8016d22:	440a      	add	r2, r1
 8016d24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016d28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8016d2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8016d2e:	683b      	ldr	r3, [r7, #0]
 8016d30:	791b      	ldrb	r3, [r3, #4]
 8016d32:	2b03      	cmp	r3, #3
 8016d34:	d003      	beq.n	8016d3e <USB_EPClearStall+0x9e>
 8016d36:	683b      	ldr	r3, [r7, #0]
 8016d38:	791b      	ldrb	r3, [r3, #4]
 8016d3a:	2b02      	cmp	r3, #2
 8016d3c:	d10f      	bne.n	8016d5e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8016d3e:	68bb      	ldr	r3, [r7, #8]
 8016d40:	015a      	lsls	r2, r3, #5
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	4413      	add	r3, r2
 8016d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	68ba      	ldr	r2, [r7, #8]
 8016d4e:	0151      	lsls	r1, r2, #5
 8016d50:	68fa      	ldr	r2, [r7, #12]
 8016d52:	440a      	add	r2, r1
 8016d54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016d5c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8016d5e:	2300      	movs	r3, #0
}
 8016d60:	4618      	mov	r0, r3
 8016d62:	3714      	adds	r7, #20
 8016d64:	46bd      	mov	sp, r7
 8016d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d6a:	4770      	bx	lr

08016d6c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8016d6c:	b480      	push	{r7}
 8016d6e:	b085      	sub	sp, #20
 8016d70:	af00      	add	r7, sp, #0
 8016d72:	6078      	str	r0, [r7, #4]
 8016d74:	460b      	mov	r3, r1
 8016d76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	68fa      	ldr	r2, [r7, #12]
 8016d86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016d8a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8016d8e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016d96:	681a      	ldr	r2, [r3, #0]
 8016d98:	78fb      	ldrb	r3, [r7, #3]
 8016d9a:	011b      	lsls	r3, r3, #4
 8016d9c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8016da0:	68f9      	ldr	r1, [r7, #12]
 8016da2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016da6:	4313      	orrs	r3, r2
 8016da8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8016daa:	2300      	movs	r3, #0
}
 8016dac:	4618      	mov	r0, r3
 8016dae:	3714      	adds	r7, #20
 8016db0:	46bd      	mov	sp, r7
 8016db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016db6:	4770      	bx	lr

08016db8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8016db8:	b480      	push	{r7}
 8016dba:	b085      	sub	sp, #20
 8016dbc:	af00      	add	r7, sp, #0
 8016dbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	68fa      	ldr	r2, [r7, #12]
 8016dce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016dd2:	f023 0303 	bic.w	r3, r3, #3
 8016dd6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016dde:	685b      	ldr	r3, [r3, #4]
 8016de0:	68fa      	ldr	r2, [r7, #12]
 8016de2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016de6:	f023 0302 	bic.w	r3, r3, #2
 8016dea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016dec:	2300      	movs	r3, #0
}
 8016dee:	4618      	mov	r0, r3
 8016df0:	3714      	adds	r7, #20
 8016df2:	46bd      	mov	sp, r7
 8016df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016df8:	4770      	bx	lr

08016dfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8016dfa:	b480      	push	{r7}
 8016dfc:	b085      	sub	sp, #20
 8016dfe:	af00      	add	r7, sp, #0
 8016e00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	68fa      	ldr	r2, [r7, #12]
 8016e10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016e14:	f023 0303 	bic.w	r3, r3, #3
 8016e18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8016e1a:	68fb      	ldr	r3, [r7, #12]
 8016e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016e20:	685b      	ldr	r3, [r3, #4]
 8016e22:	68fa      	ldr	r2, [r7, #12]
 8016e24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016e28:	f043 0302 	orr.w	r3, r3, #2
 8016e2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016e2e:	2300      	movs	r3, #0
}
 8016e30:	4618      	mov	r0, r3
 8016e32:	3714      	adds	r7, #20
 8016e34:	46bd      	mov	sp, r7
 8016e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e3a:	4770      	bx	lr

08016e3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8016e3c:	b480      	push	{r7}
 8016e3e:	b085      	sub	sp, #20
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	695b      	ldr	r3, [r3, #20]
 8016e48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	699b      	ldr	r3, [r3, #24]
 8016e4e:	68fa      	ldr	r2, [r7, #12]
 8016e50:	4013      	ands	r3, r2
 8016e52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8016e54:	68fb      	ldr	r3, [r7, #12]
}
 8016e56:	4618      	mov	r0, r3
 8016e58:	3714      	adds	r7, #20
 8016e5a:	46bd      	mov	sp, r7
 8016e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e60:	4770      	bx	lr

08016e62 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8016e62:	b480      	push	{r7}
 8016e64:	b085      	sub	sp, #20
 8016e66:	af00      	add	r7, sp, #0
 8016e68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016e74:	699b      	ldr	r3, [r3, #24]
 8016e76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016e7e:	69db      	ldr	r3, [r3, #28]
 8016e80:	68ba      	ldr	r2, [r7, #8]
 8016e82:	4013      	ands	r3, r2
 8016e84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8016e86:	68bb      	ldr	r3, [r7, #8]
 8016e88:	0c1b      	lsrs	r3, r3, #16
}
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	3714      	adds	r7, #20
 8016e8e:	46bd      	mov	sp, r7
 8016e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e94:	4770      	bx	lr

08016e96 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8016e96:	b480      	push	{r7}
 8016e98:	b085      	sub	sp, #20
 8016e9a:	af00      	add	r7, sp, #0
 8016e9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016ea8:	699b      	ldr	r3, [r3, #24]
 8016eaa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016eb2:	69db      	ldr	r3, [r3, #28]
 8016eb4:	68ba      	ldr	r2, [r7, #8]
 8016eb6:	4013      	ands	r3, r2
 8016eb8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8016eba:	68bb      	ldr	r3, [r7, #8]
 8016ebc:	b29b      	uxth	r3, r3
}
 8016ebe:	4618      	mov	r0, r3
 8016ec0:	3714      	adds	r7, #20
 8016ec2:	46bd      	mov	sp, r7
 8016ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ec8:	4770      	bx	lr

08016eca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8016eca:	b480      	push	{r7}
 8016ecc:	b085      	sub	sp, #20
 8016ece:	af00      	add	r7, sp, #0
 8016ed0:	6078      	str	r0, [r7, #4]
 8016ed2:	460b      	mov	r3, r1
 8016ed4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8016eda:	78fb      	ldrb	r3, [r7, #3]
 8016edc:	015a      	lsls	r2, r3, #5
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	4413      	add	r3, r2
 8016ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016ee6:	689b      	ldr	r3, [r3, #8]
 8016ee8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016ef0:	695b      	ldr	r3, [r3, #20]
 8016ef2:	68ba      	ldr	r2, [r7, #8]
 8016ef4:	4013      	ands	r3, r2
 8016ef6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8016ef8:	68bb      	ldr	r3, [r7, #8]
}
 8016efa:	4618      	mov	r0, r3
 8016efc:	3714      	adds	r7, #20
 8016efe:	46bd      	mov	sp, r7
 8016f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f04:	4770      	bx	lr

08016f06 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8016f06:	b480      	push	{r7}
 8016f08:	b087      	sub	sp, #28
 8016f0a:	af00      	add	r7, sp, #0
 8016f0c:	6078      	str	r0, [r7, #4]
 8016f0e:	460b      	mov	r3, r1
 8016f10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8016f16:	697b      	ldr	r3, [r7, #20]
 8016f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016f1c:	691b      	ldr	r3, [r3, #16]
 8016f1e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8016f20:	697b      	ldr	r3, [r7, #20]
 8016f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016f28:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8016f2a:	78fb      	ldrb	r3, [r7, #3]
 8016f2c:	f003 030f 	and.w	r3, r3, #15
 8016f30:	68fa      	ldr	r2, [r7, #12]
 8016f32:	fa22 f303 	lsr.w	r3, r2, r3
 8016f36:	01db      	lsls	r3, r3, #7
 8016f38:	b2db      	uxtb	r3, r3
 8016f3a:	693a      	ldr	r2, [r7, #16]
 8016f3c:	4313      	orrs	r3, r2
 8016f3e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8016f40:	78fb      	ldrb	r3, [r7, #3]
 8016f42:	015a      	lsls	r2, r3, #5
 8016f44:	697b      	ldr	r3, [r7, #20]
 8016f46:	4413      	add	r3, r2
 8016f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016f4c:	689b      	ldr	r3, [r3, #8]
 8016f4e:	693a      	ldr	r2, [r7, #16]
 8016f50:	4013      	ands	r3, r2
 8016f52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8016f54:	68bb      	ldr	r3, [r7, #8]
}
 8016f56:	4618      	mov	r0, r3
 8016f58:	371c      	adds	r7, #28
 8016f5a:	46bd      	mov	sp, r7
 8016f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f60:	4770      	bx	lr

08016f62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8016f62:	b480      	push	{r7}
 8016f64:	b083      	sub	sp, #12
 8016f66:	af00      	add	r7, sp, #0
 8016f68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	695b      	ldr	r3, [r3, #20]
 8016f6e:	f003 0301 	and.w	r3, r3, #1
}
 8016f72:	4618      	mov	r0, r3
 8016f74:	370c      	adds	r7, #12
 8016f76:	46bd      	mov	sp, r7
 8016f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f7c:	4770      	bx	lr

08016f7e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8016f7e:	b480      	push	{r7}
 8016f80:	b085      	sub	sp, #20
 8016f82:	af00      	add	r7, sp, #0
 8016f84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	68fa      	ldr	r2, [r7, #12]
 8016f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016f98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8016f9c:	f023 0307 	bic.w	r3, r3, #7
 8016fa0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8016fa2:	68fb      	ldr	r3, [r7, #12]
 8016fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016fa8:	685b      	ldr	r3, [r3, #4]
 8016faa:	68fa      	ldr	r2, [r7, #12]
 8016fac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016fb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016fb6:	2300      	movs	r3, #0
}
 8016fb8:	4618      	mov	r0, r3
 8016fba:	3714      	adds	r7, #20
 8016fbc:	46bd      	mov	sp, r7
 8016fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fc2:	4770      	bx	lr

08016fc4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8016fc4:	b480      	push	{r7}
 8016fc6:	b085      	sub	sp, #20
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	6078      	str	r0, [r7, #4]
 8016fcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	333c      	adds	r3, #60	; 0x3c
 8016fd6:	3304      	adds	r3, #4
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8016fdc:	68bb      	ldr	r3, [r7, #8]
 8016fde:	4a1c      	ldr	r2, [pc, #112]	; (8017050 <USB_EP0_OutStart+0x8c>)
 8016fe0:	4293      	cmp	r3, r2
 8016fe2:	d90a      	bls.n	8016ffa <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016ff0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016ff4:	d101      	bne.n	8016ffa <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8016ff6:	2300      	movs	r3, #0
 8016ff8:	e024      	b.n	8017044 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017000:	461a      	mov	r2, r3
 8017002:	2300      	movs	r3, #0
 8017004:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801700c:	691b      	ldr	r3, [r3, #16]
 801700e:	68fa      	ldr	r2, [r7, #12]
 8017010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017014:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8017018:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017020:	691b      	ldr	r3, [r3, #16]
 8017022:	68fa      	ldr	r2, [r7, #12]
 8017024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017028:	f043 0318 	orr.w	r3, r3, #24
 801702c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017034:	691b      	ldr	r3, [r3, #16]
 8017036:	68fa      	ldr	r2, [r7, #12]
 8017038:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801703c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8017040:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8017042:	2300      	movs	r3, #0
}
 8017044:	4618      	mov	r0, r3
 8017046:	3714      	adds	r7, #20
 8017048:	46bd      	mov	sp, r7
 801704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801704e:	4770      	bx	lr
 8017050:	4f54300a 	.word	0x4f54300a

08017054 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8017054:	b480      	push	{r7}
 8017056:	b085      	sub	sp, #20
 8017058:	af00      	add	r7, sp, #0
 801705a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801705c:	2300      	movs	r3, #0
 801705e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	3301      	adds	r3, #1
 8017064:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8017066:	68fb      	ldr	r3, [r7, #12]
 8017068:	4a13      	ldr	r2, [pc, #76]	; (80170b8 <USB_CoreReset+0x64>)
 801706a:	4293      	cmp	r3, r2
 801706c:	d901      	bls.n	8017072 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801706e:	2303      	movs	r3, #3
 8017070:	e01b      	b.n	80170aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	691b      	ldr	r3, [r3, #16]
 8017076:	2b00      	cmp	r3, #0
 8017078:	daf2      	bge.n	8017060 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801707a:	2300      	movs	r3, #0
 801707c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	691b      	ldr	r3, [r3, #16]
 8017082:	f043 0201 	orr.w	r2, r3, #1
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	3301      	adds	r3, #1
 801708e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	4a09      	ldr	r2, [pc, #36]	; (80170b8 <USB_CoreReset+0x64>)
 8017094:	4293      	cmp	r3, r2
 8017096:	d901      	bls.n	801709c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8017098:	2303      	movs	r3, #3
 801709a:	e006      	b.n	80170aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	691b      	ldr	r3, [r3, #16]
 80170a0:	f003 0301 	and.w	r3, r3, #1
 80170a4:	2b01      	cmp	r3, #1
 80170a6:	d0f0      	beq.n	801708a <USB_CoreReset+0x36>

  return HAL_OK;
 80170a8:	2300      	movs	r3, #0
}
 80170aa:	4618      	mov	r0, r3
 80170ac:	3714      	adds	r7, #20
 80170ae:	46bd      	mov	sp, r7
 80170b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170b4:	4770      	bx	lr
 80170b6:	bf00      	nop
 80170b8:	00030d40 	.word	0x00030d40

080170bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80170bc:	b580      	push	{r7, lr}
 80170be:	b084      	sub	sp, #16
 80170c0:	af00      	add	r7, sp, #0
 80170c2:	6078      	str	r0, [r7, #4]
 80170c4:	460b      	mov	r3, r1
 80170c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80170c8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80170cc:	f002 fa6c 	bl	80195a8 <USBD_static_malloc>
 80170d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d105      	bne.n	80170e4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	2200      	movs	r2, #0
 80170dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80170e0:	2302      	movs	r3, #2
 80170e2:	e066      	b.n	80171b2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	68fa      	ldr	r2, [r7, #12]
 80170e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	7c1b      	ldrb	r3, [r3, #16]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d119      	bne.n	8017128 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80170f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80170f8:	2202      	movs	r2, #2
 80170fa:	2181      	movs	r1, #129	; 0x81
 80170fc:	6878      	ldr	r0, [r7, #4]
 80170fe:	f002 f83f 	bl	8019180 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	2201      	movs	r2, #1
 8017106:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8017108:	f44f 7300 	mov.w	r3, #512	; 0x200
 801710c:	2202      	movs	r2, #2
 801710e:	2101      	movs	r1, #1
 8017110:	6878      	ldr	r0, [r7, #4]
 8017112:	f002 f835 	bl	8019180 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	2201      	movs	r2, #1
 801711a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	2210      	movs	r2, #16
 8017122:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8017126:	e016      	b.n	8017156 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8017128:	2340      	movs	r3, #64	; 0x40
 801712a:	2202      	movs	r2, #2
 801712c:	2181      	movs	r1, #129	; 0x81
 801712e:	6878      	ldr	r0, [r7, #4]
 8017130:	f002 f826 	bl	8019180 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	2201      	movs	r2, #1
 8017138:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801713a:	2340      	movs	r3, #64	; 0x40
 801713c:	2202      	movs	r2, #2
 801713e:	2101      	movs	r1, #1
 8017140:	6878      	ldr	r0, [r7, #4]
 8017142:	f002 f81d 	bl	8019180 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	2201      	movs	r2, #1
 801714a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	2210      	movs	r2, #16
 8017152:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8017156:	2308      	movs	r3, #8
 8017158:	2203      	movs	r2, #3
 801715a:	2182      	movs	r1, #130	; 0x82
 801715c:	6878      	ldr	r0, [r7, #4]
 801715e:	f002 f80f 	bl	8019180 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	2201      	movs	r2, #1
 8017166:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	2200      	movs	r2, #0
 8017178:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	2200      	movs	r2, #0
 8017180:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	7c1b      	ldrb	r3, [r3, #16]
 8017188:	2b00      	cmp	r3, #0
 801718a:	d109      	bne.n	80171a0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8017192:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017196:	2101      	movs	r1, #1
 8017198:	6878      	ldr	r0, [r7, #4]
 801719a:	f002 f96b 	bl	8019474 <USBD_LL_PrepareReceive>
 801719e:	e007      	b.n	80171b0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80171a6:	2340      	movs	r3, #64	; 0x40
 80171a8:	2101      	movs	r1, #1
 80171aa:	6878      	ldr	r0, [r7, #4]
 80171ac:	f002 f962 	bl	8019474 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80171b0:	2300      	movs	r3, #0
}
 80171b2:	4618      	mov	r0, r3
 80171b4:	3710      	adds	r7, #16
 80171b6:	46bd      	mov	sp, r7
 80171b8:	bd80      	pop	{r7, pc}

080171ba <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80171ba:	b580      	push	{r7, lr}
 80171bc:	b082      	sub	sp, #8
 80171be:	af00      	add	r7, sp, #0
 80171c0:	6078      	str	r0, [r7, #4]
 80171c2:	460b      	mov	r3, r1
 80171c4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80171c6:	2181      	movs	r1, #129	; 0x81
 80171c8:	6878      	ldr	r0, [r7, #4]
 80171ca:	f002 f817 	bl	80191fc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	2200      	movs	r2, #0
 80171d2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80171d4:	2101      	movs	r1, #1
 80171d6:	6878      	ldr	r0, [r7, #4]
 80171d8:	f002 f810 	bl	80191fc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	2200      	movs	r2, #0
 80171e0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80171e4:	2182      	movs	r1, #130	; 0x82
 80171e6:	6878      	ldr	r0, [r7, #4]
 80171e8:	f002 f808 	bl	80191fc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	2200      	movs	r2, #0
 80171f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	2200      	movs	r2, #0
 80171f8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017202:	2b00      	cmp	r3, #0
 8017204:	d00e      	beq.n	8017224 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801720c:	685b      	ldr	r3, [r3, #4]
 801720e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017216:	4618      	mov	r0, r3
 8017218:	f002 f9d4 	bl	80195c4 <USBD_static_free>
    pdev->pClassData = NULL;
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	2200      	movs	r2, #0
 8017220:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8017224:	2300      	movs	r3, #0
}
 8017226:	4618      	mov	r0, r3
 8017228:	3708      	adds	r7, #8
 801722a:	46bd      	mov	sp, r7
 801722c:	bd80      	pop	{r7, pc}
	...

08017230 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8017230:	b580      	push	{r7, lr}
 8017232:	b086      	sub	sp, #24
 8017234:	af00      	add	r7, sp, #0
 8017236:	6078      	str	r0, [r7, #4]
 8017238:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017240:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8017242:	2300      	movs	r3, #0
 8017244:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8017246:	2300      	movs	r3, #0
 8017248:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801724a:	2300      	movs	r3, #0
 801724c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801724e:	693b      	ldr	r3, [r7, #16]
 8017250:	2b00      	cmp	r3, #0
 8017252:	d101      	bne.n	8017258 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8017254:	2303      	movs	r3, #3
 8017256:	e0af      	b.n	80173b8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017258:	683b      	ldr	r3, [r7, #0]
 801725a:	781b      	ldrb	r3, [r3, #0]
 801725c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017260:	2b00      	cmp	r3, #0
 8017262:	d03f      	beq.n	80172e4 <USBD_CDC_Setup+0xb4>
 8017264:	2b20      	cmp	r3, #32
 8017266:	f040 809f 	bne.w	80173a8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801726a:	683b      	ldr	r3, [r7, #0]
 801726c:	88db      	ldrh	r3, [r3, #6]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d02e      	beq.n	80172d0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8017272:	683b      	ldr	r3, [r7, #0]
 8017274:	781b      	ldrb	r3, [r3, #0]
 8017276:	b25b      	sxtb	r3, r3
 8017278:	2b00      	cmp	r3, #0
 801727a:	da16      	bge.n	80172aa <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017282:	689b      	ldr	r3, [r3, #8]
 8017284:	683a      	ldr	r2, [r7, #0]
 8017286:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8017288:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801728a:	683a      	ldr	r2, [r7, #0]
 801728c:	88d2      	ldrh	r2, [r2, #6]
 801728e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8017290:	683b      	ldr	r3, [r7, #0]
 8017292:	88db      	ldrh	r3, [r3, #6]
 8017294:	2b07      	cmp	r3, #7
 8017296:	bf28      	it	cs
 8017298:	2307      	movcs	r3, #7
 801729a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801729c:	693b      	ldr	r3, [r7, #16]
 801729e:	89fa      	ldrh	r2, [r7, #14]
 80172a0:	4619      	mov	r1, r3
 80172a2:	6878      	ldr	r0, [r7, #4]
 80172a4:	f001 fb13 	bl	80188ce <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80172a8:	e085      	b.n	80173b6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80172aa:	683b      	ldr	r3, [r7, #0]
 80172ac:	785a      	ldrb	r2, [r3, #1]
 80172ae:	693b      	ldr	r3, [r7, #16]
 80172b0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80172b4:	683b      	ldr	r3, [r7, #0]
 80172b6:	88db      	ldrh	r3, [r3, #6]
 80172b8:	b2da      	uxtb	r2, r3
 80172ba:	693b      	ldr	r3, [r7, #16]
 80172bc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80172c0:	6939      	ldr	r1, [r7, #16]
 80172c2:	683b      	ldr	r3, [r7, #0]
 80172c4:	88db      	ldrh	r3, [r3, #6]
 80172c6:	461a      	mov	r2, r3
 80172c8:	6878      	ldr	r0, [r7, #4]
 80172ca:	f001 fb2c 	bl	8018926 <USBD_CtlPrepareRx>
      break;
 80172ce:	e072      	b.n	80173b6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80172d6:	689b      	ldr	r3, [r3, #8]
 80172d8:	683a      	ldr	r2, [r7, #0]
 80172da:	7850      	ldrb	r0, [r2, #1]
 80172dc:	2200      	movs	r2, #0
 80172de:	6839      	ldr	r1, [r7, #0]
 80172e0:	4798      	blx	r3
      break;
 80172e2:	e068      	b.n	80173b6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80172e4:	683b      	ldr	r3, [r7, #0]
 80172e6:	785b      	ldrb	r3, [r3, #1]
 80172e8:	2b0b      	cmp	r3, #11
 80172ea:	d852      	bhi.n	8017392 <USBD_CDC_Setup+0x162>
 80172ec:	a201      	add	r2, pc, #4	; (adr r2, 80172f4 <USBD_CDC_Setup+0xc4>)
 80172ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172f2:	bf00      	nop
 80172f4:	08017325 	.word	0x08017325
 80172f8:	080173a1 	.word	0x080173a1
 80172fc:	08017393 	.word	0x08017393
 8017300:	08017393 	.word	0x08017393
 8017304:	08017393 	.word	0x08017393
 8017308:	08017393 	.word	0x08017393
 801730c:	08017393 	.word	0x08017393
 8017310:	08017393 	.word	0x08017393
 8017314:	08017393 	.word	0x08017393
 8017318:	08017393 	.word	0x08017393
 801731c:	0801734f 	.word	0x0801734f
 8017320:	08017379 	.word	0x08017379
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801732a:	b2db      	uxtb	r3, r3
 801732c:	2b03      	cmp	r3, #3
 801732e:	d107      	bne.n	8017340 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8017330:	f107 030a 	add.w	r3, r7, #10
 8017334:	2202      	movs	r2, #2
 8017336:	4619      	mov	r1, r3
 8017338:	6878      	ldr	r0, [r7, #4]
 801733a:	f001 fac8 	bl	80188ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801733e:	e032      	b.n	80173a6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8017340:	6839      	ldr	r1, [r7, #0]
 8017342:	6878      	ldr	r0, [r7, #4]
 8017344:	f001 fa52 	bl	80187ec <USBD_CtlError>
            ret = USBD_FAIL;
 8017348:	2303      	movs	r3, #3
 801734a:	75fb      	strb	r3, [r7, #23]
          break;
 801734c:	e02b      	b.n	80173a6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017354:	b2db      	uxtb	r3, r3
 8017356:	2b03      	cmp	r3, #3
 8017358:	d107      	bne.n	801736a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801735a:	f107 030d 	add.w	r3, r7, #13
 801735e:	2201      	movs	r2, #1
 8017360:	4619      	mov	r1, r3
 8017362:	6878      	ldr	r0, [r7, #4]
 8017364:	f001 fab3 	bl	80188ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8017368:	e01d      	b.n	80173a6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801736a:	6839      	ldr	r1, [r7, #0]
 801736c:	6878      	ldr	r0, [r7, #4]
 801736e:	f001 fa3d 	bl	80187ec <USBD_CtlError>
            ret = USBD_FAIL;
 8017372:	2303      	movs	r3, #3
 8017374:	75fb      	strb	r3, [r7, #23]
          break;
 8017376:	e016      	b.n	80173a6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801737e:	b2db      	uxtb	r3, r3
 8017380:	2b03      	cmp	r3, #3
 8017382:	d00f      	beq.n	80173a4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8017384:	6839      	ldr	r1, [r7, #0]
 8017386:	6878      	ldr	r0, [r7, #4]
 8017388:	f001 fa30 	bl	80187ec <USBD_CtlError>
            ret = USBD_FAIL;
 801738c:	2303      	movs	r3, #3
 801738e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8017390:	e008      	b.n	80173a4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8017392:	6839      	ldr	r1, [r7, #0]
 8017394:	6878      	ldr	r0, [r7, #4]
 8017396:	f001 fa29 	bl	80187ec <USBD_CtlError>
          ret = USBD_FAIL;
 801739a:	2303      	movs	r3, #3
 801739c:	75fb      	strb	r3, [r7, #23]
          break;
 801739e:	e002      	b.n	80173a6 <USBD_CDC_Setup+0x176>
          break;
 80173a0:	bf00      	nop
 80173a2:	e008      	b.n	80173b6 <USBD_CDC_Setup+0x186>
          break;
 80173a4:	bf00      	nop
      }
      break;
 80173a6:	e006      	b.n	80173b6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80173a8:	6839      	ldr	r1, [r7, #0]
 80173aa:	6878      	ldr	r0, [r7, #4]
 80173ac:	f001 fa1e 	bl	80187ec <USBD_CtlError>
      ret = USBD_FAIL;
 80173b0:	2303      	movs	r3, #3
 80173b2:	75fb      	strb	r3, [r7, #23]
      break;
 80173b4:	bf00      	nop
  }

  return (uint8_t)ret;
 80173b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80173b8:	4618      	mov	r0, r3
 80173ba:	3718      	adds	r7, #24
 80173bc:	46bd      	mov	sp, r7
 80173be:	bd80      	pop	{r7, pc}

080173c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80173c0:	b580      	push	{r7, lr}
 80173c2:	b084      	sub	sp, #16
 80173c4:	af00      	add	r7, sp, #0
 80173c6:	6078      	str	r0, [r7, #4]
 80173c8:	460b      	mov	r3, r1
 80173ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80173d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d101      	bne.n	80173e2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80173de:	2303      	movs	r3, #3
 80173e0:	e04f      	b.n	8017482 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80173e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80173ea:	78fa      	ldrb	r2, [r7, #3]
 80173ec:	6879      	ldr	r1, [r7, #4]
 80173ee:	4613      	mov	r3, r2
 80173f0:	009b      	lsls	r3, r3, #2
 80173f2:	4413      	add	r3, r2
 80173f4:	009b      	lsls	r3, r3, #2
 80173f6:	440b      	add	r3, r1
 80173f8:	3318      	adds	r3, #24
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d029      	beq.n	8017454 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8017400:	78fa      	ldrb	r2, [r7, #3]
 8017402:	6879      	ldr	r1, [r7, #4]
 8017404:	4613      	mov	r3, r2
 8017406:	009b      	lsls	r3, r3, #2
 8017408:	4413      	add	r3, r2
 801740a:	009b      	lsls	r3, r3, #2
 801740c:	440b      	add	r3, r1
 801740e:	3318      	adds	r3, #24
 8017410:	681a      	ldr	r2, [r3, #0]
 8017412:	78f9      	ldrb	r1, [r7, #3]
 8017414:	68f8      	ldr	r0, [r7, #12]
 8017416:	460b      	mov	r3, r1
 8017418:	00db      	lsls	r3, r3, #3
 801741a:	440b      	add	r3, r1
 801741c:	009b      	lsls	r3, r3, #2
 801741e:	4403      	add	r3, r0
 8017420:	3348      	adds	r3, #72	; 0x48
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	fbb2 f1f3 	udiv	r1, r2, r3
 8017428:	fb01 f303 	mul.w	r3, r1, r3
 801742c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801742e:	2b00      	cmp	r3, #0
 8017430:	d110      	bne.n	8017454 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8017432:	78fa      	ldrb	r2, [r7, #3]
 8017434:	6879      	ldr	r1, [r7, #4]
 8017436:	4613      	mov	r3, r2
 8017438:	009b      	lsls	r3, r3, #2
 801743a:	4413      	add	r3, r2
 801743c:	009b      	lsls	r3, r3, #2
 801743e:	440b      	add	r3, r1
 8017440:	3318      	adds	r3, #24
 8017442:	2200      	movs	r2, #0
 8017444:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8017446:	78f9      	ldrb	r1, [r7, #3]
 8017448:	2300      	movs	r3, #0
 801744a:	2200      	movs	r2, #0
 801744c:	6878      	ldr	r0, [r7, #4]
 801744e:	f001 ffd9 	bl	8019404 <USBD_LL_Transmit>
 8017452:	e015      	b.n	8017480 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8017454:	68bb      	ldr	r3, [r7, #8]
 8017456:	2200      	movs	r2, #0
 8017458:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017462:	691b      	ldr	r3, [r3, #16]
 8017464:	2b00      	cmp	r3, #0
 8017466:	d00b      	beq.n	8017480 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801746e:	691b      	ldr	r3, [r3, #16]
 8017470:	68ba      	ldr	r2, [r7, #8]
 8017472:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8017476:	68ba      	ldr	r2, [r7, #8]
 8017478:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801747c:	78fa      	ldrb	r2, [r7, #3]
 801747e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8017480:	2300      	movs	r3, #0
}
 8017482:	4618      	mov	r0, r3
 8017484:	3710      	adds	r7, #16
 8017486:	46bd      	mov	sp, r7
 8017488:	bd80      	pop	{r7, pc}

0801748a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801748a:	b580      	push	{r7, lr}
 801748c:	b084      	sub	sp, #16
 801748e:	af00      	add	r7, sp, #0
 8017490:	6078      	str	r0, [r7, #4]
 8017492:	460b      	mov	r3, r1
 8017494:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801749c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d101      	bne.n	80174ac <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80174a8:	2303      	movs	r3, #3
 80174aa:	e015      	b.n	80174d8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80174ac:	78fb      	ldrb	r3, [r7, #3]
 80174ae:	4619      	mov	r1, r3
 80174b0:	6878      	ldr	r0, [r7, #4]
 80174b2:	f002 f817 	bl	80194e4 <USBD_LL_GetRxDataSize>
 80174b6:	4602      	mov	r2, r0
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80174c4:	68db      	ldr	r3, [r3, #12]
 80174c6:	68fa      	ldr	r2, [r7, #12]
 80174c8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80174cc:	68fa      	ldr	r2, [r7, #12]
 80174ce:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80174d2:	4611      	mov	r1, r2
 80174d4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80174d6:	2300      	movs	r3, #0
}
 80174d8:	4618      	mov	r0, r3
 80174da:	3710      	adds	r7, #16
 80174dc:	46bd      	mov	sp, r7
 80174de:	bd80      	pop	{r7, pc}

080174e0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80174e0:	b580      	push	{r7, lr}
 80174e2:	b084      	sub	sp, #16
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80174ee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d101      	bne.n	80174fa <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80174f6:	2303      	movs	r3, #3
 80174f8:	e01b      	b.n	8017532 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017500:	2b00      	cmp	r3, #0
 8017502:	d015      	beq.n	8017530 <USBD_CDC_EP0_RxReady+0x50>
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801750a:	2bff      	cmp	r3, #255	; 0xff
 801750c:	d010      	beq.n	8017530 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017514:	689b      	ldr	r3, [r3, #8]
 8017516:	68fa      	ldr	r2, [r7, #12]
 8017518:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 801751c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801751e:	68fa      	ldr	r2, [r7, #12]
 8017520:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8017524:	b292      	uxth	r2, r2
 8017526:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	22ff      	movs	r2, #255	; 0xff
 801752c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8017530:	2300      	movs	r3, #0
}
 8017532:	4618      	mov	r0, r3
 8017534:	3710      	adds	r7, #16
 8017536:	46bd      	mov	sp, r7
 8017538:	bd80      	pop	{r7, pc}
	...

0801753c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801753c:	b480      	push	{r7}
 801753e:	b083      	sub	sp, #12
 8017540:	af00      	add	r7, sp, #0
 8017542:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	2243      	movs	r2, #67	; 0x43
 8017548:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801754a:	4b03      	ldr	r3, [pc, #12]	; (8017558 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801754c:	4618      	mov	r0, r3
 801754e:	370c      	adds	r7, #12
 8017550:	46bd      	mov	sp, r7
 8017552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017556:	4770      	bx	lr
 8017558:	200005e0 	.word	0x200005e0

0801755c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801755c:	b480      	push	{r7}
 801755e:	b083      	sub	sp, #12
 8017560:	af00      	add	r7, sp, #0
 8017562:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	2243      	movs	r2, #67	; 0x43
 8017568:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801756a:	4b03      	ldr	r3, [pc, #12]	; (8017578 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801756c:	4618      	mov	r0, r3
 801756e:	370c      	adds	r7, #12
 8017570:	46bd      	mov	sp, r7
 8017572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017576:	4770      	bx	lr
 8017578:	2000059c 	.word	0x2000059c

0801757c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801757c:	b480      	push	{r7}
 801757e:	b083      	sub	sp, #12
 8017580:	af00      	add	r7, sp, #0
 8017582:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	2243      	movs	r2, #67	; 0x43
 8017588:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801758a:	4b03      	ldr	r3, [pc, #12]	; (8017598 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801758c:	4618      	mov	r0, r3
 801758e:	370c      	adds	r7, #12
 8017590:	46bd      	mov	sp, r7
 8017592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017596:	4770      	bx	lr
 8017598:	20000624 	.word	0x20000624

0801759c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801759c:	b480      	push	{r7}
 801759e:	b083      	sub	sp, #12
 80175a0:	af00      	add	r7, sp, #0
 80175a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	220a      	movs	r2, #10
 80175a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80175aa:	4b03      	ldr	r3, [pc, #12]	; (80175b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80175ac:	4618      	mov	r0, r3
 80175ae:	370c      	adds	r7, #12
 80175b0:	46bd      	mov	sp, r7
 80175b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175b6:	4770      	bx	lr
 80175b8:	20000558 	.word	0x20000558

080175bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80175bc:	b480      	push	{r7}
 80175be:	b083      	sub	sp, #12
 80175c0:	af00      	add	r7, sp, #0
 80175c2:	6078      	str	r0, [r7, #4]
 80175c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80175c6:	683b      	ldr	r3, [r7, #0]
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d101      	bne.n	80175d0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80175cc:	2303      	movs	r3, #3
 80175ce:	e004      	b.n	80175da <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	683a      	ldr	r2, [r7, #0]
 80175d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80175d8:	2300      	movs	r3, #0
}
 80175da:	4618      	mov	r0, r3
 80175dc:	370c      	adds	r7, #12
 80175de:	46bd      	mov	sp, r7
 80175e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175e4:	4770      	bx	lr

080175e6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80175e6:	b480      	push	{r7}
 80175e8:	b087      	sub	sp, #28
 80175ea:	af00      	add	r7, sp, #0
 80175ec:	60f8      	str	r0, [r7, #12]
 80175ee:	60b9      	str	r1, [r7, #8]
 80175f0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80175f2:	68fb      	ldr	r3, [r7, #12]
 80175f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80175f8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80175fa:	697b      	ldr	r3, [r7, #20]
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d101      	bne.n	8017604 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8017600:	2303      	movs	r3, #3
 8017602:	e008      	b.n	8017616 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8017604:	697b      	ldr	r3, [r7, #20]
 8017606:	68ba      	ldr	r2, [r7, #8]
 8017608:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801760c:	697b      	ldr	r3, [r7, #20]
 801760e:	687a      	ldr	r2, [r7, #4]
 8017610:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8017614:	2300      	movs	r3, #0
}
 8017616:	4618      	mov	r0, r3
 8017618:	371c      	adds	r7, #28
 801761a:	46bd      	mov	sp, r7
 801761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017620:	4770      	bx	lr

08017622 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8017622:	b480      	push	{r7}
 8017624:	b085      	sub	sp, #20
 8017626:	af00      	add	r7, sp, #0
 8017628:	6078      	str	r0, [r7, #4]
 801762a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017632:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	2b00      	cmp	r3, #0
 8017638:	d101      	bne.n	801763e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801763a:	2303      	movs	r3, #3
 801763c:	e004      	b.n	8017648 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	683a      	ldr	r2, [r7, #0]
 8017642:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8017646:	2300      	movs	r3, #0
}
 8017648:	4618      	mov	r0, r3
 801764a:	3714      	adds	r7, #20
 801764c:	46bd      	mov	sp, r7
 801764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017652:	4770      	bx	lr

08017654 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8017654:	b580      	push	{r7, lr}
 8017656:	b084      	sub	sp, #16
 8017658:	af00      	add	r7, sp, #0
 801765a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017662:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801766a:	2b00      	cmp	r3, #0
 801766c:	d101      	bne.n	8017672 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801766e:	2303      	movs	r3, #3
 8017670:	e016      	b.n	80176a0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	7c1b      	ldrb	r3, [r3, #16]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d109      	bne.n	801768e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8017680:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017684:	2101      	movs	r1, #1
 8017686:	6878      	ldr	r0, [r7, #4]
 8017688:	f001 fef4 	bl	8019474 <USBD_LL_PrepareReceive>
 801768c:	e007      	b.n	801769e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8017694:	2340      	movs	r3, #64	; 0x40
 8017696:	2101      	movs	r1, #1
 8017698:	6878      	ldr	r0, [r7, #4]
 801769a:	f001 feeb 	bl	8019474 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801769e:	2300      	movs	r3, #0
}
 80176a0:	4618      	mov	r0, r3
 80176a2:	3710      	adds	r7, #16
 80176a4:	46bd      	mov	sp, r7
 80176a6:	bd80      	pop	{r7, pc}

080176a8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80176a8:	b580      	push	{r7, lr}
 80176aa:	b086      	sub	sp, #24
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	60f8      	str	r0, [r7, #12]
 80176b0:	60b9      	str	r1, [r7, #8]
 80176b2:	4613      	mov	r3, r2
 80176b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d101      	bne.n	80176c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80176bc:	2303      	movs	r3, #3
 80176be:	e01f      	b.n	8017700 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	2200      	movs	r2, #0
 80176c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	2200      	movs	r2, #0
 80176cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80176d0:	68fb      	ldr	r3, [r7, #12]
 80176d2:	2200      	movs	r2, #0
 80176d4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80176d8:	68bb      	ldr	r3, [r7, #8]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d003      	beq.n	80176e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	68ba      	ldr	r2, [r7, #8]
 80176e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	2201      	movs	r2, #1
 80176ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	79fa      	ldrb	r2, [r7, #7]
 80176f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80176f4:	68f8      	ldr	r0, [r7, #12]
 80176f6:	f001 fcc5 	bl	8019084 <USBD_LL_Init>
 80176fa:	4603      	mov	r3, r0
 80176fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80176fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8017700:	4618      	mov	r0, r3
 8017702:	3718      	adds	r7, #24
 8017704:	46bd      	mov	sp, r7
 8017706:	bd80      	pop	{r7, pc}

08017708 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8017708:	b580      	push	{r7, lr}
 801770a:	b084      	sub	sp, #16
 801770c:	af00      	add	r7, sp, #0
 801770e:	6078      	str	r0, [r7, #4]
 8017710:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017712:	2300      	movs	r3, #0
 8017714:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8017716:	683b      	ldr	r3, [r7, #0]
 8017718:	2b00      	cmp	r3, #0
 801771a:	d101      	bne.n	8017720 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801771c:	2303      	movs	r3, #3
 801771e:	e016      	b.n	801774e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	683a      	ldr	r2, [r7, #0]
 8017724:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801772e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017730:	2b00      	cmp	r3, #0
 8017732:	d00b      	beq.n	801774c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801773a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801773c:	f107 020e 	add.w	r2, r7, #14
 8017740:	4610      	mov	r0, r2
 8017742:	4798      	blx	r3
 8017744:	4602      	mov	r2, r0
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 801774c:	2300      	movs	r3, #0
}
 801774e:	4618      	mov	r0, r3
 8017750:	3710      	adds	r7, #16
 8017752:	46bd      	mov	sp, r7
 8017754:	bd80      	pop	{r7, pc}

08017756 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8017756:	b580      	push	{r7, lr}
 8017758:	b082      	sub	sp, #8
 801775a:	af00      	add	r7, sp, #0
 801775c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801775e:	6878      	ldr	r0, [r7, #4]
 8017760:	f001 fcdc 	bl	801911c <USBD_LL_Start>
 8017764:	4603      	mov	r3, r0
}
 8017766:	4618      	mov	r0, r3
 8017768:	3708      	adds	r7, #8
 801776a:	46bd      	mov	sp, r7
 801776c:	bd80      	pop	{r7, pc}

0801776e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801776e:	b480      	push	{r7}
 8017770:	b083      	sub	sp, #12
 8017772:	af00      	add	r7, sp, #0
 8017774:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017776:	2300      	movs	r3, #0
}
 8017778:	4618      	mov	r0, r3
 801777a:	370c      	adds	r7, #12
 801777c:	46bd      	mov	sp, r7
 801777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017782:	4770      	bx	lr

08017784 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017784:	b580      	push	{r7, lr}
 8017786:	b084      	sub	sp, #16
 8017788:	af00      	add	r7, sp, #0
 801778a:	6078      	str	r0, [r7, #4]
 801778c:	460b      	mov	r3, r1
 801778e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8017790:	2303      	movs	r3, #3
 8017792:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801779a:	2b00      	cmp	r3, #0
 801779c:	d009      	beq.n	80177b2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	78fa      	ldrb	r2, [r7, #3]
 80177a8:	4611      	mov	r1, r2
 80177aa:	6878      	ldr	r0, [r7, #4]
 80177ac:	4798      	blx	r3
 80177ae:	4603      	mov	r3, r0
 80177b0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80177b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80177b4:	4618      	mov	r0, r3
 80177b6:	3710      	adds	r7, #16
 80177b8:	46bd      	mov	sp, r7
 80177ba:	bd80      	pop	{r7, pc}

080177bc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80177bc:	b580      	push	{r7, lr}
 80177be:	b082      	sub	sp, #8
 80177c0:	af00      	add	r7, sp, #0
 80177c2:	6078      	str	r0, [r7, #4]
 80177c4:	460b      	mov	r3, r1
 80177c6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d007      	beq.n	80177e2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80177d8:	685b      	ldr	r3, [r3, #4]
 80177da:	78fa      	ldrb	r2, [r7, #3]
 80177dc:	4611      	mov	r1, r2
 80177de:	6878      	ldr	r0, [r7, #4]
 80177e0:	4798      	blx	r3
  }

  return USBD_OK;
 80177e2:	2300      	movs	r3, #0
}
 80177e4:	4618      	mov	r0, r3
 80177e6:	3708      	adds	r7, #8
 80177e8:	46bd      	mov	sp, r7
 80177ea:	bd80      	pop	{r7, pc}

080177ec <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80177ec:	b580      	push	{r7, lr}
 80177ee:	b084      	sub	sp, #16
 80177f0:	af00      	add	r7, sp, #0
 80177f2:	6078      	str	r0, [r7, #4]
 80177f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80177fc:	6839      	ldr	r1, [r7, #0]
 80177fe:	4618      	mov	r0, r3
 8017800:	f000 ffba 	bl	8018778 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	2201      	movs	r2, #1
 8017808:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8017812:	461a      	mov	r2, r3
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8017820:	f003 031f 	and.w	r3, r3, #31
 8017824:	2b02      	cmp	r3, #2
 8017826:	d01a      	beq.n	801785e <USBD_LL_SetupStage+0x72>
 8017828:	2b02      	cmp	r3, #2
 801782a:	d822      	bhi.n	8017872 <USBD_LL_SetupStage+0x86>
 801782c:	2b00      	cmp	r3, #0
 801782e:	d002      	beq.n	8017836 <USBD_LL_SetupStage+0x4a>
 8017830:	2b01      	cmp	r3, #1
 8017832:	d00a      	beq.n	801784a <USBD_LL_SetupStage+0x5e>
 8017834:	e01d      	b.n	8017872 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801783c:	4619      	mov	r1, r3
 801783e:	6878      	ldr	r0, [r7, #4]
 8017840:	f000 fa62 	bl	8017d08 <USBD_StdDevReq>
 8017844:	4603      	mov	r3, r0
 8017846:	73fb      	strb	r3, [r7, #15]
      break;
 8017848:	e020      	b.n	801788c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8017850:	4619      	mov	r1, r3
 8017852:	6878      	ldr	r0, [r7, #4]
 8017854:	f000 fac6 	bl	8017de4 <USBD_StdItfReq>
 8017858:	4603      	mov	r3, r0
 801785a:	73fb      	strb	r3, [r7, #15]
      break;
 801785c:	e016      	b.n	801788c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8017864:	4619      	mov	r1, r3
 8017866:	6878      	ldr	r0, [r7, #4]
 8017868:	f000 fb05 	bl	8017e76 <USBD_StdEPReq>
 801786c:	4603      	mov	r3, r0
 801786e:	73fb      	strb	r3, [r7, #15]
      break;
 8017870:	e00c      	b.n	801788c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8017878:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801787c:	b2db      	uxtb	r3, r3
 801787e:	4619      	mov	r1, r3
 8017880:	6878      	ldr	r0, [r7, #4]
 8017882:	f001 fcf1 	bl	8019268 <USBD_LL_StallEP>
 8017886:	4603      	mov	r3, r0
 8017888:	73fb      	strb	r3, [r7, #15]
      break;
 801788a:	bf00      	nop
  }

  return ret;
 801788c:	7bfb      	ldrb	r3, [r7, #15]
}
 801788e:	4618      	mov	r0, r3
 8017890:	3710      	adds	r7, #16
 8017892:	46bd      	mov	sp, r7
 8017894:	bd80      	pop	{r7, pc}

08017896 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8017896:	b580      	push	{r7, lr}
 8017898:	b086      	sub	sp, #24
 801789a:	af00      	add	r7, sp, #0
 801789c:	60f8      	str	r0, [r7, #12]
 801789e:	460b      	mov	r3, r1
 80178a0:	607a      	str	r2, [r7, #4]
 80178a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80178a4:	7afb      	ldrb	r3, [r7, #11]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d138      	bne.n	801791c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80178b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80178b2:	68fb      	ldr	r3, [r7, #12]
 80178b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80178b8:	2b03      	cmp	r3, #3
 80178ba:	d14a      	bne.n	8017952 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80178bc:	693b      	ldr	r3, [r7, #16]
 80178be:	689a      	ldr	r2, [r3, #8]
 80178c0:	693b      	ldr	r3, [r7, #16]
 80178c2:	68db      	ldr	r3, [r3, #12]
 80178c4:	429a      	cmp	r2, r3
 80178c6:	d913      	bls.n	80178f0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80178c8:	693b      	ldr	r3, [r7, #16]
 80178ca:	689a      	ldr	r2, [r3, #8]
 80178cc:	693b      	ldr	r3, [r7, #16]
 80178ce:	68db      	ldr	r3, [r3, #12]
 80178d0:	1ad2      	subs	r2, r2, r3
 80178d2:	693b      	ldr	r3, [r7, #16]
 80178d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80178d6:	693b      	ldr	r3, [r7, #16]
 80178d8:	68da      	ldr	r2, [r3, #12]
 80178da:	693b      	ldr	r3, [r7, #16]
 80178dc:	689b      	ldr	r3, [r3, #8]
 80178de:	4293      	cmp	r3, r2
 80178e0:	bf28      	it	cs
 80178e2:	4613      	movcs	r3, r2
 80178e4:	461a      	mov	r2, r3
 80178e6:	6879      	ldr	r1, [r7, #4]
 80178e8:	68f8      	ldr	r0, [r7, #12]
 80178ea:	f001 f839 	bl	8018960 <USBD_CtlContinueRx>
 80178ee:	e030      	b.n	8017952 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80178f0:	68fb      	ldr	r3, [r7, #12]
 80178f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80178f6:	b2db      	uxtb	r3, r3
 80178f8:	2b03      	cmp	r3, #3
 80178fa:	d10b      	bne.n	8017914 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017902:	691b      	ldr	r3, [r3, #16]
 8017904:	2b00      	cmp	r3, #0
 8017906:	d005      	beq.n	8017914 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801790e:	691b      	ldr	r3, [r3, #16]
 8017910:	68f8      	ldr	r0, [r7, #12]
 8017912:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8017914:	68f8      	ldr	r0, [r7, #12]
 8017916:	f001 f834 	bl	8018982 <USBD_CtlSendStatus>
 801791a:	e01a      	b.n	8017952 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017922:	b2db      	uxtb	r3, r3
 8017924:	2b03      	cmp	r3, #3
 8017926:	d114      	bne.n	8017952 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801792e:	699b      	ldr	r3, [r3, #24]
 8017930:	2b00      	cmp	r3, #0
 8017932:	d00e      	beq.n	8017952 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801793a:	699b      	ldr	r3, [r3, #24]
 801793c:	7afa      	ldrb	r2, [r7, #11]
 801793e:	4611      	mov	r1, r2
 8017940:	68f8      	ldr	r0, [r7, #12]
 8017942:	4798      	blx	r3
 8017944:	4603      	mov	r3, r0
 8017946:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8017948:	7dfb      	ldrb	r3, [r7, #23]
 801794a:	2b00      	cmp	r3, #0
 801794c:	d001      	beq.n	8017952 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801794e:	7dfb      	ldrb	r3, [r7, #23]
 8017950:	e000      	b.n	8017954 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8017952:	2300      	movs	r3, #0
}
 8017954:	4618      	mov	r0, r3
 8017956:	3718      	adds	r7, #24
 8017958:	46bd      	mov	sp, r7
 801795a:	bd80      	pop	{r7, pc}

0801795c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801795c:	b580      	push	{r7, lr}
 801795e:	b086      	sub	sp, #24
 8017960:	af00      	add	r7, sp, #0
 8017962:	60f8      	str	r0, [r7, #12]
 8017964:	460b      	mov	r3, r1
 8017966:	607a      	str	r2, [r7, #4]
 8017968:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801796a:	7afb      	ldrb	r3, [r7, #11]
 801796c:	2b00      	cmp	r3, #0
 801796e:	d16b      	bne.n	8017a48 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8017970:	68fb      	ldr	r3, [r7, #12]
 8017972:	3314      	adds	r3, #20
 8017974:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801797c:	2b02      	cmp	r3, #2
 801797e:	d156      	bne.n	8017a2e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8017980:	693b      	ldr	r3, [r7, #16]
 8017982:	689a      	ldr	r2, [r3, #8]
 8017984:	693b      	ldr	r3, [r7, #16]
 8017986:	68db      	ldr	r3, [r3, #12]
 8017988:	429a      	cmp	r2, r3
 801798a:	d914      	bls.n	80179b6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801798c:	693b      	ldr	r3, [r7, #16]
 801798e:	689a      	ldr	r2, [r3, #8]
 8017990:	693b      	ldr	r3, [r7, #16]
 8017992:	68db      	ldr	r3, [r3, #12]
 8017994:	1ad2      	subs	r2, r2, r3
 8017996:	693b      	ldr	r3, [r7, #16]
 8017998:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801799a:	693b      	ldr	r3, [r7, #16]
 801799c:	689b      	ldr	r3, [r3, #8]
 801799e:	461a      	mov	r2, r3
 80179a0:	6879      	ldr	r1, [r7, #4]
 80179a2:	68f8      	ldr	r0, [r7, #12]
 80179a4:	f000 ffae 	bl	8018904 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80179a8:	2300      	movs	r3, #0
 80179aa:	2200      	movs	r2, #0
 80179ac:	2100      	movs	r1, #0
 80179ae:	68f8      	ldr	r0, [r7, #12]
 80179b0:	f001 fd60 	bl	8019474 <USBD_LL_PrepareReceive>
 80179b4:	e03b      	b.n	8017a2e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80179b6:	693b      	ldr	r3, [r7, #16]
 80179b8:	68da      	ldr	r2, [r3, #12]
 80179ba:	693b      	ldr	r3, [r7, #16]
 80179bc:	689b      	ldr	r3, [r3, #8]
 80179be:	429a      	cmp	r2, r3
 80179c0:	d11c      	bne.n	80179fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80179c2:	693b      	ldr	r3, [r7, #16]
 80179c4:	685a      	ldr	r2, [r3, #4]
 80179c6:	693b      	ldr	r3, [r7, #16]
 80179c8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80179ca:	429a      	cmp	r2, r3
 80179cc:	d316      	bcc.n	80179fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80179ce:	693b      	ldr	r3, [r7, #16]
 80179d0:	685a      	ldr	r2, [r3, #4]
 80179d2:	68fb      	ldr	r3, [r7, #12]
 80179d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80179d8:	429a      	cmp	r2, r3
 80179da:	d20f      	bcs.n	80179fc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80179dc:	2200      	movs	r2, #0
 80179de:	2100      	movs	r1, #0
 80179e0:	68f8      	ldr	r0, [r7, #12]
 80179e2:	f000 ff8f 	bl	8018904 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	2200      	movs	r2, #0
 80179ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80179ee:	2300      	movs	r3, #0
 80179f0:	2200      	movs	r2, #0
 80179f2:	2100      	movs	r1, #0
 80179f4:	68f8      	ldr	r0, [r7, #12]
 80179f6:	f001 fd3d 	bl	8019474 <USBD_LL_PrepareReceive>
 80179fa:	e018      	b.n	8017a2e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80179fc:	68fb      	ldr	r3, [r7, #12]
 80179fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017a02:	b2db      	uxtb	r3, r3
 8017a04:	2b03      	cmp	r3, #3
 8017a06:	d10b      	bne.n	8017a20 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017a0e:	68db      	ldr	r3, [r3, #12]
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d005      	beq.n	8017a20 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8017a14:	68fb      	ldr	r3, [r7, #12]
 8017a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017a1a:	68db      	ldr	r3, [r3, #12]
 8017a1c:	68f8      	ldr	r0, [r7, #12]
 8017a1e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8017a20:	2180      	movs	r1, #128	; 0x80
 8017a22:	68f8      	ldr	r0, [r7, #12]
 8017a24:	f001 fc20 	bl	8019268 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8017a28:	68f8      	ldr	r0, [r7, #12]
 8017a2a:	f000 ffbd 	bl	80189a8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8017a2e:	68fb      	ldr	r3, [r7, #12]
 8017a30:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8017a34:	2b01      	cmp	r3, #1
 8017a36:	d122      	bne.n	8017a7e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8017a38:	68f8      	ldr	r0, [r7, #12]
 8017a3a:	f7ff fe98 	bl	801776e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8017a3e:	68fb      	ldr	r3, [r7, #12]
 8017a40:	2200      	movs	r2, #0
 8017a42:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8017a46:	e01a      	b.n	8017a7e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017a48:	68fb      	ldr	r3, [r7, #12]
 8017a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017a4e:	b2db      	uxtb	r3, r3
 8017a50:	2b03      	cmp	r3, #3
 8017a52:	d114      	bne.n	8017a7e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017a5a:	695b      	ldr	r3, [r3, #20]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d00e      	beq.n	8017a7e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017a66:	695b      	ldr	r3, [r3, #20]
 8017a68:	7afa      	ldrb	r2, [r7, #11]
 8017a6a:	4611      	mov	r1, r2
 8017a6c:	68f8      	ldr	r0, [r7, #12]
 8017a6e:	4798      	blx	r3
 8017a70:	4603      	mov	r3, r0
 8017a72:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8017a74:	7dfb      	ldrb	r3, [r7, #23]
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d001      	beq.n	8017a7e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8017a7a:	7dfb      	ldrb	r3, [r7, #23]
 8017a7c:	e000      	b.n	8017a80 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8017a7e:	2300      	movs	r3, #0
}
 8017a80:	4618      	mov	r0, r3
 8017a82:	3718      	adds	r7, #24
 8017a84:	46bd      	mov	sp, r7
 8017a86:	bd80      	pop	{r7, pc}

08017a88 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8017a88:	b580      	push	{r7, lr}
 8017a8a:	b082      	sub	sp, #8
 8017a8c:	af00      	add	r7, sp, #0
 8017a8e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	2201      	movs	r2, #1
 8017a94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	2200      	movs	r2, #0
 8017a9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	2200      	movs	r2, #0
 8017aa4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	2200      	movs	r2, #0
 8017aaa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d101      	bne.n	8017abc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8017ab8:	2303      	movs	r3, #3
 8017aba:	e02f      	b.n	8017b1c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d00f      	beq.n	8017ae6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017acc:	685b      	ldr	r3, [r3, #4]
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d009      	beq.n	8017ae6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017ad8:	685b      	ldr	r3, [r3, #4]
 8017ada:	687a      	ldr	r2, [r7, #4]
 8017adc:	6852      	ldr	r2, [r2, #4]
 8017ade:	b2d2      	uxtb	r2, r2
 8017ae0:	4611      	mov	r1, r2
 8017ae2:	6878      	ldr	r0, [r7, #4]
 8017ae4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017ae6:	2340      	movs	r3, #64	; 0x40
 8017ae8:	2200      	movs	r2, #0
 8017aea:	2100      	movs	r1, #0
 8017aec:	6878      	ldr	r0, [r7, #4]
 8017aee:	f001 fb47 	bl	8019180 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	2201      	movs	r2, #1
 8017af6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	2240      	movs	r2, #64	; 0x40
 8017afe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017b02:	2340      	movs	r3, #64	; 0x40
 8017b04:	2200      	movs	r2, #0
 8017b06:	2180      	movs	r1, #128	; 0x80
 8017b08:	6878      	ldr	r0, [r7, #4]
 8017b0a:	f001 fb39 	bl	8019180 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	2201      	movs	r2, #1
 8017b12:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	2240      	movs	r2, #64	; 0x40
 8017b18:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8017b1a:	2300      	movs	r3, #0
}
 8017b1c:	4618      	mov	r0, r3
 8017b1e:	3708      	adds	r7, #8
 8017b20:	46bd      	mov	sp, r7
 8017b22:	bd80      	pop	{r7, pc}

08017b24 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8017b24:	b480      	push	{r7}
 8017b26:	b083      	sub	sp, #12
 8017b28:	af00      	add	r7, sp, #0
 8017b2a:	6078      	str	r0, [r7, #4]
 8017b2c:	460b      	mov	r3, r1
 8017b2e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	78fa      	ldrb	r2, [r7, #3]
 8017b34:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8017b36:	2300      	movs	r3, #0
}
 8017b38:	4618      	mov	r0, r3
 8017b3a:	370c      	adds	r7, #12
 8017b3c:	46bd      	mov	sp, r7
 8017b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b42:	4770      	bx	lr

08017b44 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8017b44:	b480      	push	{r7}
 8017b46:	b083      	sub	sp, #12
 8017b48:	af00      	add	r7, sp, #0
 8017b4a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017b52:	b2da      	uxtb	r2, r3
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	2204      	movs	r2, #4
 8017b5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8017b62:	2300      	movs	r3, #0
}
 8017b64:	4618      	mov	r0, r3
 8017b66:	370c      	adds	r7, #12
 8017b68:	46bd      	mov	sp, r7
 8017b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b6e:	4770      	bx	lr

08017b70 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8017b70:	b480      	push	{r7}
 8017b72:	b083      	sub	sp, #12
 8017b74:	af00      	add	r7, sp, #0
 8017b76:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017b7e:	b2db      	uxtb	r3, r3
 8017b80:	2b04      	cmp	r3, #4
 8017b82:	d106      	bne.n	8017b92 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8017b8a:	b2da      	uxtb	r2, r3
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8017b92:	2300      	movs	r3, #0
}
 8017b94:	4618      	mov	r0, r3
 8017b96:	370c      	adds	r7, #12
 8017b98:	46bd      	mov	sp, r7
 8017b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b9e:	4770      	bx	lr

08017ba0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8017ba0:	b580      	push	{r7, lr}
 8017ba2:	b082      	sub	sp, #8
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d101      	bne.n	8017bb6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8017bb2:	2303      	movs	r3, #3
 8017bb4:	e012      	b.n	8017bdc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017bbc:	b2db      	uxtb	r3, r3
 8017bbe:	2b03      	cmp	r3, #3
 8017bc0:	d10b      	bne.n	8017bda <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017bc8:	69db      	ldr	r3, [r3, #28]
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d005      	beq.n	8017bda <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017bd4:	69db      	ldr	r3, [r3, #28]
 8017bd6:	6878      	ldr	r0, [r7, #4]
 8017bd8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8017bda:	2300      	movs	r3, #0
}
 8017bdc:	4618      	mov	r0, r3
 8017bde:	3708      	adds	r7, #8
 8017be0:	46bd      	mov	sp, r7
 8017be2:	bd80      	pop	{r7, pc}

08017be4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8017be4:	b580      	push	{r7, lr}
 8017be6:	b082      	sub	sp, #8
 8017be8:	af00      	add	r7, sp, #0
 8017bea:	6078      	str	r0, [r7, #4]
 8017bec:	460b      	mov	r3, r1
 8017bee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d101      	bne.n	8017bfe <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8017bfa:	2303      	movs	r3, #3
 8017bfc:	e014      	b.n	8017c28 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017c04:	b2db      	uxtb	r3, r3
 8017c06:	2b03      	cmp	r3, #3
 8017c08:	d10d      	bne.n	8017c26 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017c10:	6a1b      	ldr	r3, [r3, #32]
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d007      	beq.n	8017c26 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017c1c:	6a1b      	ldr	r3, [r3, #32]
 8017c1e:	78fa      	ldrb	r2, [r7, #3]
 8017c20:	4611      	mov	r1, r2
 8017c22:	6878      	ldr	r0, [r7, #4]
 8017c24:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8017c26:	2300      	movs	r3, #0
}
 8017c28:	4618      	mov	r0, r3
 8017c2a:	3708      	adds	r7, #8
 8017c2c:	46bd      	mov	sp, r7
 8017c2e:	bd80      	pop	{r7, pc}

08017c30 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8017c30:	b580      	push	{r7, lr}
 8017c32:	b082      	sub	sp, #8
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	6078      	str	r0, [r7, #4]
 8017c38:	460b      	mov	r3, r1
 8017c3a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d101      	bne.n	8017c4a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8017c46:	2303      	movs	r3, #3
 8017c48:	e014      	b.n	8017c74 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017c50:	b2db      	uxtb	r3, r3
 8017c52:	2b03      	cmp	r3, #3
 8017c54:	d10d      	bne.n	8017c72 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d007      	beq.n	8017c72 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c6a:	78fa      	ldrb	r2, [r7, #3]
 8017c6c:	4611      	mov	r1, r2
 8017c6e:	6878      	ldr	r0, [r7, #4]
 8017c70:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8017c72:	2300      	movs	r3, #0
}
 8017c74:	4618      	mov	r0, r3
 8017c76:	3708      	adds	r7, #8
 8017c78:	46bd      	mov	sp, r7
 8017c7a:	bd80      	pop	{r7, pc}

08017c7c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8017c7c:	b480      	push	{r7}
 8017c7e:	b083      	sub	sp, #12
 8017c80:	af00      	add	r7, sp, #0
 8017c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017c84:	2300      	movs	r3, #0
}
 8017c86:	4618      	mov	r0, r3
 8017c88:	370c      	adds	r7, #12
 8017c8a:	46bd      	mov	sp, r7
 8017c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c90:	4770      	bx	lr

08017c92 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8017c92:	b580      	push	{r7, lr}
 8017c94:	b082      	sub	sp, #8
 8017c96:	af00      	add	r7, sp, #0
 8017c98:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	2201      	movs	r2, #1
 8017c9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d009      	beq.n	8017cc0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017cb2:	685b      	ldr	r3, [r3, #4]
 8017cb4:	687a      	ldr	r2, [r7, #4]
 8017cb6:	6852      	ldr	r2, [r2, #4]
 8017cb8:	b2d2      	uxtb	r2, r2
 8017cba:	4611      	mov	r1, r2
 8017cbc:	6878      	ldr	r0, [r7, #4]
 8017cbe:	4798      	blx	r3
  }

  return USBD_OK;
 8017cc0:	2300      	movs	r3, #0
}
 8017cc2:	4618      	mov	r0, r3
 8017cc4:	3708      	adds	r7, #8
 8017cc6:	46bd      	mov	sp, r7
 8017cc8:	bd80      	pop	{r7, pc}

08017cca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8017cca:	b480      	push	{r7}
 8017ccc:	b087      	sub	sp, #28
 8017cce:	af00      	add	r7, sp, #0
 8017cd0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8017cd6:	697b      	ldr	r3, [r7, #20]
 8017cd8:	781b      	ldrb	r3, [r3, #0]
 8017cda:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8017cdc:	697b      	ldr	r3, [r7, #20]
 8017cde:	3301      	adds	r3, #1
 8017ce0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8017ce2:	697b      	ldr	r3, [r7, #20]
 8017ce4:	781b      	ldrb	r3, [r3, #0]
 8017ce6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8017ce8:	8a3b      	ldrh	r3, [r7, #16]
 8017cea:	021b      	lsls	r3, r3, #8
 8017cec:	b21a      	sxth	r2, r3
 8017cee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017cf2:	4313      	orrs	r3, r2
 8017cf4:	b21b      	sxth	r3, r3
 8017cf6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8017cf8:	89fb      	ldrh	r3, [r7, #14]
}
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	371c      	adds	r7, #28
 8017cfe:	46bd      	mov	sp, r7
 8017d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d04:	4770      	bx	lr
	...

08017d08 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017d08:	b580      	push	{r7, lr}
 8017d0a:	b084      	sub	sp, #16
 8017d0c:	af00      	add	r7, sp, #0
 8017d0e:	6078      	str	r0, [r7, #4]
 8017d10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017d12:	2300      	movs	r3, #0
 8017d14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017d16:	683b      	ldr	r3, [r7, #0]
 8017d18:	781b      	ldrb	r3, [r3, #0]
 8017d1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017d1e:	2b40      	cmp	r3, #64	; 0x40
 8017d20:	d005      	beq.n	8017d2e <USBD_StdDevReq+0x26>
 8017d22:	2b40      	cmp	r3, #64	; 0x40
 8017d24:	d853      	bhi.n	8017dce <USBD_StdDevReq+0xc6>
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d00b      	beq.n	8017d42 <USBD_StdDevReq+0x3a>
 8017d2a:	2b20      	cmp	r3, #32
 8017d2c:	d14f      	bne.n	8017dce <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017d34:	689b      	ldr	r3, [r3, #8]
 8017d36:	6839      	ldr	r1, [r7, #0]
 8017d38:	6878      	ldr	r0, [r7, #4]
 8017d3a:	4798      	blx	r3
 8017d3c:	4603      	mov	r3, r0
 8017d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8017d40:	e04a      	b.n	8017dd8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017d42:	683b      	ldr	r3, [r7, #0]
 8017d44:	785b      	ldrb	r3, [r3, #1]
 8017d46:	2b09      	cmp	r3, #9
 8017d48:	d83b      	bhi.n	8017dc2 <USBD_StdDevReq+0xba>
 8017d4a:	a201      	add	r2, pc, #4	; (adr r2, 8017d50 <USBD_StdDevReq+0x48>)
 8017d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d50:	08017da5 	.word	0x08017da5
 8017d54:	08017db9 	.word	0x08017db9
 8017d58:	08017dc3 	.word	0x08017dc3
 8017d5c:	08017daf 	.word	0x08017daf
 8017d60:	08017dc3 	.word	0x08017dc3
 8017d64:	08017d83 	.word	0x08017d83
 8017d68:	08017d79 	.word	0x08017d79
 8017d6c:	08017dc3 	.word	0x08017dc3
 8017d70:	08017d9b 	.word	0x08017d9b
 8017d74:	08017d8d 	.word	0x08017d8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8017d78:	6839      	ldr	r1, [r7, #0]
 8017d7a:	6878      	ldr	r0, [r7, #4]
 8017d7c:	f000 f9de 	bl	801813c <USBD_GetDescriptor>
          break;
 8017d80:	e024      	b.n	8017dcc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8017d82:	6839      	ldr	r1, [r7, #0]
 8017d84:	6878      	ldr	r0, [r7, #4]
 8017d86:	f000 fb6d 	bl	8018464 <USBD_SetAddress>
          break;
 8017d8a:	e01f      	b.n	8017dcc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8017d8c:	6839      	ldr	r1, [r7, #0]
 8017d8e:	6878      	ldr	r0, [r7, #4]
 8017d90:	f000 fbac 	bl	80184ec <USBD_SetConfig>
 8017d94:	4603      	mov	r3, r0
 8017d96:	73fb      	strb	r3, [r7, #15]
          break;
 8017d98:	e018      	b.n	8017dcc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8017d9a:	6839      	ldr	r1, [r7, #0]
 8017d9c:	6878      	ldr	r0, [r7, #4]
 8017d9e:	f000 fc4b 	bl	8018638 <USBD_GetConfig>
          break;
 8017da2:	e013      	b.n	8017dcc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8017da4:	6839      	ldr	r1, [r7, #0]
 8017da6:	6878      	ldr	r0, [r7, #4]
 8017da8:	f000 fc7c 	bl	80186a4 <USBD_GetStatus>
          break;
 8017dac:	e00e      	b.n	8017dcc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8017dae:	6839      	ldr	r1, [r7, #0]
 8017db0:	6878      	ldr	r0, [r7, #4]
 8017db2:	f000 fcab 	bl	801870c <USBD_SetFeature>
          break;
 8017db6:	e009      	b.n	8017dcc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8017db8:	6839      	ldr	r1, [r7, #0]
 8017dba:	6878      	ldr	r0, [r7, #4]
 8017dbc:	f000 fcba 	bl	8018734 <USBD_ClrFeature>
          break;
 8017dc0:	e004      	b.n	8017dcc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8017dc2:	6839      	ldr	r1, [r7, #0]
 8017dc4:	6878      	ldr	r0, [r7, #4]
 8017dc6:	f000 fd11 	bl	80187ec <USBD_CtlError>
          break;
 8017dca:	bf00      	nop
      }
      break;
 8017dcc:	e004      	b.n	8017dd8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8017dce:	6839      	ldr	r1, [r7, #0]
 8017dd0:	6878      	ldr	r0, [r7, #4]
 8017dd2:	f000 fd0b 	bl	80187ec <USBD_CtlError>
      break;
 8017dd6:	bf00      	nop
  }

  return ret;
 8017dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8017dda:	4618      	mov	r0, r3
 8017ddc:	3710      	adds	r7, #16
 8017dde:	46bd      	mov	sp, r7
 8017de0:	bd80      	pop	{r7, pc}
 8017de2:	bf00      	nop

08017de4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017de4:	b580      	push	{r7, lr}
 8017de6:	b084      	sub	sp, #16
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	6078      	str	r0, [r7, #4]
 8017dec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017dee:	2300      	movs	r3, #0
 8017df0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017df2:	683b      	ldr	r3, [r7, #0]
 8017df4:	781b      	ldrb	r3, [r3, #0]
 8017df6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017dfa:	2b40      	cmp	r3, #64	; 0x40
 8017dfc:	d005      	beq.n	8017e0a <USBD_StdItfReq+0x26>
 8017dfe:	2b40      	cmp	r3, #64	; 0x40
 8017e00:	d82f      	bhi.n	8017e62 <USBD_StdItfReq+0x7e>
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d001      	beq.n	8017e0a <USBD_StdItfReq+0x26>
 8017e06:	2b20      	cmp	r3, #32
 8017e08:	d12b      	bne.n	8017e62 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017e10:	b2db      	uxtb	r3, r3
 8017e12:	3b01      	subs	r3, #1
 8017e14:	2b02      	cmp	r3, #2
 8017e16:	d81d      	bhi.n	8017e54 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8017e18:	683b      	ldr	r3, [r7, #0]
 8017e1a:	889b      	ldrh	r3, [r3, #4]
 8017e1c:	b2db      	uxtb	r3, r3
 8017e1e:	2b01      	cmp	r3, #1
 8017e20:	d813      	bhi.n	8017e4a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017e28:	689b      	ldr	r3, [r3, #8]
 8017e2a:	6839      	ldr	r1, [r7, #0]
 8017e2c:	6878      	ldr	r0, [r7, #4]
 8017e2e:	4798      	blx	r3
 8017e30:	4603      	mov	r3, r0
 8017e32:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8017e34:	683b      	ldr	r3, [r7, #0]
 8017e36:	88db      	ldrh	r3, [r3, #6]
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d110      	bne.n	8017e5e <USBD_StdItfReq+0x7a>
 8017e3c:	7bfb      	ldrb	r3, [r7, #15]
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d10d      	bne.n	8017e5e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8017e42:	6878      	ldr	r0, [r7, #4]
 8017e44:	f000 fd9d 	bl	8018982 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8017e48:	e009      	b.n	8017e5e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8017e4a:	6839      	ldr	r1, [r7, #0]
 8017e4c:	6878      	ldr	r0, [r7, #4]
 8017e4e:	f000 fccd 	bl	80187ec <USBD_CtlError>
          break;
 8017e52:	e004      	b.n	8017e5e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8017e54:	6839      	ldr	r1, [r7, #0]
 8017e56:	6878      	ldr	r0, [r7, #4]
 8017e58:	f000 fcc8 	bl	80187ec <USBD_CtlError>
          break;
 8017e5c:	e000      	b.n	8017e60 <USBD_StdItfReq+0x7c>
          break;
 8017e5e:	bf00      	nop
      }
      break;
 8017e60:	e004      	b.n	8017e6c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8017e62:	6839      	ldr	r1, [r7, #0]
 8017e64:	6878      	ldr	r0, [r7, #4]
 8017e66:	f000 fcc1 	bl	80187ec <USBD_CtlError>
      break;
 8017e6a:	bf00      	nop
  }

  return ret;
 8017e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e6e:	4618      	mov	r0, r3
 8017e70:	3710      	adds	r7, #16
 8017e72:	46bd      	mov	sp, r7
 8017e74:	bd80      	pop	{r7, pc}

08017e76 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017e76:	b580      	push	{r7, lr}
 8017e78:	b084      	sub	sp, #16
 8017e7a:	af00      	add	r7, sp, #0
 8017e7c:	6078      	str	r0, [r7, #4]
 8017e7e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8017e80:	2300      	movs	r3, #0
 8017e82:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8017e84:	683b      	ldr	r3, [r7, #0]
 8017e86:	889b      	ldrh	r3, [r3, #4]
 8017e88:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017e8a:	683b      	ldr	r3, [r7, #0]
 8017e8c:	781b      	ldrb	r3, [r3, #0]
 8017e8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017e92:	2b40      	cmp	r3, #64	; 0x40
 8017e94:	d007      	beq.n	8017ea6 <USBD_StdEPReq+0x30>
 8017e96:	2b40      	cmp	r3, #64	; 0x40
 8017e98:	f200 8145 	bhi.w	8018126 <USBD_StdEPReq+0x2b0>
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d00c      	beq.n	8017eba <USBD_StdEPReq+0x44>
 8017ea0:	2b20      	cmp	r3, #32
 8017ea2:	f040 8140 	bne.w	8018126 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017eac:	689b      	ldr	r3, [r3, #8]
 8017eae:	6839      	ldr	r1, [r7, #0]
 8017eb0:	6878      	ldr	r0, [r7, #4]
 8017eb2:	4798      	blx	r3
 8017eb4:	4603      	mov	r3, r0
 8017eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8017eb8:	e13a      	b.n	8018130 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017eba:	683b      	ldr	r3, [r7, #0]
 8017ebc:	785b      	ldrb	r3, [r3, #1]
 8017ebe:	2b03      	cmp	r3, #3
 8017ec0:	d007      	beq.n	8017ed2 <USBD_StdEPReq+0x5c>
 8017ec2:	2b03      	cmp	r3, #3
 8017ec4:	f300 8129 	bgt.w	801811a <USBD_StdEPReq+0x2a4>
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d07f      	beq.n	8017fcc <USBD_StdEPReq+0x156>
 8017ecc:	2b01      	cmp	r3, #1
 8017ece:	d03c      	beq.n	8017f4a <USBD_StdEPReq+0xd4>
 8017ed0:	e123      	b.n	801811a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017ed8:	b2db      	uxtb	r3, r3
 8017eda:	2b02      	cmp	r3, #2
 8017edc:	d002      	beq.n	8017ee4 <USBD_StdEPReq+0x6e>
 8017ede:	2b03      	cmp	r3, #3
 8017ee0:	d016      	beq.n	8017f10 <USBD_StdEPReq+0x9a>
 8017ee2:	e02c      	b.n	8017f3e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017ee4:	7bbb      	ldrb	r3, [r7, #14]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d00d      	beq.n	8017f06 <USBD_StdEPReq+0x90>
 8017eea:	7bbb      	ldrb	r3, [r7, #14]
 8017eec:	2b80      	cmp	r3, #128	; 0x80
 8017eee:	d00a      	beq.n	8017f06 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017ef0:	7bbb      	ldrb	r3, [r7, #14]
 8017ef2:	4619      	mov	r1, r3
 8017ef4:	6878      	ldr	r0, [r7, #4]
 8017ef6:	f001 f9b7 	bl	8019268 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8017efa:	2180      	movs	r1, #128	; 0x80
 8017efc:	6878      	ldr	r0, [r7, #4]
 8017efe:	f001 f9b3 	bl	8019268 <USBD_LL_StallEP>
 8017f02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017f04:	e020      	b.n	8017f48 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8017f06:	6839      	ldr	r1, [r7, #0]
 8017f08:	6878      	ldr	r0, [r7, #4]
 8017f0a:	f000 fc6f 	bl	80187ec <USBD_CtlError>
              break;
 8017f0e:	e01b      	b.n	8017f48 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017f10:	683b      	ldr	r3, [r7, #0]
 8017f12:	885b      	ldrh	r3, [r3, #2]
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d10e      	bne.n	8017f36 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8017f18:	7bbb      	ldrb	r3, [r7, #14]
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d00b      	beq.n	8017f36 <USBD_StdEPReq+0xc0>
 8017f1e:	7bbb      	ldrb	r3, [r7, #14]
 8017f20:	2b80      	cmp	r3, #128	; 0x80
 8017f22:	d008      	beq.n	8017f36 <USBD_StdEPReq+0xc0>
 8017f24:	683b      	ldr	r3, [r7, #0]
 8017f26:	88db      	ldrh	r3, [r3, #6]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d104      	bne.n	8017f36 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8017f2c:	7bbb      	ldrb	r3, [r7, #14]
 8017f2e:	4619      	mov	r1, r3
 8017f30:	6878      	ldr	r0, [r7, #4]
 8017f32:	f001 f999 	bl	8019268 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8017f36:	6878      	ldr	r0, [r7, #4]
 8017f38:	f000 fd23 	bl	8018982 <USBD_CtlSendStatus>

              break;
 8017f3c:	e004      	b.n	8017f48 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8017f3e:	6839      	ldr	r1, [r7, #0]
 8017f40:	6878      	ldr	r0, [r7, #4]
 8017f42:	f000 fc53 	bl	80187ec <USBD_CtlError>
              break;
 8017f46:	bf00      	nop
          }
          break;
 8017f48:	e0ec      	b.n	8018124 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017f50:	b2db      	uxtb	r3, r3
 8017f52:	2b02      	cmp	r3, #2
 8017f54:	d002      	beq.n	8017f5c <USBD_StdEPReq+0xe6>
 8017f56:	2b03      	cmp	r3, #3
 8017f58:	d016      	beq.n	8017f88 <USBD_StdEPReq+0x112>
 8017f5a:	e030      	b.n	8017fbe <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017f5c:	7bbb      	ldrb	r3, [r7, #14]
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	d00d      	beq.n	8017f7e <USBD_StdEPReq+0x108>
 8017f62:	7bbb      	ldrb	r3, [r7, #14]
 8017f64:	2b80      	cmp	r3, #128	; 0x80
 8017f66:	d00a      	beq.n	8017f7e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017f68:	7bbb      	ldrb	r3, [r7, #14]
 8017f6a:	4619      	mov	r1, r3
 8017f6c:	6878      	ldr	r0, [r7, #4]
 8017f6e:	f001 f97b 	bl	8019268 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8017f72:	2180      	movs	r1, #128	; 0x80
 8017f74:	6878      	ldr	r0, [r7, #4]
 8017f76:	f001 f977 	bl	8019268 <USBD_LL_StallEP>
 8017f7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017f7c:	e025      	b.n	8017fca <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8017f7e:	6839      	ldr	r1, [r7, #0]
 8017f80:	6878      	ldr	r0, [r7, #4]
 8017f82:	f000 fc33 	bl	80187ec <USBD_CtlError>
              break;
 8017f86:	e020      	b.n	8017fca <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017f88:	683b      	ldr	r3, [r7, #0]
 8017f8a:	885b      	ldrh	r3, [r3, #2]
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d11b      	bne.n	8017fc8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8017f90:	7bbb      	ldrb	r3, [r7, #14]
 8017f92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d004      	beq.n	8017fa4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8017f9a:	7bbb      	ldrb	r3, [r7, #14]
 8017f9c:	4619      	mov	r1, r3
 8017f9e:	6878      	ldr	r0, [r7, #4]
 8017fa0:	f001 f998 	bl	80192d4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8017fa4:	6878      	ldr	r0, [r7, #4]
 8017fa6:	f000 fcec 	bl	8018982 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017fb0:	689b      	ldr	r3, [r3, #8]
 8017fb2:	6839      	ldr	r1, [r7, #0]
 8017fb4:	6878      	ldr	r0, [r7, #4]
 8017fb6:	4798      	blx	r3
 8017fb8:	4603      	mov	r3, r0
 8017fba:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8017fbc:	e004      	b.n	8017fc8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8017fbe:	6839      	ldr	r1, [r7, #0]
 8017fc0:	6878      	ldr	r0, [r7, #4]
 8017fc2:	f000 fc13 	bl	80187ec <USBD_CtlError>
              break;
 8017fc6:	e000      	b.n	8017fca <USBD_StdEPReq+0x154>
              break;
 8017fc8:	bf00      	nop
          }
          break;
 8017fca:	e0ab      	b.n	8018124 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017fd2:	b2db      	uxtb	r3, r3
 8017fd4:	2b02      	cmp	r3, #2
 8017fd6:	d002      	beq.n	8017fde <USBD_StdEPReq+0x168>
 8017fd8:	2b03      	cmp	r3, #3
 8017fda:	d032      	beq.n	8018042 <USBD_StdEPReq+0x1cc>
 8017fdc:	e097      	b.n	801810e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017fde:	7bbb      	ldrb	r3, [r7, #14]
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d007      	beq.n	8017ff4 <USBD_StdEPReq+0x17e>
 8017fe4:	7bbb      	ldrb	r3, [r7, #14]
 8017fe6:	2b80      	cmp	r3, #128	; 0x80
 8017fe8:	d004      	beq.n	8017ff4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8017fea:	6839      	ldr	r1, [r7, #0]
 8017fec:	6878      	ldr	r0, [r7, #4]
 8017fee:	f000 fbfd 	bl	80187ec <USBD_CtlError>
                break;
 8017ff2:	e091      	b.n	8018118 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017ff4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	da0b      	bge.n	8018014 <USBD_StdEPReq+0x19e>
 8017ffc:	7bbb      	ldrb	r3, [r7, #14]
 8017ffe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018002:	4613      	mov	r3, r2
 8018004:	009b      	lsls	r3, r3, #2
 8018006:	4413      	add	r3, r2
 8018008:	009b      	lsls	r3, r3, #2
 801800a:	3310      	adds	r3, #16
 801800c:	687a      	ldr	r2, [r7, #4]
 801800e:	4413      	add	r3, r2
 8018010:	3304      	adds	r3, #4
 8018012:	e00b      	b.n	801802c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8018014:	7bbb      	ldrb	r3, [r7, #14]
 8018016:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801801a:	4613      	mov	r3, r2
 801801c:	009b      	lsls	r3, r3, #2
 801801e:	4413      	add	r3, r2
 8018020:	009b      	lsls	r3, r3, #2
 8018022:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8018026:	687a      	ldr	r2, [r7, #4]
 8018028:	4413      	add	r3, r2
 801802a:	3304      	adds	r3, #4
 801802c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801802e:	68bb      	ldr	r3, [r7, #8]
 8018030:	2200      	movs	r2, #0
 8018032:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8018034:	68bb      	ldr	r3, [r7, #8]
 8018036:	2202      	movs	r2, #2
 8018038:	4619      	mov	r1, r3
 801803a:	6878      	ldr	r0, [r7, #4]
 801803c:	f000 fc47 	bl	80188ce <USBD_CtlSendData>
              break;
 8018040:	e06a      	b.n	8018118 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8018042:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018046:	2b00      	cmp	r3, #0
 8018048:	da11      	bge.n	801806e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801804a:	7bbb      	ldrb	r3, [r7, #14]
 801804c:	f003 020f 	and.w	r2, r3, #15
 8018050:	6879      	ldr	r1, [r7, #4]
 8018052:	4613      	mov	r3, r2
 8018054:	009b      	lsls	r3, r3, #2
 8018056:	4413      	add	r3, r2
 8018058:	009b      	lsls	r3, r3, #2
 801805a:	440b      	add	r3, r1
 801805c:	3324      	adds	r3, #36	; 0x24
 801805e:	881b      	ldrh	r3, [r3, #0]
 8018060:	2b00      	cmp	r3, #0
 8018062:	d117      	bne.n	8018094 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8018064:	6839      	ldr	r1, [r7, #0]
 8018066:	6878      	ldr	r0, [r7, #4]
 8018068:	f000 fbc0 	bl	80187ec <USBD_CtlError>
                  break;
 801806c:	e054      	b.n	8018118 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801806e:	7bbb      	ldrb	r3, [r7, #14]
 8018070:	f003 020f 	and.w	r2, r3, #15
 8018074:	6879      	ldr	r1, [r7, #4]
 8018076:	4613      	mov	r3, r2
 8018078:	009b      	lsls	r3, r3, #2
 801807a:	4413      	add	r3, r2
 801807c:	009b      	lsls	r3, r3, #2
 801807e:	440b      	add	r3, r1
 8018080:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8018084:	881b      	ldrh	r3, [r3, #0]
 8018086:	2b00      	cmp	r3, #0
 8018088:	d104      	bne.n	8018094 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801808a:	6839      	ldr	r1, [r7, #0]
 801808c:	6878      	ldr	r0, [r7, #4]
 801808e:	f000 fbad 	bl	80187ec <USBD_CtlError>
                  break;
 8018092:	e041      	b.n	8018118 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018094:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018098:	2b00      	cmp	r3, #0
 801809a:	da0b      	bge.n	80180b4 <USBD_StdEPReq+0x23e>
 801809c:	7bbb      	ldrb	r3, [r7, #14]
 801809e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80180a2:	4613      	mov	r3, r2
 80180a4:	009b      	lsls	r3, r3, #2
 80180a6:	4413      	add	r3, r2
 80180a8:	009b      	lsls	r3, r3, #2
 80180aa:	3310      	adds	r3, #16
 80180ac:	687a      	ldr	r2, [r7, #4]
 80180ae:	4413      	add	r3, r2
 80180b0:	3304      	adds	r3, #4
 80180b2:	e00b      	b.n	80180cc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80180b4:	7bbb      	ldrb	r3, [r7, #14]
 80180b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80180ba:	4613      	mov	r3, r2
 80180bc:	009b      	lsls	r3, r3, #2
 80180be:	4413      	add	r3, r2
 80180c0:	009b      	lsls	r3, r3, #2
 80180c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80180c6:	687a      	ldr	r2, [r7, #4]
 80180c8:	4413      	add	r3, r2
 80180ca:	3304      	adds	r3, #4
 80180cc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80180ce:	7bbb      	ldrb	r3, [r7, #14]
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d002      	beq.n	80180da <USBD_StdEPReq+0x264>
 80180d4:	7bbb      	ldrb	r3, [r7, #14]
 80180d6:	2b80      	cmp	r3, #128	; 0x80
 80180d8:	d103      	bne.n	80180e2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80180da:	68bb      	ldr	r3, [r7, #8]
 80180dc:	2200      	movs	r2, #0
 80180de:	601a      	str	r2, [r3, #0]
 80180e0:	e00e      	b.n	8018100 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80180e2:	7bbb      	ldrb	r3, [r7, #14]
 80180e4:	4619      	mov	r1, r3
 80180e6:	6878      	ldr	r0, [r7, #4]
 80180e8:	f001 f92a 	bl	8019340 <USBD_LL_IsStallEP>
 80180ec:	4603      	mov	r3, r0
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d003      	beq.n	80180fa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80180f2:	68bb      	ldr	r3, [r7, #8]
 80180f4:	2201      	movs	r2, #1
 80180f6:	601a      	str	r2, [r3, #0]
 80180f8:	e002      	b.n	8018100 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80180fa:	68bb      	ldr	r3, [r7, #8]
 80180fc:	2200      	movs	r2, #0
 80180fe:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8018100:	68bb      	ldr	r3, [r7, #8]
 8018102:	2202      	movs	r2, #2
 8018104:	4619      	mov	r1, r3
 8018106:	6878      	ldr	r0, [r7, #4]
 8018108:	f000 fbe1 	bl	80188ce <USBD_CtlSendData>
              break;
 801810c:	e004      	b.n	8018118 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801810e:	6839      	ldr	r1, [r7, #0]
 8018110:	6878      	ldr	r0, [r7, #4]
 8018112:	f000 fb6b 	bl	80187ec <USBD_CtlError>
              break;
 8018116:	bf00      	nop
          }
          break;
 8018118:	e004      	b.n	8018124 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801811a:	6839      	ldr	r1, [r7, #0]
 801811c:	6878      	ldr	r0, [r7, #4]
 801811e:	f000 fb65 	bl	80187ec <USBD_CtlError>
          break;
 8018122:	bf00      	nop
      }
      break;
 8018124:	e004      	b.n	8018130 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8018126:	6839      	ldr	r1, [r7, #0]
 8018128:	6878      	ldr	r0, [r7, #4]
 801812a:	f000 fb5f 	bl	80187ec <USBD_CtlError>
      break;
 801812e:	bf00      	nop
  }

  return ret;
 8018130:	7bfb      	ldrb	r3, [r7, #15]
}
 8018132:	4618      	mov	r0, r3
 8018134:	3710      	adds	r7, #16
 8018136:	46bd      	mov	sp, r7
 8018138:	bd80      	pop	{r7, pc}
	...

0801813c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801813c:	b580      	push	{r7, lr}
 801813e:	b084      	sub	sp, #16
 8018140:	af00      	add	r7, sp, #0
 8018142:	6078      	str	r0, [r7, #4]
 8018144:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8018146:	2300      	movs	r3, #0
 8018148:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801814a:	2300      	movs	r3, #0
 801814c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801814e:	2300      	movs	r3, #0
 8018150:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8018152:	683b      	ldr	r3, [r7, #0]
 8018154:	885b      	ldrh	r3, [r3, #2]
 8018156:	0a1b      	lsrs	r3, r3, #8
 8018158:	b29b      	uxth	r3, r3
 801815a:	3b01      	subs	r3, #1
 801815c:	2b0e      	cmp	r3, #14
 801815e:	f200 8152 	bhi.w	8018406 <USBD_GetDescriptor+0x2ca>
 8018162:	a201      	add	r2, pc, #4	; (adr r2, 8018168 <USBD_GetDescriptor+0x2c>)
 8018164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018168:	080181d9 	.word	0x080181d9
 801816c:	080181f1 	.word	0x080181f1
 8018170:	08018231 	.word	0x08018231
 8018174:	08018407 	.word	0x08018407
 8018178:	08018407 	.word	0x08018407
 801817c:	080183a7 	.word	0x080183a7
 8018180:	080183d3 	.word	0x080183d3
 8018184:	08018407 	.word	0x08018407
 8018188:	08018407 	.word	0x08018407
 801818c:	08018407 	.word	0x08018407
 8018190:	08018407 	.word	0x08018407
 8018194:	08018407 	.word	0x08018407
 8018198:	08018407 	.word	0x08018407
 801819c:	08018407 	.word	0x08018407
 80181a0:	080181a5 	.word	0x080181a5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80181aa:	69db      	ldr	r3, [r3, #28]
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d00b      	beq.n	80181c8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80181b6:	69db      	ldr	r3, [r3, #28]
 80181b8:	687a      	ldr	r2, [r7, #4]
 80181ba:	7c12      	ldrb	r2, [r2, #16]
 80181bc:	f107 0108 	add.w	r1, r7, #8
 80181c0:	4610      	mov	r0, r2
 80181c2:	4798      	blx	r3
 80181c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80181c6:	e126      	b.n	8018416 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80181c8:	6839      	ldr	r1, [r7, #0]
 80181ca:	6878      	ldr	r0, [r7, #4]
 80181cc:	f000 fb0e 	bl	80187ec <USBD_CtlError>
        err++;
 80181d0:	7afb      	ldrb	r3, [r7, #11]
 80181d2:	3301      	adds	r3, #1
 80181d4:	72fb      	strb	r3, [r7, #11]
      break;
 80181d6:	e11e      	b.n	8018416 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80181de:	681b      	ldr	r3, [r3, #0]
 80181e0:	687a      	ldr	r2, [r7, #4]
 80181e2:	7c12      	ldrb	r2, [r2, #16]
 80181e4:	f107 0108 	add.w	r1, r7, #8
 80181e8:	4610      	mov	r0, r2
 80181ea:	4798      	blx	r3
 80181ec:	60f8      	str	r0, [r7, #12]
      break;
 80181ee:	e112      	b.n	8018416 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	7c1b      	ldrb	r3, [r3, #16]
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d10d      	bne.n	8018214 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80181fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018200:	f107 0208 	add.w	r2, r7, #8
 8018204:	4610      	mov	r0, r2
 8018206:	4798      	blx	r3
 8018208:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801820a:	68fb      	ldr	r3, [r7, #12]
 801820c:	3301      	adds	r3, #1
 801820e:	2202      	movs	r2, #2
 8018210:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8018212:	e100      	b.n	8018416 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801821a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801821c:	f107 0208 	add.w	r2, r7, #8
 8018220:	4610      	mov	r0, r2
 8018222:	4798      	blx	r3
 8018224:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8018226:	68fb      	ldr	r3, [r7, #12]
 8018228:	3301      	adds	r3, #1
 801822a:	2202      	movs	r2, #2
 801822c:	701a      	strb	r2, [r3, #0]
      break;
 801822e:	e0f2      	b.n	8018416 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8018230:	683b      	ldr	r3, [r7, #0]
 8018232:	885b      	ldrh	r3, [r3, #2]
 8018234:	b2db      	uxtb	r3, r3
 8018236:	2b05      	cmp	r3, #5
 8018238:	f200 80ac 	bhi.w	8018394 <USBD_GetDescriptor+0x258>
 801823c:	a201      	add	r2, pc, #4	; (adr r2, 8018244 <USBD_GetDescriptor+0x108>)
 801823e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018242:	bf00      	nop
 8018244:	0801825d 	.word	0x0801825d
 8018248:	08018291 	.word	0x08018291
 801824c:	080182c5 	.word	0x080182c5
 8018250:	080182f9 	.word	0x080182f9
 8018254:	0801832d 	.word	0x0801832d
 8018258:	08018361 	.word	0x08018361
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018262:	685b      	ldr	r3, [r3, #4]
 8018264:	2b00      	cmp	r3, #0
 8018266:	d00b      	beq.n	8018280 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801826e:	685b      	ldr	r3, [r3, #4]
 8018270:	687a      	ldr	r2, [r7, #4]
 8018272:	7c12      	ldrb	r2, [r2, #16]
 8018274:	f107 0108 	add.w	r1, r7, #8
 8018278:	4610      	mov	r0, r2
 801827a:	4798      	blx	r3
 801827c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801827e:	e091      	b.n	80183a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018280:	6839      	ldr	r1, [r7, #0]
 8018282:	6878      	ldr	r0, [r7, #4]
 8018284:	f000 fab2 	bl	80187ec <USBD_CtlError>
            err++;
 8018288:	7afb      	ldrb	r3, [r7, #11]
 801828a:	3301      	adds	r3, #1
 801828c:	72fb      	strb	r3, [r7, #11]
          break;
 801828e:	e089      	b.n	80183a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018296:	689b      	ldr	r3, [r3, #8]
 8018298:	2b00      	cmp	r3, #0
 801829a:	d00b      	beq.n	80182b4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80182a2:	689b      	ldr	r3, [r3, #8]
 80182a4:	687a      	ldr	r2, [r7, #4]
 80182a6:	7c12      	ldrb	r2, [r2, #16]
 80182a8:	f107 0108 	add.w	r1, r7, #8
 80182ac:	4610      	mov	r0, r2
 80182ae:	4798      	blx	r3
 80182b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80182b2:	e077      	b.n	80183a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80182b4:	6839      	ldr	r1, [r7, #0]
 80182b6:	6878      	ldr	r0, [r7, #4]
 80182b8:	f000 fa98 	bl	80187ec <USBD_CtlError>
            err++;
 80182bc:	7afb      	ldrb	r3, [r7, #11]
 80182be:	3301      	adds	r3, #1
 80182c0:	72fb      	strb	r3, [r7, #11]
          break;
 80182c2:	e06f      	b.n	80183a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80182ca:	68db      	ldr	r3, [r3, #12]
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d00b      	beq.n	80182e8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80182d6:	68db      	ldr	r3, [r3, #12]
 80182d8:	687a      	ldr	r2, [r7, #4]
 80182da:	7c12      	ldrb	r2, [r2, #16]
 80182dc:	f107 0108 	add.w	r1, r7, #8
 80182e0:	4610      	mov	r0, r2
 80182e2:	4798      	blx	r3
 80182e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80182e6:	e05d      	b.n	80183a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80182e8:	6839      	ldr	r1, [r7, #0]
 80182ea:	6878      	ldr	r0, [r7, #4]
 80182ec:	f000 fa7e 	bl	80187ec <USBD_CtlError>
            err++;
 80182f0:	7afb      	ldrb	r3, [r7, #11]
 80182f2:	3301      	adds	r3, #1
 80182f4:	72fb      	strb	r3, [r7, #11]
          break;
 80182f6:	e055      	b.n	80183a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80182fe:	691b      	ldr	r3, [r3, #16]
 8018300:	2b00      	cmp	r3, #0
 8018302:	d00b      	beq.n	801831c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801830a:	691b      	ldr	r3, [r3, #16]
 801830c:	687a      	ldr	r2, [r7, #4]
 801830e:	7c12      	ldrb	r2, [r2, #16]
 8018310:	f107 0108 	add.w	r1, r7, #8
 8018314:	4610      	mov	r0, r2
 8018316:	4798      	blx	r3
 8018318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801831a:	e043      	b.n	80183a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801831c:	6839      	ldr	r1, [r7, #0]
 801831e:	6878      	ldr	r0, [r7, #4]
 8018320:	f000 fa64 	bl	80187ec <USBD_CtlError>
            err++;
 8018324:	7afb      	ldrb	r3, [r7, #11]
 8018326:	3301      	adds	r3, #1
 8018328:	72fb      	strb	r3, [r7, #11]
          break;
 801832a:	e03b      	b.n	80183a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018332:	695b      	ldr	r3, [r3, #20]
 8018334:	2b00      	cmp	r3, #0
 8018336:	d00b      	beq.n	8018350 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801833e:	695b      	ldr	r3, [r3, #20]
 8018340:	687a      	ldr	r2, [r7, #4]
 8018342:	7c12      	ldrb	r2, [r2, #16]
 8018344:	f107 0108 	add.w	r1, r7, #8
 8018348:	4610      	mov	r0, r2
 801834a:	4798      	blx	r3
 801834c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801834e:	e029      	b.n	80183a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018350:	6839      	ldr	r1, [r7, #0]
 8018352:	6878      	ldr	r0, [r7, #4]
 8018354:	f000 fa4a 	bl	80187ec <USBD_CtlError>
            err++;
 8018358:	7afb      	ldrb	r3, [r7, #11]
 801835a:	3301      	adds	r3, #1
 801835c:	72fb      	strb	r3, [r7, #11]
          break;
 801835e:	e021      	b.n	80183a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018366:	699b      	ldr	r3, [r3, #24]
 8018368:	2b00      	cmp	r3, #0
 801836a:	d00b      	beq.n	8018384 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018372:	699b      	ldr	r3, [r3, #24]
 8018374:	687a      	ldr	r2, [r7, #4]
 8018376:	7c12      	ldrb	r2, [r2, #16]
 8018378:	f107 0108 	add.w	r1, r7, #8
 801837c:	4610      	mov	r0, r2
 801837e:	4798      	blx	r3
 8018380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018382:	e00f      	b.n	80183a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018384:	6839      	ldr	r1, [r7, #0]
 8018386:	6878      	ldr	r0, [r7, #4]
 8018388:	f000 fa30 	bl	80187ec <USBD_CtlError>
            err++;
 801838c:	7afb      	ldrb	r3, [r7, #11]
 801838e:	3301      	adds	r3, #1
 8018390:	72fb      	strb	r3, [r7, #11]
          break;
 8018392:	e007      	b.n	80183a4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8018394:	6839      	ldr	r1, [r7, #0]
 8018396:	6878      	ldr	r0, [r7, #4]
 8018398:	f000 fa28 	bl	80187ec <USBD_CtlError>
          err++;
 801839c:	7afb      	ldrb	r3, [r7, #11]
 801839e:	3301      	adds	r3, #1
 80183a0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80183a2:	bf00      	nop
      }
      break;
 80183a4:	e037      	b.n	8018416 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	7c1b      	ldrb	r3, [r3, #16]
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d109      	bne.n	80183c2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80183b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80183b6:	f107 0208 	add.w	r2, r7, #8
 80183ba:	4610      	mov	r0, r2
 80183bc:	4798      	blx	r3
 80183be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80183c0:	e029      	b.n	8018416 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80183c2:	6839      	ldr	r1, [r7, #0]
 80183c4:	6878      	ldr	r0, [r7, #4]
 80183c6:	f000 fa11 	bl	80187ec <USBD_CtlError>
        err++;
 80183ca:	7afb      	ldrb	r3, [r7, #11]
 80183cc:	3301      	adds	r3, #1
 80183ce:	72fb      	strb	r3, [r7, #11]
      break;
 80183d0:	e021      	b.n	8018416 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	7c1b      	ldrb	r3, [r3, #16]
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d10d      	bne.n	80183f6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80183e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80183e2:	f107 0208 	add.w	r2, r7, #8
 80183e6:	4610      	mov	r0, r2
 80183e8:	4798      	blx	r3
 80183ea:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80183ec:	68fb      	ldr	r3, [r7, #12]
 80183ee:	3301      	adds	r3, #1
 80183f0:	2207      	movs	r2, #7
 80183f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80183f4:	e00f      	b.n	8018416 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80183f6:	6839      	ldr	r1, [r7, #0]
 80183f8:	6878      	ldr	r0, [r7, #4]
 80183fa:	f000 f9f7 	bl	80187ec <USBD_CtlError>
        err++;
 80183fe:	7afb      	ldrb	r3, [r7, #11]
 8018400:	3301      	adds	r3, #1
 8018402:	72fb      	strb	r3, [r7, #11]
      break;
 8018404:	e007      	b.n	8018416 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8018406:	6839      	ldr	r1, [r7, #0]
 8018408:	6878      	ldr	r0, [r7, #4]
 801840a:	f000 f9ef 	bl	80187ec <USBD_CtlError>
      err++;
 801840e:	7afb      	ldrb	r3, [r7, #11]
 8018410:	3301      	adds	r3, #1
 8018412:	72fb      	strb	r3, [r7, #11]
      break;
 8018414:	bf00      	nop
  }

  if (err != 0U)
 8018416:	7afb      	ldrb	r3, [r7, #11]
 8018418:	2b00      	cmp	r3, #0
 801841a:	d11e      	bne.n	801845a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801841c:	683b      	ldr	r3, [r7, #0]
 801841e:	88db      	ldrh	r3, [r3, #6]
 8018420:	2b00      	cmp	r3, #0
 8018422:	d016      	beq.n	8018452 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8018424:	893b      	ldrh	r3, [r7, #8]
 8018426:	2b00      	cmp	r3, #0
 8018428:	d00e      	beq.n	8018448 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801842a:	683b      	ldr	r3, [r7, #0]
 801842c:	88da      	ldrh	r2, [r3, #6]
 801842e:	893b      	ldrh	r3, [r7, #8]
 8018430:	4293      	cmp	r3, r2
 8018432:	bf28      	it	cs
 8018434:	4613      	movcs	r3, r2
 8018436:	b29b      	uxth	r3, r3
 8018438:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801843a:	893b      	ldrh	r3, [r7, #8]
 801843c:	461a      	mov	r2, r3
 801843e:	68f9      	ldr	r1, [r7, #12]
 8018440:	6878      	ldr	r0, [r7, #4]
 8018442:	f000 fa44 	bl	80188ce <USBD_CtlSendData>
 8018446:	e009      	b.n	801845c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8018448:	6839      	ldr	r1, [r7, #0]
 801844a:	6878      	ldr	r0, [r7, #4]
 801844c:	f000 f9ce 	bl	80187ec <USBD_CtlError>
 8018450:	e004      	b.n	801845c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8018452:	6878      	ldr	r0, [r7, #4]
 8018454:	f000 fa95 	bl	8018982 <USBD_CtlSendStatus>
 8018458:	e000      	b.n	801845c <USBD_GetDescriptor+0x320>
    return;
 801845a:	bf00      	nop
  }
}
 801845c:	3710      	adds	r7, #16
 801845e:	46bd      	mov	sp, r7
 8018460:	bd80      	pop	{r7, pc}
 8018462:	bf00      	nop

08018464 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018464:	b580      	push	{r7, lr}
 8018466:	b084      	sub	sp, #16
 8018468:	af00      	add	r7, sp, #0
 801846a:	6078      	str	r0, [r7, #4]
 801846c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801846e:	683b      	ldr	r3, [r7, #0]
 8018470:	889b      	ldrh	r3, [r3, #4]
 8018472:	2b00      	cmp	r3, #0
 8018474:	d131      	bne.n	80184da <USBD_SetAddress+0x76>
 8018476:	683b      	ldr	r3, [r7, #0]
 8018478:	88db      	ldrh	r3, [r3, #6]
 801847a:	2b00      	cmp	r3, #0
 801847c:	d12d      	bne.n	80184da <USBD_SetAddress+0x76>
 801847e:	683b      	ldr	r3, [r7, #0]
 8018480:	885b      	ldrh	r3, [r3, #2]
 8018482:	2b7f      	cmp	r3, #127	; 0x7f
 8018484:	d829      	bhi.n	80184da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8018486:	683b      	ldr	r3, [r7, #0]
 8018488:	885b      	ldrh	r3, [r3, #2]
 801848a:	b2db      	uxtb	r3, r3
 801848c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018490:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018498:	b2db      	uxtb	r3, r3
 801849a:	2b03      	cmp	r3, #3
 801849c:	d104      	bne.n	80184a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801849e:	6839      	ldr	r1, [r7, #0]
 80184a0:	6878      	ldr	r0, [r7, #4]
 80184a2:	f000 f9a3 	bl	80187ec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80184a6:	e01d      	b.n	80184e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	7bfa      	ldrb	r2, [r7, #15]
 80184ac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80184b0:	7bfb      	ldrb	r3, [r7, #15]
 80184b2:	4619      	mov	r1, r3
 80184b4:	6878      	ldr	r0, [r7, #4]
 80184b6:	f000 ff6f 	bl	8019398 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80184ba:	6878      	ldr	r0, [r7, #4]
 80184bc:	f000 fa61 	bl	8018982 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80184c0:	7bfb      	ldrb	r3, [r7, #15]
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d004      	beq.n	80184d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	2202      	movs	r2, #2
 80184ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80184ce:	e009      	b.n	80184e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	2201      	movs	r2, #1
 80184d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80184d8:	e004      	b.n	80184e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80184da:	6839      	ldr	r1, [r7, #0]
 80184dc:	6878      	ldr	r0, [r7, #4]
 80184de:	f000 f985 	bl	80187ec <USBD_CtlError>
  }
}
 80184e2:	bf00      	nop
 80184e4:	bf00      	nop
 80184e6:	3710      	adds	r7, #16
 80184e8:	46bd      	mov	sp, r7
 80184ea:	bd80      	pop	{r7, pc}

080184ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80184ec:	b580      	push	{r7, lr}
 80184ee:	b084      	sub	sp, #16
 80184f0:	af00      	add	r7, sp, #0
 80184f2:	6078      	str	r0, [r7, #4]
 80184f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80184f6:	2300      	movs	r3, #0
 80184f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80184fa:	683b      	ldr	r3, [r7, #0]
 80184fc:	885b      	ldrh	r3, [r3, #2]
 80184fe:	b2da      	uxtb	r2, r3
 8018500:	4b4c      	ldr	r3, [pc, #304]	; (8018634 <USBD_SetConfig+0x148>)
 8018502:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8018504:	4b4b      	ldr	r3, [pc, #300]	; (8018634 <USBD_SetConfig+0x148>)
 8018506:	781b      	ldrb	r3, [r3, #0]
 8018508:	2b01      	cmp	r3, #1
 801850a:	d905      	bls.n	8018518 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801850c:	6839      	ldr	r1, [r7, #0]
 801850e:	6878      	ldr	r0, [r7, #4]
 8018510:	f000 f96c 	bl	80187ec <USBD_CtlError>
    return USBD_FAIL;
 8018514:	2303      	movs	r3, #3
 8018516:	e088      	b.n	801862a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801851e:	b2db      	uxtb	r3, r3
 8018520:	2b02      	cmp	r3, #2
 8018522:	d002      	beq.n	801852a <USBD_SetConfig+0x3e>
 8018524:	2b03      	cmp	r3, #3
 8018526:	d025      	beq.n	8018574 <USBD_SetConfig+0x88>
 8018528:	e071      	b.n	801860e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801852a:	4b42      	ldr	r3, [pc, #264]	; (8018634 <USBD_SetConfig+0x148>)
 801852c:	781b      	ldrb	r3, [r3, #0]
 801852e:	2b00      	cmp	r3, #0
 8018530:	d01c      	beq.n	801856c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8018532:	4b40      	ldr	r3, [pc, #256]	; (8018634 <USBD_SetConfig+0x148>)
 8018534:	781b      	ldrb	r3, [r3, #0]
 8018536:	461a      	mov	r2, r3
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801853c:	4b3d      	ldr	r3, [pc, #244]	; (8018634 <USBD_SetConfig+0x148>)
 801853e:	781b      	ldrb	r3, [r3, #0]
 8018540:	4619      	mov	r1, r3
 8018542:	6878      	ldr	r0, [r7, #4]
 8018544:	f7ff f91e 	bl	8017784 <USBD_SetClassConfig>
 8018548:	4603      	mov	r3, r0
 801854a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801854c:	7bfb      	ldrb	r3, [r7, #15]
 801854e:	2b00      	cmp	r3, #0
 8018550:	d004      	beq.n	801855c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8018552:	6839      	ldr	r1, [r7, #0]
 8018554:	6878      	ldr	r0, [r7, #4]
 8018556:	f000 f949 	bl	80187ec <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801855a:	e065      	b.n	8018628 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801855c:	6878      	ldr	r0, [r7, #4]
 801855e:	f000 fa10 	bl	8018982 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	2203      	movs	r2, #3
 8018566:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801856a:	e05d      	b.n	8018628 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801856c:	6878      	ldr	r0, [r7, #4]
 801856e:	f000 fa08 	bl	8018982 <USBD_CtlSendStatus>
      break;
 8018572:	e059      	b.n	8018628 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8018574:	4b2f      	ldr	r3, [pc, #188]	; (8018634 <USBD_SetConfig+0x148>)
 8018576:	781b      	ldrb	r3, [r3, #0]
 8018578:	2b00      	cmp	r3, #0
 801857a:	d112      	bne.n	80185a2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	2202      	movs	r2, #2
 8018580:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8018584:	4b2b      	ldr	r3, [pc, #172]	; (8018634 <USBD_SetConfig+0x148>)
 8018586:	781b      	ldrb	r3, [r3, #0]
 8018588:	461a      	mov	r2, r3
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801858e:	4b29      	ldr	r3, [pc, #164]	; (8018634 <USBD_SetConfig+0x148>)
 8018590:	781b      	ldrb	r3, [r3, #0]
 8018592:	4619      	mov	r1, r3
 8018594:	6878      	ldr	r0, [r7, #4]
 8018596:	f7ff f911 	bl	80177bc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801859a:	6878      	ldr	r0, [r7, #4]
 801859c:	f000 f9f1 	bl	8018982 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80185a0:	e042      	b.n	8018628 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80185a2:	4b24      	ldr	r3, [pc, #144]	; (8018634 <USBD_SetConfig+0x148>)
 80185a4:	781b      	ldrb	r3, [r3, #0]
 80185a6:	461a      	mov	r2, r3
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	685b      	ldr	r3, [r3, #4]
 80185ac:	429a      	cmp	r2, r3
 80185ae:	d02a      	beq.n	8018606 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	685b      	ldr	r3, [r3, #4]
 80185b4:	b2db      	uxtb	r3, r3
 80185b6:	4619      	mov	r1, r3
 80185b8:	6878      	ldr	r0, [r7, #4]
 80185ba:	f7ff f8ff 	bl	80177bc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80185be:	4b1d      	ldr	r3, [pc, #116]	; (8018634 <USBD_SetConfig+0x148>)
 80185c0:	781b      	ldrb	r3, [r3, #0]
 80185c2:	461a      	mov	r2, r3
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80185c8:	4b1a      	ldr	r3, [pc, #104]	; (8018634 <USBD_SetConfig+0x148>)
 80185ca:	781b      	ldrb	r3, [r3, #0]
 80185cc:	4619      	mov	r1, r3
 80185ce:	6878      	ldr	r0, [r7, #4]
 80185d0:	f7ff f8d8 	bl	8017784 <USBD_SetClassConfig>
 80185d4:	4603      	mov	r3, r0
 80185d6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80185d8:	7bfb      	ldrb	r3, [r7, #15]
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d00f      	beq.n	80185fe <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80185de:	6839      	ldr	r1, [r7, #0]
 80185e0:	6878      	ldr	r0, [r7, #4]
 80185e2:	f000 f903 	bl	80187ec <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	685b      	ldr	r3, [r3, #4]
 80185ea:	b2db      	uxtb	r3, r3
 80185ec:	4619      	mov	r1, r3
 80185ee:	6878      	ldr	r0, [r7, #4]
 80185f0:	f7ff f8e4 	bl	80177bc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	2202      	movs	r2, #2
 80185f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80185fc:	e014      	b.n	8018628 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80185fe:	6878      	ldr	r0, [r7, #4]
 8018600:	f000 f9bf 	bl	8018982 <USBD_CtlSendStatus>
      break;
 8018604:	e010      	b.n	8018628 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8018606:	6878      	ldr	r0, [r7, #4]
 8018608:	f000 f9bb 	bl	8018982 <USBD_CtlSendStatus>
      break;
 801860c:	e00c      	b.n	8018628 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801860e:	6839      	ldr	r1, [r7, #0]
 8018610:	6878      	ldr	r0, [r7, #4]
 8018612:	f000 f8eb 	bl	80187ec <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8018616:	4b07      	ldr	r3, [pc, #28]	; (8018634 <USBD_SetConfig+0x148>)
 8018618:	781b      	ldrb	r3, [r3, #0]
 801861a:	4619      	mov	r1, r3
 801861c:	6878      	ldr	r0, [r7, #4]
 801861e:	f7ff f8cd 	bl	80177bc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8018622:	2303      	movs	r3, #3
 8018624:	73fb      	strb	r3, [r7, #15]
      break;
 8018626:	bf00      	nop
  }

  return ret;
 8018628:	7bfb      	ldrb	r3, [r7, #15]
}
 801862a:	4618      	mov	r0, r3
 801862c:	3710      	adds	r7, #16
 801862e:	46bd      	mov	sp, r7
 8018630:	bd80      	pop	{r7, pc}
 8018632:	bf00      	nop
 8018634:	200013d0 	.word	0x200013d0

08018638 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018638:	b580      	push	{r7, lr}
 801863a:	b082      	sub	sp, #8
 801863c:	af00      	add	r7, sp, #0
 801863e:	6078      	str	r0, [r7, #4]
 8018640:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8018642:	683b      	ldr	r3, [r7, #0]
 8018644:	88db      	ldrh	r3, [r3, #6]
 8018646:	2b01      	cmp	r3, #1
 8018648:	d004      	beq.n	8018654 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801864a:	6839      	ldr	r1, [r7, #0]
 801864c:	6878      	ldr	r0, [r7, #4]
 801864e:	f000 f8cd 	bl	80187ec <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8018652:	e023      	b.n	801869c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801865a:	b2db      	uxtb	r3, r3
 801865c:	2b02      	cmp	r3, #2
 801865e:	dc02      	bgt.n	8018666 <USBD_GetConfig+0x2e>
 8018660:	2b00      	cmp	r3, #0
 8018662:	dc03      	bgt.n	801866c <USBD_GetConfig+0x34>
 8018664:	e015      	b.n	8018692 <USBD_GetConfig+0x5a>
 8018666:	2b03      	cmp	r3, #3
 8018668:	d00b      	beq.n	8018682 <USBD_GetConfig+0x4a>
 801866a:	e012      	b.n	8018692 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	2200      	movs	r2, #0
 8018670:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	3308      	adds	r3, #8
 8018676:	2201      	movs	r2, #1
 8018678:	4619      	mov	r1, r3
 801867a:	6878      	ldr	r0, [r7, #4]
 801867c:	f000 f927 	bl	80188ce <USBD_CtlSendData>
        break;
 8018680:	e00c      	b.n	801869c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	3304      	adds	r3, #4
 8018686:	2201      	movs	r2, #1
 8018688:	4619      	mov	r1, r3
 801868a:	6878      	ldr	r0, [r7, #4]
 801868c:	f000 f91f 	bl	80188ce <USBD_CtlSendData>
        break;
 8018690:	e004      	b.n	801869c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8018692:	6839      	ldr	r1, [r7, #0]
 8018694:	6878      	ldr	r0, [r7, #4]
 8018696:	f000 f8a9 	bl	80187ec <USBD_CtlError>
        break;
 801869a:	bf00      	nop
}
 801869c:	bf00      	nop
 801869e:	3708      	adds	r7, #8
 80186a0:	46bd      	mov	sp, r7
 80186a2:	bd80      	pop	{r7, pc}

080186a4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80186a4:	b580      	push	{r7, lr}
 80186a6:	b082      	sub	sp, #8
 80186a8:	af00      	add	r7, sp, #0
 80186aa:	6078      	str	r0, [r7, #4]
 80186ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80186b4:	b2db      	uxtb	r3, r3
 80186b6:	3b01      	subs	r3, #1
 80186b8:	2b02      	cmp	r3, #2
 80186ba:	d81e      	bhi.n	80186fa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80186bc:	683b      	ldr	r3, [r7, #0]
 80186be:	88db      	ldrh	r3, [r3, #6]
 80186c0:	2b02      	cmp	r3, #2
 80186c2:	d004      	beq.n	80186ce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80186c4:	6839      	ldr	r1, [r7, #0]
 80186c6:	6878      	ldr	r0, [r7, #4]
 80186c8:	f000 f890 	bl	80187ec <USBD_CtlError>
        break;
 80186cc:	e01a      	b.n	8018704 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	2201      	movs	r2, #1
 80186d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d005      	beq.n	80186ea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	68db      	ldr	r3, [r3, #12]
 80186e2:	f043 0202 	orr.w	r2, r3, #2
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	330c      	adds	r3, #12
 80186ee:	2202      	movs	r2, #2
 80186f0:	4619      	mov	r1, r3
 80186f2:	6878      	ldr	r0, [r7, #4]
 80186f4:	f000 f8eb 	bl	80188ce <USBD_CtlSendData>
      break;
 80186f8:	e004      	b.n	8018704 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80186fa:	6839      	ldr	r1, [r7, #0]
 80186fc:	6878      	ldr	r0, [r7, #4]
 80186fe:	f000 f875 	bl	80187ec <USBD_CtlError>
      break;
 8018702:	bf00      	nop
  }
}
 8018704:	bf00      	nop
 8018706:	3708      	adds	r7, #8
 8018708:	46bd      	mov	sp, r7
 801870a:	bd80      	pop	{r7, pc}

0801870c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801870c:	b580      	push	{r7, lr}
 801870e:	b082      	sub	sp, #8
 8018710:	af00      	add	r7, sp, #0
 8018712:	6078      	str	r0, [r7, #4]
 8018714:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018716:	683b      	ldr	r3, [r7, #0]
 8018718:	885b      	ldrh	r3, [r3, #2]
 801871a:	2b01      	cmp	r3, #1
 801871c:	d106      	bne.n	801872c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	2201      	movs	r2, #1
 8018722:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8018726:	6878      	ldr	r0, [r7, #4]
 8018728:	f000 f92b 	bl	8018982 <USBD_CtlSendStatus>
  }
}
 801872c:	bf00      	nop
 801872e:	3708      	adds	r7, #8
 8018730:	46bd      	mov	sp, r7
 8018732:	bd80      	pop	{r7, pc}

08018734 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018734:	b580      	push	{r7, lr}
 8018736:	b082      	sub	sp, #8
 8018738:	af00      	add	r7, sp, #0
 801873a:	6078      	str	r0, [r7, #4]
 801873c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018744:	b2db      	uxtb	r3, r3
 8018746:	3b01      	subs	r3, #1
 8018748:	2b02      	cmp	r3, #2
 801874a:	d80b      	bhi.n	8018764 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801874c:	683b      	ldr	r3, [r7, #0]
 801874e:	885b      	ldrh	r3, [r3, #2]
 8018750:	2b01      	cmp	r3, #1
 8018752:	d10c      	bne.n	801876e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	2200      	movs	r2, #0
 8018758:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801875c:	6878      	ldr	r0, [r7, #4]
 801875e:	f000 f910 	bl	8018982 <USBD_CtlSendStatus>
      }
      break;
 8018762:	e004      	b.n	801876e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8018764:	6839      	ldr	r1, [r7, #0]
 8018766:	6878      	ldr	r0, [r7, #4]
 8018768:	f000 f840 	bl	80187ec <USBD_CtlError>
      break;
 801876c:	e000      	b.n	8018770 <USBD_ClrFeature+0x3c>
      break;
 801876e:	bf00      	nop
  }
}
 8018770:	bf00      	nop
 8018772:	3708      	adds	r7, #8
 8018774:	46bd      	mov	sp, r7
 8018776:	bd80      	pop	{r7, pc}

08018778 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8018778:	b580      	push	{r7, lr}
 801877a:	b084      	sub	sp, #16
 801877c:	af00      	add	r7, sp, #0
 801877e:	6078      	str	r0, [r7, #4]
 8018780:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8018782:	683b      	ldr	r3, [r7, #0]
 8018784:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8018786:	68fb      	ldr	r3, [r7, #12]
 8018788:	781a      	ldrb	r2, [r3, #0]
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801878e:	68fb      	ldr	r3, [r7, #12]
 8018790:	3301      	adds	r3, #1
 8018792:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8018794:	68fb      	ldr	r3, [r7, #12]
 8018796:	781a      	ldrb	r2, [r3, #0]
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	3301      	adds	r3, #1
 80187a0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80187a2:	68f8      	ldr	r0, [r7, #12]
 80187a4:	f7ff fa91 	bl	8017cca <SWAPBYTE>
 80187a8:	4603      	mov	r3, r0
 80187aa:	461a      	mov	r2, r3
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80187b0:	68fb      	ldr	r3, [r7, #12]
 80187b2:	3301      	adds	r3, #1
 80187b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80187b6:	68fb      	ldr	r3, [r7, #12]
 80187b8:	3301      	adds	r3, #1
 80187ba:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80187bc:	68f8      	ldr	r0, [r7, #12]
 80187be:	f7ff fa84 	bl	8017cca <SWAPBYTE>
 80187c2:	4603      	mov	r3, r0
 80187c4:	461a      	mov	r2, r3
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	3301      	adds	r3, #1
 80187ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80187d0:	68fb      	ldr	r3, [r7, #12]
 80187d2:	3301      	adds	r3, #1
 80187d4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80187d6:	68f8      	ldr	r0, [r7, #12]
 80187d8:	f7ff fa77 	bl	8017cca <SWAPBYTE>
 80187dc:	4603      	mov	r3, r0
 80187de:	461a      	mov	r2, r3
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	80da      	strh	r2, [r3, #6]
}
 80187e4:	bf00      	nop
 80187e6:	3710      	adds	r7, #16
 80187e8:	46bd      	mov	sp, r7
 80187ea:	bd80      	pop	{r7, pc}

080187ec <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80187ec:	b580      	push	{r7, lr}
 80187ee:	b082      	sub	sp, #8
 80187f0:	af00      	add	r7, sp, #0
 80187f2:	6078      	str	r0, [r7, #4]
 80187f4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80187f6:	2180      	movs	r1, #128	; 0x80
 80187f8:	6878      	ldr	r0, [r7, #4]
 80187fa:	f000 fd35 	bl	8019268 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80187fe:	2100      	movs	r1, #0
 8018800:	6878      	ldr	r0, [r7, #4]
 8018802:	f000 fd31 	bl	8019268 <USBD_LL_StallEP>
}
 8018806:	bf00      	nop
 8018808:	3708      	adds	r7, #8
 801880a:	46bd      	mov	sp, r7
 801880c:	bd80      	pop	{r7, pc}

0801880e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801880e:	b580      	push	{r7, lr}
 8018810:	b086      	sub	sp, #24
 8018812:	af00      	add	r7, sp, #0
 8018814:	60f8      	str	r0, [r7, #12]
 8018816:	60b9      	str	r1, [r7, #8]
 8018818:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801881a:	2300      	movs	r3, #0
 801881c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	2b00      	cmp	r3, #0
 8018822:	d036      	beq.n	8018892 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8018828:	6938      	ldr	r0, [r7, #16]
 801882a:	f000 f836 	bl	801889a <USBD_GetLen>
 801882e:	4603      	mov	r3, r0
 8018830:	3301      	adds	r3, #1
 8018832:	b29b      	uxth	r3, r3
 8018834:	005b      	lsls	r3, r3, #1
 8018836:	b29a      	uxth	r2, r3
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801883c:	7dfb      	ldrb	r3, [r7, #23]
 801883e:	68ba      	ldr	r2, [r7, #8]
 8018840:	4413      	add	r3, r2
 8018842:	687a      	ldr	r2, [r7, #4]
 8018844:	7812      	ldrb	r2, [r2, #0]
 8018846:	701a      	strb	r2, [r3, #0]
  idx++;
 8018848:	7dfb      	ldrb	r3, [r7, #23]
 801884a:	3301      	adds	r3, #1
 801884c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801884e:	7dfb      	ldrb	r3, [r7, #23]
 8018850:	68ba      	ldr	r2, [r7, #8]
 8018852:	4413      	add	r3, r2
 8018854:	2203      	movs	r2, #3
 8018856:	701a      	strb	r2, [r3, #0]
  idx++;
 8018858:	7dfb      	ldrb	r3, [r7, #23]
 801885a:	3301      	adds	r3, #1
 801885c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801885e:	e013      	b.n	8018888 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8018860:	7dfb      	ldrb	r3, [r7, #23]
 8018862:	68ba      	ldr	r2, [r7, #8]
 8018864:	4413      	add	r3, r2
 8018866:	693a      	ldr	r2, [r7, #16]
 8018868:	7812      	ldrb	r2, [r2, #0]
 801886a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801886c:	693b      	ldr	r3, [r7, #16]
 801886e:	3301      	adds	r3, #1
 8018870:	613b      	str	r3, [r7, #16]
    idx++;
 8018872:	7dfb      	ldrb	r3, [r7, #23]
 8018874:	3301      	adds	r3, #1
 8018876:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8018878:	7dfb      	ldrb	r3, [r7, #23]
 801887a:	68ba      	ldr	r2, [r7, #8]
 801887c:	4413      	add	r3, r2
 801887e:	2200      	movs	r2, #0
 8018880:	701a      	strb	r2, [r3, #0]
    idx++;
 8018882:	7dfb      	ldrb	r3, [r7, #23]
 8018884:	3301      	adds	r3, #1
 8018886:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8018888:	693b      	ldr	r3, [r7, #16]
 801888a:	781b      	ldrb	r3, [r3, #0]
 801888c:	2b00      	cmp	r3, #0
 801888e:	d1e7      	bne.n	8018860 <USBD_GetString+0x52>
 8018890:	e000      	b.n	8018894 <USBD_GetString+0x86>
    return;
 8018892:	bf00      	nop
  }
}
 8018894:	3718      	adds	r7, #24
 8018896:	46bd      	mov	sp, r7
 8018898:	bd80      	pop	{r7, pc}

0801889a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801889a:	b480      	push	{r7}
 801889c:	b085      	sub	sp, #20
 801889e:	af00      	add	r7, sp, #0
 80188a0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80188a2:	2300      	movs	r3, #0
 80188a4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80188aa:	e005      	b.n	80188b8 <USBD_GetLen+0x1e>
  {
    len++;
 80188ac:	7bfb      	ldrb	r3, [r7, #15]
 80188ae:	3301      	adds	r3, #1
 80188b0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80188b2:	68bb      	ldr	r3, [r7, #8]
 80188b4:	3301      	adds	r3, #1
 80188b6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80188b8:	68bb      	ldr	r3, [r7, #8]
 80188ba:	781b      	ldrb	r3, [r3, #0]
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d1f5      	bne.n	80188ac <USBD_GetLen+0x12>
  }

  return len;
 80188c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80188c2:	4618      	mov	r0, r3
 80188c4:	3714      	adds	r7, #20
 80188c6:	46bd      	mov	sp, r7
 80188c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188cc:	4770      	bx	lr

080188ce <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80188ce:	b580      	push	{r7, lr}
 80188d0:	b084      	sub	sp, #16
 80188d2:	af00      	add	r7, sp, #0
 80188d4:	60f8      	str	r0, [r7, #12]
 80188d6:	60b9      	str	r1, [r7, #8]
 80188d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80188da:	68fb      	ldr	r3, [r7, #12]
 80188dc:	2202      	movs	r2, #2
 80188de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80188e2:	68fb      	ldr	r3, [r7, #12]
 80188e4:	687a      	ldr	r2, [r7, #4]
 80188e6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80188e8:	68fb      	ldr	r3, [r7, #12]
 80188ea:	687a      	ldr	r2, [r7, #4]
 80188ec:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	68ba      	ldr	r2, [r7, #8]
 80188f2:	2100      	movs	r1, #0
 80188f4:	68f8      	ldr	r0, [r7, #12]
 80188f6:	f000 fd85 	bl	8019404 <USBD_LL_Transmit>

  return USBD_OK;
 80188fa:	2300      	movs	r3, #0
}
 80188fc:	4618      	mov	r0, r3
 80188fe:	3710      	adds	r7, #16
 8018900:	46bd      	mov	sp, r7
 8018902:	bd80      	pop	{r7, pc}

08018904 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8018904:	b580      	push	{r7, lr}
 8018906:	b084      	sub	sp, #16
 8018908:	af00      	add	r7, sp, #0
 801890a:	60f8      	str	r0, [r7, #12]
 801890c:	60b9      	str	r1, [r7, #8]
 801890e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	68ba      	ldr	r2, [r7, #8]
 8018914:	2100      	movs	r1, #0
 8018916:	68f8      	ldr	r0, [r7, #12]
 8018918:	f000 fd74 	bl	8019404 <USBD_LL_Transmit>

  return USBD_OK;
 801891c:	2300      	movs	r3, #0
}
 801891e:	4618      	mov	r0, r3
 8018920:	3710      	adds	r7, #16
 8018922:	46bd      	mov	sp, r7
 8018924:	bd80      	pop	{r7, pc}

08018926 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8018926:	b580      	push	{r7, lr}
 8018928:	b084      	sub	sp, #16
 801892a:	af00      	add	r7, sp, #0
 801892c:	60f8      	str	r0, [r7, #12]
 801892e:	60b9      	str	r1, [r7, #8]
 8018930:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8018932:	68fb      	ldr	r3, [r7, #12]
 8018934:	2203      	movs	r2, #3
 8018936:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801893a:	68fb      	ldr	r3, [r7, #12]
 801893c:	687a      	ldr	r2, [r7, #4]
 801893e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8018942:	68fb      	ldr	r3, [r7, #12]
 8018944:	687a      	ldr	r2, [r7, #4]
 8018946:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	68ba      	ldr	r2, [r7, #8]
 801894e:	2100      	movs	r1, #0
 8018950:	68f8      	ldr	r0, [r7, #12]
 8018952:	f000 fd8f 	bl	8019474 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018956:	2300      	movs	r3, #0
}
 8018958:	4618      	mov	r0, r3
 801895a:	3710      	adds	r7, #16
 801895c:	46bd      	mov	sp, r7
 801895e:	bd80      	pop	{r7, pc}

08018960 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8018960:	b580      	push	{r7, lr}
 8018962:	b084      	sub	sp, #16
 8018964:	af00      	add	r7, sp, #0
 8018966:	60f8      	str	r0, [r7, #12]
 8018968:	60b9      	str	r1, [r7, #8]
 801896a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	68ba      	ldr	r2, [r7, #8]
 8018970:	2100      	movs	r1, #0
 8018972:	68f8      	ldr	r0, [r7, #12]
 8018974:	f000 fd7e 	bl	8019474 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018978:	2300      	movs	r3, #0
}
 801897a:	4618      	mov	r0, r3
 801897c:	3710      	adds	r7, #16
 801897e:	46bd      	mov	sp, r7
 8018980:	bd80      	pop	{r7, pc}

08018982 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8018982:	b580      	push	{r7, lr}
 8018984:	b082      	sub	sp, #8
 8018986:	af00      	add	r7, sp, #0
 8018988:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	2204      	movs	r2, #4
 801898e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8018992:	2300      	movs	r3, #0
 8018994:	2200      	movs	r2, #0
 8018996:	2100      	movs	r1, #0
 8018998:	6878      	ldr	r0, [r7, #4]
 801899a:	f000 fd33 	bl	8019404 <USBD_LL_Transmit>

  return USBD_OK;
 801899e:	2300      	movs	r3, #0
}
 80189a0:	4618      	mov	r0, r3
 80189a2:	3708      	adds	r7, #8
 80189a4:	46bd      	mov	sp, r7
 80189a6:	bd80      	pop	{r7, pc}

080189a8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80189a8:	b580      	push	{r7, lr}
 80189aa:	b082      	sub	sp, #8
 80189ac:	af00      	add	r7, sp, #0
 80189ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	2205      	movs	r2, #5
 80189b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80189b8:	2300      	movs	r3, #0
 80189ba:	2200      	movs	r2, #0
 80189bc:	2100      	movs	r1, #0
 80189be:	6878      	ldr	r0, [r7, #4]
 80189c0:	f000 fd58 	bl	8019474 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80189c4:	2300      	movs	r3, #0
}
 80189c6:	4618      	mov	r0, r3
 80189c8:	3708      	adds	r7, #8
 80189ca:	46bd      	mov	sp, r7
 80189cc:	bd80      	pop	{r7, pc}
	...

080189d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80189d0:	b580      	push	{r7, lr}
 80189d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80189d4:	2200      	movs	r2, #0
 80189d6:	4912      	ldr	r1, [pc, #72]	; (8018a20 <MX_USB_DEVICE_Init+0x50>)
 80189d8:	4812      	ldr	r0, [pc, #72]	; (8018a24 <MX_USB_DEVICE_Init+0x54>)
 80189da:	f7fe fe65 	bl	80176a8 <USBD_Init>
 80189de:	4603      	mov	r3, r0
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	d001      	beq.n	80189e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80189e4:	f7e9 fcfa 	bl	80023dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80189e8:	490f      	ldr	r1, [pc, #60]	; (8018a28 <MX_USB_DEVICE_Init+0x58>)
 80189ea:	480e      	ldr	r0, [pc, #56]	; (8018a24 <MX_USB_DEVICE_Init+0x54>)
 80189ec:	f7fe fe8c 	bl	8017708 <USBD_RegisterClass>
 80189f0:	4603      	mov	r3, r0
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d001      	beq.n	80189fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80189f6:	f7e9 fcf1 	bl	80023dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80189fa:	490c      	ldr	r1, [pc, #48]	; (8018a2c <MX_USB_DEVICE_Init+0x5c>)
 80189fc:	4809      	ldr	r0, [pc, #36]	; (8018a24 <MX_USB_DEVICE_Init+0x54>)
 80189fe:	f7fe fddd 	bl	80175bc <USBD_CDC_RegisterInterface>
 8018a02:	4603      	mov	r3, r0
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	d001      	beq.n	8018a0c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018a08:	f7e9 fce8 	bl	80023dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018a0c:	4805      	ldr	r0, [pc, #20]	; (8018a24 <MX_USB_DEVICE_Init+0x54>)
 8018a0e:	f7fe fea2 	bl	8017756 <USBD_Start>
 8018a12:	4603      	mov	r3, r0
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d001      	beq.n	8018a1c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018a18:	f7e9 fce0 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018a1c:	bf00      	nop
 8018a1e:	bd80      	pop	{r7, pc}
 8018a20:	2000067c 	.word	0x2000067c
 8018a24:	200013d4 	.word	0x200013d4
 8018a28:	20000564 	.word	0x20000564
 8018a2c:	20000668 	.word	0x20000668

08018a30 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018a30:	b580      	push	{r7, lr}
 8018a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018a34:	2200      	movs	r2, #0
 8018a36:	4905      	ldr	r1, [pc, #20]	; (8018a4c <CDC_Init_FS+0x1c>)
 8018a38:	4805      	ldr	r0, [pc, #20]	; (8018a50 <CDC_Init_FS+0x20>)
 8018a3a:	f7fe fdd4 	bl	80175e6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8018a3e:	4905      	ldr	r1, [pc, #20]	; (8018a54 <CDC_Init_FS+0x24>)
 8018a40:	4803      	ldr	r0, [pc, #12]	; (8018a50 <CDC_Init_FS+0x20>)
 8018a42:	f7fe fdee 	bl	8017622 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018a46:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018a48:	4618      	mov	r0, r3
 8018a4a:	bd80      	pop	{r7, pc}
 8018a4c:	20001ea4 	.word	0x20001ea4
 8018a50:	200013d4 	.word	0x200013d4
 8018a54:	200016a4 	.word	0x200016a4

08018a58 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018a58:	b480      	push	{r7}
 8018a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018a5c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018a5e:	4618      	mov	r0, r3
 8018a60:	46bd      	mov	sp, r7
 8018a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a66:	4770      	bx	lr

08018a68 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018a68:	b480      	push	{r7}
 8018a6a:	b083      	sub	sp, #12
 8018a6c:	af00      	add	r7, sp, #0
 8018a6e:	4603      	mov	r3, r0
 8018a70:	6039      	str	r1, [r7, #0]
 8018a72:	71fb      	strb	r3, [r7, #7]
 8018a74:	4613      	mov	r3, r2
 8018a76:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8018a78:	79fb      	ldrb	r3, [r7, #7]
 8018a7a:	2b23      	cmp	r3, #35	; 0x23
 8018a7c:	d84a      	bhi.n	8018b14 <CDC_Control_FS+0xac>
 8018a7e:	a201      	add	r2, pc, #4	; (adr r2, 8018a84 <CDC_Control_FS+0x1c>)
 8018a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a84:	08018b15 	.word	0x08018b15
 8018a88:	08018b15 	.word	0x08018b15
 8018a8c:	08018b15 	.word	0x08018b15
 8018a90:	08018b15 	.word	0x08018b15
 8018a94:	08018b15 	.word	0x08018b15
 8018a98:	08018b15 	.word	0x08018b15
 8018a9c:	08018b15 	.word	0x08018b15
 8018aa0:	08018b15 	.word	0x08018b15
 8018aa4:	08018b15 	.word	0x08018b15
 8018aa8:	08018b15 	.word	0x08018b15
 8018aac:	08018b15 	.word	0x08018b15
 8018ab0:	08018b15 	.word	0x08018b15
 8018ab4:	08018b15 	.word	0x08018b15
 8018ab8:	08018b15 	.word	0x08018b15
 8018abc:	08018b15 	.word	0x08018b15
 8018ac0:	08018b15 	.word	0x08018b15
 8018ac4:	08018b15 	.word	0x08018b15
 8018ac8:	08018b15 	.word	0x08018b15
 8018acc:	08018b15 	.word	0x08018b15
 8018ad0:	08018b15 	.word	0x08018b15
 8018ad4:	08018b15 	.word	0x08018b15
 8018ad8:	08018b15 	.word	0x08018b15
 8018adc:	08018b15 	.word	0x08018b15
 8018ae0:	08018b15 	.word	0x08018b15
 8018ae4:	08018b15 	.word	0x08018b15
 8018ae8:	08018b15 	.word	0x08018b15
 8018aec:	08018b15 	.word	0x08018b15
 8018af0:	08018b15 	.word	0x08018b15
 8018af4:	08018b15 	.word	0x08018b15
 8018af8:	08018b15 	.word	0x08018b15
 8018afc:	08018b15 	.word	0x08018b15
 8018b00:	08018b15 	.word	0x08018b15
 8018b04:	08018b15 	.word	0x08018b15
 8018b08:	08018b15 	.word	0x08018b15
 8018b0c:	08018b15 	.word	0x08018b15
 8018b10:	08018b15 	.word	0x08018b15
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018b14:	bf00      	nop
  }

  return (USBD_OK);
 8018b16:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018b18:	4618      	mov	r0, r3
 8018b1a:	370c      	adds	r7, #12
 8018b1c:	46bd      	mov	sp, r7
 8018b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b22:	4770      	bx	lr

08018b24 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018b24:	b580      	push	{r7, lr}
 8018b26:	b082      	sub	sp, #8
 8018b28:	af00      	add	r7, sp, #0
 8018b2a:	6078      	str	r0, [r7, #4]
 8018b2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018b2e:	6879      	ldr	r1, [r7, #4]
 8018b30:	4805      	ldr	r0, [pc, #20]	; (8018b48 <CDC_Receive_FS+0x24>)
 8018b32:	f7fe fd76 	bl	8017622 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018b36:	4804      	ldr	r0, [pc, #16]	; (8018b48 <CDC_Receive_FS+0x24>)
 8018b38:	f7fe fd8c 	bl	8017654 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8018b3c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8018b3e:	4618      	mov	r0, r3
 8018b40:	3708      	adds	r7, #8
 8018b42:	46bd      	mov	sp, r7
 8018b44:	bd80      	pop	{r7, pc}
 8018b46:	bf00      	nop
 8018b48:	200013d4 	.word	0x200013d4

08018b4c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018b4c:	b480      	push	{r7}
 8018b4e:	b087      	sub	sp, #28
 8018b50:	af00      	add	r7, sp, #0
 8018b52:	60f8      	str	r0, [r7, #12]
 8018b54:	60b9      	str	r1, [r7, #8]
 8018b56:	4613      	mov	r3, r2
 8018b58:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018b5a:	2300      	movs	r3, #0
 8018b5c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8018b5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018b62:	4618      	mov	r0, r3
 8018b64:	371c      	adds	r7, #28
 8018b66:	46bd      	mov	sp, r7
 8018b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b6c:	4770      	bx	lr
	...

08018b70 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b70:	b480      	push	{r7}
 8018b72:	b083      	sub	sp, #12
 8018b74:	af00      	add	r7, sp, #0
 8018b76:	4603      	mov	r3, r0
 8018b78:	6039      	str	r1, [r7, #0]
 8018b7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018b7c:	683b      	ldr	r3, [r7, #0]
 8018b7e:	2212      	movs	r2, #18
 8018b80:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8018b82:	4b03      	ldr	r3, [pc, #12]	; (8018b90 <USBD_FS_DeviceDescriptor+0x20>)
}
 8018b84:	4618      	mov	r0, r3
 8018b86:	370c      	adds	r7, #12
 8018b88:	46bd      	mov	sp, r7
 8018b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b8e:	4770      	bx	lr
 8018b90:	2000069c 	.word	0x2000069c

08018b94 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b94:	b480      	push	{r7}
 8018b96:	b083      	sub	sp, #12
 8018b98:	af00      	add	r7, sp, #0
 8018b9a:	4603      	mov	r3, r0
 8018b9c:	6039      	str	r1, [r7, #0]
 8018b9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018ba0:	683b      	ldr	r3, [r7, #0]
 8018ba2:	2204      	movs	r2, #4
 8018ba4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018ba6:	4b03      	ldr	r3, [pc, #12]	; (8018bb4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018ba8:	4618      	mov	r0, r3
 8018baa:	370c      	adds	r7, #12
 8018bac:	46bd      	mov	sp, r7
 8018bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bb2:	4770      	bx	lr
 8018bb4:	200006bc 	.word	0x200006bc

08018bb8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018bb8:	b580      	push	{r7, lr}
 8018bba:	b082      	sub	sp, #8
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	4603      	mov	r3, r0
 8018bc0:	6039      	str	r1, [r7, #0]
 8018bc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018bc4:	79fb      	ldrb	r3, [r7, #7]
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	d105      	bne.n	8018bd6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018bca:	683a      	ldr	r2, [r7, #0]
 8018bcc:	4907      	ldr	r1, [pc, #28]	; (8018bec <USBD_FS_ProductStrDescriptor+0x34>)
 8018bce:	4808      	ldr	r0, [pc, #32]	; (8018bf0 <USBD_FS_ProductStrDescriptor+0x38>)
 8018bd0:	f7ff fe1d 	bl	801880e <USBD_GetString>
 8018bd4:	e004      	b.n	8018be0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018bd6:	683a      	ldr	r2, [r7, #0]
 8018bd8:	4904      	ldr	r1, [pc, #16]	; (8018bec <USBD_FS_ProductStrDescriptor+0x34>)
 8018bda:	4805      	ldr	r0, [pc, #20]	; (8018bf0 <USBD_FS_ProductStrDescriptor+0x38>)
 8018bdc:	f7ff fe17 	bl	801880e <USBD_GetString>
  }
  return USBD_StrDesc;
 8018be0:	4b02      	ldr	r3, [pc, #8]	; (8018bec <USBD_FS_ProductStrDescriptor+0x34>)
}
 8018be2:	4618      	mov	r0, r3
 8018be4:	3708      	adds	r7, #8
 8018be6:	46bd      	mov	sp, r7
 8018be8:	bd80      	pop	{r7, pc}
 8018bea:	bf00      	nop
 8018bec:	200026a4 	.word	0x200026a4
 8018bf0:	0801ab40 	.word	0x0801ab40

08018bf4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018bf4:	b580      	push	{r7, lr}
 8018bf6:	b082      	sub	sp, #8
 8018bf8:	af00      	add	r7, sp, #0
 8018bfa:	4603      	mov	r3, r0
 8018bfc:	6039      	str	r1, [r7, #0]
 8018bfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018c00:	683a      	ldr	r2, [r7, #0]
 8018c02:	4904      	ldr	r1, [pc, #16]	; (8018c14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018c04:	4804      	ldr	r0, [pc, #16]	; (8018c18 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018c06:	f7ff fe02 	bl	801880e <USBD_GetString>
  return USBD_StrDesc;
 8018c0a:	4b02      	ldr	r3, [pc, #8]	; (8018c14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018c0c:	4618      	mov	r0, r3
 8018c0e:	3708      	adds	r7, #8
 8018c10:	46bd      	mov	sp, r7
 8018c12:	bd80      	pop	{r7, pc}
 8018c14:	200026a4 	.word	0x200026a4
 8018c18:	0801ab58 	.word	0x0801ab58

08018c1c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018c1c:	b580      	push	{r7, lr}
 8018c1e:	b082      	sub	sp, #8
 8018c20:	af00      	add	r7, sp, #0
 8018c22:	4603      	mov	r3, r0
 8018c24:	6039      	str	r1, [r7, #0]
 8018c26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018c28:	683b      	ldr	r3, [r7, #0]
 8018c2a:	221a      	movs	r2, #26
 8018c2c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018c2e:	f000 f855 	bl	8018cdc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8018c32:	4b02      	ldr	r3, [pc, #8]	; (8018c3c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018c34:	4618      	mov	r0, r3
 8018c36:	3708      	adds	r7, #8
 8018c38:	46bd      	mov	sp, r7
 8018c3a:	bd80      	pop	{r7, pc}
 8018c3c:	200006c0 	.word	0x200006c0

08018c40 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018c40:	b580      	push	{r7, lr}
 8018c42:	b082      	sub	sp, #8
 8018c44:	af00      	add	r7, sp, #0
 8018c46:	4603      	mov	r3, r0
 8018c48:	6039      	str	r1, [r7, #0]
 8018c4a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018c4c:	79fb      	ldrb	r3, [r7, #7]
 8018c4e:	2b00      	cmp	r3, #0
 8018c50:	d105      	bne.n	8018c5e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018c52:	683a      	ldr	r2, [r7, #0]
 8018c54:	4907      	ldr	r1, [pc, #28]	; (8018c74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018c56:	4808      	ldr	r0, [pc, #32]	; (8018c78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018c58:	f7ff fdd9 	bl	801880e <USBD_GetString>
 8018c5c:	e004      	b.n	8018c68 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018c5e:	683a      	ldr	r2, [r7, #0]
 8018c60:	4904      	ldr	r1, [pc, #16]	; (8018c74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018c62:	4805      	ldr	r0, [pc, #20]	; (8018c78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018c64:	f7ff fdd3 	bl	801880e <USBD_GetString>
  }
  return USBD_StrDesc;
 8018c68:	4b02      	ldr	r3, [pc, #8]	; (8018c74 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018c6a:	4618      	mov	r0, r3
 8018c6c:	3708      	adds	r7, #8
 8018c6e:	46bd      	mov	sp, r7
 8018c70:	bd80      	pop	{r7, pc}
 8018c72:	bf00      	nop
 8018c74:	200026a4 	.word	0x200026a4
 8018c78:	0801ab6c 	.word	0x0801ab6c

08018c7c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018c7c:	b580      	push	{r7, lr}
 8018c7e:	b082      	sub	sp, #8
 8018c80:	af00      	add	r7, sp, #0
 8018c82:	4603      	mov	r3, r0
 8018c84:	6039      	str	r1, [r7, #0]
 8018c86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018c88:	79fb      	ldrb	r3, [r7, #7]
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d105      	bne.n	8018c9a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018c8e:	683a      	ldr	r2, [r7, #0]
 8018c90:	4907      	ldr	r1, [pc, #28]	; (8018cb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018c92:	4808      	ldr	r0, [pc, #32]	; (8018cb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018c94:	f7ff fdbb 	bl	801880e <USBD_GetString>
 8018c98:	e004      	b.n	8018ca4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018c9a:	683a      	ldr	r2, [r7, #0]
 8018c9c:	4904      	ldr	r1, [pc, #16]	; (8018cb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018c9e:	4805      	ldr	r0, [pc, #20]	; (8018cb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018ca0:	f7ff fdb5 	bl	801880e <USBD_GetString>
  }
  return USBD_StrDesc;
 8018ca4:	4b02      	ldr	r3, [pc, #8]	; (8018cb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018ca6:	4618      	mov	r0, r3
 8018ca8:	3708      	adds	r7, #8
 8018caa:	46bd      	mov	sp, r7
 8018cac:	bd80      	pop	{r7, pc}
 8018cae:	bf00      	nop
 8018cb0:	200026a4 	.word	0x200026a4
 8018cb4:	0801ab78 	.word	0x0801ab78

08018cb8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018cb8:	b480      	push	{r7}
 8018cba:	b083      	sub	sp, #12
 8018cbc:	af00      	add	r7, sp, #0
 8018cbe:	4603      	mov	r3, r0
 8018cc0:	6039      	str	r1, [r7, #0]
 8018cc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8018cc4:	683b      	ldr	r3, [r7, #0]
 8018cc6:	220c      	movs	r2, #12
 8018cc8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8018cca:	4b03      	ldr	r3, [pc, #12]	; (8018cd8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8018ccc:	4618      	mov	r0, r3
 8018cce:	370c      	adds	r7, #12
 8018cd0:	46bd      	mov	sp, r7
 8018cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cd6:	4770      	bx	lr
 8018cd8:	200006b0 	.word	0x200006b0

08018cdc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018cdc:	b580      	push	{r7, lr}
 8018cde:	b084      	sub	sp, #16
 8018ce0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018ce2:	4b0f      	ldr	r3, [pc, #60]	; (8018d20 <Get_SerialNum+0x44>)
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018ce8:	4b0e      	ldr	r3, [pc, #56]	; (8018d24 <Get_SerialNum+0x48>)
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018cee:	4b0e      	ldr	r3, [pc, #56]	; (8018d28 <Get_SerialNum+0x4c>)
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018cf4:	68fa      	ldr	r2, [r7, #12]
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	4413      	add	r3, r2
 8018cfa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018cfc:	68fb      	ldr	r3, [r7, #12]
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d009      	beq.n	8018d16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018d02:	2208      	movs	r2, #8
 8018d04:	4909      	ldr	r1, [pc, #36]	; (8018d2c <Get_SerialNum+0x50>)
 8018d06:	68f8      	ldr	r0, [r7, #12]
 8018d08:	f000 f814 	bl	8018d34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018d0c:	2204      	movs	r2, #4
 8018d0e:	4908      	ldr	r1, [pc, #32]	; (8018d30 <Get_SerialNum+0x54>)
 8018d10:	68b8      	ldr	r0, [r7, #8]
 8018d12:	f000 f80f 	bl	8018d34 <IntToUnicode>
  }
}
 8018d16:	bf00      	nop
 8018d18:	3710      	adds	r7, #16
 8018d1a:	46bd      	mov	sp, r7
 8018d1c:	bd80      	pop	{r7, pc}
 8018d1e:	bf00      	nop
 8018d20:	1fff7590 	.word	0x1fff7590
 8018d24:	1fff7594 	.word	0x1fff7594
 8018d28:	1fff7598 	.word	0x1fff7598
 8018d2c:	200006c2 	.word	0x200006c2
 8018d30:	200006d2 	.word	0x200006d2

08018d34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018d34:	b480      	push	{r7}
 8018d36:	b087      	sub	sp, #28
 8018d38:	af00      	add	r7, sp, #0
 8018d3a:	60f8      	str	r0, [r7, #12]
 8018d3c:	60b9      	str	r1, [r7, #8]
 8018d3e:	4613      	mov	r3, r2
 8018d40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018d42:	2300      	movs	r3, #0
 8018d44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018d46:	2300      	movs	r3, #0
 8018d48:	75fb      	strb	r3, [r7, #23]
 8018d4a:	e027      	b.n	8018d9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	0f1b      	lsrs	r3, r3, #28
 8018d50:	2b09      	cmp	r3, #9
 8018d52:	d80b      	bhi.n	8018d6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018d54:	68fb      	ldr	r3, [r7, #12]
 8018d56:	0f1b      	lsrs	r3, r3, #28
 8018d58:	b2da      	uxtb	r2, r3
 8018d5a:	7dfb      	ldrb	r3, [r7, #23]
 8018d5c:	005b      	lsls	r3, r3, #1
 8018d5e:	4619      	mov	r1, r3
 8018d60:	68bb      	ldr	r3, [r7, #8]
 8018d62:	440b      	add	r3, r1
 8018d64:	3230      	adds	r2, #48	; 0x30
 8018d66:	b2d2      	uxtb	r2, r2
 8018d68:	701a      	strb	r2, [r3, #0]
 8018d6a:	e00a      	b.n	8018d82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018d6c:	68fb      	ldr	r3, [r7, #12]
 8018d6e:	0f1b      	lsrs	r3, r3, #28
 8018d70:	b2da      	uxtb	r2, r3
 8018d72:	7dfb      	ldrb	r3, [r7, #23]
 8018d74:	005b      	lsls	r3, r3, #1
 8018d76:	4619      	mov	r1, r3
 8018d78:	68bb      	ldr	r3, [r7, #8]
 8018d7a:	440b      	add	r3, r1
 8018d7c:	3237      	adds	r2, #55	; 0x37
 8018d7e:	b2d2      	uxtb	r2, r2
 8018d80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018d82:	68fb      	ldr	r3, [r7, #12]
 8018d84:	011b      	lsls	r3, r3, #4
 8018d86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018d88:	7dfb      	ldrb	r3, [r7, #23]
 8018d8a:	005b      	lsls	r3, r3, #1
 8018d8c:	3301      	adds	r3, #1
 8018d8e:	68ba      	ldr	r2, [r7, #8]
 8018d90:	4413      	add	r3, r2
 8018d92:	2200      	movs	r2, #0
 8018d94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018d96:	7dfb      	ldrb	r3, [r7, #23]
 8018d98:	3301      	adds	r3, #1
 8018d9a:	75fb      	strb	r3, [r7, #23]
 8018d9c:	7dfa      	ldrb	r2, [r7, #23]
 8018d9e:	79fb      	ldrb	r3, [r7, #7]
 8018da0:	429a      	cmp	r2, r3
 8018da2:	d3d3      	bcc.n	8018d4c <IntToUnicode+0x18>
  }
}
 8018da4:	bf00      	nop
 8018da6:	bf00      	nop
 8018da8:	371c      	adds	r7, #28
 8018daa:	46bd      	mov	sp, r7
 8018dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018db0:	4770      	bx	lr
	...

08018db4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018db4:	b580      	push	{r7, lr}
 8018db6:	b08a      	sub	sp, #40	; 0x28
 8018db8:	af00      	add	r7, sp, #0
 8018dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018dbc:	f107 0314 	add.w	r3, r7, #20
 8018dc0:	2200      	movs	r2, #0
 8018dc2:	601a      	str	r2, [r3, #0]
 8018dc4:	605a      	str	r2, [r3, #4]
 8018dc6:	609a      	str	r2, [r3, #8]
 8018dc8:	60da      	str	r2, [r3, #12]
 8018dca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018dd4:	d14e      	bne.n	8018e74 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018dd6:	4b29      	ldr	r3, [pc, #164]	; (8018e7c <HAL_PCD_MspInit+0xc8>)
 8018dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018dda:	4a28      	ldr	r2, [pc, #160]	; (8018e7c <HAL_PCD_MspInit+0xc8>)
 8018ddc:	f043 0301 	orr.w	r3, r3, #1
 8018de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8018de2:	4b26      	ldr	r3, [pc, #152]	; (8018e7c <HAL_PCD_MspInit+0xc8>)
 8018de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018de6:	f003 0301 	and.w	r3, r3, #1
 8018dea:	613b      	str	r3, [r7, #16]
 8018dec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 8018dee:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8018df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018df4:	2302      	movs	r3, #2
 8018df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018df8:	2300      	movs	r3, #0
 8018dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018dfc:	2303      	movs	r3, #3
 8018dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018e00:	230a      	movs	r3, #10
 8018e02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018e04:	f107 0314 	add.w	r3, r7, #20
 8018e08:	4619      	mov	r1, r3
 8018e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8018e0e:	f7f4 f8ed 	bl	800cfec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018e12:	4b1a      	ldr	r3, [pc, #104]	; (8018e7c <HAL_PCD_MspInit+0xc8>)
 8018e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018e16:	4a19      	ldr	r2, [pc, #100]	; (8018e7c <HAL_PCD_MspInit+0xc8>)
 8018e18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8018e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8018e1e:	4b17      	ldr	r3, [pc, #92]	; (8018e7c <HAL_PCD_MspInit+0xc8>)
 8018e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018e26:	60fb      	str	r3, [r7, #12]
 8018e28:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8018e2a:	4b14      	ldr	r3, [pc, #80]	; (8018e7c <HAL_PCD_MspInit+0xc8>)
 8018e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d114      	bne.n	8018e60 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8018e36:	4b11      	ldr	r3, [pc, #68]	; (8018e7c <HAL_PCD_MspInit+0xc8>)
 8018e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018e3a:	4a10      	ldr	r2, [pc, #64]	; (8018e7c <HAL_PCD_MspInit+0xc8>)
 8018e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018e40:	6593      	str	r3, [r2, #88]	; 0x58
 8018e42:	4b0e      	ldr	r3, [pc, #56]	; (8018e7c <HAL_PCD_MspInit+0xc8>)
 8018e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018e4a:	60bb      	str	r3, [r7, #8]
 8018e4c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8018e4e:	f7f6 ff8b 	bl	800fd68 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8018e52:	4b0a      	ldr	r3, [pc, #40]	; (8018e7c <HAL_PCD_MspInit+0xc8>)
 8018e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018e56:	4a09      	ldr	r2, [pc, #36]	; (8018e7c <HAL_PCD_MspInit+0xc8>)
 8018e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018e5c:	6593      	str	r3, [r2, #88]	; 0x58
 8018e5e:	e001      	b.n	8018e64 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8018e60:	f7f6 ff82 	bl	800fd68 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8018e64:	2200      	movs	r2, #0
 8018e66:	2100      	movs	r1, #0
 8018e68:	2043      	movs	r0, #67	; 0x43
 8018e6a:	f7f3 fee8 	bl	800cc3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018e6e:	2043      	movs	r0, #67	; 0x43
 8018e70:	f7f3 ff01 	bl	800cc76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018e74:	bf00      	nop
 8018e76:	3728      	adds	r7, #40	; 0x28
 8018e78:	46bd      	mov	sp, r7
 8018e7a:	bd80      	pop	{r7, pc}
 8018e7c:	40021000 	.word	0x40021000

08018e80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e80:	b580      	push	{r7, lr}
 8018e82:	b082      	sub	sp, #8
 8018e84:	af00      	add	r7, sp, #0
 8018e86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8018e94:	4619      	mov	r1, r3
 8018e96:	4610      	mov	r0, r2
 8018e98:	f7fe fca8 	bl	80177ec <USBD_LL_SetupStage>
}
 8018e9c:	bf00      	nop
 8018e9e:	3708      	adds	r7, #8
 8018ea0:	46bd      	mov	sp, r7
 8018ea2:	bd80      	pop	{r7, pc}

08018ea4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ea4:	b580      	push	{r7, lr}
 8018ea6:	b082      	sub	sp, #8
 8018ea8:	af00      	add	r7, sp, #0
 8018eaa:	6078      	str	r0, [r7, #4]
 8018eac:	460b      	mov	r3, r1
 8018eae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018eb6:	78fa      	ldrb	r2, [r7, #3]
 8018eb8:	6879      	ldr	r1, [r7, #4]
 8018eba:	4613      	mov	r3, r2
 8018ebc:	00db      	lsls	r3, r3, #3
 8018ebe:	4413      	add	r3, r2
 8018ec0:	009b      	lsls	r3, r3, #2
 8018ec2:	440b      	add	r3, r1
 8018ec4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8018ec8:	681a      	ldr	r2, [r3, #0]
 8018eca:	78fb      	ldrb	r3, [r7, #3]
 8018ecc:	4619      	mov	r1, r3
 8018ece:	f7fe fce2 	bl	8017896 <USBD_LL_DataOutStage>
}
 8018ed2:	bf00      	nop
 8018ed4:	3708      	adds	r7, #8
 8018ed6:	46bd      	mov	sp, r7
 8018ed8:	bd80      	pop	{r7, pc}

08018eda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018eda:	b580      	push	{r7, lr}
 8018edc:	b082      	sub	sp, #8
 8018ede:	af00      	add	r7, sp, #0
 8018ee0:	6078      	str	r0, [r7, #4]
 8018ee2:	460b      	mov	r3, r1
 8018ee4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018eec:	78fa      	ldrb	r2, [r7, #3]
 8018eee:	6879      	ldr	r1, [r7, #4]
 8018ef0:	4613      	mov	r3, r2
 8018ef2:	00db      	lsls	r3, r3, #3
 8018ef4:	4413      	add	r3, r2
 8018ef6:	009b      	lsls	r3, r3, #2
 8018ef8:	440b      	add	r3, r1
 8018efa:	334c      	adds	r3, #76	; 0x4c
 8018efc:	681a      	ldr	r2, [r3, #0]
 8018efe:	78fb      	ldrb	r3, [r7, #3]
 8018f00:	4619      	mov	r1, r3
 8018f02:	f7fe fd2b 	bl	801795c <USBD_LL_DataInStage>
}
 8018f06:	bf00      	nop
 8018f08:	3708      	adds	r7, #8
 8018f0a:	46bd      	mov	sp, r7
 8018f0c:	bd80      	pop	{r7, pc}

08018f0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f0e:	b580      	push	{r7, lr}
 8018f10:	b082      	sub	sp, #8
 8018f12:	af00      	add	r7, sp, #0
 8018f14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018f1c:	4618      	mov	r0, r3
 8018f1e:	f7fe fe3f 	bl	8017ba0 <USBD_LL_SOF>
}
 8018f22:	bf00      	nop
 8018f24:	3708      	adds	r7, #8
 8018f26:	46bd      	mov	sp, r7
 8018f28:	bd80      	pop	{r7, pc}

08018f2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f2a:	b580      	push	{r7, lr}
 8018f2c:	b084      	sub	sp, #16
 8018f2e:	af00      	add	r7, sp, #0
 8018f30:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018f32:	2301      	movs	r3, #1
 8018f34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	68db      	ldr	r3, [r3, #12]
 8018f3a:	2b02      	cmp	r3, #2
 8018f3c:	d001      	beq.n	8018f42 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8018f3e:	f7e9 fa4d 	bl	80023dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018f48:	7bfa      	ldrb	r2, [r7, #15]
 8018f4a:	4611      	mov	r1, r2
 8018f4c:	4618      	mov	r0, r3
 8018f4e:	f7fe fde9 	bl	8017b24 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018f58:	4618      	mov	r0, r3
 8018f5a:	f7fe fd95 	bl	8017a88 <USBD_LL_Reset>
}
 8018f5e:	bf00      	nop
 8018f60:	3710      	adds	r7, #16
 8018f62:	46bd      	mov	sp, r7
 8018f64:	bd80      	pop	{r7, pc}
	...

08018f68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f68:	b580      	push	{r7, lr}
 8018f6a:	b082      	sub	sp, #8
 8018f6c:	af00      	add	r7, sp, #0
 8018f6e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	681b      	ldr	r3, [r3, #0]
 8018f74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	687a      	ldr	r2, [r7, #4]
 8018f7c:	6812      	ldr	r2, [r2, #0]
 8018f7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018f82:	f043 0301 	orr.w	r3, r3, #1
 8018f86:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018f8e:	4618      	mov	r0, r3
 8018f90:	f7fe fdd8 	bl	8017b44 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	6a1b      	ldr	r3, [r3, #32]
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d005      	beq.n	8018fa8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018f9c:	4b04      	ldr	r3, [pc, #16]	; (8018fb0 <HAL_PCD_SuspendCallback+0x48>)
 8018f9e:	691b      	ldr	r3, [r3, #16]
 8018fa0:	4a03      	ldr	r2, [pc, #12]	; (8018fb0 <HAL_PCD_SuspendCallback+0x48>)
 8018fa2:	f043 0306 	orr.w	r3, r3, #6
 8018fa6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018fa8:	bf00      	nop
 8018faa:	3708      	adds	r7, #8
 8018fac:	46bd      	mov	sp, r7
 8018fae:	bd80      	pop	{r7, pc}
 8018fb0:	e000ed00 	.word	0xe000ed00

08018fb4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fb4:	b580      	push	{r7, lr}
 8018fb6:	b082      	sub	sp, #8
 8018fb8:	af00      	add	r7, sp, #0
 8018fba:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	687a      	ldr	r2, [r7, #4]
 8018fc8:	6812      	ldr	r2, [r2, #0]
 8018fca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018fce:	f023 0301 	bic.w	r3, r3, #1
 8018fd2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	6a1b      	ldr	r3, [r3, #32]
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d007      	beq.n	8018fec <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018fdc:	4b08      	ldr	r3, [pc, #32]	; (8019000 <HAL_PCD_ResumeCallback+0x4c>)
 8018fde:	691b      	ldr	r3, [r3, #16]
 8018fe0:	4a07      	ldr	r2, [pc, #28]	; (8019000 <HAL_PCD_ResumeCallback+0x4c>)
 8018fe2:	f023 0306 	bic.w	r3, r3, #6
 8018fe6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8018fe8:	f000 faf6 	bl	80195d8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018ff2:	4618      	mov	r0, r3
 8018ff4:	f7fe fdbc 	bl	8017b70 <USBD_LL_Resume>
}
 8018ff8:	bf00      	nop
 8018ffa:	3708      	adds	r7, #8
 8018ffc:	46bd      	mov	sp, r7
 8018ffe:	bd80      	pop	{r7, pc}
 8019000:	e000ed00 	.word	0xe000ed00

08019004 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019004:	b580      	push	{r7, lr}
 8019006:	b082      	sub	sp, #8
 8019008:	af00      	add	r7, sp, #0
 801900a:	6078      	str	r0, [r7, #4]
 801900c:	460b      	mov	r3, r1
 801900e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019016:	78fa      	ldrb	r2, [r7, #3]
 8019018:	4611      	mov	r1, r2
 801901a:	4618      	mov	r0, r3
 801901c:	f7fe fe08 	bl	8017c30 <USBD_LL_IsoOUTIncomplete>
}
 8019020:	bf00      	nop
 8019022:	3708      	adds	r7, #8
 8019024:	46bd      	mov	sp, r7
 8019026:	bd80      	pop	{r7, pc}

08019028 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019028:	b580      	push	{r7, lr}
 801902a:	b082      	sub	sp, #8
 801902c:	af00      	add	r7, sp, #0
 801902e:	6078      	str	r0, [r7, #4]
 8019030:	460b      	mov	r3, r1
 8019032:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801903a:	78fa      	ldrb	r2, [r7, #3]
 801903c:	4611      	mov	r1, r2
 801903e:	4618      	mov	r0, r3
 8019040:	f7fe fdd0 	bl	8017be4 <USBD_LL_IsoINIncomplete>
}
 8019044:	bf00      	nop
 8019046:	3708      	adds	r7, #8
 8019048:	46bd      	mov	sp, r7
 801904a:	bd80      	pop	{r7, pc}

0801904c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801904c:	b580      	push	{r7, lr}
 801904e:	b082      	sub	sp, #8
 8019050:	af00      	add	r7, sp, #0
 8019052:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801905a:	4618      	mov	r0, r3
 801905c:	f7fe fe0e 	bl	8017c7c <USBD_LL_DevConnected>
}
 8019060:	bf00      	nop
 8019062:	3708      	adds	r7, #8
 8019064:	46bd      	mov	sp, r7
 8019066:	bd80      	pop	{r7, pc}

08019068 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019068:	b580      	push	{r7, lr}
 801906a:	b082      	sub	sp, #8
 801906c:	af00      	add	r7, sp, #0
 801906e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019076:	4618      	mov	r0, r3
 8019078:	f7fe fe0b 	bl	8017c92 <USBD_LL_DevDisconnected>
}
 801907c:	bf00      	nop
 801907e:	3708      	adds	r7, #8
 8019080:	46bd      	mov	sp, r7
 8019082:	bd80      	pop	{r7, pc}

08019084 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019084:	b580      	push	{r7, lr}
 8019086:	b082      	sub	sp, #8
 8019088:	af00      	add	r7, sp, #0
 801908a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	781b      	ldrb	r3, [r3, #0]
 8019090:	2b00      	cmp	r3, #0
 8019092:	d13c      	bne.n	801910e <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019094:	4a20      	ldr	r2, [pc, #128]	; (8019118 <USBD_LL_Init+0x94>)
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	4a1e      	ldr	r2, [pc, #120]	; (8019118 <USBD_LL_Init+0x94>)
 80190a0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80190a4:	4b1c      	ldr	r3, [pc, #112]	; (8019118 <USBD_LL_Init+0x94>)
 80190a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80190aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80190ac:	4b1a      	ldr	r3, [pc, #104]	; (8019118 <USBD_LL_Init+0x94>)
 80190ae:	2206      	movs	r2, #6
 80190b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80190b2:	4b19      	ldr	r3, [pc, #100]	; (8019118 <USBD_LL_Init+0x94>)
 80190b4:	2202      	movs	r2, #2
 80190b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80190b8:	4b17      	ldr	r3, [pc, #92]	; (8019118 <USBD_LL_Init+0x94>)
 80190ba:	2202      	movs	r2, #2
 80190bc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80190be:	4b16      	ldr	r3, [pc, #88]	; (8019118 <USBD_LL_Init+0x94>)
 80190c0:	2200      	movs	r2, #0
 80190c2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80190c4:	4b14      	ldr	r3, [pc, #80]	; (8019118 <USBD_LL_Init+0x94>)
 80190c6:	2200      	movs	r2, #0
 80190c8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80190ca:	4b13      	ldr	r3, [pc, #76]	; (8019118 <USBD_LL_Init+0x94>)
 80190cc:	2200      	movs	r2, #0
 80190ce:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80190d0:	4b11      	ldr	r3, [pc, #68]	; (8019118 <USBD_LL_Init+0x94>)
 80190d2:	2200      	movs	r2, #0
 80190d4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80190d6:	4b10      	ldr	r3, [pc, #64]	; (8019118 <USBD_LL_Init+0x94>)
 80190d8:	2200      	movs	r2, #0
 80190da:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80190dc:	4b0e      	ldr	r3, [pc, #56]	; (8019118 <USBD_LL_Init+0x94>)
 80190de:	2200      	movs	r2, #0
 80190e0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80190e2:	480d      	ldr	r0, [pc, #52]	; (8019118 <USBD_LL_Init+0x94>)
 80190e4:	f7f5 fbd9 	bl	800e89a <HAL_PCD_Init>
 80190e8:	4603      	mov	r3, r0
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	d001      	beq.n	80190f2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80190ee:	f7e9 f975 	bl	80023dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80190f2:	2180      	movs	r1, #128	; 0x80
 80190f4:	4808      	ldr	r0, [pc, #32]	; (8019118 <USBD_LL_Init+0x94>)
 80190f6:	f7f6 fd5a 	bl	800fbae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80190fa:	2240      	movs	r2, #64	; 0x40
 80190fc:	2100      	movs	r1, #0
 80190fe:	4806      	ldr	r0, [pc, #24]	; (8019118 <USBD_LL_Init+0x94>)
 8019100:	f7f6 fd0e 	bl	800fb20 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8019104:	2280      	movs	r2, #128	; 0x80
 8019106:	2101      	movs	r1, #1
 8019108:	4803      	ldr	r0, [pc, #12]	; (8019118 <USBD_LL_Init+0x94>)
 801910a:	f7f6 fd09 	bl	800fb20 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801910e:	2300      	movs	r3, #0
}
 8019110:	4618      	mov	r0, r3
 8019112:	3708      	adds	r7, #8
 8019114:	46bd      	mov	sp, r7
 8019116:	bd80      	pop	{r7, pc}
 8019118:	200028a4 	.word	0x200028a4

0801911c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801911c:	b580      	push	{r7, lr}
 801911e:	b084      	sub	sp, #16
 8019120:	af00      	add	r7, sp, #0
 8019122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019124:	2300      	movs	r3, #0
 8019126:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019128:	2300      	movs	r3, #0
 801912a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019132:	4618      	mov	r0, r3
 8019134:	f7f5 fcd5 	bl	800eae2 <HAL_PCD_Start>
 8019138:	4603      	mov	r3, r0
 801913a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801913c:	7bbb      	ldrb	r3, [r7, #14]
 801913e:	2b03      	cmp	r3, #3
 8019140:	d816      	bhi.n	8019170 <USBD_LL_Start+0x54>
 8019142:	a201      	add	r2, pc, #4	; (adr r2, 8019148 <USBD_LL_Start+0x2c>)
 8019144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019148:	08019159 	.word	0x08019159
 801914c:	0801915f 	.word	0x0801915f
 8019150:	08019165 	.word	0x08019165
 8019154:	0801916b 	.word	0x0801916b
    case HAL_OK :
      usb_status = USBD_OK;
 8019158:	2300      	movs	r3, #0
 801915a:	73fb      	strb	r3, [r7, #15]
    break;
 801915c:	e00b      	b.n	8019176 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801915e:	2303      	movs	r3, #3
 8019160:	73fb      	strb	r3, [r7, #15]
    break;
 8019162:	e008      	b.n	8019176 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019164:	2301      	movs	r3, #1
 8019166:	73fb      	strb	r3, [r7, #15]
    break;
 8019168:	e005      	b.n	8019176 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801916a:	2303      	movs	r3, #3
 801916c:	73fb      	strb	r3, [r7, #15]
    break;
 801916e:	e002      	b.n	8019176 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8019170:	2303      	movs	r3, #3
 8019172:	73fb      	strb	r3, [r7, #15]
    break;
 8019174:	bf00      	nop
  }
  return usb_status;
 8019176:	7bfb      	ldrb	r3, [r7, #15]
}
 8019178:	4618      	mov	r0, r3
 801917a:	3710      	adds	r7, #16
 801917c:	46bd      	mov	sp, r7
 801917e:	bd80      	pop	{r7, pc}

08019180 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019180:	b580      	push	{r7, lr}
 8019182:	b084      	sub	sp, #16
 8019184:	af00      	add	r7, sp, #0
 8019186:	6078      	str	r0, [r7, #4]
 8019188:	4608      	mov	r0, r1
 801918a:	4611      	mov	r1, r2
 801918c:	461a      	mov	r2, r3
 801918e:	4603      	mov	r3, r0
 8019190:	70fb      	strb	r3, [r7, #3]
 8019192:	460b      	mov	r3, r1
 8019194:	70bb      	strb	r3, [r7, #2]
 8019196:	4613      	mov	r3, r2
 8019198:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801919a:	2300      	movs	r3, #0
 801919c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801919e:	2300      	movs	r3, #0
 80191a0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80191a8:	78bb      	ldrb	r3, [r7, #2]
 80191aa:	883a      	ldrh	r2, [r7, #0]
 80191ac:	78f9      	ldrb	r1, [r7, #3]
 80191ae:	f7f6 f97f 	bl	800f4b0 <HAL_PCD_EP_Open>
 80191b2:	4603      	mov	r3, r0
 80191b4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80191b6:	7bbb      	ldrb	r3, [r7, #14]
 80191b8:	2b03      	cmp	r3, #3
 80191ba:	d817      	bhi.n	80191ec <USBD_LL_OpenEP+0x6c>
 80191bc:	a201      	add	r2, pc, #4	; (adr r2, 80191c4 <USBD_LL_OpenEP+0x44>)
 80191be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80191c2:	bf00      	nop
 80191c4:	080191d5 	.word	0x080191d5
 80191c8:	080191db 	.word	0x080191db
 80191cc:	080191e1 	.word	0x080191e1
 80191d0:	080191e7 	.word	0x080191e7
    case HAL_OK :
      usb_status = USBD_OK;
 80191d4:	2300      	movs	r3, #0
 80191d6:	73fb      	strb	r3, [r7, #15]
    break;
 80191d8:	e00b      	b.n	80191f2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80191da:	2303      	movs	r3, #3
 80191dc:	73fb      	strb	r3, [r7, #15]
    break;
 80191de:	e008      	b.n	80191f2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80191e0:	2301      	movs	r3, #1
 80191e2:	73fb      	strb	r3, [r7, #15]
    break;
 80191e4:	e005      	b.n	80191f2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80191e6:	2303      	movs	r3, #3
 80191e8:	73fb      	strb	r3, [r7, #15]
    break;
 80191ea:	e002      	b.n	80191f2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80191ec:	2303      	movs	r3, #3
 80191ee:	73fb      	strb	r3, [r7, #15]
    break;
 80191f0:	bf00      	nop
  }
  return usb_status;
 80191f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80191f4:	4618      	mov	r0, r3
 80191f6:	3710      	adds	r7, #16
 80191f8:	46bd      	mov	sp, r7
 80191fa:	bd80      	pop	{r7, pc}

080191fc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80191fc:	b580      	push	{r7, lr}
 80191fe:	b084      	sub	sp, #16
 8019200:	af00      	add	r7, sp, #0
 8019202:	6078      	str	r0, [r7, #4]
 8019204:	460b      	mov	r3, r1
 8019206:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019208:	2300      	movs	r3, #0
 801920a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801920c:	2300      	movs	r3, #0
 801920e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019216:	78fa      	ldrb	r2, [r7, #3]
 8019218:	4611      	mov	r1, r2
 801921a:	4618      	mov	r0, r3
 801921c:	f7f6 f9b0 	bl	800f580 <HAL_PCD_EP_Close>
 8019220:	4603      	mov	r3, r0
 8019222:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019224:	7bbb      	ldrb	r3, [r7, #14]
 8019226:	2b03      	cmp	r3, #3
 8019228:	d816      	bhi.n	8019258 <USBD_LL_CloseEP+0x5c>
 801922a:	a201      	add	r2, pc, #4	; (adr r2, 8019230 <USBD_LL_CloseEP+0x34>)
 801922c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019230:	08019241 	.word	0x08019241
 8019234:	08019247 	.word	0x08019247
 8019238:	0801924d 	.word	0x0801924d
 801923c:	08019253 	.word	0x08019253
    case HAL_OK :
      usb_status = USBD_OK;
 8019240:	2300      	movs	r3, #0
 8019242:	73fb      	strb	r3, [r7, #15]
    break;
 8019244:	e00b      	b.n	801925e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019246:	2303      	movs	r3, #3
 8019248:	73fb      	strb	r3, [r7, #15]
    break;
 801924a:	e008      	b.n	801925e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801924c:	2301      	movs	r3, #1
 801924e:	73fb      	strb	r3, [r7, #15]
    break;
 8019250:	e005      	b.n	801925e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019252:	2303      	movs	r3, #3
 8019254:	73fb      	strb	r3, [r7, #15]
    break;
 8019256:	e002      	b.n	801925e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019258:	2303      	movs	r3, #3
 801925a:	73fb      	strb	r3, [r7, #15]
    break;
 801925c:	bf00      	nop
  }
  return usb_status;
 801925e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019260:	4618      	mov	r0, r3
 8019262:	3710      	adds	r7, #16
 8019264:	46bd      	mov	sp, r7
 8019266:	bd80      	pop	{r7, pc}

08019268 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019268:	b580      	push	{r7, lr}
 801926a:	b084      	sub	sp, #16
 801926c:	af00      	add	r7, sp, #0
 801926e:	6078      	str	r0, [r7, #4]
 8019270:	460b      	mov	r3, r1
 8019272:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019274:	2300      	movs	r3, #0
 8019276:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019278:	2300      	movs	r3, #0
 801927a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019282:	78fa      	ldrb	r2, [r7, #3]
 8019284:	4611      	mov	r1, r2
 8019286:	4618      	mov	r0, r3
 8019288:	f7f6 fa57 	bl	800f73a <HAL_PCD_EP_SetStall>
 801928c:	4603      	mov	r3, r0
 801928e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019290:	7bbb      	ldrb	r3, [r7, #14]
 8019292:	2b03      	cmp	r3, #3
 8019294:	d816      	bhi.n	80192c4 <USBD_LL_StallEP+0x5c>
 8019296:	a201      	add	r2, pc, #4	; (adr r2, 801929c <USBD_LL_StallEP+0x34>)
 8019298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801929c:	080192ad 	.word	0x080192ad
 80192a0:	080192b3 	.word	0x080192b3
 80192a4:	080192b9 	.word	0x080192b9
 80192a8:	080192bf 	.word	0x080192bf
    case HAL_OK :
      usb_status = USBD_OK;
 80192ac:	2300      	movs	r3, #0
 80192ae:	73fb      	strb	r3, [r7, #15]
    break;
 80192b0:	e00b      	b.n	80192ca <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80192b2:	2303      	movs	r3, #3
 80192b4:	73fb      	strb	r3, [r7, #15]
    break;
 80192b6:	e008      	b.n	80192ca <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80192b8:	2301      	movs	r3, #1
 80192ba:	73fb      	strb	r3, [r7, #15]
    break;
 80192bc:	e005      	b.n	80192ca <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80192be:	2303      	movs	r3, #3
 80192c0:	73fb      	strb	r3, [r7, #15]
    break;
 80192c2:	e002      	b.n	80192ca <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80192c4:	2303      	movs	r3, #3
 80192c6:	73fb      	strb	r3, [r7, #15]
    break;
 80192c8:	bf00      	nop
  }
  return usb_status;
 80192ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80192cc:	4618      	mov	r0, r3
 80192ce:	3710      	adds	r7, #16
 80192d0:	46bd      	mov	sp, r7
 80192d2:	bd80      	pop	{r7, pc}

080192d4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80192d4:	b580      	push	{r7, lr}
 80192d6:	b084      	sub	sp, #16
 80192d8:	af00      	add	r7, sp, #0
 80192da:	6078      	str	r0, [r7, #4]
 80192dc:	460b      	mov	r3, r1
 80192de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192e0:	2300      	movs	r3, #0
 80192e2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80192e4:	2300      	movs	r3, #0
 80192e6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80192ee:	78fa      	ldrb	r2, [r7, #3]
 80192f0:	4611      	mov	r1, r2
 80192f2:	4618      	mov	r0, r3
 80192f4:	f7f6 fa83 	bl	800f7fe <HAL_PCD_EP_ClrStall>
 80192f8:	4603      	mov	r3, r0
 80192fa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80192fc:	7bbb      	ldrb	r3, [r7, #14]
 80192fe:	2b03      	cmp	r3, #3
 8019300:	d816      	bhi.n	8019330 <USBD_LL_ClearStallEP+0x5c>
 8019302:	a201      	add	r2, pc, #4	; (adr r2, 8019308 <USBD_LL_ClearStallEP+0x34>)
 8019304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019308:	08019319 	.word	0x08019319
 801930c:	0801931f 	.word	0x0801931f
 8019310:	08019325 	.word	0x08019325
 8019314:	0801932b 	.word	0x0801932b
    case HAL_OK :
      usb_status = USBD_OK;
 8019318:	2300      	movs	r3, #0
 801931a:	73fb      	strb	r3, [r7, #15]
    break;
 801931c:	e00b      	b.n	8019336 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801931e:	2303      	movs	r3, #3
 8019320:	73fb      	strb	r3, [r7, #15]
    break;
 8019322:	e008      	b.n	8019336 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019324:	2301      	movs	r3, #1
 8019326:	73fb      	strb	r3, [r7, #15]
    break;
 8019328:	e005      	b.n	8019336 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801932a:	2303      	movs	r3, #3
 801932c:	73fb      	strb	r3, [r7, #15]
    break;
 801932e:	e002      	b.n	8019336 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019330:	2303      	movs	r3, #3
 8019332:	73fb      	strb	r3, [r7, #15]
    break;
 8019334:	bf00      	nop
  }
  return usb_status;
 8019336:	7bfb      	ldrb	r3, [r7, #15]
}
 8019338:	4618      	mov	r0, r3
 801933a:	3710      	adds	r7, #16
 801933c:	46bd      	mov	sp, r7
 801933e:	bd80      	pop	{r7, pc}

08019340 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019340:	b480      	push	{r7}
 8019342:	b085      	sub	sp, #20
 8019344:	af00      	add	r7, sp, #0
 8019346:	6078      	str	r0, [r7, #4]
 8019348:	460b      	mov	r3, r1
 801934a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019352:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019354:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019358:	2b00      	cmp	r3, #0
 801935a:	da0b      	bge.n	8019374 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801935c:	78fb      	ldrb	r3, [r7, #3]
 801935e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019362:	68f9      	ldr	r1, [r7, #12]
 8019364:	4613      	mov	r3, r2
 8019366:	00db      	lsls	r3, r3, #3
 8019368:	4413      	add	r3, r2
 801936a:	009b      	lsls	r3, r3, #2
 801936c:	440b      	add	r3, r1
 801936e:	333e      	adds	r3, #62	; 0x3e
 8019370:	781b      	ldrb	r3, [r3, #0]
 8019372:	e00b      	b.n	801938c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019374:	78fb      	ldrb	r3, [r7, #3]
 8019376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801937a:	68f9      	ldr	r1, [r7, #12]
 801937c:	4613      	mov	r3, r2
 801937e:	00db      	lsls	r3, r3, #3
 8019380:	4413      	add	r3, r2
 8019382:	009b      	lsls	r3, r3, #2
 8019384:	440b      	add	r3, r1
 8019386:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801938a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801938c:	4618      	mov	r0, r3
 801938e:	3714      	adds	r7, #20
 8019390:	46bd      	mov	sp, r7
 8019392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019396:	4770      	bx	lr

08019398 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019398:	b580      	push	{r7, lr}
 801939a:	b084      	sub	sp, #16
 801939c:	af00      	add	r7, sp, #0
 801939e:	6078      	str	r0, [r7, #4]
 80193a0:	460b      	mov	r3, r1
 80193a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80193a4:	2300      	movs	r3, #0
 80193a6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80193a8:	2300      	movs	r3, #0
 80193aa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80193b2:	78fa      	ldrb	r2, [r7, #3]
 80193b4:	4611      	mov	r1, r2
 80193b6:	4618      	mov	r0, r3
 80193b8:	f7f6 f855 	bl	800f466 <HAL_PCD_SetAddress>
 80193bc:	4603      	mov	r3, r0
 80193be:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80193c0:	7bbb      	ldrb	r3, [r7, #14]
 80193c2:	2b03      	cmp	r3, #3
 80193c4:	d816      	bhi.n	80193f4 <USBD_LL_SetUSBAddress+0x5c>
 80193c6:	a201      	add	r2, pc, #4	; (adr r2, 80193cc <USBD_LL_SetUSBAddress+0x34>)
 80193c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193cc:	080193dd 	.word	0x080193dd
 80193d0:	080193e3 	.word	0x080193e3
 80193d4:	080193e9 	.word	0x080193e9
 80193d8:	080193ef 	.word	0x080193ef
    case HAL_OK :
      usb_status = USBD_OK;
 80193dc:	2300      	movs	r3, #0
 80193de:	73fb      	strb	r3, [r7, #15]
    break;
 80193e0:	e00b      	b.n	80193fa <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80193e2:	2303      	movs	r3, #3
 80193e4:	73fb      	strb	r3, [r7, #15]
    break;
 80193e6:	e008      	b.n	80193fa <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80193e8:	2301      	movs	r3, #1
 80193ea:	73fb      	strb	r3, [r7, #15]
    break;
 80193ec:	e005      	b.n	80193fa <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80193ee:	2303      	movs	r3, #3
 80193f0:	73fb      	strb	r3, [r7, #15]
    break;
 80193f2:	e002      	b.n	80193fa <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80193f4:	2303      	movs	r3, #3
 80193f6:	73fb      	strb	r3, [r7, #15]
    break;
 80193f8:	bf00      	nop
  }
  return usb_status;
 80193fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80193fc:	4618      	mov	r0, r3
 80193fe:	3710      	adds	r7, #16
 8019400:	46bd      	mov	sp, r7
 8019402:	bd80      	pop	{r7, pc}

08019404 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019404:	b580      	push	{r7, lr}
 8019406:	b086      	sub	sp, #24
 8019408:	af00      	add	r7, sp, #0
 801940a:	60f8      	str	r0, [r7, #12]
 801940c:	607a      	str	r2, [r7, #4]
 801940e:	603b      	str	r3, [r7, #0]
 8019410:	460b      	mov	r3, r1
 8019412:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019414:	2300      	movs	r3, #0
 8019416:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019418:	2300      	movs	r3, #0
 801941a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801941c:	68fb      	ldr	r3, [r7, #12]
 801941e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019422:	7af9      	ldrb	r1, [r7, #11]
 8019424:	683b      	ldr	r3, [r7, #0]
 8019426:	687a      	ldr	r2, [r7, #4]
 8019428:	f7f6 f94a 	bl	800f6c0 <HAL_PCD_EP_Transmit>
 801942c:	4603      	mov	r3, r0
 801942e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8019430:	7dbb      	ldrb	r3, [r7, #22]
 8019432:	2b03      	cmp	r3, #3
 8019434:	d816      	bhi.n	8019464 <USBD_LL_Transmit+0x60>
 8019436:	a201      	add	r2, pc, #4	; (adr r2, 801943c <USBD_LL_Transmit+0x38>)
 8019438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801943c:	0801944d 	.word	0x0801944d
 8019440:	08019453 	.word	0x08019453
 8019444:	08019459 	.word	0x08019459
 8019448:	0801945f 	.word	0x0801945f
    case HAL_OK :
      usb_status = USBD_OK;
 801944c:	2300      	movs	r3, #0
 801944e:	75fb      	strb	r3, [r7, #23]
    break;
 8019450:	e00b      	b.n	801946a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019452:	2303      	movs	r3, #3
 8019454:	75fb      	strb	r3, [r7, #23]
    break;
 8019456:	e008      	b.n	801946a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019458:	2301      	movs	r3, #1
 801945a:	75fb      	strb	r3, [r7, #23]
    break;
 801945c:	e005      	b.n	801946a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801945e:	2303      	movs	r3, #3
 8019460:	75fb      	strb	r3, [r7, #23]
    break;
 8019462:	e002      	b.n	801946a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8019464:	2303      	movs	r3, #3
 8019466:	75fb      	strb	r3, [r7, #23]
    break;
 8019468:	bf00      	nop
  }
  return usb_status;
 801946a:	7dfb      	ldrb	r3, [r7, #23]
}
 801946c:	4618      	mov	r0, r3
 801946e:	3718      	adds	r7, #24
 8019470:	46bd      	mov	sp, r7
 8019472:	bd80      	pop	{r7, pc}

08019474 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019474:	b580      	push	{r7, lr}
 8019476:	b086      	sub	sp, #24
 8019478:	af00      	add	r7, sp, #0
 801947a:	60f8      	str	r0, [r7, #12]
 801947c:	607a      	str	r2, [r7, #4]
 801947e:	603b      	str	r3, [r7, #0]
 8019480:	460b      	mov	r3, r1
 8019482:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019484:	2300      	movs	r3, #0
 8019486:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019488:	2300      	movs	r3, #0
 801948a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801948c:	68fb      	ldr	r3, [r7, #12]
 801948e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019492:	7af9      	ldrb	r1, [r7, #11]
 8019494:	683b      	ldr	r3, [r7, #0]
 8019496:	687a      	ldr	r2, [r7, #4]
 8019498:	f7f6 f8bc 	bl	800f614 <HAL_PCD_EP_Receive>
 801949c:	4603      	mov	r3, r0
 801949e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80194a0:	7dbb      	ldrb	r3, [r7, #22]
 80194a2:	2b03      	cmp	r3, #3
 80194a4:	d816      	bhi.n	80194d4 <USBD_LL_PrepareReceive+0x60>
 80194a6:	a201      	add	r2, pc, #4	; (adr r2, 80194ac <USBD_LL_PrepareReceive+0x38>)
 80194a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80194ac:	080194bd 	.word	0x080194bd
 80194b0:	080194c3 	.word	0x080194c3
 80194b4:	080194c9 	.word	0x080194c9
 80194b8:	080194cf 	.word	0x080194cf
    case HAL_OK :
      usb_status = USBD_OK;
 80194bc:	2300      	movs	r3, #0
 80194be:	75fb      	strb	r3, [r7, #23]
    break;
 80194c0:	e00b      	b.n	80194da <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80194c2:	2303      	movs	r3, #3
 80194c4:	75fb      	strb	r3, [r7, #23]
    break;
 80194c6:	e008      	b.n	80194da <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80194c8:	2301      	movs	r3, #1
 80194ca:	75fb      	strb	r3, [r7, #23]
    break;
 80194cc:	e005      	b.n	80194da <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80194ce:	2303      	movs	r3, #3
 80194d0:	75fb      	strb	r3, [r7, #23]
    break;
 80194d2:	e002      	b.n	80194da <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80194d4:	2303      	movs	r3, #3
 80194d6:	75fb      	strb	r3, [r7, #23]
    break;
 80194d8:	bf00      	nop
  }
  return usb_status;
 80194da:	7dfb      	ldrb	r3, [r7, #23]
}
 80194dc:	4618      	mov	r0, r3
 80194de:	3718      	adds	r7, #24
 80194e0:	46bd      	mov	sp, r7
 80194e2:	bd80      	pop	{r7, pc}

080194e4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80194e4:	b580      	push	{r7, lr}
 80194e6:	b082      	sub	sp, #8
 80194e8:	af00      	add	r7, sp, #0
 80194ea:	6078      	str	r0, [r7, #4]
 80194ec:	460b      	mov	r3, r1
 80194ee:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80194f6:	78fa      	ldrb	r2, [r7, #3]
 80194f8:	4611      	mov	r1, r2
 80194fa:	4618      	mov	r0, r3
 80194fc:	f7f6 f8c8 	bl	800f690 <HAL_PCD_EP_GetRxCount>
 8019500:	4603      	mov	r3, r0
}
 8019502:	4618      	mov	r0, r3
 8019504:	3708      	adds	r7, #8
 8019506:	46bd      	mov	sp, r7
 8019508:	bd80      	pop	{r7, pc}
	...

0801950c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801950c:	b580      	push	{r7, lr}
 801950e:	b082      	sub	sp, #8
 8019510:	af00      	add	r7, sp, #0
 8019512:	6078      	str	r0, [r7, #4]
 8019514:	460b      	mov	r3, r1
 8019516:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8019518:	78fb      	ldrb	r3, [r7, #3]
 801951a:	2b00      	cmp	r3, #0
 801951c:	d002      	beq.n	8019524 <HAL_PCDEx_LPM_Callback+0x18>
 801951e:	2b01      	cmp	r3, #1
 8019520:	d01f      	beq.n	8019562 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8019522:	e03b      	b.n	801959c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	6a1b      	ldr	r3, [r3, #32]
 8019528:	2b00      	cmp	r3, #0
 801952a:	d007      	beq.n	801953c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801952c:	f000 f854 	bl	80195d8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019530:	4b1c      	ldr	r3, [pc, #112]	; (80195a4 <HAL_PCDEx_LPM_Callback+0x98>)
 8019532:	691b      	ldr	r3, [r3, #16]
 8019534:	4a1b      	ldr	r2, [pc, #108]	; (80195a4 <HAL_PCDEx_LPM_Callback+0x98>)
 8019536:	f023 0306 	bic.w	r3, r3, #6
 801953a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	681b      	ldr	r3, [r3, #0]
 8019540:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	687a      	ldr	r2, [r7, #4]
 8019548:	6812      	ldr	r2, [r2, #0]
 801954a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801954e:	f023 0301 	bic.w	r3, r3, #1
 8019552:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801955a:	4618      	mov	r0, r3
 801955c:	f7fe fb08 	bl	8017b70 <USBD_LL_Resume>
    break;
 8019560:	e01c      	b.n	801959c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	681b      	ldr	r3, [r3, #0]
 8019566:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801956a:	681b      	ldr	r3, [r3, #0]
 801956c:	687a      	ldr	r2, [r7, #4]
 801956e:	6812      	ldr	r2, [r2, #0]
 8019570:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019574:	f043 0301 	orr.w	r3, r3, #1
 8019578:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019580:	4618      	mov	r0, r3
 8019582:	f7fe fadf 	bl	8017b44 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	6a1b      	ldr	r3, [r3, #32]
 801958a:	2b00      	cmp	r3, #0
 801958c:	d005      	beq.n	801959a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801958e:	4b05      	ldr	r3, [pc, #20]	; (80195a4 <HAL_PCDEx_LPM_Callback+0x98>)
 8019590:	691b      	ldr	r3, [r3, #16]
 8019592:	4a04      	ldr	r2, [pc, #16]	; (80195a4 <HAL_PCDEx_LPM_Callback+0x98>)
 8019594:	f043 0306 	orr.w	r3, r3, #6
 8019598:	6113      	str	r3, [r2, #16]
    break;
 801959a:	bf00      	nop
}
 801959c:	bf00      	nop
 801959e:	3708      	adds	r7, #8
 80195a0:	46bd      	mov	sp, r7
 80195a2:	bd80      	pop	{r7, pc}
 80195a4:	e000ed00 	.word	0xe000ed00

080195a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80195a8:	b480      	push	{r7}
 80195aa:	b083      	sub	sp, #12
 80195ac:	af00      	add	r7, sp, #0
 80195ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80195b0:	4b03      	ldr	r3, [pc, #12]	; (80195c0 <USBD_static_malloc+0x18>)
}
 80195b2:	4618      	mov	r0, r3
 80195b4:	370c      	adds	r7, #12
 80195b6:	46bd      	mov	sp, r7
 80195b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195bc:	4770      	bx	lr
 80195be:	bf00      	nop
 80195c0:	20002db0 	.word	0x20002db0

080195c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80195c4:	b480      	push	{r7}
 80195c6:	b083      	sub	sp, #12
 80195c8:	af00      	add	r7, sp, #0
 80195ca:	6078      	str	r0, [r7, #4]

}
 80195cc:	bf00      	nop
 80195ce:	370c      	adds	r7, #12
 80195d0:	46bd      	mov	sp, r7
 80195d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195d6:	4770      	bx	lr

080195d8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80195d8:	b580      	push	{r7, lr}
 80195da:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80195dc:	f7e8 fe38 	bl	8002250 <SystemClock_Config>
}
 80195e0:	bf00      	nop
 80195e2:	bd80      	pop	{r7, pc}

080195e4 <__errno>:
 80195e4:	4b01      	ldr	r3, [pc, #4]	; (80195ec <__errno+0x8>)
 80195e6:	6818      	ldr	r0, [r3, #0]
 80195e8:	4770      	bx	lr
 80195ea:	bf00      	nop
 80195ec:	200006dc 	.word	0x200006dc

080195f0 <__libc_init_array>:
 80195f0:	b570      	push	{r4, r5, r6, lr}
 80195f2:	4d0d      	ldr	r5, [pc, #52]	; (8019628 <__libc_init_array+0x38>)
 80195f4:	4c0d      	ldr	r4, [pc, #52]	; (801962c <__libc_init_array+0x3c>)
 80195f6:	1b64      	subs	r4, r4, r5
 80195f8:	10a4      	asrs	r4, r4, #2
 80195fa:	2600      	movs	r6, #0
 80195fc:	42a6      	cmp	r6, r4
 80195fe:	d109      	bne.n	8019614 <__libc_init_array+0x24>
 8019600:	4d0b      	ldr	r5, [pc, #44]	; (8019630 <__libc_init_array+0x40>)
 8019602:	4c0c      	ldr	r4, [pc, #48]	; (8019634 <__libc_init_array+0x44>)
 8019604:	f001 fa08 	bl	801aa18 <_init>
 8019608:	1b64      	subs	r4, r4, r5
 801960a:	10a4      	asrs	r4, r4, #2
 801960c:	2600      	movs	r6, #0
 801960e:	42a6      	cmp	r6, r4
 8019610:	d105      	bne.n	801961e <__libc_init_array+0x2e>
 8019612:	bd70      	pop	{r4, r5, r6, pc}
 8019614:	f855 3b04 	ldr.w	r3, [r5], #4
 8019618:	4798      	blx	r3
 801961a:	3601      	adds	r6, #1
 801961c:	e7ee      	b.n	80195fc <__libc_init_array+0xc>
 801961e:	f855 3b04 	ldr.w	r3, [r5], #4
 8019622:	4798      	blx	r3
 8019624:	3601      	adds	r6, #1
 8019626:	e7f2      	b.n	801960e <__libc_init_array+0x1e>
 8019628:	0801cba0 	.word	0x0801cba0
 801962c:	0801cba0 	.word	0x0801cba0
 8019630:	0801cba0 	.word	0x0801cba0
 8019634:	0801cba4 	.word	0x0801cba4

08019638 <memcpy>:
 8019638:	440a      	add	r2, r1
 801963a:	4291      	cmp	r1, r2
 801963c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019640:	d100      	bne.n	8019644 <memcpy+0xc>
 8019642:	4770      	bx	lr
 8019644:	b510      	push	{r4, lr}
 8019646:	f811 4b01 	ldrb.w	r4, [r1], #1
 801964a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801964e:	4291      	cmp	r1, r2
 8019650:	d1f9      	bne.n	8019646 <memcpy+0xe>
 8019652:	bd10      	pop	{r4, pc}

08019654 <memset>:
 8019654:	4402      	add	r2, r0
 8019656:	4603      	mov	r3, r0
 8019658:	4293      	cmp	r3, r2
 801965a:	d100      	bne.n	801965e <memset+0xa>
 801965c:	4770      	bx	lr
 801965e:	f803 1b01 	strb.w	r1, [r3], #1
 8019662:	e7f9      	b.n	8019658 <memset+0x4>

08019664 <_free_r>:
 8019664:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019666:	2900      	cmp	r1, #0
 8019668:	d044      	beq.n	80196f4 <_free_r+0x90>
 801966a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801966e:	9001      	str	r0, [sp, #4]
 8019670:	2b00      	cmp	r3, #0
 8019672:	f1a1 0404 	sub.w	r4, r1, #4
 8019676:	bfb8      	it	lt
 8019678:	18e4      	addlt	r4, r4, r3
 801967a:	f000 fc79 	bl	8019f70 <__malloc_lock>
 801967e:	4a1e      	ldr	r2, [pc, #120]	; (80196f8 <_free_r+0x94>)
 8019680:	9801      	ldr	r0, [sp, #4]
 8019682:	6813      	ldr	r3, [r2, #0]
 8019684:	b933      	cbnz	r3, 8019694 <_free_r+0x30>
 8019686:	6063      	str	r3, [r4, #4]
 8019688:	6014      	str	r4, [r2, #0]
 801968a:	b003      	add	sp, #12
 801968c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019690:	f000 bc74 	b.w	8019f7c <__malloc_unlock>
 8019694:	42a3      	cmp	r3, r4
 8019696:	d908      	bls.n	80196aa <_free_r+0x46>
 8019698:	6825      	ldr	r5, [r4, #0]
 801969a:	1961      	adds	r1, r4, r5
 801969c:	428b      	cmp	r3, r1
 801969e:	bf01      	itttt	eq
 80196a0:	6819      	ldreq	r1, [r3, #0]
 80196a2:	685b      	ldreq	r3, [r3, #4]
 80196a4:	1949      	addeq	r1, r1, r5
 80196a6:	6021      	streq	r1, [r4, #0]
 80196a8:	e7ed      	b.n	8019686 <_free_r+0x22>
 80196aa:	461a      	mov	r2, r3
 80196ac:	685b      	ldr	r3, [r3, #4]
 80196ae:	b10b      	cbz	r3, 80196b4 <_free_r+0x50>
 80196b0:	42a3      	cmp	r3, r4
 80196b2:	d9fa      	bls.n	80196aa <_free_r+0x46>
 80196b4:	6811      	ldr	r1, [r2, #0]
 80196b6:	1855      	adds	r5, r2, r1
 80196b8:	42a5      	cmp	r5, r4
 80196ba:	d10b      	bne.n	80196d4 <_free_r+0x70>
 80196bc:	6824      	ldr	r4, [r4, #0]
 80196be:	4421      	add	r1, r4
 80196c0:	1854      	adds	r4, r2, r1
 80196c2:	42a3      	cmp	r3, r4
 80196c4:	6011      	str	r1, [r2, #0]
 80196c6:	d1e0      	bne.n	801968a <_free_r+0x26>
 80196c8:	681c      	ldr	r4, [r3, #0]
 80196ca:	685b      	ldr	r3, [r3, #4]
 80196cc:	6053      	str	r3, [r2, #4]
 80196ce:	4421      	add	r1, r4
 80196d0:	6011      	str	r1, [r2, #0]
 80196d2:	e7da      	b.n	801968a <_free_r+0x26>
 80196d4:	d902      	bls.n	80196dc <_free_r+0x78>
 80196d6:	230c      	movs	r3, #12
 80196d8:	6003      	str	r3, [r0, #0]
 80196da:	e7d6      	b.n	801968a <_free_r+0x26>
 80196dc:	6825      	ldr	r5, [r4, #0]
 80196de:	1961      	adds	r1, r4, r5
 80196e0:	428b      	cmp	r3, r1
 80196e2:	bf04      	itt	eq
 80196e4:	6819      	ldreq	r1, [r3, #0]
 80196e6:	685b      	ldreq	r3, [r3, #4]
 80196e8:	6063      	str	r3, [r4, #4]
 80196ea:	bf04      	itt	eq
 80196ec:	1949      	addeq	r1, r1, r5
 80196ee:	6021      	streq	r1, [r4, #0]
 80196f0:	6054      	str	r4, [r2, #4]
 80196f2:	e7ca      	b.n	801968a <_free_r+0x26>
 80196f4:	b003      	add	sp, #12
 80196f6:	bd30      	pop	{r4, r5, pc}
 80196f8:	20002fd0 	.word	0x20002fd0

080196fc <sbrk_aligned>:
 80196fc:	b570      	push	{r4, r5, r6, lr}
 80196fe:	4e0e      	ldr	r6, [pc, #56]	; (8019738 <sbrk_aligned+0x3c>)
 8019700:	460c      	mov	r4, r1
 8019702:	6831      	ldr	r1, [r6, #0]
 8019704:	4605      	mov	r5, r0
 8019706:	b911      	cbnz	r1, 801970e <sbrk_aligned+0x12>
 8019708:	f000 f91a 	bl	8019940 <_sbrk_r>
 801970c:	6030      	str	r0, [r6, #0]
 801970e:	4621      	mov	r1, r4
 8019710:	4628      	mov	r0, r5
 8019712:	f000 f915 	bl	8019940 <_sbrk_r>
 8019716:	1c43      	adds	r3, r0, #1
 8019718:	d00a      	beq.n	8019730 <sbrk_aligned+0x34>
 801971a:	1cc4      	adds	r4, r0, #3
 801971c:	f024 0403 	bic.w	r4, r4, #3
 8019720:	42a0      	cmp	r0, r4
 8019722:	d007      	beq.n	8019734 <sbrk_aligned+0x38>
 8019724:	1a21      	subs	r1, r4, r0
 8019726:	4628      	mov	r0, r5
 8019728:	f000 f90a 	bl	8019940 <_sbrk_r>
 801972c:	3001      	adds	r0, #1
 801972e:	d101      	bne.n	8019734 <sbrk_aligned+0x38>
 8019730:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019734:	4620      	mov	r0, r4
 8019736:	bd70      	pop	{r4, r5, r6, pc}
 8019738:	20002fd4 	.word	0x20002fd4

0801973c <_malloc_r>:
 801973c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019740:	1ccd      	adds	r5, r1, #3
 8019742:	f025 0503 	bic.w	r5, r5, #3
 8019746:	3508      	adds	r5, #8
 8019748:	2d0c      	cmp	r5, #12
 801974a:	bf38      	it	cc
 801974c:	250c      	movcc	r5, #12
 801974e:	2d00      	cmp	r5, #0
 8019750:	4607      	mov	r7, r0
 8019752:	db01      	blt.n	8019758 <_malloc_r+0x1c>
 8019754:	42a9      	cmp	r1, r5
 8019756:	d905      	bls.n	8019764 <_malloc_r+0x28>
 8019758:	230c      	movs	r3, #12
 801975a:	603b      	str	r3, [r7, #0]
 801975c:	2600      	movs	r6, #0
 801975e:	4630      	mov	r0, r6
 8019760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019764:	4e2e      	ldr	r6, [pc, #184]	; (8019820 <_malloc_r+0xe4>)
 8019766:	f000 fc03 	bl	8019f70 <__malloc_lock>
 801976a:	6833      	ldr	r3, [r6, #0]
 801976c:	461c      	mov	r4, r3
 801976e:	bb34      	cbnz	r4, 80197be <_malloc_r+0x82>
 8019770:	4629      	mov	r1, r5
 8019772:	4638      	mov	r0, r7
 8019774:	f7ff ffc2 	bl	80196fc <sbrk_aligned>
 8019778:	1c43      	adds	r3, r0, #1
 801977a:	4604      	mov	r4, r0
 801977c:	d14d      	bne.n	801981a <_malloc_r+0xde>
 801977e:	6834      	ldr	r4, [r6, #0]
 8019780:	4626      	mov	r6, r4
 8019782:	2e00      	cmp	r6, #0
 8019784:	d140      	bne.n	8019808 <_malloc_r+0xcc>
 8019786:	6823      	ldr	r3, [r4, #0]
 8019788:	4631      	mov	r1, r6
 801978a:	4638      	mov	r0, r7
 801978c:	eb04 0803 	add.w	r8, r4, r3
 8019790:	f000 f8d6 	bl	8019940 <_sbrk_r>
 8019794:	4580      	cmp	r8, r0
 8019796:	d13a      	bne.n	801980e <_malloc_r+0xd2>
 8019798:	6821      	ldr	r1, [r4, #0]
 801979a:	3503      	adds	r5, #3
 801979c:	1a6d      	subs	r5, r5, r1
 801979e:	f025 0503 	bic.w	r5, r5, #3
 80197a2:	3508      	adds	r5, #8
 80197a4:	2d0c      	cmp	r5, #12
 80197a6:	bf38      	it	cc
 80197a8:	250c      	movcc	r5, #12
 80197aa:	4629      	mov	r1, r5
 80197ac:	4638      	mov	r0, r7
 80197ae:	f7ff ffa5 	bl	80196fc <sbrk_aligned>
 80197b2:	3001      	adds	r0, #1
 80197b4:	d02b      	beq.n	801980e <_malloc_r+0xd2>
 80197b6:	6823      	ldr	r3, [r4, #0]
 80197b8:	442b      	add	r3, r5
 80197ba:	6023      	str	r3, [r4, #0]
 80197bc:	e00e      	b.n	80197dc <_malloc_r+0xa0>
 80197be:	6822      	ldr	r2, [r4, #0]
 80197c0:	1b52      	subs	r2, r2, r5
 80197c2:	d41e      	bmi.n	8019802 <_malloc_r+0xc6>
 80197c4:	2a0b      	cmp	r2, #11
 80197c6:	d916      	bls.n	80197f6 <_malloc_r+0xba>
 80197c8:	1961      	adds	r1, r4, r5
 80197ca:	42a3      	cmp	r3, r4
 80197cc:	6025      	str	r5, [r4, #0]
 80197ce:	bf18      	it	ne
 80197d0:	6059      	strne	r1, [r3, #4]
 80197d2:	6863      	ldr	r3, [r4, #4]
 80197d4:	bf08      	it	eq
 80197d6:	6031      	streq	r1, [r6, #0]
 80197d8:	5162      	str	r2, [r4, r5]
 80197da:	604b      	str	r3, [r1, #4]
 80197dc:	4638      	mov	r0, r7
 80197de:	f104 060b 	add.w	r6, r4, #11
 80197e2:	f000 fbcb 	bl	8019f7c <__malloc_unlock>
 80197e6:	f026 0607 	bic.w	r6, r6, #7
 80197ea:	1d23      	adds	r3, r4, #4
 80197ec:	1af2      	subs	r2, r6, r3
 80197ee:	d0b6      	beq.n	801975e <_malloc_r+0x22>
 80197f0:	1b9b      	subs	r3, r3, r6
 80197f2:	50a3      	str	r3, [r4, r2]
 80197f4:	e7b3      	b.n	801975e <_malloc_r+0x22>
 80197f6:	6862      	ldr	r2, [r4, #4]
 80197f8:	42a3      	cmp	r3, r4
 80197fa:	bf0c      	ite	eq
 80197fc:	6032      	streq	r2, [r6, #0]
 80197fe:	605a      	strne	r2, [r3, #4]
 8019800:	e7ec      	b.n	80197dc <_malloc_r+0xa0>
 8019802:	4623      	mov	r3, r4
 8019804:	6864      	ldr	r4, [r4, #4]
 8019806:	e7b2      	b.n	801976e <_malloc_r+0x32>
 8019808:	4634      	mov	r4, r6
 801980a:	6876      	ldr	r6, [r6, #4]
 801980c:	e7b9      	b.n	8019782 <_malloc_r+0x46>
 801980e:	230c      	movs	r3, #12
 8019810:	603b      	str	r3, [r7, #0]
 8019812:	4638      	mov	r0, r7
 8019814:	f000 fbb2 	bl	8019f7c <__malloc_unlock>
 8019818:	e7a1      	b.n	801975e <_malloc_r+0x22>
 801981a:	6025      	str	r5, [r4, #0]
 801981c:	e7de      	b.n	80197dc <_malloc_r+0xa0>
 801981e:	bf00      	nop
 8019820:	20002fd0 	.word	0x20002fd0

08019824 <iprintf>:
 8019824:	b40f      	push	{r0, r1, r2, r3}
 8019826:	4b0a      	ldr	r3, [pc, #40]	; (8019850 <iprintf+0x2c>)
 8019828:	b513      	push	{r0, r1, r4, lr}
 801982a:	681c      	ldr	r4, [r3, #0]
 801982c:	b124      	cbz	r4, 8019838 <iprintf+0x14>
 801982e:	69a3      	ldr	r3, [r4, #24]
 8019830:	b913      	cbnz	r3, 8019838 <iprintf+0x14>
 8019832:	4620      	mov	r0, r4
 8019834:	f000 fa96 	bl	8019d64 <__sinit>
 8019838:	ab05      	add	r3, sp, #20
 801983a:	9a04      	ldr	r2, [sp, #16]
 801983c:	68a1      	ldr	r1, [r4, #8]
 801983e:	9301      	str	r3, [sp, #4]
 8019840:	4620      	mov	r0, r4
 8019842:	f000 fd27 	bl	801a294 <_vfiprintf_r>
 8019846:	b002      	add	sp, #8
 8019848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801984c:	b004      	add	sp, #16
 801984e:	4770      	bx	lr
 8019850:	200006dc 	.word	0x200006dc

08019854 <_puts_r>:
 8019854:	b570      	push	{r4, r5, r6, lr}
 8019856:	460e      	mov	r6, r1
 8019858:	4605      	mov	r5, r0
 801985a:	b118      	cbz	r0, 8019864 <_puts_r+0x10>
 801985c:	6983      	ldr	r3, [r0, #24]
 801985e:	b90b      	cbnz	r3, 8019864 <_puts_r+0x10>
 8019860:	f000 fa80 	bl	8019d64 <__sinit>
 8019864:	69ab      	ldr	r3, [r5, #24]
 8019866:	68ac      	ldr	r4, [r5, #8]
 8019868:	b913      	cbnz	r3, 8019870 <_puts_r+0x1c>
 801986a:	4628      	mov	r0, r5
 801986c:	f000 fa7a 	bl	8019d64 <__sinit>
 8019870:	4b2c      	ldr	r3, [pc, #176]	; (8019924 <_puts_r+0xd0>)
 8019872:	429c      	cmp	r4, r3
 8019874:	d120      	bne.n	80198b8 <_puts_r+0x64>
 8019876:	686c      	ldr	r4, [r5, #4]
 8019878:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801987a:	07db      	lsls	r3, r3, #31
 801987c:	d405      	bmi.n	801988a <_puts_r+0x36>
 801987e:	89a3      	ldrh	r3, [r4, #12]
 8019880:	0598      	lsls	r0, r3, #22
 8019882:	d402      	bmi.n	801988a <_puts_r+0x36>
 8019884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019886:	f000 fb0b 	bl	8019ea0 <__retarget_lock_acquire_recursive>
 801988a:	89a3      	ldrh	r3, [r4, #12]
 801988c:	0719      	lsls	r1, r3, #28
 801988e:	d51d      	bpl.n	80198cc <_puts_r+0x78>
 8019890:	6923      	ldr	r3, [r4, #16]
 8019892:	b1db      	cbz	r3, 80198cc <_puts_r+0x78>
 8019894:	3e01      	subs	r6, #1
 8019896:	68a3      	ldr	r3, [r4, #8]
 8019898:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801989c:	3b01      	subs	r3, #1
 801989e:	60a3      	str	r3, [r4, #8]
 80198a0:	bb39      	cbnz	r1, 80198f2 <_puts_r+0x9e>
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	da38      	bge.n	8019918 <_puts_r+0xc4>
 80198a6:	4622      	mov	r2, r4
 80198a8:	210a      	movs	r1, #10
 80198aa:	4628      	mov	r0, r5
 80198ac:	f000 f880 	bl	80199b0 <__swbuf_r>
 80198b0:	3001      	adds	r0, #1
 80198b2:	d011      	beq.n	80198d8 <_puts_r+0x84>
 80198b4:	250a      	movs	r5, #10
 80198b6:	e011      	b.n	80198dc <_puts_r+0x88>
 80198b8:	4b1b      	ldr	r3, [pc, #108]	; (8019928 <_puts_r+0xd4>)
 80198ba:	429c      	cmp	r4, r3
 80198bc:	d101      	bne.n	80198c2 <_puts_r+0x6e>
 80198be:	68ac      	ldr	r4, [r5, #8]
 80198c0:	e7da      	b.n	8019878 <_puts_r+0x24>
 80198c2:	4b1a      	ldr	r3, [pc, #104]	; (801992c <_puts_r+0xd8>)
 80198c4:	429c      	cmp	r4, r3
 80198c6:	bf08      	it	eq
 80198c8:	68ec      	ldreq	r4, [r5, #12]
 80198ca:	e7d5      	b.n	8019878 <_puts_r+0x24>
 80198cc:	4621      	mov	r1, r4
 80198ce:	4628      	mov	r0, r5
 80198d0:	f000 f8c0 	bl	8019a54 <__swsetup_r>
 80198d4:	2800      	cmp	r0, #0
 80198d6:	d0dd      	beq.n	8019894 <_puts_r+0x40>
 80198d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80198dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80198de:	07da      	lsls	r2, r3, #31
 80198e0:	d405      	bmi.n	80198ee <_puts_r+0x9a>
 80198e2:	89a3      	ldrh	r3, [r4, #12]
 80198e4:	059b      	lsls	r3, r3, #22
 80198e6:	d402      	bmi.n	80198ee <_puts_r+0x9a>
 80198e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80198ea:	f000 fada 	bl	8019ea2 <__retarget_lock_release_recursive>
 80198ee:	4628      	mov	r0, r5
 80198f0:	bd70      	pop	{r4, r5, r6, pc}
 80198f2:	2b00      	cmp	r3, #0
 80198f4:	da04      	bge.n	8019900 <_puts_r+0xac>
 80198f6:	69a2      	ldr	r2, [r4, #24]
 80198f8:	429a      	cmp	r2, r3
 80198fa:	dc06      	bgt.n	801990a <_puts_r+0xb6>
 80198fc:	290a      	cmp	r1, #10
 80198fe:	d004      	beq.n	801990a <_puts_r+0xb6>
 8019900:	6823      	ldr	r3, [r4, #0]
 8019902:	1c5a      	adds	r2, r3, #1
 8019904:	6022      	str	r2, [r4, #0]
 8019906:	7019      	strb	r1, [r3, #0]
 8019908:	e7c5      	b.n	8019896 <_puts_r+0x42>
 801990a:	4622      	mov	r2, r4
 801990c:	4628      	mov	r0, r5
 801990e:	f000 f84f 	bl	80199b0 <__swbuf_r>
 8019912:	3001      	adds	r0, #1
 8019914:	d1bf      	bne.n	8019896 <_puts_r+0x42>
 8019916:	e7df      	b.n	80198d8 <_puts_r+0x84>
 8019918:	6823      	ldr	r3, [r4, #0]
 801991a:	250a      	movs	r5, #10
 801991c:	1c5a      	adds	r2, r3, #1
 801991e:	6022      	str	r2, [r4, #0]
 8019920:	701d      	strb	r5, [r3, #0]
 8019922:	e7db      	b.n	80198dc <_puts_r+0x88>
 8019924:	0801cb24 	.word	0x0801cb24
 8019928:	0801cb44 	.word	0x0801cb44
 801992c:	0801cb04 	.word	0x0801cb04

08019930 <puts>:
 8019930:	4b02      	ldr	r3, [pc, #8]	; (801993c <puts+0xc>)
 8019932:	4601      	mov	r1, r0
 8019934:	6818      	ldr	r0, [r3, #0]
 8019936:	f7ff bf8d 	b.w	8019854 <_puts_r>
 801993a:	bf00      	nop
 801993c:	200006dc 	.word	0x200006dc

08019940 <_sbrk_r>:
 8019940:	b538      	push	{r3, r4, r5, lr}
 8019942:	4d06      	ldr	r5, [pc, #24]	; (801995c <_sbrk_r+0x1c>)
 8019944:	2300      	movs	r3, #0
 8019946:	4604      	mov	r4, r0
 8019948:	4608      	mov	r0, r1
 801994a:	602b      	str	r3, [r5, #0]
 801994c:	f7e9 f998 	bl	8002c80 <_sbrk>
 8019950:	1c43      	adds	r3, r0, #1
 8019952:	d102      	bne.n	801995a <_sbrk_r+0x1a>
 8019954:	682b      	ldr	r3, [r5, #0]
 8019956:	b103      	cbz	r3, 801995a <_sbrk_r+0x1a>
 8019958:	6023      	str	r3, [r4, #0]
 801995a:	bd38      	pop	{r3, r4, r5, pc}
 801995c:	20002fdc 	.word	0x20002fdc

08019960 <siprintf>:
 8019960:	b40e      	push	{r1, r2, r3}
 8019962:	b500      	push	{lr}
 8019964:	b09c      	sub	sp, #112	; 0x70
 8019966:	ab1d      	add	r3, sp, #116	; 0x74
 8019968:	9002      	str	r0, [sp, #8]
 801996a:	9006      	str	r0, [sp, #24]
 801996c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019970:	4809      	ldr	r0, [pc, #36]	; (8019998 <siprintf+0x38>)
 8019972:	9107      	str	r1, [sp, #28]
 8019974:	9104      	str	r1, [sp, #16]
 8019976:	4909      	ldr	r1, [pc, #36]	; (801999c <siprintf+0x3c>)
 8019978:	f853 2b04 	ldr.w	r2, [r3], #4
 801997c:	9105      	str	r1, [sp, #20]
 801997e:	6800      	ldr	r0, [r0, #0]
 8019980:	9301      	str	r3, [sp, #4]
 8019982:	a902      	add	r1, sp, #8
 8019984:	f000 fb5c 	bl	801a040 <_svfiprintf_r>
 8019988:	9b02      	ldr	r3, [sp, #8]
 801998a:	2200      	movs	r2, #0
 801998c:	701a      	strb	r2, [r3, #0]
 801998e:	b01c      	add	sp, #112	; 0x70
 8019990:	f85d eb04 	ldr.w	lr, [sp], #4
 8019994:	b003      	add	sp, #12
 8019996:	4770      	bx	lr
 8019998:	200006dc 	.word	0x200006dc
 801999c:	ffff0208 	.word	0xffff0208

080199a0 <strcpy>:
 80199a0:	4603      	mov	r3, r0
 80199a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80199a6:	f803 2b01 	strb.w	r2, [r3], #1
 80199aa:	2a00      	cmp	r2, #0
 80199ac:	d1f9      	bne.n	80199a2 <strcpy+0x2>
 80199ae:	4770      	bx	lr

080199b0 <__swbuf_r>:
 80199b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199b2:	460e      	mov	r6, r1
 80199b4:	4614      	mov	r4, r2
 80199b6:	4605      	mov	r5, r0
 80199b8:	b118      	cbz	r0, 80199c2 <__swbuf_r+0x12>
 80199ba:	6983      	ldr	r3, [r0, #24]
 80199bc:	b90b      	cbnz	r3, 80199c2 <__swbuf_r+0x12>
 80199be:	f000 f9d1 	bl	8019d64 <__sinit>
 80199c2:	4b21      	ldr	r3, [pc, #132]	; (8019a48 <__swbuf_r+0x98>)
 80199c4:	429c      	cmp	r4, r3
 80199c6:	d12b      	bne.n	8019a20 <__swbuf_r+0x70>
 80199c8:	686c      	ldr	r4, [r5, #4]
 80199ca:	69a3      	ldr	r3, [r4, #24]
 80199cc:	60a3      	str	r3, [r4, #8]
 80199ce:	89a3      	ldrh	r3, [r4, #12]
 80199d0:	071a      	lsls	r2, r3, #28
 80199d2:	d52f      	bpl.n	8019a34 <__swbuf_r+0x84>
 80199d4:	6923      	ldr	r3, [r4, #16]
 80199d6:	b36b      	cbz	r3, 8019a34 <__swbuf_r+0x84>
 80199d8:	6923      	ldr	r3, [r4, #16]
 80199da:	6820      	ldr	r0, [r4, #0]
 80199dc:	1ac0      	subs	r0, r0, r3
 80199de:	6963      	ldr	r3, [r4, #20]
 80199e0:	b2f6      	uxtb	r6, r6
 80199e2:	4283      	cmp	r3, r0
 80199e4:	4637      	mov	r7, r6
 80199e6:	dc04      	bgt.n	80199f2 <__swbuf_r+0x42>
 80199e8:	4621      	mov	r1, r4
 80199ea:	4628      	mov	r0, r5
 80199ec:	f000 f926 	bl	8019c3c <_fflush_r>
 80199f0:	bb30      	cbnz	r0, 8019a40 <__swbuf_r+0x90>
 80199f2:	68a3      	ldr	r3, [r4, #8]
 80199f4:	3b01      	subs	r3, #1
 80199f6:	60a3      	str	r3, [r4, #8]
 80199f8:	6823      	ldr	r3, [r4, #0]
 80199fa:	1c5a      	adds	r2, r3, #1
 80199fc:	6022      	str	r2, [r4, #0]
 80199fe:	701e      	strb	r6, [r3, #0]
 8019a00:	6963      	ldr	r3, [r4, #20]
 8019a02:	3001      	adds	r0, #1
 8019a04:	4283      	cmp	r3, r0
 8019a06:	d004      	beq.n	8019a12 <__swbuf_r+0x62>
 8019a08:	89a3      	ldrh	r3, [r4, #12]
 8019a0a:	07db      	lsls	r3, r3, #31
 8019a0c:	d506      	bpl.n	8019a1c <__swbuf_r+0x6c>
 8019a0e:	2e0a      	cmp	r6, #10
 8019a10:	d104      	bne.n	8019a1c <__swbuf_r+0x6c>
 8019a12:	4621      	mov	r1, r4
 8019a14:	4628      	mov	r0, r5
 8019a16:	f000 f911 	bl	8019c3c <_fflush_r>
 8019a1a:	b988      	cbnz	r0, 8019a40 <__swbuf_r+0x90>
 8019a1c:	4638      	mov	r0, r7
 8019a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a20:	4b0a      	ldr	r3, [pc, #40]	; (8019a4c <__swbuf_r+0x9c>)
 8019a22:	429c      	cmp	r4, r3
 8019a24:	d101      	bne.n	8019a2a <__swbuf_r+0x7a>
 8019a26:	68ac      	ldr	r4, [r5, #8]
 8019a28:	e7cf      	b.n	80199ca <__swbuf_r+0x1a>
 8019a2a:	4b09      	ldr	r3, [pc, #36]	; (8019a50 <__swbuf_r+0xa0>)
 8019a2c:	429c      	cmp	r4, r3
 8019a2e:	bf08      	it	eq
 8019a30:	68ec      	ldreq	r4, [r5, #12]
 8019a32:	e7ca      	b.n	80199ca <__swbuf_r+0x1a>
 8019a34:	4621      	mov	r1, r4
 8019a36:	4628      	mov	r0, r5
 8019a38:	f000 f80c 	bl	8019a54 <__swsetup_r>
 8019a3c:	2800      	cmp	r0, #0
 8019a3e:	d0cb      	beq.n	80199d8 <__swbuf_r+0x28>
 8019a40:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8019a44:	e7ea      	b.n	8019a1c <__swbuf_r+0x6c>
 8019a46:	bf00      	nop
 8019a48:	0801cb24 	.word	0x0801cb24
 8019a4c:	0801cb44 	.word	0x0801cb44
 8019a50:	0801cb04 	.word	0x0801cb04

08019a54 <__swsetup_r>:
 8019a54:	4b32      	ldr	r3, [pc, #200]	; (8019b20 <__swsetup_r+0xcc>)
 8019a56:	b570      	push	{r4, r5, r6, lr}
 8019a58:	681d      	ldr	r5, [r3, #0]
 8019a5a:	4606      	mov	r6, r0
 8019a5c:	460c      	mov	r4, r1
 8019a5e:	b125      	cbz	r5, 8019a6a <__swsetup_r+0x16>
 8019a60:	69ab      	ldr	r3, [r5, #24]
 8019a62:	b913      	cbnz	r3, 8019a6a <__swsetup_r+0x16>
 8019a64:	4628      	mov	r0, r5
 8019a66:	f000 f97d 	bl	8019d64 <__sinit>
 8019a6a:	4b2e      	ldr	r3, [pc, #184]	; (8019b24 <__swsetup_r+0xd0>)
 8019a6c:	429c      	cmp	r4, r3
 8019a6e:	d10f      	bne.n	8019a90 <__swsetup_r+0x3c>
 8019a70:	686c      	ldr	r4, [r5, #4]
 8019a72:	89a3      	ldrh	r3, [r4, #12]
 8019a74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019a78:	0719      	lsls	r1, r3, #28
 8019a7a:	d42c      	bmi.n	8019ad6 <__swsetup_r+0x82>
 8019a7c:	06dd      	lsls	r5, r3, #27
 8019a7e:	d411      	bmi.n	8019aa4 <__swsetup_r+0x50>
 8019a80:	2309      	movs	r3, #9
 8019a82:	6033      	str	r3, [r6, #0]
 8019a84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019a88:	81a3      	strh	r3, [r4, #12]
 8019a8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019a8e:	e03e      	b.n	8019b0e <__swsetup_r+0xba>
 8019a90:	4b25      	ldr	r3, [pc, #148]	; (8019b28 <__swsetup_r+0xd4>)
 8019a92:	429c      	cmp	r4, r3
 8019a94:	d101      	bne.n	8019a9a <__swsetup_r+0x46>
 8019a96:	68ac      	ldr	r4, [r5, #8]
 8019a98:	e7eb      	b.n	8019a72 <__swsetup_r+0x1e>
 8019a9a:	4b24      	ldr	r3, [pc, #144]	; (8019b2c <__swsetup_r+0xd8>)
 8019a9c:	429c      	cmp	r4, r3
 8019a9e:	bf08      	it	eq
 8019aa0:	68ec      	ldreq	r4, [r5, #12]
 8019aa2:	e7e6      	b.n	8019a72 <__swsetup_r+0x1e>
 8019aa4:	0758      	lsls	r0, r3, #29
 8019aa6:	d512      	bpl.n	8019ace <__swsetup_r+0x7a>
 8019aa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019aaa:	b141      	cbz	r1, 8019abe <__swsetup_r+0x6a>
 8019aac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019ab0:	4299      	cmp	r1, r3
 8019ab2:	d002      	beq.n	8019aba <__swsetup_r+0x66>
 8019ab4:	4630      	mov	r0, r6
 8019ab6:	f7ff fdd5 	bl	8019664 <_free_r>
 8019aba:	2300      	movs	r3, #0
 8019abc:	6363      	str	r3, [r4, #52]	; 0x34
 8019abe:	89a3      	ldrh	r3, [r4, #12]
 8019ac0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019ac4:	81a3      	strh	r3, [r4, #12]
 8019ac6:	2300      	movs	r3, #0
 8019ac8:	6063      	str	r3, [r4, #4]
 8019aca:	6923      	ldr	r3, [r4, #16]
 8019acc:	6023      	str	r3, [r4, #0]
 8019ace:	89a3      	ldrh	r3, [r4, #12]
 8019ad0:	f043 0308 	orr.w	r3, r3, #8
 8019ad4:	81a3      	strh	r3, [r4, #12]
 8019ad6:	6923      	ldr	r3, [r4, #16]
 8019ad8:	b94b      	cbnz	r3, 8019aee <__swsetup_r+0x9a>
 8019ada:	89a3      	ldrh	r3, [r4, #12]
 8019adc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019ae4:	d003      	beq.n	8019aee <__swsetup_r+0x9a>
 8019ae6:	4621      	mov	r1, r4
 8019ae8:	4630      	mov	r0, r6
 8019aea:	f000 fa01 	bl	8019ef0 <__smakebuf_r>
 8019aee:	89a0      	ldrh	r0, [r4, #12]
 8019af0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019af4:	f010 0301 	ands.w	r3, r0, #1
 8019af8:	d00a      	beq.n	8019b10 <__swsetup_r+0xbc>
 8019afa:	2300      	movs	r3, #0
 8019afc:	60a3      	str	r3, [r4, #8]
 8019afe:	6963      	ldr	r3, [r4, #20]
 8019b00:	425b      	negs	r3, r3
 8019b02:	61a3      	str	r3, [r4, #24]
 8019b04:	6923      	ldr	r3, [r4, #16]
 8019b06:	b943      	cbnz	r3, 8019b1a <__swsetup_r+0xc6>
 8019b08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019b0c:	d1ba      	bne.n	8019a84 <__swsetup_r+0x30>
 8019b0e:	bd70      	pop	{r4, r5, r6, pc}
 8019b10:	0781      	lsls	r1, r0, #30
 8019b12:	bf58      	it	pl
 8019b14:	6963      	ldrpl	r3, [r4, #20]
 8019b16:	60a3      	str	r3, [r4, #8]
 8019b18:	e7f4      	b.n	8019b04 <__swsetup_r+0xb0>
 8019b1a:	2000      	movs	r0, #0
 8019b1c:	e7f7      	b.n	8019b0e <__swsetup_r+0xba>
 8019b1e:	bf00      	nop
 8019b20:	200006dc 	.word	0x200006dc
 8019b24:	0801cb24 	.word	0x0801cb24
 8019b28:	0801cb44 	.word	0x0801cb44
 8019b2c:	0801cb04 	.word	0x0801cb04

08019b30 <__sflush_r>:
 8019b30:	898a      	ldrh	r2, [r1, #12]
 8019b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b36:	4605      	mov	r5, r0
 8019b38:	0710      	lsls	r0, r2, #28
 8019b3a:	460c      	mov	r4, r1
 8019b3c:	d458      	bmi.n	8019bf0 <__sflush_r+0xc0>
 8019b3e:	684b      	ldr	r3, [r1, #4]
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	dc05      	bgt.n	8019b50 <__sflush_r+0x20>
 8019b44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	dc02      	bgt.n	8019b50 <__sflush_r+0x20>
 8019b4a:	2000      	movs	r0, #0
 8019b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019b52:	2e00      	cmp	r6, #0
 8019b54:	d0f9      	beq.n	8019b4a <__sflush_r+0x1a>
 8019b56:	2300      	movs	r3, #0
 8019b58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019b5c:	682f      	ldr	r7, [r5, #0]
 8019b5e:	602b      	str	r3, [r5, #0]
 8019b60:	d032      	beq.n	8019bc8 <__sflush_r+0x98>
 8019b62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019b64:	89a3      	ldrh	r3, [r4, #12]
 8019b66:	075a      	lsls	r2, r3, #29
 8019b68:	d505      	bpl.n	8019b76 <__sflush_r+0x46>
 8019b6a:	6863      	ldr	r3, [r4, #4]
 8019b6c:	1ac0      	subs	r0, r0, r3
 8019b6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019b70:	b10b      	cbz	r3, 8019b76 <__sflush_r+0x46>
 8019b72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019b74:	1ac0      	subs	r0, r0, r3
 8019b76:	2300      	movs	r3, #0
 8019b78:	4602      	mov	r2, r0
 8019b7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019b7c:	6a21      	ldr	r1, [r4, #32]
 8019b7e:	4628      	mov	r0, r5
 8019b80:	47b0      	blx	r6
 8019b82:	1c43      	adds	r3, r0, #1
 8019b84:	89a3      	ldrh	r3, [r4, #12]
 8019b86:	d106      	bne.n	8019b96 <__sflush_r+0x66>
 8019b88:	6829      	ldr	r1, [r5, #0]
 8019b8a:	291d      	cmp	r1, #29
 8019b8c:	d82c      	bhi.n	8019be8 <__sflush_r+0xb8>
 8019b8e:	4a2a      	ldr	r2, [pc, #168]	; (8019c38 <__sflush_r+0x108>)
 8019b90:	40ca      	lsrs	r2, r1
 8019b92:	07d6      	lsls	r6, r2, #31
 8019b94:	d528      	bpl.n	8019be8 <__sflush_r+0xb8>
 8019b96:	2200      	movs	r2, #0
 8019b98:	6062      	str	r2, [r4, #4]
 8019b9a:	04d9      	lsls	r1, r3, #19
 8019b9c:	6922      	ldr	r2, [r4, #16]
 8019b9e:	6022      	str	r2, [r4, #0]
 8019ba0:	d504      	bpl.n	8019bac <__sflush_r+0x7c>
 8019ba2:	1c42      	adds	r2, r0, #1
 8019ba4:	d101      	bne.n	8019baa <__sflush_r+0x7a>
 8019ba6:	682b      	ldr	r3, [r5, #0]
 8019ba8:	b903      	cbnz	r3, 8019bac <__sflush_r+0x7c>
 8019baa:	6560      	str	r0, [r4, #84]	; 0x54
 8019bac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019bae:	602f      	str	r7, [r5, #0]
 8019bb0:	2900      	cmp	r1, #0
 8019bb2:	d0ca      	beq.n	8019b4a <__sflush_r+0x1a>
 8019bb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019bb8:	4299      	cmp	r1, r3
 8019bba:	d002      	beq.n	8019bc2 <__sflush_r+0x92>
 8019bbc:	4628      	mov	r0, r5
 8019bbe:	f7ff fd51 	bl	8019664 <_free_r>
 8019bc2:	2000      	movs	r0, #0
 8019bc4:	6360      	str	r0, [r4, #52]	; 0x34
 8019bc6:	e7c1      	b.n	8019b4c <__sflush_r+0x1c>
 8019bc8:	6a21      	ldr	r1, [r4, #32]
 8019bca:	2301      	movs	r3, #1
 8019bcc:	4628      	mov	r0, r5
 8019bce:	47b0      	blx	r6
 8019bd0:	1c41      	adds	r1, r0, #1
 8019bd2:	d1c7      	bne.n	8019b64 <__sflush_r+0x34>
 8019bd4:	682b      	ldr	r3, [r5, #0]
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	d0c4      	beq.n	8019b64 <__sflush_r+0x34>
 8019bda:	2b1d      	cmp	r3, #29
 8019bdc:	d001      	beq.n	8019be2 <__sflush_r+0xb2>
 8019bde:	2b16      	cmp	r3, #22
 8019be0:	d101      	bne.n	8019be6 <__sflush_r+0xb6>
 8019be2:	602f      	str	r7, [r5, #0]
 8019be4:	e7b1      	b.n	8019b4a <__sflush_r+0x1a>
 8019be6:	89a3      	ldrh	r3, [r4, #12]
 8019be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019bec:	81a3      	strh	r3, [r4, #12]
 8019bee:	e7ad      	b.n	8019b4c <__sflush_r+0x1c>
 8019bf0:	690f      	ldr	r7, [r1, #16]
 8019bf2:	2f00      	cmp	r7, #0
 8019bf4:	d0a9      	beq.n	8019b4a <__sflush_r+0x1a>
 8019bf6:	0793      	lsls	r3, r2, #30
 8019bf8:	680e      	ldr	r6, [r1, #0]
 8019bfa:	bf08      	it	eq
 8019bfc:	694b      	ldreq	r3, [r1, #20]
 8019bfe:	600f      	str	r7, [r1, #0]
 8019c00:	bf18      	it	ne
 8019c02:	2300      	movne	r3, #0
 8019c04:	eba6 0807 	sub.w	r8, r6, r7
 8019c08:	608b      	str	r3, [r1, #8]
 8019c0a:	f1b8 0f00 	cmp.w	r8, #0
 8019c0e:	dd9c      	ble.n	8019b4a <__sflush_r+0x1a>
 8019c10:	6a21      	ldr	r1, [r4, #32]
 8019c12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019c14:	4643      	mov	r3, r8
 8019c16:	463a      	mov	r2, r7
 8019c18:	4628      	mov	r0, r5
 8019c1a:	47b0      	blx	r6
 8019c1c:	2800      	cmp	r0, #0
 8019c1e:	dc06      	bgt.n	8019c2e <__sflush_r+0xfe>
 8019c20:	89a3      	ldrh	r3, [r4, #12]
 8019c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019c26:	81a3      	strh	r3, [r4, #12]
 8019c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019c2c:	e78e      	b.n	8019b4c <__sflush_r+0x1c>
 8019c2e:	4407      	add	r7, r0
 8019c30:	eba8 0800 	sub.w	r8, r8, r0
 8019c34:	e7e9      	b.n	8019c0a <__sflush_r+0xda>
 8019c36:	bf00      	nop
 8019c38:	20400001 	.word	0x20400001

08019c3c <_fflush_r>:
 8019c3c:	b538      	push	{r3, r4, r5, lr}
 8019c3e:	690b      	ldr	r3, [r1, #16]
 8019c40:	4605      	mov	r5, r0
 8019c42:	460c      	mov	r4, r1
 8019c44:	b913      	cbnz	r3, 8019c4c <_fflush_r+0x10>
 8019c46:	2500      	movs	r5, #0
 8019c48:	4628      	mov	r0, r5
 8019c4a:	bd38      	pop	{r3, r4, r5, pc}
 8019c4c:	b118      	cbz	r0, 8019c56 <_fflush_r+0x1a>
 8019c4e:	6983      	ldr	r3, [r0, #24]
 8019c50:	b90b      	cbnz	r3, 8019c56 <_fflush_r+0x1a>
 8019c52:	f000 f887 	bl	8019d64 <__sinit>
 8019c56:	4b14      	ldr	r3, [pc, #80]	; (8019ca8 <_fflush_r+0x6c>)
 8019c58:	429c      	cmp	r4, r3
 8019c5a:	d11b      	bne.n	8019c94 <_fflush_r+0x58>
 8019c5c:	686c      	ldr	r4, [r5, #4]
 8019c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	d0ef      	beq.n	8019c46 <_fflush_r+0xa>
 8019c66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019c68:	07d0      	lsls	r0, r2, #31
 8019c6a:	d404      	bmi.n	8019c76 <_fflush_r+0x3a>
 8019c6c:	0599      	lsls	r1, r3, #22
 8019c6e:	d402      	bmi.n	8019c76 <_fflush_r+0x3a>
 8019c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019c72:	f000 f915 	bl	8019ea0 <__retarget_lock_acquire_recursive>
 8019c76:	4628      	mov	r0, r5
 8019c78:	4621      	mov	r1, r4
 8019c7a:	f7ff ff59 	bl	8019b30 <__sflush_r>
 8019c7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019c80:	07da      	lsls	r2, r3, #31
 8019c82:	4605      	mov	r5, r0
 8019c84:	d4e0      	bmi.n	8019c48 <_fflush_r+0xc>
 8019c86:	89a3      	ldrh	r3, [r4, #12]
 8019c88:	059b      	lsls	r3, r3, #22
 8019c8a:	d4dd      	bmi.n	8019c48 <_fflush_r+0xc>
 8019c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019c8e:	f000 f908 	bl	8019ea2 <__retarget_lock_release_recursive>
 8019c92:	e7d9      	b.n	8019c48 <_fflush_r+0xc>
 8019c94:	4b05      	ldr	r3, [pc, #20]	; (8019cac <_fflush_r+0x70>)
 8019c96:	429c      	cmp	r4, r3
 8019c98:	d101      	bne.n	8019c9e <_fflush_r+0x62>
 8019c9a:	68ac      	ldr	r4, [r5, #8]
 8019c9c:	e7df      	b.n	8019c5e <_fflush_r+0x22>
 8019c9e:	4b04      	ldr	r3, [pc, #16]	; (8019cb0 <_fflush_r+0x74>)
 8019ca0:	429c      	cmp	r4, r3
 8019ca2:	bf08      	it	eq
 8019ca4:	68ec      	ldreq	r4, [r5, #12]
 8019ca6:	e7da      	b.n	8019c5e <_fflush_r+0x22>
 8019ca8:	0801cb24 	.word	0x0801cb24
 8019cac:	0801cb44 	.word	0x0801cb44
 8019cb0:	0801cb04 	.word	0x0801cb04

08019cb4 <std>:
 8019cb4:	2300      	movs	r3, #0
 8019cb6:	b510      	push	{r4, lr}
 8019cb8:	4604      	mov	r4, r0
 8019cba:	e9c0 3300 	strd	r3, r3, [r0]
 8019cbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019cc2:	6083      	str	r3, [r0, #8]
 8019cc4:	8181      	strh	r1, [r0, #12]
 8019cc6:	6643      	str	r3, [r0, #100]	; 0x64
 8019cc8:	81c2      	strh	r2, [r0, #14]
 8019cca:	6183      	str	r3, [r0, #24]
 8019ccc:	4619      	mov	r1, r3
 8019cce:	2208      	movs	r2, #8
 8019cd0:	305c      	adds	r0, #92	; 0x5c
 8019cd2:	f7ff fcbf 	bl	8019654 <memset>
 8019cd6:	4b05      	ldr	r3, [pc, #20]	; (8019cec <std+0x38>)
 8019cd8:	6263      	str	r3, [r4, #36]	; 0x24
 8019cda:	4b05      	ldr	r3, [pc, #20]	; (8019cf0 <std+0x3c>)
 8019cdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8019cde:	4b05      	ldr	r3, [pc, #20]	; (8019cf4 <std+0x40>)
 8019ce0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019ce2:	4b05      	ldr	r3, [pc, #20]	; (8019cf8 <std+0x44>)
 8019ce4:	6224      	str	r4, [r4, #32]
 8019ce6:	6323      	str	r3, [r4, #48]	; 0x30
 8019ce8:	bd10      	pop	{r4, pc}
 8019cea:	bf00      	nop
 8019cec:	0801a81d 	.word	0x0801a81d
 8019cf0:	0801a83f 	.word	0x0801a83f
 8019cf4:	0801a877 	.word	0x0801a877
 8019cf8:	0801a89b 	.word	0x0801a89b

08019cfc <_cleanup_r>:
 8019cfc:	4901      	ldr	r1, [pc, #4]	; (8019d04 <_cleanup_r+0x8>)
 8019cfe:	f000 b8af 	b.w	8019e60 <_fwalk_reent>
 8019d02:	bf00      	nop
 8019d04:	08019c3d 	.word	0x08019c3d

08019d08 <__sfmoreglue>:
 8019d08:	b570      	push	{r4, r5, r6, lr}
 8019d0a:	2268      	movs	r2, #104	; 0x68
 8019d0c:	1e4d      	subs	r5, r1, #1
 8019d0e:	4355      	muls	r5, r2
 8019d10:	460e      	mov	r6, r1
 8019d12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019d16:	f7ff fd11 	bl	801973c <_malloc_r>
 8019d1a:	4604      	mov	r4, r0
 8019d1c:	b140      	cbz	r0, 8019d30 <__sfmoreglue+0x28>
 8019d1e:	2100      	movs	r1, #0
 8019d20:	e9c0 1600 	strd	r1, r6, [r0]
 8019d24:	300c      	adds	r0, #12
 8019d26:	60a0      	str	r0, [r4, #8]
 8019d28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019d2c:	f7ff fc92 	bl	8019654 <memset>
 8019d30:	4620      	mov	r0, r4
 8019d32:	bd70      	pop	{r4, r5, r6, pc}

08019d34 <__sfp_lock_acquire>:
 8019d34:	4801      	ldr	r0, [pc, #4]	; (8019d3c <__sfp_lock_acquire+0x8>)
 8019d36:	f000 b8b3 	b.w	8019ea0 <__retarget_lock_acquire_recursive>
 8019d3a:	bf00      	nop
 8019d3c:	20002fd9 	.word	0x20002fd9

08019d40 <__sfp_lock_release>:
 8019d40:	4801      	ldr	r0, [pc, #4]	; (8019d48 <__sfp_lock_release+0x8>)
 8019d42:	f000 b8ae 	b.w	8019ea2 <__retarget_lock_release_recursive>
 8019d46:	bf00      	nop
 8019d48:	20002fd9 	.word	0x20002fd9

08019d4c <__sinit_lock_acquire>:
 8019d4c:	4801      	ldr	r0, [pc, #4]	; (8019d54 <__sinit_lock_acquire+0x8>)
 8019d4e:	f000 b8a7 	b.w	8019ea0 <__retarget_lock_acquire_recursive>
 8019d52:	bf00      	nop
 8019d54:	20002fda 	.word	0x20002fda

08019d58 <__sinit_lock_release>:
 8019d58:	4801      	ldr	r0, [pc, #4]	; (8019d60 <__sinit_lock_release+0x8>)
 8019d5a:	f000 b8a2 	b.w	8019ea2 <__retarget_lock_release_recursive>
 8019d5e:	bf00      	nop
 8019d60:	20002fda 	.word	0x20002fda

08019d64 <__sinit>:
 8019d64:	b510      	push	{r4, lr}
 8019d66:	4604      	mov	r4, r0
 8019d68:	f7ff fff0 	bl	8019d4c <__sinit_lock_acquire>
 8019d6c:	69a3      	ldr	r3, [r4, #24]
 8019d6e:	b11b      	cbz	r3, 8019d78 <__sinit+0x14>
 8019d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d74:	f7ff bff0 	b.w	8019d58 <__sinit_lock_release>
 8019d78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019d7c:	6523      	str	r3, [r4, #80]	; 0x50
 8019d7e:	4b13      	ldr	r3, [pc, #76]	; (8019dcc <__sinit+0x68>)
 8019d80:	4a13      	ldr	r2, [pc, #76]	; (8019dd0 <__sinit+0x6c>)
 8019d82:	681b      	ldr	r3, [r3, #0]
 8019d84:	62a2      	str	r2, [r4, #40]	; 0x28
 8019d86:	42a3      	cmp	r3, r4
 8019d88:	bf04      	itt	eq
 8019d8a:	2301      	moveq	r3, #1
 8019d8c:	61a3      	streq	r3, [r4, #24]
 8019d8e:	4620      	mov	r0, r4
 8019d90:	f000 f820 	bl	8019dd4 <__sfp>
 8019d94:	6060      	str	r0, [r4, #4]
 8019d96:	4620      	mov	r0, r4
 8019d98:	f000 f81c 	bl	8019dd4 <__sfp>
 8019d9c:	60a0      	str	r0, [r4, #8]
 8019d9e:	4620      	mov	r0, r4
 8019da0:	f000 f818 	bl	8019dd4 <__sfp>
 8019da4:	2200      	movs	r2, #0
 8019da6:	60e0      	str	r0, [r4, #12]
 8019da8:	2104      	movs	r1, #4
 8019daa:	6860      	ldr	r0, [r4, #4]
 8019dac:	f7ff ff82 	bl	8019cb4 <std>
 8019db0:	68a0      	ldr	r0, [r4, #8]
 8019db2:	2201      	movs	r2, #1
 8019db4:	2109      	movs	r1, #9
 8019db6:	f7ff ff7d 	bl	8019cb4 <std>
 8019dba:	68e0      	ldr	r0, [r4, #12]
 8019dbc:	2202      	movs	r2, #2
 8019dbe:	2112      	movs	r1, #18
 8019dc0:	f7ff ff78 	bl	8019cb4 <std>
 8019dc4:	2301      	movs	r3, #1
 8019dc6:	61a3      	str	r3, [r4, #24]
 8019dc8:	e7d2      	b.n	8019d70 <__sinit+0xc>
 8019dca:	bf00      	nop
 8019dcc:	0801cb00 	.word	0x0801cb00
 8019dd0:	08019cfd 	.word	0x08019cfd

08019dd4 <__sfp>:
 8019dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019dd6:	4607      	mov	r7, r0
 8019dd8:	f7ff ffac 	bl	8019d34 <__sfp_lock_acquire>
 8019ddc:	4b1e      	ldr	r3, [pc, #120]	; (8019e58 <__sfp+0x84>)
 8019dde:	681e      	ldr	r6, [r3, #0]
 8019de0:	69b3      	ldr	r3, [r6, #24]
 8019de2:	b913      	cbnz	r3, 8019dea <__sfp+0x16>
 8019de4:	4630      	mov	r0, r6
 8019de6:	f7ff ffbd 	bl	8019d64 <__sinit>
 8019dea:	3648      	adds	r6, #72	; 0x48
 8019dec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019df0:	3b01      	subs	r3, #1
 8019df2:	d503      	bpl.n	8019dfc <__sfp+0x28>
 8019df4:	6833      	ldr	r3, [r6, #0]
 8019df6:	b30b      	cbz	r3, 8019e3c <__sfp+0x68>
 8019df8:	6836      	ldr	r6, [r6, #0]
 8019dfa:	e7f7      	b.n	8019dec <__sfp+0x18>
 8019dfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019e00:	b9d5      	cbnz	r5, 8019e38 <__sfp+0x64>
 8019e02:	4b16      	ldr	r3, [pc, #88]	; (8019e5c <__sfp+0x88>)
 8019e04:	60e3      	str	r3, [r4, #12]
 8019e06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019e0a:	6665      	str	r5, [r4, #100]	; 0x64
 8019e0c:	f000 f847 	bl	8019e9e <__retarget_lock_init_recursive>
 8019e10:	f7ff ff96 	bl	8019d40 <__sfp_lock_release>
 8019e14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019e18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019e1c:	6025      	str	r5, [r4, #0]
 8019e1e:	61a5      	str	r5, [r4, #24]
 8019e20:	2208      	movs	r2, #8
 8019e22:	4629      	mov	r1, r5
 8019e24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019e28:	f7ff fc14 	bl	8019654 <memset>
 8019e2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019e30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019e34:	4620      	mov	r0, r4
 8019e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e38:	3468      	adds	r4, #104	; 0x68
 8019e3a:	e7d9      	b.n	8019df0 <__sfp+0x1c>
 8019e3c:	2104      	movs	r1, #4
 8019e3e:	4638      	mov	r0, r7
 8019e40:	f7ff ff62 	bl	8019d08 <__sfmoreglue>
 8019e44:	4604      	mov	r4, r0
 8019e46:	6030      	str	r0, [r6, #0]
 8019e48:	2800      	cmp	r0, #0
 8019e4a:	d1d5      	bne.n	8019df8 <__sfp+0x24>
 8019e4c:	f7ff ff78 	bl	8019d40 <__sfp_lock_release>
 8019e50:	230c      	movs	r3, #12
 8019e52:	603b      	str	r3, [r7, #0]
 8019e54:	e7ee      	b.n	8019e34 <__sfp+0x60>
 8019e56:	bf00      	nop
 8019e58:	0801cb00 	.word	0x0801cb00
 8019e5c:	ffff0001 	.word	0xffff0001

08019e60 <_fwalk_reent>:
 8019e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e64:	4606      	mov	r6, r0
 8019e66:	4688      	mov	r8, r1
 8019e68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019e6c:	2700      	movs	r7, #0
 8019e6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019e72:	f1b9 0901 	subs.w	r9, r9, #1
 8019e76:	d505      	bpl.n	8019e84 <_fwalk_reent+0x24>
 8019e78:	6824      	ldr	r4, [r4, #0]
 8019e7a:	2c00      	cmp	r4, #0
 8019e7c:	d1f7      	bne.n	8019e6e <_fwalk_reent+0xe>
 8019e7e:	4638      	mov	r0, r7
 8019e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e84:	89ab      	ldrh	r3, [r5, #12]
 8019e86:	2b01      	cmp	r3, #1
 8019e88:	d907      	bls.n	8019e9a <_fwalk_reent+0x3a>
 8019e8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019e8e:	3301      	adds	r3, #1
 8019e90:	d003      	beq.n	8019e9a <_fwalk_reent+0x3a>
 8019e92:	4629      	mov	r1, r5
 8019e94:	4630      	mov	r0, r6
 8019e96:	47c0      	blx	r8
 8019e98:	4307      	orrs	r7, r0
 8019e9a:	3568      	adds	r5, #104	; 0x68
 8019e9c:	e7e9      	b.n	8019e72 <_fwalk_reent+0x12>

08019e9e <__retarget_lock_init_recursive>:
 8019e9e:	4770      	bx	lr

08019ea0 <__retarget_lock_acquire_recursive>:
 8019ea0:	4770      	bx	lr

08019ea2 <__retarget_lock_release_recursive>:
 8019ea2:	4770      	bx	lr

08019ea4 <__swhatbuf_r>:
 8019ea4:	b570      	push	{r4, r5, r6, lr}
 8019ea6:	460e      	mov	r6, r1
 8019ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019eac:	2900      	cmp	r1, #0
 8019eae:	b096      	sub	sp, #88	; 0x58
 8019eb0:	4614      	mov	r4, r2
 8019eb2:	461d      	mov	r5, r3
 8019eb4:	da08      	bge.n	8019ec8 <__swhatbuf_r+0x24>
 8019eb6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8019eba:	2200      	movs	r2, #0
 8019ebc:	602a      	str	r2, [r5, #0]
 8019ebe:	061a      	lsls	r2, r3, #24
 8019ec0:	d410      	bmi.n	8019ee4 <__swhatbuf_r+0x40>
 8019ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019ec6:	e00e      	b.n	8019ee6 <__swhatbuf_r+0x42>
 8019ec8:	466a      	mov	r2, sp
 8019eca:	f000 fd0d 	bl	801a8e8 <_fstat_r>
 8019ece:	2800      	cmp	r0, #0
 8019ed0:	dbf1      	blt.n	8019eb6 <__swhatbuf_r+0x12>
 8019ed2:	9a01      	ldr	r2, [sp, #4]
 8019ed4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019ed8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019edc:	425a      	negs	r2, r3
 8019ede:	415a      	adcs	r2, r3
 8019ee0:	602a      	str	r2, [r5, #0]
 8019ee2:	e7ee      	b.n	8019ec2 <__swhatbuf_r+0x1e>
 8019ee4:	2340      	movs	r3, #64	; 0x40
 8019ee6:	2000      	movs	r0, #0
 8019ee8:	6023      	str	r3, [r4, #0]
 8019eea:	b016      	add	sp, #88	; 0x58
 8019eec:	bd70      	pop	{r4, r5, r6, pc}
	...

08019ef0 <__smakebuf_r>:
 8019ef0:	898b      	ldrh	r3, [r1, #12]
 8019ef2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019ef4:	079d      	lsls	r5, r3, #30
 8019ef6:	4606      	mov	r6, r0
 8019ef8:	460c      	mov	r4, r1
 8019efa:	d507      	bpl.n	8019f0c <__smakebuf_r+0x1c>
 8019efc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019f00:	6023      	str	r3, [r4, #0]
 8019f02:	6123      	str	r3, [r4, #16]
 8019f04:	2301      	movs	r3, #1
 8019f06:	6163      	str	r3, [r4, #20]
 8019f08:	b002      	add	sp, #8
 8019f0a:	bd70      	pop	{r4, r5, r6, pc}
 8019f0c:	ab01      	add	r3, sp, #4
 8019f0e:	466a      	mov	r2, sp
 8019f10:	f7ff ffc8 	bl	8019ea4 <__swhatbuf_r>
 8019f14:	9900      	ldr	r1, [sp, #0]
 8019f16:	4605      	mov	r5, r0
 8019f18:	4630      	mov	r0, r6
 8019f1a:	f7ff fc0f 	bl	801973c <_malloc_r>
 8019f1e:	b948      	cbnz	r0, 8019f34 <__smakebuf_r+0x44>
 8019f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019f24:	059a      	lsls	r2, r3, #22
 8019f26:	d4ef      	bmi.n	8019f08 <__smakebuf_r+0x18>
 8019f28:	f023 0303 	bic.w	r3, r3, #3
 8019f2c:	f043 0302 	orr.w	r3, r3, #2
 8019f30:	81a3      	strh	r3, [r4, #12]
 8019f32:	e7e3      	b.n	8019efc <__smakebuf_r+0xc>
 8019f34:	4b0d      	ldr	r3, [pc, #52]	; (8019f6c <__smakebuf_r+0x7c>)
 8019f36:	62b3      	str	r3, [r6, #40]	; 0x28
 8019f38:	89a3      	ldrh	r3, [r4, #12]
 8019f3a:	6020      	str	r0, [r4, #0]
 8019f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019f40:	81a3      	strh	r3, [r4, #12]
 8019f42:	9b00      	ldr	r3, [sp, #0]
 8019f44:	6163      	str	r3, [r4, #20]
 8019f46:	9b01      	ldr	r3, [sp, #4]
 8019f48:	6120      	str	r0, [r4, #16]
 8019f4a:	b15b      	cbz	r3, 8019f64 <__smakebuf_r+0x74>
 8019f4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019f50:	4630      	mov	r0, r6
 8019f52:	f000 fcdb 	bl	801a90c <_isatty_r>
 8019f56:	b128      	cbz	r0, 8019f64 <__smakebuf_r+0x74>
 8019f58:	89a3      	ldrh	r3, [r4, #12]
 8019f5a:	f023 0303 	bic.w	r3, r3, #3
 8019f5e:	f043 0301 	orr.w	r3, r3, #1
 8019f62:	81a3      	strh	r3, [r4, #12]
 8019f64:	89a0      	ldrh	r0, [r4, #12]
 8019f66:	4305      	orrs	r5, r0
 8019f68:	81a5      	strh	r5, [r4, #12]
 8019f6a:	e7cd      	b.n	8019f08 <__smakebuf_r+0x18>
 8019f6c:	08019cfd 	.word	0x08019cfd

08019f70 <__malloc_lock>:
 8019f70:	4801      	ldr	r0, [pc, #4]	; (8019f78 <__malloc_lock+0x8>)
 8019f72:	f7ff bf95 	b.w	8019ea0 <__retarget_lock_acquire_recursive>
 8019f76:	bf00      	nop
 8019f78:	20002fd8 	.word	0x20002fd8

08019f7c <__malloc_unlock>:
 8019f7c:	4801      	ldr	r0, [pc, #4]	; (8019f84 <__malloc_unlock+0x8>)
 8019f7e:	f7ff bf90 	b.w	8019ea2 <__retarget_lock_release_recursive>
 8019f82:	bf00      	nop
 8019f84:	20002fd8 	.word	0x20002fd8

08019f88 <__ssputs_r>:
 8019f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f8c:	688e      	ldr	r6, [r1, #8]
 8019f8e:	429e      	cmp	r6, r3
 8019f90:	4682      	mov	sl, r0
 8019f92:	460c      	mov	r4, r1
 8019f94:	4690      	mov	r8, r2
 8019f96:	461f      	mov	r7, r3
 8019f98:	d838      	bhi.n	801a00c <__ssputs_r+0x84>
 8019f9a:	898a      	ldrh	r2, [r1, #12]
 8019f9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019fa0:	d032      	beq.n	801a008 <__ssputs_r+0x80>
 8019fa2:	6825      	ldr	r5, [r4, #0]
 8019fa4:	6909      	ldr	r1, [r1, #16]
 8019fa6:	eba5 0901 	sub.w	r9, r5, r1
 8019faa:	6965      	ldr	r5, [r4, #20]
 8019fac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019fb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019fb4:	3301      	adds	r3, #1
 8019fb6:	444b      	add	r3, r9
 8019fb8:	106d      	asrs	r5, r5, #1
 8019fba:	429d      	cmp	r5, r3
 8019fbc:	bf38      	it	cc
 8019fbe:	461d      	movcc	r5, r3
 8019fc0:	0553      	lsls	r3, r2, #21
 8019fc2:	d531      	bpl.n	801a028 <__ssputs_r+0xa0>
 8019fc4:	4629      	mov	r1, r5
 8019fc6:	f7ff fbb9 	bl	801973c <_malloc_r>
 8019fca:	4606      	mov	r6, r0
 8019fcc:	b950      	cbnz	r0, 8019fe4 <__ssputs_r+0x5c>
 8019fce:	230c      	movs	r3, #12
 8019fd0:	f8ca 3000 	str.w	r3, [sl]
 8019fd4:	89a3      	ldrh	r3, [r4, #12]
 8019fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019fda:	81a3      	strh	r3, [r4, #12]
 8019fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019fe4:	6921      	ldr	r1, [r4, #16]
 8019fe6:	464a      	mov	r2, r9
 8019fe8:	f7ff fb26 	bl	8019638 <memcpy>
 8019fec:	89a3      	ldrh	r3, [r4, #12]
 8019fee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019ff6:	81a3      	strh	r3, [r4, #12]
 8019ff8:	6126      	str	r6, [r4, #16]
 8019ffa:	6165      	str	r5, [r4, #20]
 8019ffc:	444e      	add	r6, r9
 8019ffe:	eba5 0509 	sub.w	r5, r5, r9
 801a002:	6026      	str	r6, [r4, #0]
 801a004:	60a5      	str	r5, [r4, #8]
 801a006:	463e      	mov	r6, r7
 801a008:	42be      	cmp	r6, r7
 801a00a:	d900      	bls.n	801a00e <__ssputs_r+0x86>
 801a00c:	463e      	mov	r6, r7
 801a00e:	6820      	ldr	r0, [r4, #0]
 801a010:	4632      	mov	r2, r6
 801a012:	4641      	mov	r1, r8
 801a014:	f000 fc9c 	bl	801a950 <memmove>
 801a018:	68a3      	ldr	r3, [r4, #8]
 801a01a:	1b9b      	subs	r3, r3, r6
 801a01c:	60a3      	str	r3, [r4, #8]
 801a01e:	6823      	ldr	r3, [r4, #0]
 801a020:	4433      	add	r3, r6
 801a022:	6023      	str	r3, [r4, #0]
 801a024:	2000      	movs	r0, #0
 801a026:	e7db      	b.n	8019fe0 <__ssputs_r+0x58>
 801a028:	462a      	mov	r2, r5
 801a02a:	f000 fcab 	bl	801a984 <_realloc_r>
 801a02e:	4606      	mov	r6, r0
 801a030:	2800      	cmp	r0, #0
 801a032:	d1e1      	bne.n	8019ff8 <__ssputs_r+0x70>
 801a034:	6921      	ldr	r1, [r4, #16]
 801a036:	4650      	mov	r0, sl
 801a038:	f7ff fb14 	bl	8019664 <_free_r>
 801a03c:	e7c7      	b.n	8019fce <__ssputs_r+0x46>
	...

0801a040 <_svfiprintf_r>:
 801a040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a044:	4698      	mov	r8, r3
 801a046:	898b      	ldrh	r3, [r1, #12]
 801a048:	061b      	lsls	r3, r3, #24
 801a04a:	b09d      	sub	sp, #116	; 0x74
 801a04c:	4607      	mov	r7, r0
 801a04e:	460d      	mov	r5, r1
 801a050:	4614      	mov	r4, r2
 801a052:	d50e      	bpl.n	801a072 <_svfiprintf_r+0x32>
 801a054:	690b      	ldr	r3, [r1, #16]
 801a056:	b963      	cbnz	r3, 801a072 <_svfiprintf_r+0x32>
 801a058:	2140      	movs	r1, #64	; 0x40
 801a05a:	f7ff fb6f 	bl	801973c <_malloc_r>
 801a05e:	6028      	str	r0, [r5, #0]
 801a060:	6128      	str	r0, [r5, #16]
 801a062:	b920      	cbnz	r0, 801a06e <_svfiprintf_r+0x2e>
 801a064:	230c      	movs	r3, #12
 801a066:	603b      	str	r3, [r7, #0]
 801a068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a06c:	e0d1      	b.n	801a212 <_svfiprintf_r+0x1d2>
 801a06e:	2340      	movs	r3, #64	; 0x40
 801a070:	616b      	str	r3, [r5, #20]
 801a072:	2300      	movs	r3, #0
 801a074:	9309      	str	r3, [sp, #36]	; 0x24
 801a076:	2320      	movs	r3, #32
 801a078:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a07c:	f8cd 800c 	str.w	r8, [sp, #12]
 801a080:	2330      	movs	r3, #48	; 0x30
 801a082:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a22c <_svfiprintf_r+0x1ec>
 801a086:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a08a:	f04f 0901 	mov.w	r9, #1
 801a08e:	4623      	mov	r3, r4
 801a090:	469a      	mov	sl, r3
 801a092:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a096:	b10a      	cbz	r2, 801a09c <_svfiprintf_r+0x5c>
 801a098:	2a25      	cmp	r2, #37	; 0x25
 801a09a:	d1f9      	bne.n	801a090 <_svfiprintf_r+0x50>
 801a09c:	ebba 0b04 	subs.w	fp, sl, r4
 801a0a0:	d00b      	beq.n	801a0ba <_svfiprintf_r+0x7a>
 801a0a2:	465b      	mov	r3, fp
 801a0a4:	4622      	mov	r2, r4
 801a0a6:	4629      	mov	r1, r5
 801a0a8:	4638      	mov	r0, r7
 801a0aa:	f7ff ff6d 	bl	8019f88 <__ssputs_r>
 801a0ae:	3001      	adds	r0, #1
 801a0b0:	f000 80aa 	beq.w	801a208 <_svfiprintf_r+0x1c8>
 801a0b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a0b6:	445a      	add	r2, fp
 801a0b8:	9209      	str	r2, [sp, #36]	; 0x24
 801a0ba:	f89a 3000 	ldrb.w	r3, [sl]
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	f000 80a2 	beq.w	801a208 <_svfiprintf_r+0x1c8>
 801a0c4:	2300      	movs	r3, #0
 801a0c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a0ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a0ce:	f10a 0a01 	add.w	sl, sl, #1
 801a0d2:	9304      	str	r3, [sp, #16]
 801a0d4:	9307      	str	r3, [sp, #28]
 801a0d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a0da:	931a      	str	r3, [sp, #104]	; 0x68
 801a0dc:	4654      	mov	r4, sl
 801a0de:	2205      	movs	r2, #5
 801a0e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0e4:	4851      	ldr	r0, [pc, #324]	; (801a22c <_svfiprintf_r+0x1ec>)
 801a0e6:	f7e6 f88b 	bl	8000200 <memchr>
 801a0ea:	9a04      	ldr	r2, [sp, #16]
 801a0ec:	b9d8      	cbnz	r0, 801a126 <_svfiprintf_r+0xe6>
 801a0ee:	06d0      	lsls	r0, r2, #27
 801a0f0:	bf44      	itt	mi
 801a0f2:	2320      	movmi	r3, #32
 801a0f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a0f8:	0711      	lsls	r1, r2, #28
 801a0fa:	bf44      	itt	mi
 801a0fc:	232b      	movmi	r3, #43	; 0x2b
 801a0fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a102:	f89a 3000 	ldrb.w	r3, [sl]
 801a106:	2b2a      	cmp	r3, #42	; 0x2a
 801a108:	d015      	beq.n	801a136 <_svfiprintf_r+0xf6>
 801a10a:	9a07      	ldr	r2, [sp, #28]
 801a10c:	4654      	mov	r4, sl
 801a10e:	2000      	movs	r0, #0
 801a110:	f04f 0c0a 	mov.w	ip, #10
 801a114:	4621      	mov	r1, r4
 801a116:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a11a:	3b30      	subs	r3, #48	; 0x30
 801a11c:	2b09      	cmp	r3, #9
 801a11e:	d94e      	bls.n	801a1be <_svfiprintf_r+0x17e>
 801a120:	b1b0      	cbz	r0, 801a150 <_svfiprintf_r+0x110>
 801a122:	9207      	str	r2, [sp, #28]
 801a124:	e014      	b.n	801a150 <_svfiprintf_r+0x110>
 801a126:	eba0 0308 	sub.w	r3, r0, r8
 801a12a:	fa09 f303 	lsl.w	r3, r9, r3
 801a12e:	4313      	orrs	r3, r2
 801a130:	9304      	str	r3, [sp, #16]
 801a132:	46a2      	mov	sl, r4
 801a134:	e7d2      	b.n	801a0dc <_svfiprintf_r+0x9c>
 801a136:	9b03      	ldr	r3, [sp, #12]
 801a138:	1d19      	adds	r1, r3, #4
 801a13a:	681b      	ldr	r3, [r3, #0]
 801a13c:	9103      	str	r1, [sp, #12]
 801a13e:	2b00      	cmp	r3, #0
 801a140:	bfbb      	ittet	lt
 801a142:	425b      	neglt	r3, r3
 801a144:	f042 0202 	orrlt.w	r2, r2, #2
 801a148:	9307      	strge	r3, [sp, #28]
 801a14a:	9307      	strlt	r3, [sp, #28]
 801a14c:	bfb8      	it	lt
 801a14e:	9204      	strlt	r2, [sp, #16]
 801a150:	7823      	ldrb	r3, [r4, #0]
 801a152:	2b2e      	cmp	r3, #46	; 0x2e
 801a154:	d10c      	bne.n	801a170 <_svfiprintf_r+0x130>
 801a156:	7863      	ldrb	r3, [r4, #1]
 801a158:	2b2a      	cmp	r3, #42	; 0x2a
 801a15a:	d135      	bne.n	801a1c8 <_svfiprintf_r+0x188>
 801a15c:	9b03      	ldr	r3, [sp, #12]
 801a15e:	1d1a      	adds	r2, r3, #4
 801a160:	681b      	ldr	r3, [r3, #0]
 801a162:	9203      	str	r2, [sp, #12]
 801a164:	2b00      	cmp	r3, #0
 801a166:	bfb8      	it	lt
 801a168:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a16c:	3402      	adds	r4, #2
 801a16e:	9305      	str	r3, [sp, #20]
 801a170:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a23c <_svfiprintf_r+0x1fc>
 801a174:	7821      	ldrb	r1, [r4, #0]
 801a176:	2203      	movs	r2, #3
 801a178:	4650      	mov	r0, sl
 801a17a:	f7e6 f841 	bl	8000200 <memchr>
 801a17e:	b140      	cbz	r0, 801a192 <_svfiprintf_r+0x152>
 801a180:	2340      	movs	r3, #64	; 0x40
 801a182:	eba0 000a 	sub.w	r0, r0, sl
 801a186:	fa03 f000 	lsl.w	r0, r3, r0
 801a18a:	9b04      	ldr	r3, [sp, #16]
 801a18c:	4303      	orrs	r3, r0
 801a18e:	3401      	adds	r4, #1
 801a190:	9304      	str	r3, [sp, #16]
 801a192:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a196:	4826      	ldr	r0, [pc, #152]	; (801a230 <_svfiprintf_r+0x1f0>)
 801a198:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a19c:	2206      	movs	r2, #6
 801a19e:	f7e6 f82f 	bl	8000200 <memchr>
 801a1a2:	2800      	cmp	r0, #0
 801a1a4:	d038      	beq.n	801a218 <_svfiprintf_r+0x1d8>
 801a1a6:	4b23      	ldr	r3, [pc, #140]	; (801a234 <_svfiprintf_r+0x1f4>)
 801a1a8:	bb1b      	cbnz	r3, 801a1f2 <_svfiprintf_r+0x1b2>
 801a1aa:	9b03      	ldr	r3, [sp, #12]
 801a1ac:	3307      	adds	r3, #7
 801a1ae:	f023 0307 	bic.w	r3, r3, #7
 801a1b2:	3308      	adds	r3, #8
 801a1b4:	9303      	str	r3, [sp, #12]
 801a1b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1b8:	4433      	add	r3, r6
 801a1ba:	9309      	str	r3, [sp, #36]	; 0x24
 801a1bc:	e767      	b.n	801a08e <_svfiprintf_r+0x4e>
 801a1be:	fb0c 3202 	mla	r2, ip, r2, r3
 801a1c2:	460c      	mov	r4, r1
 801a1c4:	2001      	movs	r0, #1
 801a1c6:	e7a5      	b.n	801a114 <_svfiprintf_r+0xd4>
 801a1c8:	2300      	movs	r3, #0
 801a1ca:	3401      	adds	r4, #1
 801a1cc:	9305      	str	r3, [sp, #20]
 801a1ce:	4619      	mov	r1, r3
 801a1d0:	f04f 0c0a 	mov.w	ip, #10
 801a1d4:	4620      	mov	r0, r4
 801a1d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a1da:	3a30      	subs	r2, #48	; 0x30
 801a1dc:	2a09      	cmp	r2, #9
 801a1de:	d903      	bls.n	801a1e8 <_svfiprintf_r+0x1a8>
 801a1e0:	2b00      	cmp	r3, #0
 801a1e2:	d0c5      	beq.n	801a170 <_svfiprintf_r+0x130>
 801a1e4:	9105      	str	r1, [sp, #20]
 801a1e6:	e7c3      	b.n	801a170 <_svfiprintf_r+0x130>
 801a1e8:	fb0c 2101 	mla	r1, ip, r1, r2
 801a1ec:	4604      	mov	r4, r0
 801a1ee:	2301      	movs	r3, #1
 801a1f0:	e7f0      	b.n	801a1d4 <_svfiprintf_r+0x194>
 801a1f2:	ab03      	add	r3, sp, #12
 801a1f4:	9300      	str	r3, [sp, #0]
 801a1f6:	462a      	mov	r2, r5
 801a1f8:	4b0f      	ldr	r3, [pc, #60]	; (801a238 <_svfiprintf_r+0x1f8>)
 801a1fa:	a904      	add	r1, sp, #16
 801a1fc:	4638      	mov	r0, r7
 801a1fe:	f3af 8000 	nop.w
 801a202:	1c42      	adds	r2, r0, #1
 801a204:	4606      	mov	r6, r0
 801a206:	d1d6      	bne.n	801a1b6 <_svfiprintf_r+0x176>
 801a208:	89ab      	ldrh	r3, [r5, #12]
 801a20a:	065b      	lsls	r3, r3, #25
 801a20c:	f53f af2c 	bmi.w	801a068 <_svfiprintf_r+0x28>
 801a210:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a212:	b01d      	add	sp, #116	; 0x74
 801a214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a218:	ab03      	add	r3, sp, #12
 801a21a:	9300      	str	r3, [sp, #0]
 801a21c:	462a      	mov	r2, r5
 801a21e:	4b06      	ldr	r3, [pc, #24]	; (801a238 <_svfiprintf_r+0x1f8>)
 801a220:	a904      	add	r1, sp, #16
 801a222:	4638      	mov	r0, r7
 801a224:	f000 f9d4 	bl	801a5d0 <_printf_i>
 801a228:	e7eb      	b.n	801a202 <_svfiprintf_r+0x1c2>
 801a22a:	bf00      	nop
 801a22c:	0801cb64 	.word	0x0801cb64
 801a230:	0801cb6e 	.word	0x0801cb6e
 801a234:	00000000 	.word	0x00000000
 801a238:	08019f89 	.word	0x08019f89
 801a23c:	0801cb6a 	.word	0x0801cb6a

0801a240 <__sfputc_r>:
 801a240:	6893      	ldr	r3, [r2, #8]
 801a242:	3b01      	subs	r3, #1
 801a244:	2b00      	cmp	r3, #0
 801a246:	b410      	push	{r4}
 801a248:	6093      	str	r3, [r2, #8]
 801a24a:	da08      	bge.n	801a25e <__sfputc_r+0x1e>
 801a24c:	6994      	ldr	r4, [r2, #24]
 801a24e:	42a3      	cmp	r3, r4
 801a250:	db01      	blt.n	801a256 <__sfputc_r+0x16>
 801a252:	290a      	cmp	r1, #10
 801a254:	d103      	bne.n	801a25e <__sfputc_r+0x1e>
 801a256:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a25a:	f7ff bba9 	b.w	80199b0 <__swbuf_r>
 801a25e:	6813      	ldr	r3, [r2, #0]
 801a260:	1c58      	adds	r0, r3, #1
 801a262:	6010      	str	r0, [r2, #0]
 801a264:	7019      	strb	r1, [r3, #0]
 801a266:	4608      	mov	r0, r1
 801a268:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a26c:	4770      	bx	lr

0801a26e <__sfputs_r>:
 801a26e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a270:	4606      	mov	r6, r0
 801a272:	460f      	mov	r7, r1
 801a274:	4614      	mov	r4, r2
 801a276:	18d5      	adds	r5, r2, r3
 801a278:	42ac      	cmp	r4, r5
 801a27a:	d101      	bne.n	801a280 <__sfputs_r+0x12>
 801a27c:	2000      	movs	r0, #0
 801a27e:	e007      	b.n	801a290 <__sfputs_r+0x22>
 801a280:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a284:	463a      	mov	r2, r7
 801a286:	4630      	mov	r0, r6
 801a288:	f7ff ffda 	bl	801a240 <__sfputc_r>
 801a28c:	1c43      	adds	r3, r0, #1
 801a28e:	d1f3      	bne.n	801a278 <__sfputs_r+0xa>
 801a290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a294 <_vfiprintf_r>:
 801a294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a298:	460d      	mov	r5, r1
 801a29a:	b09d      	sub	sp, #116	; 0x74
 801a29c:	4614      	mov	r4, r2
 801a29e:	4698      	mov	r8, r3
 801a2a0:	4606      	mov	r6, r0
 801a2a2:	b118      	cbz	r0, 801a2ac <_vfiprintf_r+0x18>
 801a2a4:	6983      	ldr	r3, [r0, #24]
 801a2a6:	b90b      	cbnz	r3, 801a2ac <_vfiprintf_r+0x18>
 801a2a8:	f7ff fd5c 	bl	8019d64 <__sinit>
 801a2ac:	4b89      	ldr	r3, [pc, #548]	; (801a4d4 <_vfiprintf_r+0x240>)
 801a2ae:	429d      	cmp	r5, r3
 801a2b0:	d11b      	bne.n	801a2ea <_vfiprintf_r+0x56>
 801a2b2:	6875      	ldr	r5, [r6, #4]
 801a2b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a2b6:	07d9      	lsls	r1, r3, #31
 801a2b8:	d405      	bmi.n	801a2c6 <_vfiprintf_r+0x32>
 801a2ba:	89ab      	ldrh	r3, [r5, #12]
 801a2bc:	059a      	lsls	r2, r3, #22
 801a2be:	d402      	bmi.n	801a2c6 <_vfiprintf_r+0x32>
 801a2c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a2c2:	f7ff fded 	bl	8019ea0 <__retarget_lock_acquire_recursive>
 801a2c6:	89ab      	ldrh	r3, [r5, #12]
 801a2c8:	071b      	lsls	r3, r3, #28
 801a2ca:	d501      	bpl.n	801a2d0 <_vfiprintf_r+0x3c>
 801a2cc:	692b      	ldr	r3, [r5, #16]
 801a2ce:	b9eb      	cbnz	r3, 801a30c <_vfiprintf_r+0x78>
 801a2d0:	4629      	mov	r1, r5
 801a2d2:	4630      	mov	r0, r6
 801a2d4:	f7ff fbbe 	bl	8019a54 <__swsetup_r>
 801a2d8:	b1c0      	cbz	r0, 801a30c <_vfiprintf_r+0x78>
 801a2da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a2dc:	07dc      	lsls	r4, r3, #31
 801a2de:	d50e      	bpl.n	801a2fe <_vfiprintf_r+0x6a>
 801a2e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a2e4:	b01d      	add	sp, #116	; 0x74
 801a2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2ea:	4b7b      	ldr	r3, [pc, #492]	; (801a4d8 <_vfiprintf_r+0x244>)
 801a2ec:	429d      	cmp	r5, r3
 801a2ee:	d101      	bne.n	801a2f4 <_vfiprintf_r+0x60>
 801a2f0:	68b5      	ldr	r5, [r6, #8]
 801a2f2:	e7df      	b.n	801a2b4 <_vfiprintf_r+0x20>
 801a2f4:	4b79      	ldr	r3, [pc, #484]	; (801a4dc <_vfiprintf_r+0x248>)
 801a2f6:	429d      	cmp	r5, r3
 801a2f8:	bf08      	it	eq
 801a2fa:	68f5      	ldreq	r5, [r6, #12]
 801a2fc:	e7da      	b.n	801a2b4 <_vfiprintf_r+0x20>
 801a2fe:	89ab      	ldrh	r3, [r5, #12]
 801a300:	0598      	lsls	r0, r3, #22
 801a302:	d4ed      	bmi.n	801a2e0 <_vfiprintf_r+0x4c>
 801a304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a306:	f7ff fdcc 	bl	8019ea2 <__retarget_lock_release_recursive>
 801a30a:	e7e9      	b.n	801a2e0 <_vfiprintf_r+0x4c>
 801a30c:	2300      	movs	r3, #0
 801a30e:	9309      	str	r3, [sp, #36]	; 0x24
 801a310:	2320      	movs	r3, #32
 801a312:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a316:	f8cd 800c 	str.w	r8, [sp, #12]
 801a31a:	2330      	movs	r3, #48	; 0x30
 801a31c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a4e0 <_vfiprintf_r+0x24c>
 801a320:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a324:	f04f 0901 	mov.w	r9, #1
 801a328:	4623      	mov	r3, r4
 801a32a:	469a      	mov	sl, r3
 801a32c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a330:	b10a      	cbz	r2, 801a336 <_vfiprintf_r+0xa2>
 801a332:	2a25      	cmp	r2, #37	; 0x25
 801a334:	d1f9      	bne.n	801a32a <_vfiprintf_r+0x96>
 801a336:	ebba 0b04 	subs.w	fp, sl, r4
 801a33a:	d00b      	beq.n	801a354 <_vfiprintf_r+0xc0>
 801a33c:	465b      	mov	r3, fp
 801a33e:	4622      	mov	r2, r4
 801a340:	4629      	mov	r1, r5
 801a342:	4630      	mov	r0, r6
 801a344:	f7ff ff93 	bl	801a26e <__sfputs_r>
 801a348:	3001      	adds	r0, #1
 801a34a:	f000 80aa 	beq.w	801a4a2 <_vfiprintf_r+0x20e>
 801a34e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a350:	445a      	add	r2, fp
 801a352:	9209      	str	r2, [sp, #36]	; 0x24
 801a354:	f89a 3000 	ldrb.w	r3, [sl]
 801a358:	2b00      	cmp	r3, #0
 801a35a:	f000 80a2 	beq.w	801a4a2 <_vfiprintf_r+0x20e>
 801a35e:	2300      	movs	r3, #0
 801a360:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a364:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a368:	f10a 0a01 	add.w	sl, sl, #1
 801a36c:	9304      	str	r3, [sp, #16]
 801a36e:	9307      	str	r3, [sp, #28]
 801a370:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a374:	931a      	str	r3, [sp, #104]	; 0x68
 801a376:	4654      	mov	r4, sl
 801a378:	2205      	movs	r2, #5
 801a37a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a37e:	4858      	ldr	r0, [pc, #352]	; (801a4e0 <_vfiprintf_r+0x24c>)
 801a380:	f7e5 ff3e 	bl	8000200 <memchr>
 801a384:	9a04      	ldr	r2, [sp, #16]
 801a386:	b9d8      	cbnz	r0, 801a3c0 <_vfiprintf_r+0x12c>
 801a388:	06d1      	lsls	r1, r2, #27
 801a38a:	bf44      	itt	mi
 801a38c:	2320      	movmi	r3, #32
 801a38e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a392:	0713      	lsls	r3, r2, #28
 801a394:	bf44      	itt	mi
 801a396:	232b      	movmi	r3, #43	; 0x2b
 801a398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a39c:	f89a 3000 	ldrb.w	r3, [sl]
 801a3a0:	2b2a      	cmp	r3, #42	; 0x2a
 801a3a2:	d015      	beq.n	801a3d0 <_vfiprintf_r+0x13c>
 801a3a4:	9a07      	ldr	r2, [sp, #28]
 801a3a6:	4654      	mov	r4, sl
 801a3a8:	2000      	movs	r0, #0
 801a3aa:	f04f 0c0a 	mov.w	ip, #10
 801a3ae:	4621      	mov	r1, r4
 801a3b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a3b4:	3b30      	subs	r3, #48	; 0x30
 801a3b6:	2b09      	cmp	r3, #9
 801a3b8:	d94e      	bls.n	801a458 <_vfiprintf_r+0x1c4>
 801a3ba:	b1b0      	cbz	r0, 801a3ea <_vfiprintf_r+0x156>
 801a3bc:	9207      	str	r2, [sp, #28]
 801a3be:	e014      	b.n	801a3ea <_vfiprintf_r+0x156>
 801a3c0:	eba0 0308 	sub.w	r3, r0, r8
 801a3c4:	fa09 f303 	lsl.w	r3, r9, r3
 801a3c8:	4313      	orrs	r3, r2
 801a3ca:	9304      	str	r3, [sp, #16]
 801a3cc:	46a2      	mov	sl, r4
 801a3ce:	e7d2      	b.n	801a376 <_vfiprintf_r+0xe2>
 801a3d0:	9b03      	ldr	r3, [sp, #12]
 801a3d2:	1d19      	adds	r1, r3, #4
 801a3d4:	681b      	ldr	r3, [r3, #0]
 801a3d6:	9103      	str	r1, [sp, #12]
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	bfbb      	ittet	lt
 801a3dc:	425b      	neglt	r3, r3
 801a3de:	f042 0202 	orrlt.w	r2, r2, #2
 801a3e2:	9307      	strge	r3, [sp, #28]
 801a3e4:	9307      	strlt	r3, [sp, #28]
 801a3e6:	bfb8      	it	lt
 801a3e8:	9204      	strlt	r2, [sp, #16]
 801a3ea:	7823      	ldrb	r3, [r4, #0]
 801a3ec:	2b2e      	cmp	r3, #46	; 0x2e
 801a3ee:	d10c      	bne.n	801a40a <_vfiprintf_r+0x176>
 801a3f0:	7863      	ldrb	r3, [r4, #1]
 801a3f2:	2b2a      	cmp	r3, #42	; 0x2a
 801a3f4:	d135      	bne.n	801a462 <_vfiprintf_r+0x1ce>
 801a3f6:	9b03      	ldr	r3, [sp, #12]
 801a3f8:	1d1a      	adds	r2, r3, #4
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	9203      	str	r2, [sp, #12]
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	bfb8      	it	lt
 801a402:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a406:	3402      	adds	r4, #2
 801a408:	9305      	str	r3, [sp, #20]
 801a40a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a4f0 <_vfiprintf_r+0x25c>
 801a40e:	7821      	ldrb	r1, [r4, #0]
 801a410:	2203      	movs	r2, #3
 801a412:	4650      	mov	r0, sl
 801a414:	f7e5 fef4 	bl	8000200 <memchr>
 801a418:	b140      	cbz	r0, 801a42c <_vfiprintf_r+0x198>
 801a41a:	2340      	movs	r3, #64	; 0x40
 801a41c:	eba0 000a 	sub.w	r0, r0, sl
 801a420:	fa03 f000 	lsl.w	r0, r3, r0
 801a424:	9b04      	ldr	r3, [sp, #16]
 801a426:	4303      	orrs	r3, r0
 801a428:	3401      	adds	r4, #1
 801a42a:	9304      	str	r3, [sp, #16]
 801a42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a430:	482c      	ldr	r0, [pc, #176]	; (801a4e4 <_vfiprintf_r+0x250>)
 801a432:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a436:	2206      	movs	r2, #6
 801a438:	f7e5 fee2 	bl	8000200 <memchr>
 801a43c:	2800      	cmp	r0, #0
 801a43e:	d03f      	beq.n	801a4c0 <_vfiprintf_r+0x22c>
 801a440:	4b29      	ldr	r3, [pc, #164]	; (801a4e8 <_vfiprintf_r+0x254>)
 801a442:	bb1b      	cbnz	r3, 801a48c <_vfiprintf_r+0x1f8>
 801a444:	9b03      	ldr	r3, [sp, #12]
 801a446:	3307      	adds	r3, #7
 801a448:	f023 0307 	bic.w	r3, r3, #7
 801a44c:	3308      	adds	r3, #8
 801a44e:	9303      	str	r3, [sp, #12]
 801a450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a452:	443b      	add	r3, r7
 801a454:	9309      	str	r3, [sp, #36]	; 0x24
 801a456:	e767      	b.n	801a328 <_vfiprintf_r+0x94>
 801a458:	fb0c 3202 	mla	r2, ip, r2, r3
 801a45c:	460c      	mov	r4, r1
 801a45e:	2001      	movs	r0, #1
 801a460:	e7a5      	b.n	801a3ae <_vfiprintf_r+0x11a>
 801a462:	2300      	movs	r3, #0
 801a464:	3401      	adds	r4, #1
 801a466:	9305      	str	r3, [sp, #20]
 801a468:	4619      	mov	r1, r3
 801a46a:	f04f 0c0a 	mov.w	ip, #10
 801a46e:	4620      	mov	r0, r4
 801a470:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a474:	3a30      	subs	r2, #48	; 0x30
 801a476:	2a09      	cmp	r2, #9
 801a478:	d903      	bls.n	801a482 <_vfiprintf_r+0x1ee>
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d0c5      	beq.n	801a40a <_vfiprintf_r+0x176>
 801a47e:	9105      	str	r1, [sp, #20]
 801a480:	e7c3      	b.n	801a40a <_vfiprintf_r+0x176>
 801a482:	fb0c 2101 	mla	r1, ip, r1, r2
 801a486:	4604      	mov	r4, r0
 801a488:	2301      	movs	r3, #1
 801a48a:	e7f0      	b.n	801a46e <_vfiprintf_r+0x1da>
 801a48c:	ab03      	add	r3, sp, #12
 801a48e:	9300      	str	r3, [sp, #0]
 801a490:	462a      	mov	r2, r5
 801a492:	4b16      	ldr	r3, [pc, #88]	; (801a4ec <_vfiprintf_r+0x258>)
 801a494:	a904      	add	r1, sp, #16
 801a496:	4630      	mov	r0, r6
 801a498:	f3af 8000 	nop.w
 801a49c:	4607      	mov	r7, r0
 801a49e:	1c78      	adds	r0, r7, #1
 801a4a0:	d1d6      	bne.n	801a450 <_vfiprintf_r+0x1bc>
 801a4a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a4a4:	07d9      	lsls	r1, r3, #31
 801a4a6:	d405      	bmi.n	801a4b4 <_vfiprintf_r+0x220>
 801a4a8:	89ab      	ldrh	r3, [r5, #12]
 801a4aa:	059a      	lsls	r2, r3, #22
 801a4ac:	d402      	bmi.n	801a4b4 <_vfiprintf_r+0x220>
 801a4ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a4b0:	f7ff fcf7 	bl	8019ea2 <__retarget_lock_release_recursive>
 801a4b4:	89ab      	ldrh	r3, [r5, #12]
 801a4b6:	065b      	lsls	r3, r3, #25
 801a4b8:	f53f af12 	bmi.w	801a2e0 <_vfiprintf_r+0x4c>
 801a4bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a4be:	e711      	b.n	801a2e4 <_vfiprintf_r+0x50>
 801a4c0:	ab03      	add	r3, sp, #12
 801a4c2:	9300      	str	r3, [sp, #0]
 801a4c4:	462a      	mov	r2, r5
 801a4c6:	4b09      	ldr	r3, [pc, #36]	; (801a4ec <_vfiprintf_r+0x258>)
 801a4c8:	a904      	add	r1, sp, #16
 801a4ca:	4630      	mov	r0, r6
 801a4cc:	f000 f880 	bl	801a5d0 <_printf_i>
 801a4d0:	e7e4      	b.n	801a49c <_vfiprintf_r+0x208>
 801a4d2:	bf00      	nop
 801a4d4:	0801cb24 	.word	0x0801cb24
 801a4d8:	0801cb44 	.word	0x0801cb44
 801a4dc:	0801cb04 	.word	0x0801cb04
 801a4e0:	0801cb64 	.word	0x0801cb64
 801a4e4:	0801cb6e 	.word	0x0801cb6e
 801a4e8:	00000000 	.word	0x00000000
 801a4ec:	0801a26f 	.word	0x0801a26f
 801a4f0:	0801cb6a 	.word	0x0801cb6a

0801a4f4 <_printf_common>:
 801a4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a4f8:	4616      	mov	r6, r2
 801a4fa:	4699      	mov	r9, r3
 801a4fc:	688a      	ldr	r2, [r1, #8]
 801a4fe:	690b      	ldr	r3, [r1, #16]
 801a500:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a504:	4293      	cmp	r3, r2
 801a506:	bfb8      	it	lt
 801a508:	4613      	movlt	r3, r2
 801a50a:	6033      	str	r3, [r6, #0]
 801a50c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a510:	4607      	mov	r7, r0
 801a512:	460c      	mov	r4, r1
 801a514:	b10a      	cbz	r2, 801a51a <_printf_common+0x26>
 801a516:	3301      	adds	r3, #1
 801a518:	6033      	str	r3, [r6, #0]
 801a51a:	6823      	ldr	r3, [r4, #0]
 801a51c:	0699      	lsls	r1, r3, #26
 801a51e:	bf42      	ittt	mi
 801a520:	6833      	ldrmi	r3, [r6, #0]
 801a522:	3302      	addmi	r3, #2
 801a524:	6033      	strmi	r3, [r6, #0]
 801a526:	6825      	ldr	r5, [r4, #0]
 801a528:	f015 0506 	ands.w	r5, r5, #6
 801a52c:	d106      	bne.n	801a53c <_printf_common+0x48>
 801a52e:	f104 0a19 	add.w	sl, r4, #25
 801a532:	68e3      	ldr	r3, [r4, #12]
 801a534:	6832      	ldr	r2, [r6, #0]
 801a536:	1a9b      	subs	r3, r3, r2
 801a538:	42ab      	cmp	r3, r5
 801a53a:	dc26      	bgt.n	801a58a <_printf_common+0x96>
 801a53c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a540:	1e13      	subs	r3, r2, #0
 801a542:	6822      	ldr	r2, [r4, #0]
 801a544:	bf18      	it	ne
 801a546:	2301      	movne	r3, #1
 801a548:	0692      	lsls	r2, r2, #26
 801a54a:	d42b      	bmi.n	801a5a4 <_printf_common+0xb0>
 801a54c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a550:	4649      	mov	r1, r9
 801a552:	4638      	mov	r0, r7
 801a554:	47c0      	blx	r8
 801a556:	3001      	adds	r0, #1
 801a558:	d01e      	beq.n	801a598 <_printf_common+0xa4>
 801a55a:	6823      	ldr	r3, [r4, #0]
 801a55c:	68e5      	ldr	r5, [r4, #12]
 801a55e:	6832      	ldr	r2, [r6, #0]
 801a560:	f003 0306 	and.w	r3, r3, #6
 801a564:	2b04      	cmp	r3, #4
 801a566:	bf08      	it	eq
 801a568:	1aad      	subeq	r5, r5, r2
 801a56a:	68a3      	ldr	r3, [r4, #8]
 801a56c:	6922      	ldr	r2, [r4, #16]
 801a56e:	bf0c      	ite	eq
 801a570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a574:	2500      	movne	r5, #0
 801a576:	4293      	cmp	r3, r2
 801a578:	bfc4      	itt	gt
 801a57a:	1a9b      	subgt	r3, r3, r2
 801a57c:	18ed      	addgt	r5, r5, r3
 801a57e:	2600      	movs	r6, #0
 801a580:	341a      	adds	r4, #26
 801a582:	42b5      	cmp	r5, r6
 801a584:	d11a      	bne.n	801a5bc <_printf_common+0xc8>
 801a586:	2000      	movs	r0, #0
 801a588:	e008      	b.n	801a59c <_printf_common+0xa8>
 801a58a:	2301      	movs	r3, #1
 801a58c:	4652      	mov	r2, sl
 801a58e:	4649      	mov	r1, r9
 801a590:	4638      	mov	r0, r7
 801a592:	47c0      	blx	r8
 801a594:	3001      	adds	r0, #1
 801a596:	d103      	bne.n	801a5a0 <_printf_common+0xac>
 801a598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a59c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5a0:	3501      	adds	r5, #1
 801a5a2:	e7c6      	b.n	801a532 <_printf_common+0x3e>
 801a5a4:	18e1      	adds	r1, r4, r3
 801a5a6:	1c5a      	adds	r2, r3, #1
 801a5a8:	2030      	movs	r0, #48	; 0x30
 801a5aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a5ae:	4422      	add	r2, r4
 801a5b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a5b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a5b8:	3302      	adds	r3, #2
 801a5ba:	e7c7      	b.n	801a54c <_printf_common+0x58>
 801a5bc:	2301      	movs	r3, #1
 801a5be:	4622      	mov	r2, r4
 801a5c0:	4649      	mov	r1, r9
 801a5c2:	4638      	mov	r0, r7
 801a5c4:	47c0      	blx	r8
 801a5c6:	3001      	adds	r0, #1
 801a5c8:	d0e6      	beq.n	801a598 <_printf_common+0xa4>
 801a5ca:	3601      	adds	r6, #1
 801a5cc:	e7d9      	b.n	801a582 <_printf_common+0x8e>
	...

0801a5d0 <_printf_i>:
 801a5d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a5d4:	7e0f      	ldrb	r7, [r1, #24]
 801a5d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a5d8:	2f78      	cmp	r7, #120	; 0x78
 801a5da:	4691      	mov	r9, r2
 801a5dc:	4680      	mov	r8, r0
 801a5de:	460c      	mov	r4, r1
 801a5e0:	469a      	mov	sl, r3
 801a5e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a5e6:	d807      	bhi.n	801a5f8 <_printf_i+0x28>
 801a5e8:	2f62      	cmp	r7, #98	; 0x62
 801a5ea:	d80a      	bhi.n	801a602 <_printf_i+0x32>
 801a5ec:	2f00      	cmp	r7, #0
 801a5ee:	f000 80d8 	beq.w	801a7a2 <_printf_i+0x1d2>
 801a5f2:	2f58      	cmp	r7, #88	; 0x58
 801a5f4:	f000 80a3 	beq.w	801a73e <_printf_i+0x16e>
 801a5f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a5fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a600:	e03a      	b.n	801a678 <_printf_i+0xa8>
 801a602:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a606:	2b15      	cmp	r3, #21
 801a608:	d8f6      	bhi.n	801a5f8 <_printf_i+0x28>
 801a60a:	a101      	add	r1, pc, #4	; (adr r1, 801a610 <_printf_i+0x40>)
 801a60c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a610:	0801a669 	.word	0x0801a669
 801a614:	0801a67d 	.word	0x0801a67d
 801a618:	0801a5f9 	.word	0x0801a5f9
 801a61c:	0801a5f9 	.word	0x0801a5f9
 801a620:	0801a5f9 	.word	0x0801a5f9
 801a624:	0801a5f9 	.word	0x0801a5f9
 801a628:	0801a67d 	.word	0x0801a67d
 801a62c:	0801a5f9 	.word	0x0801a5f9
 801a630:	0801a5f9 	.word	0x0801a5f9
 801a634:	0801a5f9 	.word	0x0801a5f9
 801a638:	0801a5f9 	.word	0x0801a5f9
 801a63c:	0801a789 	.word	0x0801a789
 801a640:	0801a6ad 	.word	0x0801a6ad
 801a644:	0801a76b 	.word	0x0801a76b
 801a648:	0801a5f9 	.word	0x0801a5f9
 801a64c:	0801a5f9 	.word	0x0801a5f9
 801a650:	0801a7ab 	.word	0x0801a7ab
 801a654:	0801a5f9 	.word	0x0801a5f9
 801a658:	0801a6ad 	.word	0x0801a6ad
 801a65c:	0801a5f9 	.word	0x0801a5f9
 801a660:	0801a5f9 	.word	0x0801a5f9
 801a664:	0801a773 	.word	0x0801a773
 801a668:	682b      	ldr	r3, [r5, #0]
 801a66a:	1d1a      	adds	r2, r3, #4
 801a66c:	681b      	ldr	r3, [r3, #0]
 801a66e:	602a      	str	r2, [r5, #0]
 801a670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a674:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a678:	2301      	movs	r3, #1
 801a67a:	e0a3      	b.n	801a7c4 <_printf_i+0x1f4>
 801a67c:	6820      	ldr	r0, [r4, #0]
 801a67e:	6829      	ldr	r1, [r5, #0]
 801a680:	0606      	lsls	r6, r0, #24
 801a682:	f101 0304 	add.w	r3, r1, #4
 801a686:	d50a      	bpl.n	801a69e <_printf_i+0xce>
 801a688:	680e      	ldr	r6, [r1, #0]
 801a68a:	602b      	str	r3, [r5, #0]
 801a68c:	2e00      	cmp	r6, #0
 801a68e:	da03      	bge.n	801a698 <_printf_i+0xc8>
 801a690:	232d      	movs	r3, #45	; 0x2d
 801a692:	4276      	negs	r6, r6
 801a694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a698:	485e      	ldr	r0, [pc, #376]	; (801a814 <_printf_i+0x244>)
 801a69a:	230a      	movs	r3, #10
 801a69c:	e019      	b.n	801a6d2 <_printf_i+0x102>
 801a69e:	680e      	ldr	r6, [r1, #0]
 801a6a0:	602b      	str	r3, [r5, #0]
 801a6a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a6a6:	bf18      	it	ne
 801a6a8:	b236      	sxthne	r6, r6
 801a6aa:	e7ef      	b.n	801a68c <_printf_i+0xbc>
 801a6ac:	682b      	ldr	r3, [r5, #0]
 801a6ae:	6820      	ldr	r0, [r4, #0]
 801a6b0:	1d19      	adds	r1, r3, #4
 801a6b2:	6029      	str	r1, [r5, #0]
 801a6b4:	0601      	lsls	r1, r0, #24
 801a6b6:	d501      	bpl.n	801a6bc <_printf_i+0xec>
 801a6b8:	681e      	ldr	r6, [r3, #0]
 801a6ba:	e002      	b.n	801a6c2 <_printf_i+0xf2>
 801a6bc:	0646      	lsls	r6, r0, #25
 801a6be:	d5fb      	bpl.n	801a6b8 <_printf_i+0xe8>
 801a6c0:	881e      	ldrh	r6, [r3, #0]
 801a6c2:	4854      	ldr	r0, [pc, #336]	; (801a814 <_printf_i+0x244>)
 801a6c4:	2f6f      	cmp	r7, #111	; 0x6f
 801a6c6:	bf0c      	ite	eq
 801a6c8:	2308      	moveq	r3, #8
 801a6ca:	230a      	movne	r3, #10
 801a6cc:	2100      	movs	r1, #0
 801a6ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a6d2:	6865      	ldr	r5, [r4, #4]
 801a6d4:	60a5      	str	r5, [r4, #8]
 801a6d6:	2d00      	cmp	r5, #0
 801a6d8:	bfa2      	ittt	ge
 801a6da:	6821      	ldrge	r1, [r4, #0]
 801a6dc:	f021 0104 	bicge.w	r1, r1, #4
 801a6e0:	6021      	strge	r1, [r4, #0]
 801a6e2:	b90e      	cbnz	r6, 801a6e8 <_printf_i+0x118>
 801a6e4:	2d00      	cmp	r5, #0
 801a6e6:	d04d      	beq.n	801a784 <_printf_i+0x1b4>
 801a6e8:	4615      	mov	r5, r2
 801a6ea:	fbb6 f1f3 	udiv	r1, r6, r3
 801a6ee:	fb03 6711 	mls	r7, r3, r1, r6
 801a6f2:	5dc7      	ldrb	r7, [r0, r7]
 801a6f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a6f8:	4637      	mov	r7, r6
 801a6fa:	42bb      	cmp	r3, r7
 801a6fc:	460e      	mov	r6, r1
 801a6fe:	d9f4      	bls.n	801a6ea <_printf_i+0x11a>
 801a700:	2b08      	cmp	r3, #8
 801a702:	d10b      	bne.n	801a71c <_printf_i+0x14c>
 801a704:	6823      	ldr	r3, [r4, #0]
 801a706:	07de      	lsls	r6, r3, #31
 801a708:	d508      	bpl.n	801a71c <_printf_i+0x14c>
 801a70a:	6923      	ldr	r3, [r4, #16]
 801a70c:	6861      	ldr	r1, [r4, #4]
 801a70e:	4299      	cmp	r1, r3
 801a710:	bfde      	ittt	le
 801a712:	2330      	movle	r3, #48	; 0x30
 801a714:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a718:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801a71c:	1b52      	subs	r2, r2, r5
 801a71e:	6122      	str	r2, [r4, #16]
 801a720:	f8cd a000 	str.w	sl, [sp]
 801a724:	464b      	mov	r3, r9
 801a726:	aa03      	add	r2, sp, #12
 801a728:	4621      	mov	r1, r4
 801a72a:	4640      	mov	r0, r8
 801a72c:	f7ff fee2 	bl	801a4f4 <_printf_common>
 801a730:	3001      	adds	r0, #1
 801a732:	d14c      	bne.n	801a7ce <_printf_i+0x1fe>
 801a734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a738:	b004      	add	sp, #16
 801a73a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a73e:	4835      	ldr	r0, [pc, #212]	; (801a814 <_printf_i+0x244>)
 801a740:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a744:	6829      	ldr	r1, [r5, #0]
 801a746:	6823      	ldr	r3, [r4, #0]
 801a748:	f851 6b04 	ldr.w	r6, [r1], #4
 801a74c:	6029      	str	r1, [r5, #0]
 801a74e:	061d      	lsls	r5, r3, #24
 801a750:	d514      	bpl.n	801a77c <_printf_i+0x1ac>
 801a752:	07df      	lsls	r7, r3, #31
 801a754:	bf44      	itt	mi
 801a756:	f043 0320 	orrmi.w	r3, r3, #32
 801a75a:	6023      	strmi	r3, [r4, #0]
 801a75c:	b91e      	cbnz	r6, 801a766 <_printf_i+0x196>
 801a75e:	6823      	ldr	r3, [r4, #0]
 801a760:	f023 0320 	bic.w	r3, r3, #32
 801a764:	6023      	str	r3, [r4, #0]
 801a766:	2310      	movs	r3, #16
 801a768:	e7b0      	b.n	801a6cc <_printf_i+0xfc>
 801a76a:	6823      	ldr	r3, [r4, #0]
 801a76c:	f043 0320 	orr.w	r3, r3, #32
 801a770:	6023      	str	r3, [r4, #0]
 801a772:	2378      	movs	r3, #120	; 0x78
 801a774:	4828      	ldr	r0, [pc, #160]	; (801a818 <_printf_i+0x248>)
 801a776:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a77a:	e7e3      	b.n	801a744 <_printf_i+0x174>
 801a77c:	0659      	lsls	r1, r3, #25
 801a77e:	bf48      	it	mi
 801a780:	b2b6      	uxthmi	r6, r6
 801a782:	e7e6      	b.n	801a752 <_printf_i+0x182>
 801a784:	4615      	mov	r5, r2
 801a786:	e7bb      	b.n	801a700 <_printf_i+0x130>
 801a788:	682b      	ldr	r3, [r5, #0]
 801a78a:	6826      	ldr	r6, [r4, #0]
 801a78c:	6961      	ldr	r1, [r4, #20]
 801a78e:	1d18      	adds	r0, r3, #4
 801a790:	6028      	str	r0, [r5, #0]
 801a792:	0635      	lsls	r5, r6, #24
 801a794:	681b      	ldr	r3, [r3, #0]
 801a796:	d501      	bpl.n	801a79c <_printf_i+0x1cc>
 801a798:	6019      	str	r1, [r3, #0]
 801a79a:	e002      	b.n	801a7a2 <_printf_i+0x1d2>
 801a79c:	0670      	lsls	r0, r6, #25
 801a79e:	d5fb      	bpl.n	801a798 <_printf_i+0x1c8>
 801a7a0:	8019      	strh	r1, [r3, #0]
 801a7a2:	2300      	movs	r3, #0
 801a7a4:	6123      	str	r3, [r4, #16]
 801a7a6:	4615      	mov	r5, r2
 801a7a8:	e7ba      	b.n	801a720 <_printf_i+0x150>
 801a7aa:	682b      	ldr	r3, [r5, #0]
 801a7ac:	1d1a      	adds	r2, r3, #4
 801a7ae:	602a      	str	r2, [r5, #0]
 801a7b0:	681d      	ldr	r5, [r3, #0]
 801a7b2:	6862      	ldr	r2, [r4, #4]
 801a7b4:	2100      	movs	r1, #0
 801a7b6:	4628      	mov	r0, r5
 801a7b8:	f7e5 fd22 	bl	8000200 <memchr>
 801a7bc:	b108      	cbz	r0, 801a7c2 <_printf_i+0x1f2>
 801a7be:	1b40      	subs	r0, r0, r5
 801a7c0:	6060      	str	r0, [r4, #4]
 801a7c2:	6863      	ldr	r3, [r4, #4]
 801a7c4:	6123      	str	r3, [r4, #16]
 801a7c6:	2300      	movs	r3, #0
 801a7c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a7cc:	e7a8      	b.n	801a720 <_printf_i+0x150>
 801a7ce:	6923      	ldr	r3, [r4, #16]
 801a7d0:	462a      	mov	r2, r5
 801a7d2:	4649      	mov	r1, r9
 801a7d4:	4640      	mov	r0, r8
 801a7d6:	47d0      	blx	sl
 801a7d8:	3001      	adds	r0, #1
 801a7da:	d0ab      	beq.n	801a734 <_printf_i+0x164>
 801a7dc:	6823      	ldr	r3, [r4, #0]
 801a7de:	079b      	lsls	r3, r3, #30
 801a7e0:	d413      	bmi.n	801a80a <_printf_i+0x23a>
 801a7e2:	68e0      	ldr	r0, [r4, #12]
 801a7e4:	9b03      	ldr	r3, [sp, #12]
 801a7e6:	4298      	cmp	r0, r3
 801a7e8:	bfb8      	it	lt
 801a7ea:	4618      	movlt	r0, r3
 801a7ec:	e7a4      	b.n	801a738 <_printf_i+0x168>
 801a7ee:	2301      	movs	r3, #1
 801a7f0:	4632      	mov	r2, r6
 801a7f2:	4649      	mov	r1, r9
 801a7f4:	4640      	mov	r0, r8
 801a7f6:	47d0      	blx	sl
 801a7f8:	3001      	adds	r0, #1
 801a7fa:	d09b      	beq.n	801a734 <_printf_i+0x164>
 801a7fc:	3501      	adds	r5, #1
 801a7fe:	68e3      	ldr	r3, [r4, #12]
 801a800:	9903      	ldr	r1, [sp, #12]
 801a802:	1a5b      	subs	r3, r3, r1
 801a804:	42ab      	cmp	r3, r5
 801a806:	dcf2      	bgt.n	801a7ee <_printf_i+0x21e>
 801a808:	e7eb      	b.n	801a7e2 <_printf_i+0x212>
 801a80a:	2500      	movs	r5, #0
 801a80c:	f104 0619 	add.w	r6, r4, #25
 801a810:	e7f5      	b.n	801a7fe <_printf_i+0x22e>
 801a812:	bf00      	nop
 801a814:	0801cb75 	.word	0x0801cb75
 801a818:	0801cb86 	.word	0x0801cb86

0801a81c <__sread>:
 801a81c:	b510      	push	{r4, lr}
 801a81e:	460c      	mov	r4, r1
 801a820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a824:	f000 f8de 	bl	801a9e4 <_read_r>
 801a828:	2800      	cmp	r0, #0
 801a82a:	bfab      	itete	ge
 801a82c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a82e:	89a3      	ldrhlt	r3, [r4, #12]
 801a830:	181b      	addge	r3, r3, r0
 801a832:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a836:	bfac      	ite	ge
 801a838:	6563      	strge	r3, [r4, #84]	; 0x54
 801a83a:	81a3      	strhlt	r3, [r4, #12]
 801a83c:	bd10      	pop	{r4, pc}

0801a83e <__swrite>:
 801a83e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a842:	461f      	mov	r7, r3
 801a844:	898b      	ldrh	r3, [r1, #12]
 801a846:	05db      	lsls	r3, r3, #23
 801a848:	4605      	mov	r5, r0
 801a84a:	460c      	mov	r4, r1
 801a84c:	4616      	mov	r6, r2
 801a84e:	d505      	bpl.n	801a85c <__swrite+0x1e>
 801a850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a854:	2302      	movs	r3, #2
 801a856:	2200      	movs	r2, #0
 801a858:	f000 f868 	bl	801a92c <_lseek_r>
 801a85c:	89a3      	ldrh	r3, [r4, #12]
 801a85e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a862:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a866:	81a3      	strh	r3, [r4, #12]
 801a868:	4632      	mov	r2, r6
 801a86a:	463b      	mov	r3, r7
 801a86c:	4628      	mov	r0, r5
 801a86e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a872:	f000 b817 	b.w	801a8a4 <_write_r>

0801a876 <__sseek>:
 801a876:	b510      	push	{r4, lr}
 801a878:	460c      	mov	r4, r1
 801a87a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a87e:	f000 f855 	bl	801a92c <_lseek_r>
 801a882:	1c43      	adds	r3, r0, #1
 801a884:	89a3      	ldrh	r3, [r4, #12]
 801a886:	bf15      	itete	ne
 801a888:	6560      	strne	r0, [r4, #84]	; 0x54
 801a88a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a88e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a892:	81a3      	strheq	r3, [r4, #12]
 801a894:	bf18      	it	ne
 801a896:	81a3      	strhne	r3, [r4, #12]
 801a898:	bd10      	pop	{r4, pc}

0801a89a <__sclose>:
 801a89a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a89e:	f000 b813 	b.w	801a8c8 <_close_r>
	...

0801a8a4 <_write_r>:
 801a8a4:	b538      	push	{r3, r4, r5, lr}
 801a8a6:	4d07      	ldr	r5, [pc, #28]	; (801a8c4 <_write_r+0x20>)
 801a8a8:	4604      	mov	r4, r0
 801a8aa:	4608      	mov	r0, r1
 801a8ac:	4611      	mov	r1, r2
 801a8ae:	2200      	movs	r2, #0
 801a8b0:	602a      	str	r2, [r5, #0]
 801a8b2:	461a      	mov	r2, r3
 801a8b4:	f7e8 f993 	bl	8002bde <_write>
 801a8b8:	1c43      	adds	r3, r0, #1
 801a8ba:	d102      	bne.n	801a8c2 <_write_r+0x1e>
 801a8bc:	682b      	ldr	r3, [r5, #0]
 801a8be:	b103      	cbz	r3, 801a8c2 <_write_r+0x1e>
 801a8c0:	6023      	str	r3, [r4, #0]
 801a8c2:	bd38      	pop	{r3, r4, r5, pc}
 801a8c4:	20002fdc 	.word	0x20002fdc

0801a8c8 <_close_r>:
 801a8c8:	b538      	push	{r3, r4, r5, lr}
 801a8ca:	4d06      	ldr	r5, [pc, #24]	; (801a8e4 <_close_r+0x1c>)
 801a8cc:	2300      	movs	r3, #0
 801a8ce:	4604      	mov	r4, r0
 801a8d0:	4608      	mov	r0, r1
 801a8d2:	602b      	str	r3, [r5, #0]
 801a8d4:	f7e8 f99f 	bl	8002c16 <_close>
 801a8d8:	1c43      	adds	r3, r0, #1
 801a8da:	d102      	bne.n	801a8e2 <_close_r+0x1a>
 801a8dc:	682b      	ldr	r3, [r5, #0]
 801a8de:	b103      	cbz	r3, 801a8e2 <_close_r+0x1a>
 801a8e0:	6023      	str	r3, [r4, #0]
 801a8e2:	bd38      	pop	{r3, r4, r5, pc}
 801a8e4:	20002fdc 	.word	0x20002fdc

0801a8e8 <_fstat_r>:
 801a8e8:	b538      	push	{r3, r4, r5, lr}
 801a8ea:	4d07      	ldr	r5, [pc, #28]	; (801a908 <_fstat_r+0x20>)
 801a8ec:	2300      	movs	r3, #0
 801a8ee:	4604      	mov	r4, r0
 801a8f0:	4608      	mov	r0, r1
 801a8f2:	4611      	mov	r1, r2
 801a8f4:	602b      	str	r3, [r5, #0]
 801a8f6:	f7e8 f99a 	bl	8002c2e <_fstat>
 801a8fa:	1c43      	adds	r3, r0, #1
 801a8fc:	d102      	bne.n	801a904 <_fstat_r+0x1c>
 801a8fe:	682b      	ldr	r3, [r5, #0]
 801a900:	b103      	cbz	r3, 801a904 <_fstat_r+0x1c>
 801a902:	6023      	str	r3, [r4, #0]
 801a904:	bd38      	pop	{r3, r4, r5, pc}
 801a906:	bf00      	nop
 801a908:	20002fdc 	.word	0x20002fdc

0801a90c <_isatty_r>:
 801a90c:	b538      	push	{r3, r4, r5, lr}
 801a90e:	4d06      	ldr	r5, [pc, #24]	; (801a928 <_isatty_r+0x1c>)
 801a910:	2300      	movs	r3, #0
 801a912:	4604      	mov	r4, r0
 801a914:	4608      	mov	r0, r1
 801a916:	602b      	str	r3, [r5, #0]
 801a918:	f7e8 f999 	bl	8002c4e <_isatty>
 801a91c:	1c43      	adds	r3, r0, #1
 801a91e:	d102      	bne.n	801a926 <_isatty_r+0x1a>
 801a920:	682b      	ldr	r3, [r5, #0]
 801a922:	b103      	cbz	r3, 801a926 <_isatty_r+0x1a>
 801a924:	6023      	str	r3, [r4, #0]
 801a926:	bd38      	pop	{r3, r4, r5, pc}
 801a928:	20002fdc 	.word	0x20002fdc

0801a92c <_lseek_r>:
 801a92c:	b538      	push	{r3, r4, r5, lr}
 801a92e:	4d07      	ldr	r5, [pc, #28]	; (801a94c <_lseek_r+0x20>)
 801a930:	4604      	mov	r4, r0
 801a932:	4608      	mov	r0, r1
 801a934:	4611      	mov	r1, r2
 801a936:	2200      	movs	r2, #0
 801a938:	602a      	str	r2, [r5, #0]
 801a93a:	461a      	mov	r2, r3
 801a93c:	f7e8 f992 	bl	8002c64 <_lseek>
 801a940:	1c43      	adds	r3, r0, #1
 801a942:	d102      	bne.n	801a94a <_lseek_r+0x1e>
 801a944:	682b      	ldr	r3, [r5, #0]
 801a946:	b103      	cbz	r3, 801a94a <_lseek_r+0x1e>
 801a948:	6023      	str	r3, [r4, #0]
 801a94a:	bd38      	pop	{r3, r4, r5, pc}
 801a94c:	20002fdc 	.word	0x20002fdc

0801a950 <memmove>:
 801a950:	4288      	cmp	r0, r1
 801a952:	b510      	push	{r4, lr}
 801a954:	eb01 0402 	add.w	r4, r1, r2
 801a958:	d902      	bls.n	801a960 <memmove+0x10>
 801a95a:	4284      	cmp	r4, r0
 801a95c:	4623      	mov	r3, r4
 801a95e:	d807      	bhi.n	801a970 <memmove+0x20>
 801a960:	1e43      	subs	r3, r0, #1
 801a962:	42a1      	cmp	r1, r4
 801a964:	d008      	beq.n	801a978 <memmove+0x28>
 801a966:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a96a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a96e:	e7f8      	b.n	801a962 <memmove+0x12>
 801a970:	4402      	add	r2, r0
 801a972:	4601      	mov	r1, r0
 801a974:	428a      	cmp	r2, r1
 801a976:	d100      	bne.n	801a97a <memmove+0x2a>
 801a978:	bd10      	pop	{r4, pc}
 801a97a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a97e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a982:	e7f7      	b.n	801a974 <memmove+0x24>

0801a984 <_realloc_r>:
 801a984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a988:	4680      	mov	r8, r0
 801a98a:	4614      	mov	r4, r2
 801a98c:	460e      	mov	r6, r1
 801a98e:	b921      	cbnz	r1, 801a99a <_realloc_r+0x16>
 801a990:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a994:	4611      	mov	r1, r2
 801a996:	f7fe bed1 	b.w	801973c <_malloc_r>
 801a99a:	b92a      	cbnz	r2, 801a9a8 <_realloc_r+0x24>
 801a99c:	f7fe fe62 	bl	8019664 <_free_r>
 801a9a0:	4625      	mov	r5, r4
 801a9a2:	4628      	mov	r0, r5
 801a9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9a8:	f000 f82e 	bl	801aa08 <_malloc_usable_size_r>
 801a9ac:	4284      	cmp	r4, r0
 801a9ae:	4607      	mov	r7, r0
 801a9b0:	d802      	bhi.n	801a9b8 <_realloc_r+0x34>
 801a9b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a9b6:	d812      	bhi.n	801a9de <_realloc_r+0x5a>
 801a9b8:	4621      	mov	r1, r4
 801a9ba:	4640      	mov	r0, r8
 801a9bc:	f7fe febe 	bl	801973c <_malloc_r>
 801a9c0:	4605      	mov	r5, r0
 801a9c2:	2800      	cmp	r0, #0
 801a9c4:	d0ed      	beq.n	801a9a2 <_realloc_r+0x1e>
 801a9c6:	42bc      	cmp	r4, r7
 801a9c8:	4622      	mov	r2, r4
 801a9ca:	4631      	mov	r1, r6
 801a9cc:	bf28      	it	cs
 801a9ce:	463a      	movcs	r2, r7
 801a9d0:	f7fe fe32 	bl	8019638 <memcpy>
 801a9d4:	4631      	mov	r1, r6
 801a9d6:	4640      	mov	r0, r8
 801a9d8:	f7fe fe44 	bl	8019664 <_free_r>
 801a9dc:	e7e1      	b.n	801a9a2 <_realloc_r+0x1e>
 801a9de:	4635      	mov	r5, r6
 801a9e0:	e7df      	b.n	801a9a2 <_realloc_r+0x1e>
	...

0801a9e4 <_read_r>:
 801a9e4:	b538      	push	{r3, r4, r5, lr}
 801a9e6:	4d07      	ldr	r5, [pc, #28]	; (801aa04 <_read_r+0x20>)
 801a9e8:	4604      	mov	r4, r0
 801a9ea:	4608      	mov	r0, r1
 801a9ec:	4611      	mov	r1, r2
 801a9ee:	2200      	movs	r2, #0
 801a9f0:	602a      	str	r2, [r5, #0]
 801a9f2:	461a      	mov	r2, r3
 801a9f4:	f7e8 f8d6 	bl	8002ba4 <_read>
 801a9f8:	1c43      	adds	r3, r0, #1
 801a9fa:	d102      	bne.n	801aa02 <_read_r+0x1e>
 801a9fc:	682b      	ldr	r3, [r5, #0]
 801a9fe:	b103      	cbz	r3, 801aa02 <_read_r+0x1e>
 801aa00:	6023      	str	r3, [r4, #0]
 801aa02:	bd38      	pop	{r3, r4, r5, pc}
 801aa04:	20002fdc 	.word	0x20002fdc

0801aa08 <_malloc_usable_size_r>:
 801aa08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801aa0c:	1f18      	subs	r0, r3, #4
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	bfbc      	itt	lt
 801aa12:	580b      	ldrlt	r3, [r1, r0]
 801aa14:	18c0      	addlt	r0, r0, r3
 801aa16:	4770      	bx	lr

0801aa18 <_init>:
 801aa18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa1a:	bf00      	nop
 801aa1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aa1e:	bc08      	pop	{r3}
 801aa20:	469e      	mov	lr, r3
 801aa22:	4770      	bx	lr

0801aa24 <_fini>:
 801aa24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa26:	bf00      	nop
 801aa28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aa2a:	bc08      	pop	{r3}
 801aa2c:	469e      	mov	lr, r3
 801aa2e:	4770      	bx	lr
